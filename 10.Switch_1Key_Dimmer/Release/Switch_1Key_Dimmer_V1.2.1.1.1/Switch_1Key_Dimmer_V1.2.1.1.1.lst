

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Sep 15 16:39:33 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text136,local,class=CODE,merge=1,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	text138,local,class=CODE,merge=1,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942                           
  1943                           	psect	idataBANK3
  1944  1A2F                     __pidataBANK3:	
  1945                           
  1946                           ;initializer for _VarProduct
  1947  1A2F  3463               	retlw	99
  1948  1A30  3402               	retlw	2
  1949  1A31  3400               	retlw	0
  1950  1A32  3400               	retlw	0
  1951  1A33  3400               	retlw	0
  1952  1A34  3400               	retlw	0
  1953  1A35  3400               	retlw	0
  1954  1A36  3400               	retlw	0
  1955  1A37  3400               	retlw	0
  1956  1A38  3400               	retlw	0
  1957  1A39  3400               	retlw	0
  1958  1A3A  3400               	retlw	0
  1959  1A3B  34FF               	retlw	255
  1960  1A3C  34FF               	retlw	255
  1961  1A3D  34FF               	retlw	255
  1962  1A3E  3400               	retlw	0
  1963  1A3F  3400               	retlw	0
  1964  1A40  3400               	retlw	0
  1965  1A41  3400               	retlw	0
  1966  1A42  3400               	retlw	0
  1967  1A43  3401               	retlw	1
  1968  1A44  3400               	retlw	0
  1969  1A45  3400               	retlw	0
  1970  1A46  3400               	retlw	0
  1971  1A47  3400               	retlw	0
  1972  1A48  3400               	retlw	0
  1973  1A49  3400               	retlw	0
  1974  1A4A  3400               	retlw	0
  1975  1A4B  3400               	retlw	0
  1976  1A4C  3400               	retlw	0
  1977  1A4D  3400               	retlw	0
  1978  1A4E  3400               	retlw	0
  1979                           
  1980                           	psect	stringtext
  1981  1800                     __pstringtext:	
  1982  1800                     _CC2500_registers_address:	
  1983  1800  3403               	retlw	3
  1984  1801  3416               	retlw	22
  1985  1802  3417               	retlw	23
  1986  1803  341E               	retlw	30
  1987  1804  341F               	retlw	31
  1988  1805  3420               	retlw	32
  1989  1806  342A               	retlw	42
  1990  1807  342B               	retlw	43
  1991  1808  340B               	retlw	11
  1992  1809  340C               	retlw	12
  1993  180A  340D               	retlw	13
  1994  180B  340E               	retlw	14
  1995  180C  340F               	retlw	15
  1996  180D  3410               	retlw	16
  1997  180E  3411               	retlw	17
  1998  180F  3412               	retlw	18
  1999  1810  3413               	retlw	19
  2000  1811  3414               	retlw	20
  2001  1812  340A               	retlw	10
  2002  1813  3415               	retlw	21
  2003  1814  3421               	retlw	33
  2004  1815  3422               	retlw	34
  2005  1816  3418               	retlw	24
  2006  1817  3419               	retlw	25
  2007  1818  341A               	retlw	26
  2008  1819  341B               	retlw	27
  2009  181A  341C               	retlw	28
  2010  181B  341D               	retlw	29
  2011  181C  3423               	retlw	35
  2012  181D  3424               	retlw	36
  2013  181E  3425               	retlw	37
  2014  181F  3426               	retlw	38
  2015  1820  3429               	retlw	41
  2016  1821  342C               	retlw	44
  2017  1822  342D               	retlw	45
  2018  1823  342E               	retlw	46
  2019  1824  3400               	retlw	0
  2020  1825  3401               	retlw	1
  2021  1826  3402               	retlw	2
  2022  1827  3407               	retlw	7
  2023  1828  3408               	retlw	8
  2024  1829  3409               	retlw	9
  2025  182A  3406               	retlw	6
  2026  182B  3404               	retlw	4
  2027  182C  3405               	retlw	5
  2028  182D  3427               	retlw	39
  2029  182E  3428               	retlw	40
  2030  182F                     __end_of_CC2500_registers_address:	
  2031  182F                     _CC2500_rfSettings:	
  2032  182F  3407               	retlw	7
  2033  1830  3407               	retlw	7
  2034  1831  3430               	retlw	48
  2035  1832  3487               	retlw	135
  2036  1833  346B               	retlw	107
  2037  1834  34F8               	retlw	248
  2038  1835  347F               	retlw	127
  2039  1836  343F               	retlw	63
  2040  1837  3409               	retlw	9
  2041  1838  3400               	retlw	0
  2042  1839  345C               	retlw	92
  2043  183A  34A7               	retlw	167
  2044  183B  3462               	retlw	98
  2045  183C  3486               	retlw	134
  2046  183D  3483               	retlw	131
  2047  183E  3403               	retlw	3
  2048  183F  3422               	retlw	34
  2049  1840  34F8               	retlw	248
  2050  1841  3400               	retlw	0
  2051  1842  3444               	retlw	68
  2052  1843  34B6               	retlw	182
  2053  1844  3410               	retlw	16
  2054  1845  3418               	retlw	24
  2055  1846  341D               	retlw	29
  2056  1847  341C               	retlw	28
  2057  1848  34C7               	retlw	199
  2058  1849  3400               	retlw	0
  2059  184A  34B2               	retlw	178
  2060  184B  34EA               	retlw	234
  2061  184C  340A               	retlw	10
  2062  184D  3400               	retlw	0
  2063  184E  3411               	retlw	17
  2064  184F  3459               	retlw	89
  2065  1850  3488               	retlw	136
  2066  1851  3431               	retlw	49
  2067  1852  340B               	retlw	11
  2068  1853  342F               	retlw	47
  2069  1854  342E               	retlw	46
  2070  1855  3406               	retlw	6
  2071  1856  3404               	retlw	4
  2072  1857  3405               	retlw	5
  2073  1858  3400               	retlw	0
  2074  1859  3430               	retlw	48
  2075  185A  34D3               	retlw	211
  2076  185B  3491               	retlw	145
  2077  185C  3441               	retlw	65
  2078  185D  3400               	retlw	0
  2079  185E                     __end_of_CC2500_rfSettings:	
  2080  185E                     _CC2500_patable_vaule:	
  2081  185E  34FE               	retlw	254
  2082  185F  34FE               	retlw	254
  2083  1860  34FE               	retlw	254
  2084  1861  34FE               	retlw	254
  2085  1862  34FE               	retlw	254
  2086  1863  34FE               	retlw	254
  2087  1864  34FE               	retlw	254
  2088  1865  34FE               	retlw	254
  2089  1866                     __end_of_CC2500_patable_vaule:	
  2090                           
  2091                           	psect	nvCOMMON
  2092  007D                     __pnvCOMMON:	
  2093  007D                     _TMain:	
  2094  007D                     	ds	1
  2095                           
  2096                           	psect	nvBANK0
  2097  006F                     __pnvBANK0:	
  2098  006F                     _Product:	
  2099  006F                     	ds	1
  2100                           
  2101                           	psect	nvBANK1
  2102  00EA                     __pnvBANK1:	
  2103  00EA                     _Memory:	
  2104  00EA                     	ds	1
  2105  00EB                     _Timer0:	
  2106  00EB                     	ds	1
  2107  000C                     _PORTA	set	12
  2108  000D                     _PORTB	set	13
  2109  000E                     _PORTC	set	14
  2110  0015                     _TMR0	set	21
  2111  005F                     _GIE	set	95
  2112  005C                     _INTE	set	92
  2113  0059                     _INTF	set	89
  2114  005B                     _IOCIE	set	91
  2115  0058                     _IOCIF	set	88
  2116  005E                     _PEIE	set	94
  2117  0060                     _RA0	set	96
  2118  0063                     _RA3	set	99
  2119  0064                     _RA4	set	100
  2120  0066                     _RA6	set	102
  2121  0067                     _RA7	set	103
  2122  0068                     _RB0	set	104
  2123  0069                     _RB1	set	105
  2124  006A                     _RB2	set	106
  2125  006B                     _RB3	set	107
  2126  006C                     _RB4	set	108
  2127  006D                     _RB5	set	109
  2128  0070                     _RC0	set	112
  2129  0071                     _RC1	set	113
  2130  0072                     _RC2	set	114
  2131  0074                     _RC4	set	116
  2132  0075                     _RC5	set	117
  2133  0077                     _RC7	set	119
  2134  005D                     _TMR0IE	set	93
  2135  005A                     _TMR0IF	set	90
  2136  009D                     _ADCON0	set	157
  2137  009E                     _ADCON1	set	158
  2138  009C                     _ADRESH	set	156
  2139  009B                     _ADRESL	set	155
  2140  0095                     _OPTION_REG	set	149
  2141  0099                     _OSCCON	set	153
  2142  008C                     _TRISA	set	140
  2143  008D                     _TRISB	set	141
  2144  008E                     _TRISC	set	142
  2145  04E9                     _GO_nDONE	set	1257
  2146  0117                     _FVRCON	set	279
  2147  010C                     _LATA	set	268
  2148  010D                     _LATB	set	269
  2149  010E                     _LATC	set	270
  2150  018C                     _ANSELA	set	396
  2151  018D                     _ANSELB	set	397
  2152  018E                     _ANSELC	set	398
  2153  0192                     _PMADRH	set	402
  2154  0191                     _PMADRL	set	401
  2155  0196                     _PMCON2	set	406
  2156  0194                     _PMDATH	set	404
  2157  0193                     _PMDATL	set	403
  2158  0CAE                     _CFGS	set	3246
  2159  0CAC                     _FREE	set	3244
  2160  0CAD                     _LWLO	set	3245
  2161  0CA8                     _RD	set	3240
  2162  0CA9                     _WR	set	3241
  2163  0CAA                     _WREN	set	3242
  2164  1068                     _WPUB0	set	4200
  2165  1069                     _WPUB1	set	4201
  2166  106A                     _WPUB2	set	4202
  2167  0396                     _IOCBF	set	918
  2168  0395                     _IOCBN	set	917
  2169  0394                     _IOCBP	set	916
  2170  1CB2                     _IOCBF2	set	7346
  2171                           
  2172                           ; #config settings
  2173  0000                     
  2174                           	psect	cinit
  2175  0018                     start_initialization:	
  2176  0018                     __initialization:	
  2177                           
  2178                           ; Clear objects allocated to BITCOMMON
  2179  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2180                           
  2181                           ; Clear objects allocated to COMMON
  2182  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2183  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2184  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2185  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2186  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2187                           
  2188                           ; Clear objects allocated to BANK0
  2189  001E  01EC               	clrf	__pbssBANK0& (0+127)
  2190  001F  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2191  0020  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2192                           
  2193                           ; Clear objects allocated to BANK1
  2194  0021  30A0               	movlw	low __pbssBANK1
  2195  0022  0084               	movwf	4
  2196  0023  3000               	movlw	high __pbssBANK1
  2197  0024  0085               	movwf	5
  2198  0025  304A               	movlw	74
  2199  0026  31A6  265E  3180   	fcall	clear_ram0
  2200                           
  2201                           ; Clear objects allocated to BANK2
  2202  0029  3020               	movlw	low __pbssBANK2
  2203  002A  0084               	movwf	4
  2204  002B  3001               	movlw	high __pbssBANK2
  2205  002C  0085               	movwf	5
  2206  002D  3040               	movlw	64
  2207  002E  31A6  265E  3180   	fcall	clear_ram0
  2208                           
  2209                           ; Clear objects allocated to BANK3
  2210  0031  30A0               	movlw	low __pbssBANK3
  2211  0032  0084               	movwf	4
  2212  0033  3001               	movlw	high __pbssBANK3
  2213  0034  0085               	movwf	5
  2214  0035  3025               	movlw	37
  2215  0036  31A6  265E  3180   	fcall	clear_ram0
  2216                           
  2217                           ; Clear objects allocated to BANK4
  2218  0039  3020               	movlw	low __pbssBANK4
  2219  003A  0084               	movwf	4
  2220  003B  3002               	movlw	high __pbssBANK4
  2221  003C  0085               	movwf	5
  2222  003D  3047               	movlw	71
  2223  003E  31A6  265E  3180   	fcall	clear_ram0
  2224                           
  2225                           ; Initialize objects allocated to BANK3
  2226  0041  302F               	movlw	low __pidataBANK3
  2227  0042  0084               	movwf	4
  2228  0043  309A               	movlw	(high __pidataBANK3)| (0+128)
  2229  0044  0085               	movwf	5
  2230  0045  30C5               	movlw	low __pdataBANK3
  2231  0046  0086               	movwf	6
  2232  0047  3001               	movlw	high __pdataBANK3
  2233  0048  0087               	movwf	7
  2234  0049  3020               	movlw	32
  2235  004A  31A6  2658         	fcall	init_ram
  2236  004C                     end_of_initialization:	
  2237                           ;End of C runtime variable initialization code
  2238                           
  2239  004C                     __end_of__initialization:	
  2240  004C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2241  004D  0020               	movlb	0
  2242  004E  3194  2C70         	ljmp	_main	;jump to C main() function
  2243                           
  2244                           	psect	bitbssCOMMON
  2245  0380                     __pbitbssCOMMON:	
  2246  0380                     _CC2500_Enable:	
  2247  0380                     	ds	1
  2248  0381                     _Receive_GO:	
  2249  0381                     	ds	1
  2250  0382                     _Receive_OK:	
  2251  0382                     	ds	1
  2252  0383                     _RxStatus:	
  2253  0383                     	ds	1
  2254  0384                     _Transceive_GO:	
  2255  0384                     	ds	1
  2256  0385                     _Transceive_OK:	
  2257  0385                     	ds	1
  2258  0386                     _TxStatus:	
  2259  0386                     	ds	1
  2260                           
  2261                           	psect	bssCOMMON
  2262  0078                     __pbssCOMMON:	
  2263  0078                     _Buz:	
  2264  0078                     	ds	1
  2265  0079                     _DimmerLights11:	
  2266  0079                     	ds	1
  2267  007A                     _PF:	
  2268  007A                     	ds	1
  2269  007B                     _RF:	
  2270  007B                     	ds	1
  2271  007C                     _Temp:	
  2272  007C                     	ds	1
  2273                           
  2274                           	psect	bssBANK0
  2275  006C                     __pbssBANK0:	
  2276  006C                     _DimmerLights:	
  2277  006C                     	ds	1
  2278  006D                     _Sw:	
  2279  006D                     	ds	1
  2280  006E                     _Load:	
  2281  006E                     	ds	1
  2282                           
  2283                           	psect	bssBANK1
  2284  00A0                     __pbssBANK1:	
  2285  00A0                     _RF_Data:	
  2286  00A0                     	ds	21
  2287  00B5                     _RF_Count:	
  2288  00B5                     	ds	2
  2289  00B7                     _CRC:	
  2290  00B7                     	ds	1
  2291  00B8                     _DelayOff:	
  2292  00B8                     	ds	1
  2293  00B9                     _Dimmer:	
  2294  00B9                     	ds	1
  2295  00BA                     _DimmerLightsIntr:	
  2296  00BA                     	ds	1
  2297  00BB                     _LED:	
  2298  00BB                     	ds	1
  2299  00BC                     _RFSW:	
  2300  00BC                     	ds	1
  2301  00BD                     _RSSI:	
  2302  00BD                     	ds	1
  2303  00BE                     _Rx_Length:	
  2304  00BE                     	ds	1
  2305  00BF                     _SPI0Buffer:	
  2306  00BF                     	ds	1
  2307  00C0                     _Tx_Length:	
  2308  00C0                     	ds	1
  2309  00C1                     _r_address:	
  2310  00C1                     	ds	1
  2311  00C2                     _r_data:	
  2312  00C2                     	ds	1
  2313  00C3                     _s_data:	
  2314  00C3                     	ds	1
  2315  00C4                     _PF1:	
  2316  00C4                     	ds	8
  2317  00CC                     _VarTimer0:	
  2318  00CC                     	ds	7
  2319  00D3                     _DlySw1:	
  2320  00D3                     	ds	5
  2321  00D8                     _VarErrLED:	
  2322  00D8                     	ds	4
  2323  00DC                     _VarLED1:	
  2324  00DC                     	ds	4
  2325  00E0                     _VarLED2:	
  2326  00E0                     	ds	4
  2327  00E4                     _Dimmer1:	
  2328  00E4                     	ds	3
  2329  00E7                     _RF1:	
  2330  00E7                     	ds	2
  2331  00E9                     _RFSW1:	
  2332  00E9                     	ds	1
  2333                           
  2334                           	psect	bssBANK2
  2335  0120                     __pbssBANK2:	
  2336  0120                     _VarTMain:	
  2337  0120                     	ds	16
  2338  0130                     _Temp1:	
  2339  0130                     	ds	14
  2340  013E                     _DimmerLights1:	
  2341  013E                     	ds	13
  2342  014B                     _Buz1:	
  2343  014B                     	ds	12
  2344  0157                     _Sw1:	
  2345  0157                     	ds	9
  2346                           
  2347                           	psect	bssBANK3
  2348  01A0                     __pbssBANK3:	
  2349  01A0                     _VarMemory:	
  2350  01A0                     	ds	37
  2351                           
  2352                           	psect	dataBANK3
  2353  01C5                     __pdataBANK3:	
  2354  01C5                     _VarProduct:	
  2355  01C5                     	ds	32
  2356                           
  2357                           	psect	bssBANK4
  2358  0220                     __pbssBANK4:	
  2359  0220                     _Load1:	
  2360  0220                     	ds	71
  2361                           
  2362                           	psect	clrtext
  2363  265E                     clear_ram0:	
  2364                           ;	Called with FSR0 containing the base address, and
  2365                           ;	WREG with the size to clear
  2366                           
  2367  265E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2368  265F                     clrloop0:	
  2369  265F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2370  2660  3101               	addfsr 0,1
  2371  2661  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2372  2662  2E5F               	goto	clrloop0	;have we reached the end yet?
  2373  2663  3400               	retlw	0	;all done for this memory range, return
  2374                           
  2375                           	psect	inittext
  2376  2658                     init_ram:	
  2377  2658  00FE               	movwf	126
  2378  2659                     initloop:	
  2379  2659  0012               	moviw fsr0++
  2380  265A  001E               	movwi fsr1++
  2381  265B  0BFE               	decfsz	126,f
  2382  265C  2E59               	goto	initloop
  2383  265D  3400               	retlw	0
  2384                           
  2385                           	psect	cstackCOMMON
  2386  0071                     __pcstackCOMMON:	
  2387  0071                     ?_CC2500_WriteByte:	
  2388  0071                     ?_CC2500_WriteCommand:	
  2389                           ; 0 bytes @ 0x0
  2390                           
  2391  0071                     ?_CC2500_ReadStatus:	
  2392                           ; 0 bytes @ 0x0
  2393                           
  2394  0071                     ?_CC2500_ReadByte:	
  2395                           ; 0 bytes @ 0x0
  2396                           
  2397  0071                     ?_CC2500_PowerRST:	
  2398                           ; 0 bytes @ 0x0
  2399                           
  2400  0071                     ?_CC2500_InitSetREG:	
  2401                           ; 0 bytes @ 0x0
  2402                           
  2403  0071                     ?_CC2500_InitPATable:	
  2404                           ; 0 bytes @ 0x0
  2405                           
  2406  0071                     ?_CC2500_ClearTXFIFO:	
  2407                           ; 0 bytes @ 0x0
  2408                           
  2409  0071                     ?_CC2500_ClearRXFIFO:	
  2410                           ; 0 bytes @ 0x0
  2411                           
  2412  0071                     ?_CC2500_FrequencyCabr:	
  2413                           ; 0 bytes @ 0x0
  2414                           
  2415  0071                     ?_CC2500_SIDLEMode:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0071                     ?_DlyOff_Initialization:	
  2419                           ; 0 bytes @ 0x0
  2420                           
  2421  0071                     ?_DlyOff_Main:	
  2422                           ; 0 bytes @ 0x0
  2423                           
  2424  0071                     ?_setTxData:	
  2425                           ; 0 bytes @ 0x0
  2426                           
  2427  0071                     ?_setDimmerLights_Initialization:	
  2428                           ; 0 bytes @ 0x0
  2429                           
  2430  0071                     ?_Dimmer_Initialization:	
  2431                           ; 0 bytes @ 0x0
  2432                           
  2433  0071                     ?_setLoad_GO:	
  2434                           ; 0 bytes @ 0x0
  2435                           
  2436  0071                     ?_setDimmerLights_Main:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0071                     ?_setDimmerLights_ERROR:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0071                     ?_setLoad_Count:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0071                     ?_setLED_Initialization:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0071                     ?_setLED_Main:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0071                     ?_MainT_Initialization:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0071                     ?_Mcu_Initialization:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0071                     ?_Flash_Memory_Initialization:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0071                     ?_Temp_Initialization:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0071                     ?_Load_Initialization:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0071                     ?_PowerFault_Initialization:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0071                     ?_Switch_Initialization:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0071                     ?_RF_Initialization:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0071                     ?_getLoad_AD:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0071                     ?_getTemp_AD:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0071                     ?_getPowerFault_AD:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0071                     ?_MainT:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0071                     ?_Flash_Memory_Main:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0071                     ?_Temp_Main:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0071                     ?_Load_Main:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0071                     ?_PowerFault_Main:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0071                     ?_Switch_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0071                     ?_RF_Main:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0071                     ?_setTemp_Enable:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0071                     ?_setLoad_Enable:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0071                     ?_setSw_Enable:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0071                     ?_IO_Set:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0071                     ?_TMR0_Set:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0071                     ?_ADC_Set:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0071                     ?_INT_Set:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0071                     ?_IOC_Set:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0071                     ?_IOC_ISR:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0071                     ??_IOC_ISR:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0071                     ?_TMR0_ISR:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0071                     ?_INT_ISR:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0071                     ?_Flash_Memory_Write:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0071                     ?_Flash_Memory_Modify:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0071                     ?_setLoad_AH_AL_Restore:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0071                     ?_setLoad_Exceptions:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0071                     ?_setTemp_Initialization:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0071                     ?_setTemp_Main:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0071                     ?_setOverTemp_Exceptions:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0071                     ?_setPowerFault_Initialization:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0071                     ?_setPowerFault_Main:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0071                     ?_setPowerFault_Exceptions:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0071                     ?_setRF_Initialization:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0071                     ?_setRF_Main:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0071                     ?_getRxData:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0071                     ?_RF_RxDisable:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0071                     ?_setLog_Code:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0071                     ?_setControl_Lights_Table:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0071                     ?_setRFSW_Control:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0071                     ?_setRFSW_AdjControl:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0071                     ?_setRF_DimmerValue:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0071                     ?_setSw_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0071                     ?_setSw_Main:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0071                     ?_Sw_DimmerOnFunc:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0071                     ?_Sw_DimmerAdjFunc:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0071                     ?_Sw_DimmerOffFunc:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0071                     ?_Buzzer_Initialization:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0071                     ?_Buzzer_Main:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0071                     ?_CC2500_TxData:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0071                     ?_CC2500_RxData:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0071                     ?_CC2500_PowerOnInitial:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0071                     ?_DelayOffPointSelect:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0071                     ?_DelayOff_Initialization:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0071                     ?_DelayOff_Main:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0071                     ?_DimmerLightsPointSelect:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0071                     ?_DimmerLights_Initialization:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0071                     ?_DimmerLights_Close:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0071                     ?_DimmerLights_Main:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0071                     ?_DimmerLights_Exceptions:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0071                     ?_setDimmerLights_AdjRF:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0071                     ?_LedPointSelect:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0071                     ?_LED_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0071                     ?_LED_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0071                     ?_main:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0071                     ?_ISR:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0071                     ?_setDimmerReClock:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0071                     ??_setDimmerReClock:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0071                     ?_setINT_GO:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0071                     ?_Flash_Memory_Unlock:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0071                     ?_Flash_Memory_Erasing:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0071                     ?_RfPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0071                     ?_RfSWPointSelect:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0071                     ?_TouchPower:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0071                     ?_SwPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0071                     ?i1_setLoad_StatusOff:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0071                     ?i1_RfPointSelect:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0071                     ??i1_RfPointSelect:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0071                     ?_DelayTimejudge:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0071                     ?_getDimmerLights_StatusFlag:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0071                     ?_getPercentValue:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0071                     ?_Flash_Memory_Read:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0071                     ?_getTemp_Safe:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0071                     ?_getPF_Safe:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0071                     ?_setPercentValue:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0071                     ?_getLoad_Safe:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0071                     setRF_Initialization@rf:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0071                     i1setLoad_StatusOff@command:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x0
  2738  0071                     	ds	1
  2739  0072                     ??i1_setLoad_StatusOff:	
  2740  0072                     i1setLoad_StatusOff@lights:	
  2741                           ; 0 bytes @ 0x1
  2742                           
  2743  0072                     i1RfPointSelect@rf:	
  2744                           ; 1 bytes @ 0x1
  2745                           
  2746                           
  2747                           ; 1 bytes @ 0x1
  2748  0072                     	ds	1
  2749  0073                     ??_TMR0_ISR:	
  2750  0073                     ?_setRF_ReceiveGO:	
  2751                           ; 0 bytes @ 0x2
  2752                           
  2753  0073                     setRF_ReceiveGO@command:	
  2754                           ; 0 bytes @ 0x2
  2755                           
  2756                           
  2757                           ; 1 bytes @ 0x2
  2758  0073                     	ds	1
  2759  0074                     ??_setRF_ReceiveGO:	
  2760  0074                     setRF_ReceiveGO@rf:	
  2761                           ; 0 bytes @ 0x3
  2762                           
  2763                           
  2764                           ; 1 bytes @ 0x3
  2765  0074                     	ds	1
  2766  0075                     ??_INT_ISR:	
  2767                           
  2768                           ; 0 bytes @ 0x4
  2769  0075                     	ds	2
  2770  0077                     ??_ISR:	
  2771                           
  2772                           ; 0 bytes @ 0x6
  2773  0077                     	ds	1
  2774                           
  2775                           	psect	cstackBANK0
  2776  0020                     __pcstackBANK0:	
  2777  0020                     ??_CC2500_WriteByte:	
  2778  0020                     ??_CC2500_ReadByte:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0020                     ?_DelayTime_1us:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0020                     ??_DelayTimejudge:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0020                     ??_Dimmer_Initialization:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0020                     ??_getDimmerLights_StatusFlag:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0020                     ??_setLoad_GO:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0020                     ?_setLoad_StatusOff:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0020                     ??_setLoad_Count:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ?_setLoad_StatusOn:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_MainT_Initialization:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_setTemp_Enable:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_setLoad_Enable:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_IO_Set:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_TMR0_Set:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_ADC_Set:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_INT_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_IOC_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_Flash_Memory_Read:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_Flash_Memory_Write:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_setLoad_AH_AL_Restore:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_getTemp_Safe:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_getPF_Safe:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_setTemp_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_setPowerFault_Initialization:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setRF_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Buzzer_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_Buzzer_Main:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_DelayOffPointSelect:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_DimmerLightsPointSelect:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_LedPointSelect:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_setINT_GO:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Flash_Memory_Unlock:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_Flash_Memory_Erasing:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_getLoad_Safe:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_RfPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_RfSWPointSelect:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_TouchPower:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_SwPointSelect:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?_getAD:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ?___wmul:	
  2896                           ; 2 bytes @ 0x0
  2897                           
  2898  0020                     ?___lwdiv:	
  2899                           ; 2 bytes @ 0x0
  2900                           
  2901  0020                     ?___ftpack:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     getDimmerLights_StatusFlag@Status:	
  2905                           ; 3 bytes @ 0x0
  2906                           
  2907  0020                     setINT_GO@command:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0020                     getAD@adcon1:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0020                     setLoad_Enable@command:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     setLoad_GO@command:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0020                     setLoad_StatusOn@command:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0020                     setLoad_StatusOff@command:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0020                     setTemp_Enable@command:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     DelayTime_1us@count:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     ___wmul@multiplier:	
  2932                           ; 2 bytes @ 0x0
  2933                           
  2934  0020                     ___lwdiv@divisor:	
  2935                           ; 2 bytes @ 0x0
  2936                           
  2937  0020                     ___ftpack@arg:	
  2938                           ; 2 bytes @ 0x0
  2939                           
  2940                           
  2941                           ; 3 bytes @ 0x0
  2942  0020                     	ds	1
  2943  0021                     ??_setLoad_StatusOff:	
  2944  0021                     ??_setLoad_StatusOn:	
  2945                           ; 0 bytes @ 0x1
  2946                           
  2947  0021                     ??_Mcu_Initialization:	
  2948                           ; 0 bytes @ 0x1
  2949                           
  2950  0021                     ??_Temp_Initialization:	
  2951                           ; 0 bytes @ 0x1
  2952                           
  2953  0021                     ??_PowerFault_Initialization:	
  2954                           ; 0 bytes @ 0x1
  2955                           
  2956  0021                     ??_RF_Initialization:	
  2957                           ; 0 bytes @ 0x1
  2958                           
  2959  0021                     ??_DimmerLights_Close:	
  2960                           ; 0 bytes @ 0x1
  2961                           
  2962  0021                     CC2500_WriteByte@loop_a:	
  2963                           ; 0 bytes @ 0x1
  2964                           
  2965  0021                     CC2500_ReadByte@loop_b:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0021                     DelayOffPointSelect@sw:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0021                     DelayTimejudge@i:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     DimmerLightsPointSelect@lights:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     LedPointSelect@led:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     Flash_Memory_Read@i:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     Flash_Memory_Write@i:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     setLoad_Count@command:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     setLoad_StatusOn@lights:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     setLoad_StatusOff@lights:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     setLoad_AH_AL_Restore@i:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0021                     RfPointSelect@rf:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0021                     RfSWPointSelect@sw:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0021                     SwPointSelect@sw:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007                           
  3008                           ; 1 bytes @ 0x1
  3009  0021                     	ds	1
  3010  0022                     ??_CC2500_WriteCommand:	
  3011  0022                     ??_CC2500_ReadStatus:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setRF_RxStatus:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ??_DelayTime_1us:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     ?_CC2500_WriteREG:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ??_DlyOff_Initialization:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ?_setSw_Status:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_setRFSW_Status:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ?_setDimmerLights_Trigger:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ?_setDimmerLights_Switch:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_setTxData:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ??_setDimmerLights_Initialization:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ?_setDimmerLights_TriggerERROR:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ?_setLED:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ??_setLED_Main:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     ??_Load_Initialization:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     ??_setSw_Enable:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0022                     ?_setRF_Enable:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0022                     ?_setDimmerLights_AdjGo:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0022                     ?_setDimmerLights_TriggerAdj:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0022                     ?_setDimmerLights_Clear:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0022                     ?_setRF_Learn:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0022                     CC2500_WriteREG@value:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0022                     DlyOff_Initialization@sw:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     DelayTimejudge@value:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     setDimmerLights_TriggerERROR@command:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     setDimmerLights_Switch@command:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     setDimmerLights_AdjGo@command:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     setDimmerLights_Trigger@command:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     setDimmerLights_TriggerAdj@command:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     setDimmerLights_Clear@command:	
  3099                           ; 1 bytes @ 0x2
  3100                           
  3101  0022                     setLED@command:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104  0022                     Flash_Memory_Read@address:	
  3105                           ; 1 bytes @ 0x2
  3106                           
  3107  0022                     setRF_Learn@command:	
  3108                           ; 1 bytes @ 0x2
  3109                           
  3110  0022                     setRF_RxStatus@command:	
  3111                           ; 1 bytes @ 0x2
  3112                           
  3113  0022                     setRF_Enable@command:	
  3114                           ; 1 bytes @ 0x2
  3115                           
  3116  0022                     setRFSW_Status@command:	
  3117                           ; 1 bytes @ 0x2
  3118                           
  3119  0022                     setSw_Enable@command:	
  3120                           ; 1 bytes @ 0x2
  3121                           
  3122  0022                     setSw_Status@command:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125  0022                     DelayTime_1us@i:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128  0022                     ___wmul@multiplicand:	
  3129                           ; 2 bytes @ 0x2
  3130                           
  3131  0022                     ___lwdiv@dividend:	
  3132                           ; 2 bytes @ 0x2
  3133                           
  3134                           
  3135                           ; 2 bytes @ 0x2
  3136  0022                     	ds	1
  3137  0023                     ??_setRF_RxStatus:	
  3138  0023                     ??_CC2500_WriteREG:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     ??_setSw_Status:	
  3142                           ; 0 bytes @ 0x3
  3143                           
  3144  0023                     ??_setRFSW_Status:	
  3145                           ; 0 bytes @ 0x3
  3146                           
  3147  0023                     ??_setDimmerLights_Trigger:	
  3148                           ; 0 bytes @ 0x3
  3149                           
  3150  0023                     ??_setDimmerLights_Switch:	
  3151                           ; 0 bytes @ 0x3
  3152                           
  3153  0023                     ??_setDimmerLights_TriggerERROR:	
  3154                           ; 0 bytes @ 0x3
  3155                           
  3156  0023                     ??_setLED:	
  3157                           ; 0 bytes @ 0x3
  3158                           
  3159  0023                     ??_setRF_Enable:	
  3160                           ; 0 bytes @ 0x3
  3161                           
  3162  0023                     ??_DelayOff_Initialization:	
  3163                           ; 0 bytes @ 0x3
  3164                           
  3165  0023                     ?_setDelayOff_GO:	
  3166                           ; 0 bytes @ 0x3
  3167                           
  3168  0023                     ??_setDimmerLights_AdjGo:	
  3169                           ; 0 bytes @ 0x3
  3170                           
  3171  0023                     ??_setDimmerLights_TriggerAdj:	
  3172                           ; 0 bytes @ 0x3
  3173                           
  3174  0023                     ??_setDimmerLights_Clear:	
  3175                           ; 0 bytes @ 0x3
  3176                           
  3177  0023                     ??_getAD:	
  3178                           ; 0 bytes @ 0x3
  3179                           
  3180  0023                     ??_setRF_Learn:	
  3181                           ; 0 bytes @ 0x3
  3182                           
  3183  0023                     CC2500_WriteCommand@command:	
  3184                           ; 0 bytes @ 0x3
  3185                           
  3186  0023                     CC2500_ReadStatus@status_addr:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     setDelayOff_GO@command:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0023                     setDimmerLights_Initialization@lights:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0023                     setDimmerLights_TriggerERROR@lights:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0023                     setDimmerLights_Switch@lights:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0023                     setDimmerLights_AdjGo@lights:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204  0023                     setDimmerLights_Trigger@lights:	
  3205                           ; 1 bytes @ 0x3
  3206                           
  3207  0023                     setDimmerLights_TriggerAdj@lights:	
  3208                           ; 1 bytes @ 0x3
  3209                           
  3210  0023                     setDimmerLights_Clear@lights:	
  3211                           ; 1 bytes @ 0x3
  3212                           
  3213  0023                     setLED@led:	
  3214                           ; 1 bytes @ 0x3
  3215                           
  3216  0023                     getAD@adcon0:	
  3217                           ; 1 bytes @ 0x3
  3218                           
  3219  0023                     Flash_Memory_Read@ret:	
  3220                           ; 1 bytes @ 0x3
  3221                           
  3222  0023                     setRF_Learn@rf:	
  3223                           ; 1 bytes @ 0x3
  3224                           
  3225  0023                     setRF_RxStatus@rf:	
  3226                           ; 1 bytes @ 0x3
  3227                           
  3228  0023                     setTxData@rf:	
  3229                           ; 1 bytes @ 0x3
  3230                           
  3231  0023                     setRF_Enable@rf:	
  3232                           ; 1 bytes @ 0x3
  3233                           
  3234  0023                     setRFSW_Status@sw:	
  3235                           ; 1 bytes @ 0x3
  3236                           
  3237  0023                     setSw_Status@sw:	
  3238                           ; 1 bytes @ 0x3
  3239                           
  3240  0023                     ___ftpack@exp:	
  3241                           ; 1 bytes @ 0x3
  3242                           
  3243                           
  3244                           ; 1 bytes @ 0x3
  3245  0023                     	ds	1
  3246  0024                     ??_CC2500_ClearTXFIFO:	
  3247  0024                     ??_CC2500_ClearRXFIFO:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     ??_CC2500_SIDLEMode:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ?_setDimmerLights:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??_setDimmerLights_ERROR:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ??_setLED_Initialization:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     ??_getLoad_AD:	
  3263                           ; 0 bytes @ 0x4
  3264                           
  3265  0024                     ??_getTemp_AD:	
  3266                           ; 0 bytes @ 0x4
  3267                           
  3268  0024                     ??_getPowerFault_AD:	
  3269                           ; 0 bytes @ 0x4
  3270                           
  3271  0024                     ??_Flash_Memory_Modify:	
  3272                           ; 0 bytes @ 0x4
  3273                           
  3274  0024                     ??_RF_RxDisable:	
  3275                           ; 0 bytes @ 0x4
  3276                           
  3277  0024                     ??_setSw_Initialization:	
  3278                           ; 0 bytes @ 0x4
  3279                           
  3280  0024                     ??_Sw_DimmerAdjFunc:	
  3281                           ; 0 bytes @ 0x4
  3282                           
  3283  0024                     ??_CC2500_TxData:	
  3284                           ; 0 bytes @ 0x4
  3285                           
  3286  0024                     ??_CC2500_RxData:	
  3287                           ; 0 bytes @ 0x4
  3288                           
  3289  0024                     ??_DimmerLights_Initialization:	
  3290                           ; 0 bytes @ 0x4
  3291                           
  3292  0024                     ??___wmul:	
  3293                           ; 0 bytes @ 0x4
  3294                           
  3295  0024                     ??___lwdiv:	
  3296                           ; 0 bytes @ 0x4
  3297                           
  3298  0024                     CC2500_WriteREG@w_addr:	
  3299                           ; 0 bytes @ 0x4
  3300                           
  3301  0024                     setDelayOff_GO@value:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304  0024                     setDimmerLights@status:	
  3305                           ; 1 bytes @ 0x4
  3306                           
  3307  0024                     setLED_Initialization@led:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310  0024                     setLED_Main@led:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313  0024                     RF_RxDisable@rf:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316  0024                     setSw_Initialization@sw:	
  3317                           ; 1 bytes @ 0x4
  3318                           
  3319  0024                     Sw_DimmerAdjFunc@sw:	
  3320                           ; 1 bytes @ 0x4
  3321                           
  3322  0024                     ___ftpack@sign:	
  3323                           ; 1 bytes @ 0x4
  3324                           
  3325  0024                     DelayTime_1us@j:	
  3326                           ; 1 bytes @ 0x4
  3327                           
  3328  0024                     ___wmul@product:	
  3329                           ; 2 bytes @ 0x4
  3330                           
  3331                           
  3332                           ; 2 bytes @ 0x4
  3333  0024                     	ds	1
  3334  0025                     ??_CC2500_InitSetREG:	
  3335  0025                     ??_CC2500_InitPATable:	
  3336                           ; 0 bytes @ 0x5
  3337                           
  3338  0025                     ??_setDimmerLights:	
  3339                           ; 0 bytes @ 0x5
  3340                           
  3341  0025                     ??_Switch_Initialization:	
  3342                           ; 0 bytes @ 0x5
  3343                           
  3344  0025                     ??___ftpack:	
  3345                           ; 0 bytes @ 0x5
  3346                           
  3347  0025                     ??_setDelayOff_GO:	
  3348                           ; 0 bytes @ 0x5
  3349                           
  3350  0025                     ??_LED_Initialization:	
  3351                           ; 0 bytes @ 0x5
  3352                           
  3353  0025                     ??_LED_Main:	
  3354                           ; 0 bytes @ 0x5
  3355                           
  3356  0025                     CC2500_TxData@loop_e:	
  3357                           ; 0 bytes @ 0x5
  3358                           
  3359  0025                     CC2500_RxData@loop_f:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362  0025                     setDimmerLights_ERROR@lights:	
  3363                           ; 1 bytes @ 0x5
  3364                           
  3365  0025                     ___lwdiv@quotient:	
  3366                           ; 1 bytes @ 0x5
  3367                           
  3368                           
  3369                           ; 2 bytes @ 0x5
  3370  0025                     	ds	1
  3371  0026                     ??_CC2500_PowerRST:	
  3372  0026                     ??_CC2500_FrequencyCabr:	
  3373                           ; 0 bytes @ 0x6
  3374                           
  3375  0026                     ?_setBuz:	
  3376                           ; 0 bytes @ 0x6
  3377                           
  3378  0026                     CC2500_InitSetREG@temp1:	
  3379                           ; 0 bytes @ 0x6
  3380                           
  3381  0026                     CC2500_InitPATable@temp:	
  3382                           ; 1 bytes @ 0x6
  3383                           
  3384  0026                     setDimmerLights@lights:	
  3385                           ; 1 bytes @ 0x6
  3386                           
  3387  0026                     Flash_Memory_Modify@i:	
  3388                           ; 1 bytes @ 0x6
  3389                           
  3390  0026                     setBuz@time:	
  3391                           ; 1 bytes @ 0x6
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x6
  3395  0026                     	ds	1
  3396  0027                     ??_Flash_Memory_Main:	
  3397  0027                     CC2500_InitSetREG@temp2:	
  3398                           ; 0 bytes @ 0x7
  3399                           
  3400  0027                     CC2500_InitPATable@loop_d:	
  3401                           ; 1 bytes @ 0x7
  3402                           
  3403  0027                     setDelayOff_GO@sw:	
  3404                           ; 1 bytes @ 0x7
  3405                           
  3406  0027                     ___lwdiv@counter:	
  3407                           ; 1 bytes @ 0x7
  3408                           
  3409                           
  3410                           ; 1 bytes @ 0x7
  3411  0027                     	ds	1
  3412  0028                     ??_setBuz:	
  3413  0028                     ?___awtoft:	
  3414                           ; 0 bytes @ 0x8
  3415                           
  3416  0028                     CC2500_InitSetREG@loop_c:	
  3417                           ; 3 bytes @ 0x8
  3418                           
  3419  0028                     getTemp_AD@channel:	
  3420                           ; 1 bytes @ 0x8
  3421                           
  3422  0028                     getPowerFault_AD@channel:	
  3423                           ; 1 bytes @ 0x8
  3424                           
  3425  0028                     ___awtoft@c:	
  3426                           ; 1 bytes @ 0x8
  3427                           
  3428                           
  3429                           ; 2 bytes @ 0x8
  3430  0028                     	ds	1
  3431  0029                     ??_CC2500_PowerOnInitial:	
  3432  0029                     setBuz@count:	
  3433                           ; 0 bytes @ 0x9
  3434                           
  3435  0029                     getLoad_AD@channel:	
  3436                           ; 1 bytes @ 0x9
  3437                           
  3438                           
  3439                           ; 1 bytes @ 0x9
  3440  0029                     	ds	1
  3441  002A                     ??_MainT:	
  3442  002A                     ??_setLog_Code:	
  3443                           ; 0 bytes @ 0xA
  3444                           
  3445  002A                     ??_DimmerLights_Exceptions:	
  3446                           ; 0 bytes @ 0xA
  3447                           
  3448  002A                     DimmerLights_Exceptions@status:	
  3449                           ; 0 bytes @ 0xA
  3450                           
  3451  002A                     getLoad_AD@j:	
  3452                           ; 1 bytes @ 0xA
  3453                           
  3454                           
  3455                           ; 1 bytes @ 0xA
  3456  002A                     	ds	1
  3457  002B                     ??_setLoad_Exceptions:	
  3458  002B                     ??_setOverTemp_Exceptions:	
  3459                           ; 0 bytes @ 0xB
  3460                           
  3461  002B                     ??_setPowerFault_Exceptions:	
  3462                           ; 0 bytes @ 0xB
  3463                           
  3464  002B                     ??___awtoft:	
  3465                           ; 0 bytes @ 0xB
  3466                           
  3467  002B                     getLoad_AD@i:	
  3468                           ; 0 bytes @ 0xB
  3469                           
  3470  002B                     setLog_Code@rf:	
  3471                           ; 1 bytes @ 0xB
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0xB
  3475  002B                     	ds	1
  3476  002C                     setLoad_Exceptions@command:	
  3477  002C                     setOverTemp_Exceptions@command:	
  3478                           ; 1 bytes @ 0xC
  3479                           
  3480  002C                     setPowerFault_Exceptions@command:	
  3481                           ; 1 bytes @ 0xC
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0xC
  3485  002C                     	ds	1
  3486  002D                     ??_Load_Main:	
  3487  002D                     ??_setTemp_Main:	
  3488                           ; 0 bytes @ 0xD
  3489                           
  3490  002D                     ??_setPowerFault_Main:	
  3491                           ; 0 bytes @ 0xD
  3492                           
  3493  002D                     ___awtoft@sign:	
  3494                           ; 0 bytes @ 0xD
  3495                           
  3496                           
  3497                           ; 1 bytes @ 0xD
  3498  002D                     	ds	1
  3499  002E                     ?___ftdiv:	
  3500  002E                     ?___ftmul:	
  3501                           ; 3 bytes @ 0xE
  3502                           
  3503  002E                     ___ftdiv@f2:	
  3504                           ; 3 bytes @ 0xE
  3505                           
  3506  002E                     ___ftmul@f1:	
  3507                           ; 3 bytes @ 0xE
  3508                           
  3509                           
  3510                           ; 3 bytes @ 0xE
  3511  002E                     	ds	1
  3512  002F                     ??_PowerFault_Main:	
  3513                           
  3514                           ; 0 bytes @ 0xF
  3515  002F                     	ds	1
  3516  0030                     ??_Temp_Main:	
  3517                           
  3518                           ; 0 bytes @ 0x10
  3519  0030                     	ds	1
  3520  0031                     Load_Main@i:	
  3521  0031                     ___ftdiv@f1:	
  3522                           ; 1 bytes @ 0x11
  3523                           
  3524  0031                     ___ftmul@f2:	
  3525                           ; 3 bytes @ 0x11
  3526                           
  3527                           
  3528                           ; 3 bytes @ 0x11
  3529  0031                     	ds	3
  3530  0034                     ??___ftdiv:	
  3531  0034                     ??___ftmul:	
  3532                           ; 0 bytes @ 0x14
  3533                           
  3534                           
  3535                           ; 0 bytes @ 0x14
  3536  0034                     	ds	4
  3537  0038                     ___ftdiv@cntr:	
  3538  0038                     ___ftmul@exp:	
  3539                           ; 1 bytes @ 0x18
  3540                           
  3541                           
  3542                           ; 1 bytes @ 0x18
  3543  0038                     	ds	1
  3544  0039                     ___ftdiv@f3:	
  3545  0039                     ___ftmul@f3_as_product:	
  3546                           ; 3 bytes @ 0x19
  3547                           
  3548                           
  3549                           ; 3 bytes @ 0x19
  3550  0039                     	ds	3
  3551  003C                     ___ftdiv@exp:	
  3552  003C                     ___ftmul@cntr:	
  3553                           ; 1 bytes @ 0x1C
  3554                           
  3555                           
  3556                           ; 1 bytes @ 0x1C
  3557  003C                     	ds	1
  3558  003D                     ___ftdiv@sign:	
  3559  003D                     ___ftmul@sign:	
  3560                           ; 1 bytes @ 0x1D
  3561                           
  3562                           
  3563                           ; 1 bytes @ 0x1D
  3564  003D                     	ds	1
  3565  003E                     ?___ftadd:	
  3566  003E                     ___ftadd@f1:	
  3567                           ; 3 bytes @ 0x1E
  3568                           
  3569                           
  3570                           ; 3 bytes @ 0x1E
  3571  003E                     	ds	3
  3572  0041                     ___ftadd@f2:	
  3573                           
  3574                           ; 3 bytes @ 0x21
  3575  0041                     	ds	3
  3576  0044                     ??___ftadd:	
  3577                           
  3578                           ; 0 bytes @ 0x24
  3579  0044                     	ds	4
  3580  0048                     ___ftadd@sign:	
  3581                           
  3582                           ; 1 bytes @ 0x28
  3583  0048                     	ds	1
  3584  0049                     ___ftadd@exp2:	
  3585                           
  3586                           ; 1 bytes @ 0x29
  3587  0049                     	ds	1
  3588  004A                     ___ftadd@exp1:	
  3589                           
  3590                           ; 1 bytes @ 0x2A
  3591  004A                     	ds	1
  3592  004B                     ?___fttol:	
  3593  004B                     ___fttol@f1:	
  3594                           ; 4 bytes @ 0x2B
  3595                           
  3596                           
  3597                           ; 3 bytes @ 0x2B
  3598  004B                     	ds	4
  3599  004F                     ??___fttol:	
  3600                           
  3601                           ; 0 bytes @ 0x2F
  3602  004F                     	ds	4
  3603  0053                     ___fttol@sign1:	
  3604                           
  3605                           ; 1 bytes @ 0x33
  3606  0053                     	ds	1
  3607  0054                     ___fttol@lval:	
  3608                           
  3609                           ; 4 bytes @ 0x34
  3610  0054                     	ds	4
  3611  0058                     ___fttol@exp1:	
  3612                           
  3613                           ; 1 bytes @ 0x38
  3614  0058                     	ds	1
  3615  0059                     ??_getPercentValue:	
  3616  0059                     ??_setPercentValue:	
  3617                           ; 0 bytes @ 0x39
  3618                           
  3619  0059                     setPercentValue@value:	
  3620                           ; 0 bytes @ 0x39
  3621                           
  3622                           
  3623                           ; 1 bytes @ 0x39
  3624  0059                     	ds	1
  3625  005A                     setPercentValue@i:	
  3626                           
  3627                           ; 3 bytes @ 0x3A
  3628  005A                     	ds	1
  3629  005B                     getPercentValue@value:	
  3630                           
  3631                           ; 1 bytes @ 0x3B
  3632  005B                     	ds	1
  3633  005C                     getPercentValue@i:	
  3634                           
  3635                           ; 3 bytes @ 0x3C
  3636  005C                     	ds	1
  3637  005D                     ?_setRF_DimmerLights:	
  3638  005D                     ??_Flash_Memory_Initialization:	
  3639                           ; 0 bytes @ 0x3D
  3640                           
  3641  005D                     setRF_DimmerLights@on:	
  3642                           ; 0 bytes @ 0x3D
  3643                           
  3644                           
  3645                           ; 1 bytes @ 0x3D
  3646  005D                     	ds	1
  3647  005E                     ??_setRF_DimmerLights:	
  3648  005E                     Flash_Memory_Initialization@i:	
  3649                           ; 0 bytes @ 0x3E
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0x3E
  3653  005E                     	ds	1
  3654  005F                     ??_setDimmerLights_AdjRF:	
  3655                           
  3656                           ; 0 bytes @ 0x3F
  3657  005F                     	ds	1
  3658  0060                     setDimmerLights_AdjRF@lights:	
  3659  0060                     setRF_DimmerLights@status:	
  3660                           ; 1 bytes @ 0x40
  3661                           
  3662                           
  3663                           ; 1 bytes @ 0x40
  3664  0060                     	ds	1
  3665  0061                     ??_setRF_DimmerValue:	
  3666  0061                     setRF_DimmerLights@lights:	
  3667                           ; 0 bytes @ 0x41
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0x41
  3671  0061                     	ds	1
  3672  0062                     ??_DlyOff_Main:	
  3673  0062                     ?_setDimmerLights_Adj:	
  3674                           ; 0 bytes @ 0x42
  3675                           
  3676  0062                     ??_setRFSW_Control:	
  3677                           ; 0 bytes @ 0x42
  3678                           
  3679  0062                     ??_Sw_DimmerOnFunc:	
  3680                           ; 0 bytes @ 0x42
  3681                           
  3682  0062                     ??_Sw_DimmerOffFunc:	
  3683                           ; 0 bytes @ 0x42
  3684                           
  3685  0062                     setDimmerLights_Adj@status:	
  3686                           ; 0 bytes @ 0x42
  3687                           
  3688  0062                     Sw_DimmerOnFunc@Idle:	
  3689                           ; 1 bytes @ 0x42
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x42
  3693  0062                     	ds	1
  3694  0063                     ??_setDimmerLights_Adj:	
  3695  0063                     setRFSW_Control@sw:	
  3696                           ; 0 bytes @ 0x43
  3697                           
  3698  0063                     setRF_DimmerValue@lights:	
  3699                           ; 1 bytes @ 0x43
  3700                           
  3701  0063                     Sw_DimmerOnFunc@sw:	
  3702                           ; 1 bytes @ 0x43
  3703                           
  3704                           
  3705                           ; 1 bytes @ 0x43
  3706  0063                     	ds	1
  3707  0064                     ??_setRFSW_AdjControl:	
  3708  0064                     DlyOff_Main@sw:	
  3709                           ; 0 bytes @ 0x44
  3710                           
  3711  0064                     setDimmerLights_Adj@lights:	
  3712                           ; 1 bytes @ 0x44
  3713                           
  3714  0064                     Sw_DimmerOffFunc@sw:	
  3715                           ; 1 bytes @ 0x44
  3716                           
  3717                           
  3718                           ; 1 bytes @ 0x44
  3719  0064                     	ds	1
  3720  0065                     ??_setDimmerLights_Main:	
  3721  0065                     ??_setSw_Main:	
  3722                           ; 0 bytes @ 0x45
  3723                           
  3724  0065                     ??_DelayOff_Main:	
  3725                           ; 0 bytes @ 0x45
  3726                           
  3727  0065                     setDimmerLights_Main@clear:	
  3728                           ; 0 bytes @ 0x45
  3729                           
  3730                           
  3731                           ; 1 bytes @ 0x45
  3732  0065                     	ds	1
  3733  0066                     setDimmerLights_Main@lights:	
  3734  0066                     setRFSW_AdjControl@sw:	
  3735                           ; 1 bytes @ 0x46
  3736                           
  3737                           
  3738                           ; 1 bytes @ 0x46
  3739  0066                     	ds	1
  3740  0067                     ??_setControl_Lights_Table:	
  3741  0067                     ??_DimmerLights_Main:	
  3742                           ; 0 bytes @ 0x47
  3743                           
  3744  0067                     setControl_Lights_Table@rf:	
  3745                           ; 0 bytes @ 0x47
  3746                           
  3747  0067                     _setSw_Main$4560:	
  3748                           ; 1 bytes @ 0x47
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x47
  3752  0067                     	ds	1
  3753  0068                     ??_getRxData:	
  3754  0068                     getRxData@rf:	
  3755                           ; 0 bytes @ 0x48
  3756                           
  3757  0068                     setSw_Main@sw:	
  3758                           ; 1 bytes @ 0x48
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0x48
  3762  0068                     	ds	1
  3763  0069                     ??_Switch_Main:	
  3764  0069                     ??_setRF_Main:	
  3765                           ; 0 bytes @ 0x49
  3766                           
  3767                           
  3768                           ; 0 bytes @ 0x49
  3769  0069                     	ds	1
  3770  006A                     setRF_Main@rf:	
  3771                           
  3772                           ; 1 bytes @ 0x4A
  3773  006A                     	ds	1
  3774  006B                     _setRF_Main$4214:	
  3775                           
  3776                           ; 1 bytes @ 0x4B
  3777  006B                     	ds	1
  3778  006C                     ??_RF_Main:	
  3779  006C                     ??_main:	
  3780                           ; 0 bytes @ 0x4C
  3781                           
  3782                           
  3783                           	psect	maintext
  3784  1470                     __pmaintext:	
  3785                           ; 0 bytes @ 0x4C
  3786 ;;
  3787 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3788 ;;
  3789 ;; *************** function _main *****************
  3790 ;; Defined at:
  3791 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.1
      +.1.1\Release\main.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;		None               void
  3798 ;; Registers used:
  3799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 17F/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;Total ram usage:        0 bytes
  3810 ;; Hardware stack levels required when called:   14
  3811 ;; This function calls:
  3812 ;;		_Buzzer_Initialization
  3813 ;;		_Buzzer_Main
  3814 ;;		_CC2500_PowerOnInitial
  3815 ;;		_DelayOff_Initialization
  3816 ;;		_DelayOff_Main
  3817 ;;		_DimmerLights_Initialization
  3818 ;;		_DimmerLights_Main
  3819 ;;		_Flash_Memory_Initialization
  3820 ;;		_Flash_Memory_Main
  3821 ;;		_LED_Initialization
  3822 ;;		_LED_Main
  3823 ;;		_Load_Initialization
  3824 ;;		_Load_Main
  3825 ;;		_MainT
  3826 ;;		_MainT_Initialization
  3827 ;;		_Mcu_Initialization
  3828 ;;		_PowerFault_Initialization
  3829 ;;		_PowerFault_Main
  3830 ;;		_RF_Initialization
  3831 ;;		_RF_Main
  3832 ;;		_Switch_Initialization
  3833 ;;		_Switch_Main
  3834 ;;		_Temp_Initialization
  3835 ;;		_Temp_Main
  3836 ;;		_getLoad_AD
  3837 ;;		_getPowerFault_AD
  3838 ;;		_getTemp_AD
  3839 ;; This function is called by:
  3840 ;;		Startup code after reset
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           
  3845                           ;psect for function _main
  3846  1470                     _main:	
  3847                           
  3848                           ;main.c: 9: MainT_Initialization();
  3849                           
  3850                           ;incstack = 0
  3851                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3852  1470  31A6  26AC  3194   	fcall	_MainT_Initialization
  3853                           
  3854                           ;main.c: 10: Mcu_Initialization();
  3855  1473  3199  2159  3194   	fcall	_Mcu_Initialization
  3856                           
  3857                           ;main.c: 11: Flash_Memory_Initialization();
  3858  1476  318E  2614  3194   	fcall	_Flash_Memory_Initialization
  3859                           
  3860                           ;main.c: 12: LED_Initialization();
  3861  1479  31A7  2779  3194   	fcall	_LED_Initialization
  3862                           
  3863                           ;main.c: 13: Buzzer_Initialization();
  3864  147C  31A6  26B6  3194   	fcall	_Buzzer_Initialization
  3865                           
  3866                           ;main.c: 15: ;;
  3867                           ;main.c: 16: Temp_Initialization();
  3868  147F  31A6  262B  3194   	fcall	_Temp_Initialization
  3869                           
  3870                           ;main.c: 17: Load_Initialization();
  3871  1482  31A7  2791  3194   	fcall	_Load_Initialization
  3872                           
  3873                           ;main.c: 18: PowerFault_Initialization();
  3874  1485  31A6  2625  3194   	fcall	_PowerFault_Initialization
  3875                           
  3876                           ;main.c: 19: DelayOff_Initialization();
  3877  1488  31A6  263D  3194   	fcall	_DelayOff_Initialization
  3878                           
  3879                           ;main.c: 21: DimmerLights_Initialization();
  3880  148B  31A7  2755  3194   	fcall	_DimmerLights_Initialization
  3881                           
  3882                           ;main.c: 22: ;;
  3883                           ;main.c: 23: ;;
  3884                           ;main.c: 24: ;;
  3885                           ;main.c: 26: Switch_Initialization();
  3886  148E  31A6  2699  3194   	fcall	_Switch_Initialization
  3887                           
  3888                           ;main.c: 27: RF_Initialization();
  3889  1491  31A6  2645  3194   	fcall	_RF_Initialization
  3890                           
  3891                           ;main.c: 28: CC2500_PowerOnInitial();
  3892  1494  3199  2119  3194   	fcall	_CC2500_PowerOnInitial
  3893  1497                     l9524:	
  3894                           ;main.c: 30: while(1)
  3895                           
  3896                           
  3897                           ;main.c: 31: {
  3898                           ;main.c: 32: if(TMain->PowerON)
  3899  1497  087D               	movf	_TMain,w
  3900  1498  0086               	movwf	6
  3901  1499  3001               	movlw	1	; select bank2/3
  3902  149A  0087               	movwf	7
  3903  149B  1C01               	btfss	1,0
  3904  149C  2CAC               	goto	l9528
  3905                           
  3906                           ;main.c: 33: {
  3907                           ;main.c: 35: ;;
  3908                           ;main.c: 39: getLoad_AD(0x05);
  3909  149D  3005               	movlw	5
  3910  149E  318A  2286  3194   	fcall	_getLoad_AD
  3911                           
  3912                           ;main.c: 43: getTemp_AD(0x09);
  3913  14A1  3009               	movlw	9
  3914  14A2  3194  2404  3194   	fcall	_getTemp_AD
  3915                           
  3916                           ;main.c: 47: getPowerFault_AD(0x11);
  3917  14A5  3011               	movlw	17
  3918  14A6  319D  25AA  3194   	fcall	_getPowerFault_AD
  3919                           
  3920                           ;main.c: 59: Buzzer_Main();
  3921  14A9  318B  231C  3194   	fcall	_Buzzer_Main
  3922  14AC                     l9528:	
  3923                           
  3924                           ;main.c: 61: }
  3925                           ;main.c: 63: if(TMain->T0_Timerout)
  3926  14AC  087D               	movf	_TMain,w
  3927  14AD  0086               	movwf	6
  3928  14AE  3001               	movlw	1	; select bank2/3
  3929  14AF  0087               	movwf	7
  3930  14B0  1C81               	btfss	1,1
  3931  14B1  2C97               	goto	l9524
  3932                           
  3933                           ;main.c: 64: {
  3934                           ;main.c: 65: TMain->T0_Timerout = 0;
  3935  14B2  087D               	movf	_TMain,w
  3936  14B3  0086               	movwf	6
  3937  14B4  3001               	movlw	1	; select bank2/3
  3938  14B5  0087               	movwf	7
  3939  14B6  1081               	bcf	1,1
  3940                           
  3941                           ;main.c: 66: MainT();
  3942  14B7  3196  269C  3194   	fcall	_MainT
  3943                           
  3944                           ;main.c: 67: if(TMain->PowerON)
  3945  14BA  087D               	movf	_TMain,w
  3946  14BB  0086               	movwf	6
  3947  14BC  3001               	movlw	1	; select bank2/3
  3948  14BD  0087               	movwf	7
  3949  14BE  1C01               	btfss	1,0
  3950  14BF  2C97               	goto	l9524
  3951                           
  3952                           ;main.c: 68: {
  3953                           ;main.c: 69: Flash_Memory_Main();
  3954  14C0  319F  272C  3194   	fcall	_Flash_Memory_Main
  3955                           
  3956                           ;main.c: 71: LED_Main();
  3957  14C3  31A7  2785  3194   	fcall	_LED_Main
  3958                           
  3959                           ;main.c: 73: ;;
  3960                           ;main.c: 74: Temp_Main();
  3961  14C6  31A6  262E  3194   	fcall	_Temp_Main
  3962                           
  3963                           ;main.c: 75: Load_Main();
  3964  14C9  3180  2050  3194   	fcall	_Load_Main
  3965                           
  3966                           ;main.c: 76: PowerFault_Main();
  3967  14CC  31A6  2628  3194   	fcall	_PowerFault_Main
  3968                           
  3969                           ;main.c: 78: ;;
  3970                           ;main.c: 79: DimmerLights_Main();
  3971  14CF  31A6  266B  3194   	fcall	_DimmerLights_Main
  3972                           
  3973                           ;main.c: 80: Switch_Main();
  3974  14D2  3198  2066  3194   	fcall	_Switch_Main
  3975                           
  3976                           ;main.c: 81: ;;
  3977                           ;main.c: 82: ;;
  3978                           ;main.c: 84: RF_Main();
  3979  14D5  31A6  2649  3194   	fcall	_RF_Main
  3980                           
  3981                           ;main.c: 85: DelayOff_Main();
  3982  14D8  31A6  2641  3194   	fcall	_DelayOff_Main
  3983  14DB  2C97               	goto	l9524
  3984  14DC                     __end_of_main:	
  3985                           
  3986                           	psect	text1
  3987  1404                     __ptext1:	
  3988 ;; *************** function _getTemp_AD *****************
  3989 ;; Defined at:
  3990 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverTemperature_B1.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  channel         1    wreg     unsigned char 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  channel         1    8[BANK0 ] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;		None               void
  3997 ;; Registers used:
  3998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4006 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4007 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;Total ram usage:        5 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    5
  4011 ;; This function calls:
  4012 ;;		_getAD
  4013 ;; This function is called by:
  4014 ;;		_main
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           
  4019                           ;psect for function _getTemp_AD
  4020  1404                     _getTemp_AD:	
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4024                           ;getTemp_AD@channel stored from wreg
  4025  1404  0020               	movlb	0	; select bank0
  4026  1405  00A8               	movwf	getTemp_AD@channel
  4027                           
  4028                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4029  1406  087C               	movf	_Temp,w
  4030  1407  0086               	movwf	6
  4031  1408  3001               	movlw	1	; select bank2/3
  4032  1409  0087               	movwf	7
  4033  140A  1D01               	btfss	1,2
  4034  140B  0008               	return
  4035                           
  4036                           ;OverTemperature_B1.c: 38: {
  4037                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4038  140C  30F0               	movlw	240
  4039  140D  00A4               	movwf	??_getTemp_AD
  4040  140E  0824               	movf	??_getTemp_AD,w
  4041  140F  00A0               	movwf	getAD@adcon1
  4042  1410  0828               	movf	getTemp_AD@channel,w
  4043  1411  3199  2143  3194   	fcall	_getAD
  4044  1414  087C               	movf	_Temp,w
  4045  1415  3E0A               	addlw	10
  4046  1416  0086               	movwf	6
  4047  1417  3001               	movlw	1	; select bank2/3
  4048  1418  0087               	movwf	7
  4049  1419  0020               	movlb	0	; select bank0
  4050  141A  0820               	movf	?_getAD,w
  4051  141B  3FC0               	movwi [0]fsr1
  4052  141C  0821               	movf	?_getAD+1,w
  4053  141D  3FC1               	movwi [1]fsr1
  4054                           
  4055                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4056  141E  087C               	movf	_Temp,w
  4057  141F  3E0A               	addlw	10
  4058  1420  0086               	movwf	6
  4059  1421  3001               	movlw	1	; select bank2/3
  4060  1422  0087               	movwf	7
  4061  1423  3F40               	moviw [0]fsr1
  4062  1424  00A4               	movwf	??_getTemp_AD
  4063  1425  3F41               	moviw [1]fsr1
  4064  1426  00A5               	movwf	??_getTemp_AD+1
  4065  1427  087C               	movf	_Temp,w
  4066  1428  3E06               	addlw	6
  4067  1429  0086               	movwf	6
  4068  142A  3001               	movlw	1	; select bank2/3
  4069  142B  0087               	movwf	7
  4070  142C  3F40               	moviw [0]fsr1
  4071  142D  00A6               	movwf	??_getTemp_AD+2
  4072  142E  3F41               	moviw [1]fsr1
  4073  142F  00A7               	movwf	??_getTemp_AD+3
  4074  1430  0825               	movf	??_getTemp_AD+1,w
  4075  1431  0227               	subwf	??_getTemp_AD+3,w
  4076  1432  1D03               	skipz
  4077  1433  2C36               	goto	u9115
  4078  1434  0824               	movf	??_getTemp_AD,w
  4079  1435  0226               	subwf	??_getTemp_AD+2,w
  4080  1436                     u9115:	
  4081  1436  1803               	skipnc
  4082  1437  2C47               	goto	l9316
  4083                           
  4084                           ;OverTemperature_B1.c: 41: {
  4085                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4086  1438  087C               	movf	_Temp,w
  4087  1439  3E0A               	addlw	10
  4088  143A  0086               	movwf	6
  4089  143B  3001               	movlw	1	; select bank2/3
  4090  143C  0087               	movwf	7
  4091  143D  087C               	movf	_Temp,w
  4092  143E  3E06               	addlw	6
  4093  143F  0084               	movwf	4
  4094  1440  3001               	movlw	1	; select bank2/3
  4095  1441  0085               	movwf	5
  4096  1442  3F40               	moviw [0]fsr1
  4097  1443  3F80               	movwi [0]fsr0
  4098  1444  3F41               	moviw [1]fsr1
  4099  1445  3F81               	movwi [1]fsr0
  4100                           
  4101                           ;OverTemperature_B1.c: 43: }
  4102  1446  0008               	return
  4103  1447                     l9316:	
  4104                           
  4105                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4106  1447  087C               	movf	_Temp,w
  4107  1448  3E0A               	addlw	10
  4108  1449  0086               	movwf	6
  4109  144A  3001               	movlw	1	; select bank2/3
  4110  144B  0087               	movwf	7
  4111  144C  3F40               	moviw [0]fsr1
  4112  144D  00A4               	movwf	??_getTemp_AD
  4113  144E  3F41               	moviw [1]fsr1
  4114  144F  00A5               	movwf	??_getTemp_AD+1
  4115  1450  087C               	movf	_Temp,w
  4116  1451  3E08               	addlw	8
  4117  1452  0086               	movwf	6
  4118  1453  3001               	movlw	1	; select bank2/3
  4119  1454  0087               	movwf	7
  4120  1455  3F40               	moviw [0]fsr1
  4121  1456  00A6               	movwf	??_getTemp_AD+2
  4122  1457  3F41               	moviw [1]fsr1
  4123  1458  00A7               	movwf	??_getTemp_AD+3
  4124  1459  0825               	movf	??_getTemp_AD+1,w
  4125  145A  0227               	subwf	??_getTemp_AD+3,w
  4126  145B  1D03               	skipz
  4127  145C  2C5F               	goto	u9125
  4128  145D  0824               	movf	??_getTemp_AD,w
  4129  145E  0226               	subwf	??_getTemp_AD+2,w
  4130  145F                     u9125:	
  4131  145F  1803               	skipnc
  4132  1460  0008               	return
  4133                           
  4134                           ;OverTemperature_B1.c: 45: {
  4135                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4136  1461  087C               	movf	_Temp,w
  4137  1462  3E0A               	addlw	10
  4138  1463  0086               	movwf	6
  4139  1464  3001               	movlw	1	; select bank2/3
  4140  1465  0087               	movwf	7
  4141  1466  087C               	movf	_Temp,w
  4142  1467  3E08               	addlw	8
  4143  1468  0084               	movwf	4
  4144  1469  3001               	movlw	1	; select bank2/3
  4145  146A  0085               	movwf	5
  4146  146B  3F40               	moviw [0]fsr1
  4147  146C  3F80               	movwi [0]fsr0
  4148  146D  3F41               	moviw [1]fsr1
  4149  146E  3F81               	movwi [1]fsr0
  4150  146F  0008               	return
  4151  1470                     __end_of_getTemp_AD:	
  4152                           
  4153                           	psect	text2
  4154  1DAA                     __ptext2:	
  4155 ;; *************** function _getPowerFault_AD *****************
  4156 ;; Defined at:
  4157 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\PowerFault_B1.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  channel         1    wreg     unsigned char 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  channel         1    8[BANK0 ] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;		None               void
  4164 ;; Registers used:
  4165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;Total ram usage:        5 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    5
  4178 ;; This function calls:
  4179 ;;		_getAD
  4180 ;; This function is called by:
  4181 ;;		_main
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           
  4186                           ;psect for function _getPowerFault_AD
  4187  1DAA                     _getPowerFault_AD:	
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4191                           ;getPowerFault_AD@channel stored from wreg
  4192  1DAA  0020               	movlb	0	; select bank0
  4193  1DAB  00A8               	movwf	getPowerFault_AD@channel
  4194                           
  4195                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4196  1DAC  087A               	movf	_PF,w
  4197  1DAD  0086               	movwf	6
  4198  1DAE  0187               	clrf	7
  4199  1DAF  1D81               	btfss	1,3
  4200  1DB0  0008               	return
  4201                           
  4202                           ;PowerFault_B1.c: 52: {
  4203                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4204  1DB1  30F0               	movlw	240
  4205  1DB2  00A4               	movwf	??_getPowerFault_AD
  4206  1DB3  0824               	movf	??_getPowerFault_AD,w
  4207  1DB4  00A0               	movwf	getAD@adcon1
  4208  1DB5  0828               	movf	getPowerFault_AD@channel,w
  4209  1DB6  3199  2143  319D   	fcall	_getAD
  4210  1DB9  087A               	movf	_PF,w
  4211  1DBA  3E03               	addlw	3
  4212  1DBB  0086               	movwf	6
  4213  1DBC  0187               	clrf	7
  4214  1DBD  0020               	movlb	0	; select bank0
  4215  1DBE  0820               	movf	?_getAD,w
  4216  1DBF  3FC0               	movwi [0]fsr1
  4217  1DC0  0821               	movf	?_getAD+1,w
  4218  1DC1  3FC1               	movwi [1]fsr1
  4219                           
  4220                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4221  1DC2  087A               	movf	_PF,w
  4222  1DC3  3E03               	addlw	3
  4223  1DC4  0086               	movwf	6
  4224  1DC5  0187               	clrf	7
  4225  1DC6  3F40               	moviw [0]fsr1
  4226  1DC7  00A4               	movwf	??_getPowerFault_AD
  4227  1DC8  3F41               	moviw [1]fsr1
  4228  1DC9  00A5               	movwf	??_getPowerFault_AD+1
  4229  1DCA  0A7A               	incf	_PF,w
  4230  1DCB  0086               	movwf	6
  4231  1DCC  0187               	clrf	7
  4232  1DCD  3F40               	moviw [0]fsr1
  4233  1DCE  00A6               	movwf	??_getPowerFault_AD+2
  4234  1DCF  3F41               	moviw [1]fsr1
  4235  1DD0  00A7               	movwf	??_getPowerFault_AD+3
  4236  1DD1  0825               	movf	??_getPowerFault_AD+1,w
  4237  1DD2  0227               	subwf	??_getPowerFault_AD+3,w
  4238  1DD3  1D03               	skipz
  4239  1DD4  2DD7               	goto	u9145
  4240  1DD5  0824               	movf	??_getPowerFault_AD,w
  4241  1DD6  0226               	subwf	??_getPowerFault_AD+2,w
  4242  1DD7                     u9145:	
  4243  1DD7  1803               	skipnc
  4244  1DD8  0008               	return
  4245                           
  4246                           ;PowerFault_B1.c: 55: {
  4247                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4248  1DD9  087A               	movf	_PF,w
  4249  1DDA  3E03               	addlw	3
  4250  1DDB  0086               	movwf	6
  4251  1DDC  0187               	clrf	7
  4252  1DDD  0A7A               	incf	_PF,w
  4253  1DDE  0084               	movwf	4
  4254  1DDF  0185               	clrf	5
  4255  1DE0  3F40               	moviw [0]fsr1
  4256  1DE1  3F80               	movwi [0]fsr0
  4257  1DE2  3F41               	moviw [1]fsr1
  4258  1DE3  3F81               	movwi [1]fsr0
  4259  1DE4  0008               	return
  4260  1DE5                     __end_of_getPowerFault_AD:	
  4261                           
  4262                           	psect	text3
  4263  0A86                     __ptext3:	
  4264 ;; *************** function _getLoad_AD *****************
  4265 ;; Defined at:
  4266 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverLoad_B1.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  channel         1    wreg     unsigned char 
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;  channel         1    9[BANK0 ] unsigned char 
  4271 ;;  i               1   11[BANK0 ] unsigned char 
  4272 ;;  j               1   10[BANK0 ] unsigned char 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;		None               void
  4275 ;; Registers used:
  4276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;Total ram usage:        8 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    5
  4289 ;; This function calls:
  4290 ;;		_getAD
  4291 ;; This function is called by:
  4292 ;;		_main
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           
  4297                           ;psect for function _getLoad_AD
  4298  0A86                     _getLoad_AD:	
  4299                           
  4300                           ;incstack = 0
  4301                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4302                           ;getLoad_AD@channel stored from wreg
  4303  0A86  0020               	movlb	0	; select bank0
  4304  0A87  00A9               	movwf	getLoad_AD@channel
  4305                           
  4306                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4307  0A88  01AB               	clrf	getLoad_AD@i
  4308  0A89  01AA               	clrf	getLoad_AD@j
  4309                           
  4310                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4311  0A8A  086E               	movf	_Load,w
  4312  0A8B  0086               	movwf	6
  4313  0A8C  3002               	movlw	2	; select bank4/5
  4314  0A8D  0087               	movwf	7
  4315  0A8E  1E01               	btfss	1,4
  4316  0A8F  0008               	return
  4317                           
  4318                           ;OverLoad_B1.c: 20: {
  4319                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4320  0A90  30C0               	movlw	192
  4321  0A91  00A4               	movwf	??_getLoad_AD
  4322  0A92  0824               	movf	??_getLoad_AD,w
  4323  0A93  00A0               	movwf	getAD@adcon1
  4324  0A94  0829               	movf	getLoad_AD@channel,w
  4325  0A95  3199  2143  318A   	fcall	_getAD
  4326  0A98  0020               	movlb	0	; select bank0
  4327  0A99  086E               	movf	_Load,w
  4328  0A9A  3E32               	addlw	50
  4329  0A9B  0086               	movwf	6
  4330  0A9C  3002               	movlw	2	; select bank4/5
  4331  0A9D  0087               	movwf	7
  4332  0A9E  0820               	movf	?_getAD,w
  4333  0A9F  3FC0               	movwi [0]fsr1
  4334  0AA0  0821               	movf	?_getAD+1,w
  4335  0AA1  3FC1               	movwi [1]fsr1
  4336                           
  4337                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4338  0AA2  01AB               	clrf	getLoad_AD@i
  4339  0AA3  3005               	movlw	5
  4340  0AA4  022B               	subwf	getLoad_AD@i,w
  4341  0AA5  1803               	btfsc	3,0
  4342  0AA6  2AE0               	goto	l9292
  4343  0AA7                     l9282:	
  4344                           
  4345                           ;OverLoad_B1.c: 23: {
  4346                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4347  0AA7  086E               	movf	_Load,w
  4348  0AA8  3E32               	addlw	50
  4349  0AA9  0086               	movwf	6
  4350  0AAA  3002               	movlw	2	; select bank4/5
  4351  0AAB  0087               	movwf	7
  4352  0AAC  3F40               	moviw [0]fsr1
  4353  0AAD  00A4               	movwf	??_getLoad_AD
  4354  0AAE  3F41               	moviw [1]fsr1
  4355  0AAF  00A5               	movwf	??_getLoad_AD+1
  4356  0AB0  352B               	lslf	getLoad_AD@i,w
  4357  0AB1  3E08               	addlw	8
  4358  0AB2  076E               	addwf	_Load,w
  4359  0AB3  00A6               	movwf	??_getLoad_AD+2
  4360  0AB4  0826               	movf	??_getLoad_AD+2,w
  4361  0AB5  0086               	movwf	6
  4362  0AB6  3002               	movlw	2	; select bank4/5
  4363  0AB7  0087               	movwf	7
  4364  0AB8  3F40               	moviw [0]fsr1
  4365  0AB9  00A7               	movwf	??_getLoad_AD+3
  4366  0ABA  3F41               	moviw [1]fsr1
  4367  0ABB  00A8               	movwf	??_getLoad_AD+4
  4368  0ABC  0825               	movf	??_getLoad_AD+1,w
  4369  0ABD  0228               	subwf	??_getLoad_AD+4,w
  4370  0ABE  1D03               	skipz
  4371  0ABF  2AC2               	goto	u9045
  4372  0AC0  0824               	movf	??_getLoad_AD,w
  4373  0AC1  0227               	subwf	??_getLoad_AD+3,w
  4374  0AC2                     u9045:	
  4375  0AC2  1803               	skipnc
  4376  0AC3  2AD8               	goto	l9288
  4377                           
  4378                           ;OverLoad_B1.c: 25: {
  4379                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4380  0AC4  086E               	movf	_Load,w
  4381  0AC5  3E32               	addlw	50
  4382  0AC6  0086               	movwf	6
  4383  0AC7  3002               	movlw	2	; select bank4/5
  4384  0AC8  0087               	movwf	7
  4385  0AC9  352B               	lslf	getLoad_AD@i,w
  4386  0ACA  3E08               	addlw	8
  4387  0ACB  076E               	addwf	_Load,w
  4388  0ACC  00A4               	movwf	??_getLoad_AD
  4389  0ACD  0824               	movf	??_getLoad_AD,w
  4390  0ACE  0084               	movwf	4
  4391  0ACF  3002               	movlw	2	; select bank4/5
  4392  0AD0  0085               	movwf	5
  4393  0AD1  3F40               	moviw [0]fsr1
  4394  0AD2  3F80               	movwi [0]fsr0
  4395  0AD3  3F41               	moviw [1]fsr1
  4396  0AD4  3F81               	movwi [1]fsr0
  4397                           
  4398                           ;OverLoad_B1.c: 27: j=1;
  4399  0AD5  01AA               	clrf	getLoad_AD@j
  4400  0AD6  0AAA               	incf	getLoad_AD@j,f
  4401                           
  4402                           ;OverLoad_B1.c: 28: break;
  4403  0AD7  2AE0               	goto	l9292
  4404  0AD8                     l9288:	
  4405  0AD8  3001               	movlw	1
  4406  0AD9  00A4               	movwf	??_getLoad_AD
  4407  0ADA  0824               	movf	??_getLoad_AD,w
  4408  0ADB  07AB               	addwf	getLoad_AD@i,f
  4409  0ADC  3005               	movlw	5
  4410  0ADD  022B               	subwf	getLoad_AD@i,w
  4411  0ADE  1C03               	skipc
  4412  0ADF  2AA7               	goto	l9282
  4413  0AE0                     l9292:	
  4414                           
  4415                           ;OverLoad_B1.c: 29: }
  4416                           ;OverLoad_B1.c: 30: }
  4417                           ;OverLoad_B1.c: 31: if(!j)
  4418  0AE0  08AA               	movf	getLoad_AD@j,f
  4419  0AE1  1D03               	skipz
  4420  0AE2  0008               	return
  4421                           
  4422                           ;OverLoad_B1.c: 32: {
  4423                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4424  0AE3  01AB               	clrf	getLoad_AD@i
  4425  0AE4                     L1:	
  4426  0AE4  3005               	movlw	5
  4427  0AE5  022B               	subwf	getLoad_AD@i,w
  4428  0AE6  1803               	btfsc	3,0
  4429  0AE7  0008               	return
  4430                           
  4431                           ;OverLoad_B1.c: 34: {
  4432                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4433  0AE8  352B               	lslf	getLoad_AD@i,w
  4434  0AE9  3E1A               	addlw	26
  4435  0AEA  076E               	addwf	_Load,w
  4436  0AEB  00A4               	movwf	??_getLoad_AD
  4437  0AEC  0824               	movf	??_getLoad_AD,w
  4438  0AED  0086               	movwf	6
  4439  0AEE  3002               	movlw	2	; select bank4/5
  4440  0AEF  0087               	movwf	7
  4441  0AF0  3F40               	moviw [0]fsr1
  4442  0AF1  00A5               	movwf	??_getLoad_AD+1
  4443  0AF2  3F41               	moviw [1]fsr1
  4444  0AF3  00A6               	movwf	??_getLoad_AD+2
  4445  0AF4  086E               	movf	_Load,w
  4446  0AF5  3E32               	addlw	50
  4447  0AF6  0086               	movwf	6
  4448  0AF7  3002               	movlw	2	; select bank4/5
  4449  0AF8  0087               	movwf	7
  4450  0AF9  3F40               	moviw [0]fsr1
  4451  0AFA  00A7               	movwf	??_getLoad_AD+3
  4452  0AFB  3F41               	moviw [1]fsr1
  4453  0AFC  00A8               	movwf	??_getLoad_AD+4
  4454  0AFD  0826               	movf	??_getLoad_AD+2,w
  4455  0AFE  0228               	subwf	??_getLoad_AD+4,w
  4456  0AFF  1D03               	skipz
  4457  0B00  2B03               	goto	u9085
  4458  0B01  0825               	movf	??_getLoad_AD+1,w
  4459  0B02  0227               	subwf	??_getLoad_AD+3,w
  4460  0B03                     u9085:	
  4461  0B03  1803               	skipnc
  4462  0B04  2B17               	goto	l9304
  4463                           
  4464                           ;OverLoad_B1.c: 36: {
  4465                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4466  0B05  086E               	movf	_Load,w
  4467  0B06  3E32               	addlw	50
  4468  0B07  0086               	movwf	6
  4469  0B08  3002               	movlw	2	; select bank4/5
  4470  0B09  0087               	movwf	7
  4471  0B0A  352B               	lslf	getLoad_AD@i,w
  4472  0B0B  3E1A               	addlw	26
  4473  0B0C  076E               	addwf	_Load,w
  4474  0B0D  00A4               	movwf	??_getLoad_AD
  4475  0B0E  0824               	movf	??_getLoad_AD,w
  4476  0B0F  0084               	movwf	4
  4477  0B10  3002               	movlw	2	; select bank4/5
  4478  0B11  0085               	movwf	5
  4479  0B12  3F40               	moviw [0]fsr1
  4480  0B13  3F80               	movwi [0]fsr0
  4481  0B14  3F41               	moviw [1]fsr1
  4482  0B15  3F81               	movwi [1]fsr0
  4483                           
  4484                           ;OverLoad_B1.c: 38: break;
  4485  0B16  0008               	return
  4486  0B17                     l9304:	
  4487  0B17  3001               	movlw	1
  4488  0B18  00A4               	movwf	??_getLoad_AD
  4489  0B19  0824               	movf	??_getLoad_AD,w
  4490  0B1A  07AB               	addwf	getLoad_AD@i,f
  4491  0B1B  2AE4               	goto	L1
  4492  0B1C                     __end_of_getLoad_AD:	
  4493                           
  4494                           	psect	text4
  4495  1943                     __ptext4:	
  4496 ;; *************** function _getAD *****************
  4497 ;; Defined at:
  4498 ;;		line 309 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  adcon0          1    wreg     unsigned char 
  4501 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4504 ;; Return value:  Size  Location     Type
  4505 ;;                  2    0[BANK0 ] int 
  4506 ;; Registers used:
  4507 ;;		wreg, status,2, status,0
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4513 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;Total ram usage:        4 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    4
  4520 ;; This function calls:
  4521 ;;		Nothing
  4522 ;; This function is called by:
  4523 ;;		_getLoad_AD
  4524 ;;		_getTemp_AD
  4525 ;;		_getPowerFault_AD
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           
  4530                           ;psect for function _getAD
  4531  1943                     _getAD:	
  4532                           
  4533                           ;incstack = 0
  4534                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4535                           ;getAD@adcon0 stored from wreg
  4536  1943  0020               	movlb	0	; select bank0
  4537  1944  00A3               	movwf	getAD@adcon0
  4538                           
  4539                           ;MCU_16f1518_B1.c: 311: ADCON0=adcon0;
  4540  1945  0823               	movf	getAD@adcon0,w
  4541  1946  0021               	movlb	1	; select bank1
  4542  1947  009D               	movwf	29	;volatile
  4543                           
  4544                           ;MCU_16f1518_B1.c: 312: ADCON1=adcon1;
  4545  1948  0020               	movlb	0	; select bank0
  4546  1949  0820               	movf	getAD@adcon1,w
  4547  194A  0021               	movlb	1	; select bank1
  4548  194B  009E               	movwf	30	;volatile
  4549                           
  4550                           ;MCU_16f1518_B1.c: 313: GO_nDONE=1;
  4551  194C  149D               	bsf	29,1	;volatile
  4552  194D                     l1602:	
  4553                           ;MCU_16f1518_B1.c: 314: while(GO_nDONE);
  4554                           
  4555  194D  189D               	btfsc	29,1	;volatile
  4556  194E  294D               	goto	l1602
  4557                           
  4558                           ;MCU_16f1518_B1.c: 315: return ((ADRESH*256)+ADRESL);
  4559  194F  081C               	movf	28,w	;volatile
  4560  1950  0020               	movlb	0	; select bank0
  4561  1951  01A1               	clrf	?_getAD+1
  4562  1952  07A1               	addwf	?_getAD+1,f
  4563  1953  0021               	movlb	1	; select bank1
  4564  1954  081B               	movf	27,w	;volatile
  4565  1955  0020               	movlb	0	; select bank0
  4566  1956  01A0               	clrf	?_getAD
  4567  1957  07A0               	addwf	?_getAD,f
  4568  1958  0008               	return
  4569  1959                     __end_of_getAD:	
  4570                           
  4571                           	psect	text5
  4572  262E                     __ptext5:	
  4573 ;; *************** function _Temp_Main *****************
  4574 ;; Defined at:
  4575 ;;		line 57 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverTemperature_B1.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;		None               void
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;Total ram usage:        0 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:   10
  4596 ;; This function calls:
  4597 ;;		_setTemp_Main
  4598 ;; This function is called by:
  4599 ;;		_main
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           
  4604                           ;psect for function _Temp_Main
  4605  262E                     _Temp_Main:	
  4606                           
  4607                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4611  262E  3185  25FB         	fcall	_setTemp_Main
  4612  2630  0008               	return
  4613  2631                     __end_of_Temp_Main:	
  4614                           
  4615                           	psect	text6
  4616  05FB                     __ptext6:	
  4617 ;; *************** function _setTemp_Main *****************
  4618 ;; Defined at:
  4619 ;;		line 64 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverTemperature_B1.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;		None               void
  4626 ;; Registers used:
  4627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4635 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4637 ;;Total ram usage:        3 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    9
  4640 ;; This function calls:
  4641 ;;		_getLoad_Safe
  4642 ;;		_getPF_Safe
  4643 ;;		_setOverTemp_Exceptions
  4644 ;; This function is called by:
  4645 ;;		_Temp_Main
  4646 ;; This function uses a non-reentrant model
  4647 ;;
  4648                           
  4649                           
  4650                           ;psect for function _setTemp_Main
  4651  05FB                     _setTemp_Main:	
  4652                           
  4653                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4654                           
  4655                           ;incstack = 0
  4656                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4657  05FB  087C               	movf	_Temp,w
  4658  05FC  0086               	movwf	6
  4659  05FD  3001               	movlw	1	; select bank2/3
  4660  05FE  0087               	movwf	7
  4661  05FF  1C01               	btfss	1,0
  4662  0600  0008               	return
  4663                           
  4664                           ;OverTemperature_B1.c: 67: {
  4665                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4666  0601  087C               	movf	_Temp,w
  4667  0602  0086               	movwf	6
  4668  0603  3001               	movlw	1	; select bank2/3
  4669  0604  0087               	movwf	7
  4670  0605  1901               	btfsc	1,2
  4671  0606  2E47               	goto	l8924
  4672                           
  4673                           ;OverTemperature_B1.c: 69: {
  4674                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4675  0607  0A7C               	incf	_Temp,w
  4676  0608  0086               	movwf	6
  4677  0609  3001               	movlw	1	; select bank2/3
  4678  060A  0087               	movwf	7
  4679  060B  3001               	movlw	1
  4680  060C  0781               	addwf	1,f
  4681  060D  3141               	addfsr 1,1
  4682  060E  1803               	skipnc
  4683  060F  0A81               	incf	1,f
  4684                           
  4685                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4686  0610  0A7C               	incf	_Temp,w
  4687  0611  0086               	movwf	6
  4688  0612  3001               	movlw	1	; select bank2/3
  4689  0613  0087               	movwf	7
  4690  0614  3F40               	moviw [0]fsr1
  4691  0615  0020               	movlb	0	; select bank0
  4692  0616  00AD               	movwf	??_setTemp_Main
  4693  0617  3F41               	moviw [1]fsr1
  4694  0618  00AE               	movwf	??_setTemp_Main+1
  4695  0619  3001               	movlw	1
  4696  061A  022E               	subwf	??_setTemp_Main+1,w
  4697  061B  30F4               	movlw	244
  4698  061C  1903               	skipnz
  4699  061D  022D               	subwf	??_setTemp_Main,w
  4700  061E  1C03               	skipc
  4701  061F  0008               	return
  4702                           
  4703                           ;OverTemperature_B1.c: 72: {
  4704                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4705  0620  31A7  2703  3185   	fcall	_getLoad_Safe
  4706  0623  3A00               	xorlw	0
  4707  0624  1903               	skipnz
  4708  0625  2E3E               	goto	l8922
  4709  0626  31A6  2672  3185   	fcall	_getPF_Safe
  4710  0629  3A00               	xorlw	0
  4711  062A  1903               	skipnz
  4712  062B  2E3E               	goto	l8922
  4713                           
  4714                           ;OverTemperature_B1.c: 74: {
  4715                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4716  062C  0A7C               	incf	_Temp,w
  4717  062D  0086               	movwf	6
  4718  062E  3001               	movlw	1	; select bank2/3
  4719  062F  0087               	movwf	7
  4720  0630  3000               	movlw	0
  4721  0631  3FC0               	movwi [0]fsr1
  4722  0632  3FC1               	movwi [1]fsr1
  4723                           
  4724                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4725  0633  087C               	movf	_Temp,w
  4726  0634  0086               	movwf	6
  4727  0635  3001               	movlw	1	; select bank2/3
  4728  0636  0087               	movwf	7
  4729  0637  1501               	bsf	1,2
  4730                           
  4731                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4732  0638  087C               	movf	_Temp,w
  4733  0639  0086               	movwf	6
  4734  063A  3001               	movlw	1	; select bank2/3
  4735  063B  0087               	movwf	7
  4736  063C  1201               	bcf	1,4
  4737                           
  4738                           ;OverTemperature_B1.c: 78: }
  4739  063D  0008               	return
  4740  063E                     l8922:	
  4741                           
  4742                           ;OverTemperature_B1.c: 79: else
  4743                           ;OverTemperature_B1.c: 80: {
  4744                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4745  063E  0A7C               	incf	_Temp,w
  4746  063F  0086               	movwf	6
  4747  0640  3001               	movlw	1	; select bank2/3
  4748  0641  0087               	movwf	7
  4749  0642  30E8               	movlw	232
  4750  0643  3FC0               	movwi [0]fsr1
  4751  0644  3003               	movlw	3
  4752  0645  3FC1               	movwi [1]fsr1
  4753                           
  4754                           ;OverTemperature_B1.c: 82: }
  4755                           ;OverTemperature_B1.c: 83: }
  4756                           ;OverTemperature_B1.c: 84: }
  4757  0646  0008               	return
  4758  0647                     l8924:	
  4759                           
  4760                           ;OverTemperature_B1.c: 85: else
  4761                           ;OverTemperature_B1.c: 86: {
  4762                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4763  0647  0A7C               	incf	_Temp,w
  4764  0648  0086               	movwf	6
  4765  0649  3001               	movlw	1	; select bank2/3
  4766  064A  0087               	movwf	7
  4767  064B  3001               	movlw	1
  4768  064C  0781               	addwf	1,f
  4769  064D  3141               	addfsr 1,1
  4770  064E  1803               	skipnc
  4771  064F  0A81               	incf	1,f
  4772                           
  4773                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4774  0650  0A7C               	incf	_Temp,w
  4775  0651  0086               	movwf	6
  4776  0652  3001               	movlw	1	; select bank2/3
  4777  0653  0087               	movwf	7
  4778  0654  3F40               	moviw [0]fsr1
  4779  0655  0020               	movlb	0	; select bank0
  4780  0656  00AD               	movwf	??_setTemp_Main
  4781  0657  3F41               	moviw [1]fsr1
  4782  0658  00AE               	movwf	??_setTemp_Main+1
  4783  0659  3000               	movlw	0
  4784  065A  022E               	subwf	??_setTemp_Main+1,w
  4785  065B  3004               	movlw	4
  4786  065C  1903               	skipnz
  4787  065D  022D               	subwf	??_setTemp_Main,w
  4788  065E  1C03               	skipc
  4789  065F  0008               	return
  4790                           
  4791                           ;OverTemperature_B1.c: 89: {
  4792                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4793  0660  0A7C               	incf	_Temp,w
  4794  0661  0086               	movwf	6
  4795  0662  3001               	movlw	1	; select bank2/3
  4796  0663  0087               	movwf	7
  4797  0664  3000               	movlw	0
  4798  0665  3FC0               	movwi [0]fsr1
  4799  0666  3FC1               	movwi [1]fsr1
  4800                           
  4801                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4802  0667  087C               	movf	_Temp,w
  4803  0668  0086               	movwf	6
  4804  0669  3001               	movlw	1	; select bank2/3
  4805  066A  0087               	movwf	7
  4806  066B  1101               	bcf	1,2
  4807                           
  4808                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4809  066C  087C               	movf	_Temp,w
  4810  066D  3E08               	addlw	8
  4811  066E  0086               	movwf	6
  4812  066F  3001               	movlw	1	; select bank2/3
  4813  0670  0087               	movwf	7
  4814  0671  087C               	movf	_Temp,w
  4815  0672  3E04               	addlw	4
  4816  0673  0084               	movwf	4
  4817  0674  3001               	movlw	1	; select bank2/3
  4818  0675  0085               	movwf	5
  4819  0676  3F40               	moviw [0]fsr1
  4820  0677  3F80               	movwi [0]fsr0
  4821  0678  3F41               	moviw [1]fsr1
  4822  0679  3F81               	movwi [1]fsr0
  4823                           
  4824                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4825  067A  087C               	movf	_Temp,w
  4826  067B  0086               	movwf	6
  4827  067C  3001               	movlw	1	; select bank2/3
  4828  067D  0087               	movwf	7
  4829  067E  1C81               	btfss	1,1
  4830  067F  2EAD               	goto	l8946
  4831                           
  4832                           ;OverTemperature_B1.c: 94: {
  4833                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4834  0680  087C               	movf	_Temp,w
  4835  0681  3E04               	addlw	4
  4836  0682  0086               	movwf	6
  4837  0683  3001               	movlw	1	; select bank2/3
  4838  0684  0087               	movwf	7
  4839  0685  3F40               	moviw [0]fsr1
  4840  0686  00AD               	movwf	??_setTemp_Main
  4841  0687  3F41               	moviw [1]fsr1
  4842  0688  00AE               	movwf	??_setTemp_Main+1
  4843  0689  3002               	movlw	2
  4844  068A  022E               	subwf	??_setTemp_Main+1,w
  4845  068B  3058               	movlw	88
  4846  068C  1903               	skipnz
  4847  068D  022D               	subwf	??_setTemp_Main,w
  4848  068E  1C03               	skipc
  4849  068F  2EDB               	goto	l8956
  4850                           
  4851                           ;OverTemperature_B1.c: 96: {
  4852                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4853  0690  3001               	movlw	1
  4854  0691  00AD               	movwf	??_setTemp_Main
  4855  0692  087C               	movf	_Temp,w
  4856  0693  3E03               	addlw	3
  4857  0694  0086               	movwf	6
  4858  0695  3001               	movlw	1	; select bank2/3
  4859  0696  0087               	movwf	7
  4860  0697  082D               	movf	??_setTemp_Main,w
  4861  0698  0781               	addwf	1,f
  4862                           
  4863                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4864  0699  087C               	movf	_Temp,w
  4865  069A  3E03               	addlw	3
  4866  069B  0086               	movwf	6
  4867  069C  3001               	movlw	1	; select bank2/3
  4868  069D  0087               	movwf	7
  4869  069E  3003               	movlw	3
  4870  069F  0201               	subwf	1,w
  4871  06A0  1C03               	skipc
  4872  06A1  2EE1               	goto	l8958
  4873                           
  4874                           ;OverTemperature_B1.c: 99: {
  4875                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4876  06A2  087C               	movf	_Temp,w
  4877  06A3  3E03               	addlw	3
  4878  06A4  0086               	movwf	6
  4879  06A5  3001               	movlw	1	; select bank2/3
  4880  06A6  0087               	movwf	7
  4881  06A7  0181               	clrf	1
  4882                           
  4883                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4884  06A8  3000               	movlw	0
  4885  06A9  3190  201A  3185   	fcall	_setOverTemp_Exceptions
  4886                           
  4887                           ;OverTemperature_B1.c: 102: }
  4888                           ;OverTemperature_B1.c: 103: }
  4889  06AC  2EE1               	goto	l8958
  4890  06AD                     l8946:	
  4891                           ;OverTemperature_B1.c: 107: }
  4892                           ;OverTemperature_B1.c: 108: }
  4893                           
  4894                           ;OverTemperature_B1.c: 104: else
  4895                           ;OverTemperature_B1.c: 105: {
  4896                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4897                           
  4898                           
  4899                           ;OverTemperature_B1.c: 109: else
  4900                           ;OverTemperature_B1.c: 110: {
  4901                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  4902  06AD  087C               	movf	_Temp,w
  4903  06AE  3E04               	addlw	4
  4904  06AF  0086               	movwf	6
  4905  06B0  3001               	movlw	1	; select bank2/3
  4906  06B1  0087               	movwf	7
  4907  06B2  3F40               	moviw [0]fsr1
  4908  06B3  0020               	movlb	0	; select bank0
  4909  06B4  00AD               	movwf	??_setTemp_Main
  4910  06B5  3F41               	moviw [1]fsr1
  4911  06B6  00AE               	movwf	??_setTemp_Main+1
  4912  06B7  3002               	movlw	2
  4913  06B8  022E               	subwf	??_setTemp_Main+1,w
  4914  06B9  3027               	movlw	39
  4915  06BA  1903               	skipnz
  4916  06BB  022D               	subwf	??_setTemp_Main,w
  4917  06BC  1803               	skipnc
  4918  06BD  2EDB               	goto	l8956
  4919                           
  4920                           ;OverTemperature_B1.c: 112: {
  4921                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4922  06BE  3001               	movlw	1
  4923  06BF  00AD               	movwf	??_setTemp_Main
  4924  06C0  087C               	movf	_Temp,w
  4925  06C1  3E03               	addlw	3
  4926  06C2  0086               	movwf	6
  4927  06C3  3001               	movlw	1	; select bank2/3
  4928  06C4  0087               	movwf	7
  4929  06C5  082D               	movf	??_setTemp_Main,w
  4930  06C6  0781               	addwf	1,f
  4931                           
  4932                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4933  06C7  087C               	movf	_Temp,w
  4934  06C8  3E03               	addlw	3
  4935  06C9  0086               	movwf	6
  4936  06CA  3001               	movlw	1	; select bank2/3
  4937  06CB  0087               	movwf	7
  4938  06CC  3003               	movlw	3
  4939  06CD  0201               	subwf	1,w
  4940  06CE  1C03               	skipc
  4941  06CF  2EE1               	goto	l8958
  4942                           
  4943                           ;OverTemperature_B1.c: 115: {
  4944                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  4945  06D0  087C               	movf	_Temp,w
  4946  06D1  3E03               	addlw	3
  4947  06D2  0086               	movwf	6
  4948  06D3  3001               	movlw	1	; select bank2/3
  4949  06D4  0087               	movwf	7
  4950  06D5  0181               	clrf	1
  4951                           
  4952                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  4953  06D6  3001               	movlw	1
  4954  06D7  3190  201A  3185   	fcall	_setOverTemp_Exceptions
  4955                           
  4956                           ;OverTemperature_B1.c: 118: }
  4957                           ;OverTemperature_B1.c: 119: }
  4958  06DA  2EE1               	goto	l8958
  4959  06DB                     l8956:	
  4960                           
  4961                           ;OverTemperature_B1.c: 120: else
  4962                           ;OverTemperature_B1.c: 121: {
  4963                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  4964  06DB  087C               	movf	_Temp,w
  4965  06DC  3E03               	addlw	3
  4966  06DD  0086               	movwf	6
  4967  06DE  3001               	movlw	1	; select bank2/3
  4968  06DF  0087               	movwf	7
  4969  06E0  0181               	clrf	1
  4970  06E1                     l8958:	
  4971                           
  4972                           ;OverTemperature_B1.c: 123: }
  4973                           ;OverTemperature_B1.c: 124: }
  4974                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  4975  06E1  087C               	movf	_Temp,w
  4976  06E2  0086               	movwf	6
  4977  06E3  3001               	movlw	1	; select bank2/3
  4978  06E4  0087               	movwf	7
  4979  06E5  1881               	btfsc	1,1
  4980  06E6  2EEC               	goto	l8962
  4981                           
  4982                           ;OverTemperature_B1.c: 126: {
  4983                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  4984  06E7  087C               	movf	_Temp,w
  4985  06E8  0086               	movwf	6
  4986  06E9  3001               	movlw	1	; select bank2/3
  4987  06EA  0087               	movwf	7
  4988  06EB  1601               	bsf	1,4
  4989  06EC                     l8962:	
  4990                           
  4991                           ;OverTemperature_B1.c: 128: }
  4992                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  4993  06EC  087C               	movf	_Temp,w
  4994  06ED  3E04               	addlw	4
  4995  06EE  0086               	movwf	6
  4996  06EF  3001               	movlw	1	; select bank2/3
  4997  06F0  0087               	movwf	7
  4998  06F1  3F40               	moviw [0]fsr1
  4999  06F2  0020               	movlb	0	; select bank0
  5000  06F3  00AD               	movwf	??_setTemp_Main
  5001  06F4  3F41               	moviw [1]fsr1
  5002  06F5  00AE               	movwf	??_setTemp_Main+1
  5003  06F6  082E               	movf	??_setTemp_Main+1,w
  5004  06F7  00AF               	movwf	??_setTemp_Main+2
  5005  06F8  086F               	movf	_Product,w
  5006  06F9  3E18               	addlw	24
  5007  06FA  0086               	movwf	6
  5008  06FB  3001               	movlw	1	; select bank2/3
  5009  06FC  0087               	movwf	7
  5010  06FD  082F               	movf	??_setTemp_Main+2,w
  5011  06FE  0081               	movwf	1
  5012                           
  5013                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5014  06FF  087C               	movf	_Temp,w
  5015  0700  3E04               	addlw	4
  5016  0701  0086               	movwf	6
  5017  0702  3001               	movlw	1	; select bank2/3
  5018  0703  0087               	movwf	7
  5019  0704  0801               	movf	1,w
  5020  0705  00AD               	movwf	??_setTemp_Main
  5021  0706  086F               	movf	_Product,w
  5022  0707  3E19               	addlw	25
  5023  0708  0086               	movwf	6
  5024  0709  3001               	movlw	1	; select bank2/3
  5025  070A  0087               	movwf	7
  5026  070B  082D               	movf	??_setTemp_Main,w
  5027  070C  0081               	movwf	1
  5028                           
  5029                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5030  070D  087C               	movf	_Temp,w
  5031  070E  3E06               	addlw	6
  5032  070F  0086               	movwf	6
  5033  0710  3001               	movlw	1	; select bank2/3
  5034  0711  0087               	movwf	7
  5035  0712  3000               	movlw	0
  5036  0713  3FC0               	movwi [0]fsr1
  5037  0714  3FC1               	movwi [1]fsr1
  5038                           
  5039                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5040  0715  087C               	movf	_Temp,w
  5041  0716  3E08               	addlw	8
  5042  0717  0086               	movwf	6
  5043  0718  3001               	movlw	1	; select bank2/3
  5044  0719  0087               	movwf	7
  5045  071A  3000               	movlw	0
  5046  071B  3FC0               	movwi [0]fsr1
  5047  071C  3FC1               	movwi [1]fsr1
  5048  071D  0008               	return
  5049  071E                     __end_of_setTemp_Main:	
  5050                           
  5051                           	psect	text7
  5052  101A                     __ptext7:	
  5053 ;; *************** function _setOverTemp_Exceptions *****************
  5054 ;; Defined at:
  5055 ;;		line 138 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverTemperature_B1.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  command         1    wreg     unsigned char 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  command         1   12[BANK0 ] unsigned char 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;Total ram usage:        2 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    8
  5076 ;; This function calls:
  5077 ;;		_DimmerLights_Exceptions
  5078 ;;		_setBuz
  5079 ;;		_setLED
  5080 ;;		_setRF_Enable
  5081 ;;		_setSw_Enable
  5082 ;; This function is called by:
  5083 ;;		_setTemp_Main
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           
  5088                           ;psect for function _setOverTemp_Exceptions
  5089  101A                     _setOverTemp_Exceptions:	
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5093                           ;setOverTemp_Exceptions@command stored from wreg
  5094  101A  0020               	movlb	0	; select bank0
  5095  101B  00AC               	movwf	setOverTemp_Exceptions@command
  5096                           
  5097                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5098  101C  087C               	movf	_Temp,w
  5099  101D  0086               	movwf	6
  5100  101E  3001               	movlw	1	; select bank2/3
  5101  101F  0087               	movwf	7
  5102  1020  082C               	movf	setOverTemp_Exceptions@command,w
  5103  1021  1081               	bcf	1,1
  5104  1022  1D03               	skipz
  5105  1023  1481               	bsf	1,1
  5106                           
  5107                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5108  1024  092C               	comf	setOverTemp_Exceptions@command,w
  5109  1025  3901               	andlw	1
  5110  1026  00AB               	movwf	??_setOverTemp_Exceptions
  5111  1027  087C               	movf	_Temp,w
  5112  1028  0086               	movwf	6
  5113  1029  3001               	movlw	1	; select bank2/3
  5114  102A  0087               	movwf	7
  5115  102B  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5116  102C  0801               	movf	1,w
  5117  102D  062B               	xorwf	??_setOverTemp_Exceptions,w
  5118  102E  39EF               	andlw	-17
  5119  102F  062B               	xorwf	??_setOverTemp_Exceptions,w
  5120  1030  0081               	movwf	1
  5121                           
  5122                           ;OverTemperature_B1.c: 142: if(command)
  5123  1031  082C               	movf	setOverTemp_Exceptions@command,w
  5124  1032  1903               	btfsc	3,2
  5125  1033  2840               	goto	l8586
  5126                           
  5127                           ;OverTemperature_B1.c: 143: {
  5128                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5129  1034  3001               	movlw	1
  5130  1035  3191  2165  3190   	fcall	_DimmerLights_Exceptions
  5131                           
  5132                           ;OverTemperature_B1.c: 146: setLED(2,1);
  5133  1038  0020               	movlb	0	; select bank0
  5134  1039  01A2               	clrf	setLED@command
  5135  103A  0AA2               	incf	setLED@command,f
  5136  103B  3002               	movlw	2
  5137  103C  3192  2276  3190   	fcall	_setLED
  5138                           
  5139                           ;OverTemperature_B1.c: 148: }
  5140  103F  2849               	goto	l2024
  5141  1040                     l8586:	
  5142                           
  5143                           ;OverTemperature_B1.c: 149: else
  5144                           ;OverTemperature_B1.c: 150: {
  5145                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5146  1040  3064               	movlw	100
  5147  1041  0020               	movlb	0	; select bank0
  5148  1042  00A6               	movwf	setBuz@time
  5149  1043  3000               	movlw	0
  5150  1044  00A7               	movwf	setBuz@time+1
  5151  1045  3002               	movlw	2
  5152  1046  3197  2710  3190   	fcall	_setBuz
  5153  1049                     l2024:	
  5154                           
  5155                           ;OverTemperature_B1.c: 152: }
  5156                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5157  1049  0020               	movlb	0	; select bank0
  5158  104A  082C               	movf	setOverTemp_Exceptions@command,w
  5159  104B  3E0A               	addlw	10
  5160  104C  00AB               	movwf	??_setOverTemp_Exceptions
  5161  104D  082B               	movf	??_setOverTemp_Exceptions,w
  5162  104E  00A2               	movwf	setLED@command
  5163  104F  3063               	movlw	99
  5164  1050  3192  2276  3190   	fcall	_setLED
  5165                           
  5166                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5167  1053  0020               	movlb	0	; select bank0
  5168  1054  092C               	comf	setOverTemp_Exceptions@command,w
  5169  1055  3901               	andlw	1
  5170  1056  3198  2079  3190   	fcall	_setSw_Enable
  5171                           
  5172                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5173  1059  0020               	movlb	0	; select bank0
  5174  105A  092C               	comf	setOverTemp_Exceptions@command,w
  5175  105B  3901               	andlw	1
  5176  105C  00AB               	movwf	??_setOverTemp_Exceptions
  5177  105D  082B               	movf	??_setOverTemp_Exceptions,w
  5178  105E  00A2               	movwf	setRF_Enable@command
  5179  105F  3001               	movlw	1
  5180  1060  319B  2399         	fcall	_setRF_Enable
  5181  1062  0008               	return
  5182  1063                     __end_of_setOverTemp_Exceptions:	
  5183                           
  5184                           	psect	text8
  5185  262B                     __ptext8:	
  5186 ;; *************** function _Temp_Initialization *****************
  5187 ;; Defined at:
  5188 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverTemperature_B1.c"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;		None
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;		None
  5193 ;; Return value:  Size  Location     Type
  5194 ;;		None               void
  5195 ;; Registers used:
  5196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5206 ;;Total ram usage:        0 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    5
  5209 ;; This function calls:
  5210 ;;		_setTemp_Initialization
  5211 ;; This function is called by:
  5212 ;;		_main
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           
  5217                           ;psect for function _Temp_Initialization
  5218  262B                     _Temp_Initialization:	
  5219                           
  5220                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5221                           
  5222                           ;incstack = 0
  5223                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5224  262B  31A7  270E         	fcall	_setTemp_Initialization
  5225  262D  0008               	return
  5226  262E                     __end_of_Temp_Initialization:	
  5227                           
  5228                           	psect	text9
  5229  270E                     __ptext9:	
  5230 ;; *************** function _setTemp_Initialization *****************
  5231 ;; Defined at:
  5232 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverTemperature_B1.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;		None
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;		None
  5237 ;; Return value:  Size  Location     Type
  5238 ;;		None               void
  5239 ;; Registers used:
  5240 ;;		wreg, fsr1l, fsr1h
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;Total ram usage:        1 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    4
  5253 ;; This function calls:
  5254 ;;		Nothing
  5255 ;; This function is called by:
  5256 ;;		_Temp_Initialization
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _setTemp_Initialization
  5262  270E                     _setTemp_Initialization:	
  5263                           
  5264                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5268  270E  3030               	movlw	_Temp1& (0+255)
  5269  270F  0020               	movlb	0	; select bank0
  5270  2710  00A0               	movwf	??_setTemp_Initialization
  5271  2711  0820               	movf	??_setTemp_Initialization,w
  5272  2712  00FC               	movwf	_Temp
  5273                           
  5274                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5275  2713  087C               	movf	_Temp,w
  5276  2714  0086               	movwf	6
  5277  2715  3001               	movlw	1	; select bank2/3
  5278  2716  0087               	movwf	7
  5279  2717  1601               	bsf	1,4
  5280  2718  0008               	return
  5281  2719                     __end_of_setTemp_Initialization:	
  5282                           
  5283                           	psect	text10
  5284  1866                     __ptext10:	
  5285 ;; *************** function _Switch_Main *****************
  5286 ;; Defined at:
  5287 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Switch_B1.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;		None
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;		None               void
  5294 ;; Registers used:
  5295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;Total ram usage:        0 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:   10
  5308 ;; This function calls:
  5309 ;;		_setSw_Main
  5310 ;; This function is called by:
  5311 ;;		_main
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           
  5316                           ;psect for function _Switch_Main
  5317  1866                     _Switch_Main:	
  5318                           
  5319                           ;Switch_B1.c: 65: setSw_Main(1);
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5323  1866  3001               	movlw	1
  5324  1867  3184  24B2         	fcall	_setSw_Main
  5325  1869  0008               	return
  5326  186A                     __end_of_Switch_Main:	
  5327                           
  5328                           	psect	text11
  5329  04B2                     __ptext11:	
  5330 ;; *************** function _setSw_Main *****************
  5331 ;; Defined at:
  5332 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Switch_B1.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;  sw              1    wreg     unsigned char 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;  sw              1   72[BANK0 ] unsigned char 
  5337 ;; Return value:  Size  Location     Type
  5338 ;;		None               void
  5339 ;; Registers used:
  5340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;Total ram usage:        4 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    9
  5353 ;; This function calls:
  5354 ;;		_SwPointSelect
  5355 ;;		_Sw_DimmerAdjFunc
  5356 ;;		_Sw_DimmerOffFunc
  5357 ;;		_Sw_DimmerOnFunc
  5358 ;;		_setBuz
  5359 ;;		_setRF_Learn
  5360 ;; This function is called by:
  5361 ;;		_Switch_Main
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _setSw_Main
  5367  04B2                     _setSw_Main:	
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5371                           ;setSw_Main@sw stored from wreg
  5372  04B2  0020               	movlb	0	; select bank0
  5373  04B3  00E8               	movwf	setSw_Main@sw
  5374                           
  5375                           ;Switch_B1.c: 114: if(Sw->Enable)
  5376  04B4  086D               	movf	_Sw,w
  5377  04B5  0086               	movwf	6
  5378  04B6  3001               	movlw	1	; select bank2/3
  5379  04B7  0087               	movwf	7
  5380  04B8  1C01               	btfss	1,0
  5381  04B9  0008               	return
  5382                           
  5383                           ;Switch_B1.c: 115: {
  5384                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5385  04BA  0868               	movf	setSw_Main@sw,w
  5386  04BB  31A6  26D7  3184   	fcall	_SwPointSelect
  5387                           
  5388                           ;Switch_B1.c: 144: Sw->Touch=(RA6 || RA4 || RA0 || RB1)?1:0;
  5389  04BE  0020               	movlb	0	; select bank0
  5390  04BF  01E7               	clrf	_setSw_Main$4560
  5391  04C0  0AE7               	incf	_setSw_Main$4560,f
  5392  04C1  1F0C               	btfss	12,6	;volatile
  5393  04C2  1A0C               	btfsc	12,4	;volatile
  5394  04C3  2CC8               	goto	l9104
  5395  04C4  1C0C               	btfss	12,0	;volatile
  5396  04C5  188D               	btfsc	13,1	;volatile
  5397  04C6  2CC8               	goto	l9104
  5398  04C7  01E7               	clrf	_setSw_Main$4560
  5399  04C8                     l9104:	
  5400  04C8  086D               	movf	_Sw,w
  5401  04C9  0086               	movwf	6
  5402  04CA  3001               	movlw	1	; select bank2/3
  5403  04CB  0087               	movwf	7
  5404  04CC  0867               	movf	_setSw_Main$4560,w
  5405  04CD  1081               	bcf	1,1
  5406  04CE  1D03               	skipz
  5407  04CF  1481               	bsf	1,1
  5408                           
  5409                           ;Switch_B1.c: 148: if(Sw->Touch)
  5410  04D0  086D               	movf	_Sw,w
  5411  04D1  0086               	movwf	6
  5412  04D2  3001               	movlw	1	; select bank2/3
  5413  04D3  0087               	movwf	7
  5414  04D4  1C81               	btfss	1,1
  5415  04D5  2DA6               	goto	l9154
  5416                           
  5417                           ;Switch_B1.c: 149: {
  5418                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  5419  04D6  086D               	movf	_Sw,w
  5420  04D7  0086               	movwf	6
  5421  04D8  3001               	movlw	1	; select bank2/3
  5422  04D9  0087               	movwf	7
  5423  04DA  1901               	btfsc	1,2
  5424  04DB  2CFD               	goto	l9120
  5425                           
  5426                           ;Switch_B1.c: 151: {
  5427                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  5428  04DC  3001               	movlw	1
  5429  04DD  00E5               	movwf	??_setSw_Main
  5430  04DE  086D               	movf	_Sw,w
  5431  04DF  3E02               	addlw	2
  5432  04E0  0086               	movwf	6
  5433  04E1  3001               	movlw	1	; select bank2/3
  5434  04E2  0087               	movwf	7
  5435  04E3  0865               	movf	??_setSw_Main,w
  5436  04E4  0781               	addwf	1,f
  5437                           
  5438                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  5439  04E5  086D               	movf	_Sw,w
  5440  04E6  3E02               	addlw	2
  5441  04E7  0086               	movwf	6
  5442  04E8  3001               	movlw	1	; select bank2/3
  5443  04E9  0087               	movwf	7
  5444  04EA  3005               	movlw	5
  5445  04EB  0201               	subwf	1,w
  5446  04EC  1C03               	skipc
  5447  04ED  0008               	return
  5448                           
  5449                           ;Switch_B1.c: 154: {
  5450                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  5451  04EE  086D               	movf	_Sw,w
  5452  04EF  3E02               	addlw	2
  5453  04F0  0086               	movwf	6
  5454  04F1  3001               	movlw	1	; select bank2/3
  5455  04F2  0087               	movwf	7
  5456  04F3  0181               	clrf	1
  5457                           
  5458                           ;Switch_B1.c: 156: Sw->Debounce=1;
  5459  04F4  086D               	movf	_Sw,w
  5460  04F5  0086               	movwf	6
  5461  04F6  3001               	movlw	1	; select bank2/3
  5462  04F7  0087               	movwf	7
  5463  04F8  1501               	bsf	1,2
  5464                           
  5465                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  5466  04F9  0868               	movf	setSw_Main@sw,w
  5467  04FA  3191  210C         	fcall	_Sw_DimmerOnFunc
  5468                           
  5469                           ;Switch_B1.c: 162: }
  5470                           ;Switch_B1.c: 163: }
  5471  04FC  0008               	return
  5472  04FD                     l9120:	
  5473                           
  5474                           ;Switch_B1.c: 164: else
  5475                           ;Switch_B1.c: 165: {
  5476                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  5477  04FD  0020               	movlb	0	; select bank0
  5478  04FE  086D               	movf	_Sw,w
  5479  04FF  0086               	movwf	6
  5480  0500  3001               	movlw	1	; select bank2/3
  5481  0501  0087               	movwf	7
  5482  0502  1981               	btfsc	1,3
  5483  0503  2D2F               	goto	l9130
  5484                           
  5485                           ;Switch_B1.c: 167: {
  5486                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  5487  0504  086D               	movf	_Sw,w
  5488  0505  3E03               	addlw	3
  5489  0506  0086               	movwf	6
  5490  0507  3001               	movlw	1	; select bank2/3
  5491  0508  0087               	movwf	7
  5492  0509  3001               	movlw	1
  5493  050A  0781               	addwf	1,f
  5494  050B  3141               	addfsr 1,1
  5495  050C  1803               	skipnc
  5496  050D  0A81               	incf	1,f
  5497                           
  5498                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  5499  050E  086D               	movf	_Sw,w
  5500  050F  3E03               	addlw	3
  5501  0510  0086               	movwf	6
  5502  0511  3001               	movlw	1	; select bank2/3
  5503  0512  0087               	movwf	7
  5504  0513  3F40               	moviw [0]fsr1
  5505  0514  00E5               	movwf	??_setSw_Main
  5506  0515  3F41               	moviw [1]fsr1
  5507  0516  00E6               	movwf	??_setSw_Main+1
  5508  0517  3000               	movlw	0
  5509  0518  0266               	subwf	??_setSw_Main+1,w
  5510  0519  3096               	movlw	150
  5511  051A  1903               	skipnz
  5512  051B  0265               	subwf	??_setSw_Main,w
  5513  051C  1C03               	skipc
  5514  051D  0008               	return
  5515                           
  5516                           ;Switch_B1.c: 170: {
  5517                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  5518  051E  086D               	movf	_Sw,w
  5519  051F  3E03               	addlw	3
  5520  0520  0086               	movwf	6
  5521  0521  3001               	movlw	1	; select bank2/3
  5522  0522  0087               	movwf	7
  5523  0523  3000               	movlw	0
  5524  0524  3FC0               	movwi [0]fsr1
  5525  0525  3FC1               	movwi [1]fsr1
  5526                           
  5527                           ;Switch_B1.c: 172: Sw->Hold1=1;
  5528  0526  086D               	movf	_Sw,w
  5529  0527  0086               	movwf	6
  5530  0528  3001               	movlw	1	; select bank2/3
  5531  0529  0087               	movwf	7
  5532  052A  1581               	bsf	1,3
  5533                           
  5534                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  5535  052B  0868               	movf	setSw_Main@sw,w
  5536  052C  319B  2322         	fcall	_Sw_DimmerAdjFunc
  5537                           
  5538                           ;Switch_B1.c: 178: }
  5539                           ;Switch_B1.c: 179: }
  5540  052E  0008               	return
  5541  052F                     l9130:	
  5542                           
  5543                           ;Switch_B1.c: 180: else
  5544                           ;Switch_B1.c: 181: {
  5545                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  5546  052F  0020               	movlb	0	; select bank0
  5547  0530  086D               	movf	_Sw,w
  5548  0531  0086               	movwf	6
  5549  0532  3001               	movlw	1	; select bank2/3
  5550  0533  0087               	movwf	7
  5551  0534  1A01               	btfsc	1,4
  5552  0535  2D73               	goto	l9144
  5553                           
  5554                           ;Switch_B1.c: 183: {
  5555                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  5556  0536  086D               	movf	_Sw,w
  5557  0537  3E05               	addlw	5
  5558  0538  0086               	movwf	6
  5559  0539  3001               	movlw	1	; select bank2/3
  5560  053A  0087               	movwf	7
  5561  053B  3001               	movlw	1
  5562  053C  0781               	addwf	1,f
  5563  053D  3141               	addfsr 1,1
  5564  053E  1803               	skipnc
  5565  053F  0A81               	incf	1,f
  5566                           
  5567                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  5568  0540  086D               	movf	_Sw,w
  5569  0541  3E05               	addlw	5
  5570  0542  0086               	movwf	6
  5571  0543  3001               	movlw	1	; select bank2/3
  5572  0544  0087               	movwf	7
  5573  0545  3F40               	moviw [0]fsr1
  5574  0546  00E5               	movwf	??_setSw_Main
  5575  0547  3F41               	moviw [1]fsr1
  5576  0548  00E6               	movwf	??_setSw_Main+1
  5577  0549  3000               	movlw	0
  5578  054A  0266               	subwf	??_setSw_Main+1,w
  5579  054B  3096               	movlw	150
  5580  054C  1903               	skipnz
  5581  054D  0265               	subwf	??_setSw_Main,w
  5582  054E  1C03               	skipc
  5583  054F  0008               	return
  5584                           
  5585                           ;Switch_B1.c: 186: {
  5586                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  5587  0550  086D               	movf	_Sw,w
  5588  0551  3E05               	addlw	5
  5589  0552  0086               	movwf	6
  5590  0553  3001               	movlw	1	; select bank2/3
  5591  0554  0087               	movwf	7
  5592  0555  3000               	movlw	0
  5593  0556  3FC0               	movwi [0]fsr1
  5594  0557  3FC1               	movwi [1]fsr1
  5595                           
  5596                           ;Switch_B1.c: 188: Sw->Hold2=1;
  5597  0558  086D               	movf	_Sw,w
  5598  0559  0086               	movwf	6
  5599  055A  3001               	movlw	1	; select bank2/3
  5600  055B  0087               	movwf	7
  5601  055C  1601               	bsf	1,4
  5602                           
  5603                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  5604  055D  01A2               	clrf	setRF_Learn@command
  5605  055E  0AA2               	incf	setRF_Learn@command,f
  5606  055F  3001               	movlw	1
  5607  0560  31A7  27D4  3184   	fcall	_setRF_Learn
  5608                           
  5609                           ;Switch_B1.c: 194: if(TMain->First)
  5610  0563  087D               	movf	_TMain,w
  5611  0564  3E03               	addlw	3
  5612  0565  0086               	movwf	6
  5613  0566  3001               	movlw	1	; select bank2/3
  5614  0567  0087               	movwf	7
  5615  0568  1C81               	btfss	1,1
  5616  0569  0008               	return
  5617                           
  5618                           ;Switch_B1.c: 195: {
  5619                           ;Switch_B1.c: 196: setBuz(2,100);
  5620  056A  3064               	movlw	100
  5621  056B  0020               	movlb	0	; select bank0
  5622  056C  00A6               	movwf	setBuz@time
  5623  056D  3000               	movlw	0
  5624  056E  00A7               	movwf	setBuz@time+1
  5625  056F  3002               	movlw	2
  5626  0570  3197  2710         	fcall	_setBuz
  5627                           
  5628                           ;Switch_B1.c: 197: }
  5629                           ;Switch_B1.c: 199: }
  5630                           ;Switch_B1.c: 200: }
  5631  0572  0008               	return
  5632  0573                     l9144:	
  5633                           
  5634                           ;Switch_B1.c: 201: else
  5635                           ;Switch_B1.c: 202: {
  5636                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  5637  0573  0020               	movlb	0	; select bank0
  5638  0574  086D               	movf	_Sw,w
  5639  0575  0086               	movwf	6
  5640  0576  3001               	movlw	1	; select bank2/3
  5641  0577  0087               	movwf	7
  5642  0578  1A81               	btfsc	1,5
  5643  0579  0008               	return
  5644                           
  5645                           ;Switch_B1.c: 204: {
  5646                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  5647  057A  086D               	movf	_Sw,w
  5648  057B  3E07               	addlw	7
  5649  057C  0086               	movwf	6
  5650  057D  3001               	movlw	1	; select bank2/3
  5651  057E  0087               	movwf	7
  5652  057F  3001               	movlw	1
  5653  0580  0781               	addwf	1,f
  5654  0581  3141               	addfsr 1,1
  5655  0582  1803               	skipnc
  5656  0583  0A81               	incf	1,f
  5657                           
  5658                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  5659  0584  086D               	movf	_Sw,w
  5660  0585  3E07               	addlw	7
  5661  0586  0086               	movwf	6
  5662  0587  3001               	movlw	1	; select bank2/3
  5663  0588  0087               	movwf	7
  5664  0589  3F40               	moviw [0]fsr1
  5665  058A  00E5               	movwf	??_setSw_Main
  5666  058B  3F41               	moviw [1]fsr1
  5667  058C  00E6               	movwf	??_setSw_Main+1
  5668  058D  3001               	movlw	1
  5669  058E  0266               	subwf	??_setSw_Main+1,w
  5670  058F  302C               	movlw	44
  5671  0590  1903               	skipnz
  5672  0591  0265               	subwf	??_setSw_Main,w
  5673  0592  1C03               	skipc
  5674  0593  0008               	return
  5675                           
  5676                           ;Switch_B1.c: 207: {
  5677                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  5678  0594  086D               	movf	_Sw,w
  5679  0595  3E07               	addlw	7
  5680  0596  0086               	movwf	6
  5681  0597  3001               	movlw	1	; select bank2/3
  5682  0598  0087               	movwf	7
  5683  0599  3000               	movlw	0
  5684  059A  3FC0               	movwi [0]fsr1
  5685  059B  3FC1               	movwi [1]fsr1
  5686                           
  5687                           ;Switch_B1.c: 209: Sw->Hold3=1;
  5688  059C  086D               	movf	_Sw,w
  5689  059D  0086               	movwf	6
  5690  059E  3001               	movlw	1	; select bank2/3
  5691  059F  0087               	movwf	7
  5692  05A0  1681               	bsf	1,5
  5693                           
  5694                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  5695  05A1  01A2               	clrf	setRF_Learn@command
  5696  05A2  3001               	movlw	1
  5697  05A3  31A7  27D4         	fcall	_setRF_Learn
  5698                           
  5699                           ;Switch_B1.c: 215: }
  5700                           ;Switch_B1.c: 216: }
  5701                           ;Switch_B1.c: 217: }
  5702                           ;Switch_B1.c: 218: }
  5703                           ;Switch_B1.c: 219: }
  5704                           ;Switch_B1.c: 220: }
  5705  05A5  0008               	return
  5706  05A6                     l9154:	
  5707                           
  5708                           ;Switch_B1.c: 221: else
  5709                           ;Switch_B1.c: 222: {
  5710                           ;Switch_B1.c: 223: if(Sw->Debounce)
  5711  05A6  0020               	movlb	0	; select bank0
  5712  05A7  086D               	movf	_Sw,w
  5713  05A8  0086               	movwf	6
  5714  05A9  3001               	movlw	1	; select bank2/3
  5715  05AA  0087               	movwf	7
  5716  05AB  1D01               	btfss	1,2
  5717  05AC  0008               	return
  5718                           
  5719                           ;Switch_B1.c: 224: {
  5720                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  5721  05AD  3001               	movlw	1
  5722  05AE  00E5               	movwf	??_setSw_Main
  5723  05AF  086D               	movf	_Sw,w
  5724  05B0  3E02               	addlw	2
  5725  05B1  0086               	movwf	6
  5726  05B2  3001               	movlw	1	; select bank2/3
  5727  05B3  0087               	movwf	7
  5728  05B4  0865               	movf	??_setSw_Main,w
  5729  05B5  0781               	addwf	1,f
  5730                           
  5731                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  5732  05B6  086D               	movf	_Sw,w
  5733  05B7  3E02               	addlw	2
  5734  05B8  0086               	movwf	6
  5735  05B9  3001               	movlw	1	; select bank2/3
  5736  05BA  0087               	movwf	7
  5737  05BB  3005               	movlw	5
  5738  05BC  0201               	subwf	1,w
  5739  05BD  1C03               	skipc
  5740  05BE  0008               	return
  5741                           
  5742                           ;Switch_B1.c: 227: {
  5743                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  5744  05BF  086D               	movf	_Sw,w
  5745  05C0  3E02               	addlw	2
  5746  05C1  0086               	movwf	6
  5747  05C2  3001               	movlw	1	; select bank2/3
  5748  05C3  0087               	movwf	7
  5749  05C4  0181               	clrf	1
  5750                           
  5751                           ;Switch_B1.c: 229: Sw->Debounce=0;
  5752  05C5  086D               	movf	_Sw,w
  5753  05C6  0086               	movwf	6
  5754  05C7  3001               	movlw	1	; select bank2/3
  5755  05C8  0087               	movwf	7
  5756  05C9  1101               	bcf	1,2
  5757                           
  5758                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  5759  05CA  086D               	movf	_Sw,w
  5760  05CB  3E03               	addlw	3
  5761  05CC  0086               	movwf	6
  5762  05CD  3001               	movlw	1	; select bank2/3
  5763  05CE  0087               	movwf	7
  5764  05CF  3000               	movlw	0
  5765  05D0  3FC0               	movwi [0]fsr1
  5766  05D1  3FC1               	movwi [1]fsr1
  5767                           
  5768                           ;Switch_B1.c: 231: Sw->Hold1=0;
  5769  05D2  086D               	movf	_Sw,w
  5770  05D3  0086               	movwf	6
  5771  05D4  3001               	movlw	1	; select bank2/3
  5772  05D5  0087               	movwf	7
  5773  05D6  1181               	bcf	1,3
  5774                           
  5775                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  5776  05D7  086D               	movf	_Sw,w
  5777  05D8  3E05               	addlw	5
  5778  05D9  0086               	movwf	6
  5779  05DA  3001               	movlw	1	; select bank2/3
  5780  05DB  0087               	movwf	7
  5781  05DC  3000               	movlw	0
  5782  05DD  3FC0               	movwi [0]fsr1
  5783  05DE  3FC1               	movwi [1]fsr1
  5784                           
  5785                           ;Switch_B1.c: 233: Sw->Hold2=0;
  5786  05DF  086D               	movf	_Sw,w
  5787  05E0  0086               	movwf	6
  5788  05E1  3001               	movlw	1	; select bank2/3
  5789  05E2  0087               	movwf	7
  5790  05E3  1201               	bcf	1,4
  5791                           
  5792                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  5793  05E4  086D               	movf	_Sw,w
  5794  05E5  3E07               	addlw	7
  5795  05E6  0086               	movwf	6
  5796  05E7  3001               	movlw	1	; select bank2/3
  5797  05E8  0087               	movwf	7
  5798  05E9  3000               	movlw	0
  5799  05EA  3FC0               	movwi [0]fsr1
  5800  05EB  3FC1               	movwi [1]fsr1
  5801                           
  5802                           ;Switch_B1.c: 235: Sw->Hold3=0;
  5803  05EC  086D               	movf	_Sw,w
  5804  05ED  0086               	movwf	6
  5805  05EE  3001               	movlw	1	; select bank2/3
  5806  05EF  0087               	movwf	7
  5807  05F0  1281               	bcf	1,5
  5808                           
  5809                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  5810  05F1  0868               	movf	setSw_Main@sw,w
  5811  05F2  3195  25B9  3184   	fcall	_Sw_DimmerOffFunc
  5812                           
  5813                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  5814  05F5  0020               	movlb	0	; select bank0
  5815  05F6  01A2               	clrf	setRF_Learn@command
  5816  05F7  3001               	movlw	1
  5817  05F8  31A7  27D4         	fcall	_setRF_Learn
  5818  05FA  0008               	return
  5819  05FB                     __end_of_setSw_Main:	
  5820                           
  5821                           	psect	text12
  5822  27D4                     __ptext12:	
  5823 ;; *************** function _setRF_Learn *****************
  5824 ;; Defined at:
  5825 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\RF_Control_B1.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  rf              1    wreg     unsigned char 
  5828 ;;  command         1    2[BANK0 ] unsigned char 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  rf              1    3[BANK0 ] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;		None               void
  5833 ;; Registers used:
  5834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5840 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;Total ram usage:        2 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    5
  5847 ;; This function calls:
  5848 ;;		_RfPointSelect
  5849 ;; This function is called by:
  5850 ;;		_setSw_Main
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           
  5855                           ;psect for function _setRF_Learn
  5856  27D4                     _setRF_Learn:	
  5857                           
  5858                           ;incstack = 0
  5859                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5860                           ;setRF_Learn@rf stored from wreg
  5861  27D4  0020               	movlb	0	; select bank0
  5862  27D5  00A3               	movwf	setRF_Learn@rf
  5863                           
  5864                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  5865  27D6  0823               	movf	setRF_Learn@rf,w
  5866  27D7  31A6  26E2         	fcall	_RfPointSelect
  5867                           
  5868                           ;RF_Control_B1.c: 34: RF->Learn=command;
  5869  27D9  087B               	movf	_RF,w
  5870  27DA  0086               	movwf	6
  5871  27DB  0187               	clrf	7
  5872  27DC  0020               	movlb	0	; select bank0
  5873  27DD  0822               	movf	setRF_Learn@command,w
  5874  27DE  1301               	bcf	1,6
  5875  27DF  1D03               	skipz
  5876  27E0  1701               	bsf	1,6
  5877  27E1  0008               	return
  5878  27E2                     __end_of_setRF_Learn:	
  5879                           
  5880                           	psect	text13
  5881  110C                     __ptext13:	
  5882 ;; *************** function _Sw_DimmerOnFunc *****************
  5883 ;; Defined at:
  5884 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Switch_B1.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  sw              1    wreg     unsigned char 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  sw              1   67[BANK0 ] unsigned char 
  5889 ;;  Idle            1   66[BANK0 ] unsigned char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;		None               void
  5892 ;; Registers used:
  5893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;Total ram usage:        2 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    8
  5906 ;; This function calls:
  5907 ;;		_setBuz
  5908 ;;		_setDimmerLights_Switch
  5909 ;;		_setDimmerLights_Trigger
  5910 ;;		_setRFSW_Status
  5911 ;;		_setRF_DimmerLights
  5912 ;;		_setTxData
  5913 ;; This function is called by:
  5914 ;;		_setSw_Main
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _Sw_DimmerOnFunc
  5920  110C                     _Sw_DimmerOnFunc:	
  5921                           
  5922                           ;incstack = 0
  5923                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5924                           ;Sw_DimmerOnFunc@sw stored from wreg
  5925  110C  0020               	movlb	0	; select bank0
  5926  110D  00E3               	movwf	Sw_DimmerOnFunc@sw
  5927                           
  5928                           ;Switch_B1.c: 253: char Idle=1;
  5929  110E  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5930  110F  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5931                           
  5932                           ;Switch_B1.c: 280: if(Idle)
  5933  1110  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5934  1111  1903               	btfsc	3,2
  5935  1112  0008               	return
  5936                           
  5937                           ;Switch_B1.c: 281: {
  5938                           ;Switch_B1.c: 282: Sw->Flag=1;
  5939  1113  086D               	movf	_Sw,w
  5940  1114  0086               	movwf	6
  5941  1115  3001               	movlw	1	; select bank2/3
  5942  1116  0087               	movwf	7
  5943  1117  1781               	bsf	1,7
  5944                           
  5945                           ;Switch_B1.c: 283: setBuz(1,100);
  5946  1118  3064               	movlw	100
  5947  1119  00A6               	movwf	setBuz@time
  5948  111A  3000               	movlw	0
  5949  111B  00A7               	movwf	setBuz@time+1
  5950  111C  3001               	movlw	1
  5951  111D  3197  2710  3191   	fcall	_setBuz
  5952                           
  5953                           ;Switch_B1.c: 284: if(!Sw->Status)
  5954  1120  0020               	movlb	0	; select bank0
  5955  1121  086D               	movf	_Sw,w
  5956  1122  0086               	movwf	6
  5957  1123  3001               	movlw	1	; select bank2/3
  5958  1124  0087               	movwf	7
  5959  1125  1B01               	btfsc	1,6
  5960  1126  2952               	goto	l8676
  5961                           
  5962                           ;Switch_B1.c: 285: {
  5963                           ;Switch_B1.c: 286: Sw->Status=1;
  5964  1127  086D               	movf	_Sw,w
  5965  1128  0086               	movwf	6
  5966  1129  3001               	movlw	1	; select bank2/3
  5967  112A  0087               	movwf	7
  5968  112B  1701               	bsf	1,6
  5969                           
  5970                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  5971  112C  01A2               	clrf	setRFSW_Status@command
  5972  112D  0AA2               	incf	setRFSW_Status@command,f
  5973  112E  0863               	movf	Sw_DimmerOnFunc@sw,w
  5974  112F  31A7  27F1  3191   	fcall	_setRFSW_Status
  5975                           
  5976                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  5977  1132  0020               	movlb	0	; select bank0
  5978  1133  01A2               	clrf	setDimmerLights_Trigger@command
  5979  1134  0AA2               	incf	setDimmerLights_Trigger@command,f
  5980  1135  0863               	movf	Sw_DimmerOnFunc@sw,w
  5981  1136  3198  20A8  3191   	fcall	_setDimmerLights_Trigger
  5982                           
  5983                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  5984  1139  0020               	movlb	0	; select bank0
  5985  113A  01A2               	clrf	setDimmerLights_Switch@command
  5986  113B  0AA2               	incf	setDimmerLights_Switch@command,f
  5987  113C  0863               	movf	Sw_DimmerOnFunc@sw,w
  5988  113D  3198  2098  3191   	fcall	_setDimmerLights_Switch
  5989                           
  5990                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  5991  1140  0020               	movlb	0	; select bank0
  5992  1141  086D               	movf	_Sw,w
  5993  1142  0086               	movwf	6
  5994  1143  3001               	movlw	1	; select bank2/3
  5995  1144  0087               	movwf	7
  5996  1145  3000               	movlw	0
  5997  1146  1B01               	btfsc	1,6
  5998  1147  3001               	movlw	1
  5999  1148  00DD               	movwf	setRF_DimmerLights@on
  6000  1149  0863               	movf	Sw_DimmerOnFunc@sw,w
  6001  114A  3193  2399  3191   	fcall	_setRF_DimmerLights
  6002                           
  6003                           ;Switch_B1.c: 293: setTxData(1);
  6004  114D  3001               	movlw	1
  6005  114E  3187  271E         	fcall	_setTxData
  6006                           
  6007                           ;Switch_B1.c: 294: }
  6008  1150  0020               	movlb	0	; select bank0
  6009  1151  0008               	return
  6010  1152                     l8676:	
  6011                           
  6012                           ;Switch_B1.c: 295: else
  6013                           ;Switch_B1.c: 296: {
  6014                           ;Switch_B1.c: 297: Sw->Status=0;
  6015  1152  0020               	movlb	0	; select bank0
  6016  1153  086D               	movf	_Sw,w
  6017  1154  0086               	movwf	6
  6018  1155  3001               	movlw	1	; select bank2/3
  6019  1156  0087               	movwf	7
  6020  1157  1301               	bcf	1,6
  6021                           
  6022                           ;Switch_B1.c: 298: setRFSW_Status(sw,Sw->Status);
  6023  1158  086D               	movf	_Sw,w
  6024  1159  0086               	movwf	6
  6025  115A  3001               	movlw	1	; select bank2/3
  6026  115B  0087               	movwf	7
  6027  115C  3000               	movlw	0
  6028  115D  1B01               	btfsc	1,6
  6029  115E  3001               	movlw	1
  6030  115F  00A2               	movwf	setRFSW_Status@command
  6031  1160  0863               	movf	Sw_DimmerOnFunc@sw,w
  6032  1161  31A7  27F1         	fcall	_setRFSW_Status
  6033  1163  0020               	movlb	0	; select bank0
  6034  1164  0008               	return
  6035  1165                     __end_of_Sw_DimmerOnFunc:	
  6036                           
  6037                           	psect	text14
  6038  15B9                     __ptext14:	
  6039 ;; *************** function _Sw_DimmerOffFunc *****************
  6040 ;; Defined at:
  6041 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Switch_B1.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  sw              1    wreg     unsigned char 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  sw              1   68[BANK0 ] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        3 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    8
  6062 ;; This function calls:
  6063 ;;		_setDelayOff_GO
  6064 ;;		_setDimmerLights_AdjGo
  6065 ;;		_setDimmerLights_Switch
  6066 ;;		_setDimmerLights_Trigger
  6067 ;;		_setDimmerLights_TriggerAdj
  6068 ;;		_setRF_DimmerLights
  6069 ;;		_setTxData
  6070 ;; This function is called by:
  6071 ;;		_setSw_Main
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           
  6076                           ;psect for function _Sw_DimmerOffFunc
  6077  15B9                     _Sw_DimmerOffFunc:	
  6078                           
  6079                           ;incstack = 0
  6080                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6081                           ;Sw_DimmerOffFunc@sw stored from wreg
  6082  15B9  0020               	movlb	0	; select bank0
  6083  15BA  00E4               	movwf	Sw_DimmerOffFunc@sw
  6084                           
  6085                           ;Switch_B1.c: 305: if(Sw->Flag)
  6086  15BB  086D               	movf	_Sw,w
  6087  15BC  0086               	movwf	6
  6088  15BD  3001               	movlw	1	; select bank2/3
  6089  15BE  0087               	movwf	7
  6090  15BF  1F81               	btfss	1,7
  6091  15C0  0008               	return
  6092                           
  6093                           ;Switch_B1.c: 306: {
  6094                           ;Switch_B1.c: 307: Sw->Flag=0;
  6095  15C1  086D               	movf	_Sw,w
  6096  15C2  0086               	movwf	6
  6097  15C3  3001               	movlw	1	; select bank2/3
  6098  15C4  0087               	movwf	7
  6099  15C5  1381               	bcf	1,7
  6100                           
  6101                           ;Switch_B1.c: 308: if(Sw->Status)
  6102  15C6  086D               	movf	_Sw,w
  6103  15C7  0086               	movwf	6
  6104  15C8  3001               	movlw	1	; select bank2/3
  6105  15C9  0087               	movwf	7
  6106  15CA  1F01               	btfss	1,6
  6107  15CB  2E05               	goto	l8708
  6108                           
  6109                           ;Switch_B1.c: 309: {
  6110                           ;Switch_B1.c: 310: if(Sw->Adj)
  6111  15CC  0A6D               	incf	_Sw,w
  6112  15CD  0086               	movwf	6
  6113  15CE  3001               	movlw	1	; select bank2/3
  6114  15CF  0087               	movwf	7
  6115  15D0  1C01               	btfss	1,0
  6116  15D1  0008               	return
  6117                           
  6118                           ;Switch_B1.c: 311: {
  6119                           ;Switch_B1.c: 312: Sw->Adj=0;
  6120  15D2  0A6D               	incf	_Sw,w
  6121  15D3  0086               	movwf	6
  6122  15D4  3001               	movlw	1	; select bank2/3
  6123  15D5  0087               	movwf	7
  6124  15D6  1001               	bcf	1,0
  6125                           
  6126                           ;Switch_B1.c: 313: setDimmerLights_TriggerAdj(sw,1);
  6127  15D7  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6128  15D8  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6129  15D9  0864               	movf	Sw_DimmerOffFunc@sw,w
  6130  15DA  3198  20F8  3195   	fcall	_setDimmerLights_TriggerAdj
  6131                           
  6132                           ;Switch_B1.c: 314: setDimmerLights_AdjGo(sw,0);
  6133  15DD  0020               	movlb	0	; select bank0
  6134  15DE  01A2               	clrf	setDimmerLights_AdjGo@command
  6135  15DF  0864               	movf	Sw_DimmerOffFunc@sw,w
  6136  15E0  3198  20E8  3195   	fcall	_setDimmerLights_AdjGo
  6137                           
  6138                           ;Switch_B1.c: 316: Product->Data[17]=Product->Data[26+sw];
  6139  15E3  0020               	movlb	0	; select bank0
  6140  15E4  0864               	movf	Sw_DimmerOffFunc@sw,w
  6141  15E5  3E1A               	addlw	26
  6142  15E6  076F               	addwf	_Product,w
  6143  15E7  00E2               	movwf	??_Sw_DimmerOffFunc
  6144  15E8  0862               	movf	??_Sw_DimmerOffFunc,w
  6145  15E9  0086               	movwf	6
  6146  15EA  3001               	movlw	1	; select bank2/3
  6147  15EB  0087               	movwf	7
  6148  15EC  0801               	movf	1,w
  6149  15ED  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6150  15EE  086F               	movf	_Product,w
  6151  15EF  3E11               	addlw	17
  6152  15F0  0086               	movwf	6
  6153  15F1  3001               	movlw	1	; select bank2/3
  6154  15F2  0087               	movwf	7
  6155  15F3  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6156  15F4  0081               	movwf	1
  6157                           
  6158                           ;Switch_B1.c: 317: setRF_DimmerLights(sw,Sw->Status);
  6159  15F5  086D               	movf	_Sw,w
  6160  15F6  0086               	movwf	6
  6161  15F7  3001               	movlw	1	; select bank2/3
  6162  15F8  0087               	movwf	7
  6163  15F9  3000               	movlw	0
  6164  15FA  1B01               	btfsc	1,6
  6165  15FB  3001               	movlw	1
  6166  15FC  00DD               	movwf	setRF_DimmerLights@on
  6167  15FD  0864               	movf	Sw_DimmerOffFunc@sw,w
  6168  15FE  3193  2399  3195   	fcall	_setRF_DimmerLights
  6169                           
  6170                           ;Switch_B1.c: 318: setTxData(1);
  6171  1601  3001               	movlw	1
  6172  1602  3187  271E         	fcall	_setTxData
  6173                           
  6174                           ;Switch_B1.c: 320: }
  6175                           ;Switch_B1.c: 321: }
  6176  1604  0008               	return
  6177  1605                     l8708:	
  6178                           
  6179                           ;Switch_B1.c: 322: else
  6180                           ;Switch_B1.c: 323: {
  6181                           ;Switch_B1.c: 324: setDimmerLights_Trigger(sw,1);
  6182  1605  0020               	movlb	0	; select bank0
  6183  1606  01A2               	clrf	setDimmerLights_Trigger@command
  6184  1607  0AA2               	incf	setDimmerLights_Trigger@command,f
  6185  1608  0864               	movf	Sw_DimmerOffFunc@sw,w
  6186  1609  3198  20A8  3195   	fcall	_setDimmerLights_Trigger
  6187                           
  6188                           ;Switch_B1.c: 325: setDimmerLights_Switch(sw,0);
  6189  160C  0020               	movlb	0	; select bank0
  6190  160D  01A2               	clrf	setDimmerLights_Switch@command
  6191  160E  0864               	movf	Sw_DimmerOffFunc@sw,w
  6192  160F  3198  2098  3195   	fcall	_setDimmerLights_Switch
  6193                           
  6194                           ;Switch_B1.c: 327: setDelayOff_GO(sw,0,0);
  6195  1612  0020               	movlb	0	; select bank0
  6196  1613  01A3               	clrf	setDelayOff_GO@command
  6197  1614  01A4               	clrf	setDelayOff_GO@value
  6198  1615  0864               	movf	Sw_DimmerOffFunc@sw,w
  6199  1616  3192  221A  3195   	fcall	_setDelayOff_GO
  6200                           
  6201                           ;Switch_B1.c: 328: setRF_DimmerLights(sw,Sw->Status);
  6202  1619  0020               	movlb	0	; select bank0
  6203  161A  086D               	movf	_Sw,w
  6204  161B  0086               	movwf	6
  6205  161C  3001               	movlw	1	; select bank2/3
  6206  161D  0087               	movwf	7
  6207  161E  3000               	movlw	0
  6208  161F  1B01               	btfsc	1,6
  6209  1620  3001               	movlw	1
  6210  1621  00DD               	movwf	setRF_DimmerLights@on
  6211  1622  0864               	movf	Sw_DimmerOffFunc@sw,w
  6212  1623  3193  2399  3195   	fcall	_setRF_DimmerLights
  6213                           
  6214                           ;Switch_B1.c: 329: setTxData(1);
  6215  1626  3001               	movlw	1
  6216  1627  3187  271E         	fcall	_setTxData
  6217  1629  0008               	return
  6218  162A                     __end_of_Sw_DimmerOffFunc:	
  6219                           
  6220                           	psect	text15
  6221  1B22                     __ptext15:	
  6222 ;; *************** function _Sw_DimmerAdjFunc *****************
  6223 ;; Defined at:
  6224 ;;		line 334 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Switch_B1.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  sw              1    wreg     unsigned char 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  sw              1    4[BANK0 ] unsigned char 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;		None               void
  6231 ;; Registers used:
  6232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;Total ram usage:        1 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    6
  6245 ;; This function calls:
  6246 ;;		_setDimmerLights_AdjGo
  6247 ;;		_setDimmerLights_TriggerAdj
  6248 ;;		_setRFSW_Status
  6249 ;; This function is called by:
  6250 ;;		_setSw_Main
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           
  6255                           ;psect for function _Sw_DimmerAdjFunc
  6256  1B22                     _Sw_DimmerAdjFunc:	
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6260                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6261  1B22  0020               	movlb	0	; select bank0
  6262  1B23  00A4               	movwf	Sw_DimmerAdjFunc@sw
  6263                           
  6264                           ;Switch_B1.c: 336: if(Sw->Flag)
  6265  1B24  086D               	movf	_Sw,w
  6266  1B25  0086               	movwf	6
  6267  1B26  3001               	movlw	1	; select bank2/3
  6268  1B27  0087               	movwf	7
  6269  1B28  1F81               	btfss	1,7
  6270  1B29  0008               	return
  6271                           
  6272                           ;Switch_B1.c: 337: {
  6273                           ;Switch_B1.c: 338: Sw->Adj=1;
  6274  1B2A  0A6D               	incf	_Sw,w
  6275  1B2B  0086               	movwf	6
  6276  1B2C  3001               	movlw	1	; select bank2/3
  6277  1B2D  0087               	movwf	7
  6278  1B2E  1401               	bsf	1,0
  6279                           
  6280                           ;Switch_B1.c: 339: Sw->Status=1;
  6281  1B2F  086D               	movf	_Sw,w
  6282  1B30  0086               	movwf	6
  6283  1B31  3001               	movlw	1	; select bank2/3
  6284  1B32  0087               	movwf	7
  6285  1B33  1701               	bsf	1,6
  6286                           
  6287                           ;Switch_B1.c: 340: setRFSW_Status(sw,1);
  6288  1B34  01A2               	clrf	setRFSW_Status@command
  6289  1B35  0AA2               	incf	setRFSW_Status@command,f
  6290  1B36  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6291  1B37  31A7  27F1  319B   	fcall	_setRFSW_Status
  6292                           
  6293                           ;Switch_B1.c: 342: setDimmerLights_TriggerAdj(sw,1);
  6294  1B3A  0020               	movlb	0	; select bank0
  6295  1B3B  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6296  1B3C  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6297  1B3D  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6298  1B3E  3198  20F8  319B   	fcall	_setDimmerLights_TriggerAdj
  6299                           
  6300                           ;Switch_B1.c: 343: setDimmerLights_AdjGo(sw,1);
  6301  1B41  0020               	movlb	0	; select bank0
  6302  1B42  01A2               	clrf	setDimmerLights_AdjGo@command
  6303  1B43  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6304  1B44  0824               	movf	Sw_DimmerAdjFunc@sw,w
  6305  1B45  3198  20E8         	fcall	_setDimmerLights_AdjGo
  6306  1B47  0008               	return
  6307  1B48                     __end_of_Sw_DimmerAdjFunc:	
  6308                           
  6309                           	psect	text16
  6310  18F8                     __ptext16:	
  6311 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6312 ;; Defined at:
  6313 ;;		line 441 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  lights          1    wreg     unsigned char 
  6316 ;;  command         1    2[BANK0 ] unsigned char 
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  lights          1    3[BANK0 ] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;		None               void
  6321 ;; Registers used:
  6322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6328 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;Total ram usage:        2 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    5
  6335 ;; This function calls:
  6336 ;;		_DimmerLightsPointSelect
  6337 ;; This function is called by:
  6338 ;;		_Sw_DimmerOffFunc
  6339 ;;		_Sw_DimmerAdjFunc
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           
  6344                           ;psect for function _setDimmerLights_TriggerAdj
  6345  18F8                     _setDimmerLights_TriggerAdj:	
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6349                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6350  18F8  0020               	movlb	0	; select bank0
  6351  18F9  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6352                           
  6353                           ;Dimmer_B1.c: 443: DimmerLightsPointSelect(lights);
  6354  18FA  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6355  18FB  31A6  26CC         	fcall	_DimmerLightsPointSelect
  6356                           
  6357                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj=command;
  6358  18FD  0020               	movlb	0	; select bank0
  6359  18FE  086C               	movf	_DimmerLights,w
  6360  18FF  3E09               	addlw	9
  6361  1900  0086               	movwf	6
  6362  1901  3001               	movlw	1	; select bank2/3
  6363  1902  0087               	movwf	7
  6364  1903  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6365  1904  1181               	bcf	1,3
  6366  1905  1D03               	skipz
  6367  1906  1581               	bsf	1,3
  6368  1907  0008               	return
  6369  1908                     __end_of_setDimmerLights_TriggerAdj:	
  6370                           
  6371                           	psect	text17
  6372  18E8                     __ptext17:	
  6373 ;; *************** function _setDimmerLights_AdjGo *****************
  6374 ;; Defined at:
  6375 ;;		line 431 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  lights          1    wreg     unsigned char 
  6378 ;;  command         1    2[BANK0 ] unsigned char 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;  lights          1    3[BANK0 ] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;		None               void
  6383 ;; Registers used:
  6384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        2 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    5
  6397 ;; This function calls:
  6398 ;;		_DimmerLightsPointSelect
  6399 ;; This function is called by:
  6400 ;;		_Sw_DimmerOffFunc
  6401 ;;		_Sw_DimmerAdjFunc
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           
  6406                           ;psect for function _setDimmerLights_AdjGo
  6407  18E8                     _setDimmerLights_AdjGo:	
  6408                           
  6409                           ;incstack = 0
  6410                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6411                           ;setDimmerLights_AdjGo@lights stored from wreg
  6412  18E8  0020               	movlb	0	; select bank0
  6413  18E9  00A3               	movwf	setDimmerLights_AdjGo@lights
  6414                           
  6415                           ;Dimmer_B1.c: 433: DimmerLightsPointSelect(lights);
  6416  18EA  0823               	movf	setDimmerLights_AdjGo@lights,w
  6417  18EB  31A6  26CC         	fcall	_DimmerLightsPointSelect
  6418                           
  6419                           ;Dimmer_B1.c: 434: DimmerLights->AdjGo=command;
  6420  18ED  0020               	movlb	0	; select bank0
  6421  18EE  086C               	movf	_DimmerLights,w
  6422  18EF  3E09               	addlw	9
  6423  18F0  0086               	movwf	6
  6424  18F1  3001               	movlw	1	; select bank2/3
  6425  18F2  0087               	movwf	7
  6426  18F3  0822               	movf	setDimmerLights_AdjGo@command,w
  6427  18F4  1101               	bcf	1,2
  6428  18F5  1D03               	skipz
  6429  18F6  1501               	bsf	1,2
  6430  18F7  0008               	return
  6431  18F8                     __end_of_setDimmerLights_AdjGo:	
  6432                           
  6433                           	psect	text18
  6434  2699                     __ptext18:	
  6435 ;; *************** function _Switch_Initialization *****************
  6436 ;; Defined at:
  6437 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Switch_B1.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;		None               void
  6444 ;; Registers used:
  6445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;Total ram usage:        0 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    7
  6458 ;; This function calls:
  6459 ;;		_TouchPower
  6460 ;;		_setSw_Initialization
  6461 ;; This function is called by:
  6462 ;;		_main
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _Switch_Initialization
  6468  2699                     _Switch_Initialization:	
  6469                           
  6470                           ;Switch_B1.c: 40: TouchPower();
  6471                           
  6472                           ;incstack = 0
  6473                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6474  2699  31A6  264D  31A6   	fcall	_TouchPower
  6475                           
  6476                           ;Switch_B1.c: 42: WPUB1=0;
  6477  269C  0024               	movlb	4	; select bank4
  6478  269D  108D               	bcf	13,1	;volatile
  6479                           
  6480                           ;Switch_B1.c: 51: setSw_Initialization(1);
  6481  269E  3001               	movlw	1
  6482  269F  3198  20D8         	fcall	_setSw_Initialization
  6483  26A1  0008               	return
  6484  26A2                     __end_of_Switch_Initialization:	
  6485                           
  6486                           	psect	text19
  6487  18D8                     __ptext19:	
  6488 ;; *************** function _setSw_Initialization *****************
  6489 ;; Defined at:
  6490 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Switch_B1.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  sw              1    wreg     unsigned char 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  sw              1    4[BANK0 ] unsigned char 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;		None               void
  6497 ;; Registers used:
  6498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        1 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    6
  6511 ;; This function calls:
  6512 ;;		_setLED
  6513 ;; This function is called by:
  6514 ;;		_Switch_Initialization
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           
  6519                           ;psect for function _setSw_Initialization
  6520  18D8                     _setSw_Initialization:	
  6521                           
  6522                           ;incstack = 0
  6523                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6524                           ;setSw_Initialization@sw stored from wreg
  6525  18D8  0020               	movlb	0	; select bank0
  6526  18D9  00A4               	movwf	setSw_Initialization@sw
  6527                           
  6528                           ;Switch_B1.c: 80: setLED(sw,1);
  6529  18DA  01A2               	clrf	setLED@command
  6530  18DB  0AA2               	incf	setLED@command,f
  6531  18DC  0824               	movf	setSw_Initialization@sw,w
  6532  18DD  3192  2276  3198   	fcall	_setLED
  6533                           
  6534                           ;Switch_B1.c: 82: setLED(sw+1,1);
  6535  18E0  0020               	movlb	0	; select bank0
  6536  18E1  01A2               	clrf	setLED@command
  6537  18E2  0AA2               	incf	setLED@command,f
  6538  18E3  0824               	movf	setSw_Initialization@sw,w
  6539  18E4  3E01               	addlw	1
  6540  18E5  3192  2276         	fcall	_setLED
  6541  18E7  0008               	return
  6542  18E8                     __end_of_setSw_Initialization:	
  6543                           
  6544                           	psect	text20
  6545  264D                     __ptext20:	
  6546 ;; *************** function _TouchPower *****************
  6547 ;; Defined at:
  6548 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.1
      +.1.1\Release\Switch_B1.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;		None
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;		None
  6553 ;; Return value:  Size  Location     Type
  6554 ;;		None               void
  6555 ;; Registers used:
  6556 ;;		None
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;Total ram usage:        0 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    4
  6569 ;; This function calls:
  6570 ;;		Nothing
  6571 ;; This function is called by:
  6572 ;;		_Switch_Initialization
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           
  6577                           ;psect for function _TouchPower
  6578  264D                     _TouchPower:	
  6579  264D                     l2741:	
  6580                           ;Switch_B1.c: 11: while(!RC5)
  6581                           
  6582                           ;incstack = 0
  6583                           ; Regs used in _TouchPower: []
  6584                           
  6585  264D  0020               	movlb	0	; select bank0
  6586  264E  1A8E               	btfsc	14,5	;volatile
  6587  264F  0008               	return
  6588                           
  6589                           ;Switch_B1.c: 12: RC5=1;
  6590  2650  168E               	bsf	14,5	;volatile
  6591  2651  2E4D               	goto	l2741
  6592  2652                     __end_of_TouchPower:	
  6593                           
  6594                           	psect	text21
  6595  2649                     __ptext21:	
  6596 ;; *************** function _RF_Main *****************
  6597 ;; Defined at:
  6598 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\RF_Control_B1.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;		None
  6603 ;; Return value:  Size  Location     Type
  6604 ;;		None               void
  6605 ;; Registers used:
  6606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;Total ram usage:        0 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:   13
  6619 ;; This function calls:
  6620 ;;		_setRF_Main
  6621 ;; This function is called by:
  6622 ;;		_main
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           
  6627                           ;psect for function _RF_Main
  6628  2649                     _RF_Main:	
  6629                           
  6630                           ;RF_Control_B1.c: 27: setRF_Main(1);
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6634  2649  3001               	movlw	1
  6635  264A  3188  20D8         	fcall	_setRF_Main
  6636  264C  0008               	return
  6637  264D                     __end_of_RF_Main:	
  6638                           
  6639                           	psect	text22
  6640  08D8                     __ptext22:	
  6641 ;; *************** function _setRF_Main *****************
  6642 ;; Defined at:
  6643 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\RF_Control_B1.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  rf              1    wreg     unsigned char 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  rf              1   74[BANK0 ] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;		None               void
  6650 ;; Registers used:
  6651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:        3 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:   12
  6664 ;; This function calls:
  6665 ;;		_CC2500_RxData
  6666 ;;		_CC2500_TxData
  6667 ;;		_CC2500_WriteCommand
  6668 ;;		_RF_RxDisable
  6669 ;;		_RfPointSelect
  6670 ;;		_getRxData
  6671 ;;		_setINT_GO
  6672 ;; This function is called by:
  6673 ;;		_RF_Main
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           
  6678                           ;psect for function _setRF_Main
  6679  08D8                     _setRF_Main:	
  6680                           
  6681                           ;incstack = 0
  6682                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6683                           ;setRF_Main@rf stored from wreg
  6684  08D8  0020               	movlb	0	; select bank0
  6685  08D9  00EA               	movwf	setRF_Main@rf
  6686                           
  6687                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  6688  08DA  086A               	movf	setRF_Main@rf,w
  6689  08DB  31A6  26E2  3188   	fcall	_RfPointSelect
  6690                           
  6691                           ;RF_Control_B1.c: 61: if(RF->Enable)
  6692  08DE  087B               	movf	_RF,w
  6693  08DF  0086               	movwf	6
  6694  08E0  0187               	clrf	7
  6695  08E1  1C01               	btfss	1,0
  6696  08E2  0008               	return
  6697                           
  6698                           ;RF_Control_B1.c: 62: {
  6699                           ;RF_Control_B1.c: 72: RF->Key=((RA6 || RA4 || RA0 || RB1) && !RF->Learn)?1:0;
  6700  08E3  0020               	movlb	0	; select bank0
  6701  08E4  01EB               	clrf	_setRF_Main$4214
  6702  08E5  1F0C               	btfss	12,6	;volatile
  6703  08E6  1A0C               	btfsc	12,4	;volatile
  6704  08E7  28EC               	goto	l9038
  6705  08E8  180C               	btfsc	12,0	;volatile
  6706  08E9  28EC               	goto	l9038
  6707  08EA  1C8D               	btfss	13,1	;volatile
  6708  08EB  28F3               	goto	l9042
  6709  08EC                     l9038:	
  6710  08EC  087B               	movf	_RF,w
  6711  08ED  0086               	movwf	6
  6712  08EE  0187               	clrf	7
  6713  08EF  1B01               	btfsc	1,6
  6714  08F0  28F3               	goto	l9042
  6715  08F1  01EB               	clrf	_setRF_Main$4214
  6716  08F2  0AEB               	incf	_setRF_Main$4214,f
  6717  08F3                     l9042:	
  6718  08F3  087B               	movf	_RF,w
  6719  08F4  0086               	movwf	6
  6720  08F5  0187               	clrf	7
  6721  08F6  086B               	movf	_setRF_Main$4214,w
  6722  08F7  1381               	bcf	1,7
  6723  08F8  1D03               	skipz
  6724  08F9  1781               	bsf	1,7
  6725                           
  6726                           ;RF_Control_B1.c: 76: if(!RF->Key)
  6727  08FA  087B               	movf	_RF,w
  6728  08FB  0086               	movwf	6
  6729  08FC  0187               	clrf	7
  6730  08FD  1B81               	btfsc	1,7
  6731  08FE  292B               	goto	l9064
  6732                           
  6733                           ;RF_Control_B1.c: 77: {
  6734                           ;RF_Control_B1.c: 78: if(RF->ReceiveGO)
  6735  08FF  087B               	movf	_RF,w
  6736  0900  0086               	movwf	6
  6737  0901  0187               	clrf	7
  6738  0902  1C81               	btfss	1,1
  6739  0903  2910               	goto	l9052
  6740                           
  6741                           ;RF_Control_B1.c: 79: {
  6742                           ;RF_Control_B1.c: 80: RF->ReceiveGO=0;
  6743  0904  087B               	movf	_RF,w
  6744  0905  0086               	movwf	6
  6745  0906  0187               	clrf	7
  6746  0907  1081               	bcf	1,1
  6747                           
  6748                           ;RF_Control_B1.c: 81: CC2500_RxData();
  6749  0908  3193  2335  3188   	fcall	_CC2500_RxData
  6750                           
  6751                           ;RF_Control_B1.c: 87: getRxData(1);
  6752  090B  3001               	movlw	1
  6753  090C  3190  2063  3188   	fcall	_getRxData
  6754                           
  6755                           ;RF_Control_B1.c: 90: }
  6756  090F  292F               	goto	l9066
  6757  0910                     l9052:	
  6758                           
  6759                           ;RF_Control_B1.c: 91: else
  6760                           ;RF_Control_B1.c: 92: {
  6761                           ;RF_Control_B1.c: 93: if(!RF->TransceiveGO)
  6762  0910  087B               	movf	_RF,w
  6763  0911  0086               	movwf	6
  6764  0912  0187               	clrf	7
  6765  0913  1901               	btfsc	1,2
  6766  0914  292F               	goto	l9066
  6767                           
  6768                           ;RF_Control_B1.c: 94: {
  6769                           ;RF_Control_B1.c: 96: if(!RF->RxStatus)
  6770  0915  087B               	movf	_RF,w
  6771  0916  0086               	movwf	6
  6772  0917  0187               	clrf	7
  6773  0918  1981               	btfsc	1,3
  6774  0919  292F               	goto	l9066
  6775                           
  6776                           ;RF_Control_B1.c: 97: {
  6777                           ;RF_Control_B1.c: 98: RF->RxStatus=1;
  6778  091A  087B               	movf	_RF,w
  6779  091B  0086               	movwf	6
  6780  091C  0187               	clrf	7
  6781  091D  1581               	bsf	1,3
  6782                           
  6783                           ;RF_Control_B1.c: 99: CC2500_WriteCommand(0x36);
  6784  091E  3036               	movlw	54
  6785  091F  3198  2088  3188   	fcall	_CC2500_WriteCommand
  6786                           
  6787                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x34);
  6788  0922  3034               	movlw	52
  6789  0923  3198  2088  3188   	fcall	_CC2500_WriteCommand
  6790                           
  6791                           ;RF_Control_B1.c: 101: setINT_GO(1);
  6792  0926  3001               	movlw	1
  6793  0927  31A6  2690  3188   	fcall	_setINT_GO
  6794                           
  6795                           ;RF_Control_B1.c: 102: }
  6796                           ;RF_Control_B1.c: 104: }
  6797                           ;RF_Control_B1.c: 105: }
  6798                           ;RF_Control_B1.c: 106: }
  6799  092A  292F               	goto	l9066
  6800  092B                     l9064:	
  6801                           
  6802                           ;RF_Control_B1.c: 107: else
  6803                           ;RF_Control_B1.c: 108: {
  6804                           ;RF_Control_B1.c: 109: RF_RxDisable(1);
  6805  092B  3001               	movlw	1
  6806  092C  319B  2348  3188   	fcall	_RF_RxDisable
  6807  092F                     l9066:	
  6808                           
  6809                           ;RF_Control_B1.c: 110: }
  6810                           ;RF_Control_B1.c: 111: if(RF->TransceiveGO)
  6811  092F  087B               	movf	_RF,w
  6812  0930  0086               	movwf	6
  6813  0931  0187               	clrf	7
  6814  0932  1D01               	btfss	1,2
  6815  0933  0008               	return
  6816                           
  6817                           ;RF_Control_B1.c: 112: {
  6818                           ;RF_Control_B1.c: 113: RF_RxDisable(1);
  6819  0934  3001               	movlw	1
  6820  0935  319B  2348  3188   	fcall	_RF_RxDisable
  6821                           
  6822                           ;RF_Control_B1.c: 114: if(!RF->Debounce)
  6823  0938  087B               	movf	_RF,w
  6824  0939  0086               	movwf	6
  6825  093A  0187               	clrf	7
  6826  093B  1A81               	btfsc	1,5
  6827  093C  2955               	goto	l9080
  6828                           
  6829                           ;RF_Control_B1.c: 115: {
  6830                           ;RF_Control_B1.c: 116: RF->DebounceTime++;
  6831  093D  3001               	movlw	1
  6832  093E  0020               	movlb	0	; select bank0
  6833  093F  00E9               	movwf	??_setRF_Main
  6834  0940  0A7B               	incf	_RF,w
  6835  0941  0086               	movwf	6
  6836  0942  0187               	clrf	7
  6837  0943  0869               	movf	??_setRF_Main,w
  6838  0944  0781               	addwf	1,f
  6839                           
  6840                           ;RF_Control_B1.c: 117: if(RF->DebounceTime == 25)
  6841  0945  0A7B               	incf	_RF,w
  6842  0946  0086               	movwf	6
  6843  0947  0187               	clrf	7
  6844  0948  0801               	movf	1,w
  6845  0949  3A19               	xorlw	25
  6846  094A  1D03               	skipz
  6847  094B  0008               	return
  6848                           
  6849                           ;RF_Control_B1.c: 118: {
  6850                           ;RF_Control_B1.c: 119: RF->DebounceTime=0;
  6851  094C  0A7B               	incf	_RF,w
  6852  094D  0086               	movwf	6
  6853  094E  0187               	clrf	7
  6854  094F  0181               	clrf	1
  6855                           
  6856                           ;RF_Control_B1.c: 120: RF->Debounce=1;
  6857  0950  087B               	movf	_RF,w
  6858  0951  0086               	movwf	6
  6859  0952  0187               	clrf	7
  6860  0953  1681               	bsf	1,5
  6861                           
  6862                           ;RF_Control_B1.c: 121: }
  6863                           ;RF_Control_B1.c: 122: }
  6864  0954  0008               	return
  6865  0955                     l9080:	
  6866                           
  6867                           ;RF_Control_B1.c: 123: else
  6868                           ;RF_Control_B1.c: 124: {
  6869                           ;RF_Control_B1.c: 125: RF->Debounce=0;
  6870  0955  087B               	movf	_RF,w
  6871  0956  0086               	movwf	6
  6872  0957  0187               	clrf	7
  6873  0958  1281               	bcf	1,5
  6874                           
  6875                           ;RF_Control_B1.c: 126: RF->TransceiveGO=0;
  6876  0959  087B               	movf	_RF,w
  6877  095A  0086               	movwf	6
  6878  095B  0187               	clrf	7
  6879  095C  1101               	bcf	1,2
  6880                           
  6881                           ;RF_Control_B1.c: 127: CC2500_TxData();
  6882  095D  319E  26E8         	fcall	_CC2500_TxData
  6883  095F  0008               	return
  6884  0960                     __end_of_setRF_Main:	
  6885                           
  6886                           	psect	text23
  6887  1063                     __ptext23:	
  6888 ;; *************** function _getRxData *****************
  6889 ;; Defined at:
  6890 ;;		line 207 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;  rf              1    wreg     unsigned char 
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;  rf              1   72[BANK0 ] unsigned char 
  6895 ;;  i               1    0        unsigned char 
  6896 ;; Return value:  Size  Location     Type
  6897 ;;		None               void
  6898 ;; Registers used:
  6899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;Total ram usage:        1 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:   11
  6912 ;; This function calls:
  6913 ;;		_RfPointSelect
  6914 ;;		_setControl_Lights_Table
  6915 ;;		_setLog_Code
  6916 ;; This function is called by:
  6917 ;;		_setRF_Main
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _getRxData
  6923  1063                     _getRxData:	
  6924                           
  6925                           ;incstack = 0
  6926                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6927                           ;getRxData@rf stored from wreg
  6928  1063  0020               	movlb	0	; select bank0
  6929  1064  00E8               	movwf	getRxData@rf
  6930                           
  6931                           ;RF_Control_B1.c: 209: unsigned char i;
  6932                           ;RF_Control_B1.c: 210: RfPointSelect(rf);
  6933  1065  0868               	movf	getRxData@rf,w
  6934  1066  31A6  26E2  3190   	fcall	_RfPointSelect
  6935                           
  6936                           ;RF_Control_B1.c: 211: if(RF->Learn)
  6937  1069  087B               	movf	_RF,w
  6938  106A  0086               	movwf	6
  6939  106B  0187               	clrf	7
  6940  106C  1F01               	btfss	1,6
  6941  106D  287A               	goto	l8610
  6942                           
  6943                           ;RF_Control_B1.c: 212: {
  6944                           ;RF_Control_B1.c: 213: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6945  106E  0021               	movlb	1	; select bank1
  6946  106F  08A0               	movf	_RF_Data^(0+128),f
  6947  1070  1D03               	skipz
  6948  1071  0008               	return
  6949  1072  0821               	movf	(_RF_Data^(0+128)+1),w
  6950  1073  3A64               	xorlw	100
  6951  1074  1D03               	skipz
  6952  1075  0008               	return
  6953                           
  6954                           ;RF_Control_B1.c: 214: {
  6955                           ;RF_Control_B1.c: 215: setLog_Code(1);
  6956  1076  3001               	movlw	1
  6957  1077  319F  27B7         	fcall	_setLog_Code
  6958                           
  6959                           ;RF_Control_B1.c: 216: }
  6960                           ;RF_Control_B1.c: 217: }
  6961  1079  0008               	return
  6962  107A                     l8610:	
  6963                           
  6964                           ;RF_Control_B1.c: 218: else
  6965                           ;RF_Control_B1.c: 219: {
  6966                           ;RF_Control_B1.c: 220: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6967  107A  0021               	movlb	1	; select bank1
  6968  107B  08A0               	movf	_RF_Data^(0+128),f
  6969  107C  1D03               	skipz
  6970  107D  0008               	return
  6971  107E  0821               	movf	(_RF_Data^(0+128)+1),w
  6972  107F  3A02               	xorlw	2
  6973  1080  1D03               	skipz
  6974  1081  0008               	return
  6975                           
  6976                           ;RF_Control_B1.c: 221: {
  6977                           ;RF_Control_B1.c: 222: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  6978  1082  082C               	movf	(_RF_Data^(0+128)+12),w
  6979  1083  3AFF               	xorlw	255
  6980  1084  1D03               	skipz
  6981  1085  2890               	goto	l8622
  6982  1086  082D               	movf	(_RF_Data^(0+128)+13),w
  6983  1087  3AFF               	xorlw	255
  6984  1088  1D03               	skipz
  6985  1089  2890               	goto	l8622
  6986  108A  082E               	movf	(_RF_Data^(0+128)+14),w
  6987  108B  3AFF               	xorlw	255
  6988  108C  1D03               	skipz
  6989  108D  2890               	goto	l8622
  6990                           
  6991                           ;RF_Control_B1.c: 223: {
  6992                           ;RF_Control_B1.c: 224: __nop();
  6993  108E  0000               	nop
  6994                           
  6995                           ;RF_Control_B1.c: 225: }
  6996  108F  0008               	return
  6997  1090                     l8622:	
  6998                           
  6999                           ;RF_Control_B1.c: 226: else
  7000                           ;RF_Control_B1.c: 227: {
  7001                           ;RF_Control_B1.c: 228: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  7002  1090  0020               	movlb	0	; select bank0
  7003  1091  086F               	movf	_Product,w
  7004  1092  3E0C               	addlw	12
  7005  1093  0086               	movwf	6
  7006  1094  3001               	movlw	1	; select bank2/3
  7007  1095  0087               	movwf	7
  7008  1096  0021               	movlb	1	; select bank1
  7009  1097  082C               	movf	(_RF_Data^(0+128)+12),w
  7010  1098  0601               	xorwf	1,w
  7011  1099  1D03               	skipz
  7012  109A  0008               	return
  7013  109B  0020               	movlb	0	; select bank0
  7014  109C  086F               	movf	_Product,w
  7015  109D  3E0D               	addlw	13
  7016  109E  0086               	movwf	6
  7017  109F  3001               	movlw	1	; select bank2/3
  7018  10A0  0087               	movwf	7
  7019  10A1  0021               	movlb	1	; select bank1
  7020  10A2  082D               	movf	(_RF_Data^(0+128)+13),w
  7021  10A3  0601               	xorwf	1,w
  7022  10A4  1D03               	skipz
  7023  10A5  0008               	return
  7024  10A6  0020               	movlb	0	; select bank0
  7025  10A7  086F               	movf	_Product,w
  7026  10A8  3E0E               	addlw	14
  7027  10A9  0086               	movwf	6
  7028  10AA  3001               	movlw	1	; select bank2/3
  7029  10AB  0087               	movwf	7
  7030  10AC  0021               	movlb	1	; select bank1
  7031  10AD  082E               	movf	(_RF_Data^(0+128)+14),w
  7032  10AE  0601               	xorwf	1,w
  7033  10AF  1D03               	skipz
  7034  10B0  0008               	return
  7035                           
  7036                           ;RF_Control_B1.c: 229: {
  7037                           ;RF_Control_B1.c: 230: setControl_Lights_Table(1);
  7038  10B1  3001               	movlw	1
  7039  10B2  3195  254A         	fcall	_setControl_Lights_Table
  7040                           
  7041                           ;RF_Control_B1.c: 239: {
  7042                           ;RF_Control_B1.c: 240: ;
  7043                           
  7044                           ;RF_Control_B1.c: 235: {
  7045                           ;RF_Control_B1.c: 236: ;
  7046                           ;RF_Control_B1.c: 237: }
  7047                           
  7048                           ;RF_Control_B1.c: 231: }
  7049                           ;RF_Control_B1.c: 232: }
  7050                           ;RF_Control_B1.c: 233: }
  7051  10B4  0008               	return
  7052  10B5                     __end_of_getRxData:	
  7053                           
  7054                           	psect	text24
  7055  1FB7                     __ptext24:	
  7056 ;; *************** function _setLog_Code *****************
  7057 ;; Defined at:
  7058 ;;		line 249 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  rf              1    wreg     unsigned char 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  rf              1   11[BANK0 ] unsigned char 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;		None               void
  7065 ;; Registers used:
  7066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;Total ram usage:        2 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    6
  7079 ;; This function calls:
  7080 ;;		_RfPointSelect
  7081 ;;		_setBuz
  7082 ;; This function is called by:
  7083 ;;		_getRxData
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _setLog_Code
  7089  1FB7                     _setLog_Code:	
  7090                           
  7091                           ;incstack = 0
  7092                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7093                           ;setLog_Code@rf stored from wreg
  7094  1FB7  0020               	movlb	0	; select bank0
  7095  1FB8  00AB               	movwf	setLog_Code@rf
  7096                           
  7097                           ;RF_Control_B1.c: 251: RfPointSelect(rf);
  7098  1FB9  082B               	movf	setLog_Code@rf,w
  7099  1FBA  31A6  26E2  319F   	fcall	_RfPointSelect
  7100                           
  7101                           ;RF_Control_B1.c: 252: Product->Data[12]=RF_Data[12];
  7102  1FBD  0021               	movlb	1	; select bank1
  7103  1FBE  082C               	movf	(_RF_Data^(0+128)+12),w
  7104  1FBF  0020               	movlb	0	; select bank0
  7105  1FC0  00AA               	movwf	??_setLog_Code
  7106  1FC1  086F               	movf	_Product,w
  7107  1FC2  3E0C               	addlw	12
  7108  1FC3  0086               	movwf	6
  7109  1FC4  3001               	movlw	1	; select bank2/3
  7110  1FC5  0087               	movwf	7
  7111  1FC6  082A               	movf	??_setLog_Code,w
  7112  1FC7  0081               	movwf	1
  7113                           
  7114                           ;RF_Control_B1.c: 253: Product->Data[13]=RF_Data[13];
  7115  1FC8  0021               	movlb	1	; select bank1
  7116  1FC9  082D               	movf	(_RF_Data^(0+128)+13),w
  7117  1FCA  0020               	movlb	0	; select bank0
  7118  1FCB  00AA               	movwf	??_setLog_Code
  7119  1FCC  086F               	movf	_Product,w
  7120  1FCD  3E0D               	addlw	13
  7121  1FCE  0086               	movwf	6
  7122  1FCF  3001               	movlw	1	; select bank2/3
  7123  1FD0  0087               	movwf	7
  7124  1FD1  082A               	movf	??_setLog_Code,w
  7125  1FD2  0081               	movwf	1
  7126                           
  7127                           ;RF_Control_B1.c: 254: Product->Data[14]=RF_Data[14];
  7128  1FD3  0021               	movlb	1	; select bank1
  7129  1FD4  082E               	movf	(_RF_Data^(0+128)+14),w
  7130  1FD5  0020               	movlb	0	; select bank0
  7131  1FD6  00AA               	movwf	??_setLog_Code
  7132  1FD7  086F               	movf	_Product,w
  7133  1FD8  3E0E               	addlw	14
  7134  1FD9  0086               	movwf	6
  7135  1FDA  3001               	movlw	1	; select bank2/3
  7136  1FDB  0087               	movwf	7
  7137  1FDC  082A               	movf	??_setLog_Code,w
  7138  1FDD  0081               	movwf	1
  7139                           
  7140                           ;RF_Control_B1.c: 255: setBuz(1,100);
  7141  1FDE  3064               	movlw	100
  7142  1FDF  00A6               	movwf	setBuz@time
  7143  1FE0  3000               	movlw	0
  7144  1FE1  00A7               	movwf	setBuz@time+1
  7145  1FE2  3001               	movlw	1
  7146  1FE3  3197  2710  319F   	fcall	_setBuz
  7147                           
  7148                           ;RF_Control_B1.c: 256: RF->Learn=0;
  7149  1FE6  087B               	movf	_RF,w
  7150  1FE7  0086               	movwf	6
  7151  1FE8  0187               	clrf	7
  7152  1FE9  1301               	bcf	1,6
  7153                           
  7154                           ;RF_Control_B1.c: 257: if(TMain->First)
  7155  1FEA  087D               	movf	_TMain,w
  7156  1FEB  3E03               	addlw	3
  7157  1FEC  0086               	movwf	6
  7158  1FED  3001               	movlw	1	; select bank2/3
  7159  1FEE  0087               	movwf	7
  7160  1FEF  1C81               	btfss	1,1
  7161  1FF0  2FF8               	goto	l2540
  7162                           
  7163                           ;RF_Control_B1.c: 258: {
  7164                           ;RF_Control_B1.c: 259: Memory->LoopSave=1;
  7165  1FF1  0021               	movlb	1	; select bank1
  7166  1FF2  086A               	movf	_Memory^(0+128),w
  7167  1FF3  3E22               	addlw	34
  7168  1FF4  0086               	movwf	6
  7169  1FF5  3001               	movlw	1	; select bank2/3
  7170  1FF6  0087               	movwf	7
  7171  1FF7  1501               	bsf	1,2
  7172  1FF8                     l2540:	
  7173                           
  7174                           ;RF_Control_B1.c: 260: }
  7175                           ;RF_Control_B1.c: 261: Memory->Modify=1;
  7176  1FF8  0021               	movlb	1	; select bank1
  7177  1FF9  086A               	movf	_Memory^(0+128),w
  7178  1FFA  3E22               	addlw	34
  7179  1FFB  0086               	movwf	6
  7180  1FFC  3001               	movlw	1	; select bank2/3
  7181  1FFD  0087               	movwf	7
  7182  1FFE  1401               	bsf	1,0
  7183  1FFF  0008               	return
  7184  2000                     __end_of_setLog_Code:	
  7185                           
  7186                           	psect	text25
  7187  154A                     __ptext25:	
  7188 ;; *************** function _setControl_Lights_Table *****************
  7189 ;; Defined at:
  7190 ;;		line 264 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  rf              1    wreg     unsigned char 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  rf              1   71[BANK0 ] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;		None               void
  7197 ;; Registers used:
  7198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;Total ram usage:        1 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:   10
  7211 ;; This function calls:
  7212 ;;		_RfPointSelect
  7213 ;;		_setBuz
  7214 ;;		_setDimmerLights
  7215 ;;		_setRFSW_AdjControl
  7216 ;;		_setRFSW_Control
  7217 ;;		_setRFSW_Status
  7218 ;;		_setSw_Status
  7219 ;;		_setTxData
  7220 ;; This function is called by:
  7221 ;;		_getRxData
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           
  7226                           ;psect for function _setControl_Lights_Table
  7227  154A                     _setControl_Lights_Table:	
  7228                           
  7229                           ;incstack = 0
  7230                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7231                           ;setControl_Lights_Table@rf stored from wreg
  7232  154A  0020               	movlb	0	; select bank0
  7233  154B  00E7               	movwf	setControl_Lights_Table@rf
  7234                           
  7235                           ;RF_Control_B1.c: 266: RfPointSelect(rf);
  7236  154C  0867               	movf	setControl_Lights_Table@rf,w
  7237  154D  31A6  26E2  3195   	fcall	_RfPointSelect
  7238                           
  7239                           ;RF_Control_B1.c: 267: if(RF_Data[15] == 0x00)
  7240  1550  0021               	movlb	1	; select bank1
  7241  1551  08AF               	movf	(_RF_Data^(0+128)+15),f
  7242  1552  1D03               	skipz
  7243  1553  2D8B               	goto	l8442
  7244                           
  7245                           ;RF_Control_B1.c: 268: {
  7246                           ;RF_Control_B1.c: 270: setDimmerLights(1,0);
  7247  1554  0020               	movlb	0	; select bank0
  7248  1555  01A4               	clrf	setDimmerLights@status
  7249  1556  3001               	movlw	1
  7250  1557  3189  21F0  3195   	fcall	_setDimmerLights
  7251                           
  7252                           ;RF_Control_B1.c: 271: setRFSW_Status(1,0);
  7253  155A  0020               	movlb	0	; select bank0
  7254  155B  01A2               	clrf	setRFSW_Status@command
  7255  155C  3001               	movlw	1
  7256  155D  31A7  27F1  3195   	fcall	_setRFSW_Status
  7257                           
  7258                           ;RF_Control_B1.c: 272: setSw_Status(1,0);
  7259  1560  0020               	movlb	0	; select bank0
  7260  1561  01A2               	clrf	setSw_Status@command
  7261  1562  3001               	movlw	1
  7262  1563  3198  206A  3195   	fcall	_setSw_Status
  7263                           
  7264                           ;RF_Control_B1.c: 285: Product->Data[9]=0;
  7265  1566  0020               	movlb	0	; select bank0
  7266  1567  086F               	movf	_Product,w
  7267  1568  3E09               	addlw	9
  7268  1569  0086               	movwf	6
  7269  156A  3001               	movlw	1	; select bank2/3
  7270  156B  0087               	movwf	7
  7271  156C  0181               	clrf	1
  7272                           
  7273                           ;RF_Control_B1.c: 286: Product->Data[11]=0;
  7274  156D  086F               	movf	_Product,w
  7275  156E  3E0B               	addlw	11
  7276  156F  0086               	movwf	6
  7277  1570  3001               	movlw	1	; select bank2/3
  7278  1571  0087               	movwf	7
  7279  1572  0181               	clrf	1
  7280                           
  7281                           ;RF_Control_B1.c: 287: Product->Data[15]=0;
  7282  1573  086F               	movf	_Product,w
  7283  1574  3E0F               	addlw	15
  7284  1575  0086               	movwf	6
  7285  1576  3001               	movlw	1	; select bank2/3
  7286  1577  0087               	movwf	7
  7287  1578  0181               	clrf	1
  7288                           
  7289                           ;RF_Control_B1.c: 288: Product->Data[17]=0;
  7290  1579  086F               	movf	_Product,w
  7291  157A  3E11               	addlw	17
  7292  157B  0086               	movwf	6
  7293  157C  3001               	movlw	1	; select bank2/3
  7294  157D  0087               	movwf	7
  7295  157E  0181               	clrf	1
  7296                           
  7297                           ;RF_Control_B1.c: 289: setBuz(1,100);
  7298  157F  3064               	movlw	100
  7299  1580  00A6               	movwf	setBuz@time
  7300  1581  3000               	movlw	0
  7301  1582  00A7               	movwf	setBuz@time+1
  7302  1583  3001               	movlw	1
  7303  1584  3197  2710  3195   	fcall	_setBuz
  7304                           
  7305                           ;RF_Control_B1.c: 290: setTxData(1);
  7306  1587  3001               	movlw	1
  7307  1588  3187  271E         	fcall	_setTxData
  7308                           
  7309                           ;RF_Control_B1.c: 291: }
  7310  158A  0008               	return
  7311  158B                     l8442:	
  7312                           
  7313                           ;RF_Control_B1.c: 292: else if(RF_Data[15] == 0x20)
  7314  158B  0021               	movlb	1	; select bank1
  7315  158C  082F               	movf	(_RF_Data^(0+128)+15),w
  7316  158D  3A20               	xorlw	32
  7317  158E  1D03               	skipz
  7318  158F  2DA7               	goto	l8448
  7319                           
  7320                           ;RF_Control_B1.c: 293: {
  7321                           ;RF_Control_B1.c: 294: Product->Data[9]=0;
  7322  1590  0020               	movlb	0	; select bank0
  7323  1591  086F               	movf	_Product,w
  7324  1592  3E09               	addlw	9
  7325  1593  0086               	movwf	6
  7326  1594  3001               	movlw	1	; select bank2/3
  7327  1595  0087               	movwf	7
  7328  1596  0181               	clrf	1
  7329                           
  7330                           ;RF_Control_B1.c: 295: Product->Data[11]=0;
  7331  1597  086F               	movf	_Product,w
  7332  1598  3E0B               	addlw	11
  7333  1599  0086               	movwf	6
  7334  159A  3001               	movlw	1	; select bank2/3
  7335  159B  0087               	movwf	7
  7336  159C  0181               	clrf	1
  7337                           
  7338                           ;RF_Control_B1.c: 296: Product->Data[17]=0;
  7339  159D  086F               	movf	_Product,w
  7340  159E  3E11               	addlw	17
  7341  159F  0086               	movwf	6
  7342  15A0  3001               	movlw	1	; select bank2/3
  7343  15A1  0087               	movwf	7
  7344  15A2  0181               	clrf	1
  7345                           
  7346                           ;RF_Control_B1.c: 297: setTxData(1);
  7347  15A3  3001               	movlw	1
  7348  15A4  3187  271E         	fcall	_setTxData
  7349                           
  7350                           ;RF_Control_B1.c: 298: }
  7351  15A6  0008               	return
  7352  15A7                     l8448:	
  7353                           
  7354                           ;RF_Control_B1.c: 300: else if(RF_Data[15] == 0x01)
  7355  15A7  0021               	movlb	1	; select bank1
  7356  15A8  082F               	movf	(_RF_Data^(0+128)+15),w
  7357  15A9  3A01               	xorlw	1
  7358  15AA  1D03               	skipz
  7359  15AB  2DB0               	goto	l8452
  7360                           
  7361                           ;RF_Control_B1.c: 301: {
  7362                           ;RF_Control_B1.c: 302: setRFSW_Control(1);
  7363  15AC  3001               	movlw	1
  7364  15AD  3189  2160         	fcall	_setRFSW_Control
  7365                           
  7366                           ;RF_Control_B1.c: 303: }
  7367  15AF  0008               	return
  7368  15B0                     l8452:	
  7369                           
  7370                           ;RF_Control_B1.c: 305: else if(RF_Data[15] == 0x11)
  7371  15B0  0021               	movlb	1	; select bank1
  7372  15B1  082F               	movf	(_RF_Data^(0+128)+15),w
  7373  15B2  3A11               	xorlw	17
  7374  15B3  1D03               	skipz
  7375  15B4  0008               	return
  7376                           
  7377                           ;RF_Control_B1.c: 306: {
  7378                           ;RF_Control_B1.c: 307: setRFSW_AdjControl(1);
  7379  15B5  3001               	movlw	1
  7380  15B6  319E  2664         	fcall	_setRFSW_AdjControl
  7381  15B8  0008               	return
  7382  15B9                     __end_of_setControl_Lights_Table:	
  7383                           
  7384                           	psect	text26
  7385  0960                     __ptext26:	
  7386 ;; *************** function _setRFSW_Control *****************
  7387 ;; Defined at:
  7388 ;;		line 361 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  sw              1    wreg     unsigned char 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;  sw              1   67[BANK0 ] unsigned char 
  7393 ;; Return value:  Size  Location     Type
  7394 ;;		None               void
  7395 ;; Registers used:
  7396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;Total ram usage:        2 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    8
  7409 ;; This function calls:
  7410 ;;		_RfSWPointSelect
  7411 ;;		_setBuz
  7412 ;;		_setDelayOff_GO
  7413 ;;		_setDimmerLights_Switch
  7414 ;;		_setDimmerLights_Trigger
  7415 ;;		_setRF_DimmerLights
  7416 ;;		_setSw_Status
  7417 ;;		_setTxData
  7418 ;; This function is called by:
  7419 ;;		_setControl_Lights_Table
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           
  7424                           ;psect for function _setRFSW_Control
  7425  0960                     _setRFSW_Control:	
  7426                           
  7427                           ;incstack = 0
  7428                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7429                           ;setRFSW_Control@sw stored from wreg
  7430  0960  0020               	movlb	0	; select bank0
  7431  0961  00E3               	movwf	setRFSW_Control@sw
  7432                           
  7433                           ;RF_Control_B1.c: 363: RfSWPointSelect(sw);
  7434  0962  0863               	movf	setRFSW_Control@sw,w
  7435  0963  31A7  2749  3189   	fcall	_RfSWPointSelect
  7436                           
  7437                           ;RF_Control_B1.c: 364: if(!RFSW->Status)
  7438  0966  0021               	movlb	1	; select bank1
  7439  0967  083C               	movf	_RFSW^(0+128),w
  7440  0968  0086               	movwf	6
  7441  0969  0187               	clrf	7
  7442  096A  1801               	btfsc	1,0
  7443  096B  29A1               	goto	l8332
  7444                           
  7445                           ;RF_Control_B1.c: 365: {
  7446                           ;RF_Control_B1.c: 366: if(RF_Data[16] == 0x80)
  7447  096C  0830               	movf	(_RF_Data^(0+128)+16),w
  7448  096D  3A80               	xorlw	128
  7449  096E  1D03               	skipz
  7450  096F  297D               	goto	l8322
  7451                           
  7452                           ;RF_Control_B1.c: 367: {
  7453                           ;RF_Control_B1.c: 368: setDelayOff_GO(sw,1,RF_Data[17]);
  7454  0970  0020               	movlb	0	; select bank0
  7455  0971  01A3               	clrf	setDelayOff_GO@command
  7456  0972  0AA3               	incf	setDelayOff_GO@command,f
  7457  0973  0021               	movlb	1	; select bank1
  7458  0974  0831               	movf	(_RF_Data^(0+128)+17),w
  7459  0975  0020               	movlb	0	; select bank0
  7460  0976  00E2               	movwf	??_setRFSW_Control
  7461  0977  0862               	movf	??_setRFSW_Control,w
  7462  0978  00A4               	movwf	setDelayOff_GO@value
  7463  0979  0863               	movf	setRFSW_Control@sw,w
  7464  097A  3192  221A  3189   	fcall	_setDelayOff_GO
  7465  097D                     l8322:	
  7466                           
  7467                           ;RF_Control_B1.c: 369: }
  7468                           ;RF_Control_B1.c: 370: RFSW->Status=1;
  7469  097D  0021               	movlb	1	; select bank1
  7470  097E  083C               	movf	_RFSW^(0+128),w
  7471  097F  0086               	movwf	6
  7472  0980  0187               	clrf	7
  7473  0981  1401               	bsf	1,0
  7474                           
  7475                           ;RF_Control_B1.c: 371: setSw_Status(sw,1);
  7476  0982  0020               	movlb	0	; select bank0
  7477  0983  01A2               	clrf	setSw_Status@command
  7478  0984  0AA2               	incf	setSw_Status@command,f
  7479  0985  0863               	movf	setRFSW_Control@sw,w
  7480  0986  3198  206A  3189   	fcall	_setSw_Status
  7481                           
  7482                           ;RF_Control_B1.c: 373: setDimmerLights_Trigger(sw,1);
  7483  0989  0020               	movlb	0	; select bank0
  7484  098A  01A2               	clrf	setDimmerLights_Trigger@command
  7485  098B  0AA2               	incf	setDimmerLights_Trigger@command,f
  7486  098C  0863               	movf	setRFSW_Control@sw,w
  7487  098D  3198  20A8  3189   	fcall	_setDimmerLights_Trigger
  7488                           
  7489                           ;RF_Control_B1.c: 374: setDimmerLights_Switch(sw,1);
  7490  0990  0020               	movlb	0	; select bank0
  7491  0991  01A2               	clrf	setDimmerLights_Switch@command
  7492  0992  0AA2               	incf	setDimmerLights_Switch@command,f
  7493  0993  0863               	movf	setRFSW_Control@sw,w
  7494  0994  3198  2098  3189   	fcall	_setDimmerLights_Switch
  7495                           
  7496                           ;RF_Control_B1.c: 376: setRF_DimmerLights(sw,RFSW->Status);
  7497  0997  0021               	movlb	1	; select bank1
  7498  0998  083C               	movf	_RFSW^(0+128),w
  7499  0999  0086               	movwf	6
  7500  099A  0187               	clrf	7
  7501  099B  3000               	movlw	0
  7502  099C  1801               	btfsc	1,0
  7503  099D  3001               	movlw	1
  7504  099E  0020               	movlb	0	; select bank0
  7505  099F  00DD               	movwf	setRF_DimmerLights@on
  7506  09A0  29DF               	goto	L2
  7507  09A1                     l8332:	
  7508                           ;RF_Control_B1.c: 377: }
  7509                           
  7510                           
  7511                           ;RF_Control_B1.c: 378: else
  7512                           ;RF_Control_B1.c: 379: {
  7513                           ;RF_Control_B1.c: 380: if(RF_Data[16] == 0x80)
  7514  09A1  0021               	movlb	1	; select bank1
  7515  09A2  0830               	movf	(_RF_Data^(0+128)+16),w
  7516  09A3  3A80               	xorlw	128
  7517  09A4  1D03               	skipz
  7518  09A5  29B7               	goto	l8336
  7519                           
  7520                           ;RF_Control_B1.c: 381: {
  7521                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw,1,RF_Data[17]);
  7522  09A6  0020               	movlb	0	; select bank0
  7523  09A7  01A3               	clrf	setDelayOff_GO@command
  7524  09A8  0AA3               	incf	setDelayOff_GO@command,f
  7525  09A9  0021               	movlb	1	; select bank1
  7526  09AA  0831               	movf	(_RF_Data^(0+128)+17),w
  7527  09AB  0020               	movlb	0	; select bank0
  7528  09AC  00E2               	movwf	??_setRFSW_Control
  7529  09AD  0862               	movf	??_setRFSW_Control,w
  7530  09AE  00A4               	movwf	setDelayOff_GO@value
  7531  09AF  0863               	movf	setRFSW_Control@sw,w
  7532  09B0  3192  221A  3189   	fcall	_setDelayOff_GO
  7533                           
  7534                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw,1);
  7535  09B3  0020               	movlb	0	; select bank0
  7536  09B4  01DD               	clrf	setRF_DimmerLights@on
  7537  09B5  0ADD               	incf	setRF_DimmerLights@on,f
  7538  09B6  29DF               	goto	L2
  7539  09B7                     l8336:	
  7540                           ;RF_Control_B1.c: 384: }
  7541                           
  7542                           
  7543                           ;RF_Control_B1.c: 385: else
  7544                           ;RF_Control_B1.c: 386: {
  7545                           ;RF_Control_B1.c: 387: RFSW->Status=0;
  7546  09B7  0021               	movlb	1	; select bank1
  7547  09B8  083C               	movf	_RFSW^(0+128),w
  7548  09B9  0086               	movwf	6
  7549  09BA  0187               	clrf	7
  7550  09BB  1001               	bcf	1,0
  7551                           
  7552                           ;RF_Control_B1.c: 388: setSw_Status(sw,0);
  7553  09BC  0020               	movlb	0	; select bank0
  7554  09BD  01A2               	clrf	setSw_Status@command
  7555  09BE  0863               	movf	setRFSW_Control@sw,w
  7556  09BF  3198  206A  3189   	fcall	_setSw_Status
  7557                           
  7558                           ;RF_Control_B1.c: 390: setDimmerLights_Trigger(sw,1);
  7559  09C2  0020               	movlb	0	; select bank0
  7560  09C3  01A2               	clrf	setDimmerLights_Trigger@command
  7561  09C4  0AA2               	incf	setDimmerLights_Trigger@command,f
  7562  09C5  0863               	movf	setRFSW_Control@sw,w
  7563  09C6  3198  20A8  3189   	fcall	_setDimmerLights_Trigger
  7564                           
  7565                           ;RF_Control_B1.c: 391: setDimmerLights_Switch(sw,RFSW->Status);
  7566  09C9  0021               	movlb	1	; select bank1
  7567  09CA  083C               	movf	_RFSW^(0+128),w
  7568  09CB  0086               	movwf	6
  7569  09CC  0187               	clrf	7
  7570  09CD  3000               	movlw	0
  7571  09CE  1801               	btfsc	1,0
  7572  09CF  3001               	movlw	1
  7573  09D0  0020               	movlb	0	; select bank0
  7574  09D1  00A2               	movwf	setDimmerLights_Switch@command
  7575  09D2  0863               	movf	setRFSW_Control@sw,w
  7576  09D3  3198  2098  3189   	fcall	_setDimmerLights_Switch
  7577                           
  7578                           ;RF_Control_B1.c: 393: setDelayOff_GO(sw,0,0);
  7579  09D6  0020               	movlb	0	; select bank0
  7580  09D7  01A3               	clrf	setDelayOff_GO@command
  7581  09D8  01A4               	clrf	setDelayOff_GO@value
  7582  09D9  0863               	movf	setRFSW_Control@sw,w
  7583  09DA  3192  221A  3189   	fcall	_setDelayOff_GO
  7584                           
  7585                           ;RF_Control_B1.c: 394: setRF_DimmerLights(sw,0);
  7586  09DD  0020               	movlb	0	; select bank0
  7587  09DE  01DD               	clrf	setRF_DimmerLights@on
  7588  09DF                     L2:	
  7589  09DF  0863               	movf	setRFSW_Control@sw,w
  7590  09E0  3193  2399  3189   	fcall	_setRF_DimmerLights
  7591                           
  7592                           ;RF_Control_B1.c: 395: }
  7593                           ;RF_Control_B1.c: 396: }
  7594                           ;RF_Control_B1.c: 397: setBuz(1,100);
  7595  09E3  3064               	movlw	100
  7596  09E4  0020               	movlb	0	; select bank0
  7597  09E5  00A6               	movwf	setBuz@time
  7598  09E6  3000               	movlw	0
  7599  09E7  00A7               	movwf	setBuz@time+1
  7600  09E8  3001               	movlw	1
  7601  09E9  3197  2710  3189   	fcall	_setBuz
  7602                           
  7603                           ;RF_Control_B1.c: 398: setTxData(1);
  7604  09EC  3001               	movlw	1
  7605  09ED  3187  271E         	fcall	_setTxData
  7606  09EF  0008               	return
  7607  09F0                     __end_of_setRFSW_Control:	
  7608                           
  7609                           	psect	text27
  7610  121A                     __ptext27:	
  7611 ;; *************** function _setDelayOff_GO *****************
  7612 ;; Defined at:
  7613 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\DelayOff_B1.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  sw              1    wreg     unsigned char 
  7616 ;;  command         1    3[BANK0 ] unsigned char 
  7617 ;;  value           1    4[BANK0 ] unsigned char 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;  sw              1    7[BANK0 ] unsigned char 
  7620 ;; Return value:  Size  Location     Type
  7621 ;;		None               void
  7622 ;; Registers used:
  7623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;Total ram usage:        5 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    5
  7636 ;; This function calls:
  7637 ;;		_DelayOffPointSelect
  7638 ;;		_DelayTimejudge
  7639 ;; This function is called by:
  7640 ;;		_setRFSW_Control
  7641 ;;		_Sw_DimmerOffFunc
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           
  7646                           ;psect for function _setDelayOff_GO
  7647  121A                     _setDelayOff_GO:	
  7648                           
  7649                           ;incstack = 0
  7650                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7651                           ;setDelayOff_GO@sw stored from wreg
  7652  121A  0020               	movlb	0	; select bank0
  7653  121B  00A7               	movwf	setDelayOff_GO@sw
  7654                           
  7655                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7656  121C  0827               	movf	setDelayOff_GO@sw,w
  7657  121D  31A7  273D  3192   	fcall	_DelayOffPointSelect
  7658                           
  7659                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7660  1220  0021               	movlb	1	; select bank1
  7661  1221  0838               	movf	_DelayOff^(0+128),w
  7662  1222  0086               	movwf	6
  7663  1223  0187               	clrf	7
  7664  1224  1C01               	btfss	1,0
  7665  1225  0008               	return
  7666                           
  7667                           ;DelayOff_B1.c: 96: {
  7668                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7669  1226  0838               	movf	_DelayOff^(0+128),w
  7670  1227  0086               	movwf	6
  7671  1228  0187               	clrf	7
  7672  1229  0020               	movlb	0	; select bank0
  7673  122A  0823               	movf	setDelayOff_GO@command,w
  7674  122B  1081               	bcf	1,1
  7675  122C  1D03               	skipz
  7676  122D  1481               	bsf	1,1
  7677                           
  7678                           ;DelayOff_B1.c: 98: if(command)
  7679  122E  0823               	movf	setDelayOff_GO@command,w
  7680  122F  1903               	btfsc	3,2
  7681  1230  2A5C               	goto	l6190
  7682                           
  7683                           ;DelayOff_B1.c: 99: {
  7684                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7685  1231  0824               	movf	setDelayOff_GO@value,w
  7686  1232  319C  241B  3192   	fcall	_DelayTimejudge
  7687  1235  0020               	movlb	0	; select bank0
  7688  1236  00A5               	movwf	??_setDelayOff_GO
  7689  1237  0021               	movlb	1	; select bank1
  7690  1238  0A38               	incf	_DelayOff^(0+128),w
  7691  1239  0086               	movwf	6
  7692  123A  0187               	clrf	7
  7693  123B  0020               	movlb	0	; select bank0
  7694  123C  0825               	movf	??_setDelayOff_GO,w
  7695  123D  0081               	movwf	1
  7696                           
  7697                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7698  123E  300F               	movlw	15
  7699  123F  0524               	andwf	setDelayOff_GO@value,w
  7700  1240  00A5               	movwf	??_setDelayOff_GO
  7701  1241  0825               	movf	??_setDelayOff_GO,w
  7702  1242  3A05               	xorlw	5
  7703  1243  1903               	skipnz
  7704  1244  2A49               	goto	l6184
  7705  1245  0824               	movf	setDelayOff_GO@value,w
  7706  1246  390F               	andlw	15
  7707  1247  1D03               	btfss	3,2
  7708  1248  2A4F               	goto	l6188
  7709  1249                     l6184:	
  7710  1249  3026               	movlw	38
  7711  124A  0224               	subwf	setDelayOff_GO@value,w
  7712  124B  1803               	skipnc
  7713  124C  2A4F               	goto	l6188
  7714                           
  7715                           ;DelayOff_B1.c: 102: {
  7716                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7717  124D  0824               	movf	setDelayOff_GO@value,w
  7718  124E  2A50               	goto	L3
  7719  124F                     l6188:	
  7720                           ;DelayOff_B1.c: 104: }
  7721                           
  7722                           
  7723                           ;DelayOff_B1.c: 105: else
  7724                           ;DelayOff_B1.c: 106: {
  7725                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7726  124F  3005               	movlw	5
  7727  1250                     L3:	
  7728  1250  00A5               	movwf	??_setDelayOff_GO
  7729  1251  0827               	movf	setDelayOff_GO@sw,w
  7730  1252  3E1A               	addlw	26
  7731  1253  076F               	addwf	_Product,w
  7732  1254  00A6               	movwf	??_setDelayOff_GO+1
  7733  1255  0826               	movf	??_setDelayOff_GO+1,w
  7734  1256  0086               	movwf	6
  7735  1257  3001               	movlw	1	; select bank2/3
  7736  1258  0087               	movwf	7
  7737  1259  0825               	movf	??_setDelayOff_GO,w
  7738  125A  0081               	movwf	1
  7739                           
  7740                           ;DelayOff_B1.c: 108: }
  7741                           ;DelayOff_B1.c: 109: }
  7742  125B  2A68               	goto	l6194
  7743  125C                     l6190:	
  7744                           
  7745                           ;DelayOff_B1.c: 110: else if(!command)
  7746  125C  08A3               	movf	setDelayOff_GO@command,f
  7747  125D  1D03               	skipz
  7748  125E  2A68               	goto	l6194
  7749                           
  7750                           ;DelayOff_B1.c: 111: {
  7751                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7752  125F  0827               	movf	setDelayOff_GO@sw,w
  7753  1260  3E1A               	addlw	26
  7754  1261  076F               	addwf	_Product,w
  7755  1262  00A5               	movwf	??_setDelayOff_GO
  7756  1263  0825               	movf	??_setDelayOff_GO,w
  7757  1264  0086               	movwf	6
  7758  1265  3001               	movlw	1	; select bank2/3
  7759  1266  0087               	movwf	7
  7760  1267  0181               	clrf	1
  7761  1268                     l6194:	
  7762                           
  7763                           ;DelayOff_B1.c: 113: }
  7764                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7765  1268  0021               	movlb	1	; select bank1
  7766  1269  0838               	movf	_DelayOff^(0+128),w
  7767  126A  3E02               	addlw	2
  7768  126B  0086               	movwf	6
  7769  126C  0187               	clrf	7
  7770  126D  3000               	movlw	0
  7771  126E  3FC0               	movwi [0]fsr1
  7772  126F  3FC1               	movwi [1]fsr1
  7773                           
  7774                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7775  1270  0838               	movf	_DelayOff^(0+128),w
  7776  1271  3E04               	addlw	4
  7777  1272  0086               	movwf	6
  7778  1273  0187               	clrf	7
  7779  1274  0181               	clrf	1
  7780  1275  0008               	return
  7781  1276                     __end_of_setDelayOff_GO:	
  7782                           
  7783                           	psect	text28
  7784  1C1B                     __ptext28:	
  7785 ;; *************** function _DelayTimejudge *****************
  7786 ;; Defined at:
  7787 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\DelayOff_B1.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;  value           1    wreg     unsigned char 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  value           1    2[BANK0 ] unsigned char 
  7792 ;;  i               1    1[BANK0 ] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      unsigned char 
  7795 ;; Registers used:
  7796 ;;		wreg
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;Total ram usage:        3 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    4
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		_setDelayOff_GO
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           
  7817                           ;psect for function _DelayTimejudge
  7818  1C1B                     _DelayTimejudge:	
  7819                           
  7820                           ;incstack = 0
  7821                           ; Regs used in _DelayTimejudge: [wreg]
  7822                           ;DelayTimejudge@value stored from wreg
  7823  1C1B  0020               	movlb	0	; select bank0
  7824  1C1C  00A2               	movwf	DelayTimejudge@value
  7825                           
  7826                           ;DelayOff_B1.c: 121: char i=5;
  7827  1C1D  3005               	movlw	5
  7828  1C1E  00A0               	movwf	??_DelayTimejudge
  7829  1C1F  0820               	movf	??_DelayTimejudge,w
  7830  1C20  00A1               	movwf	DelayTimejudge@i
  7831                           
  7832                           ;DelayOff_B1.c: 122: if(value == 0x05)
  7833  1C21  0822               	movf	DelayTimejudge@value,w
  7834  1C22  3A05               	xorlw	5
  7835  1C23  1D03               	skipz
  7836  1C24  2C27               	goto	l6030
  7837                           
  7838                           ;DelayOff_B1.c: 123: {
  7839                           ;DelayOff_B1.c: 124: i=5;
  7840  1C25  3005               	movlw	5
  7841  1C26  2C44               	goto	L8
  7842  1C27                     l6030:	
  7843                           ;DelayOff_B1.c: 125: }
  7844                           
  7845                           
  7846                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  7847  1C27  0822               	movf	DelayTimejudge@value,w
  7848  1C28  3A10               	xorlw	16
  7849  1C29  1D03               	skipz
  7850  1C2A  2C2D               	goto	l6034
  7851                           
  7852                           ;DelayOff_B1.c: 127: {
  7853                           ;DelayOff_B1.c: 128: i=10;
  7854  1C2B  300A               	movlw	10
  7855  1C2C  2C44               	goto	L8
  7856  1C2D                     l6034:	
  7857                           ;DelayOff_B1.c: 129: }
  7858                           
  7859                           
  7860                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  7861  1C2D  0822               	movf	DelayTimejudge@value,w
  7862  1C2E  3A15               	xorlw	21
  7863  1C2F  1D03               	skipz
  7864  1C30  2C33               	goto	l6038
  7865                           
  7866                           ;DelayOff_B1.c: 131: {
  7867                           ;DelayOff_B1.c: 132: i=15;
  7868  1C31  300F               	movlw	15
  7869  1C32  2C44               	goto	L8
  7870  1C33                     l6038:	
  7871                           ;DelayOff_B1.c: 133: }
  7872                           
  7873                           
  7874                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  7875  1C33  0822               	movf	DelayTimejudge@value,w
  7876  1C34  3A20               	xorlw	32
  7877  1C35  1D03               	skipz
  7878  1C36  2C39               	goto	l6042
  7879                           
  7880                           ;DelayOff_B1.c: 135: {
  7881                           ;DelayOff_B1.c: 136: i=20;
  7882  1C37  3014               	movlw	20
  7883  1C38  2C44               	goto	L8
  7884  1C39                     l6042:	
  7885                           ;DelayOff_B1.c: 137: }
  7886                           
  7887                           
  7888                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  7889  1C39  0822               	movf	DelayTimejudge@value,w
  7890  1C3A  3A25               	xorlw	37
  7891  1C3B  1D03               	skipz
  7892  1C3C  2C3F               	goto	l6046
  7893                           
  7894                           ;DelayOff_B1.c: 139: {
  7895                           ;DelayOff_B1.c: 140: i=25;
  7896  1C3D  3019               	movlw	25
  7897  1C3E  2C44               	goto	L8
  7898  1C3F                     l6046:	
  7899                           ;DelayOff_B1.c: 141: }
  7900                           
  7901                           
  7902                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  7903  1C3F  0822               	movf	DelayTimejudge@value,w
  7904  1C40  3A30               	xorlw	48
  7905  1C41  1D03               	skipz
  7906  1C42  2C47               	goto	l664
  7907                           
  7908                           ;DelayOff_B1.c: 143: {
  7909                           ;DelayOff_B1.c: 144: i=30;
  7910  1C43  301E               	movlw	30
  7911  1C44                     L8:	
  7912  1C44  00A0               	movwf	??_DelayTimejudge
  7913  1C45  0820               	movf	??_DelayTimejudge,w
  7914  1C46  00A1               	movwf	DelayTimejudge@i
  7915  1C47                     l664:	
  7916                           
  7917                           ;DelayOff_B1.c: 145: }
  7918                           ;DelayOff_B1.c: 146: return i;
  7919  1C47  0821               	movf	DelayTimejudge@i,w
  7920  1C48  0008               	return
  7921  1C49                     __end_of_DelayTimejudge:	
  7922                           
  7923                           	psect	text29
  7924  1E64                     __ptext29:	
  7925 ;; *************** function _setRFSW_AdjControl *****************
  7926 ;; Defined at:
  7927 ;;		line 401 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  sw              1    wreg     unsigned char 
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;  sw              1   70[BANK0 ] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;		None               void
  7934 ;; Registers used:
  7935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;Total ram usage:        3 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    9
  7948 ;; This function calls:
  7949 ;;		_RfSWPointSelect
  7950 ;;		_setRF_DimmerValue
  7951 ;;		_setTxData
  7952 ;; This function is called by:
  7953 ;;		_setControl_Lights_Table
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           
  7958                           ;psect for function _setRFSW_AdjControl
  7959  1E64                     _setRFSW_AdjControl:	
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7963                           ;setRFSW_AdjControl@sw stored from wreg
  7964  1E64  0020               	movlb	0	; select bank0
  7965  1E65  00E6               	movwf	setRFSW_AdjControl@sw
  7966                           
  7967                           ;RF_Control_B1.c: 403: RfSWPointSelect(sw);
  7968  1E66  0866               	movf	setRFSW_AdjControl@sw,w
  7969  1E67  31A7  2749  319E   	fcall	_RfSWPointSelect
  7970                           
  7971                           ;RF_Control_B1.c: 404: if(RFSW->Status)
  7972  1E6A  0021               	movlb	1	; select bank1
  7973  1E6B  083C               	movf	_RFSW^(0+128),w
  7974  1E6C  0086               	movwf	6
  7975  1E6D  0187               	clrf	7
  7976  1E6E  1C01               	btfss	1,0
  7977  1E6F  2E7C               	goto	l6436
  7978                           
  7979                           ;RF_Control_B1.c: 405: {
  7980                           ;RF_Control_B1.c: 406: Memory->Modify=1;
  7981  1E70  086A               	movf	_Memory^(0+128),w
  7982  1E71  3E22               	addlw	34
  7983  1E72  0086               	movwf	6
  7984  1E73  3001               	movlw	1	; select bank2/3
  7985  1E74  0087               	movwf	7
  7986  1E75  1401               	bsf	1,0
  7987                           
  7988                           ;RF_Control_B1.c: 407: setRF_DimmerValue(sw);
  7989  1E76  0020               	movlb	0	; select bank0
  7990  1E77  0866               	movf	setRFSW_AdjControl@sw,w
  7991  1E78  319D  253E  319E   	fcall	_setRF_DimmerValue
  7992                           
  7993                           ;RF_Control_B1.c: 408: }
  7994  1E7B  2E8E               	goto	l2567
  7995  1E7C                     l6436:	
  7996                           
  7997                           ;RF_Control_B1.c: 409: else
  7998                           ;RF_Control_B1.c: 410: {
  7999                           ;RF_Control_B1.c: 411: Product->Data[9]=Product->Data[20+sw];
  8000  1E7C  0020               	movlb	0	; select bank0
  8001  1E7D  0866               	movf	setRFSW_AdjControl@sw,w
  8002  1E7E  3E14               	addlw	20
  8003  1E7F  076F               	addwf	_Product,w
  8004  1E80  00E4               	movwf	??_setRFSW_AdjControl
  8005  1E81  0864               	movf	??_setRFSW_AdjControl,w
  8006  1E82  0086               	movwf	6
  8007  1E83  3001               	movlw	1	; select bank2/3
  8008  1E84  0087               	movwf	7
  8009  1E85  0801               	movf	1,w
  8010  1E86  00E5               	movwf	??_setRFSW_AdjControl+1
  8011  1E87  086F               	movf	_Product,w
  8012  1E88  3E09               	addlw	9
  8013  1E89  0086               	movwf	6
  8014  1E8A  3001               	movlw	1	; select bank2/3
  8015  1E8B  0087               	movwf	7
  8016  1E8C  0865               	movf	??_setRFSW_AdjControl+1,w
  8017  1E8D  0081               	movwf	1
  8018  1E8E                     l2567:	
  8019                           
  8020                           ;RF_Control_B1.c: 412: }
  8021                           ;RF_Control_B1.c: 413: Product->Data[17]=Product->Data[26+sw];
  8022  1E8E  0020               	movlb	0	; select bank0
  8023  1E8F  0866               	movf	setRFSW_AdjControl@sw,w
  8024  1E90  3E1A               	addlw	26
  8025  1E91  076F               	addwf	_Product,w
  8026  1E92  00E4               	movwf	??_setRFSW_AdjControl
  8027  1E93  0864               	movf	??_setRFSW_AdjControl,w
  8028  1E94  0086               	movwf	6
  8029  1E95  3001               	movlw	1	; select bank2/3
  8030  1E96  0087               	movwf	7
  8031  1E97  0801               	movf	1,w
  8032  1E98  00E5               	movwf	??_setRFSW_AdjControl+1
  8033  1E99  086F               	movf	_Product,w
  8034  1E9A  3E11               	addlw	17
  8035  1E9B  0086               	movwf	6
  8036  1E9C  3001               	movlw	1	; select bank2/3
  8037  1E9D  0087               	movwf	7
  8038  1E9E  0865               	movf	??_setRFSW_AdjControl+1,w
  8039  1E9F  0081               	movwf	1
  8040                           
  8041                           ;RF_Control_B1.c: 414: setTxData(1);
  8042  1EA0  3001               	movlw	1
  8043  1EA1  3187  271E         	fcall	_setTxData
  8044  1EA3  0008               	return
  8045  1EA4                     __end_of_setRFSW_AdjControl:	
  8046                           
  8047                           	psect	text30
  8048  1D3E                     __ptext30:	
  8049 ;; *************** function _setRF_DimmerValue *****************
  8050 ;; Defined at:
  8051 ;;		line 425 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;  lights          1    wreg     unsigned char 
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;  lights          1   67[BANK0 ] unsigned char 
  8056 ;; Return value:  Size  Location     Type
  8057 ;;		None               void
  8058 ;; Registers used:
  8059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8060 ;; Tracked objects:
  8061 ;;		On entry : 0/0
  8062 ;;		On exit  : 0/0
  8063 ;;		Unchanged: 0/0
  8064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;Total ram usage:        3 bytes
  8070 ;; Hardware stack levels used:    1
  8071 ;; Hardware stack levels required when called:    8
  8072 ;; This function calls:
  8073 ;;		_setDimmerLights_AdjRF
  8074 ;; This function is called by:
  8075 ;;		_setRFSW_AdjControl
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079                           
  8080                           ;psect for function _setRF_DimmerValue
  8081  1D3E                     _setRF_DimmerValue:	
  8082                           
  8083                           ;incstack = 0
  8084                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8085                           ;setRF_DimmerValue@lights stored from wreg
  8086  1D3E  0020               	movlb	0	; select bank0
  8087  1D3F  00E3               	movwf	setRF_DimmerValue@lights
  8088                           
  8089                           ;RF_Control_B1.c: 427: if(RF_Data[9] > 0x64)
  8090  1D40  3065               	movlw	101
  8091  1D41  0021               	movlb	1	; select bank1
  8092  1D42  0229               	subwf	(_RF_Data^(0+128)+9),w
  8093  1D43  1C03               	skipc
  8094  1D44  2D4B               	goto	l6284
  8095                           
  8096                           ;RF_Control_B1.c: 428: {
  8097                           ;RF_Control_B1.c: 429: RF_Data[9]=0x64;
  8098  1D45  3064               	movlw	100
  8099  1D46  0020               	movlb	0	; select bank0
  8100  1D47  00E1               	movwf	??_setRF_DimmerValue
  8101  1D48  0861               	movf	??_setRF_DimmerValue,w
  8102  1D49  0021               	movlb	1	; select bank1
  8103  1D4A  00A9               	movwf	(_RF_Data^(0+128)+9)
  8104  1D4B                     l6284:	
  8105                           
  8106                           ;RF_Control_B1.c: 430: }
  8107                           ;RF_Control_B1.c: 431: Product->Data[9]=RF_Data[9];
  8108  1D4B  0829               	movf	(_RF_Data^(0+128)+9),w
  8109  1D4C  0020               	movlb	0	; select bank0
  8110  1D4D  00E1               	movwf	??_setRF_DimmerValue
  8111  1D4E  086F               	movf	_Product,w
  8112  1D4F  3E09               	addlw	9
  8113  1D50  0086               	movwf	6
  8114  1D51  3001               	movlw	1	; select bank2/3
  8115  1D52  0087               	movwf	7
  8116  1D53  0861               	movf	??_setRF_DimmerValue,w
  8117  1D54  0081               	movwf	1
  8118                           
  8119                           ;RF_Control_B1.c: 432: Product->Data[11]=lights;
  8120  1D55  0863               	movf	setRF_DimmerValue@lights,w
  8121  1D56  00E1               	movwf	??_setRF_DimmerValue
  8122  1D57  086F               	movf	_Product,w
  8123  1D58  3E0B               	addlw	11
  8124  1D59  0086               	movwf	6
  8125  1D5A  3001               	movlw	1	; select bank2/3
  8126  1D5B  0087               	movwf	7
  8127  1D5C  0861               	movf	??_setRF_DimmerValue,w
  8128  1D5D  0081               	movwf	1
  8129                           
  8130                           ;RF_Control_B1.c: 433: Product->Data[(20+lights)]=Product->Data[9];
  8131  1D5E  086F               	movf	_Product,w
  8132  1D5F  3E09               	addlw	9
  8133  1D60  0086               	movwf	6
  8134  1D61  3001               	movlw	1	; select bank2/3
  8135  1D62  0087               	movwf	7
  8136  1D63  0801               	movf	1,w
  8137  1D64  00E1               	movwf	??_setRF_DimmerValue
  8138  1D65  0863               	movf	setRF_DimmerValue@lights,w
  8139  1D66  3E14               	addlw	20
  8140  1D67  076F               	addwf	_Product,w
  8141  1D68  00E2               	movwf	??_setRF_DimmerValue+1
  8142  1D69  0862               	movf	??_setRF_DimmerValue+1,w
  8143  1D6A  0086               	movwf	6
  8144  1D6B  3001               	movlw	1	; select bank2/3
  8145  1D6C  0087               	movwf	7
  8146  1D6D  0861               	movf	??_setRF_DimmerValue,w
  8147  1D6E  0081               	movwf	1
  8148                           
  8149                           ;RF_Control_B1.c: 434: setDimmerLights_AdjRF(lights);
  8150  1D6F  0863               	movf	setRF_DimmerValue@lights,w
  8151  1D70  319A  22B5         	fcall	_setDimmerLights_AdjRF
  8152  1D72  0008               	return
  8153  1D73                     __end_of_setRF_DimmerValue:	
  8154                           
  8155                           	psect	text31
  8156  1AB5                     __ptext31:	
  8157 ;; *************** function _setDimmerLights_AdjRF *****************
  8158 ;; Defined at:
  8159 ;;		line 414 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;  lights          1    wreg     unsigned char 
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  lights          1   64[BANK0 ] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;		None               void
  8166 ;; Registers used:
  8167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;Total ram usage:        2 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    7
  8180 ;; This function calls:
  8181 ;;		_DimmerLightsPointSelect
  8182 ;;		_getPercentValue
  8183 ;; This function is called by:
  8184 ;;		_setRF_DimmerValue
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _setDimmerLights_AdjRF
  8190  1AB5                     _setDimmerLights_AdjRF:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8194                           ;setDimmerLights_AdjRF@lights stored from wreg
  8195  1AB5  0020               	movlb	0	; select bank0
  8196  1AB6  00E0               	movwf	setDimmerLights_AdjRF@lights
  8197                           
  8198                           ;Dimmer_B1.c: 416: DimmerLightsPointSelect(lights);
  8199  1AB7  0860               	movf	setDimmerLights_AdjRF@lights,w
  8200  1AB8  31A6  26CC  319A   	fcall	_DimmerLightsPointSelect
  8201                           
  8202                           ;Dimmer_B1.c: 417: DimmerLights->AdjRF=1;
  8203  1ABB  0020               	movlb	0	; select bank0
  8204  1ABC  086C               	movf	_DimmerLights,w
  8205  1ABD  0086               	movwf	6
  8206  1ABE  3001               	movlw	1	; select bank2/3
  8207  1ABF  0087               	movwf	7
  8208  1AC0  1501               	bsf	1,2
  8209                           
  8210                           ;Dimmer_B1.c: 418: DimmerLights->Signal=1;
  8211  1AC1  086C               	movf	_DimmerLights,w
  8212  1AC2  0086               	movwf	6
  8213  1AC3  3001               	movlw	1	; select bank2/3
  8214  1AC4  0087               	movwf	7
  8215  1AC5  1481               	bsf	1,1
  8216                           
  8217                           ;Dimmer_B1.c: 419: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8218  1AC6  086F               	movf	_Product,w
  8219  1AC7  3E09               	addlw	9
  8220  1AC8  0086               	movwf	6
  8221  1AC9  3001               	movlw	1	; select bank2/3
  8222  1ACA  0087               	movwf	7
  8223  1ACB  0801               	movf	1,w
  8224  1ACC  3191  21BF         	fcall	_getPercentValue
  8225  1ACE  0020               	movlb	0	; select bank0
  8226  1ACF  00DF               	movwf	??_setDimmerLights_AdjRF
  8227  1AD0  086C               	movf	_DimmerLights,w
  8228  1AD1  3E05               	addlw	5
  8229  1AD2  0086               	movwf	6
  8230  1AD3  3001               	movlw	1	; select bank2/3
  8231  1AD4  0087               	movwf	7
  8232  1AD5  085F               	movf	??_setDimmerLights_AdjRF,w
  8233  1AD6  0081               	movwf	1
  8234  1AD7  0008               	return
  8235  1AD8                     __end_of_setDimmerLights_AdjRF:	
  8236                           
  8237                           	psect	text32
  8238  11BF                     __ptext32:	
  8239 ;; *************** function _getPercentValue *****************
  8240 ;; Defined at:
  8241 ;;		line 481 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;  value           1    wreg     unsigned char 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  value           1   59[BANK0 ] unsigned char 
  8246 ;;  i               3   60[BANK0 ] float 
  8247 ;; Return value:  Size  Location     Type
  8248 ;;                  1    wreg      unsigned char 
  8249 ;; Registers used:
  8250 ;;		wreg, status,2, status,0, pclath, cstack
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;Total ram usage:        6 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    6
  8263 ;; This function calls:
  8264 ;;		___awtoft
  8265 ;;		___ftadd
  8266 ;;		___ftdiv
  8267 ;;		___ftmul
  8268 ;;		___fttol
  8269 ;; This function is called by:
  8270 ;;		_setDimmerLights_AdjRF
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           
  8275                           ;psect for function _getPercentValue
  8276  11BF                     _getPercentValue:	
  8277                           
  8278                           ;incstack = 0
  8279                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8280                           ;getPercentValue@value stored from wreg
  8281  11BF  0020               	movlb	0	; select bank0
  8282  11C0  00DB               	movwf	getPercentValue@value
  8283                           
  8284                           ;Dimmer_B1.c: 484: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8285  11C1  3000               	movlw	0
  8286  11C2  00DC               	movwf	getPercentValue@i
  8287  11C3  3054               	movlw	84
  8288  11C4  00DD               	movwf	getPercentValue@i+1
  8289  11C5  3042               	movlw	66
  8290  11C6  00DE               	movwf	getPercentValue@i+2
  8291                           
  8292                           ;Dimmer_B1.c: 485: i/=100;
  8293  11C7  3000               	movlw	0
  8294  11C8  00AE               	movwf	___ftdiv@f2
  8295  11C9  30C8               	movlw	200
  8296  11CA  00AF               	movwf	___ftdiv@f2+1
  8297  11CB  3042               	movlw	66
  8298  11CC  00B0               	movwf	___ftdiv@f2+2
  8299  11CD  085C               	movf	getPercentValue@i,w
  8300  11CE  00B1               	movwf	___ftdiv@f1
  8301  11CF  085D               	movf	getPercentValue@i+1,w
  8302  11D0  00B2               	movwf	___ftdiv@f1+1
  8303  11D1  085E               	movf	getPercentValue@i+2,w
  8304  11D2  00B3               	movwf	___ftdiv@f1+2
  8305  11D3  318B  23C4  3191   	fcall	___ftdiv
  8306  11D6  0020               	movlb	0	; select bank0
  8307  11D7  082E               	movf	?___ftdiv,w
  8308  11D8  00DC               	movwf	getPercentValue@i
  8309  11D9  082F               	movf	?___ftdiv+1,w
  8310  11DA  00DD               	movwf	getPercentValue@i+1
  8311  11DB  0830               	movf	?___ftdiv+2,w
  8312  11DC  00DE               	movwf	getPercentValue@i+2
  8313                           
  8314                           ;Dimmer_B1.c: 486: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8315  11DD  085B               	movf	getPercentValue@value,w
  8316  11DE  00D9               	movwf	??_getPercentValue
  8317  11DF  01DA               	clrf	??_getPercentValue+1
  8318  11E0  09D9               	comf	??_getPercentValue,f
  8319  11E1  09DA               	comf	??_getPercentValue+1,f
  8320  11E2  0AD9               	incf	??_getPercentValue,f
  8321  11E3  1903               	skipnz
  8322  11E4  0ADA               	incf	??_getPercentValue+1,f
  8323  11E5  0859               	movf	??_getPercentValue,w
  8324  11E6  3E64               	addlw	100
  8325  11E7  00A8               	movwf	___awtoft@c
  8326  11E8  3000               	movlw	0
  8327  11E9  3D5A               	addwfc	??_getPercentValue+1,w
  8328  11EA  00A9               	movwf	___awtoft@c+1
  8329  11EB  319A  224F  3191   	fcall	___awtoft
  8330  11EE  0020               	movlb	0	; select bank0
  8331  11EF  0828               	movf	?___awtoft,w
  8332  11F0  00B1               	movwf	___ftmul@f2
  8333  11F1  0829               	movf	?___awtoft+1,w
  8334  11F2  00B2               	movwf	___ftmul@f2+1
  8335  11F3  082A               	movf	?___awtoft+2,w
  8336  11F4  00B3               	movwf	___ftmul@f2+2
  8337  11F5  085C               	movf	getPercentValue@i,w
  8338  11F6  00AE               	movwf	___ftmul@f1
  8339  11F7  085D               	movf	getPercentValue@i+1,w
  8340  11F8  00AF               	movwf	___ftmul@f1+1
  8341  11F9  085E               	movf	getPercentValue@i+2,w
  8342  11FA  00B0               	movwf	___ftmul@f1+2
  8343  11FB  318C  246D  3191   	fcall	___ftmul
  8344  11FE  0020               	movlb	0	; select bank0
  8345  11FF  082E               	movf	?___ftmul,w
  8346  1200  00C1               	movwf	___ftadd@f2
  8347  1201  082F               	movf	?___ftmul+1,w
  8348  1202  00C2               	movwf	___ftadd@f2+1
  8349  1203  0830               	movf	?___ftmul+2,w
  8350  1204  00C3               	movwf	___ftadd@f2+2
  8351  1205  3000               	movlw	0
  8352  1206  00BE               	movwf	___ftadd@f1
  8353  1207  3086               	movlw	134
  8354  1208  00BF               	movwf	___ftadd@f1+1
  8355  1209  3042               	movlw	66
  8356  120A  00C0               	movwf	___ftadd@f1+2
  8357  120B  318F  270A  3191   	fcall	___ftadd
  8358  120E  0020               	movlb	0	; select bank0
  8359  120F  083E               	movf	?___ftadd,w
  8360  1210  00CB               	movwf	___fttol@f1
  8361  1211  083F               	movf	?___ftadd+1,w
  8362  1212  00CC               	movwf	___fttol@f1+1
  8363  1213  0840               	movf	?___ftadd+2,w
  8364  1214  00CD               	movwf	___fttol@f1+2
  8365  1215  3188  2051         	fcall	___fttol
  8366  1217  0020               	movlb	0	; select bank0
  8367  1218  084B               	movf	?___fttol,w
  8368  1219  0008               	return
  8369  121A                     __end_of_getPercentValue:	
  8370                           
  8371                           	psect	text33
  8372  0C6D                     __ptext33:	
  8373 ;; *************** function ___ftmul *****************
  8374 ;; Defined at:
  8375 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;  f1              3   14[BANK0 ] float 
  8378 ;;  f2              3   17[BANK0 ] float 
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8381 ;;  sign            1   29[BANK0 ] unsigned char 
  8382 ;;  cntr            1   28[BANK0 ] unsigned char 
  8383 ;;  exp             1   24[BANK0 ] unsigned char 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  3   14[BANK0 ] float 
  8386 ;; Registers used:
  8387 ;;		wreg, status,2, status,0, pclath, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8393 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;Total ram usage:       16 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    5
  8400 ;; This function calls:
  8401 ;;		___ftpack
  8402 ;; This function is called by:
  8403 ;;		_getPercentValue
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           
  8408                           ;psect for function ___ftmul
  8409  0C6D                     ___ftmul:	
  8410                           
  8411                           ;incstack = 0
  8412                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8413  0C6D  0020               	movlb	0	; select bank0
  8414  0C6E  082E               	movf	___ftmul@f1,w
  8415  0C6F  00B4               	movwf	??___ftmul
  8416  0C70  082F               	movf	___ftmul@f1+1,w
  8417  0C71  00B5               	movwf	??___ftmul+1
  8418  0C72  0830               	movf	___ftmul@f1+2,w
  8419  0C73  00B6               	movwf	??___ftmul+2
  8420  0C74  1003               	clrc
  8421  0C75  0D35               	rlf	??___ftmul+1,w
  8422  0C76  0D36               	rlf	??___ftmul+2,w
  8423  0C77  00B7               	movwf	??___ftmul+3
  8424  0C78  0837               	movf	??___ftmul+3,w
  8425  0C79  00B8               	movwf	___ftmul@exp
  8426  0C7A  08B8               	movf	___ftmul@exp,f
  8427  0C7B  1D03               	skipz
  8428  0C7C  2C84               	goto	l5922
  8429  0C7D  3000               	movlw	0
  8430  0C7E  00AE               	movwf	?___ftmul
  8431  0C7F  3000               	movlw	0
  8432  0C80  00AF               	movwf	?___ftmul+1
  8433  0C81  3000               	movlw	0
  8434  0C82  00B0               	movwf	?___ftmul+2
  8435  0C83  0008               	return
  8436  0C84                     l5922:	
  8437  0C84  0831               	movf	___ftmul@f2,w
  8438  0C85  00B4               	movwf	??___ftmul
  8439  0C86  0832               	movf	___ftmul@f2+1,w
  8440  0C87  00B5               	movwf	??___ftmul+1
  8441  0C88  0833               	movf	___ftmul@f2+2,w
  8442  0C89  00B6               	movwf	??___ftmul+2
  8443  0C8A  1003               	clrc
  8444  0C8B  0D35               	rlf	??___ftmul+1,w
  8445  0C8C  0D36               	rlf	??___ftmul+2,w
  8446  0C8D  00B7               	movwf	??___ftmul+3
  8447  0C8E  0837               	movf	??___ftmul+3,w
  8448  0C8F  00BD               	movwf	___ftmul@sign
  8449  0C90  08BD               	movf	___ftmul@sign,f
  8450  0C91  1D03               	skipz
  8451  0C92  2C9A               	goto	l5928
  8452  0C93  3000               	movlw	0
  8453  0C94  00AE               	movwf	?___ftmul
  8454  0C95  3000               	movlw	0
  8455  0C96  00AF               	movwf	?___ftmul+1
  8456  0C97  3000               	movlw	0
  8457  0C98  00B0               	movwf	?___ftmul+2
  8458  0C99  0008               	return
  8459  0C9A                     l5928:	
  8460  0C9A  083D               	movf	___ftmul@sign,w
  8461  0C9B  3E7B               	addlw	123
  8462  0C9C  00B4               	movwf	??___ftmul
  8463  0C9D  0834               	movf	??___ftmul,w
  8464  0C9E  07B8               	addwf	___ftmul@exp,f
  8465  0C9F  082E               	movf	___ftmul@f1,w
  8466  0CA0  00B4               	movwf	??___ftmul
  8467  0CA1  082F               	movf	___ftmul@f1+1,w
  8468  0CA2  00B5               	movwf	??___ftmul+1
  8469  0CA3  0830               	movf	___ftmul@f1+2,w
  8470  0CA4  00B6               	movwf	??___ftmul+2
  8471  0CA5  3010               	movlw	16
  8472  0CA6                     u4175:	
  8473  0CA6  36B6               	lsrf	??___ftmul+2,f
  8474  0CA7  0CB5               	rrf	??___ftmul+1,f
  8475  0CA8  0CB4               	rrf	??___ftmul,f
  8476  0CA9  0B89               	decfsz	9,f
  8477  0CAA  2CA6               	goto	u4175
  8478  0CAB  0834               	movf	??___ftmul,w
  8479  0CAC  00B7               	movwf	??___ftmul+3
  8480  0CAD  0837               	movf	??___ftmul+3,w
  8481  0CAE  00BD               	movwf	___ftmul@sign
  8482  0CAF  0831               	movf	___ftmul@f2,w
  8483  0CB0  00B4               	movwf	??___ftmul
  8484  0CB1  0832               	movf	___ftmul@f2+1,w
  8485  0CB2  00B5               	movwf	??___ftmul+1
  8486  0CB3  0833               	movf	___ftmul@f2+2,w
  8487  0CB4  00B6               	movwf	??___ftmul+2
  8488  0CB5  3010               	movlw	16
  8489  0CB6                     u4185:	
  8490  0CB6  36B6               	lsrf	??___ftmul+2,f
  8491  0CB7  0CB5               	rrf	??___ftmul+1,f
  8492  0CB8  0CB4               	rrf	??___ftmul,f
  8493  0CB9  0B89               	decfsz	9,f
  8494  0CBA  2CB6               	goto	u4185
  8495  0CBB  0834               	movf	??___ftmul,w
  8496  0CBC  00B7               	movwf	??___ftmul+3
  8497  0CBD  0837               	movf	??___ftmul+3,w
  8498  0CBE  06BD               	xorwf	___ftmul@sign,f
  8499  0CBF  3080               	movlw	128
  8500  0CC0  00B4               	movwf	??___ftmul
  8501  0CC1  0834               	movf	??___ftmul,w
  8502  0CC2  05BD               	andwf	___ftmul@sign,f
  8503  0CC3  17AF               	bsf	___ftmul@f1+1,7
  8504  0CC4  17B2               	bsf	___ftmul@f2+1,7
  8505  0CC5  30FF               	movlw	255
  8506  0CC6  05B1               	andwf	___ftmul@f2,f
  8507  0CC7  30FF               	movlw	255
  8508  0CC8  05B2               	andwf	___ftmul@f2+1,f
  8509  0CC9  3000               	movlw	0
  8510  0CCA  05B3               	andwf	___ftmul@f2+2,f
  8511  0CCB  3000               	movlw	0
  8512  0CCC  00B9               	movwf	___ftmul@f3_as_product
  8513  0CCD  3000               	movlw	0
  8514  0CCE  00BA               	movwf	___ftmul@f3_as_product+1
  8515  0CCF  3000               	movlw	0
  8516  0CD0  00BB               	movwf	___ftmul@f3_as_product+2
  8517  0CD1  3007               	movlw	7
  8518  0CD2  00B4               	movwf	??___ftmul
  8519  0CD3  0834               	movf	??___ftmul,w
  8520  0CD4  00BC               	movwf	___ftmul@cntr
  8521  0CD5                     l5940:	
  8522  0CD5  1C2E               	btfss	___ftmul@f1,0
  8523  0CD6  2CDD               	goto	l5944
  8524  0CD7  0831               	movf	___ftmul@f2,w
  8525  0CD8  07B9               	addwf	___ftmul@f3_as_product,f
  8526  0CD9  0832               	movf	___ftmul@f2+1,w
  8527  0CDA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8528  0CDB  0833               	movf	___ftmul@f2+2,w
  8529  0CDC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8530  0CDD                     l5944:	
  8531  0CDD  3001               	movlw	1
  8532  0CDE                     u4205:	
  8533  0CDE  36B0               	lsrf	___ftmul@f1+2,f
  8534  0CDF  0CAF               	rrf	___ftmul@f1+1,f
  8535  0CE0  0CAE               	rrf	___ftmul@f1,f
  8536  0CE1  0B89               	decfsz	9,f
  8537  0CE2  2CDE               	goto	u4205
  8538  0CE3  3001               	movlw	1
  8539  0CE4                     u4215:	
  8540  0CE4  35B1               	lslf	___ftmul@f2,f
  8541  0CE5  0DB2               	rlf	___ftmul@f2+1,f
  8542  0CE6  0DB3               	rlf	___ftmul@f2+2,f
  8543  0CE7  0B89               	decfsz	9,f
  8544  0CE8  2CE4               	goto	u4215
  8545  0CE9  3001               	movlw	1
  8546  0CEA  02BC               	subwf	___ftmul@cntr,f
  8547  0CEB  1D03               	btfss	3,2
  8548  0CEC  2CD5               	goto	l5940
  8549  0CED  3009               	movlw	9
  8550  0CEE  00B4               	movwf	??___ftmul
  8551  0CEF  0834               	movf	??___ftmul,w
  8552  0CF0  00BC               	movwf	___ftmul@cntr
  8553  0CF1                     l5952:	
  8554  0CF1  1C2E               	btfss	___ftmul@f1,0
  8555  0CF2  2CF9               	goto	l5956
  8556  0CF3  0831               	movf	___ftmul@f2,w
  8557  0CF4  07B9               	addwf	___ftmul@f3_as_product,f
  8558  0CF5  0832               	movf	___ftmul@f2+1,w
  8559  0CF6  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8560  0CF7  0833               	movf	___ftmul@f2+2,w
  8561  0CF8  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8562  0CF9                     l5956:	
  8563  0CF9  3001               	movlw	1
  8564  0CFA                     u4245:	
  8565  0CFA  36B0               	lsrf	___ftmul@f1+2,f
  8566  0CFB  0CAF               	rrf	___ftmul@f1+1,f
  8567  0CFC  0CAE               	rrf	___ftmul@f1,f
  8568  0CFD  0B89               	decfsz	9,f
  8569  0CFE  2CFA               	goto	u4245
  8570  0CFF  3001               	movlw	1
  8571  0D00                     u4255:	
  8572  0D00  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8573  0D01  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8574  0D02  0CB9               	rrf	___ftmul@f3_as_product,f
  8575  0D03  0B89               	decfsz	9,f
  8576  0D04  2D00               	goto	u4255
  8577  0D05  3001               	movlw	1
  8578  0D06  02BC               	subwf	___ftmul@cntr,f
  8579  0D07  1D03               	btfss	3,2
  8580  0D08  2CF1               	goto	l5952
  8581  0D09  0839               	movf	___ftmul@f3_as_product,w
  8582  0D0A  00A0               	movwf	___ftpack@arg
  8583  0D0B  083A               	movf	___ftmul@f3_as_product+1,w
  8584  0D0C  00A1               	movwf	___ftpack@arg+1
  8585  0D0D  083B               	movf	___ftmul@f3_as_product+2,w
  8586  0D0E  00A2               	movwf	___ftpack@arg+2
  8587  0D0F  0838               	movf	___ftmul@exp,w
  8588  0D10  00B4               	movwf	??___ftmul
  8589  0D11  0834               	movf	??___ftmul,w
  8590  0D12  00A3               	movwf	___ftpack@exp
  8591  0D13  083D               	movf	___ftmul@sign,w
  8592  0D14  00B5               	movwf	??___ftmul+1
  8593  0D15  0835               	movf	??___ftmul+1,w
  8594  0D16  00A4               	movwf	___ftpack@sign
  8595  0D17  3192  22D4         	fcall	___ftpack
  8596  0D19  0020               	movlb	0	; select bank0
  8597  0D1A  0820               	movf	?___ftpack,w
  8598  0D1B  00AE               	movwf	?___ftmul
  8599  0D1C  0821               	movf	?___ftpack+1,w
  8600  0D1D  00AF               	movwf	?___ftmul+1
  8601  0D1E  0822               	movf	?___ftpack+2,w
  8602  0D1F  00B0               	movwf	?___ftmul+2
  8603  0D20  0008               	return
  8604  0D21                     __end_of___ftmul:	
  8605                           
  8606                           	psect	text34
  8607  0F0A                     __ptext34:	
  8608 ;; *************** function ___ftadd *****************
  8609 ;; Defined at:
  8610 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8611 ;; Parameters:    Size  Location     Type
  8612 ;;  f1              3   30[BANK0 ] float 
  8613 ;;  f2              3   33[BANK0 ] float 
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;  exp1            1   42[BANK0 ] unsigned char 
  8616 ;;  exp2            1   41[BANK0 ] unsigned char 
  8617 ;;  sign            1   40[BANK0 ] unsigned char 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  3   30[BANK0 ] float 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0, pclath, cstack
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8627 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;Total ram usage:       13 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    5
  8634 ;; This function calls:
  8635 ;;		___ftpack
  8636 ;; This function is called by:
  8637 ;;		_getPercentValue
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           
  8642                           ;psect for function ___ftadd
  8643  0F0A                     ___ftadd:	
  8644                           
  8645                           ;incstack = 0
  8646                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8647  0F0A  0020               	movlb	0	; select bank0
  8648  0F0B  083E               	movf	___ftadd@f1,w
  8649  0F0C  00C4               	movwf	??___ftadd
  8650  0F0D  083F               	movf	___ftadd@f1+1,w
  8651  0F0E  00C5               	movwf	??___ftadd+1
  8652  0F0F  0840               	movf	___ftadd@f1+2,w
  8653  0F10  00C6               	movwf	??___ftadd+2
  8654  0F11  1003               	clrc
  8655  0F12  0D45               	rlf	??___ftadd+1,w
  8656  0F13  0D46               	rlf	??___ftadd+2,w
  8657  0F14  00C7               	movwf	??___ftadd+3
  8658  0F15  0847               	movf	??___ftadd+3,w
  8659  0F16  00CA               	movwf	___ftadd@exp1
  8660  0F17  0841               	movf	___ftadd@f2,w
  8661  0F18  00C4               	movwf	??___ftadd
  8662  0F19  0842               	movf	___ftadd@f2+1,w
  8663  0F1A  00C5               	movwf	??___ftadd+1
  8664  0F1B  0843               	movf	___ftadd@f2+2,w
  8665  0F1C  00C6               	movwf	??___ftadd+2
  8666  0F1D  1003               	clrc
  8667  0F1E  0D45               	rlf	??___ftadd+1,w
  8668  0F1F  0D46               	rlf	??___ftadd+2,w
  8669  0F20  00C7               	movwf	??___ftadd+3
  8670  0F21  0847               	movf	??___ftadd+3,w
  8671  0F22  00C9               	movwf	___ftadd@exp2
  8672  0F23  084A               	movf	___ftadd@exp1,w
  8673  0F24  1903               	btfsc	3,2
  8674  0F25  2F32               	goto	l5810
  8675  0F26  0849               	movf	___ftadd@exp2,w
  8676  0F27  024A               	subwf	___ftadd@exp1,w
  8677  0F28  1803               	skipnc
  8678  0F29  2F39               	goto	l5814
  8679  0F2A  034A               	decf	___ftadd@exp1,w
  8680  0F2B  3AFF               	xorlw	255
  8681  0F2C  0749               	addwf	___ftadd@exp2,w
  8682  0F2D  00C4               	movwf	??___ftadd
  8683  0F2E  3019               	movlw	25
  8684  0F2F  0244               	subwf	??___ftadd,w
  8685  0F30  1C03               	skipc
  8686  0F31  2F39               	goto	l5814
  8687  0F32                     l5810:	
  8688  0F32  0841               	movf	___ftadd@f2,w
  8689  0F33  00BE               	movwf	?___ftadd
  8690  0F34  0842               	movf	___ftadd@f2+1,w
  8691  0F35  00BF               	movwf	?___ftadd+1
  8692  0F36  0843               	movf	___ftadd@f2+2,w
  8693  0F37  00C0               	movwf	?___ftadd+2
  8694  0F38  0008               	return
  8695  0F39                     l5814:	
  8696  0F39  0849               	movf	___ftadd@exp2,w
  8697  0F3A  1903               	btfsc	3,2
  8698  0F3B  0008               	return
  8699  0F3C  084A               	movf	___ftadd@exp1,w
  8700  0F3D  0249               	subwf	___ftadd@exp2,w
  8701  0F3E  1803               	skipnc
  8702  0F3F  2F48               	goto	l5820
  8703  0F40  0349               	decf	___ftadd@exp2,w
  8704  0F41  3AFF               	xorlw	255
  8705  0F42  074A               	addwf	___ftadd@exp1,w
  8706  0F43  00C4               	movwf	??___ftadd
  8707  0F44  3019               	movlw	25
  8708  0F45  0244               	subwf	??___ftadd,w
  8709  0F46  1803               	btfsc	3,0
  8710  0F47  0008               	return
  8711  0F48                     l5820:	
  8712  0F48  3006               	movlw	6
  8713  0F49  00C4               	movwf	??___ftadd
  8714  0F4A  0844               	movf	??___ftadd,w
  8715  0F4B  00C8               	movwf	___ftadd@sign
  8716  0F4C  1BC0               	btfsc	___ftadd@f1+2,7
  8717  0F4D  17C8               	bsf	___ftadd@sign,7
  8718  0F4E  1BC3               	btfsc	___ftadd@f2+2,7
  8719  0F4F  1748               	bsf	___ftadd@sign,6
  8720  0F50  17BF               	bsf	___ftadd@f1+1,7
  8721  0F51  30FF               	movlw	255
  8722  0F52  05BE               	andwf	___ftadd@f1,f
  8723  0F53  30FF               	movlw	255
  8724  0F54  05BF               	andwf	___ftadd@f1+1,f
  8725  0F55  3000               	movlw	0
  8726  0F56  05C0               	andwf	___ftadd@f1+2,f
  8727  0F57  17C2               	bsf	___ftadd@f2+1,7
  8728  0F58  30FF               	movlw	255
  8729  0F59  05C1               	andwf	___ftadd@f2,f
  8730  0F5A  30FF               	movlw	255
  8731  0F5B  05C2               	andwf	___ftadd@f2+1,f
  8732  0F5C  3000               	movlw	0
  8733  0F5D  05C3               	andwf	___ftadd@f2+2,f
  8734  0F5E  0849               	movf	___ftadd@exp2,w
  8735  0F5F  024A               	subwf	___ftadd@exp1,w
  8736  0F60  1803               	skipnc
  8737  0F61  2F84               	goto	l5842
  8738  0F62                     l5832:	
  8739  0F62  3001               	movlw	1
  8740  0F63                     u3935:	
  8741  0F63  35C1               	lslf	___ftadd@f2,f
  8742  0F64  0DC2               	rlf	___ftadd@f2+1,f
  8743  0F65  0DC3               	rlf	___ftadd@f2+2,f
  8744  0F66  0B89               	decfsz	9,f
  8745  0F67  2F63               	goto	u3935
  8746  0F68  3001               	movlw	1
  8747  0F69  02C9               	subwf	___ftadd@exp2,f
  8748  0F6A  0849               	movf	___ftadd@exp2,w
  8749  0F6B  064A               	xorwf	___ftadd@exp1,w
  8750  0F6C  1903               	skipnz
  8751  0F6D  2F7F               	goto	l5840
  8752  0F6E  3001               	movlw	1
  8753  0F6F  02C8               	subwf	___ftadd@sign,f
  8754  0F70  0848               	movf	___ftadd@sign,w
  8755  0F71  3907               	andlw	7
  8756  0F72  1903               	btfsc	3,2
  8757  0F73  2F7F               	goto	l5840
  8758  0F74  2F62               	goto	l5832
  8759  0F75                     l5838:	
  8760  0F75  3001               	movlw	1
  8761  0F76                     u3965:	
  8762  0F76  36C0               	lsrf	___ftadd@f1+2,f
  8763  0F77  0CBF               	rrf	___ftadd@f1+1,f
  8764  0F78  0CBE               	rrf	___ftadd@f1,f
  8765  0F79  0B89               	decfsz	9,f
  8766  0F7A  2F76               	goto	u3965
  8767  0F7B  3001               	movlw	1
  8768  0F7C  00C4               	movwf	??___ftadd
  8769  0F7D  0844               	movf	??___ftadd,w
  8770  0F7E  07CA               	addwf	___ftadd@exp1,f
  8771  0F7F                     l5840:	
  8772  0F7F  084A               	movf	___ftadd@exp1,w
  8773  0F80  0649               	xorwf	___ftadd@exp2,w
  8774  0F81  1903               	btfsc	3,2
  8775  0F82  2FA9               	goto	l3217
  8776  0F83  2F75               	goto	l5838
  8777  0F84                     l5842:	
  8778  0F84  084A               	movf	___ftadd@exp1,w
  8779  0F85  0249               	subwf	___ftadd@exp2,w
  8780  0F86  1803               	skipnc
  8781  0F87  2FA9               	goto	l3217
  8782  0F88                     l5844:	
  8783  0F88  3001               	movlw	1
  8784  0F89                     u3995:	
  8785  0F89  35BE               	lslf	___ftadd@f1,f
  8786  0F8A  0DBF               	rlf	___ftadd@f1+1,f
  8787  0F8B  0DC0               	rlf	___ftadd@f1+2,f
  8788  0F8C  0B89               	decfsz	9,f
  8789  0F8D  2F89               	goto	u3995
  8790  0F8E  3001               	movlw	1
  8791  0F8F  02CA               	subwf	___ftadd@exp1,f
  8792  0F90  0849               	movf	___ftadd@exp2,w
  8793  0F91  064A               	xorwf	___ftadd@exp1,w
  8794  0F92  1903               	skipnz
  8795  0F93  2FA5               	goto	l5852
  8796  0F94  3001               	movlw	1
  8797  0F95  02C8               	subwf	___ftadd@sign,f
  8798  0F96  0848               	movf	___ftadd@sign,w
  8799  0F97  3907               	andlw	7
  8800  0F98  1903               	btfsc	3,2
  8801  0F99  2FA5               	goto	l5852
  8802  0F9A  2F88               	goto	l5844
  8803  0F9B                     l5850:	
  8804  0F9B  3001               	movlw	1
  8805  0F9C                     u4025:	
  8806  0F9C  36C3               	lsrf	___ftadd@f2+2,f
  8807  0F9D  0CC2               	rrf	___ftadd@f2+1,f
  8808  0F9E  0CC1               	rrf	___ftadd@f2,f
  8809  0F9F  0B89               	decfsz	9,f
  8810  0FA0  2F9C               	goto	u4025
  8811  0FA1  3001               	movlw	1
  8812  0FA2  00C4               	movwf	??___ftadd
  8813  0FA3  0844               	movf	??___ftadd,w
  8814  0FA4  07C9               	addwf	___ftadd@exp2,f
  8815  0FA5                     l5852:	
  8816  0FA5  084A               	movf	___ftadd@exp1,w
  8817  0FA6  0649               	xorwf	___ftadd@exp2,w
  8818  0FA7  1D03               	skipz
  8819  0FA8  2F9B               	goto	l5850
  8820  0FA9                     l3217:	
  8821  0FA9  1FC8               	btfss	___ftadd@sign,7
  8822  0FAA  2FBB               	goto	l5856
  8823  0FAB  30FF               	movlw	255
  8824  0FAC  06BE               	xorwf	___ftadd@f1,f
  8825  0FAD  30FF               	movlw	255
  8826  0FAE  06BF               	xorwf	___ftadd@f1+1,f
  8827  0FAF  30FF               	movlw	255
  8828  0FB0  06C0               	xorwf	___ftadd@f1+2,f
  8829  0FB1  3001               	movlw	1
  8830  0FB2  07BE               	addwf	___ftadd@f1,f
  8831  0FB3  3000               	movlw	0
  8832  0FB4  1803               	skipnc
  8833  0FB5  3001               	movlw	1
  8834  0FB6  07BF               	addwf	___ftadd@f1+1,f
  8835  0FB7  3000               	movlw	0
  8836  0FB8  1803               	skipnc
  8837  0FB9  3001               	movlw	1
  8838  0FBA  07C0               	addwf	___ftadd@f1+2,f
  8839  0FBB                     l5856:	
  8840  0FBB  1F48               	btfss	___ftadd@sign,6
  8841  0FBC  2FCD               	goto	l5860
  8842  0FBD  30FF               	movlw	255
  8843  0FBE  06C1               	xorwf	___ftadd@f2,f
  8844  0FBF  30FF               	movlw	255
  8845  0FC0  06C2               	xorwf	___ftadd@f2+1,f
  8846  0FC1  30FF               	movlw	255
  8847  0FC2  06C3               	xorwf	___ftadd@f2+2,f
  8848  0FC3  3001               	movlw	1
  8849  0FC4  07C1               	addwf	___ftadd@f2,f
  8850  0FC5  3000               	movlw	0
  8851  0FC6  1803               	skipnc
  8852  0FC7  3001               	movlw	1
  8853  0FC8  07C2               	addwf	___ftadd@f2+1,f
  8854  0FC9  3000               	movlw	0
  8855  0FCA  1803               	skipnc
  8856  0FCB  3001               	movlw	1
  8857  0FCC  07C3               	addwf	___ftadd@f2+2,f
  8858  0FCD                     l5860:	
  8859  0FCD  01C8               	clrf	___ftadd@sign
  8860  0FCE  083E               	movf	___ftadd@f1,w
  8861  0FCF  07C1               	addwf	___ftadd@f2,f
  8862  0FD0  083F               	movf	___ftadd@f1+1,w
  8863  0FD1  3DC2               	addwfc	___ftadd@f2+1,f
  8864  0FD2  0840               	movf	___ftadd@f1+2,w
  8865  0FD3  3DC3               	addwfc	___ftadd@f2+2,f
  8866  0FD4  1FC3               	btfss	___ftadd@f2+2,7
  8867  0FD5  2FE8               	goto	l5870
  8868  0FD6  30FF               	movlw	255
  8869  0FD7  06C1               	xorwf	___ftadd@f2,f
  8870  0FD8  30FF               	movlw	255
  8871  0FD9  06C2               	xorwf	___ftadd@f2+1,f
  8872  0FDA  30FF               	movlw	255
  8873  0FDB  06C3               	xorwf	___ftadd@f2+2,f
  8874  0FDC  3001               	movlw	1
  8875  0FDD  07C1               	addwf	___ftadd@f2,f
  8876  0FDE  3000               	movlw	0
  8877  0FDF  1803               	skipnc
  8878  0FE0  3001               	movlw	1
  8879  0FE1  07C2               	addwf	___ftadd@f2+1,f
  8880  0FE2  3000               	movlw	0
  8881  0FE3  1803               	skipnc
  8882  0FE4  3001               	movlw	1
  8883  0FE5  07C3               	addwf	___ftadd@f2+2,f
  8884  0FE6  01C8               	clrf	___ftadd@sign
  8885  0FE7  0AC8               	incf	___ftadd@sign,f
  8886  0FE8                     l5870:	
  8887  0FE8  0841               	movf	___ftadd@f2,w
  8888  0FE9  00A0               	movwf	___ftpack@arg
  8889  0FEA  0842               	movf	___ftadd@f2+1,w
  8890  0FEB  00A1               	movwf	___ftpack@arg+1
  8891  0FEC  0843               	movf	___ftadd@f2+2,w
  8892  0FED  00A2               	movwf	___ftpack@arg+2
  8893  0FEE  084A               	movf	___ftadd@exp1,w
  8894  0FEF  00C4               	movwf	??___ftadd
  8895  0FF0  0844               	movf	??___ftadd,w
  8896  0FF1  00A3               	movwf	___ftpack@exp
  8897  0FF2  0848               	movf	___ftadd@sign,w
  8898  0FF3  00C5               	movwf	??___ftadd+1
  8899  0FF4  0845               	movf	??___ftadd+1,w
  8900  0FF5  00A4               	movwf	___ftpack@sign
  8901  0FF6  3192  22D4         	fcall	___ftpack
  8902  0FF8  0020               	movlb	0	; select bank0
  8903  0FF9  0820               	movf	?___ftpack,w
  8904  0FFA  00BE               	movwf	?___ftadd
  8905  0FFB  0821               	movf	?___ftpack+1,w
  8906  0FFC  00BF               	movwf	?___ftadd+1
  8907  0FFD  0822               	movf	?___ftpack+2,w
  8908  0FFE  00C0               	movwf	?___ftadd+2
  8909  0FFF  0008               	return
  8910  1000                     __end_of___ftadd:	
  8911                           
  8912                           	psect	text35
  8913  1B48                     __ptext35:	
  8914 ;; *************** function _RF_RxDisable *****************
  8915 ;; Defined at:
  8916 ;;		line 191 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  rf              1    wreg     unsigned char 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;  rf              1    4[BANK0 ] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;		None               void
  8923 ;; Registers used:
  8924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;Total ram usage:        1 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:    6
  8937 ;; This function calls:
  8938 ;;		_CC2500_WriteCommand
  8939 ;;		_RfPointSelect
  8940 ;;		_setINT_GO
  8941 ;; This function is called by:
  8942 ;;		_setRF_Main
  8943 ;; This function uses a non-reentrant model
  8944 ;;
  8945                           
  8946                           
  8947                           ;psect for function _RF_RxDisable
  8948  1B48                     _RF_RxDisable:	
  8949                           
  8950                           ;incstack = 0
  8951                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8952                           ;RF_RxDisable@rf stored from wreg
  8953  1B48  0020               	movlb	0	; select bank0
  8954  1B49  00A4               	movwf	RF_RxDisable@rf
  8955                           
  8956                           ;RF_Control_B1.c: 193: RfPointSelect(rf);
  8957  1B4A  0824               	movf	RF_RxDisable@rf,w
  8958  1B4B  31A6  26E2  319B   	fcall	_RfPointSelect
  8959                           
  8960                           ;RF_Control_B1.c: 195: if(RF->RxStatus)
  8961  1B4E  087B               	movf	_RF,w
  8962  1B4F  0086               	movwf	6
  8963  1B50  0187               	clrf	7
  8964  1B51  1D81               	btfss	1,3
  8965  1B52  0008               	return
  8966                           
  8967                           ;RF_Control_B1.c: 196: {
  8968                           ;RF_Control_B1.c: 197: RF->RxStatus=0;
  8969  1B53  087B               	movf	_RF,w
  8970  1B54  0086               	movwf	6
  8971  1B55  0187               	clrf	7
  8972  1B56  1181               	bcf	1,3
  8973                           
  8974                           ;RF_Control_B1.c: 198: RF->ReceiveGO=0;
  8975  1B57  087B               	movf	_RF,w
  8976  1B58  0086               	movwf	6
  8977  1B59  0187               	clrf	7
  8978  1B5A  1081               	bcf	1,1
  8979                           
  8980                           ;RF_Control_B1.c: 199: RF->DebounceTime=0;
  8981  1B5B  0A7B               	incf	_RF,w
  8982  1B5C  0086               	movwf	6
  8983  1B5D  0187               	clrf	7
  8984  1B5E  0181               	clrf	1
  8985                           
  8986                           ;RF_Control_B1.c: 200: RF->Debounce=0;
  8987  1B5F  087B               	movf	_RF,w
  8988  1B60  0086               	movwf	6
  8989  1B61  0187               	clrf	7
  8990  1B62  1281               	bcf	1,5
  8991                           
  8992                           ;RF_Control_B1.c: 201: CC2500_WriteCommand(0x36);
  8993  1B63  3036               	movlw	54
  8994  1B64  3198  2088  319B   	fcall	_CC2500_WriteCommand
  8995                           
  8996                           ;RF_Control_B1.c: 202: CC2500_WriteCommand(0x3A);
  8997  1B67  303A               	movlw	58
  8998  1B68  3198  2088  319B   	fcall	_CC2500_WriteCommand
  8999                           
  9000                           ;RF_Control_B1.c: 203: setINT_GO(0);
  9001  1B6B  3000               	movlw	0
  9002  1B6C  31A6  2690         	fcall	_setINT_GO
  9003  1B6E  0008               	return
  9004  1B6F                     __end_of_RF_RxDisable:	
  9005                           
  9006                           	psect	text36
  9007  1EE8                     __ptext36:	
  9008 ;; *************** function _CC2500_TxData *****************
  9009 ;; Defined at:
  9010 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\CC2500_B1.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;		None
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9015 ;; Return value:  Size  Location     Type
  9016 ;;		None               void
  9017 ;; Registers used:
  9018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;Total ram usage:        2 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:    6
  9031 ;; This function calls:
  9032 ;;		_CC2500_WriteByte
  9033 ;;		_CC2500_WriteCommand
  9034 ;; This function is called by:
  9035 ;;		_setRF_Main
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           
  9040                           ;psect for function _CC2500_TxData
  9041  1EE8                     _CC2500_TxData:	
  9042                           
  9043                           ;CC2500_B1.c: 32: unsigned char loop_e;
  9044                           ;CC2500_B1.c: 34: RC4=0;
  9045                           
  9046                           ;incstack = 0
  9047                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9048  1EE8  0020               	movlb	0	; select bank0
  9049  1EE9  120E               	bcf	14,4	;volatile
  9050                           
  9051                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  9052  1EEA  307F               	movlw	127
  9053  1EEB  00A4               	movwf	??_CC2500_TxData
  9054  1EEC  0824               	movf	??_CC2500_TxData,w
  9055  1EED  0021               	movlb	1	; select bank1
  9056  1EEE  00BF               	movwf	_SPI0Buffer^(0+128)
  9057  1EEF                     l287:	
  9058                           ;CC2500_B1.c: 36: while(RC2==1);
  9059                           
  9060  1EEF  0020               	movlb	0	; select bank0
  9061  1EF0  190E               	btfsc	14,2	;volatile
  9062  1EF1  2EEF               	goto	l287
  9063                           
  9064                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  9065  1EF2  3199  2171  319E   	fcall	_CC2500_WriteByte
  9066                           
  9067                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  9068  1EF5  0021               	movlb	1	; select bank1
  9069  1EF6  0840               	movf	_Tx_Length^(0+128),w
  9070  1EF7  0020               	movlb	0	; select bank0
  9071  1EF8  00A4               	movwf	??_CC2500_TxData
  9072  1EF9  0824               	movf	??_CC2500_TxData,w
  9073  1EFA  0021               	movlb	1	; select bank1
  9074  1EFB  00BF               	movwf	_SPI0Buffer^(0+128)
  9075                           
  9076                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  9077  1EFC  3199  2171  319E   	fcall	_CC2500_WriteByte
  9078                           
  9079                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  9080  1EFF  0020               	movlb	0	; select bank0
  9081  1F00  01A5               	clrf	CC2500_TxData@loop_e
  9082  1F01                     l6580:	
  9083  1F01  0021               	movlb	1	; select bank1
  9084  1F02  0840               	movf	_Tx_Length^(0+128),w
  9085  1F03  0020               	movlb	0	; select bank0
  9086  1F04  0225               	subwf	CC2500_TxData@loop_e,w
  9087  1F05  1803               	btfsc	3,0
  9088  1F06  2F19               	goto	l292
  9089                           
  9090                           ;CC2500_B1.c: 41: {
  9091                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  9092  1F07  0825               	movf	CC2500_TxData@loop_e,w
  9093  1F08  3EA0               	addlw	_RF_Data& (0+255)
  9094  1F09  0086               	movwf	6
  9095  1F0A  0187               	clrf	7
  9096  1F0B  0801               	movf	1,w
  9097  1F0C  00A4               	movwf	??_CC2500_TxData
  9098  1F0D  0824               	movf	??_CC2500_TxData,w
  9099  1F0E  0021               	movlb	1	; select bank1
  9100  1F0F  00BF               	movwf	_SPI0Buffer^(0+128)
  9101                           
  9102                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9103  1F10  3199  2171  319E   	fcall	_CC2500_WriteByte
  9104  1F13  3001               	movlw	1
  9105  1F14  0020               	movlb	0	; select bank0
  9106  1F15  00A4               	movwf	??_CC2500_TxData
  9107  1F16  0824               	movf	??_CC2500_TxData,w
  9108  1F17  07A5               	addwf	CC2500_TxData@loop_e,f
  9109  1F18  2F01               	goto	l6580
  9110  1F19                     l292:	
  9111                           
  9112                           ;CC2500_B1.c: 44: }
  9113                           ;CC2500_B1.c: 45: RC4=1;
  9114  1F19  160E               	bsf	14,4	;volatile
  9115                           
  9116                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9117  1F1A  3035               	movlw	53
  9118  1F1B  3198  2088  319E   	fcall	_CC2500_WriteCommand
  9119  1F1E                     l293:	
  9120                           ;CC2500_B1.c: 47: while(RB0==0);
  9121                           
  9122  1F1E  0020               	movlb	0	; select bank0
  9123  1F1F  1C0D               	btfss	13,0	;volatile
  9124  1F20  2F1E               	goto	l293
  9125  1F21                     l296:	
  9126                           ;CC2500_B1.c: 48: while(RB0==1);
  9127                           
  9128  1F21  180D               	btfsc	13,0	;volatile
  9129  1F22  2F21               	goto	l296
  9130                           
  9131                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9132  1F23  3036               	movlw	54
  9133  1F24  3198  2088  319E   	fcall	_CC2500_WriteCommand
  9134                           
  9135                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9136  1F27  303B               	movlw	59
  9137  1F28  3198  2088         	fcall	_CC2500_WriteCommand
  9138                           
  9139                           ;CC2500_B1.c: 51: Transceive_OK=1;
  9140  1F2A  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9141  1F2B  0008               	return
  9142  1F2C                     __end_of_CC2500_TxData:	
  9143                           
  9144                           	psect	text37
  9145  1335                     __ptext37:	
  9146 ;; *************** function _CC2500_RxData *****************
  9147 ;; Defined at:
  9148 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\CC2500_B1.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;		None
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9153 ;; Return value:  Size  Location     Type
  9154 ;;		None               void
  9155 ;; Registers used:
  9156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;Total ram usage:        2 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    6
  9169 ;; This function calls:
  9170 ;;		_CC2500_ReadByte
  9171 ;;		_CC2500_ReadStatus
  9172 ;;		_CC2500_WriteByte
  9173 ;;		_CC2500_WriteCommand
  9174 ;;		_setRF_RxStatus
  9175 ;; This function is called by:
  9176 ;;		_setRF_Main
  9177 ;; This function uses a non-reentrant model
  9178 ;;
  9179                           
  9180                           
  9181                           ;psect for function _CC2500_RxData
  9182  1335                     _CC2500_RxData:	
  9183                           
  9184                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9185                           ;CC2500_B1.c: 62: if(RB0 == 1)
  9186                           
  9187                           ;incstack = 0
  9188                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9189  1335  0020               	movlb	0	; select bank0
  9190  1336  180D               	btfsc	13,0	;volatile
  9191  1337                     l303:	
  9192                           ;CC2500_B1.c: 63: {
  9193                           ;CC2500_B1.c: 64: while(RB0 == 1);
  9194                           
  9195  1337  180D               	btfsc	13,0	;volatile
  9196  1338  2B37               	goto	l303
  9197                           
  9198                           ;CC2500_B1.c: 65: }
  9199                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9200  1339  303B               	movlw	59
  9201  133A  3199  21D7  3193   	fcall	_CC2500_ReadStatus
  9202                           
  9203                           ;CC2500_B1.c: 67: if(s_data != 0)
  9204  133D  0021               	movlb	1	; select bank1
  9205  133E  0843               	movf	_s_data^(0+128),w
  9206  133F  1903               	btfsc	3,2
  9207  1340  2B8B               	goto	l8494
  9208                           
  9209                           ;CC2500_B1.c: 69: {
  9210                           ;CC2500_B1.c: 70: RC4=0;
  9211  1341  0020               	movlb	0	; select bank0
  9212  1342  120E               	bcf	14,4	;volatile
  9213                           
  9214                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  9215  1343  30FF               	movlw	255
  9216  1344  00A4               	movwf	??_CC2500_RxData
  9217  1345  0824               	movf	??_CC2500_RxData,w
  9218  1346  0021               	movlb	1	; select bank1
  9219  1347  00BF               	movwf	_SPI0Buffer^(0+128)
  9220  1348                     l307:	
  9221                           ;CC2500_B1.c: 72: while(RC2==1);
  9222                           
  9223  1348  0020               	movlb	0	; select bank0
  9224  1349  190E               	btfsc	14,2	;volatile
  9225  134A  2B48               	goto	l307
  9226                           
  9227                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9228  134B  3199  2171  3193   	fcall	_CC2500_WriteByte
  9229                           
  9230                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9231  134E  3187  27E3  3193   	fcall	_CC2500_ReadByte
  9232                           
  9233                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  9234  1351  0021               	movlb	1	; select bank1
  9235  1352  083F               	movf	_SPI0Buffer^(0+128),w
  9236  1353  0020               	movlb	0	; select bank0
  9237  1354  00A4               	movwf	??_CC2500_RxData
  9238  1355  0824               	movf	??_CC2500_RxData,w
  9239  1356  0021               	movlb	1	; select bank1
  9240  1357  00BE               	movwf	_Rx_Length^(0+128)
  9241                           
  9242                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  9243  1358  0020               	movlb	0	; select bank0
  9244  1359  01A5               	clrf	CC2500_RxData@loop_f
  9245  135A                     l8480:	
  9246  135A  0021               	movlb	1	; select bank1
  9247  135B  083E               	movf	_Rx_Length^(0+128),w
  9248  135C  0020               	movlb	0	; select bank0
  9249  135D  0225               	subwf	CC2500_RxData@loop_f,w
  9250  135E  1803               	btfsc	3,0
  9251  135F  2B72               	goto	l8482
  9252                           
  9253                           ;CC2500_B1.c: 78: {
  9254                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  9255  1360  3187  27E3  3193   	fcall	_CC2500_ReadByte
  9256                           
  9257                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  9258  1363  0021               	movlb	1	; select bank1
  9259  1364  083F               	movf	_SPI0Buffer^(0+128),w
  9260  1365  0020               	movlb	0	; select bank0
  9261  1366  00A4               	movwf	??_CC2500_RxData
  9262  1367  0825               	movf	CC2500_RxData@loop_f,w
  9263  1368  3EA0               	addlw	_RF_Data& (0+255)
  9264  1369  0086               	movwf	6
  9265  136A  0187               	clrf	7
  9266  136B  0824               	movf	??_CC2500_RxData,w
  9267  136C  0081               	movwf	1
  9268  136D  3001               	movlw	1
  9269  136E  00A4               	movwf	??_CC2500_RxData
  9270  136F  0824               	movf	??_CC2500_RxData,w
  9271  1370  07A5               	addwf	CC2500_RxData@loop_f,f
  9272  1371  2B5A               	goto	l8480
  9273  1372                     l8482:	
  9274                           
  9275                           ;CC2500_B1.c: 81: }
  9276                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  9277  1372  3187  27E3  3193   	fcall	_CC2500_ReadByte
  9278                           
  9279                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  9280  1375  0021               	movlb	1	; select bank1
  9281  1376  083F               	movf	_SPI0Buffer^(0+128),w
  9282  1377  0020               	movlb	0	; select bank0
  9283  1378  00A4               	movwf	??_CC2500_RxData
  9284  1379  0824               	movf	??_CC2500_RxData,w
  9285  137A  0021               	movlb	1	; select bank1
  9286  137B  00BD               	movwf	_RSSI^(0+128)
  9287                           
  9288                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  9289  137C  3187  27E3  3193   	fcall	_CC2500_ReadByte
  9290                           
  9291                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  9292  137F  0021               	movlb	1	; select bank1
  9293  1380  083F               	movf	_SPI0Buffer^(0+128),w
  9294  1381  0020               	movlb	0	; select bank0
  9295  1382  00A4               	movwf	??_CC2500_RxData
  9296  1383  0824               	movf	??_CC2500_RxData,w
  9297  1384  0021               	movlb	1	; select bank1
  9298  1385  00B7               	movwf	_CRC^(0+128)
  9299                           
  9300                           ;CC2500_B1.c: 86: RC4=1;
  9301  1386  0020               	movlb	0	; select bank0
  9302  1387  160E               	bsf	14,4	;volatile
  9303                           
  9304                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  9305  1388  0021               	movlb	1	; select bank1
  9306  1389  1BB7               	btfsc	_CRC^(0+128),7
  9307                           
  9308                           ;CC2500_B1.c: 88: Receive_OK=1;
  9309  138A  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9310  138B                     l8494:	
  9311                           
  9312                           ;CC2500_B1.c: 89: }
  9313                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  9314  138B  3036               	movlw	54
  9315  138C  3198  2088  3193   	fcall	_CC2500_WriteCommand
  9316                           
  9317                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  9318  138F  303A               	movlw	58
  9319  1390  3198  2088  3193   	fcall	_CC2500_WriteCommand
  9320                           
  9321                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  9322  1393  0020               	movlb	0	; select bank0
  9323  1394  01A2               	clrf	setRF_RxStatus@command
  9324  1395  3001               	movlw	1
  9325  1396  31A7  27C6         	fcall	_setRF_RxStatus
  9326  1398  0008               	return
  9327  1399                     __end_of_CC2500_RxData:	
  9328                           
  9329                           	psect	text38
  9330  27C6                     __ptext38:	
  9331 ;; *************** function _setRF_RxStatus *****************
  9332 ;; Defined at:
  9333 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\RF_Control_B1.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  rf              1    wreg     unsigned char 
  9336 ;;  command         1    2[BANK0 ] unsigned char 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;  rf              1    3[BANK0 ] unsigned char 
  9339 ;; Return value:  Size  Location     Type
  9340 ;;		None               void
  9341 ;; Registers used:
  9342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9348 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;Total ram usage:        2 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    5
  9355 ;; This function calls:
  9356 ;;		_RfPointSelect
  9357 ;; This function is called by:
  9358 ;;		_CC2500_RxData
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           
  9363                           ;psect for function _setRF_RxStatus
  9364  27C6                     _setRF_RxStatus:	
  9365                           
  9366                           ;incstack = 0
  9367                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9368                           ;setRF_RxStatus@rf stored from wreg
  9369  27C6  0020               	movlb	0	; select bank0
  9370  27C7  00A3               	movwf	setRF_RxStatus@rf
  9371                           
  9372                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  9373  27C8  0823               	movf	setRF_RxStatus@rf,w
  9374  27C9  31A6  26E2         	fcall	_RfPointSelect
  9375                           
  9376                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  9377  27CB  087B               	movf	_RF,w
  9378  27CC  0086               	movwf	6
  9379  27CD  0187               	clrf	7
  9380  27CE  0020               	movlb	0	; select bank0
  9381  27CF  0822               	movf	setRF_RxStatus@command,w
  9382  27D0  1181               	bcf	1,3
  9383  27D1  1D03               	skipz
  9384  27D2  1581               	bsf	1,3
  9385  27D3  0008               	return
  9386  27D4                     __end_of_setRF_RxStatus:	
  9387                           
  9388                           	psect	text39
  9389  19D7                     __ptext39:	
  9390 ;; *************** function _CC2500_ReadStatus *****************
  9391 ;; Defined at:
  9392 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  status_addr     1    wreg     unsigned char 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;		None               void
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:        2 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    5
  9413 ;; This function calls:
  9414 ;;		_CC2500_ReadByte
  9415 ;;		_CC2500_WriteByte
  9416 ;; This function is called by:
  9417 ;;		_CC2500_RxData
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function _CC2500_ReadStatus
  9423  19D7                     _CC2500_ReadStatus:	
  9424                           
  9425                           ;incstack = 0
  9426                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9427                           ;CC2500_ReadStatus@status_addr stored from wreg
  9428  19D7  0020               	movlb	0	; select bank0
  9429  19D8  00A3               	movwf	CC2500_ReadStatus@status_addr
  9430                           
  9431                           ;CC2500_B1.c: 269: RC4=0;
  9432  19D9  120E               	bcf	14,4	;volatile
  9433                           
  9434                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  9435  19DA  0823               	movf	CC2500_ReadStatus@status_addr,w
  9436  19DB  3EC0               	addlw	192
  9437  19DC  00A2               	movwf	??_CC2500_ReadStatus
  9438  19DD  0822               	movf	??_CC2500_ReadStatus,w
  9439  19DE  0021               	movlb	1	; select bank1
  9440  19DF  00BF               	movwf	_SPI0Buffer^(0+128)
  9441  19E0                     l383:	
  9442                           ;CC2500_B1.c: 272: while(RC2==1);
  9443                           
  9444  19E0  0020               	movlb	0	; select bank0
  9445  19E1  190E               	btfsc	14,2	;volatile
  9446  19E2  29E0               	goto	l383
  9447                           
  9448                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  9449  19E3  3199  2171  3199   	fcall	_CC2500_WriteByte
  9450                           
  9451                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  9452  19E6  3187  27E3         	fcall	_CC2500_ReadByte
  9453                           
  9454                           ;CC2500_B1.c: 276: RC4=1;
  9455  19E8  0020               	movlb	0	; select bank0
  9456  19E9  160E               	bsf	14,4	;volatile
  9457                           
  9458                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  9459  19EA  0021               	movlb	1	; select bank1
  9460  19EB  083F               	movf	_SPI0Buffer^(0+128),w
  9461  19EC  0020               	movlb	0	; select bank0
  9462  19ED  00A2               	movwf	??_CC2500_ReadStatus
  9463  19EE  0822               	movf	??_CC2500_ReadStatus,w
  9464  19EF  0021               	movlb	1	; select bank1
  9465  19F0  00C3               	movwf	_s_data^(0+128)
  9466  19F1  0008               	return
  9467  19F2                     __end_of_CC2500_ReadStatus:	
  9468                           
  9469                           	psect	text40
  9470  07E3                     __ptext40:	
  9471 ;; *************** function _CC2500_ReadByte *****************
  9472 ;; Defined at:
  9473 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;		None
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9478 ;; Return value:  Size  Location     Type
  9479 ;;		None               void
  9480 ;; Registers used:
  9481 ;;		wreg, status,2, status,0
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;Total ram usage:        2 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    4
  9494 ;; This function calls:
  9495 ;;		Nothing
  9496 ;; This function is called by:
  9497 ;;		_CC2500_RxData
  9498 ;;		_CC2500_ReadStatus
  9499 ;;		_CC2500_ReadREG
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _CC2500_ReadByte
  9505  07E3                     _CC2500_ReadByte:	
  9506                           
  9507                           ;CC2500_B1.c: 212: unsigned char loop_b;
  9508                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  9509                           
  9510                           ;incstack = 0
  9511                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9512  07E3  0020               	movlb	0	; select bank0
  9513  07E4  01A1               	clrf	CC2500_ReadByte@loop_b
  9514  07E5                     L9:	
  9515  07E5  3008               	movlw	8
  9516  07E6  0221               	subwf	CC2500_ReadByte@loop_b,w
  9517  07E7  1803               	btfsc	3,0
  9518  07E8  0008               	return
  9519                           
  9520                           ;CC2500_B1.c: 214: {
  9521                           ;CC2500_B1.c: 215: RC1=1;
  9522  07E9  148E               	bsf	14,1	;volatile
  9523                           
  9524                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  9525  07EA  1003               	clrc
  9526  07EB  0021               	movlb	1	; select bank1
  9527  07EC  0DBF               	rlf	_SPI0Buffer^(0+128),f
  9528                           
  9529                           ;CC2500_B1.c: 217: if(RC2 == 1)
  9530  07ED  0020               	movlb	0	; select bank0
  9531  07EE  1D0E               	btfss	14,2	;volatile
  9532  07EF  2FF3               	goto	l6320
  9533                           
  9534                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  9535  07F0  0021               	movlb	1	; select bank1
  9536  07F1  143F               	bsf	_SPI0Buffer^(0+128),0
  9537  07F2  2FF9               	goto	l6322
  9538  07F3                     l6320:	
  9539                           
  9540                           ;CC2500_B1.c: 219: else
  9541                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  9542  07F3  30FE               	movlw	254
  9543  07F4  0020               	movlb	0	; select bank0
  9544  07F5  00A0               	movwf	??_CC2500_ReadByte
  9545  07F6  0820               	movf	??_CC2500_ReadByte,w
  9546  07F7  0021               	movlb	1	; select bank1
  9547  07F8  05BF               	andwf	_SPI0Buffer^(0+128),f
  9548  07F9                     l6322:	
  9549                           
  9550                           ;CC2500_B1.c: 221: RC1=0;
  9551  07F9  0020               	movlb	0	; select bank0
  9552  07FA  108E               	bcf	14,1	;volatile
  9553  07FB  3001               	movlw	1
  9554  07FC  00A0               	movwf	??_CC2500_ReadByte
  9555  07FD  0820               	movf	??_CC2500_ReadByte,w
  9556  07FE  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9557  07FF  2FE5               	goto	L9
  9558  0800                     __end_of_CC2500_ReadByte:	
  9559                           
  9560                           	psect	text41
  9561  2645                     __ptext41:	
  9562 ;; *************** function _RF_Initialization *****************
  9563 ;; Defined at:
  9564 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\RF_Control_B1.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;		None
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;		None
  9569 ;; Return value:  Size  Location     Type
  9570 ;;		None               void
  9571 ;; Registers used:
  9572 ;;		wreg, status,2, status,0, pclath, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;Total ram usage:        0 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    5
  9585 ;; This function calls:
  9586 ;;		_setRF_Initialization
  9587 ;; This function is called by:
  9588 ;;		_main
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           
  9593                           ;psect for function _RF_Initialization
  9594  2645                     _RF_Initialization:	
  9595                           
  9596                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  9597                           
  9598                           ;incstack = 0
  9599                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9600  2645  3001               	movlw	1
  9601  2646  3188  2000         	fcall	_setRF_Initialization
  9602  2648  0008               	return
  9603  2649                     __end_of_RF_Initialization:	
  9604                           
  9605                           	psect	text42
  9606  0800                     __ptext42:	
  9607 ;; *************** function _setRF_Initialization *****************
  9608 ;; Defined at:
  9609 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\RF_Control_B1.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;  rf              1    wreg     unsigned char 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  rf              1    0[COMMON] unsigned char 
  9614 ;; Return value:  Size  Location     Type
  9615 ;;		None               void
  9616 ;; Registers used:
  9617 ;;		wreg
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;Total ram usage:        1 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    4
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_RF_Initialization
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           
  9638                           ;psect for function _setRF_Initialization
  9639  0800                     _setRF_Initialization:	
  9640                           
  9641                           ;RF_Control_B1.c: 54: Tx_Length=21;
  9642                           
  9643                           ;incstack = 0
  9644                           ; Regs used in _setRF_Initialization: [wreg]
  9645  0800  3015               	movlw	21
  9646  0801  0020               	movlb	0	; select bank0
  9647  0802  00A0               	movwf	??_setRF_Initialization
  9648  0803  0820               	movf	??_setRF_Initialization,w
  9649  0804  0021               	movlb	1	; select bank1
  9650  0805  00C0               	movwf	_Tx_Length^(0+128)
  9651  0806  0008               	return
  9652  0807                     __end_of_setRF_Initialization:	
  9653                           
  9654                           	psect	text43
  9655  2628                     __ptext43:	
  9656 ;; *************** function _PowerFault_Main *****************
  9657 ;; Defined at:
  9658 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\PowerFault_B1.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;		None
  9663 ;; Return value:  Size  Location     Type
  9664 ;;		None               void
  9665 ;; Registers used:
  9666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:   10
  9679 ;; This function calls:
  9680 ;;		_setPowerFault_Main
  9681 ;; This function is called by:
  9682 ;;		_main
  9683 ;; This function uses a non-reentrant model
  9684 ;;
  9685                           
  9686                           
  9687                           ;psect for function _PowerFault_Main
  9688  2628                     _PowerFault_Main:	
  9689                           
  9690                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9691                           
  9692                           ;incstack = 0
  9693                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9694  2628  318D  2521         	fcall	_setPowerFault_Main
  9695  262A  0008               	return
  9696  262B                     __end_of_PowerFault_Main:	
  9697                           
  9698                           	psect	text44
  9699  0D21                     __ptext44:	
  9700 ;; *************** function _setPowerFault_Main *****************
  9701 ;; Defined at:
  9702 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\PowerFault_B1.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;		None
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;		None
  9707 ;; Return value:  Size  Location     Type
  9708 ;;		None               void
  9709 ;; Registers used:
  9710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : 0/0
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;Total ram usage:        2 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    9
  9723 ;; This function calls:
  9724 ;;		_getLoad_Safe
  9725 ;;		_getTemp_Safe
  9726 ;;		_setPowerFault_Exceptions
  9727 ;; This function is called by:
  9728 ;;		_PowerFault_Main
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           
  9733                           ;psect for function _setPowerFault_Main
  9734  0D21                     _setPowerFault_Main:	
  9735                           
  9736                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9737                           
  9738                           ;incstack = 0
  9739                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9740  0D21  087A               	movf	_PF,w
  9741  0D22  0086               	movwf	6
  9742  0D23  0187               	clrf	7
  9743  0D24  1C01               	btfss	1,0
  9744  0D25  0008               	return
  9745                           
  9746                           ;PowerFault_B1.c: 64: {
  9747                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9748  0D26  087A               	movf	_PF,w
  9749  0D27  0086               	movwf	6
  9750  0D28  0187               	clrf	7
  9751  0D29  1981               	btfsc	1,3
  9752  0D2A  2D69               	goto	l8986
  9753                           
  9754                           ;PowerFault_B1.c: 66: {
  9755                           ;PowerFault_B1.c: 67: PF->Time++;
  9756  0D2B  087A               	movf	_PF,w
  9757  0D2C  3E06               	addlw	6
  9758  0D2D  0086               	movwf	6
  9759  0D2E  0187               	clrf	7
  9760  0D2F  3001               	movlw	1
  9761  0D30  0781               	addwf	1,f
  9762  0D31  3141               	addfsr 1,1
  9763  0D32  1803               	skipnc
  9764  0D33  0A81               	incf	1,f
  9765                           
  9766                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9767  0D34  087A               	movf	_PF,w
  9768  0D35  3E06               	addlw	6
  9769  0D36  0086               	movwf	6
  9770  0D37  0187               	clrf	7
  9771  0D38  3F40               	moviw [0]fsr1
  9772  0D39  0020               	movlb	0	; select bank0
  9773  0D3A  00AD               	movwf	??_setPowerFault_Main
  9774  0D3B  3F41               	moviw [1]fsr1
  9775  0D3C  00AE               	movwf	??_setPowerFault_Main+1
  9776  0D3D  3002               	movlw	2
  9777  0D3E  022E               	subwf	??_setPowerFault_Main+1,w
  9778  0D3F  30BC               	movlw	188
  9779  0D40  1903               	skipnz
  9780  0D41  022D               	subwf	??_setPowerFault_Main,w
  9781  0D42  1C03               	skipc
  9782  0D43  0008               	return
  9783                           
  9784                           ;PowerFault_B1.c: 69: {
  9785                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9786  0D44  31A7  2703  318D   	fcall	_getLoad_Safe
  9787  0D47  3A00               	xorlw	0
  9788  0D48  1903               	skipnz
  9789  0D49  2D60               	goto	l8984
  9790  0D4A  31A6  2679  318D   	fcall	_getTemp_Safe
  9791  0D4D  3A00               	xorlw	0
  9792  0D4E  1903               	skipnz
  9793  0D4F  2D60               	goto	l8984
  9794                           
  9795                           ;PowerFault_B1.c: 71: {
  9796                           ;PowerFault_B1.c: 72: PF->Time=0;
  9797  0D50  087A               	movf	_PF,w
  9798  0D51  3E06               	addlw	6
  9799  0D52  0086               	movwf	6
  9800  0D53  0187               	clrf	7
  9801  0D54  3000               	movlw	0
  9802  0D55  3FC0               	movwi [0]fsr1
  9803  0D56  3FC1               	movwi [1]fsr1
  9804                           
  9805                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9806  0D57  087A               	movf	_PF,w
  9807  0D58  0086               	movwf	6
  9808  0D59  0187               	clrf	7
  9809  0D5A  1581               	bsf	1,3
  9810                           
  9811                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9812  0D5B  087A               	movf	_PF,w
  9813  0D5C  0086               	movwf	6
  9814  0D5D  0187               	clrf	7
  9815  0D5E  1101               	bcf	1,2
  9816                           
  9817                           ;PowerFault_B1.c: 75: }
  9818  0D5F  0008               	return
  9819  0D60                     l8984:	
  9820                           
  9821                           ;PowerFault_B1.c: 76: else
  9822                           ;PowerFault_B1.c: 77: {
  9823                           ;PowerFault_B1.c: 78: PF->Time=700;
  9824  0D60  087A               	movf	_PF,w
  9825  0D61  3E06               	addlw	6
  9826  0D62  0086               	movwf	6
  9827  0D63  0187               	clrf	7
  9828  0D64  30BC               	movlw	188
  9829  0D65  3FC0               	movwi [0]fsr1
  9830  0D66  3002               	movlw	2
  9831  0D67  3FC1               	movwi [1]fsr1
  9832                           
  9833                           ;PowerFault_B1.c: 79: }
  9834                           ;PowerFault_B1.c: 80: }
  9835                           ;PowerFault_B1.c: 81: }
  9836  0D68  0008               	return
  9837  0D69                     l8986:	
  9838                           
  9839                           ;PowerFault_B1.c: 82: else
  9840                           ;PowerFault_B1.c: 83: {
  9841                           ;PowerFault_B1.c: 84: PF->Time++;
  9842  0D69  087A               	movf	_PF,w
  9843  0D6A  3E06               	addlw	6
  9844  0D6B  0086               	movwf	6
  9845  0D6C  0187               	clrf	7
  9846  0D6D  3001               	movlw	1
  9847  0D6E  0781               	addwf	1,f
  9848  0D6F  3141               	addfsr 1,1
  9849  0D70  1803               	skipnc
  9850  0D71  0A81               	incf	1,f
  9851                           
  9852                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9853  0D72  087A               	movf	_PF,w
  9854  0D73  3E06               	addlw	6
  9855  0D74  0086               	movwf	6
  9856  0D75  0187               	clrf	7
  9857  0D76  3F40               	moviw [0]fsr1
  9858  0D77  0020               	movlb	0	; select bank0
  9859  0D78  00AD               	movwf	??_setPowerFault_Main
  9860  0D79  3F41               	moviw [1]fsr1
  9861  0D7A  00AE               	movwf	??_setPowerFault_Main+1
  9862  0D7B  3000               	movlw	0
  9863  0D7C  022E               	subwf	??_setPowerFault_Main+1,w
  9864  0D7D  3002               	movlw	2
  9865  0D7E  1903               	skipnz
  9866  0D7F  022D               	subwf	??_setPowerFault_Main,w
  9867  0D80  1C03               	skipc
  9868  0D81  0008               	return
  9869                           
  9870                           ;PowerFault_B1.c: 86: {
  9871                           ;PowerFault_B1.c: 87: PF->Time=0;
  9872  0D82  087A               	movf	_PF,w
  9873  0D83  3E06               	addlw	6
  9874  0D84  0086               	movwf	6
  9875  0D85  0187               	clrf	7
  9876  0D86  3000               	movlw	0
  9877  0D87  3FC0               	movwi [0]fsr1
  9878  0D88  3FC1               	movwi [1]fsr1
  9879                           
  9880                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9881  0D89  087A               	movf	_PF,w
  9882  0D8A  0086               	movwf	6
  9883  0D8B  0187               	clrf	7
  9884  0D8C  1181               	bcf	1,3
  9885                           
  9886                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9887  0D8D  087A               	movf	_PF,w
  9888  0D8E  0086               	movwf	6
  9889  0D8F  0187               	clrf	7
  9890  0D90  1C81               	btfss	1,1
  9891  0D91  2DC8               	goto	l9006
  9892                           
  9893                           ;PowerFault_B1.c: 91: {
  9894                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9895  0D92  0A7A               	incf	_PF,w
  9896  0D93  0086               	movwf	6
  9897  0D94  0187               	clrf	7
  9898  0D95  3F40               	moviw [0]fsr1
  9899  0D96  00AD               	movwf	??_setPowerFault_Main
  9900  0D97  3F41               	moviw [1]fsr1
  9901  0D98  00AE               	movwf	??_setPowerFault_Main+1
  9902  0D99  3001               	movlw	1
  9903  0D9A  022E               	subwf	??_setPowerFault_Main+1,w
  9904  0D9B  3091               	movlw	145
  9905  0D9C  1903               	skipnz
  9906  0D9D  022D               	subwf	??_setPowerFault_Main,w
  9907  0D9E  1803               	skipnc
  9908  0D9F  2DFF               	goto	l9018
  9909  0DA0  0A7A               	incf	_PF,w
  9910  0DA1  0086               	movwf	6
  9911  0DA2  0187               	clrf	7
  9912  0DA3  3F40               	moviw [0]fsr1
  9913  0DA4  00AD               	movwf	??_setPowerFault_Main
  9914  0DA5  3F41               	moviw [1]fsr1
  9915  0DA6  00AE               	movwf	??_setPowerFault_Main+1
  9916  0DA7  3000               	movlw	0
  9917  0DA8  022E               	subwf	??_setPowerFault_Main+1,w
  9918  0DA9  30C8               	movlw	200
  9919  0DAA  1903               	skipnz
  9920  0DAB  022D               	subwf	??_setPowerFault_Main,w
  9921  0DAC  1C03               	skipc
  9922  0DAD  2DFF               	goto	l9018
  9923                           
  9924                           ;PowerFault_B1.c: 93: {
  9925                           ;PowerFault_B1.c: 94: PF->Count++;
  9926  0DAE  3001               	movlw	1
  9927  0DAF  00AD               	movwf	??_setPowerFault_Main
  9928  0DB0  087A               	movf	_PF,w
  9929  0DB1  3E05               	addlw	5
  9930  0DB2  0086               	movwf	6
  9931  0DB3  0187               	clrf	7
  9932  0DB4  082D               	movf	??_setPowerFault_Main,w
  9933  0DB5  0781               	addwf	1,f
  9934                           
  9935                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  9936  0DB6  087A               	movf	_PF,w
  9937  0DB7  3E05               	addlw	5
  9938  0DB8  0086               	movwf	6
  9939  0DB9  0187               	clrf	7
  9940  0DBA  3002               	movlw	2
  9941  0DBB  0201               	subwf	1,w
  9942  0DBC  1C03               	skipc
  9943  0DBD  2E04               	goto	l9020
  9944                           
  9945                           ;PowerFault_B1.c: 96: {
  9946                           ;PowerFault_B1.c: 97: PF->Count=0;
  9947  0DBE  087A               	movf	_PF,w
  9948  0DBF  3E05               	addlw	5
  9949  0DC0  0086               	movwf	6
  9950  0DC1  0187               	clrf	7
  9951  0DC2  0181               	clrf	1
  9952                           
  9953                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  9954  0DC3  3000               	movlw	0
  9955  0DC4  319D  25E5  318D   	fcall	_setPowerFault_Exceptions
  9956                           
  9957                           ;PowerFault_B1.c: 99: }
  9958                           ;PowerFault_B1.c: 100: }
  9959  0DC7  2E04               	goto	l9020
  9960  0DC8                     l9006:	
  9961                           ;PowerFault_B1.c: 104: }
  9962                           ;PowerFault_B1.c: 105: }
  9963                           
  9964                           ;PowerFault_B1.c: 101: else
  9965                           ;PowerFault_B1.c: 102: {
  9966                           ;PowerFault_B1.c: 103: PF->Count=0;
  9967                           
  9968                           
  9969                           ;PowerFault_B1.c: 106: else
  9970                           ;PowerFault_B1.c: 107: {
  9971                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
  9972  0DC8  0A7A               	incf	_PF,w
  9973  0DC9  0086               	movwf	6
  9974  0DCA  0187               	clrf	7
  9975  0DCB  3F40               	moviw [0]fsr1
  9976  0DCC  0020               	movlb	0	; select bank0
  9977  0DCD  00AD               	movwf	??_setPowerFault_Main
  9978  0DCE  3F41               	moviw [1]fsr1
  9979  0DCF  00AE               	movwf	??_setPowerFault_Main+1
  9980  0DD0  3001               	movlw	1
  9981  0DD1  022E               	subwf	??_setPowerFault_Main+1,w
  9982  0DD2  3090               	movlw	144
  9983  0DD3  1903               	skipnz
  9984  0DD4  022D               	subwf	??_setPowerFault_Main,w
  9985  0DD5  1803               	skipnc
  9986  0DD6  2DE5               	goto	l9010
  9987  0DD7  0A7A               	incf	_PF,w
  9988  0DD8  0086               	movwf	6
  9989  0DD9  0187               	clrf	7
  9990  0DDA  3F40               	moviw [0]fsr1
  9991  0DDB  00AD               	movwf	??_setPowerFault_Main
  9992  0DDC  3F41               	moviw [1]fsr1
  9993  0DDD  00AE               	movwf	??_setPowerFault_Main+1
  9994  0DDE  3000               	movlw	0
  9995  0DDF  022E               	subwf	??_setPowerFault_Main+1,w
  9996  0DE0  30D3               	movlw	211
  9997  0DE1  1903               	skipnz
  9998  0DE2  022D               	subwf	??_setPowerFault_Main,w
  9999  0DE3  1803               	skipnc
 10000  0DE4  2DFF               	goto	l9018
 10001  0DE5                     l9010:	
 10002                           
 10003                           ;PowerFault_B1.c: 109: {
 10004                           ;PowerFault_B1.c: 110: PF->Count++;
 10005  0DE5  3001               	movlw	1
 10006  0DE6  00AD               	movwf	??_setPowerFault_Main
 10007  0DE7  087A               	movf	_PF,w
 10008  0DE8  3E05               	addlw	5
 10009  0DE9  0086               	movwf	6
 10010  0DEA  0187               	clrf	7
 10011  0DEB  082D               	movf	??_setPowerFault_Main,w
 10012  0DEC  0781               	addwf	1,f
 10013                           
 10014                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10015  0DED  087A               	movf	_PF,w
 10016  0DEE  3E05               	addlw	5
 10017  0DEF  0086               	movwf	6
 10018  0DF0  0187               	clrf	7
 10019  0DF1  3002               	movlw	2
 10020  0DF2  0201               	subwf	1,w
 10021  0DF3  1C03               	skipc
 10022  0DF4  2E04               	goto	l9020
 10023                           
 10024                           ;PowerFault_B1.c: 112: {
 10025                           ;PowerFault_B1.c: 113: PF->Count=0;
 10026  0DF5  087A               	movf	_PF,w
 10027  0DF6  3E05               	addlw	5
 10028  0DF7  0086               	movwf	6
 10029  0DF8  0187               	clrf	7
 10030  0DF9  0181               	clrf	1
 10031                           
 10032                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10033  0DFA  3001               	movlw	1
 10034  0DFB  319D  25E5  318D   	fcall	_setPowerFault_Exceptions
 10035                           
 10036                           ;PowerFault_B1.c: 115: }
 10037                           ;PowerFault_B1.c: 116: }
 10038  0DFE  2E04               	goto	l9020
 10039  0DFF                     l9018:	
 10040                           
 10041                           ;PowerFault_B1.c: 117: else
 10042                           ;PowerFault_B1.c: 118: {
 10043                           ;PowerFault_B1.c: 119: PF->Count=0;
 10044  0DFF  087A               	movf	_PF,w
 10045  0E00  3E05               	addlw	5
 10046  0E01  0086               	movwf	6
 10047  0E02  0187               	clrf	7
 10048  0E03  0181               	clrf	1
 10049  0E04                     l9020:	
 10050                           
 10051                           ;PowerFault_B1.c: 120: }
 10052                           ;PowerFault_B1.c: 122: }
 10053                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10054  0E04  087A               	movf	_PF,w
 10055  0E05  0086               	movwf	6
 10056  0E06  0187               	clrf	7
 10057  0E07  1881               	btfsc	1,1
 10058  0E08  2E0D               	goto	l2304
 10059                           
 10060                           ;PowerFault_B1.c: 124: {
 10061                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10062  0E09  087A               	movf	_PF,w
 10063  0E0A  0086               	movwf	6
 10064  0E0B  0187               	clrf	7
 10065  0E0C  1501               	bsf	1,2
 10066  0E0D                     l2304:	
 10067                           
 10068                           ;PowerFault_B1.c: 126: }
 10069                           ;PowerFault_B1.c: 127: PF->AD=0;
 10070  0E0D  0A7A               	incf	_PF,w
 10071  0E0E  0086               	movwf	6
 10072  0E0F  0187               	clrf	7
 10073  0E10  3000               	movlw	0
 10074  0E11  3FC0               	movwi [0]fsr1
 10075  0E12  3FC1               	movwi [1]fsr1
 10076  0E13  0008               	return
 10077  0E14                     __end_of_setPowerFault_Main:	
 10078                           
 10079                           	psect	text45
 10080  1DE5                     __ptext45:	
 10081 ;; *************** function _setPowerFault_Exceptions *****************
 10082 ;; Defined at:
 10083 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\PowerFault_B1.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;  command         1    wreg     unsigned char 
 10086 ;; Auto vars:     Size  Location     Type
 10087 ;;  command         1   12[BANK0 ] unsigned char 
 10088 ;; Return value:  Size  Location     Type
 10089 ;;		None               void
 10090 ;; Registers used:
 10091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10092 ;; Tracked objects:
 10093 ;;		On entry : 0/0
 10094 ;;		On exit  : 0/0
 10095 ;;		Unchanged: 0/0
 10096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;Total ram usage:        2 bytes
 10102 ;; Hardware stack levels used:    1
 10103 ;; Hardware stack levels required when called:    8
 10104 ;; This function calls:
 10105 ;;		_DimmerLights_Exceptions
 10106 ;;		_setLED
 10107 ;;		_setRF_Enable
 10108 ;;		_setSw_Enable
 10109 ;; This function is called by:
 10110 ;;		_setPowerFault_Main
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           
 10115                           ;psect for function _setPowerFault_Exceptions
 10116  1DE5                     _setPowerFault_Exceptions:	
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10120                           ;setPowerFault_Exceptions@command stored from wreg
 10121  1DE5  0020               	movlb	0	; select bank0
 10122  1DE6  00AC               	movwf	setPowerFault_Exceptions@command
 10123                           
 10124                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10125  1DE7  087A               	movf	_PF,w
 10126  1DE8  0086               	movwf	6
 10127  1DE9  0187               	clrf	7
 10128  1DEA  082C               	movf	setPowerFault_Exceptions@command,w
 10129  1DEB  1081               	bcf	1,1
 10130  1DEC  1D03               	skipz
 10131  1DED  1481               	bsf	1,1
 10132                           
 10133                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10134  1DEE  092C               	comf	setPowerFault_Exceptions@command,w
 10135  1DEF  3901               	andlw	1
 10136  1DF0  00AB               	movwf	??_setPowerFault_Exceptions
 10137  1DF1  087A               	movf	_PF,w
 10138  1DF2  0086               	movwf	6
 10139  1DF3  0187               	clrf	7
 10140  1DF4  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10141  1DF5  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10142  1DF6  0801               	movf	1,w
 10143  1DF7  062B               	xorwf	??_setPowerFault_Exceptions,w
 10144  1DF8  39FB               	andlw	-5
 10145  1DF9  062B               	xorwf	??_setPowerFault_Exceptions,w
 10146  1DFA  0081               	movwf	1
 10147                           
 10148                           ;PowerFault_B1.c: 137: if(command == 1)
 10149  1DFB  082C               	movf	setPowerFault_Exceptions@command,w
 10150  1DFC  3A01               	xorlw	1
 10151  1DFD  1D03               	skipz
 10152  1DFE  2E0A               	goto	l2308
 10153                           
 10154                           ;PowerFault_B1.c: 138: {
 10155                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10156  1DFF  3003               	movlw	3
 10157  1E00  3191  2165  319D   	fcall	_DimmerLights_Exceptions
 10158                           
 10159                           ;PowerFault_B1.c: 141: setLED(2,1);
 10160  1E03  0020               	movlb	0	; select bank0
 10161  1E04  01A2               	clrf	setLED@command
 10162  1E05  0AA2               	incf	setLED@command,f
 10163  1E06  3002               	movlw	2
 10164  1E07  3192  2276  319D   	fcall	_setLED
 10165  1E0A                     l2308:	
 10166                           
 10167                           ;PowerFault_B1.c: 143: }
 10168                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10169  1E0A  0020               	movlb	0	; select bank0
 10170  1E0B  082C               	movf	setPowerFault_Exceptions@command,w
 10171  1E0C  3E0A               	addlw	10
 10172  1E0D  00AB               	movwf	??_setPowerFault_Exceptions
 10173  1E0E  082B               	movf	??_setPowerFault_Exceptions,w
 10174  1E0F  00A2               	movwf	setLED@command
 10175  1E10  3063               	movlw	99
 10176  1E11  3192  2276  319D   	fcall	_setLED
 10177                           
 10178                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10179  1E14  0020               	movlb	0	; select bank0
 10180  1E15  092C               	comf	setPowerFault_Exceptions@command,w
 10181  1E16  3901               	andlw	1
 10182  1E17  3198  2079  319D   	fcall	_setSw_Enable
 10183                           
 10184                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10185  1E1A  0020               	movlb	0	; select bank0
 10186  1E1B  092C               	comf	setPowerFault_Exceptions@command,w
 10187  1E1C  3901               	andlw	1
 10188  1E1D  00AB               	movwf	??_setPowerFault_Exceptions
 10189  1E1E  082B               	movf	??_setPowerFault_Exceptions,w
 10190  1E1F  00A2               	movwf	setRF_Enable@command
 10191  1E20  3001               	movlw	1
 10192  1E21  319B  2399         	fcall	_setRF_Enable
 10193  1E23  0008               	return
 10194  1E24                     __end_of_setPowerFault_Exceptions:	
 10195                           
 10196                           	psect	text46
 10197  2703                     __ptext46:	
 10198 ;; *************** function _getLoad_Safe *****************
 10199 ;; Defined at:
 10200 ;;		line 301 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;		None
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;		None
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  1    wreg      unsigned char 
 10207 ;; Registers used:
 10208 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;Total ram usage:        1 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    4
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_setTemp_Main
 10225 ;;		_setPowerFault_Main
 10226 ;; This function uses a non-reentrant model
 10227 ;;
 10228                           
 10229                           
 10230                           ;psect for function _getLoad_Safe
 10231  2703                     _getLoad_Safe:	
 10232                           
 10233                           ;OverLoad_B1.c: 303: return Load->Safe;
 10234                           
 10235                           ;incstack = 0
 10236                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10237  2703  0020               	movlb	0	; select bank0
 10238  2704  086E               	movf	_Load,w
 10239  2705  0086               	movwf	6
 10240  2706  3002               	movlw	2	; select bank4/5
 10241  2707  0087               	movwf	7
 10242  2708  0C01               	rrf	1,w
 10243  2709  00A0               	movwf	??_getLoad_Safe
 10244  270A  0CA0               	rrf	??_getLoad_Safe,f
 10245  270B  0C20               	rrf	??_getLoad_Safe,w
 10246  270C  3901               	andlw	1
 10247  270D  0008               	return
 10248  270E                     __end_of_getLoad_Safe:	
 10249                           
 10250                           	psect	text47
 10251  2625                     __ptext47:	
 10252 ;; *************** function _PowerFault_Initialization *****************
 10253 ;; Defined at:
 10254 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\PowerFault_B1.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;		None
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;		None
 10259 ;; Return value:  Size  Location     Type
 10260 ;;		None               void
 10261 ;; Registers used:
 10262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;Total ram usage:        0 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    5
 10275 ;; This function calls:
 10276 ;;		_setPowerFault_Initialization
 10277 ;; This function is called by:
 10278 ;;		_main
 10279 ;; This function uses a non-reentrant model
 10280 ;;
 10281                           
 10282                           
 10283                           ;psect for function _PowerFault_Initialization
 10284  2625                     _PowerFault_Initialization:	
 10285                           
 10286                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10287                           
 10288                           ;incstack = 0
 10289                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10290  2625  31A7  27B8         	fcall	_setPowerFault_Initialization
 10291  2627  0008               	return
 10292  2628                     __end_of_PowerFault_Initialization:	
 10293                           
 10294                           	psect	text48
 10295  27B8                     __ptext48:	
 10296 ;; *************** function _setPowerFault_Initialization *****************
 10297 ;; Defined at:
 10298 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\PowerFault_B1.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;		None
 10301 ;; Auto vars:     Size  Location     Type
 10302 ;;		None
 10303 ;; Return value:  Size  Location     Type
 10304 ;;		None               void
 10305 ;; Registers used:
 10306 ;;		wreg, fsr1l, fsr1h
 10307 ;; Tracked objects:
 10308 ;;		On entry : 0/0
 10309 ;;		On exit  : 0/0
 10310 ;;		Unchanged: 0/0
 10311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;Total ram usage:        1 bytes
 10317 ;; Hardware stack levels used:    1
 10318 ;; Hardware stack levels required when called:    4
 10319 ;; This function calls:
 10320 ;;		Nothing
 10321 ;; This function is called by:
 10322 ;;		_PowerFault_Initialization
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           
 10327                           ;psect for function _setPowerFault_Initialization
 10328  27B8                     _setPowerFault_Initialization:	
 10329                           
 10330                           ;PowerFault_B1.c: 31: PF=&PF1;
 10331                           
 10332                           ;incstack = 0
 10333                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10334  27B8  30C4               	movlw	_PF1& (0+255)
 10335  27B9  0020               	movlb	0	; select bank0
 10336  27BA  00A0               	movwf	??_setPowerFault_Initialization
 10337  27BB  0820               	movf	??_setPowerFault_Initialization,w
 10338  27BC  00FA               	movwf	_PF
 10339                           
 10340                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10341  27BD  087A               	movf	_PF,w
 10342  27BE  0086               	movwf	6
 10343  27BF  0187               	clrf	7
 10344  27C0  1401               	bsf	1,0
 10345                           
 10346                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10347  27C1  087A               	movf	_PF,w
 10348  27C2  0086               	movwf	6
 10349  27C3  0187               	clrf	7
 10350  27C4  1501               	bsf	1,2
 10351  27C5  0008               	return
 10352  27C6                     __end_of_setPowerFault_Initialization:	
 10353                           
 10354                           	psect	text49
 10355  1959                     __ptext49:	
 10356 ;; *************** function _Mcu_Initialization *****************
 10357 ;; Defined at:
 10358 ;;		line 11 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\MCU_16f1518_B1.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;		None               void
 10365 ;; Registers used:
 10366 ;;		wreg, status,2, status,0, pclath, cstack
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;Total ram usage:        1 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    5
 10379 ;; This function calls:
 10380 ;;		_ADC_Set
 10381 ;;		_INT_Set
 10382 ;;		_IOC_Set
 10383 ;;		_IO_Set
 10384 ;;		_TMR0_Set
 10385 ;; This function is called by:
 10386 ;;		_main
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function _Mcu_Initialization
 10392  1959                     _Mcu_Initialization:	
 10393                           
 10394                           ;MCU_16f1518_B1.c: 14: OSCCON=0x78; ;;
 10395                           
 10396                           ;incstack = 0
 10397                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10398  1959  3078               	movlw	120
 10399  195A  0021               	movlb	1	; select bank1
 10400  195B  0099               	movwf	25	;volatile
 10401                           
 10402                           ;MCU_16f1518_B1.c: 16: IO_Set();
 10403  195C  3190  2001  3199   	fcall	_IO_Set
 10404                           
 10405                           ;MCU_16f1518_B1.c: 18: TMR0_Set();
 10406  195F  31A7  27AB  3199   	fcall	_TMR0_Set
 10407                           
 10408                           ;MCU_16f1518_B1.c: 20: ;;
 10409                           ;MCU_16f1518_B1.c: 22: ADC_Set();
 10410  1962  31A6  2680  3199   	fcall	_ADC_Set
 10411                           
 10412                           ;MCU_16f1518_B1.c: 26: INT_Set();
 10413  1965  31A6  2652  3199   	fcall	_INT_Set
 10414                           
 10415                           ;MCU_16f1518_B1.c: 28: IOC_Set();
 10416  1968  31A7  279E         	fcall	_IOC_Set
 10417                           
 10418                           ;MCU_16f1518_B1.c: 30: ;;
 10419                           ;MCU_16f1518_B1.c: 32: ;;
 10420                           ;MCU_16f1518_B1.c: 34: Memory=&VarMemory;
 10421  196A  30A0               	movlw	_VarMemory& (0+255)
 10422  196B  0020               	movlb	0	; select bank0
 10423  196C  00A1               	movwf	??_Mcu_Initialization
 10424  196D  0821               	movf	??_Mcu_Initialization,w
 10425  196E  0021               	movlb	1	; select bank1
 10426  196F  00EA               	movwf	_Memory^(0+128)
 10427  1970  0008               	return
 10428  1971                     __end_of_Mcu_Initialization:	
 10429                           
 10430                           	psect	text50
 10431  27AB                     __ptext50:	
 10432 ;; *************** function _TMR0_Set *****************
 10433 ;; Defined at:
 10434 ;;		line 73 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\MCU_16f1518_B1.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;		None
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;		None
 10439 ;; Return value:  Size  Location     Type
 10440 ;;		None               void
 10441 ;; Registers used:
 10442 ;;		wreg, status,2
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;Total ram usage:        1 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    4
 10455 ;; This function calls:
 10456 ;;		Nothing
 10457 ;; This function is called by:
 10458 ;;		_Mcu_Initialization
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _TMR0_Set
 10464  27AB                     _TMR0_Set:	
 10465                           
 10466                           ;MCU_16f1518_B1.c: 75: Timer0=&VarTimer0;
 10467                           
 10468                           ;incstack = 0
 10469                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10470  27AB  30CC               	movlw	_VarTimer0& (0+255)
 10471  27AC  0020               	movlb	0	; select bank0
 10472  27AD  00A0               	movwf	??_TMR0_Set
 10473  27AE  0820               	movf	??_TMR0_Set,w
 10474  27AF  0021               	movlb	1	; select bank1
 10475  27B0  00EB               	movwf	_Timer0^(0+128)
 10476                           
 10477                           ;MCU_16f1518_B1.c: 76: OPTION_REG=0x00;
 10478  27B1  0195               	clrf	21	;volatile
 10479                           
 10480                           ;MCU_16f1518_B1.c: 77: TMR0=(256-90);
 10481  27B2  30A6               	movlw	166
 10482  27B3  0020               	movlb	0	; select bank0
 10483  27B4  0095               	movwf	21	;volatile
 10484                           
 10485                           ;MCU_16f1518_B1.c: 78: TMR0IE=1;
 10486  27B5  168B               	bsf	11,5	;volatile
 10487                           
 10488                           ;MCU_16f1518_B1.c: 79: GIE=1;
 10489  27B6  178B               	bsf	11,7	;volatile
 10490  27B7  0008               	return
 10491  27B8                     __end_of_TMR0_Set:	
 10492                           
 10493                           	psect	text51
 10494  1001                     __ptext51:	
 10495 ;; *************** function _IO_Set *****************
 10496 ;; Defined at:
 10497 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\MCU_16f1518_B1.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;		None
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;		None               void
 10504 ;; Registers used:
 10505 ;;		wreg, status,2
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;Total ram usage:        0 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:    4
 10518 ;; This function calls:
 10519 ;;		Nothing
 10520 ;; This function is called by:
 10521 ;;		_Mcu_Initialization
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           
 10526                           ;psect for function _IO_Set
 10527  1001                     _IO_Set:	
 10528                           
 10529                           ;MCU_16f1518_B1.c: 39: TRISA=0b01110111;;
 10530                           
 10531                           ;incstack = 0
 10532                           ; Regs used in _IO_Set: [wreg+status,2]
 10533  1001  3077               	movlw	119
 10534  1002  0021               	movlb	1	; select bank1
 10535  1003  008C               	movwf	12	;volatile
 10536                           
 10537                           ;MCU_16f1518_B1.c: 40: TRISB=0b00000111;;
 10538  1004  3007               	movlw	7
 10539  1005  008D               	movwf	13	;volatile
 10540                           
 10541                           ;MCU_16f1518_B1.c: 41: TRISC=0b00001100;;
 10542  1006  300C               	movlw	12
 10543  1007  008E               	movwf	14	;volatile
 10544                           
 10545                           ;MCU_16f1518_B1.c: 42: LATA=0b00000000;;
 10546  1008  0022               	movlb	2	; select bank2
 10547  1009  018C               	clrf	12	;volatile
 10548                           
 10549                           ;MCU_16f1518_B1.c: 43: LATB=0b00000010;;
 10550  100A  3002               	movlw	2
 10551  100B  008D               	movwf	13	;volatile
 10552                           
 10553                           ;MCU_16f1518_B1.c: 44: LATC=0b00000000;;
 10554  100C  018E               	clrf	14	;volatile
 10555                           
 10556                           ;MCU_16f1518_B1.c: 45: ANSELA=0b00100010;;
 10557  100D  3022               	movlw	34
 10558  100E  0023               	movlb	3	; select bank3
 10559  100F  008C               	movwf	12	;volatile
 10560                           
 10561                           ;MCU_16f1518_B1.c: 46: ANSELB=0b00000000;;
 10562  1010  018D               	clrf	13	;volatile
 10563                           
 10564                           ;MCU_16f1518_B1.c: 47: ANSELC=0b00000000;;
 10565  1011  018E               	clrf	14	;volatile
 10566                           
 10567                           ;MCU_16f1518_B1.c: 48: PORTA=0b01110111;;
 10568  1012  3077               	movlw	119
 10569  1013  0020               	movlb	0	; select bank0
 10570  1014  008C               	movwf	12	;volatile
 10571                           
 10572                           ;MCU_16f1518_B1.c: 49: PORTB=0b00000111;;
 10573  1015  3007               	movlw	7
 10574  1016  008D               	movwf	13	;volatile
 10575                           
 10576                           ;MCU_16f1518_B1.c: 50: PORTC=0b00001100;;
 10577  1017  300C               	movlw	12
 10578  1018  008E               	movwf	14	;volatile
 10579  1019  0008               	return
 10580  101A                     __end_of_IO_Set:	
 10581                           
 10582                           	psect	text52
 10583  279E                     __ptext52:	
 10584 ;; *************** function _IOC_Set *****************
 10585 ;; Defined at:
 10586 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;		None               void
 10593 ;; Registers used:
 10594 ;;		wreg, status,2
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:        0 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    4
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_Mcu_Initialization
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function _IOC_Set
 10616  279E                     _IOC_Set:	
 10617                           
 10618                           ;MCU_16f1518_B1.c: 248: WPUB2=0;
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in _IOC_Set: [wreg+status,2]
 10622  279E  0024               	movlb	4	; select bank4
 10623  279F  110D               	bcf	13,2	;volatile
 10624                           
 10625                           ;MCU_16f1518_B1.c: 250: IOCBP=0b00000100;
 10626  27A0  3004               	movlw	4
 10627  27A1  0027               	movlb	7	; select bank7
 10628  27A2  0094               	movwf	20	;volatile
 10629                           
 10630                           ;MCU_16f1518_B1.c: 251: IOCBN=0b00000100;
 10631  27A3  3004               	movlw	4
 10632  27A4  0095               	movwf	21	;volatile
 10633                           
 10634                           ;MCU_16f1518_B1.c: 259: IOCBF=0b00000000;
 10635  27A5  0196               	clrf	22	;volatile
 10636                           
 10637                           ;MCU_16f1518_B1.c: 261: IOCIE=1;
 10638  27A6  158B               	bsf	11,3	;volatile
 10639                           
 10640                           ;MCU_16f1518_B1.c: 262: IOCIF=0;
 10641  27A7  100B               	bcf	11,0	;volatile
 10642                           
 10643                           ;MCU_16f1518_B1.c: 263: PEIE=1;
 10644  27A8  170B               	bsf	11,6	;volatile
 10645                           
 10646                           ;MCU_16f1518_B1.c: 264: GIE=1;
 10647  27A9  178B               	bsf	11,7	;volatile
 10648  27AA  0008               	return
 10649  27AB                     __end_of_IOC_Set:	
 10650                           
 10651                           	psect	text53
 10652  2652                     __ptext53:	
 10653 ;; *************** function _INT_Set *****************
 10654 ;; Defined at:
 10655 ;;		line 217 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;		None
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;		None
 10660 ;; Return value:  Size  Location     Type
 10661 ;;		None               void
 10662 ;; Registers used:
 10663 ;;		None
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;Total ram usage:        0 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    4
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		_Mcu_Initialization
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           
 10684                           ;psect for function _INT_Set
 10685  2652                     _INT_Set:	
 10686                           
 10687                           ;MCU_16f1518_B1.c: 219: WPUB0=0;
 10688                           
 10689                           ;incstack = 0
 10690                           ; Regs used in _INT_Set: []
 10691  2652  0024               	movlb	4	; select bank4
 10692  2653  100D               	bcf	13,0	;volatile
 10693                           
 10694                           ;MCU_16f1518_B1.c: 220: INTE=1;
 10695  2654  160B               	bsf	11,4	;volatile
 10696                           
 10697                           ;MCU_16f1518_B1.c: 221: PEIE=1;
 10698  2655  170B               	bsf	11,6	;volatile
 10699                           
 10700                           ;MCU_16f1518_B1.c: 222: GIE=1;
 10701  2656  178B               	bsf	11,7	;volatile
 10702  2657  0008               	return
 10703  2658                     __end_of_INT_Set:	
 10704                           
 10705                           	psect	text54
 10706  2680                     __ptext54:	
 10707 ;; *************** function _ADC_Set *****************
 10708 ;; Defined at:
 10709 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;		None               void
 10716 ;; Registers used:
 10717 ;;		wreg
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;Total ram usage:        0 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    4
 10730 ;; This function calls:
 10731 ;;		Nothing
 10732 ;; This function is called by:
 10733 ;;		_Mcu_Initialization
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           
 10738                           ;psect for function _ADC_Set
 10739  2680                     _ADC_Set:	
 10740                           
 10741                           ;MCU_16f1518_B1.c: 305: ADCON1=0xf2;
 10742                           
 10743                           ;incstack = 0
 10744                           ; Regs used in _ADC_Set: [wreg]
 10745  2680  30F2               	movlw	242
 10746  2681  0021               	movlb	1	; select bank1
 10747  2682  009E               	movwf	30	;volatile
 10748                           
 10749                           ;MCU_16f1518_B1.c: 306: FVRCON=0xc0;
 10750  2683  30C0               	movlw	192
 10751  2684  0022               	movlb	2	; select bank2
 10752  2685  0097               	movwf	23	;volatile
 10753  2686  0008               	return
 10754  2687                     __end_of_ADC_Set:	
 10755                           
 10756                           	psect	text55
 10757  26AC                     __ptext55:	
 10758 ;; *************** function _MainT_Initialization *****************
 10759 ;; Defined at:
 10760 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\main.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;		None               void
 10767 ;; Registers used:
 10768 ;;		wreg
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        1 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    4
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_main
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function _MainT_Initialization
 10790  26AC                     _MainT_Initialization:	
 10791                           
 10792                           ;main.c: 95: Product=&VarProduct;
 10793                           
 10794                           ;incstack = 0
 10795                           ; Regs used in _MainT_Initialization: [wreg]
 10796  26AC  30C5               	movlw	_VarProduct& (0+255)
 10797  26AD  0020               	movlb	0	; select bank0
 10798  26AE  00A0               	movwf	??_MainT_Initialization
 10799  26AF  0820               	movf	??_MainT_Initialization,w
 10800  26B0  00EF               	movwf	_Product
 10801                           
 10802                           ;main.c: 98: TMain=&VarTMain;
 10803  26B1  3020               	movlw	_VarTMain& (0+255)
 10804  26B2  00A0               	movwf	??_MainT_Initialization
 10805  26B3  0820               	movf	??_MainT_Initialization,w
 10806  26B4  00FD               	movwf	_TMain
 10807  26B5  0008               	return
 10808  26B6                     __end_of_MainT_Initialization:	
 10809                           
 10810                           	psect	text56
 10811  169C                     __ptext56:	
 10812 ;; *************** function _MainT *****************
 10813 ;; Defined at:
 10814 ;;		line 103 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\main.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;		None
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;		None
 10819 ;; Return value:  Size  Location     Type
 10820 ;;		None               void
 10821 ;; Registers used:
 10822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;Total ram usage:        0 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    6
 10835 ;; This function calls:
 10836 ;;		_setBuz
 10837 ;;		_setLoad_Enable
 10838 ;;		_setRF_Enable
 10839 ;;		_setSw_Enable
 10840 ;;		_setTemp_Enable
 10841 ;; This function is called by:
 10842 ;;		_main
 10843 ;; This function uses a non-reentrant model
 10844 ;;
 10845                           
 10846                           
 10847                           ;psect for function _MainT
 10848  169C                     _MainT:	
 10849                           
 10850                           ;main.c: 106: if(!TMain->PowerON)
 10851                           
 10852                           ;incstack = 0
 10853                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10854  169C  087D               	movf	_TMain,w
 10855  169D  0086               	movwf	6
 10856  169E  3001               	movlw	1	; select bank2/3
 10857  169F  0087               	movwf	7
 10858  16A0  1801               	btfsc	1,0
 10859  16A1  2EE5               	goto	l9344
 10860                           
 10861                           ;main.c: 107: {
 10862                           ;main.c: 108: TMain->PowerCount++;
 10863  16A2  0A7D               	incf	_TMain,w
 10864  16A3  0086               	movwf	6
 10865  16A4  3001               	movlw	1	; select bank2/3
 10866  16A5  0087               	movwf	7
 10867  16A6  3001               	movlw	1
 10868  16A7  0781               	addwf	1,f
 10869  16A8  3141               	addfsr 1,1
 10870  16A9  1803               	skipnc
 10871  16AA  0A81               	incf	1,f
 10872                           
 10873                           ;main.c: 109: if(TMain->PowerCount == 150)
 10874  16AB  0A7D               	incf	_TMain,w
 10875  16AC  0086               	movwf	6
 10876  16AD  3001               	movlw	1	; select bank2/3
 10877  16AE  0087               	movwf	7
 10878  16AF  3F40               	moviw [0]fsr1
 10879  16B0  3A96               	xorlw	150
 10880  16B1  1D03               	skipz
 10881  16B2  2EB5               	goto	u9165
 10882  16B3  3F41               	moviw [1]fsr1
 10883  16B4  3A00               	xorlw	0
 10884  16B5                     u9165:	
 10885  16B5  1D03               	skipz
 10886  16B6  0008               	return
 10887                           
 10888                           ;main.c: 110: {
 10889                           ;main.c: 111: TMain->PowerCount=0;
 10890  16B7  0A7D               	incf	_TMain,w
 10891  16B8  0086               	movwf	6
 10892  16B9  3001               	movlw	1	; select bank2/3
 10893  16BA  0087               	movwf	7
 10894  16BB  3000               	movlw	0
 10895  16BC  3FC0               	movwi [0]fsr1
 10896  16BD  3FC1               	movwi [1]fsr1
 10897                           
 10898                           ;main.c: 112: TMain->PowerON=1;
 10899  16BE  087D               	movf	_TMain,w
 10900  16BF  0086               	movwf	6
 10901  16C0  3001               	movlw	1	; select bank2/3
 10902  16C1  0087               	movwf	7
 10903  16C2  1401               	bsf	1,0
 10904                           
 10905                           ;main.c: 115: setTemp_Enable(1);
 10906  16C3  3001               	movlw	1
 10907  16C4  31A6  26F8  3196   	fcall	_setTemp_Enable
 10908                           
 10909                           ;main.c: 119: setLoad_Enable(1);
 10910  16C7  3001               	movlw	1
 10911  16C8  3198  20C8  3196   	fcall	_setLoad_Enable
 10912                           
 10913                           ;main.c: 125: setBuz(3,50);
 10914  16CB  3032               	movlw	50
 10915  16CC  0020               	movlb	0	; select bank0
 10916  16CD  00A6               	movwf	setBuz@time
 10917  16CE  3000               	movlw	0
 10918  16CF  00A7               	movwf	setBuz@time+1
 10919  16D0  3003               	movlw	3
 10920  16D1  3197  2710  3196   	fcall	_setBuz
 10921                           
 10922                           ;main.c: 126: TMain->SelfTest=1;
 10923  16D4  087D               	movf	_TMain,w
 10924  16D5  3E03               	addlw	3
 10925  16D6  0086               	movwf	6
 10926  16D7  3001               	movlw	1	; select bank2/3
 10927  16D8  0087               	movwf	7
 10928  16D9  1401               	bsf	1,0
 10929                           
 10930                           ;main.c: 128: setSw_Enable(1);
 10931  16DA  3001               	movlw	1
 10932  16DB  3198  2079  3196   	fcall	_setSw_Enable
 10933                           
 10934                           ;main.c: 131: setRF_Enable(1,1);
 10935  16DE  0020               	movlb	0	; select bank0
 10936  16DF  01A2               	clrf	setRF_Enable@command
 10937  16E0  0AA2               	incf	setRF_Enable@command,f
 10938  16E1  3001               	movlw	1
 10939  16E2  319B  2399         	fcall	_setRF_Enable
 10940                           
 10941                           ;main.c: 135: }
 10942                           ;main.c: 136: }
 10943  16E4  0008               	return
 10944  16E5                     l9344:	
 10945                           
 10946                           ;main.c: 137: else
 10947                           ;main.c: 138: {
 10948                           ;main.c: 146: TMain->Count1++;
 10949  16E5  087D               	movf	_TMain,w
 10950  16E6  3E06               	addlw	6
 10951  16E7  0086               	movwf	6
 10952  16E8  3001               	movlw	1	; select bank2/3
 10953  16E9  0087               	movwf	7
 10954  16EA  3001               	movlw	1
 10955  16EB  0781               	addwf	1,f
 10956  16EC  3141               	addfsr 1,1
 10957  16ED  1803               	skipnc
 10958  16EE  0A81               	incf	1,f
 10959                           
 10960                           ;main.c: 147: if(TMain->Count1 == 100)
 10961  16EF  087D               	movf	_TMain,w
 10962  16F0  3E06               	addlw	6
 10963  16F1  0086               	movwf	6
 10964  16F2  3001               	movlw	1	; select bank2/3
 10965  16F3  0087               	movwf	7
 10966  16F4  3F40               	moviw [0]fsr1
 10967  16F5  3A64               	xorlw	100
 10968  16F6  1D03               	skipz
 10969  16F7  2EFA               	goto	u9175
 10970  16F8  3F41               	moviw [1]fsr1
 10971  16F9  3A00               	xorlw	0
 10972  16FA                     u9175:	
 10973  16FA  1D03               	skipz
 10974  16FB  0008               	return
 10975                           
 10976                           ;main.c: 148: {
 10977                           ;main.c: 149: TMain->Count1=0;
 10978  16FC  087D               	movf	_TMain,w
 10979  16FD  3E06               	addlw	6
 10980  16FE  0086               	movwf	6
 10981  16FF  3001               	movlw	1	; select bank2/3
 10982  1700  0087               	movwf	7
 10983  1701  3000               	movlw	0
 10984  1702  3FC0               	movwi [0]fsr1
 10985  1703  3FC1               	movwi [1]fsr1
 10986                           
 10987                           ;main.c: 160: if(TMain->Flag)
 10988  1704  087D               	movf	_TMain,w
 10989  1705  0086               	movwf	6
 10990  1706  3001               	movlw	1	; select bank2/3
 10991  1707  0087               	movwf	7
 10992  1708  1981               	btfsc	1,3
 10993  1709  0008               	return
 10994                           
 10995                           ;main.c: 170: else
 10996                           ;main.c: 171: {
 10997                           ;main.c: 172: TMain->Flag=1;
 10998                           
 10999                           ;main.c: 161: {
 11000                           ;main.c: 169: }
 11001  170A  087D               	movf	_TMain,w
 11002  170B  0086               	movwf	6
 11003  170C  3001               	movlw	1	; select bank2/3
 11004  170D  0087               	movwf	7
 11005  170E  1581               	bsf	1,3
 11006  170F  0008               	return
 11007  1710                     __end_of_MainT:	
 11008                           
 11009                           	psect	text57
 11010  26F8                     __ptext57:	
 11011 ;; *************** function _setTemp_Enable *****************
 11012 ;; Defined at:
 11013 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverTemperature_B1.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;  command         1    wreg     unsigned char 
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  command         1    0[BANK0 ] unsigned char 
 11018 ;; Return value:  Size  Location     Type
 11019 ;;		None               void
 11020 ;; Registers used:
 11021 ;;		wreg, fsr1l, fsr1h
 11022 ;; Tracked objects:
 11023 ;;		On entry : 0/0
 11024 ;;		On exit  : 0/0
 11025 ;;		Unchanged: 0/0
 11026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;Total ram usage:        1 bytes
 11032 ;; Hardware stack levels used:    1
 11033 ;; Hardware stack levels required when called:    4
 11034 ;; This function calls:
 11035 ;;		Nothing
 11036 ;; This function is called by:
 11037 ;;		_MainT
 11038 ;; This function uses a non-reentrant model
 11039 ;;
 11040                           
 11041                           
 11042                           ;psect for function _setTemp_Enable
 11043  26F8                     _setTemp_Enable:	
 11044                           
 11045                           ;incstack = 0
 11046                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11047                           ;setTemp_Enable@command stored from wreg
 11048  26F8  0020               	movlb	0	; select bank0
 11049  26F9  00A0               	movwf	setTemp_Enable@command
 11050                           
 11051                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11052  26FA  087C               	movf	_Temp,w
 11053  26FB  0086               	movwf	6
 11054  26FC  3001               	movlw	1	; select bank2/3
 11055  26FD  0087               	movwf	7
 11056  26FE  0820               	movf	setTemp_Enable@command,w
 11057  26FF  1001               	bcf	1,0
 11058  2700  1D03               	skipz
 11059  2701  1401               	bsf	1,0
 11060  2702  0008               	return
 11061  2703                     __end_of_setTemp_Enable:	
 11062                           
 11063                           	psect	text58
 11064  18C8                     __ptext58:	
 11065 ;; *************** function _setLoad_Enable *****************
 11066 ;; Defined at:
 11067 ;;		line 257 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;  command         1    wreg     unsigned char 
 11070 ;; Auto vars:     Size  Location     Type
 11071 ;;  command         1    0[BANK0 ] unsigned char 
 11072 ;; Return value:  Size  Location     Type
 11073 ;;		None               void
 11074 ;; Registers used:
 11075 ;;		wreg, fsr1l, fsr1h
 11076 ;; Tracked objects:
 11077 ;;		On entry : 0/0
 11078 ;;		On exit  : 0/0
 11079 ;;		Unchanged: 0/0
 11080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11084 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11085 ;;Total ram usage:        1 bytes
 11086 ;; Hardware stack levels used:    1
 11087 ;; Hardware stack levels required when called:    4
 11088 ;; This function calls:
 11089 ;;		Nothing
 11090 ;; This function is called by:
 11091 ;;		_MainT
 11092 ;; This function uses a non-reentrant model
 11093 ;;
 11094                           
 11095                           
 11096                           ;psect for function _setLoad_Enable
 11097  18C8                     _setLoad_Enable:	
 11098                           
 11099                           ;incstack = 0
 11100                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11101                           ;setLoad_Enable@command stored from wreg
 11102  18C8  0020               	movlb	0	; select bank0
 11103  18C9  00A0               	movwf	setLoad_Enable@command
 11104                           
 11105                           ;OverLoad_B1.c: 259: Load->Enable=command;
 11106  18CA  086E               	movf	_Load,w
 11107  18CB  0086               	movwf	6
 11108  18CC  3002               	movlw	2	; select bank4/5
 11109  18CD  0087               	movwf	7
 11110  18CE  0820               	movf	setLoad_Enable@command,w
 11111  18CF  1001               	bcf	1,0
 11112  18D0  1D03               	skipz
 11113  18D1  1401               	bsf	1,0
 11114                           
 11115                           ;OverLoad_B1.c: 260: Load->GO=0;
 11116  18D2  086E               	movf	_Load,w
 11117  18D3  0086               	movwf	6
 11118  18D4  3002               	movlw	2	; select bank4/5
 11119  18D5  0087               	movwf	7
 11120  18D6  1081               	bcf	1,1
 11121  18D7  0008               	return
 11122  18D8                     __end_of_setLoad_Enable:	
 11123                           
 11124                           	psect	text59
 11125  0050                     __ptext59:	
 11126 ;; *************** function _Load_Main *****************
 11127 ;; Defined at:
 11128 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverLoad_B1.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;		None
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  i               1   17[BANK0 ] unsigned char 
 11133 ;; Return value:  Size  Location     Type
 11134 ;;		None               void
 11135 ;; Registers used:
 11136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11137 ;; Tracked objects:
 11138 ;;		On entry : 0/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;Total ram usage:        5 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    9
 11149 ;; This function calls:
 11150 ;;		___lwdiv
 11151 ;;		___wmul
 11152 ;;		_getPF_Safe
 11153 ;;		_getTemp_Safe
 11154 ;;		_setDimmerLights_Clear
 11155 ;;		_setLoad_AH_AL_Restore
 11156 ;;		_setLoad_Exceptions
 11157 ;; This function is called by:
 11158 ;;		_main
 11159 ;; This function uses a non-reentrant model
 11160 ;;
 11161                           
 11162                           
 11163                           ;psect for function _Load_Main
 11164  0050                     _Load_Main:	
 11165                           
 11166                           ;OverLoad_B1.c: 47: char i;
 11167                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 11168                           
 11169                           ;incstack = 0
 11170                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11171  0050  0020               	movlb	0	; select bank0
 11172  0051  086E               	movf	_Load,w
 11173  0052  0086               	movwf	6
 11174  0053  3002               	movlw	2	; select bank4/5
 11175  0054  0087               	movwf	7
 11176  0055  1E81               	btfss	1,5
 11177  0056  287D               	goto	l9380
 11178                           
 11179                           ;OverLoad_B1.c: 49: {
 11180                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 11181  0057  086E               	movf	_Load,w
 11182  0058  3E03               	addlw	3
 11183  0059  0086               	movwf	6
 11184  005A  3002               	movlw	2	; select bank4/5
 11185  005B  0087               	movwf	7
 11186  005C  3001               	movlw	1
 11187  005D  0781               	addwf	1,f
 11188  005E  3141               	addfsr 1,1
 11189  005F  1803               	skipnc
 11190  0060  0A81               	incf	1,f
 11191                           
 11192                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 11193  0061  086E               	movf	_Load,w
 11194  0062  3E03               	addlw	3
 11195  0063  0086               	movwf	6
 11196  0064  3002               	movlw	2	; select bank4/5
 11197  0065  0087               	movwf	7
 11198  0066  3F40               	moviw [0]fsr1
 11199  0067  00AD               	movwf	??_Load_Main
 11200  0068  3F41               	moviw [1]fsr1
 11201  0069  00AE               	movwf	??_Load_Main+1
 11202  006A  3003               	movlw	3
 11203  006B  022E               	subwf	??_Load_Main+1,w
 11204  006C  30E8               	movlw	232
 11205  006D  1903               	skipnz
 11206  006E  022D               	subwf	??_Load_Main,w
 11207  006F  1C03               	skipc
 11208  0070  0008               	return
 11209                           
 11210                           ;OverLoad_B1.c: 52: {
 11211                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 11212  0071  086E               	movf	_Load,w
 11213  0072  3E03               	addlw	3
 11214  0073  0086               	movwf	6
 11215  0074  3002               	movlw	2	; select bank4/5
 11216  0075  0087               	movwf	7
 11217  0076  3000               	movlw	0
 11218  0077  3FC0               	movwi [0]fsr1
 11219  0078  3FC1               	movwi [1]fsr1
 11220                           
 11221                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 11222  0079  3000               	movlw	0
 11223  007A  3188  2007         	fcall	_setLoad_Exceptions
 11224                           
 11225                           ;OverLoad_B1.c: 55: }
 11226                           ;OverLoad_B1.c: 56: }
 11227  007C  0008               	return
 11228  007D                     l9380:	
 11229                           
 11230                           ;OverLoad_B1.c: 57: else
 11231                           ;OverLoad_B1.c: 58: {
 11232                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 11233  007D  0020               	movlb	0	; select bank0
 11234  007E  086E               	movf	_Load,w
 11235  007F  0086               	movwf	6
 11236  0080  3002               	movlw	2	; select bank4/5
 11237  0081  0087               	movwf	7
 11238  0082  1E01               	btfss	1,4
 11239  0083  2A7C               	goto	l9462
 11240                           
 11241                           ;OverLoad_B1.c: 60: {
 11242                           ;OverLoad_B1.c: 61: Load->Time++;
 11243  0084  0A6E               	incf	_Load,w
 11244  0085  0086               	movwf	6
 11245  0086  3002               	movlw	2	; select bank4/5
 11246  0087  0087               	movwf	7
 11247  0088  3001               	movlw	1
 11248  0089  0781               	addwf	1,f
 11249  008A  3141               	addfsr 1,1
 11250  008B  1803               	skipnc
 11251  008C  0A81               	incf	1,f
 11252                           
 11253                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 11254  008D  0A6E               	incf	_Load,w
 11255  008E  0086               	movwf	6
 11256  008F  3002               	movlw	2	; select bank4/5
 11257  0090  0087               	movwf	7
 11258  0091  3F40               	moviw [0]fsr1
 11259  0092  00AD               	movwf	??_Load_Main
 11260  0093  3F41               	moviw [1]fsr1
 11261  0094  00AE               	movwf	??_Load_Main+1
 11262  0095  3000               	movlw	0
 11263  0096  022E               	subwf	??_Load_Main+1,w
 11264  0097  3005               	movlw	5
 11265  0098  1903               	skipnz
 11266  0099  022D               	subwf	??_Load_Main,w
 11267  009A  1C03               	skipc
 11268  009B  0008               	return
 11269                           
 11270                           ;OverLoad_B1.c: 63: {
 11271                           ;OverLoad_B1.c: 64: Load->Time=0;
 11272  009C  0A6E               	incf	_Load,w
 11273  009D  0086               	movwf	6
 11274  009E  3002               	movlw	2	; select bank4/5
 11275  009F  0087               	movwf	7
 11276  00A0  3000               	movlw	0
 11277  00A1  3FC0               	movwi [0]fsr1
 11278  00A2  3FC1               	movwi [1]fsr1
 11279                           
 11280                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 11281  00A3  086E               	movf	_Load,w
 11282  00A4  0086               	movwf	6
 11283  00A5  3002               	movlw	2	; select bank4/5
 11284  00A6  0087               	movwf	7
 11285  00A7  1201               	bcf	1,4
 11286                           
 11287                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 11288  00A8  086E               	movf	_Load,w
 11289  00A9  3E45               	addlw	69
 11290  00AA  0086               	movwf	6
 11291  00AB  3002               	movlw	2	; select bank4/5
 11292  00AC  0087               	movwf	7
 11293  00AD  086E               	movf	_Load,w
 11294  00AE  3E44               	addlw	68
 11295  00AF  0084               	movwf	4
 11296  00B0  3002               	movlw	2	; select bank4/5
 11297  00B1  0085               	movwf	5
 11298  00B2  0800               	movf	0,w
 11299  00B3  00AD               	movwf	??_Load_Main
 11300  00B4  086E               	movf	_Load,w
 11301  00B5  3E43               	addlw	67
 11302  00B6  0084               	movwf	4
 11303  00B7  3002               	movlw	2	; select bank4/5
 11304  00B8  0085               	movwf	5
 11305  00B9  0800               	movf	0,w
 11306  00BA  072D               	addwf	??_Load_Main,w
 11307  00BB  0701               	addwf	1,w
 11308  00BC  00AE               	movwf	??_Load_Main+1
 11309  00BD  086E               	movf	_Load,w
 11310  00BE  3E3E               	addlw	62
 11311  00BF  0086               	movwf	6
 11312  00C0  3002               	movlw	2	; select bank4/5
 11313  00C1  0087               	movwf	7
 11314  00C2  082E               	movf	??_Load_Main+1,w
 11315  00C3  0081               	movwf	1
 11316                           
 11317                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 11318  00C4  01B1               	clrf	Load_Main@i
 11319  00C5  0AB1               	incf	Load_Main@i,f
 11320  00C6  3004               	movlw	4
 11321  00C7  0231               	subwf	Load_Main@i,w
 11322  00C8  1803               	btfsc	3,0
 11323  00C9  28F8               	goto	l9402
 11324  00CA                     l9396:	
 11325                           
 11326                           ;OverLoad_B1.c: 68: {
 11327                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 11328  00CA  3531               	lslf	Load_Main@i,w
 11329  00CB  3E08               	addlw	8
 11330  00CC  076E               	addwf	_Load,w
 11331  00CD  00AD               	movwf	??_Load_Main
 11332  00CE  082D               	movf	??_Load_Main,w
 11333  00CF  0086               	movwf	6
 11334  00D0  3002               	movlw	2	; select bank4/5
 11335  00D1  0087               	movwf	7
 11336  00D2  086E               	movf	_Load,w
 11337  00D3  3E2E               	addlw	46
 11338  00D4  0084               	movwf	4
 11339  00D5  3002               	movlw	2	; select bank4/5
 11340  00D6  0085               	movwf	5
 11341  00D7  3F40               	moviw [0]fsr1
 11342  00D8  0780               	addwf	0,f
 11343  00D9  3101               	addfsr 0,1
 11344  00DA  3F41               	moviw [1]fsr1
 11345  00DB  3D80               	addwfc	0,f
 11346  00DC  313F               	addfsr 0,-1
 11347                           
 11348                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 11349  00DD  3531               	lslf	Load_Main@i,w
 11350  00DE  3E1A               	addlw	26
 11351  00DF  076E               	addwf	_Load,w
 11352  00E0  00AD               	movwf	??_Load_Main
 11353  00E1  082D               	movf	??_Load_Main,w
 11354  00E2  0086               	movwf	6
 11355  00E3  3002               	movlw	2	; select bank4/5
 11356  00E4  0087               	movwf	7
 11357  00E5  086E               	movf	_Load,w
 11358  00E6  3E30               	addlw	48
 11359  00E7  0084               	movwf	4
 11360  00E8  3002               	movlw	2	; select bank4/5
 11361  00E9  0085               	movwf	5
 11362  00EA  3F40               	moviw [0]fsr1
 11363  00EB  0780               	addwf	0,f
 11364  00EC  3101               	addfsr 0,1
 11365  00ED  3F41               	moviw [1]fsr1
 11366  00EE  3D80               	addwfc	0,f
 11367  00EF  313F               	addfsr 0,-1
 11368  00F0  3001               	movlw	1
 11369  00F1  00AD               	movwf	??_Load_Main
 11370  00F2  082D               	movf	??_Load_Main,w
 11371  00F3  07B1               	addwf	Load_Main@i,f
 11372  00F4  3004               	movlw	4
 11373  00F5  0231               	subwf	Load_Main@i,w
 11374  00F6  1C03               	skipc
 11375  00F7  28CA               	goto	l9396
 11376  00F8                     l9402:	
 11377                           
 11378                           ;OverLoad_B1.c: 71: }
 11379                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 11380  00F8  3003               	movlw	3
 11381  00F9  00A0               	movwf	___lwdiv@divisor
 11382  00FA  3000               	movlw	0
 11383  00FB  00A1               	movwf	___lwdiv@divisor+1
 11384  00FC  086E               	movf	_Load,w
 11385  00FD  3E2E               	addlw	46
 11386  00FE  0086               	movwf	6
 11387  00FF  3002               	movlw	2	; select bank4/5
 11388  0100  0087               	movwf	7
 11389  0101  3F40               	moviw [0]fsr1
 11390  0102  00A2               	movwf	___lwdiv@dividend
 11391  0103  3F41               	moviw [1]fsr1
 11392  0104  00A3               	movwf	___lwdiv@dividend+1
 11393  0105  319D  2573  3180   	fcall	___lwdiv
 11394  0108  0020               	movlb	0	; select bank0
 11395  0109  086E               	movf	_Load,w
 11396  010A  3E2E               	addlw	46
 11397  010B  0086               	movwf	6
 11398  010C  3002               	movlw	2	; select bank4/5
 11399  010D  0087               	movwf	7
 11400  010E  0820               	movf	?___lwdiv,w
 11401  010F  3FC0               	movwi [0]fsr1
 11402  0110  0821               	movf	?___lwdiv+1,w
 11403  0111  3FC1               	movwi [1]fsr1
 11404                           
 11405                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 11406  0112  3003               	movlw	3
 11407  0113  00A0               	movwf	___lwdiv@divisor
 11408  0114  3000               	movlw	0
 11409  0115  00A1               	movwf	___lwdiv@divisor+1
 11410  0116  086E               	movf	_Load,w
 11411  0117  3E30               	addlw	48
 11412  0118  0086               	movwf	6
 11413  0119  3002               	movlw	2	; select bank4/5
 11414  011A  0087               	movwf	7
 11415  011B  3F40               	moviw [0]fsr1
 11416  011C  00A2               	movwf	___lwdiv@dividend
 11417  011D  3F41               	moviw [1]fsr1
 11418  011E  00A3               	movwf	___lwdiv@dividend+1
 11419  011F  319D  2573  3180   	fcall	___lwdiv
 11420  0122  0020               	movlb	0	; select bank0
 11421  0123  086E               	movf	_Load,w
 11422  0124  3E30               	addlw	48
 11423  0125  0086               	movwf	6
 11424  0126  3002               	movlw	2	; select bank4/5
 11425  0127  0087               	movwf	7
 11426  0128  0820               	movf	?___lwdiv,w
 11427  0129  3FC0               	movwi [0]fsr1
 11428  012A  0821               	movf	?___lwdiv+1,w
 11429  012B  3FC1               	movwi [1]fsr1
 11430                           
 11431                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 11432  012C  086E               	movf	_Load,w
 11433  012D  3E2E               	addlw	46
 11434  012E  0086               	movwf	6
 11435  012F  3002               	movlw	2	; select bank4/5
 11436  0130  0087               	movwf	7
 11437  0131  3F40               	moviw [0]fsr1
 11438  0132  00AD               	movwf	??_Load_Main
 11439  0133  3F41               	moviw [1]fsr1
 11440  0134  00AE               	movwf	??_Load_Main+1
 11441  0135  086E               	movf	_Load,w
 11442  0136  3E30               	addlw	48
 11443  0137  0086               	movwf	6
 11444  0138  3002               	movlw	2	; select bank4/5
 11445  0139  0087               	movwf	7
 11446  013A  3F40               	moviw [0]fsr1
 11447  013B  00AF               	movwf	??_Load_Main+2
 11448  013C  3F41               	moviw [1]fsr1
 11449  013D  00B0               	movwf	??_Load_Main+3
 11450  013E  082E               	movf	??_Load_Main+1,w
 11451  013F  0230               	subwf	??_Load_Main+3,w
 11452  0140  1D03               	skipz
 11453  0141  2944               	goto	u9285
 11454  0142  082D               	movf	??_Load_Main,w
 11455  0143  022F               	subwf	??_Load_Main+2,w
 11456  0144                     u9285:	
 11457  0144  1803               	skipnc
 11458  0145  2A79               	goto	l9460
 11459                           
 11460                           ;OverLoad_B1.c: 75: {
 11461                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 11462  0146  086E               	movf	_Load,w
 11463  0147  3E2E               	addlw	46
 11464  0148  0086               	movwf	6
 11465  0149  3002               	movlw	2	; select bank4/5
 11466  014A  0087               	movwf	7
 11467  014B  086E               	movf	_Load,w
 11468  014C  3E30               	addlw	48
 11469  014D  0084               	movwf	4
 11470  014E  3002               	movlw	2	; select bank4/5
 11471  014F  0085               	movwf	5
 11472  0150  3F00               	moviw [0]fsr0
 11473  0151  00AD               	movwf	??_Load_Main
 11474  0152  3F01               	moviw [1]fsr0
 11475  0153  00AE               	movwf	??_Load_Main+1
 11476  0154  09AD               	comf	??_Load_Main,f
 11477  0155  09AE               	comf	??_Load_Main+1,f
 11478  0156  0AAD               	incf	??_Load_Main,f
 11479  0157  1903               	skipnz
 11480  0158  0AAE               	incf	??_Load_Main+1,f
 11481  0159  3F40               	moviw [0]fsr1
 11482  015A  072D               	addwf	??_Load_Main,w
 11483  015B  00AF               	movwf	??_Load_Main+2
 11484  015C  3F41               	moviw [1]fsr1
 11485  015D  3D2E               	addwfc	??_Load_Main+1,w
 11486  015E  00B0               	movwf	??_Load_Main+3
 11487  015F  086E               	movf	_Load,w
 11488  0160  3E2C               	addlw	44
 11489  0161  0086               	movwf	6
 11490  0162  3002               	movlw	2	; select bank4/5
 11491  0163  0087               	movwf	7
 11492  0164  082F               	movf	??_Load_Main+2,w
 11493  0165  3FC0               	movwi [0]fsr1
 11494  0166  0830               	movf	??_Load_Main+3,w
 11495  0167  3FC1               	movwi [1]fsr1
 11496                           
 11497                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 11498  0168  086E               	movf	_Load,w
 11499  0169  3E3A               	addlw	58
 11500  016A  0086               	movwf	6
 11501  016B  3002               	movlw	2	; select bank4/5
 11502  016C  0087               	movwf	7
 11503  016D  3002               	movlw	2
 11504  016E  0201               	subwf	1,w
 11505  016F  1803               	skipnc
 11506  0170  29C1               	goto	l9424
 11507                           
 11508                           ;OverLoad_B1.c: 79: {
 11509                           ;OverLoad_B1.c: 80: Load->Count++;
 11510  0171  3001               	movlw	1
 11511  0172  00AD               	movwf	??_Load_Main
 11512  0173  086E               	movf	_Load,w
 11513  0174  3E3A               	addlw	58
 11514  0175  0086               	movwf	6
 11515  0176  3002               	movlw	2	; select bank4/5
 11516  0177  0087               	movwf	7
 11517  0178  082D               	movf	??_Load_Main,w
 11518  0179  0781               	addwf	1,f
 11519                           
 11520                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 11521  017A  086E               	movf	_Load,w
 11522  017B  3E3A               	addlw	58
 11523  017C  0086               	movwf	6
 11524  017D  3002               	movlw	2	; select bank4/5
 11525  017E  0087               	movwf	7
 11526  017F  0801               	movf	1,w
 11527  0180  3A01               	xorlw	1
 11528  0181  1D03               	skipz
 11529  0182  298D               	goto	l9416
 11530                           
 11531                           ;OverLoad_B1.c: 82: {
 11532                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 11533  0183  086E               	movf	_Load,w
 11534  0184  3E36               	addlw	54
 11535  0185  0086               	movwf	6
 11536  0186  3002               	movlw	2	; select bank4/5
 11537  0187  0087               	movwf	7
 11538  0188  30F4               	movlw	244
 11539  0189  3FC0               	movwi [0]fsr1
 11540  018A  3001               	movlw	1
 11541  018B  3FC1               	movwi [1]fsr1
 11542                           
 11543                           ;OverLoad_B1.c: 84: }
 11544  018C  29C1               	goto	l9424
 11545  018D                     l9416:	
 11546                           
 11547                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 11548  018D  086E               	movf	_Load,w
 11549  018E  3E3A               	addlw	58
 11550  018F  0086               	movwf	6
 11551  0190  3002               	movlw	2	; select bank4/5
 11552  0191  0087               	movwf	7
 11553  0192  0801               	movf	1,w
 11554  0193  3A02               	xorlw	2
 11555  0194  1D03               	skipz
 11556  0195  29C1               	goto	l9424
 11557                           
 11558                           ;OverLoad_B1.c: 86: {
 11559                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 11560  0196  086E               	movf	_Load,w
 11561  0197  3E3E               	addlw	62
 11562  0198  0086               	movwf	6
 11563  0199  3002               	movlw	2	; select bank4/5
 11564  019A  0087               	movwf	7
 11565  019B  0801               	movf	1,w
 11566  019C  3A01               	xorlw	1
 11567  019D  1D03               	skipz
 11568  019E  29A9               	goto	l9422
 11569                           
 11570                           ;OverLoad_B1.c: 88: {
 11571                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x42;
 11572  019F  086E               	movf	_Load,w
 11573  01A0  3E36               	addlw	54
 11574  01A1  0086               	movwf	6
 11575  01A2  3002               	movlw	2	; select bank4/5
 11576  01A3  0087               	movwf	7
 11577  01A4  3042               	movlw	66
 11578  01A5  3FC0               	movwi [0]fsr1
 11579  01A6  3000               	movlw	0
 11580  01A7  3FC1               	movwi [1]fsr1
 11581                           
 11582                           ;OverLoad_B1.c: 90: }
 11583  01A8  29C1               	goto	l9424
 11584  01A9                     l9422:	
 11585                           
 11586                           ;OverLoad_B1.c: 91: else
 11587                           ;OverLoad_B1.c: 92: {
 11588                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x42+Load->TotalLoad)-0x08;
 11589  01A9  086E               	movf	_Load,w
 11590  01AA  3E06               	addlw	6
 11591  01AB  0086               	movwf	6
 11592  01AC  3002               	movlw	2	; select bank4/5
 11593  01AD  0087               	movwf	7
 11594  01AE  3F40               	moviw [0]fsr1
 11595  01AF  00AD               	movwf	??_Load_Main
 11596  01B0  3F41               	moviw [1]fsr1
 11597  01B1  00AE               	movwf	??_Load_Main+1
 11598  01B2  082D               	movf	??_Load_Main,w
 11599  01B3  3E3A               	addlw	58
 11600  01B4  00AF               	movwf	??_Load_Main+2
 11601  01B5  3000               	movlw	0
 11602  01B6  3D2E               	addwfc	??_Load_Main+1,w
 11603  01B7  00B0               	movwf	??_Load_Main+3
 11604  01B8  086E               	movf	_Load,w
 11605  01B9  3E36               	addlw	54
 11606  01BA  0086               	movwf	6
 11607  01BB  3002               	movlw	2	; select bank4/5
 11608  01BC  0087               	movwf	7
 11609  01BD  082F               	movf	??_Load_Main+2,w
 11610  01BE  3FC0               	movwi [0]fsr1
 11611  01BF  0830               	movf	??_Load_Main+3,w
 11612  01C0  3FC1               	movwi [1]fsr1
 11613  01C1                     l9424:	
 11614                           
 11615                           ;OverLoad_B1.c: 94: }
 11616                           ;OverLoad_B1.c: 95: }
 11617                           ;OverLoad_B1.c: 96: }
 11618                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 11619  01C1  086E               	movf	_Load,w
 11620  01C2  3E36               	addlw	54
 11621  01C3  0086               	movwf	6
 11622  01C4  3002               	movlw	2	; select bank4/5
 11623  01C5  0087               	movwf	7
 11624  01C6  3F40               	moviw [0]fsr1
 11625  01C7  00AD               	movwf	??_Load_Main
 11626  01C8  3F41               	moviw [1]fsr1
 11627  01C9  00AE               	movwf	??_Load_Main+1
 11628  01CA  086E               	movf	_Load,w
 11629  01CB  3E2C               	addlw	44
 11630  01CC  0086               	movwf	6
 11631  01CD  3002               	movlw	2	; select bank4/5
 11632  01CE  0087               	movwf	7
 11633  01CF  3F40               	moviw [0]fsr1
 11634  01D0  00AF               	movwf	??_Load_Main+2
 11635  01D1  3F41               	moviw [1]fsr1
 11636  01D2  00B0               	movwf	??_Load_Main+3
 11637  01D3  082E               	movf	??_Load_Main+1,w
 11638  01D4  0230               	subwf	??_Load_Main+3,w
 11639  01D5  1D03               	skipz
 11640  01D6  29D9               	goto	u9335
 11641  01D7  082D               	movf	??_Load_Main,w
 11642  01D8  022F               	subwf	??_Load_Main+2,w
 11643  01D9                     u9335:	
 11644  01D9  1C03               	skipc
 11645  01DA  29F8               	goto	l9434
 11646                           
 11647                           ;OverLoad_B1.c: 99: {
 11648                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 11649  01DB  3001               	movlw	1
 11650  01DC  00AD               	movwf	??_Load_Main
 11651  01DD  086E               	movf	_Load,w
 11652  01DE  3E3C               	addlw	60
 11653  01DF  0086               	movwf	6
 11654  01E0  3002               	movlw	2	; select bank4/5
 11655  01E1  0087               	movwf	7
 11656  01E2  082D               	movf	??_Load_Main,w
 11657  01E3  0781               	addwf	1,f
 11658                           
 11659                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 11660  01E4  086E               	movf	_Load,w
 11661  01E5  3E3C               	addlw	60
 11662  01E6  0086               	movwf	6
 11663  01E7  3002               	movlw	2	; select bank4/5
 11664  01E8  0087               	movwf	7
 11665  01E9  3003               	movlw	3
 11666  01EA  0201               	subwf	1,w
 11667  01EB  1C03               	skipc
 11668  01EC  2A79               	goto	l9460
 11669                           
 11670                           ;OverLoad_B1.c: 102: {
 11671                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 11672  01ED  086E               	movf	_Load,w
 11673  01EE  3E3C               	addlw	60
 11674  01EF  0086               	movwf	6
 11675  01F0  3002               	movlw	2	; select bank4/5
 11676  01F1  0087               	movwf	7
 11677  01F2  0181               	clrf	1
 11678                           
 11679                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 11680  01F3  3001               	movlw	1
 11681  01F4  3188  2007  3180   	fcall	_setLoad_Exceptions
 11682                           
 11683                           ;OverLoad_B1.c: 113: }
 11684                           ;OverLoad_B1.c: 114: }
 11685  01F7  2A79               	goto	l9460
 11686  01F8                     l9434:	
 11687                           
 11688                           ;OverLoad_B1.c: 115: else
 11689                           ;OverLoad_B1.c: 116: {
 11690                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 11691  01F8  0020               	movlb	0	; select bank0
 11692  01F9  086E               	movf	_Load,w
 11693  01FA  3E3C               	addlw	60
 11694  01FB  0086               	movwf	6
 11695  01FC  3002               	movlw	2	; select bank4/5
 11696  01FD  0087               	movwf	7
 11697  01FE  0181               	clrf	1
 11698                           
 11699                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 11700  01FF  086E               	movf	_Load,w
 11701  0200  3E42               	addlw	66
 11702  0201  0086               	movwf	6
 11703  0202  3002               	movlw	2	; select bank4/5
 11704  0203  0087               	movwf	7
 11705  0204  300A               	movlw	10
 11706  0205  0201               	subwf	1,w
 11707  0206  1803               	skipnc
 11708  0207  2A11               	goto	l9440
 11709                           
 11710                           ;OverLoad_B1.c: 119: {
 11711                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 11712  0208  3001               	movlw	1
 11713  0209  00AD               	movwf	??_Load_Main
 11714  020A  086E               	movf	_Load,w
 11715  020B  3E42               	addlw	66
 11716  020C  0086               	movwf	6
 11717  020D  3002               	movlw	2	; select bank4/5
 11718  020E  0087               	movwf	7
 11719  020F  082D               	movf	??_Load_Main,w
 11720  0210  0781               	addwf	1,f
 11721  0211                     l9440:	
 11722                           
 11723                           ;OverLoad_B1.c: 121: }
 11724                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 11725  0211  086E               	movf	_Load,w
 11726  0212  3E42               	addlw	66
 11727  0213  0086               	movwf	6
 11728  0214  3002               	movlw	2	; select bank4/5
 11729  0215  0087               	movwf	7
 11730  0216  300A               	movlw	10
 11731  0217  0201               	subwf	1,w
 11732  0218  1C03               	skipc
 11733  0219  2A79               	goto	l9460
 11734                           
 11735                           ;OverLoad_B1.c: 123: {
 11736                           ;OverLoad_B1.c: 124: Load->Safe=1;
 11737  021A  086E               	movf	_Load,w
 11738  021B  0086               	movwf	6
 11739  021C  3002               	movlw	2	; select bank4/5
 11740  021D  0087               	movwf	7
 11741  021E  1581               	bsf	1,3
 11742                           
 11743                           ;OverLoad_B1.c: 127: setDimmerLights_Clear(1,1);
 11744  021F  01A2               	clrf	setDimmerLights_Clear@command
 11745  0220  0AA2               	incf	setDimmerLights_Clear@command,f
 11746  0221  3001               	movlw	1
 11747  0222  3198  20B8  3180   	fcall	_setDimmerLights_Clear
 11748                           
 11749                           ;OverLoad_B1.c: 138: if(Load->StatusOn)
 11750  0225  0020               	movlb	0	; select bank0
 11751  0226  086E               	movf	_Load,w
 11752  0227  3E46               	addlw	70
 11753  0228  0086               	movwf	6
 11754  0229  3002               	movlw	2	; select bank4/5
 11755  022A  0087               	movwf	7
 11756  022B  1C01               	btfss	1,0
 11757  022C  2A41               	goto	l9452
 11758                           
 11759                           ;OverLoad_B1.c: 139: {
 11760                           ;OverLoad_B1.c: 140: Load->StatusOn=0;
 11761  022D  086E               	movf	_Load,w
 11762  022E  3E46               	addlw	70
 11763  022F  0086               	movwf	6
 11764  0230  3002               	movlw	2	; select bank4/5
 11765  0231  0087               	movwf	7
 11766  0232  1001               	bcf	1,0
 11767                           
 11768                           ;OverLoad_B1.c: 141: Load->TotalLoad=Load->AD;
 11769  0233  086E               	movf	_Load,w
 11770  0234  3E2C               	addlw	44
 11771  0235  0086               	movwf	6
 11772  0236  3002               	movlw	2	; select bank4/5
 11773  0237  0087               	movwf	7
 11774  0238  086E               	movf	_Load,w
 11775  0239  3E06               	addlw	6
 11776  023A  0084               	movwf	4
 11777  023B  3002               	movlw	2	; select bank4/5
 11778  023C  0085               	movwf	5
 11779  023D  3F40               	moviw [0]fsr1
 11780  023E  3F80               	movwi [0]fsr0
 11781  023F  3F41               	moviw [1]fsr1
 11782  0240  3F81               	movwi [1]fsr0
 11783  0241                     l9452:	
 11784                           
 11785                           ;OverLoad_B1.c: 143: }
 11786                           ;OverLoad_B1.c: 145: if(Load->StatusOff)
 11787  0241  086E               	movf	_Load,w
 11788  0242  3E46               	addlw	70
 11789  0243  0086               	movwf	6
 11790  0244  3002               	movlw	2	; select bank4/5
 11791  0245  0087               	movwf	7
 11792  0246  1C81               	btfss	1,1
 11793  0247  2A79               	goto	l9460
 11794                           
 11795                           ;OverLoad_B1.c: 146: {
 11796                           ;OverLoad_B1.c: 147: Load->StatusOff=0;
 11797  0248  086E               	movf	_Load,w
 11798  0249  3E46               	addlw	70
 11799  024A  0086               	movwf	6
 11800  024B  3002               	movlw	2	; select bank4/5
 11801  024C  0087               	movwf	7
 11802  024D  1081               	bcf	1,1
 11803                           
 11804                           ;OverLoad_B1.c: 148: Load->TotalLoad=Load->AD;
 11805  024E  086E               	movf	_Load,w
 11806  024F  3E2C               	addlw	44
 11807  0250  0086               	movwf	6
 11808  0251  3002               	movlw	2	; select bank4/5
 11809  0252  0087               	movwf	7
 11810  0253  086E               	movf	_Load,w
 11811  0254  3E06               	addlw	6
 11812  0255  0084               	movwf	4
 11813  0256  3002               	movlw	2	; select bank4/5
 11814  0257  0085               	movwf	5
 11815  0258  3F40               	moviw [0]fsr1
 11816  0259  3F80               	movwi [0]fsr0
 11817  025A  3F41               	moviw [1]fsr1
 11818  025B  3F81               	movwi [1]fsr0
 11819                           
 11820                           ;OverLoad_B1.c: 149: Load->JudgeValue=0x42*Load->LightsCount;
 11821  025C  086E               	movf	_Load,w
 11822  025D  3E3E               	addlw	62
 11823  025E  0086               	movwf	6
 11824  025F  3002               	movlw	2	; select bank4/5
 11825  0260  0087               	movwf	7
 11826  0261  0801               	movf	1,w
 11827  0262  00AD               	movwf	??_Load_Main
 11828  0263  01AE               	clrf	??_Load_Main+1
 11829  0264  082D               	movf	??_Load_Main,w
 11830  0265  00A0               	movwf	___wmul@multiplier
 11831  0266  082E               	movf	??_Load_Main+1,w
 11832  0267  00A1               	movwf	___wmul@multiplier+1
 11833  0268  3042               	movlw	66
 11834  0269  00A2               	movwf	___wmul@multiplicand
 11835  026A  3000               	movlw	0
 11836  026B  00A3               	movwf	___wmul@multiplicand+1
 11837  026C  3199  21F2  3180   	fcall	___wmul
 11838  026F  0020               	movlb	0	; select bank0
 11839  0270  086E               	movf	_Load,w
 11840  0271  3E36               	addlw	54
 11841  0272  0086               	movwf	6
 11842  0273  3002               	movlw	2	; select bank4/5
 11843  0274  0087               	movwf	7
 11844  0275  0820               	movf	?___wmul,w
 11845  0276  3FC0               	movwi [0]fsr1
 11846  0277  0821               	movf	?___wmul+1,w
 11847  0278  3FC1               	movwi [1]fsr1
 11848  0279                     l9460:	
 11849                           
 11850                           ;OverLoad_B1.c: 150: }
 11851                           ;OverLoad_B1.c: 151: }
 11852                           ;OverLoad_B1.c: 152: }
 11853                           ;OverLoad_B1.c: 153: }
 11854                           ;OverLoad_B1.c: 154: setLoad_AH_AL_Restore();
 11855  0279  319A  2293         	fcall	_setLoad_AH_AL_Restore
 11856                           
 11857                           ;OverLoad_B1.c: 166: }
 11858                           ;OverLoad_B1.c: 167: }
 11859  027B  0008               	return
 11860  027C                     l9462:	
 11861                           
 11862                           ;OverLoad_B1.c: 168: else
 11863                           ;OverLoad_B1.c: 169: {
 11864                           ;OverLoad_B1.c: 170: if(Load->GO)
 11865  027C  0020               	movlb	0	; select bank0
 11866  027D  086E               	movf	_Load,w
 11867  027E  0086               	movwf	6
 11868  027F  3002               	movlw	2	; select bank4/5
 11869  0280  0087               	movwf	7
 11870  0281  1C81               	btfss	1,1
 11871  0282  2AA6               	goto	l9474
 11872                           
 11873                           ;OverLoad_B1.c: 171: {
 11874                           ;OverLoad_B1.c: 172: if(!Load->LightsON)
 11875  0283  086E               	movf	_Load,w
 11876  0284  0086               	movwf	6
 11877  0285  3002               	movlw	2	; select bank4/5
 11878  0286  0087               	movwf	7
 11879  0287  1901               	btfsc	1,2
 11880  0288  2A93               	goto	l9468
 11881                           
 11882                           ;OverLoad_B1.c: 173: {
 11883                           ;OverLoad_B1.c: 174: Load->LightsON=1;
 11884  0289  086E               	movf	_Load,w
 11885  028A  0086               	movwf	6
 11886  028B  3002               	movlw	2	; select bank4/5
 11887  028C  0087               	movwf	7
 11888  028D  1501               	bsf	1,2
 11889                           
 11890                           ;OverLoad_B1.c: 175: Load->Safe=0;
 11891  028E  086E               	movf	_Load,w
 11892  028F  0086               	movwf	6
 11893  0290  3002               	movlw	2	; select bank4/5
 11894  0291  0087               	movwf	7
 11895  0292  1181               	bcf	1,3
 11896  0293                     l9468:	
 11897                           
 11898                           ;OverLoad_B1.c: 176: }
 11899                           ;OverLoad_B1.c: 177: if(getTemp_Safe() && getPF_Safe())
 11900  0293  31A6  2679  3180   	fcall	_getTemp_Safe
 11901  0296  3A00               	xorlw	0
 11902  0297  1903               	skipnz
 11903  0298  0008               	return
 11904  0299  31A6  2672  3180   	fcall	_getPF_Safe
 11905  029C  3A00               	xorlw	0
 11906  029D  1903               	skipnz
 11907  029E  0008               	return
 11908                           
 11909                           ;OverLoad_B1.c: 178: {
 11910                           ;OverLoad_B1.c: 179: Load->ADtoGO=1;
 11911  029F  0020               	movlb	0	; select bank0
 11912  02A0  086E               	movf	_Load,w
 11913  02A1  0086               	movwf	6
 11914  02A2  3002               	movlw	2	; select bank4/5
 11915  02A3  0087               	movwf	7
 11916  02A4  1601               	bsf	1,4
 11917                           
 11918                           ;OverLoad_B1.c: 180: }
 11919                           ;OverLoad_B1.c: 181: }
 11920  02A5  0008               	return
 11921  02A6                     l9474:	
 11922                           
 11923                           ;OverLoad_B1.c: 182: else
 11924                           ;OverLoad_B1.c: 183: {
 11925                           ;OverLoad_B1.c: 184: if(Load->LightsON)
 11926  02A6  086E               	movf	_Load,w
 11927  02A7  0086               	movwf	6
 11928  02A8  3002               	movlw	2	; select bank4/5
 11929  02A9  0087               	movwf	7
 11930  02AA  1D01               	btfss	1,2
 11931  02AB  0008               	return
 11932                           
 11933                           ;OverLoad_B1.c: 185: {
 11934                           ;OverLoad_B1.c: 186: Load->LightsON=0;
 11935  02AC  086E               	movf	_Load,w
 11936  02AD  0086               	movwf	6
 11937  02AE  3002               	movlw	2	; select bank4/5
 11938  02AF  0087               	movwf	7
 11939  02B0  1101               	bcf	1,2
 11940                           
 11941                           ;OverLoad_B1.c: 187: Load->Safe=1;
 11942  02B1  086E               	movf	_Load,w
 11943  02B2  0086               	movwf	6
 11944  02B3  3002               	movlw	2	; select bank4/5
 11945  02B4  0087               	movwf	7
 11946  02B5  1581               	bsf	1,3
 11947                           
 11948                           ;OverLoad_B1.c: 188: Load->ErrorCount=0;
 11949  02B6  086E               	movf	_Load,w
 11950  02B7  3E3C               	addlw	60
 11951  02B8  0086               	movwf	6
 11952  02B9  3002               	movlw	2	; select bank4/5
 11953  02BA  0087               	movwf	7
 11954  02BB  0181               	clrf	1
 11955                           
 11956                           ;OverLoad_B1.c: 189: Load->Count=0;
 11957  02BC  086E               	movf	_Load,w
 11958  02BD  3E3A               	addlw	58
 11959  02BE  0086               	movwf	6
 11960  02BF  3002               	movlw	2	; select bank4/5
 11961  02C0  0087               	movwf	7
 11962  02C1  0181               	clrf	1
 11963                           
 11964                           ;OverLoad_B1.c: 190: Load->TotalLoad=0;
 11965  02C2  086E               	movf	_Load,w
 11966  02C3  3E06               	addlw	6
 11967  02C4  0086               	movwf	6
 11968  02C5  3002               	movlw	2	; select bank4/5
 11969  02C6  0087               	movwf	7
 11970  02C7  3000               	movlw	0
 11971  02C8  3FC0               	movwi [0]fsr1
 11972  02C9  3FC1               	movwi [1]fsr1
 11973                           
 11974                           ;OverLoad_B1.c: 191: Load->NumberCount=0;
 11975  02CA  086E               	movf	_Load,w
 11976  02CB  3E3F               	addlw	63
 11977  02CC  0086               	movwf	6
 11978  02CD  3002               	movlw	2	; select bank4/5
 11979  02CE  0087               	movwf	7
 11980  02CF  0181               	clrf	1
 11981                           
 11982                           ;OverLoad_B1.c: 192: Load->StatusOn=0;
 11983  02D0  086E               	movf	_Load,w
 11984  02D1  3E46               	addlw	70
 11985  02D2  0086               	movwf	6
 11986  02D3  3002               	movlw	2	; select bank4/5
 11987  02D4  0087               	movwf	7
 11988  02D5  1001               	bcf	1,0
 11989                           
 11990                           ;OverLoad_B1.c: 193: Load->StatusOff=0;
 11991  02D6  086E               	movf	_Load,w
 11992  02D7  3E46               	addlw	70
 11993  02D8  0086               	movwf	6
 11994  02D9  3002               	movlw	2	; select bank4/5
 11995  02DA  0087               	movwf	7
 11996  02DB  1081               	bcf	1,1
 11997                           
 11998                           ;OverLoad_B1.c: 194: Load->AD=0;
 11999  02DC  086E               	movf	_Load,w
 12000  02DD  3E2C               	addlw	44
 12001  02DE  0086               	movwf	6
 12002  02DF  3002               	movlw	2	; select bank4/5
 12003  02E0  0087               	movwf	7
 12004  02E1  3000               	movlw	0
 12005  02E2  3FC0               	movwi [0]fsr1
 12006  02E3  3FC1               	movwi [1]fsr1
 12007                           
 12008                           ;OverLoad_B1.c: 195: setLoad_AH_AL_Restore();
 12009  02E4  319A  2293  3180   	fcall	_setLoad_AH_AL_Restore
 12010                           
 12011                           ;OverLoad_B1.c: 198: setDimmerLights_Clear(1,1);
 12012  02E7  0020               	movlb	0	; select bank0
 12013  02E8  01A2               	clrf	setDimmerLights_Clear@command
 12014  02E9  0AA2               	incf	setDimmerLights_Clear@command,f
 12015  02EA  3001               	movlw	1
 12016  02EB  3198  20B8         	fcall	_setDimmerLights_Clear
 12017  02ED  0008               	return
 12018  02EE                     __end_of_Load_Main:	
 12019                           
 12020                           	psect	text60
 12021  0807                     __ptext60:	
 12022 ;; *************** function _setLoad_Exceptions *****************
 12023 ;; Defined at:
 12024 ;;		line 228 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;  command         1    wreg     unsigned char 
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;  command         1   12[BANK0 ] unsigned char 
 12029 ;; Return value:  Size  Location     Type
 12030 ;;		None               void
 12031 ;; Registers used:
 12032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;Total ram usage:        2 bytes
 12043 ;; Hardware stack levels used:    1
 12044 ;; Hardware stack levels required when called:    8
 12045 ;; This function calls:
 12046 ;;		_DimmerLights_Exceptions
 12047 ;;		_setLED
 12048 ;;		_setRF_Enable
 12049 ;;		_setSw_Enable
 12050 ;; This function is called by:
 12051 ;;		_Load_Main
 12052 ;; This function uses a non-reentrant model
 12053 ;;
 12054                           
 12055                           
 12056                           ;psect for function _setLoad_Exceptions
 12057  0807                     _setLoad_Exceptions:	
 12058                           
 12059                           ;incstack = 0
 12060                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12061                           ;setLoad_Exceptions@command stored from wreg
 12062  0807  0020               	movlb	0	; select bank0
 12063  0808  00AC               	movwf	setLoad_Exceptions@command
 12064                           
 12065                           ;OverLoad_B1.c: 230: Load->ERROR=command;
 12066  0809  086E               	movf	_Load,w
 12067  080A  0086               	movwf	6
 12068  080B  3002               	movlw	2	; select bank4/5
 12069  080C  0087               	movwf	7
 12070  080D  082C               	movf	setLoad_Exceptions@command,w
 12071  080E  1281               	bcf	1,5
 12072  080F  1D03               	skipz
 12073  0810  1681               	bsf	1,5
 12074                           
 12075                           ;OverLoad_B1.c: 231: Load->Safe=(~command) & 0x01;
 12076  0811  092C               	comf	setLoad_Exceptions@command,w
 12077  0812  3901               	andlw	1
 12078  0813  00AB               	movwf	??_setLoad_Exceptions
 12079  0814  086E               	movf	_Load,w
 12080  0815  0086               	movwf	6
 12081  0816  3002               	movlw	2	; select bank4/5
 12082  0817  0087               	movwf	7
 12083  0818  0DAB               	rlf	??_setLoad_Exceptions,f
 12084  0819  0DAB               	rlf	??_setLoad_Exceptions,f
 12085  081A  0DAB               	rlf	??_setLoad_Exceptions,f
 12086  081B  0801               	movf	1,w
 12087  081C  062B               	xorwf	??_setLoad_Exceptions,w
 12088  081D  39F7               	andlw	-9
 12089  081E  062B               	xorwf	??_setLoad_Exceptions,w
 12090  081F  0081               	movwf	1
 12091                           
 12092                           ;OverLoad_B1.c: 232: Load->ErrorStatus=command;
 12093  0820  082C               	movf	setLoad_Exceptions@command,w
 12094  0821  00AB               	movwf	??_setLoad_Exceptions
 12095  0822  086E               	movf	_Load,w
 12096  0823  3E05               	addlw	5
 12097  0824  0086               	movwf	6
 12098  0825  3002               	movlw	2	; select bank4/5
 12099  0826  0087               	movwf	7
 12100  0827  082B               	movf	??_setLoad_Exceptions,w
 12101  0828  0081               	movwf	1
 12102                           
 12103                           ;OverLoad_B1.c: 234: if(command)
 12104  0829  082C               	movf	setLoad_Exceptions@command,w
 12105  082A  1903               	btfsc	3,2
 12106  082B  2837               	goto	l1813
 12107                           
 12108                           ;OverLoad_B1.c: 235: {
 12109                           ;OverLoad_B1.c: 236: DimmerLights_Exceptions(2);
 12110  082C  3002               	movlw	2
 12111  082D  3191  2165  3188   	fcall	_DimmerLights_Exceptions
 12112                           
 12113                           ;OverLoad_B1.c: 238: setLED(2,1);
 12114  0830  0020               	movlb	0	; select bank0
 12115  0831  01A2               	clrf	setLED@command
 12116  0832  0AA2               	incf	setLED@command,f
 12117  0833  3002               	movlw	2
 12118  0834  3192  2276  3188   	fcall	_setLED
 12119  0837                     l1813:	
 12120                           
 12121                           ;OverLoad_B1.c: 240: }
 12122                           ;OverLoad_B1.c: 241: setLED(99,command+10);
 12123  0837  0020               	movlb	0	; select bank0
 12124  0838  082C               	movf	setLoad_Exceptions@command,w
 12125  0839  3E0A               	addlw	10
 12126  083A  00AB               	movwf	??_setLoad_Exceptions
 12127  083B  082B               	movf	??_setLoad_Exceptions,w
 12128  083C  00A2               	movwf	setLED@command
 12129  083D  3063               	movlw	99
 12130  083E  3192  2276  3188   	fcall	_setLED
 12131                           
 12132                           ;OverLoad_B1.c: 243: setSw_Enable((~command) & 0x01);
 12133  0841  0020               	movlb	0	; select bank0
 12134  0842  092C               	comf	setLoad_Exceptions@command,w
 12135  0843  3901               	andlw	1
 12136  0844  3198  2079  3188   	fcall	_setSw_Enable
 12137                           
 12138                           ;OverLoad_B1.c: 245: setRF_Enable(1,(~command) & 0x01);
 12139  0847  0020               	movlb	0	; select bank0
 12140  0848  092C               	comf	setLoad_Exceptions@command,w
 12141  0849  3901               	andlw	1
 12142  084A  00AB               	movwf	??_setLoad_Exceptions
 12143  084B  082B               	movf	??_setLoad_Exceptions,w
 12144  084C  00A2               	movwf	setRF_Enable@command
 12145  084D  3001               	movlw	1
 12146  084E  319B  2399         	fcall	_setRF_Enable
 12147  0850  0008               	return
 12148  0851                     __end_of_setLoad_Exceptions:	
 12149                           
 12150                           	psect	text61
 12151  1879                     __ptext61:	
 12152 ;; *************** function _setSw_Enable *****************
 12153 ;; Defined at:
 12154 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Switch_B1.c"
 12155 ;; Parameters:    Size  Location     Type
 12156 ;;  command         1    wreg     unsigned char 
 12157 ;; Auto vars:     Size  Location     Type
 12158 ;;  command         1    2[BANK0 ] unsigned char 
 12159 ;; Return value:  Size  Location     Type
 12160 ;;		None               void
 12161 ;; Registers used:
 12162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12163 ;; Tracked objects:
 12164 ;;		On entry : 0/0
 12165 ;;		On exit  : 0/0
 12166 ;;		Unchanged: 0/0
 12167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;Total ram usage:        1 bytes
 12173 ;; Hardware stack levels used:    1
 12174 ;; Hardware stack levels required when called:    5
 12175 ;; This function calls:
 12176 ;;		_SwPointSelect
 12177 ;; This function is called by:
 12178 ;;		_MainT
 12179 ;;		_setLoad_Exceptions
 12180 ;;		_setOverTemp_Exceptions
 12181 ;;		_setPowerFault_Exceptions
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           
 12186                           ;psect for function _setSw_Enable
 12187  1879                     _setSw_Enable:	
 12188                           
 12189                           ;incstack = 0
 12190                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12191                           ;setSw_Enable@command stored from wreg
 12192  1879  0020               	movlb	0	; select bank0
 12193  187A  00A2               	movwf	setSw_Enable@command
 12194                           
 12195                           ;Switch_B1.c: 90: SwPointSelect(1);
 12196  187B  3001               	movlw	1
 12197  187C  31A6  26D7         	fcall	_SwPointSelect
 12198                           
 12199                           ;Switch_B1.c: 91: Sw->Enable=command;
 12200  187E  0020               	movlb	0	; select bank0
 12201  187F  086D               	movf	_Sw,w
 12202  1880  0086               	movwf	6
 12203  1881  3001               	movlw	1	; select bank2/3
 12204  1882  0087               	movwf	7
 12205  1883  0822               	movf	setSw_Enable@command,w
 12206  1884  1001               	bcf	1,0
 12207  1885  1D03               	skipz
 12208  1886  1401               	bsf	1,0
 12209  1887  0008               	return
 12210  1888                     __end_of_setSw_Enable:	
 12211                           
 12212                           	psect	text62
 12213  1B99                     __ptext62:	
 12214 ;; *************** function _setRF_Enable *****************
 12215 ;; Defined at:
 12216 ;;		line 178 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;  rf              1    wreg     unsigned char 
 12219 ;;  command         1    2[BANK0 ] unsigned char 
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;  rf              1    3[BANK0 ] unsigned char 
 12222 ;; Return value:  Size  Location     Type
 12223 ;;		None               void
 12224 ;; Registers used:
 12225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12226 ;; Tracked objects:
 12227 ;;		On entry : 0/0
 12228 ;;		On exit  : 0/0
 12229 ;;		Unchanged: 0/0
 12230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12231 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12234 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12235 ;;Total ram usage:        2 bytes
 12236 ;; Hardware stack levels used:    1
 12237 ;; Hardware stack levels required when called:    5
 12238 ;; This function calls:
 12239 ;;		_RfPointSelect
 12240 ;;		_setINT_GO
 12241 ;; This function is called by:
 12242 ;;		_MainT
 12243 ;;		_setLoad_Exceptions
 12244 ;;		_setOverTemp_Exceptions
 12245 ;;		_setPowerFault_Exceptions
 12246 ;; This function uses a non-reentrant model
 12247 ;;
 12248                           
 12249                           
 12250                           ;psect for function _setRF_Enable
 12251  1B99                     _setRF_Enable:	
 12252                           
 12253                           ;incstack = 0
 12254                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12255                           ;setRF_Enable@rf stored from wreg
 12256  1B99  0020               	movlb	0	; select bank0
 12257  1B9A  00A3               	movwf	setRF_Enable@rf
 12258                           
 12259                           ;RF_Control_B1.c: 180: RfPointSelect(rf);
 12260  1B9B  0823               	movf	setRF_Enable@rf,w
 12261  1B9C  31A6  26E2  319B   	fcall	_RfPointSelect
 12262                           
 12263                           ;RF_Control_B1.c: 181: RF->Enable=command;
 12264  1B9F  087B               	movf	_RF,w
 12265  1BA0  0086               	movwf	6
 12266  1BA1  0187               	clrf	7
 12267  1BA2  0020               	movlb	0	; select bank0
 12268  1BA3  0822               	movf	setRF_Enable@command,w
 12269  1BA4  1001               	bcf	1,0
 12270  1BA5  1D03               	skipz
 12271  1BA6  1401               	bsf	1,0
 12272                           
 12273                           ;RF_Control_B1.c: 182: RF->Learn=0;
 12274  1BA7  087B               	movf	_RF,w
 12275  1BA8  0086               	movwf	6
 12276  1BA9  0187               	clrf	7
 12277  1BAA  1301               	bcf	1,6
 12278                           
 12279                           ;RF_Control_B1.c: 183: RF->TransceiveGO=0;
 12280  1BAB  087B               	movf	_RF,w
 12281  1BAC  0086               	movwf	6
 12282  1BAD  0187               	clrf	7
 12283  1BAE  1101               	bcf	1,2
 12284                           
 12285                           ;RF_Control_B1.c: 184: RF->RxStatus=0;
 12286  1BAF  087B               	movf	_RF,w
 12287  1BB0  0086               	movwf	6
 12288  1BB1  0187               	clrf	7
 12289  1BB2  1181               	bcf	1,3
 12290                           
 12291                           ;RF_Control_B1.c: 185: RF->ReceiveGO=0;
 12292  1BB3  087B               	movf	_RF,w
 12293  1BB4  0086               	movwf	6
 12294  1BB5  0187               	clrf	7
 12295  1BB6  1081               	bcf	1,1
 12296                           
 12297                           ;RF_Control_B1.c: 186: RF->DebounceTime=0;
 12298  1BB7  0A7B               	incf	_RF,w
 12299  1BB8  0086               	movwf	6
 12300  1BB9  0187               	clrf	7
 12301  1BBA  0181               	clrf	1
 12302                           
 12303                           ;RF_Control_B1.c: 187: RF->Debounce=0;
 12304  1BBB  087B               	movf	_RF,w
 12305  1BBC  0086               	movwf	6
 12306  1BBD  0187               	clrf	7
 12307  1BBE  1281               	bcf	1,5
 12308                           
 12309                           ;RF_Control_B1.c: 188: setINT_GO(0);
 12310  1BBF  3000               	movlw	0
 12311  1BC0  31A6  2690         	fcall	_setINT_GO
 12312  1BC2  0008               	return
 12313  1BC3                     __end_of_setRF_Enable:	
 12314                           
 12315                           	psect	text63
 12316  2690                     __ptext63:	
 12317 ;; *************** function _setINT_GO *****************
 12318 ;; Defined at:
 12319 ;;		line 235 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 12320 ;; Parameters:    Size  Location     Type
 12321 ;;  command         1    wreg     unsigned char 
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;  command         1    0[BANK0 ] unsigned char 
 12324 ;; Return value:  Size  Location     Type
 12325 ;;		None               void
 12326 ;; Registers used:
 12327 ;;		wreg
 12328 ;; Tracked objects:
 12329 ;;		On entry : 0/0
 12330 ;;		On exit  : 0/0
 12331 ;;		Unchanged: 0/0
 12332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;Total ram usage:        1 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; Hardware stack levels required when called:    4
 12340 ;; This function calls:
 12341 ;;		Nothing
 12342 ;; This function is called by:
 12343 ;;		_setRF_Main
 12344 ;;		_setRF_Enable
 12345 ;;		_RF_RxDisable
 12346 ;; This function uses a non-reentrant model
 12347 ;;
 12348                           
 12349                           
 12350                           ;psect for function _setINT_GO
 12351  2690                     _setINT_GO:	
 12352                           
 12353                           ;incstack = 0
 12354                           ; Regs used in _setINT_GO: [wreg]
 12355                           ;setINT_GO@command stored from wreg
 12356  2690  0020               	movlb	0	; select bank0
 12357  2691  00A0               	movwf	setINT_GO@command
 12358                           
 12359                           ;MCU_16f1518_B1.c: 237: INTF=0;
 12360  2692  108B               	bcf	11,1	;volatile
 12361                           
 12362                           ;MCU_16f1518_B1.c: 238: INTE=command;
 12363  2693  1C20               	btfss	setINT_GO@command,0
 12364  2694  2E97               	goto	u7750
 12365  2695  160B               	bsf	11,4	;volatile
 12366  2696  0008               	return
 12367  2697                     u7750:	
 12368  2697  120B               	bcf	11,4	;volatile
 12369  2698  0008               	return
 12370  2699                     __end_of_setINT_GO:	
 12371                           
 12372                           	psect	text64
 12373  1165                     __ptext64:	
 12374 ;; *************** function _DimmerLights_Exceptions *****************
 12375 ;; Defined at:
 12376 ;;		line 237 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;  status          1    wreg     unsigned char 
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;  status          1   10[BANK0 ] unsigned char 
 12381 ;; Return value:  Size  Location     Type
 12382 ;;		None               void
 12383 ;; Registers used:
 12384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;Total ram usage:        1 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; Hardware stack levels required when called:    7
 12397 ;; This function calls:
 12398 ;;		_getDimmerLights_StatusFlag
 12399 ;;		_setBuz
 12400 ;;		_setDimmerLights_ERROR
 12401 ;;		_setDimmerLights_TriggerERROR
 12402 ;; This function is called by:
 12403 ;;		_setLoad_Exceptions
 12404 ;;		_setOverTemp_Exceptions
 12405 ;;		_setPowerFault_Exceptions
 12406 ;; This function uses a non-reentrant model
 12407 ;;
 12408                           
 12409                           
 12410                           ;psect for function _DimmerLights_Exceptions
 12411  1165                     _DimmerLights_Exceptions:	
 12412                           
 12413                           ;incstack = 0
 12414                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12415                           ;DimmerLights_Exceptions@status stored from wreg
 12416  1165  0020               	movlb	0	; select bank0
 12417  1166  00AA               	movwf	DimmerLights_Exceptions@status
 12418                           
 12419                           ;Dimmer_B1.c: 239: if(status == 1)
 12420  1167  082A               	movf	DimmerLights_Exceptions@status,w
 12421  1168  3A01               	xorlw	1
 12422  1169  1D03               	skipz
 12423  116A  297B               	goto	l8362
 12424                           
 12425                           ;Dimmer_B1.c: 240: {
 12426                           ;Dimmer_B1.c: 241: if(getDimmerLights_StatusFlag())
 12427  116B  31A7  2761  3191   	fcall	_getDimmerLights_StatusFlag
 12428  116E  3A00               	xorlw	0
 12429  116F  1903               	skipnz
 12430  1170  2993               	goto	l8368
 12431                           
 12432                           ;Dimmer_B1.c: 242: {
 12433                           ;Dimmer_B1.c: 243: setBuz(10,300);
 12434  1171  302C               	movlw	44
 12435  1172  0020               	movlb	0	; select bank0
 12436  1173  00A6               	movwf	setBuz@time
 12437  1174  3001               	movlw	1
 12438  1175  00A7               	movwf	setBuz@time+1
 12439  1176  300A               	movlw	10
 12440  1177  3197  2710  3191   	fcall	_setBuz
 12441  117A  2993               	goto	l8368
 12442  117B                     l8362:	
 12443                           ;Dimmer_B1.c: 255: }
 12444                           
 12445                           ;Dimmer_B1.c: 244: }
 12446                           ;Dimmer_B1.c: 247: setDimmerLights_ERROR(1);
 12447                           
 12448                           
 12449                           ;Dimmer_B1.c: 256: else if(status == 2)
 12450  117B  0020               	movlb	0	; select bank0
 12451  117C  082A               	movf	DimmerLights_Exceptions@status,w
 12452  117D  3A02               	xorlw	2
 12453  117E  1D03               	skipz
 12454  117F  298E               	goto	l8366
 12455                           
 12456                           ;Dimmer_B1.c: 257: {
 12457                           ;Dimmer_B1.c: 258: setBuz(5,300);
 12458  1180  302C               	movlw	44
 12459  1181  00A6               	movwf	setBuz@time
 12460  1182  3001               	movlw	1
 12461  1183  00A7               	movwf	setBuz@time+1
 12462  1184  3005               	movlw	5
 12463  1185  3197  2710  3191   	fcall	_setBuz
 12464                           
 12465                           ;Dimmer_B1.c: 259: setDimmerLights_ERROR(Dimmer->Load);
 12466  1188  0021               	movlb	1	; select bank1
 12467  1189  0A39               	incf	_Dimmer^(0+128),w
 12468  118A  0086               	movwf	6
 12469  118B  0187               	clrf	7
 12470  118C  0801               	movf	1,w
 12471  118D  2994               	goto	L10
 12472  118E                     l8366:	
 12473                           ;Dimmer_B1.c: 260: }
 12474                           
 12475                           
 12476                           ;Dimmer_B1.c: 261: else if(status == 3)
 12477  118E  0020               	movlb	0	; select bank0
 12478  118F  082A               	movf	DimmerLights_Exceptions@status,w
 12479  1190  3A03               	xorlw	3
 12480  1191  1D03               	skipz
 12481  1192  2997               	goto	l864
 12482  1193                     l8368:	
 12483                           
 12484                           ;Dimmer_B1.c: 262: {
 12485                           ;Dimmer_B1.c: 264: setDimmerLights_ERROR(1);
 12486  1193  3001               	movlw	1
 12487  1194                     L10:	
 12488  1194  3190  20B5  3191   	fcall	_setDimmerLights_ERROR
 12489  1197                     l864:	
 12490                           
 12491                           ;Dimmer_B1.c: 272: }
 12492                           ;Dimmer_B1.c: 275: setDimmerLights_TriggerERROR(1,0);
 12493  1197  0020               	movlb	0	; select bank0
 12494  1198  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12495  1199  3001               	movlw	1
 12496  119A  319B  23C3  3191   	fcall	_setDimmerLights_TriggerERROR
 12497                           
 12498                           ;Dimmer_B1.c: 284: if(TMain->SelfTest == 0)
 12499  119D  087D               	movf	_TMain,w
 12500  119E  3E03               	addlw	3
 12501  119F  0086               	movwf	6
 12502  11A0  3001               	movlw	1	; select bank2/3
 12503  11A1  0087               	movwf	7
 12504  11A2  1801               	btfsc	1,0
 12505  11A3  0008               	return
 12506                           
 12507                           ;Dimmer_B1.c: 285: {
 12508                           ;Dimmer_B1.c: 286: TMain->i=0;
 12509  11A4  087D               	movf	_TMain,w
 12510  11A5  3E0E               	addlw	14
 12511  11A6  0086               	movwf	6
 12512  11A7  3001               	movlw	1	; select bank2/3
 12513  11A8  0087               	movwf	7
 12514  11A9  1001               	bcf	1,0
 12515                           
 12516                           ;Dimmer_B1.c: 287: TMain->j=0;
 12517  11AA  087D               	movf	_TMain,w
 12518  11AB  3E0E               	addlw	14
 12519  11AC  0086               	movwf	6
 12520  11AD  3001               	movlw	1	; select bank2/3
 12521  11AE  0087               	movwf	7
 12522  11AF  1081               	bcf	1,1
 12523                           
 12524                           ;Dimmer_B1.c: 288: TMain->k=1;
 12525  11B0  087D               	movf	_TMain,w
 12526  11B1  3E0E               	addlw	14
 12527  11B2  0086               	movwf	6
 12528  11B3  3001               	movlw	1	; select bank2/3
 12529  11B4  0087               	movwf	7
 12530  11B5  1501               	bsf	1,2
 12531                           
 12532                           ;Dimmer_B1.c: 289: TMain->Count2=0;
 12533  11B6  087D               	movf	_TMain,w
 12534  11B7  3E08               	addlw	8
 12535  11B8  0086               	movwf	6
 12536  11B9  3001               	movlw	1	; select bank2/3
 12537  11BA  0087               	movwf	7
 12538  11BB  3000               	movlw	0
 12539  11BC  3FC0               	movwi [0]fsr1
 12540  11BD  3FC1               	movwi [1]fsr1
 12541  11BE  0008               	return
 12542  11BF                     __end_of_DimmerLights_Exceptions:	
 12543                           
 12544                           	psect	text65
 12545  1BC3                     __ptext65:	
 12546 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12547 ;; Defined at:
 12548 ;;		line 311 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 12549 ;; Parameters:    Size  Location     Type
 12550 ;;  lights          1    wreg     unsigned char 
 12551 ;;  command         1    2[BANK0 ] unsigned char 
 12552 ;; Auto vars:     Size  Location     Type
 12553 ;;  lights          1    3[BANK0 ] unsigned char 
 12554 ;; Return value:  Size  Location     Type
 12555 ;;		None               void
 12556 ;; Registers used:
 12557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12558 ;; Tracked objects:
 12559 ;;		On entry : 0/0
 12560 ;;		On exit  : 0/0
 12561 ;;		Unchanged: 0/0
 12562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12563 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;Total ram usage:        2 bytes
 12568 ;; Hardware stack levels used:    1
 12569 ;; Hardware stack levels required when called:    5
 12570 ;; This function calls:
 12571 ;;		_DimmerLightsPointSelect
 12572 ;; This function is called by:
 12573 ;;		_DimmerLights_Exceptions
 12574 ;; This function uses a non-reentrant model
 12575 ;;
 12576                           
 12577                           
 12578                           ;psect for function _setDimmerLights_TriggerERROR
 12579  1BC3                     _setDimmerLights_TriggerERROR:	
 12580                           
 12581                           ;incstack = 0
 12582                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12583                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12584  1BC3  0020               	movlb	0	; select bank0
 12585  1BC4  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12586                           
 12587                           ;Dimmer_B1.c: 313: DimmerLightsPointSelect(lights);
 12588  1BC5  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12589  1BC6  31A6  26CC         	fcall	_DimmerLightsPointSelect
 12590                           
 12591                           ;Dimmer_B1.c: 314: DimmerLights->Trigger=command;
 12592  1BC8  0020               	movlb	0	; select bank0
 12593  1BC9  086C               	movf	_DimmerLights,w
 12594  1BCA  3E09               	addlw	9
 12595  1BCB  0086               	movwf	6
 12596  1BCC  3001               	movlw	1	; select bank2/3
 12597  1BCD  0087               	movwf	7
 12598  1BCE  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12599  1BCF  1081               	bcf	1,1
 12600  1BD0  1D03               	skipz
 12601  1BD1  1481               	bsf	1,1
 12602                           
 12603                           ;Dimmer_B1.c: 315: DimmerLights->Switch=command;
 12604  1BD2  086C               	movf	_DimmerLights,w
 12605  1BD3  3E09               	addlw	9
 12606  1BD4  0086               	movwf	6
 12607  1BD5  3001               	movlw	1	; select bank2/3
 12608  1BD6  0087               	movwf	7
 12609  1BD7  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12610  1BD8  1001               	bcf	1,0
 12611  1BD9  1D03               	skipz
 12612  1BDA  1401               	bsf	1,0
 12613                           
 12614                           ;Dimmer_B1.c: 316: DimmerLights->TriggerAdj=command;
 12615  1BDB  086C               	movf	_DimmerLights,w
 12616  1BDC  3E09               	addlw	9
 12617  1BDD  0086               	movwf	6
 12618  1BDE  3001               	movlw	1	; select bank2/3
 12619  1BDF  0087               	movwf	7
 12620  1BE0  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12621  1BE1  1181               	bcf	1,3
 12622  1BE2  1D03               	skipz
 12623  1BE3  1581               	bsf	1,3
 12624                           
 12625                           ;Dimmer_B1.c: 317: DimmerLights->AdjGo=command;
 12626  1BE4  086C               	movf	_DimmerLights,w
 12627  1BE5  3E09               	addlw	9
 12628  1BE6  0086               	movwf	6
 12629  1BE7  3001               	movlw	1	; select bank2/3
 12630  1BE8  0087               	movwf	7
 12631  1BE9  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12632  1BEA  1101               	bcf	1,2
 12633  1BEB  1D03               	skipz
 12634  1BEC  1501               	bsf	1,2
 12635  1BED  0008               	return
 12636  1BEE                     __end_of_setDimmerLights_TriggerERROR:	
 12637                           
 12638                           	psect	text66
 12639  10B5                     __ptext66:	
 12640 ;; *************** function _setDimmerLights_ERROR *****************
 12641 ;; Defined at:
 12642 ;;		line 293 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;  lights          1    wreg     unsigned char 
 12645 ;; Auto vars:     Size  Location     Type
 12646 ;;  lights          1    5[BANK0 ] unsigned char 
 12647 ;; Return value:  Size  Location     Type
 12648 ;;		None               void
 12649 ;; Registers used:
 12650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12651 ;; Tracked objects:
 12652 ;;		On entry : 0/0
 12653 ;;		On exit  : 0/0
 12654 ;;		Unchanged: 0/0
 12655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;Total ram usage:        2 bytes
 12661 ;; Hardware stack levels used:    1
 12662 ;; Hardware stack levels required when called:    6
 12663 ;; This function calls:
 12664 ;;		_DimmerLightsPointSelect
 12665 ;;		_setLED
 12666 ;;		_setLoad_StatusOff
 12667 ;;		_setRFSW_Status
 12668 ;;		_setSw_Status
 12669 ;; This function is called by:
 12670 ;;		_DimmerLights_Exceptions
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673                           
 12674                           
 12675                           ;psect for function _setDimmerLights_ERROR
 12676  10B5                     _setDimmerLights_ERROR:	
 12677                           
 12678                           ;incstack = 0
 12679                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12680                           ;setDimmerLights_ERROR@lights stored from wreg
 12681  10B5  0020               	movlb	0	; select bank0
 12682  10B6  00A5               	movwf	setDimmerLights_ERROR@lights
 12683                           
 12684                           ;Dimmer_B1.c: 295: DimmerLightsPointSelect(lights);
 12685  10B7  0825               	movf	setDimmerLights_ERROR@lights,w
 12686  10B8  31A6  26CC  3190   	fcall	_DimmerLightsPointSelect
 12687                           
 12688                           ;Dimmer_B1.c: 296: if(DimmerLights->Status)
 12689  10BB  0020               	movlb	0	; select bank0
 12690  10BC  086C               	movf	_DimmerLights,w
 12691  10BD  0086               	movwf	6
 12692  10BE  3001               	movlw	1	; select bank2/3
 12693  10BF  0087               	movwf	7
 12694  10C0  1E81               	btfss	1,5
 12695  10C1  0008               	return
 12696                           
 12697                           ;Dimmer_B1.c: 297: {
 12698                           ;Dimmer_B1.c: 298: DimmerLights->Signal=0;
 12699  10C2  086C               	movf	_DimmerLights,w
 12700  10C3  0086               	movwf	6
 12701  10C4  3001               	movlw	1	; select bank2/3
 12702  10C5  0087               	movwf	7
 12703  10C6  1081               	bcf	1,1
 12704                           
 12705                           ;Dimmer_B1.c: 299: DimmerLights->AdjFlag=0;
 12706  10C7  086C               	movf	_DimmerLights,w
 12707  10C8  0086               	movwf	6
 12708  10C9  3001               	movlw	1	; select bank2/3
 12709  10CA  0087               	movwf	7
 12710  10CB  1181               	bcf	1,3
 12711                           
 12712                           ;Dimmer_B1.c: 300: DimmerLights->AdjStatus=0;
 12713  10CC  086C               	movf	_DimmerLights,w
 12714  10CD  0086               	movwf	6
 12715  10CE  3001               	movlw	1	; select bank2/3
 12716  10CF  0087               	movwf	7
 12717  10D0  1201               	bcf	1,4
 12718                           
 12719                           ;Dimmer_B1.c: 301: DimmerLights->StatusFlag=0;
 12720  10D1  086C               	movf	_DimmerLights,w
 12721  10D2  0086               	movwf	6
 12722  10D3  3001               	movlw	1	; select bank2/3
 12723  10D4  0087               	movwf	7
 12724  10D5  1301               	bcf	1,6
 12725                           
 12726                           ;Dimmer_B1.c: 302: DimmerLights->DimmingTimeValue=3;
 12727  10D6  3003               	movlw	3
 12728  10D7  00A4               	movwf	??_setDimmerLights_ERROR
 12729  10D8  086C               	movf	_DimmerLights,w
 12730  10D9  3E02               	addlw	2
 12731  10DA  0086               	movwf	6
 12732  10DB  3001               	movlw	1	; select bank2/3
 12733  10DC  0087               	movwf	7
 12734  10DD  0824               	movf	??_setDimmerLights_ERROR,w
 12735  10DE  0081               	movwf	1
 12736                           
 12737                           ;Dimmer_B1.c: 303: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 12738  10DF  086C               	movf	_DimmerLights,w
 12739  10E0  3E06               	addlw	6
 12740  10E1  0086               	movwf	6
 12741  10E2  3001               	movlw	1	; select bank2/3
 12742  10E3  0087               	movwf	7
 12743  10E4  0801               	movf	1,w
 12744  10E5  00A4               	movwf	??_setDimmerLights_ERROR
 12745  10E6  086C               	movf	_DimmerLights,w
 12746  10E7  3E04               	addlw	4
 12747  10E8  0086               	movwf	6
 12748  10E9  3001               	movlw	1	; select bank2/3
 12749  10EA  0087               	movwf	7
 12750  10EB  0824               	movf	??_setDimmerLights_ERROR,w
 12751  10EC  0081               	movwf	1
 12752                           
 12753                           ;Dimmer_B1.c: 304: Dimmer->Detect=1;
 12754  10ED  0021               	movlb	1	; select bank1
 12755  10EE  0839               	movf	_Dimmer^(0+128),w
 12756  10EF  0086               	movwf	6
 12757  10F0  0187               	clrf	7
 12758  10F1  1401               	bsf	1,0
 12759                           
 12760                           ;Dimmer_B1.c: 305: setLoad_StatusOff(lights,1);
 12761  10F2  0020               	movlb	0	; select bank0
 12762  10F3  01A0               	clrf	setLoad_StatusOff@command
 12763  10F4  0AA0               	incf	setLoad_StatusOff@command,f
 12764  10F5  0825               	movf	setDimmerLights_ERROR@lights,w
 12765  10F6  319C  24AA  3190   	fcall	_setLoad_StatusOff
 12766                           
 12767                           ;Dimmer_B1.c: 306: setLED(lights,1);
 12768  10F9  0020               	movlb	0	; select bank0
 12769  10FA  01A2               	clrf	setLED@command
 12770  10FB  0AA2               	incf	setLED@command,f
 12771  10FC  0825               	movf	setDimmerLights_ERROR@lights,w
 12772  10FD  3192  2276  3190   	fcall	_setLED
 12773                           
 12774                           ;Dimmer_B1.c: 307: setSw_Status(lights,0);
 12775  1100  0020               	movlb	0	; select bank0
 12776  1101  01A2               	clrf	setSw_Status@command
 12777  1102  0825               	movf	setDimmerLights_ERROR@lights,w
 12778  1103  3198  206A  3190   	fcall	_setSw_Status
 12779                           
 12780                           ;Dimmer_B1.c: 308: setRFSW_Status(lights,0);
 12781  1106  0020               	movlb	0	; select bank0
 12782  1107  01A2               	clrf	setRFSW_Status@command
 12783  1108  0825               	movf	setDimmerLights_ERROR@lights,w
 12784  1109  31A7  27F1         	fcall	_setRFSW_Status
 12785  110B  0008               	return
 12786  110C                     __end_of_setDimmerLights_ERROR:	
 12787                           
 12788                           	psect	text67
 12789  18B8                     __ptext67:	
 12790 ;; *************** function _setDimmerLights_Clear *****************
 12791 ;; Defined at:
 12792 ;;		line 447 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;  lights          1    wreg     unsigned char 
 12795 ;;  command         1    2[BANK0 ] unsigned char 
 12796 ;; Auto vars:     Size  Location     Type
 12797 ;;  lights          1    3[BANK0 ] unsigned char 
 12798 ;; Return value:  Size  Location     Type
 12799 ;;		None               void
 12800 ;; Registers used:
 12801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12802 ;; Tracked objects:
 12803 ;;		On entry : 0/0
 12804 ;;		On exit  : 0/0
 12805 ;;		Unchanged: 0/0
 12806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12807 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;Total ram usage:        2 bytes
 12812 ;; Hardware stack levels used:    1
 12813 ;; Hardware stack levels required when called:    5
 12814 ;; This function calls:
 12815 ;;		_DimmerLightsPointSelect
 12816 ;; This function is called by:
 12817 ;;		_Load_Main
 12818 ;; This function uses a non-reentrant model
 12819 ;;
 12820                           
 12821                           
 12822                           ;psect for function _setDimmerLights_Clear
 12823  18B8                     _setDimmerLights_Clear:	
 12824                           
 12825                           ;incstack = 0
 12826                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12827                           ;setDimmerLights_Clear@lights stored from wreg
 12828  18B8  0020               	movlb	0	; select bank0
 12829  18B9  00A3               	movwf	setDimmerLights_Clear@lights
 12830                           
 12831                           ;Dimmer_B1.c: 449: DimmerLightsPointSelect(lights);
 12832  18BA  0823               	movf	setDimmerLights_Clear@lights,w
 12833  18BB  31A6  26CC         	fcall	_DimmerLightsPointSelect
 12834                           
 12835                           ;Dimmer_B1.c: 450: DimmerLights->Clear=command;
 12836  18BD  0020               	movlb	0	; select bank0
 12837  18BE  086C               	movf	_DimmerLights,w
 12838  18BF  3E0C               	addlw	12
 12839  18C0  0086               	movwf	6
 12840  18C1  3001               	movlw	1	; select bank2/3
 12841  18C2  0087               	movwf	7
 12842  18C3  0822               	movf	setDimmerLights_Clear@command,w
 12843  18C4  1001               	bcf	1,0
 12844  18C5  1D03               	skipz
 12845  18C6  1401               	bsf	1,0
 12846  18C7  0008               	return
 12847  18C8                     __end_of_setDimmerLights_Clear:	
 12848                           
 12849                           	psect	text68
 12850  2679                     __ptext68:	
 12851 ;; *************** function _getTemp_Safe *****************
 12852 ;; Defined at:
 12853 ;;		line 26 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\OverTemperature_B1.c"
 12854 ;; Parameters:    Size  Location     Type
 12855 ;;		None
 12856 ;; Auto vars:     Size  Location     Type
 12857 ;;		None
 12858 ;; Return value:  Size  Location     Type
 12859 ;;                  1    wreg      unsigned char 
 12860 ;; Registers used:
 12861 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12862 ;; Tracked objects:
 12863 ;;		On entry : 0/0
 12864 ;;		On exit  : 0/0
 12865 ;;		Unchanged: 0/0
 12866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;Total ram usage:        0 bytes
 12872 ;; Hardware stack levels used:    1
 12873 ;; Hardware stack levels required when called:    4
 12874 ;; This function calls:
 12875 ;;		Nothing
 12876 ;; This function is called by:
 12877 ;;		_Load_Main
 12878 ;;		_setPowerFault_Main
 12879 ;; This function uses a non-reentrant model
 12880 ;;
 12881                           
 12882                           
 12883                           ;psect for function _getTemp_Safe
 12884  2679                     _getTemp_Safe:	
 12885                           
 12886                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 12887                           
 12888                           ;incstack = 0
 12889                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12890  2679  087C               	movf	_Temp,w
 12891  267A  0086               	movwf	6
 12892  267B  3001               	movlw	1	; select bank2/3
 12893  267C  0087               	movwf	7
 12894  267D  0E01               	swapf	1,w
 12895  267E  3901               	andlw	1
 12896  267F  0008               	return
 12897  2680                     __end_of_getTemp_Safe:	
 12898                           
 12899                           	psect	text69
 12900  2672                     __ptext69:	
 12901 ;; *************** function _getPF_Safe *****************
 12902 ;; Defined at:
 12903 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\PowerFault_B1.c"
 12904 ;; Parameters:    Size  Location     Type
 12905 ;;		None
 12906 ;; Auto vars:     Size  Location     Type
 12907 ;;		None
 12908 ;; Return value:  Size  Location     Type
 12909 ;;                  1    wreg      unsigned char 
 12910 ;; Registers used:
 12911 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12912 ;; Tracked objects:
 12913 ;;		On entry : 0/0
 12914 ;;		On exit  : 0/0
 12915 ;;		Unchanged: 0/0
 12916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;Total ram usage:        0 bytes
 12922 ;; Hardware stack levels used:    1
 12923 ;; Hardware stack levels required when called:    4
 12924 ;; This function calls:
 12925 ;;		Nothing
 12926 ;; This function is called by:
 12927 ;;		_Load_Main
 12928 ;;		_setTemp_Main
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           
 12933                           ;psect for function _getPF_Safe
 12934  2672                     _getPF_Safe:	
 12935                           
 12936                           ;PowerFault_B1.c: 42: return PF->Safe;
 12937                           
 12938                           ;incstack = 0
 12939                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12940  2672  087A               	movf	_PF,w
 12941  2673  0086               	movwf	6
 12942  2674  0187               	clrf	7
 12943  2675  0C01               	rrf	1,w
 12944  2676  0C89               	rrf	9,f
 12945  2677  3901               	andlw	1
 12946  2678  0008               	return
 12947  2679                     __end_of_getPF_Safe:	
 12948                           
 12949                           	psect	text70
 12950  1D73                     __ptext70:	
 12951 ;; *************** function ___lwdiv *****************
 12952 ;; Defined at:
 12953 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12954 ;; Parameters:    Size  Location     Type
 12955 ;;  divisor         2    0[BANK0 ] unsigned int 
 12956 ;;  dividend        2    2[BANK0 ] unsigned int 
 12957 ;; Auto vars:     Size  Location     Type
 12958 ;;  quotient        2    5[BANK0 ] unsigned int 
 12959 ;;  counter         1    7[BANK0 ] unsigned char 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  2    0[BANK0 ] unsigned int 
 12962 ;; Registers used:
 12963 ;;		wreg, status,2, status,0
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12969 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;Total ram usage:        8 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    4
 12976 ;; This function calls:
 12977 ;;		Nothing
 12978 ;; This function is called by:
 12979 ;;		_Load_Main
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           
 12984                           ;psect for function ___lwdiv
 12985  1D73                     ___lwdiv:	
 12986                           
 12987                           ;incstack = 0
 12988                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12989  1D73  0020               	movlb	0	; select bank0
 12990  1D74  01A5               	clrf	___lwdiv@quotient
 12991  1D75  01A6               	clrf	___lwdiv@quotient+1
 12992  1D76  0821               	movf	___lwdiv@divisor+1,w
 12993  1D77  0420               	iorwf	___lwdiv@divisor,w
 12994  1D78  1903               	skipnz
 12995  1D79  2DA3               	goto	l7478
 12996  1D7A  01A7               	clrf	___lwdiv@counter
 12997  1D7B  0AA7               	incf	___lwdiv@counter,f
 12998  1D7C                     l7466:	
 12999  1D7C  1BA1               	btfsc	___lwdiv@divisor+1,7
 13000  1D7D  2D88               	goto	l7468
 13001  1D7E  3001               	movlw	1
 13002  1D7F                     u6435:	
 13003  1D7F  35A0               	lslf	___lwdiv@divisor,f
 13004  1D80  0DA1               	rlf	___lwdiv@divisor+1,f
 13005  1D81  0B89               	decfsz	9,f
 13006  1D82  2D7F               	goto	u6435
 13007  1D83  3001               	movlw	1
 13008  1D84  00A4               	movwf	??___lwdiv
 13009  1D85  0824               	movf	??___lwdiv,w
 13010  1D86  07A7               	addwf	___lwdiv@counter,f
 13011  1D87  2D7C               	goto	l7466
 13012  1D88                     l7468:	
 13013  1D88  3001               	movlw	1
 13014  1D89                     u6455:	
 13015  1D89  35A5               	lslf	___lwdiv@quotient,f
 13016  1D8A  0DA6               	rlf	___lwdiv@quotient+1,f
 13017  1D8B  0B89               	decfsz	9,f
 13018  1D8C  2D89               	goto	u6455
 13019  1D8D  0821               	movf	___lwdiv@divisor+1,w
 13020  1D8E  0223               	subwf	___lwdiv@dividend+1,w
 13021  1D8F  1D03               	skipz
 13022  1D90  2D93               	goto	u6465
 13023  1D91  0820               	movf	___lwdiv@divisor,w
 13024  1D92  0222               	subwf	___lwdiv@dividend,w
 13025  1D93                     u6465:	
 13026  1D93  1C03               	skipc
 13027  1D94  2D9A               	goto	l7474
 13028  1D95  0820               	movf	___lwdiv@divisor,w
 13029  1D96  02A2               	subwf	___lwdiv@dividend,f
 13030  1D97  0821               	movf	___lwdiv@divisor+1,w
 13031  1D98  3BA3               	subwfb	___lwdiv@dividend+1,f
 13032  1D99  1425               	bsf	___lwdiv@quotient,0
 13033  1D9A                     l7474:	
 13034  1D9A  3001               	movlw	1
 13035  1D9B                     u6475:	
 13036  1D9B  36A1               	lsrf	___lwdiv@divisor+1,f
 13037  1D9C  0CA0               	rrf	___lwdiv@divisor,f
 13038  1D9D  0B89               	decfsz	9,f
 13039  1D9E  2D9B               	goto	u6475
 13040  1D9F  3001               	movlw	1
 13041  1DA0  02A7               	subwf	___lwdiv@counter,f
 13042  1DA1  1D03               	btfss	3,2
 13043  1DA2  2D88               	goto	l7468
 13044  1DA3                     l7478:	
 13045  1DA3  0826               	movf	___lwdiv@quotient+1,w
 13046  1DA4  01A1               	clrf	?___lwdiv+1
 13047  1DA5  07A1               	addwf	?___lwdiv+1,f
 13048  1DA6  0825               	movf	___lwdiv@quotient,w
 13049  1DA7  01A0               	clrf	?___lwdiv
 13050  1DA8  07A0               	addwf	?___lwdiv,f
 13051  1DA9  0008               	return
 13052  1DAA                     __end_of___lwdiv:	
 13053                           
 13054                           	psect	text71
 13055  2791                     __ptext71:	
 13056 ;; *************** function _Load_Initialization *****************
 13057 ;; Defined at:
 13058 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.1
      +.1.1\Release\OverLoad_B1.c"
 13059 ;; Parameters:    Size  Location     Type
 13060 ;;		None
 13061 ;; Auto vars:     Size  Location     Type
 13062 ;;		None
 13063 ;; Return value:  Size  Location     Type
 13064 ;;		None               void
 13065 ;; Registers used:
 13066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13067 ;; Tracked objects:
 13068 ;;		On entry : 0/0
 13069 ;;		On exit  : 0/0
 13070 ;;		Unchanged: 0/0
 13071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13075 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13076 ;;Total ram usage:        1 bytes
 13077 ;; Hardware stack levels used:    1
 13078 ;; Hardware stack levels required when called:    5
 13079 ;; This function calls:
 13080 ;;		_setLoad_AH_AL_Restore
 13081 ;; This function is called by:
 13082 ;;		_main
 13083 ;; This function uses a non-reentrant model
 13084 ;;
 13085                           
 13086                           
 13087                           ;psect for function _Load_Initialization
 13088  2791                     _Load_Initialization:	
 13089                           
 13090                           ;OverLoad_B1.c: 10: Load=&Load1;
 13091                           
 13092                           ;incstack = 0
 13093                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13094  2791  3020               	movlw	_Load1& (0+255)
 13095  2792  0020               	movlb	0	; select bank0
 13096  2793  00A2               	movwf	??_Load_Initialization
 13097  2794  0822               	movf	??_Load_Initialization,w
 13098  2795  00EE               	movwf	_Load
 13099                           
 13100                           ;OverLoad_B1.c: 11: Load->Safe=1;
 13101  2796  086E               	movf	_Load,w
 13102  2797  0086               	movwf	6
 13103  2798  3002               	movlw	2	; select bank4/5
 13104  2799  0087               	movwf	7
 13105  279A  1581               	bsf	1,3
 13106                           
 13107                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13108  279B  319A  2293         	fcall	_setLoad_AH_AL_Restore
 13109  279D  0008               	return
 13110  279E                     __end_of_Load_Initialization:	
 13111                           
 13112                           	psect	text72
 13113  1A93                     __ptext72:	
 13114 ;; *************** function _setLoad_AH_AL_Restore *****************
 13115 ;; Defined at:
 13116 ;;		line 310 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 13117 ;; Parameters:    Size  Location     Type
 13118 ;;		None
 13119 ;; Auto vars:     Size  Location     Type
 13120 ;;  i               1    1[BANK0 ] unsigned char 
 13121 ;; Return value:  Size  Location     Type
 13122 ;;		None               void
 13123 ;; Registers used:
 13124 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13125 ;; Tracked objects:
 13126 ;;		On entry : 0/0
 13127 ;;		On exit  : 0/0
 13128 ;;		Unchanged: 0/0
 13129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;Total ram usage:        2 bytes
 13135 ;; Hardware stack levels used:    1
 13136 ;; Hardware stack levels required when called:    4
 13137 ;; This function calls:
 13138 ;;		Nothing
 13139 ;; This function is called by:
 13140 ;;		_Load_Initialization
 13141 ;;		_Load_Main
 13142 ;; This function uses a non-reentrant model
 13143 ;;
 13144                           
 13145                           
 13146                           ;psect for function _setLoad_AH_AL_Restore
 13147  1A93                     _setLoad_AH_AL_Restore:	
 13148                           
 13149                           ;OverLoad_B1.c: 312: char i;
 13150                           ;OverLoad_B1.c: 313: for(i=0 ; i<5 ;i++)
 13151                           
 13152                           ;incstack = 0
 13153                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13154  1A93  0020               	movlb	0	; select bank0
 13155  1A94  01A1               	clrf	setLoad_AH_AL_Restore@i
 13156  1A95                     L11:	
 13157  1A95  3005               	movlw	5
 13158  1A96  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13159  1A97  1803               	btfsc	3,0
 13160  1A98  0008               	return
 13161                           
 13162                           ;OverLoad_B1.c: 314: {
 13163                           ;OverLoad_B1.c: 315: Load->AH[i]=0;
 13164  1A99  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13165  1A9A  3E08               	addlw	8
 13166  1A9B  076E               	addwf	_Load,w
 13167  1A9C  00A0               	movwf	??_setLoad_AH_AL_Restore
 13168  1A9D  0820               	movf	??_setLoad_AH_AL_Restore,w
 13169  1A9E  0086               	movwf	6
 13170  1A9F  3002               	movlw	2	; select bank4/5
 13171  1AA0  0087               	movwf	7
 13172  1AA1  3000               	movlw	0
 13173  1AA2  3FC0               	movwi [0]fsr1
 13174  1AA3  3FC1               	movwi [1]fsr1
 13175                           
 13176                           ;OverLoad_B1.c: 316: Load->AL[i]=0xffff;
 13177  1AA4  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13178  1AA5  3E1A               	addlw	26
 13179  1AA6  076E               	addwf	_Load,w
 13180  1AA7  00A0               	movwf	??_setLoad_AH_AL_Restore
 13181  1AA8  0820               	movf	??_setLoad_AH_AL_Restore,w
 13182  1AA9  0086               	movwf	6
 13183  1AAA  3002               	movlw	2	; select bank4/5
 13184  1AAB  0087               	movwf	7
 13185  1AAC  30FF               	movlw	255
 13186  1AAD  3FC0               	movwi [0]fsr1
 13187  1AAE  30FF               	movlw	255
 13188  1AAF  3FC1               	movwi [1]fsr1
 13189  1AB0  3001               	movlw	1
 13190  1AB1  00A0               	movwf	??_setLoad_AH_AL_Restore
 13191  1AB2  0820               	movf	??_setLoad_AH_AL_Restore,w
 13192  1AB3  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13193  1AB4  2A95               	goto	L11
 13194  1AB5                     __end_of_setLoad_AH_AL_Restore:	
 13195                           
 13196                           	psect	text73
 13197  2785                     __ptext73:	
 13198 ;; *************** function _LED_Main *****************
 13199 ;; Defined at:
 13200 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\LED_B1.c"
 13201 ;; Parameters:    Size  Location     Type
 13202 ;;		None
 13203 ;; Auto vars:     Size  Location     Type
 13204 ;;		None
 13205 ;; Return value:  Size  Location     Type
 13206 ;;		None               void
 13207 ;; Registers used:
 13208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13209 ;; Tracked objects:
 13210 ;;		On entry : 0/0
 13211 ;;		On exit  : 0/0
 13212 ;;		Unchanged: 0/0
 13213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;Total ram usage:        0 bytes
 13219 ;; Hardware stack levels used:    1
 13220 ;; Hardware stack levels required when called:    6
 13221 ;; This function calls:
 13222 ;;		_setLED_Main
 13223 ;; This function is called by:
 13224 ;;		_main
 13225 ;; This function uses a non-reentrant model
 13226 ;;
 13227                           
 13228                           
 13229                           ;psect for function _LED_Main
 13230  2785                     _LED_Main:	
 13231                           
 13232                           ;LED_B1.c: 54: setLED_Main(1);
 13233                           
 13234                           ;incstack = 0
 13235                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13236  2785  3001               	movlw	1
 13237  2786  319E  2624  31A7   	fcall	_setLED_Main
 13238                           
 13239                           ;LED_B1.c: 57: setLED_Main(2);
 13240  2789  3002               	movlw	2
 13241  278A  319E  2624  31A7   	fcall	_setLED_Main
 13242                           
 13243                           ;LED_B1.c: 63: setLED_Main(99);
 13244  278D  3063               	movlw	99
 13245  278E  319E  2624         	fcall	_setLED_Main
 13246  2790  0008               	return
 13247  2791                     __end_of_LED_Main:	
 13248                           
 13249                           	psect	text74
 13250  1E24                     __ptext74:	
 13251 ;; *************** function _setLED_Main *****************
 13252 ;; Defined at:
 13253 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\LED_B1.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  led             1    wreg     unsigned char 
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;  led             1    4[BANK0 ] unsigned char 
 13258 ;; Return value:  Size  Location     Type
 13259 ;;		None               void
 13260 ;; Registers used:
 13261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;Total ram usage:        3 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    5
 13274 ;; This function calls:
 13275 ;;		_LedPointSelect
 13276 ;; This function is called by:
 13277 ;;		_LED_Main
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           
 13282                           ;psect for function _setLED_Main
 13283  1E24                     _setLED_Main:	
 13284                           
 13285                           ;incstack = 0
 13286                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13287                           ;setLED_Main@led stored from wreg
 13288  1E24  0020               	movlb	0	; select bank0
 13289  1E25  00A4               	movwf	setLED_Main@led
 13290                           
 13291                           ;LED_B1.c: 216: LedPointSelect(led);
 13292  1E26  0824               	movf	setLED_Main@led,w
 13293  1E27  319A  2271  319E   	fcall	_LedPointSelect
 13294                           
 13295                           ;LED_B1.c: 217: if(LED->GO)
 13296  1E2A  0021               	movlb	1	; select bank1
 13297  1E2B  083B               	movf	_LED^(0+128),w
 13298  1E2C  0086               	movwf	6
 13299  1E2D  0187               	clrf	7
 13300  1E2E  1C81               	btfss	1,1
 13301  1E2F  0008               	return
 13302                           
 13303                           ;LED_B1.c: 218: {
 13304                           ;LED_B1.c: 219: LED->Time++;
 13305  1E30  0A3B               	incf	_LED^(0+128),w
 13306  1E31  0086               	movwf	6
 13307  1E32  0187               	clrf	7
 13308  1E33  3001               	movlw	1
 13309  1E34  0781               	addwf	1,f
 13310  1E35  3141               	addfsr 1,1
 13311  1E36  1803               	skipnc
 13312  1E37  0A81               	incf	1,f
 13313                           
 13314                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13315  1E38  0A3B               	incf	_LED^(0+128),w
 13316  1E39  0086               	movwf	6
 13317  1E3A  0187               	clrf	7
 13318  1E3B  3F40               	moviw [0]fsr1
 13319  1E3C  0020               	movlb	0	; select bank0
 13320  1E3D  00A2               	movwf	??_setLED_Main
 13321  1E3E  3F41               	moviw [1]fsr1
 13322  1E3F  00A3               	movwf	??_setLED_Main+1
 13323  1E40  3000               	movlw	0
 13324  1E41  0223               	subwf	??_setLED_Main+1,w
 13325  1E42  3032               	movlw	50
 13326  1E43  1903               	skipnz
 13327  1E44  0222               	subwf	??_setLED_Main,w
 13328  1E45  1C03               	skipc
 13329  1E46  0008               	return
 13330                           
 13331                           ;LED_B1.c: 221: {
 13332                           ;LED_B1.c: 222: LED->Time=0;
 13333  1E47  0021               	movlb	1	; select bank1
 13334  1E48  0A3B               	incf	_LED^(0+128),w
 13335  1E49  0086               	movwf	6
 13336  1E4A  0187               	clrf	7
 13337  1E4B  3000               	movlw	0
 13338  1E4C  3FC0               	movwi [0]fsr1
 13339  1E4D  3FC1               	movwi [1]fsr1
 13340                           
 13341                           ;LED_B1.c: 224: if(led == 1)
 13342  1E4E  0020               	movlb	0	; select bank0
 13343  1E4F  0824               	movf	setLED_Main@led,w
 13344  1E50  3A01               	xorlw	1
 13345  1E51  1D03               	skipz
 13346  1E52  2E56               	goto	l7050
 13347                           
 13348                           ;LED_B1.c: 225: {
 13349                           ;LED_B1.c: 226: RA3=~RA3;
 13350  1E53  3008               	movlw	8
 13351  1E54  068C               	xorwf	12,f
 13352                           
 13353                           ;LED_B1.c: 227: }
 13354  1E55  0008               	return
 13355  1E56                     l7050:	
 13356                           
 13357                           ;LED_B1.c: 230: else if(led == 2)
 13358  1E56  0824               	movf	setLED_Main@led,w
 13359  1E57  3A02               	xorlw	2
 13360  1E58  1D03               	skipz
 13361  1E59  2E5D               	goto	l7054
 13362                           
 13363                           ;LED_B1.c: 231: {
 13364                           ;LED_B1.c: 232: RC7=~RC7;
 13365  1E5A  3080               	movlw	128
 13366  1E5B  068E               	xorwf	14,f
 13367                           
 13368                           ;LED_B1.c: 233: }
 13369  1E5C  0008               	return
 13370  1E5D                     l7054:	
 13371                           
 13372                           ;LED_B1.c: 242: else if(led == 99)
 13373  1E5D  0824               	movf	setLED_Main@led,w
 13374  1E5E  3A63               	xorlw	99
 13375  1E5F  1D03               	skipz
 13376  1E60  0008               	return
 13377                           
 13378                           ;LED_B1.c: 243: {
 13379                           ;LED_B1.c: 244: RB5=~RB5;
 13380  1E61  3020               	movlw	32
 13381  1E62  068D               	xorwf	13,f
 13382  1E63  0008               	return
 13383  1E64                     __end_of_setLED_Main:	
 13384                           
 13385                           	psect	text75
 13386  2779                     __ptext75:	
 13387 ;; *************** function _LED_Initialization *****************
 13388 ;; Defined at:
 13389 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\LED_B1.c"
 13390 ;; Parameters:    Size  Location     Type
 13391 ;;		None
 13392 ;; Auto vars:     Size  Location     Type
 13393 ;;		None
 13394 ;; Return value:  Size  Location     Type
 13395 ;;		None               void
 13396 ;; Registers used:
 13397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13398 ;; Tracked objects:
 13399 ;;		On entry : 0/0
 13400 ;;		On exit  : 0/0
 13401 ;;		Unchanged: 0/0
 13402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;Total ram usage:        0 bytes
 13408 ;; Hardware stack levels used:    1
 13409 ;; Hardware stack levels required when called:    7
 13410 ;; This function calls:
 13411 ;;		_setLED_Initialization
 13412 ;; This function is called by:
 13413 ;;		_main
 13414 ;; This function uses a non-reentrant model
 13415 ;;
 13416                           
 13417                           
 13418                           ;psect for function _LED_Initialization
 13419  2779                     _LED_Initialization:	
 13420                           
 13421                           ;LED_B1.c: 38: setLED_Initialization(1);
 13422                           
 13423                           ;incstack = 0
 13424                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13425  2779  3001               	movlw	1
 13426  277A  3199  2108  31A7   	fcall	_setLED_Initialization
 13427                           
 13428                           ;LED_B1.c: 41: setLED_Initialization(2);
 13429  277D  3002               	movlw	2
 13430  277E  3199  2108  31A7   	fcall	_setLED_Initialization
 13431                           
 13432                           ;LED_B1.c: 47: setLED_Initialization(99);
 13433  2781  3063               	movlw	99
 13434  2782  3199  2108         	fcall	_setLED_Initialization
 13435  2784  0008               	return
 13436  2785                     __end_of_LED_Initialization:	
 13437                           
 13438                           	psect	text76
 13439  1908                     __ptext76:	
 13440 ;; *************** function _setLED_Initialization *****************
 13441 ;; Defined at:
 13442 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\LED_B1.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;  led             1    wreg     unsigned char 
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;  led             1    4[BANK0 ] unsigned char 
 13447 ;; Return value:  Size  Location     Type
 13448 ;;		None               void
 13449 ;; Registers used:
 13450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/0
 13453 ;;		On exit  : 0/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;Total ram usage:        1 bytes
 13461 ;; Hardware stack levels used:    1
 13462 ;; Hardware stack levels required when called:    6
 13463 ;; This function calls:
 13464 ;;		_LedPointSelect
 13465 ;;		_setLED
 13466 ;; This function is called by:
 13467 ;;		_LED_Initialization
 13468 ;; This function uses a non-reentrant model
 13469 ;;
 13470                           
 13471                           
 13472                           ;psect for function _setLED_Initialization
 13473  1908                     _setLED_Initialization:	
 13474                           
 13475                           ;incstack = 0
 13476                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13477                           ;setLED_Initialization@led stored from wreg
 13478  1908  0020               	movlb	0	; select bank0
 13479  1909  00A4               	movwf	setLED_Initialization@led
 13480                           
 13481                           ;LED_B1.c: 69: LedPointSelect(led);
 13482  190A  0824               	movf	setLED_Initialization@led,w
 13483  190B  319A  2271  3199   	fcall	_LedPointSelect
 13484                           
 13485                           ;LED_B1.c: 70: LED->Enable=1;
 13486  190E  0021               	movlb	1	; select bank1
 13487  190F  083B               	movf	_LED^(0+128),w
 13488  1910  0086               	movwf	6
 13489  1911  0187               	clrf	7
 13490  1912  1401               	bsf	1,0
 13491                           
 13492                           ;LED_B1.c: 71: setLED(led,0);
 13493  1913  0020               	movlb	0	; select bank0
 13494  1914  01A2               	clrf	setLED@command
 13495  1915  0824               	movf	setLED_Initialization@led,w
 13496  1916  3192  2276         	fcall	_setLED
 13497  1918  0008               	return
 13498  1919                     __end_of_setLED_Initialization:	
 13499                           
 13500                           	psect	text77
 13501  1F2C                     __ptext77:	
 13502 ;; *************** function _Flash_Memory_Main *****************
 13503 ;; Defined at:
 13504 ;;		line 474 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 13505 ;; Parameters:    Size  Location     Type
 13506 ;;		None
 13507 ;; Auto vars:     Size  Location     Type
 13508 ;;		None
 13509 ;; Return value:  Size  Location     Type
 13510 ;;		None               void
 13511 ;; Registers used:
 13512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;Total ram usage:        0 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; Hardware stack levels required when called:    7
 13525 ;; This function calls:
 13526 ;;		_Flash_Memory_Modify
 13527 ;; This function is called by:
 13528 ;;		_main
 13529 ;; This function uses a non-reentrant model
 13530 ;;
 13531                           
 13532                           
 13533                           ;psect for function _Flash_Memory_Main
 13534  1F2C                     _Flash_Memory_Main:	
 13535                           
 13536                           ;MCU_16f1518_B1.c: 476: if(Memory->GO)
 13537                           
 13538                           ;incstack = 0
 13539                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13540  1F2C  0021               	movlb	1	; select bank1
 13541  1F2D  086A               	movf	_Memory^(0+128),w
 13542  1F2E  3E22               	addlw	34
 13543  1F2F  0086               	movwf	6
 13544  1F30  3001               	movlw	1	; select bank2/3
 13545  1F31  0087               	movwf	7
 13546  1F32  1C81               	btfss	1,1
 13547  1F33  0008               	return
 13548                           
 13549                           ;MCU_16f1518_B1.c: 477: {
 13550                           ;MCU_16f1518_B1.c: 478: if(Memory->Modify)
 13551  1F34  086A               	movf	_Memory^(0+128),w
 13552  1F35  3E22               	addlw	34
 13553  1F36  0086               	movwf	6
 13554  1F37  3001               	movlw	1	; select bank2/3
 13555  1F38  0087               	movwf	7
 13556  1F39  1C01               	btfss	1,0
 13557  1F3A  2F69               	goto	l9366
 13558                           
 13559                           ;MCU_16f1518_B1.c: 479: {
 13560                           ;MCU_16f1518_B1.c: 480: Memory->Time++;
 13561  1F3B  086A               	movf	_Memory^(0+128),w
 13562  1F3C  3E23               	addlw	35
 13563  1F3D  0086               	movwf	6
 13564  1F3E  3001               	movlw	1	; select bank2/3
 13565  1F3F  0087               	movwf	7
 13566  1F40  3001               	movlw	1
 13567  1F41  0781               	addwf	1,f
 13568  1F42  3141               	addfsr 1,1
 13569  1F43  1803               	skipnc
 13570  1F44  0A81               	incf	1,f
 13571                           
 13572                           ;MCU_16f1518_B1.c: 481: if(Memory->Time == 25)
 13573  1F45  086A               	movf	_Memory^(0+128),w
 13574  1F46  3E23               	addlw	35
 13575  1F47  0086               	movwf	6
 13576  1F48  3001               	movlw	1	; select bank2/3
 13577  1F49  0087               	movwf	7
 13578  1F4A  3F40               	moviw [0]fsr1
 13579  1F4B  3A19               	xorlw	25
 13580  1F4C  1D03               	skipz
 13581  1F4D  2F50               	goto	u9215
 13582  1F4E  3F41               	moviw [1]fsr1
 13583  1F4F  3A00               	xorlw	0
 13584  1F50                     u9215:	
 13585  1F50  1D03               	skipz
 13586  1F51  0008               	return
 13587                           
 13588                           ;MCU_16f1518_B1.c: 482: {
 13589                           ;MCU_16f1518_B1.c: 483: Memory->Time=0;
 13590  1F52  086A               	movf	_Memory^(0+128),w
 13591  1F53  3E23               	addlw	35
 13592  1F54  0086               	movwf	6
 13593  1F55  3001               	movlw	1	; select bank2/3
 13594  1F56  0087               	movwf	7
 13595  1F57  3000               	movlw	0
 13596  1F58  3FC0               	movwi [0]fsr1
 13597  1F59  3FC1               	movwi [1]fsr1
 13598                           
 13599                           ;MCU_16f1518_B1.c: 484: Memory->Modify=0;
 13600  1F5A  086A               	movf	_Memory^(0+128),w
 13601  1F5B  3E22               	addlw	34
 13602  1F5C  0086               	movwf	6
 13603  1F5D  3001               	movlw	1	; select bank2/3
 13604  1F5E  0087               	movwf	7
 13605  1F5F  1001               	bcf	1,0
 13606                           
 13607                           ;MCU_16f1518_B1.c: 485: Memory->GO=0;
 13608  1F60  086A               	movf	_Memory^(0+128),w
 13609  1F61  3E22               	addlw	34
 13610  1F62  0086               	movwf	6
 13611  1F63  3001               	movlw	1	; select bank2/3
 13612  1F64  0087               	movwf	7
 13613  1F65  1081               	bcf	1,1
 13614                           
 13615                           ;MCU_16f1518_B1.c: 486: Flash_Memory_Modify();
 13616  1F66  3194  24DC         	fcall	_Flash_Memory_Modify
 13617                           
 13618                           ;MCU_16f1518_B1.c: 488: }
 13619                           ;MCU_16f1518_B1.c: 489: }
 13620  1F68  0008               	return
 13621  1F69                     l9366:	
 13622                           
 13623                           ;MCU_16f1518_B1.c: 490: else
 13624                           ;MCU_16f1518_B1.c: 491: {
 13625                           ;MCU_16f1518_B1.c: 492: Memory->GO=0;
 13626  1F69  0021               	movlb	1	; select bank1
 13627  1F6A  086A               	movf	_Memory^(0+128),w
 13628  1F6B  3E22               	addlw	34
 13629  1F6C  0086               	movwf	6
 13630  1F6D  3001               	movlw	1	; select bank2/3
 13631  1F6E  0087               	movwf	7
 13632  1F6F  1081               	bcf	1,1
 13633  1F70  0008               	return
 13634  1F71                     __end_of_Flash_Memory_Main:	
 13635                           
 13636                           	psect	text78
 13637  14DC                     __ptext78:	
 13638 ;; *************** function _Flash_Memory_Modify *****************
 13639 ;; Defined at:
 13640 ;;		line 549 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;		None
 13643 ;; Auto vars:     Size  Location     Type
 13644 ;;  i               1    6[BANK0 ] unsigned char 
 13645 ;; Return value:  Size  Location     Type
 13646 ;;		None               void
 13647 ;; Registers used:
 13648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13649 ;; Tracked objects:
 13650 ;;		On entry : 0/0
 13651 ;;		On exit  : 0/0
 13652 ;;		Unchanged: 0/0
 13653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13658 ;;Total ram usage:        3 bytes
 13659 ;; Hardware stack levels used:    1
 13660 ;; Hardware stack levels required when called:    6
 13661 ;; This function calls:
 13662 ;;		_Flash_Memory_Erasing
 13663 ;;		_Flash_Memory_Read
 13664 ;;		_Flash_Memory_Write
 13665 ;; This function is called by:
 13666 ;;		_Flash_Memory_Main
 13667 ;; This function uses a non-reentrant model
 13668 ;;
 13669                           
 13670                           
 13671                           ;psect for function _Flash_Memory_Modify
 13672  14DC                     _Flash_Memory_Modify:	
 13673                           
 13674                           ;MCU_16f1518_B1.c: 551: char i;
 13675                           ;MCU_16f1518_B1.c: 552: for(i=0;i<32;i++)
 13676                           
 13677                           ;incstack = 0
 13678                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13679  14DC  0020               	movlb	0	; select bank0
 13680  14DD  01A6               	clrf	Flash_Memory_Modify@i
 13681  14DE  3020               	movlw	32
 13682  14DF  0226               	subwf	Flash_Memory_Modify@i,w
 13683  14E0  1803               	btfsc	3,0
 13684  14E1  2CFB               	goto	l8886
 13685  14E2                     l8880:	
 13686                           
 13687                           ;MCU_16f1518_B1.c: 553: {
 13688                           ;MCU_16f1518_B1.c: 554: Memory->Data[i]=Flash_Memory_Read(i);
 13689  14E2  0826               	movf	Flash_Memory_Modify@i,w
 13690  14E3  3199  21A3  3194   	fcall	_Flash_Memory_Read
 13691  14E6  0020               	movlb	0	; select bank0
 13692  14E7  00A4               	movwf	??_Flash_Memory_Modify
 13693  14E8  0826               	movf	Flash_Memory_Modify@i,w
 13694  14E9  0021               	movlb	1	; select bank1
 13695  14EA  076A               	addwf	_Memory^(0+128),w
 13696  14EB  0020               	movlb	0	; select bank0
 13697  14EC  00A5               	movwf	??_Flash_Memory_Modify+1
 13698  14ED  0825               	movf	??_Flash_Memory_Modify+1,w
 13699  14EE  0086               	movwf	6
 13700  14EF  3001               	movlw	1	; select bank2/3
 13701  14F0  0087               	movwf	7
 13702  14F1  0824               	movf	??_Flash_Memory_Modify,w
 13703  14F2  0081               	movwf	1
 13704  14F3  3001               	movlw	1
 13705  14F4  00A4               	movwf	??_Flash_Memory_Modify
 13706  14F5  0824               	movf	??_Flash_Memory_Modify,w
 13707  14F6  07A6               	addwf	Flash_Memory_Modify@i,f
 13708  14F7  3020               	movlw	32
 13709  14F8  0226               	subwf	Flash_Memory_Modify@i,w
 13710  14F9  1C03               	skipc
 13711  14FA  2CE2               	goto	l8880
 13712  14FB                     l8886:	
 13713                           
 13714                           ;MCU_16f1518_B1.c: 555: }
 13715                           ;MCU_16f1518_B1.c: 556: Memory->Data[0]=Product->Data[12];
 13716  14FB  086F               	movf	_Product,w
 13717  14FC  3E0C               	addlw	12
 13718  14FD  0086               	movwf	6
 13719  14FE  3001               	movlw	1	; select bank2/3
 13720  14FF  0087               	movwf	7
 13721  1500  0801               	movf	1,w
 13722  1501  00A4               	movwf	??_Flash_Memory_Modify
 13723  1502  0021               	movlb	1	; select bank1
 13724  1503  086A               	movf	_Memory^(0+128),w
 13725  1504  0086               	movwf	6
 13726  1505  3001               	movlw	1	; select bank2/3
 13727  1506  0087               	movwf	7
 13728  1507  0020               	movlb	0	; select bank0
 13729  1508  0824               	movf	??_Flash_Memory_Modify,w
 13730  1509  0081               	movwf	1
 13731                           
 13732                           ;MCU_16f1518_B1.c: 557: Memory->Data[1]=Product->Data[13];
 13733  150A  086F               	movf	_Product,w
 13734  150B  3E0D               	addlw	13
 13735  150C  0086               	movwf	6
 13736  150D  3001               	movlw	1	; select bank2/3
 13737  150E  0087               	movwf	7
 13738  150F  0801               	movf	1,w
 13739  1510  00A4               	movwf	??_Flash_Memory_Modify
 13740  1511  0021               	movlb	1	; select bank1
 13741  1512  0A6A               	incf	_Memory^(0+128),w
 13742  1513  0086               	movwf	6
 13743  1514  3001               	movlw	1	; select bank2/3
 13744  1515  0087               	movwf	7
 13745  1516  0020               	movlb	0	; select bank0
 13746  1517  0824               	movf	??_Flash_Memory_Modify,w
 13747  1518  0081               	movwf	1
 13748                           
 13749                           ;MCU_16f1518_B1.c: 558: Memory->Data[2]=Product->Data[14];
 13750  1519  086F               	movf	_Product,w
 13751  151A  3E0E               	addlw	14
 13752  151B  0086               	movwf	6
 13753  151C  3001               	movlw	1	; select bank2/3
 13754  151D  0087               	movwf	7
 13755  151E  0801               	movf	1,w
 13756  151F  00A4               	movwf	??_Flash_Memory_Modify
 13757  1520  0021               	movlb	1	; select bank1
 13758  1521  086A               	movf	_Memory^(0+128),w
 13759  1522  3E02               	addlw	2
 13760  1523  0086               	movwf	6
 13761  1524  3001               	movlw	1	; select bank2/3
 13762  1525  0087               	movwf	7
 13763  1526  0020               	movlb	0	; select bank0
 13764  1527  0824               	movf	??_Flash_Memory_Modify,w
 13765  1528  0081               	movwf	1
 13766                           
 13767                           ;MCU_16f1518_B1.c: 564: if(Memory->LoopSave)
 13768  1529  0021               	movlb	1	; select bank1
 13769  152A  086A               	movf	_Memory^(0+128),w
 13770  152B  3E22               	addlw	34
 13771  152C  0086               	movwf	6
 13772  152D  3001               	movlw	1	; select bank2/3
 13773  152E  0087               	movwf	7
 13774  152F  1D01               	btfss	1,2
 13775  1530  2D42               	goto	l8890
 13776                           
 13777                           ;MCU_16f1518_B1.c: 565: {
 13778                           ;MCU_16f1518_B1.c: 566: Memory->LoopSave=0;
 13779  1531  086A               	movf	_Memory^(0+128),w
 13780  1532  3E22               	addlw	34
 13781  1533  0086               	movwf	6
 13782  1534  3001               	movlw	1	; select bank2/3
 13783  1535  0087               	movwf	7
 13784  1536  1101               	bcf	1,2
 13785                           
 13786                           ;MCU_16f1518_B1.c: 567: TMain->FirstOpen=0;
 13787  1537  087D               	movf	_TMain,w
 13788  1538  0086               	movwf	6
 13789  1539  3001               	movlw	1	; select bank2/3
 13790  153A  0087               	movwf	7
 13791  153B  1281               	bcf	1,5
 13792                           
 13793                           ;MCU_16f1518_B1.c: 568: TMain->First=0;
 13794  153C  087D               	movf	_TMain,w
 13795  153D  3E03               	addlw	3
 13796  153E  0086               	movwf	6
 13797  153F  3001               	movlw	1	; select bank2/3
 13798  1540  0087               	movwf	7
 13799  1541  1081               	bcf	1,1
 13800  1542                     l8890:	
 13801                           
 13802                           ;MCU_16f1518_B1.c: 570: }
 13803                           ;MCU_16f1518_B1.c: 571: GIE=0;
 13804  1542  138B               	bcf	11,7	;volatile
 13805                           
 13806                           ;MCU_16f1518_B1.c: 572: Flash_Memory_Erasing();
 13807  1543  31A7  276D  3194   	fcall	_Flash_Memory_Erasing
 13808                           
 13809                           ;MCU_16f1518_B1.c: 573: Flash_Memory_Write();
 13810  1546  319C  24DB         	fcall	_Flash_Memory_Write
 13811                           
 13812                           ;MCU_16f1518_B1.c: 574: GIE=1;
 13813  1548  178B               	bsf	11,7	;volatile
 13814  1549  0008               	return
 13815  154A                     __end_of_Flash_Memory_Modify:	
 13816                           
 13817                           	psect	text79
 13818  276D                     __ptext79:	
 13819 ;; *************** function _Flash_Memory_Erasing *****************
 13820 ;; Defined at:
 13821 ;;		line 538 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 13822 ;; Parameters:    Size  Location     Type
 13823 ;;		None
 13824 ;; Auto vars:     Size  Location     Type
 13825 ;;		None
 13826 ;; Return value:  Size  Location     Type
 13827 ;;		None               void
 13828 ;; Registers used:
 13829 ;;		wreg, status,2, status,0, pclath, cstack
 13830 ;; Tracked objects:
 13831 ;;		On entry : 0/0
 13832 ;;		On exit  : 0/0
 13833 ;;		Unchanged: 0/0
 13834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;Total ram usage:        0 bytes
 13840 ;; Hardware stack levels used:    1
 13841 ;; Hardware stack levels required when called:    5
 13842 ;; This function calls:
 13843 ;;		_Flash_Memory_Unlock
 13844 ;; This function is called by:
 13845 ;;		_Flash_Memory_Modify
 13846 ;; This function uses a non-reentrant model
 13847 ;;
 13848                           
 13849                           
 13850                           ;psect for function _Flash_Memory_Erasing
 13851  276D                     _Flash_Memory_Erasing:	
 13852                           
 13853                           ;MCU_16f1518_B1.c: 540: CFGS=0;
 13854                           
 13855                           ;incstack = 0
 13856                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 13857  276D  0023               	movlb	3	; select bank3
 13858  276E  1315               	bcf	21,6	;volatile
 13859                           
 13860                           ;MCU_16f1518_B1.c: 541: PMADRH=0x30;
 13861  276F  3030               	movlw	48
 13862  2770  0092               	movwf	18	;volatile
 13863                           
 13864                           ;MCU_16f1518_B1.c: 542: PMADRL=0x00;
 13865  2771  0191               	clrf	17	;volatile
 13866                           
 13867                           ;MCU_16f1518_B1.c: 543: FREE=1;
 13868  2772  1615               	bsf	21,4	;volatile
 13869                           
 13870                           ;MCU_16f1518_B1.c: 544: WREN=1;
 13871  2773  1515               	bsf	21,2	;volatile
 13872                           
 13873                           ;MCU_16f1518_B1.c: 545: Flash_Memory_Unlock();
 13874  2774  31A6  2687         	fcall	_Flash_Memory_Unlock
 13875                           
 13876                           ;MCU_16f1518_B1.c: 546: WREN=0;
 13877  2776  0023               	movlb	3	; select bank3
 13878  2777  1115               	bcf	21,2	;volatile
 13879  2778  0008               	return
 13880  2779                     __end_of_Flash_Memory_Erasing:	
 13881                           
 13882                           	psect	text80
 13883  0E14                     __ptext80:	
 13884 ;; *************** function _Flash_Memory_Initialization *****************
 13885 ;; Defined at:
 13886 ;;		line 429 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 13887 ;; Parameters:    Size  Location     Type
 13888 ;;		None
 13889 ;; Auto vars:     Size  Location     Type
 13890 ;;  i               1   62[BANK0 ] unsigned char 
 13891 ;; Return value:  Size  Location     Type
 13892 ;;		None               void
 13893 ;; Registers used:
 13894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13895 ;; Tracked objects:
 13896 ;;		On entry : 0/0
 13897 ;;		On exit  : 0/0
 13898 ;;		Unchanged: 0/0
 13899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;Total ram usage:        2 bytes
 13905 ;; Hardware stack levels used:    1
 13906 ;; Hardware stack levels required when called:    7
 13907 ;; This function calls:
 13908 ;;		_Flash_Memory_Read
 13909 ;;		_Flash_Memory_Write
 13910 ;;		_setPercentValue
 13911 ;; This function is called by:
 13912 ;;		_main
 13913 ;; This function uses a non-reentrant model
 13914 ;;
 13915                           
 13916                           
 13917                           ;psect for function _Flash_Memory_Initialization
 13918  0E14                     _Flash_Memory_Initialization:	
 13919                           
 13920                           ;MCU_16f1518_B1.c: 431: char i;
 13921                           ;MCU_16f1518_B1.c: 432: if(Flash_Memory_Read(31) == 0xaa)
 13922                           
 13923                           ;incstack = 0
 13924                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13925  0E14  301F               	movlw	31
 13926  0E15  3199  21A3  318E   	fcall	_Flash_Memory_Read
 13927  0E18  3AAA               	xorlw	170
 13928  0E19  1D03               	skipz
 13929  0E1A  2E8C               	goto	l9226
 13930                           
 13931                           ;MCU_16f1518_B1.c: 433: {
 13932                           ;MCU_16f1518_B1.c: 434: Product->Data[12]=Flash_Memory_Read(0);
 13933  0E1B  3000               	movlw	0
 13934  0E1C  3199  21A3  318E   	fcall	_Flash_Memory_Read
 13935  0E1F  0020               	movlb	0	; select bank0
 13936  0E20  00DD               	movwf	??_Flash_Memory_Initialization
 13937  0E21  086F               	movf	_Product,w
 13938  0E22  3E0C               	addlw	12
 13939  0E23  0086               	movwf	6
 13940  0E24  3001               	movlw	1	; select bank2/3
 13941  0E25  0087               	movwf	7
 13942  0E26  085D               	movf	??_Flash_Memory_Initialization,w
 13943  0E27  0081               	movwf	1
 13944                           
 13945                           ;MCU_16f1518_B1.c: 435: Product->Data[13]=Flash_Memory_Read(1);
 13946  0E28  3001               	movlw	1
 13947  0E29  3199  21A3  318E   	fcall	_Flash_Memory_Read
 13948  0E2C  0020               	movlb	0	; select bank0
 13949  0E2D  00DD               	movwf	??_Flash_Memory_Initialization
 13950  0E2E  086F               	movf	_Product,w
 13951  0E2F  3E0D               	addlw	13
 13952  0E30  0086               	movwf	6
 13953  0E31  3001               	movlw	1	; select bank2/3
 13954  0E32  0087               	movwf	7
 13955  0E33  085D               	movf	??_Flash_Memory_Initialization,w
 13956  0E34  0081               	movwf	1
 13957                           
 13958                           ;MCU_16f1518_B1.c: 436: Product->Data[14]=Flash_Memory_Read(2);
 13959  0E35  3002               	movlw	2
 13960  0E36  3199  21A3  318E   	fcall	_Flash_Memory_Read
 13961  0E39  0020               	movlb	0	; select bank0
 13962  0E3A  00DD               	movwf	??_Flash_Memory_Initialization
 13963  0E3B  086F               	movf	_Product,w
 13964  0E3C  3E0E               	addlw	14
 13965  0E3D  0086               	movwf	6
 13966  0E3E  3001               	movlw	1	; select bank2/3
 13967  0E3F  0087               	movwf	7
 13968  0E40  085D               	movf	??_Flash_Memory_Initialization,w
 13969  0E41  0081               	movwf	1
 13970                           
 13971                           ;MCU_16f1518_B1.c: 442: i=setPercentValue(((char)((100-55)*1.5)));
 13972  0E42  3043               	movlw	67
 13973  0E43  319F  2771  318E   	fcall	_setPercentValue
 13974  0E46  0020               	movlb	0	; select bank0
 13975  0E47  00DD               	movwf	??_Flash_Memory_Initialization
 13976  0E48  085D               	movf	??_Flash_Memory_Initialization,w
 13977  0E49  00DE               	movwf	Flash_Memory_Initialization@i
 13978                           
 13979                           ;MCU_16f1518_B1.c: 443: Product->Data[21]=i;
 13980  0E4A  085E               	movf	Flash_Memory_Initialization@i,w
 13981  0E4B  00DD               	movwf	??_Flash_Memory_Initialization
 13982  0E4C  086F               	movf	_Product,w
 13983  0E4D  3E15               	addlw	21
 13984  0E4E  0086               	movwf	6
 13985  0E4F  3001               	movlw	1	; select bank2/3
 13986  0E50  0087               	movwf	7
 13987  0E51  085D               	movf	??_Flash_Memory_Initialization,w
 13988  0E52  0081               	movwf	1
 13989                           
 13990                           ;MCU_16f1518_B1.c: 444: Product->Data[22]=i;
 13991  0E53  085E               	movf	Flash_Memory_Initialization@i,w
 13992  0E54  00DD               	movwf	??_Flash_Memory_Initialization
 13993  0E55  086F               	movf	_Product,w
 13994  0E56  3E16               	addlw	22
 13995  0E57  0086               	movwf	6
 13996  0E58  3001               	movlw	1	; select bank2/3
 13997  0E59  0087               	movwf	7
 13998  0E5A  085D               	movf	??_Flash_Memory_Initialization,w
 13999  0E5B  0081               	movwf	1
 14000                           
 14001                           ;MCU_16f1518_B1.c: 445: Product->Data[23]=i;
 14002  0E5C  085E               	movf	Flash_Memory_Initialization@i,w
 14003  0E5D  00DD               	movwf	??_Flash_Memory_Initialization
 14004  0E5E  086F               	movf	_Product,w
 14005  0E5F  3E17               	addlw	23
 14006  0E60  0086               	movwf	6
 14007  0E61  3001               	movlw	1	; select bank2/3
 14008  0E62  0087               	movwf	7
 14009  0E63  085D               	movf	??_Flash_Memory_Initialization,w
 14010  0E64  0081               	movwf	1
 14011                           
 14012                           ;MCU_16f1518_B1.c: 447: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product
      +                          ->Data[14]==0xff)
 14013  0E65  086F               	movf	_Product,w
 14014  0E66  3E0C               	addlw	12
 14015  0E67  0086               	movwf	6
 14016  0E68  3001               	movlw	1	; select bank2/3
 14017  0E69  0087               	movwf	7
 14018  0E6A  0801               	movf	1,w
 14019  0E6B  3AFF               	xorlw	255
 14020  0E6C  1D03               	skipz
 14021  0E6D  0008               	return
 14022  0E6E  086F               	movf	_Product,w
 14023  0E6F  3E0D               	addlw	13
 14024  0E70  0086               	movwf	6
 14025  0E71  3001               	movlw	1	; select bank2/3
 14026  0E72  0087               	movwf	7
 14027  0E73  0801               	movf	1,w
 14028  0E74  3AFF               	xorlw	255
 14029  0E75  1D03               	skipz
 14030  0E76  0008               	return
 14031  0E77  086F               	movf	_Product,w
 14032  0E78  3E0E               	addlw	14
 14033  0E79  0086               	movwf	6
 14034  0E7A  3001               	movlw	1	; select bank2/3
 14035  0E7B  0087               	movwf	7
 14036  0E7C  0801               	movf	1,w
 14037  0E7D  3AFF               	xorlw	255
 14038  0E7E  1D03               	skipz
 14039  0E7F  0008               	return
 14040                           
 14041                           ;MCU_16f1518_B1.c: 448: {
 14042                           ;MCU_16f1518_B1.c: 449: TMain->FirstOpen=1;
 14043  0E80  087D               	movf	_TMain,w
 14044  0E81  0086               	movwf	6
 14045  0E82  3001               	movlw	1	; select bank2/3
 14046  0E83  0087               	movwf	7
 14047  0E84  1681               	bsf	1,5
 14048                           
 14049                           ;MCU_16f1518_B1.c: 450: TMain->First=1;
 14050  0E85  087D               	movf	_TMain,w
 14051  0E86  3E03               	addlw	3
 14052  0E87  0086               	movwf	6
 14053  0E88  3001               	movlw	1	; select bank2/3
 14054  0E89  0087               	movwf	7
 14055  0E8A  1481               	bsf	1,1
 14056                           
 14057                           ;MCU_16f1518_B1.c: 451: }
 14058                           ;MCU_16f1518_B1.c: 452: }
 14059  0E8B  0008               	return
 14060  0E8C                     l9226:	
 14061                           
 14062                           ;MCU_16f1518_B1.c: 453: else
 14063                           ;MCU_16f1518_B1.c: 454: {
 14064                           ;MCU_16f1518_B1.c: 455: i=setPercentValue(((char)((100-55)*1.5)));
 14065  0E8C  3043               	movlw	67
 14066  0E8D  319F  2771  318E   	fcall	_setPercentValue
 14067  0E90  0020               	movlb	0	; select bank0
 14068  0E91  00DD               	movwf	??_Flash_Memory_Initialization
 14069  0E92  085D               	movf	??_Flash_Memory_Initialization,w
 14070  0E93  00DE               	movwf	Flash_Memory_Initialization@i
 14071                           
 14072                           ;MCU_16f1518_B1.c: 456: Memory->Data[0]=0xff;
 14073  0E94  30FF               	movlw	255
 14074  0E95  00DD               	movwf	??_Flash_Memory_Initialization
 14075  0E96  0021               	movlb	1	; select bank1
 14076  0E97  086A               	movf	_Memory^(0+128),w
 14077  0E98  0086               	movwf	6
 14078  0E99  3001               	movlw	1	; select bank2/3
 14079  0E9A  0087               	movwf	7
 14080  0E9B  0020               	movlb	0	; select bank0
 14081  0E9C  085D               	movf	??_Flash_Memory_Initialization,w
 14082  0E9D  0081               	movwf	1
 14083                           
 14084                           ;MCU_16f1518_B1.c: 457: Memory->Data[1]=0xff;
 14085  0E9E  30FF               	movlw	255
 14086  0E9F  00DD               	movwf	??_Flash_Memory_Initialization
 14087  0EA0  0021               	movlb	1	; select bank1
 14088  0EA1  0A6A               	incf	_Memory^(0+128),w
 14089  0EA2  0086               	movwf	6
 14090  0EA3  3001               	movlw	1	; select bank2/3
 14091  0EA4  0087               	movwf	7
 14092  0EA5  0020               	movlb	0	; select bank0
 14093  0EA6  085D               	movf	??_Flash_Memory_Initialization,w
 14094  0EA7  0081               	movwf	1
 14095                           
 14096                           ;MCU_16f1518_B1.c: 458: Memory->Data[2]=0xff;
 14097  0EA8  30FF               	movlw	255
 14098  0EA9  00DD               	movwf	??_Flash_Memory_Initialization
 14099  0EAA  0021               	movlb	1	; select bank1
 14100  0EAB  086A               	movf	_Memory^(0+128),w
 14101  0EAC  3E02               	addlw	2
 14102  0EAD  0086               	movwf	6
 14103  0EAE  3001               	movlw	1	; select bank2/3
 14104  0EAF  0087               	movwf	7
 14105  0EB0  0020               	movlb	0	; select bank0
 14106  0EB1  085D               	movf	??_Flash_Memory_Initialization,w
 14107  0EB2  0081               	movwf	1
 14108                           
 14109                           ;MCU_16f1518_B1.c: 459: Memory->Data[3]=0xff;
 14110  0EB3  30FF               	movlw	255
 14111  0EB4  00DD               	movwf	??_Flash_Memory_Initialization
 14112  0EB5  0021               	movlb	1	; select bank1
 14113  0EB6  086A               	movf	_Memory^(0+128),w
 14114  0EB7  3E03               	addlw	3
 14115  0EB8  0086               	movwf	6
 14116  0EB9  3001               	movlw	1	; select bank2/3
 14117  0EBA  0087               	movwf	7
 14118  0EBB  0020               	movlb	0	; select bank0
 14119  0EBC  085D               	movf	??_Flash_Memory_Initialization,w
 14120  0EBD  0081               	movwf	1
 14121                           
 14122                           ;MCU_16f1518_B1.c: 460: Memory->Data[4]=0xff;
 14123  0EBE  30FF               	movlw	255
 14124  0EBF  00DD               	movwf	??_Flash_Memory_Initialization
 14125  0EC0  0021               	movlb	1	; select bank1
 14126  0EC1  086A               	movf	_Memory^(0+128),w
 14127  0EC2  3E04               	addlw	4
 14128  0EC3  0086               	movwf	6
 14129  0EC4  3001               	movlw	1	; select bank2/3
 14130  0EC5  0087               	movwf	7
 14131  0EC6  0020               	movlb	0	; select bank0
 14132  0EC7  085D               	movf	??_Flash_Memory_Initialization,w
 14133  0EC8  0081               	movwf	1
 14134                           
 14135                           ;MCU_16f1518_B1.c: 461: Memory->Data[5]=0xff;
 14136  0EC9  30FF               	movlw	255
 14137  0ECA  00DD               	movwf	??_Flash_Memory_Initialization
 14138  0ECB  0021               	movlb	1	; select bank1
 14139  0ECC  086A               	movf	_Memory^(0+128),w
 14140  0ECD  3E05               	addlw	5
 14141  0ECE  0086               	movwf	6
 14142  0ECF  3001               	movlw	1	; select bank2/3
 14143  0ED0  0087               	movwf	7
 14144  0ED1  0020               	movlb	0	; select bank0
 14145  0ED2  085D               	movf	??_Flash_Memory_Initialization,w
 14146  0ED3  0081               	movwf	1
 14147                           
 14148                           ;MCU_16f1518_B1.c: 462: Memory->Data[31]=0xaa;
 14149  0ED4  30AA               	movlw	170
 14150  0ED5  00DD               	movwf	??_Flash_Memory_Initialization
 14151  0ED6  0021               	movlb	1	; select bank1
 14152  0ED7  086A               	movf	_Memory^(0+128),w
 14153  0ED8  3E1F               	addlw	31
 14154  0ED9  0086               	movwf	6
 14155  0EDA  3001               	movlw	1	; select bank2/3
 14156  0EDB  0087               	movwf	7
 14157  0EDC  0020               	movlb	0	; select bank0
 14158  0EDD  085D               	movf	??_Flash_Memory_Initialization,w
 14159  0EDE  0081               	movwf	1
 14160                           
 14161                           ;MCU_16f1518_B1.c: 463: Product->Data[21]=i;
 14162  0EDF  085E               	movf	Flash_Memory_Initialization@i,w
 14163  0EE0  00DD               	movwf	??_Flash_Memory_Initialization
 14164  0EE1  086F               	movf	_Product,w
 14165  0EE2  3E15               	addlw	21
 14166  0EE3  0086               	movwf	6
 14167  0EE4  3001               	movlw	1	; select bank2/3
 14168  0EE5  0087               	movwf	7
 14169  0EE6  085D               	movf	??_Flash_Memory_Initialization,w
 14170  0EE7  0081               	movwf	1
 14171                           
 14172                           ;MCU_16f1518_B1.c: 464: Product->Data[22]=i;
 14173  0EE8  085E               	movf	Flash_Memory_Initialization@i,w
 14174  0EE9  00DD               	movwf	??_Flash_Memory_Initialization
 14175  0EEA  086F               	movf	_Product,w
 14176  0EEB  3E16               	addlw	22
 14177  0EEC  0086               	movwf	6
 14178  0EED  3001               	movlw	1	; select bank2/3
 14179  0EEE  0087               	movwf	7
 14180  0EEF  085D               	movf	??_Flash_Memory_Initialization,w
 14181  0EF0  0081               	movwf	1
 14182                           
 14183                           ;MCU_16f1518_B1.c: 465: Product->Data[23]=i;
 14184  0EF1  085E               	movf	Flash_Memory_Initialization@i,w
 14185  0EF2  00DD               	movwf	??_Flash_Memory_Initialization
 14186  0EF3  086F               	movf	_Product,w
 14187  0EF4  3E17               	addlw	23
 14188  0EF5  0086               	movwf	6
 14189  0EF6  3001               	movlw	1	; select bank2/3
 14190  0EF7  0087               	movwf	7
 14191  0EF8  085D               	movf	??_Flash_Memory_Initialization,w
 14192  0EF9  0081               	movwf	1
 14193                           
 14194                           ;MCU_16f1518_B1.c: 466: GIE=0;
 14195  0EFA  138B               	bcf	11,7	;volatile
 14196                           
 14197                           ;MCU_16f1518_B1.c: 467: Flash_Memory_Write();
 14198  0EFB  319C  24DB         	fcall	_Flash_Memory_Write
 14199                           
 14200                           ;MCU_16f1518_B1.c: 468: GIE=1;
 14201  0EFD  178B               	bsf	11,7	;volatile
 14202                           
 14203                           ;MCU_16f1518_B1.c: 469: TMain->FirstOpen=1;
 14204  0EFE  087D               	movf	_TMain,w
 14205  0EFF  0086               	movwf	6
 14206  0F00  3001               	movlw	1	; select bank2/3
 14207  0F01  0087               	movwf	7
 14208  0F02  1681               	bsf	1,5
 14209                           
 14210                           ;MCU_16f1518_B1.c: 470: TMain->First=1;
 14211  0F03  087D               	movf	_TMain,w
 14212  0F04  3E03               	addlw	3
 14213  0F05  0086               	movwf	6
 14214  0F06  3001               	movlw	1	; select bank2/3
 14215  0F07  0087               	movwf	7
 14216  0F08  1481               	bsf	1,1
 14217  0F09  0008               	return
 14218  0F0A                     __end_of_Flash_Memory_Initialization:	
 14219                           
 14220                           	psect	text81
 14221  1CDB                     __ptext81:	
 14222 ;; *************** function _Flash_Memory_Write *****************
 14223 ;; Defined at:
 14224 ;;		line 518 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 14225 ;; Parameters:    Size  Location     Type
 14226 ;;		None
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;  i               1    1[BANK0 ] unsigned char 
 14229 ;; Return value:  Size  Location     Type
 14230 ;;		None               void
 14231 ;; Registers used:
 14232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14233 ;; Tracked objects:
 14234 ;;		On entry : 0/0
 14235 ;;		On exit  : 0/0
 14236 ;;		Unchanged: 0/0
 14237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;Total ram usage:        2 bytes
 14243 ;; Hardware stack levels used:    1
 14244 ;; Hardware stack levels required when called:    5
 14245 ;; This function calls:
 14246 ;;		_Flash_Memory_Unlock
 14247 ;; This function is called by:
 14248 ;;		_Flash_Memory_Initialization
 14249 ;;		_Flash_Memory_Modify
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           
 14254                           ;psect for function _Flash_Memory_Write
 14255  1CDB                     _Flash_Memory_Write:	
 14256                           
 14257                           ;MCU_16f1518_B1.c: 520: char i;
 14258                           ;MCU_16f1518_B1.c: 521: CFGS=0;
 14259                           
 14260                           ;incstack = 0
 14261                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14262  1CDB  0023               	movlb	3	; select bank3
 14263  1CDC  1315               	bcf	21,6	;volatile
 14264                           
 14265                           ;MCU_16f1518_B1.c: 522: PMADRH=0x30;
 14266  1CDD  3030               	movlw	48
 14267  1CDE  0092               	movwf	18	;volatile
 14268                           
 14269                           ;MCU_16f1518_B1.c: 523: PMDATH=0;
 14270  1CDF  0194               	clrf	20	;volatile
 14271                           
 14272                           ;MCU_16f1518_B1.c: 524: FREE=0;
 14273  1CE0  1215               	bcf	21,4	;volatile
 14274                           
 14275                           ;MCU_16f1518_B1.c: 525: LWLO=1;
 14276  1CE1  1695               	bsf	21,5	;volatile
 14277                           
 14278                           ;MCU_16f1518_B1.c: 526: WREN=1;
 14279  1CE2  1515               	bsf	21,2	;volatile
 14280                           
 14281                           ;MCU_16f1518_B1.c: 527: for(i=0 ; i<32 ; i++)
 14282  1CE3  0020               	movlb	0	; select bank0
 14283  1CE4  01A1               	clrf	Flash_Memory_Write@i
 14284  1CE5  3020               	movlw	32
 14285  1CE6  0221               	subwf	Flash_Memory_Write@i,w
 14286  1CE7  1803               	btfsc	3,0
 14287  1CE8  2D05               	goto	l1628
 14288  1CE9                     l8542:	
 14289                           
 14290                           ;MCU_16f1518_B1.c: 528: {
 14291                           ;MCU_16f1518_B1.c: 529: PMADRL=i;
 14292  1CE9  0821               	movf	Flash_Memory_Write@i,w
 14293  1CEA  0023               	movlb	3	; select bank3
 14294  1CEB  0091               	movwf	17	;volatile
 14295                           
 14296                           ;MCU_16f1518_B1.c: 530: PMDATL=Memory->Data[i];
 14297  1CEC  0020               	movlb	0	; select bank0
 14298  1CED  0821               	movf	Flash_Memory_Write@i,w
 14299  1CEE  0021               	movlb	1	; select bank1
 14300  1CEF  076A               	addwf	_Memory^(0+128),w
 14301  1CF0  0020               	movlb	0	; select bank0
 14302  1CF1  00A0               	movwf	??_Flash_Memory_Write
 14303  1CF2  0820               	movf	??_Flash_Memory_Write,w
 14304  1CF3  0086               	movwf	6
 14305  1CF4  3001               	movlw	1	; select bank2/3
 14306  1CF5  0087               	movwf	7
 14307  1CF6  0801               	movf	1,w
 14308  1CF7  0023               	movlb	3	; select bank3
 14309  1CF8  0093               	movwf	19	;volatile
 14310                           
 14311                           ;MCU_16f1518_B1.c: 531: Flash_Memory_Unlock();
 14312  1CF9  31A6  2687  319C   	fcall	_Flash_Memory_Unlock
 14313  1CFC  3001               	movlw	1
 14314  1CFD  0020               	movlb	0	; select bank0
 14315  1CFE  00A0               	movwf	??_Flash_Memory_Write
 14316  1CFF  0820               	movf	??_Flash_Memory_Write,w
 14317  1D00  07A1               	addwf	Flash_Memory_Write@i,f
 14318  1D01  3020               	movlw	32
 14319  1D02  0221               	subwf	Flash_Memory_Write@i,w
 14320  1D03  1C03               	skipc
 14321  1D04  2CE9               	goto	l8542
 14322  1D05                     l1628:	
 14323                           
 14324                           ;MCU_16f1518_B1.c: 532: }
 14325                           ;MCU_16f1518_B1.c: 533: LWLO=0;
 14326  1D05  0023               	movlb	3	; select bank3
 14327  1D06  1295               	bcf	21,5	;volatile
 14328                           
 14329                           ;MCU_16f1518_B1.c: 534: Flash_Memory_Unlock();
 14330  1D07  31A6  2687         	fcall	_Flash_Memory_Unlock
 14331                           
 14332                           ;MCU_16f1518_B1.c: 535: WREN=0;
 14333  1D09  0023               	movlb	3	; select bank3
 14334  1D0A  1115               	bcf	21,2	;volatile
 14335  1D0B  0008               	return
 14336  1D0C                     __end_of_Flash_Memory_Write:	
 14337                           
 14338                           	psect	text82
 14339  2687                     __ptext82:	
 14340 ;; *************** function _Flash_Memory_Unlock *****************
 14341 ;; Defined at:
 14342 ;;		line 497 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;		None
 14345 ;; Auto vars:     Size  Location     Type
 14346 ;;		None
 14347 ;; Return value:  Size  Location     Type
 14348 ;;		None               void
 14349 ;; Registers used:
 14350 ;;		wreg
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;Total ram usage:        0 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:    4
 14363 ;; This function calls:
 14364 ;;		Nothing
 14365 ;; This function is called by:
 14366 ;;		_Flash_Memory_Write
 14367 ;;		_Flash_Memory_Erasing
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           
 14372                           ;psect for function _Flash_Memory_Unlock
 14373  2687                     _Flash_Memory_Unlock:	
 14374                           
 14375                           ;MCU_16f1518_B1.c: 499: PMCON2=0x55;
 14376                           
 14377                           ;incstack = 0
 14378                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14379  2687  3055               	movlw	85
 14380  2688  0023               	movlb	3	; select bank3
 14381  2689  0096               	movwf	22	;volatile
 14382                           
 14383                           ;MCU_16f1518_B1.c: 500: PMCON2=0xaa;
 14384  268A  30AA               	movlw	170
 14385  268B  0096               	movwf	22	;volatile
 14386                           
 14387                           ;MCU_16f1518_B1.c: 501: WR=1;
 14388  268C  1495               	bsf	21,1	;volatile
 14389                           
 14390                           ;MCU_16f1518_B1.c: 502: __nop();
 14391  268D  0000               	nop
 14392                           
 14393                           ;MCU_16f1518_B1.c: 503: __nop();
 14394  268E  0000               	nop
 14395  268F  0008               	return
 14396  2690                     __end_of_Flash_Memory_Unlock:	
 14397                           
 14398                           	psect	text83
 14399  19A3                     __ptext83:	
 14400 ;; *************** function _Flash_Memory_Read *****************
 14401 ;; Defined at:
 14402 ;;		line 506 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 14403 ;; Parameters:    Size  Location     Type
 14404 ;;  address         1    wreg     unsigned char 
 14405 ;; Auto vars:     Size  Location     Type
 14406 ;;  address         1    2[BANK0 ] unsigned char 
 14407 ;;  ret             1    3[BANK0 ] unsigned char 
 14408 ;;  i               1    1[BANK0 ] unsigned char 
 14409 ;; Return value:  Size  Location     Type
 14410 ;;                  1    wreg      unsigned char 
 14411 ;; Registers used:
 14412 ;;		wreg, status,2
 14413 ;; Tracked objects:
 14414 ;;		On entry : 0/0
 14415 ;;		On exit  : 0/0
 14416 ;;		Unchanged: 0/0
 14417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14421 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;Total ram usage:        4 bytes
 14423 ;; Hardware stack levels used:    1
 14424 ;; Hardware stack levels required when called:    4
 14425 ;; This function calls:
 14426 ;;		Nothing
 14427 ;; This function is called by:
 14428 ;;		_Flash_Memory_Initialization
 14429 ;;		_Flash_Memory_Modify
 14430 ;; This function uses a non-reentrant model
 14431 ;;
 14432                           
 14433                           
 14434                           ;psect for function _Flash_Memory_Read
 14435  19A3                     _Flash_Memory_Read:	
 14436                           
 14437                           ;incstack = 0
 14438                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14439                           ;Flash_Memory_Read@address stored from wreg
 14440  19A3  0020               	movlb	0	; select bank0
 14441  19A4  00A2               	movwf	Flash_Memory_Read@address
 14442                           
 14443                           ;MCU_16f1518_B1.c: 508: char i,ret=0;
 14444  19A5  01A3               	clrf	Flash_Memory_Read@ret
 14445                           
 14446                           ;MCU_16f1518_B1.c: 509: PMADRH=0x30;
 14447  19A6  3030               	movlw	48
 14448  19A7  0023               	movlb	3	; select bank3
 14449  19A8  0092               	movwf	18	;volatile
 14450                           
 14451                           ;MCU_16f1518_B1.c: 510: PMADRL=address;
 14452  19A9  0020               	movlb	0	; select bank0
 14453  19AA  0822               	movf	Flash_Memory_Read@address,w
 14454  19AB  0023               	movlb	3	; select bank3
 14455  19AC  0091               	movwf	17	;volatile
 14456                           
 14457                           ;MCU_16f1518_B1.c: 511: CFGS=0;
 14458  19AD  1315               	bcf	21,6	;volatile
 14459                           
 14460                           ;MCU_16f1518_B1.c: 512: RD=1;
 14461  19AE  1415               	bsf	21,0	;volatile
 14462                           
 14463                           ;MCU_16f1518_B1.c: 513: i=PMDATH;
 14464  19AF  0814               	movf	20,w	;volatile
 14465  19B0  0020               	movlb	0	; select bank0
 14466  19B1  00A0               	movwf	??_Flash_Memory_Read
 14467  19B2  0820               	movf	??_Flash_Memory_Read,w
 14468  19B3  00A1               	movwf	Flash_Memory_Read@i
 14469                           
 14470                           ;MCU_16f1518_B1.c: 514: ret=PMDATL;
 14471  19B4  0023               	movlb	3	; select bank3
 14472  19B5  0813               	movf	19,w	;volatile
 14473  19B6  0020               	movlb	0	; select bank0
 14474  19B7  00A0               	movwf	??_Flash_Memory_Read
 14475  19B8  0820               	movf	??_Flash_Memory_Read,w
 14476  19B9  00A3               	movwf	Flash_Memory_Read@ret
 14477                           
 14478                           ;MCU_16f1518_B1.c: 515: return ret;
 14479  19BA  0823               	movf	Flash_Memory_Read@ret,w
 14480  19BB  0008               	return
 14481  19BC                     __end_of_Flash_Memory_Read:	
 14482                           
 14483                           	psect	text84
 14484  266B                     __ptext84:	
 14485 ;; *************** function _DimmerLights_Main *****************
 14486 ;; Defined at:
 14487 ;;		line 105 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 14488 ;; Parameters:    Size  Location     Type
 14489 ;;		None
 14490 ;; Auto vars:     Size  Location     Type
 14491 ;;		None
 14492 ;; Return value:  Size  Location     Type
 14493 ;;		None               void
 14494 ;; Registers used:
 14495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14496 ;; Tracked objects:
 14497 ;;		On entry : 0/0
 14498 ;;		On exit  : 0/0
 14499 ;;		Unchanged: 0/0
 14500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;Total ram usage:        0 bytes
 14506 ;; Hardware stack levels used:    1
 14507 ;; Hardware stack levels required when called:   10
 14508 ;; This function calls:
 14509 ;;		_DimmerLights_Close
 14510 ;;		_setDimmerLights_Main
 14511 ;; This function is called by:
 14512 ;;		_main
 14513 ;; This function uses a non-reentrant model
 14514 ;;
 14515                           
 14516                           
 14517                           ;psect for function _DimmerLights_Main
 14518  266B                     _DimmerLights_Main:	
 14519                           
 14520                           ;Dimmer_B1.c: 108: setDimmerLights_Main(1);
 14521                           
 14522                           ;incstack = 0
 14523                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14524  266B  3001               	movlw	1
 14525  266C  3196  262A  31A6   	fcall	_setDimmerLights_Main
 14526                           
 14527                           ;Dimmer_B1.c: 119: DimmerLights_Close();
 14528  266F  3199  21BC         	fcall	_DimmerLights_Close
 14529  2671  0008               	return
 14530  2672                     __end_of_DimmerLights_Main:	
 14531                           
 14532                           	psect	text85
 14533  162A                     __ptext85:	
 14534 ;; *************** function _setDimmerLights_Main *****************
 14535 ;; Defined at:
 14536 ;;		line 122 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 14537 ;; Parameters:    Size  Location     Type
 14538 ;;  lights          1    wreg     unsigned char 
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;  lights          1   70[BANK0 ] unsigned char 
 14541 ;;  clear           1   69[BANK0 ] unsigned char 
 14542 ;; Return value:  Size  Location     Type
 14543 ;;		None               void
 14544 ;; Registers used:
 14545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14546 ;; Tracked objects:
 14547 ;;		On entry : 0/0
 14548 ;;		On exit  : 0/0
 14549 ;;		Unchanged: 0/0
 14550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14552 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14555 ;;Total ram usage:        2 bytes
 14556 ;; Hardware stack levels used:    1
 14557 ;; Hardware stack levels required when called:    9
 14558 ;; This function calls:
 14559 ;;		_DimmerLightsPointSelect
 14560 ;;		_setBuz
 14561 ;;		_setDimmerLights
 14562 ;;		_setDimmerLights_Adj
 14563 ;; This function is called by:
 14564 ;;		_DimmerLights_Main
 14565 ;; This function uses a non-reentrant model
 14566 ;;
 14567                           
 14568                           
 14569                           ;psect for function _setDimmerLights_Main
 14570  162A                     _setDimmerLights_Main:	
 14571                           
 14572                           ;incstack = 0
 14573                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14574                           ;setDimmerLights_Main@lights stored from wreg
 14575  162A  0020               	movlb	0	; select bank0
 14576  162B  00E6               	movwf	setDimmerLights_Main@lights
 14577                           
 14578                           ;Dimmer_B1.c: 124: char clear=1;
 14579  162C  01E5               	clrf	setDimmerLights_Main@clear
 14580  162D  0AE5               	incf	setDimmerLights_Main@clear,f
 14581                           
 14582                           ;Dimmer_B1.c: 125: DimmerLightsPointSelect(lights);
 14583  162E  0866               	movf	setDimmerLights_Main@lights,w
 14584  162F  31A6  26CC  3196   	fcall	_DimmerLightsPointSelect
 14585                           
 14586                           ;Dimmer_B1.c: 153: if(DimmerLights->Trigger)
 14587  1632  0020               	movlb	0	; select bank0
 14588  1633  086C               	movf	_DimmerLights,w
 14589  1634  3E09               	addlw	9
 14590  1635  0086               	movwf	6
 14591  1636  3001               	movlw	1	; select bank2/3
 14592  1637  0087               	movwf	7
 14593  1638  1C81               	btfss	1,1
 14594  1639  2E69               	goto	l8802
 14595                           
 14596                           ;Dimmer_B1.c: 154: {
 14597                           ;Dimmer_B1.c: 155: if(clear)
 14598  163A  0865               	movf	setDimmerLights_Main@clear,w
 14599  163B  1903               	btfsc	3,2
 14600  163C  0008               	return
 14601                           
 14602                           ;Dimmer_B1.c: 156: {
 14603                           ;Dimmer_B1.c: 157: if(DimmerLights->Switch)
 14604  163D  086C               	movf	_DimmerLights,w
 14605  163E  3E09               	addlw	9
 14606  163F  0086               	movwf	6
 14607  1640  3001               	movlw	1	; select bank2/3
 14608  1641  0087               	movwf	7
 14609  1642  1C01               	btfss	1,0
 14610  1643  2E57               	goto	l8796
 14611                           
 14612                           ;Dimmer_B1.c: 158: {
 14613                           ;Dimmer_B1.c: 159: DimmerLights->Trigger=0;
 14614  1644  086C               	movf	_DimmerLights,w
 14615  1645  3E09               	addlw	9
 14616  1646  0086               	movwf	6
 14617  1647  3001               	movlw	1	; select bank2/3
 14618  1648  0087               	movwf	7
 14619  1649  1081               	bcf	1,1
 14620                           
 14621                           ;Dimmer_B1.c: 160: setDimmerLights(lights,1);
 14622  164A  01A4               	clrf	setDimmerLights@status
 14623  164B  0AA4               	incf	setDimmerLights@status,f
 14624  164C  0866               	movf	setDimmerLights_Main@lights,w
 14625  164D  3189  21F0         	fcall	_setDimmerLights
 14626                           
 14627                           ;Dimmer_B1.c: 163: DimmerLights->Clear=0;
 14628  164F  0020               	movlb	0	; select bank0
 14629  1650  086C               	movf	_DimmerLights,w
 14630  1651  3E0C               	addlw	12
 14631  1652  0086               	movwf	6
 14632  1653  3001               	movlw	1	; select bank2/3
 14633  1654  0087               	movwf	7
 14634  1655  1001               	bcf	1,0
 14635                           
 14636                           ;Dimmer_B1.c: 165: }
 14637  1656  0008               	return
 14638  1657                     l8796:	
 14639                           
 14640                           ;Dimmer_B1.c: 166: else
 14641                           ;Dimmer_B1.c: 167: {
 14642                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 14643  1657  086C               	movf	_DimmerLights,w
 14644  1658  3E09               	addlw	9
 14645  1659  0086               	movwf	6
 14646  165A  3001               	movlw	1	; select bank2/3
 14647  165B  0087               	movwf	7
 14648  165C  1081               	bcf	1,1
 14649                           
 14650                           ;Dimmer_B1.c: 169: setDimmerLights(lights,0);
 14651  165D  01A4               	clrf	setDimmerLights@status
 14652  165E  0866               	movf	setDimmerLights_Main@lights,w
 14653  165F  3189  21F0         	fcall	_setDimmerLights
 14654                           
 14655                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 14656  1661  0020               	movlb	0	; select bank0
 14657  1662  086C               	movf	_DimmerLights,w
 14658  1663  3E0C               	addlw	12
 14659  1664  0086               	movwf	6
 14660  1665  3001               	movlw	1	; select bank2/3
 14661  1666  0087               	movwf	7
 14662  1667  1001               	bcf	1,0
 14663                           
 14664                           ;Dimmer_B1.c: 174: }
 14665                           ;Dimmer_B1.c: 175: }
 14666                           ;Dimmer_B1.c: 176: }
 14667  1668  0008               	return
 14668  1669                     l8802:	
 14669                           
 14670                           ;Dimmer_B1.c: 177: else
 14671                           ;Dimmer_B1.c: 178: {
 14672                           ;Dimmer_B1.c: 179: if(DimmerLights->TriggerAdj)
 14673  1669  086C               	movf	_DimmerLights,w
 14674  166A  3E09               	addlw	9
 14675  166B  0086               	movwf	6
 14676  166C  3001               	movlw	1	; select bank2/3
 14677  166D  0087               	movwf	7
 14678  166E  1D81               	btfss	1,3
 14679  166F  0008               	return
 14680                           
 14681                           ;Dimmer_B1.c: 180: {
 14682                           ;Dimmer_B1.c: 181: if(clear)
 14683  1670  0865               	movf	setDimmerLights_Main@clear,w
 14684  1671  1903               	btfsc	3,2
 14685  1672  0008               	return
 14686                           
 14687                           ;Dimmer_B1.c: 182: {
 14688                           ;Dimmer_B1.c: 183: DimmerLightsPointSelect(lights);
 14689  1673  0866               	movf	setDimmerLights_Main@lights,w
 14690  1674  31A6  26CC  3196   	fcall	_DimmerLightsPointSelect
 14691                           
 14692                           ;Dimmer_B1.c: 184: DimmerLights->TriggerAdj=0;
 14693  1677  0020               	movlb	0	; select bank0
 14694  1678  086C               	movf	_DimmerLights,w
 14695  1679  3E09               	addlw	9
 14696  167A  0086               	movwf	6
 14697  167B  3001               	movlw	1	; select bank2/3
 14698  167C  0087               	movwf	7
 14699  167D  1181               	bcf	1,3
 14700                           
 14701                           ;Dimmer_B1.c: 185: if(DimmerLights->AdjGo)
 14702  167E  086C               	movf	_DimmerLights,w
 14703  167F  3E09               	addlw	9
 14704  1680  0086               	movwf	6
 14705  1681  3001               	movlw	1	; select bank2/3
 14706  1682  0087               	movwf	7
 14707  1683  1D01               	btfss	1,2
 14708  1684  2E95               	goto	l8814
 14709                           
 14710                           ;Dimmer_B1.c: 186: {
 14711                           ;Dimmer_B1.c: 187: setDimmerLights_Adj(lights,1);
 14712  1685  01E2               	clrf	setDimmerLights_Adj@status
 14713  1686  0AE2               	incf	setDimmerLights_Adj@status,f
 14714  1687  0866               	movf	setDimmerLights_Main@lights,w
 14715  1688  319E  26A4  3196   	fcall	_setDimmerLights_Adj
 14716                           
 14717                           ;Dimmer_B1.c: 188: setBuz(1,100);
 14718  168B  3064               	movlw	100
 14719  168C  0020               	movlb	0	; select bank0
 14720  168D  00A6               	movwf	setBuz@time
 14721  168E  3000               	movlw	0
 14722  168F  00A7               	movwf	setBuz@time+1
 14723  1690  3001               	movlw	1
 14724  1691  3197  2710         	fcall	_setBuz
 14725                           
 14726                           ;Dimmer_B1.c: 189: }
 14727  1693  0020               	movlb	0	; select bank0
 14728  1694  0008               	return
 14729  1695                     l8814:	
 14730                           
 14731                           ;Dimmer_B1.c: 190: else
 14732                           ;Dimmer_B1.c: 191: {
 14733                           ;Dimmer_B1.c: 192: setDimmerLights_Adj(lights,0);
 14734  1695  0020               	movlb	0	; select bank0
 14735  1696  01E2               	clrf	setDimmerLights_Adj@status
 14736  1697  0866               	movf	setDimmerLights_Main@lights,w
 14737  1698  319E  26A4         	fcall	_setDimmerLights_Adj
 14738  169A  0020               	movlb	0	; select bank0
 14739  169B  0008               	return
 14740  169C                     __end_of_setDimmerLights_Main:	
 14741                           
 14742                           	psect	text86
 14743  1EA4                     __ptext86:	
 14744 ;; *************** function _setDimmerLights_Adj *****************
 14745 ;; Defined at:
 14746 ;;		line 379 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 14747 ;; Parameters:    Size  Location     Type
 14748 ;;  lights          1    wreg     unsigned char 
 14749 ;;  status          1   66[BANK0 ] unsigned char 
 14750 ;; Auto vars:     Size  Location     Type
 14751 ;;  lights          1   68[BANK0 ] unsigned char 
 14752 ;; Return value:  Size  Location     Type
 14753 ;;		None               void
 14754 ;; Registers used:
 14755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14756 ;; Tracked objects:
 14757 ;;		On entry : 0/0
 14758 ;;		On exit  : 0/0
 14759 ;;		Unchanged: 0/0
 14760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14761 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;Total ram usage:        3 bytes
 14766 ;; Hardware stack levels used:    1
 14767 ;; Hardware stack levels required when called:    8
 14768 ;; This function calls:
 14769 ;;		_DimmerLightsPointSelect
 14770 ;;		_setLoad_StatusOff
 14771 ;;		_setRF_DimmerLights
 14772 ;;		_setTxData
 14773 ;; This function is called by:
 14774 ;;		_setDimmerLights_Main
 14775 ;; This function uses a non-reentrant model
 14776 ;;
 14777                           
 14778                           
 14779                           ;psect for function _setDimmerLights_Adj
 14780  1EA4                     _setDimmerLights_Adj:	
 14781                           
 14782                           ;incstack = 0
 14783                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14784                           ;setDimmerLights_Adj@lights stored from wreg
 14785  1EA4  0020               	movlb	0	; select bank0
 14786  1EA5  00E4               	movwf	setDimmerLights_Adj@lights
 14787                           
 14788                           ;Dimmer_B1.c: 381: DimmerLightsPointSelect(lights);
 14789  1EA6  0864               	movf	setDimmerLights_Adj@lights,w
 14790  1EA7  31A6  26CC  319E   	fcall	_DimmerLightsPointSelect
 14791                           
 14792                           ;Dimmer_B1.c: 382: if(status)
 14793  1EAA  0020               	movlb	0	; select bank0
 14794  1EAB  0862               	movf	setDimmerLights_Adj@status,w
 14795  1EAC  1903               	btfsc	3,2
 14796  1EAD  2EB9               	goto	l8518
 14797                           
 14798                           ;Dimmer_B1.c: 383: {
 14799                           ;Dimmer_B1.c: 384: DimmerLights->AdjFlag=1;
 14800  1EAE  086C               	movf	_DimmerLights,w
 14801  1EAF  0086               	movwf	6
 14802  1EB0  3001               	movlw	1	; select bank2/3
 14803  1EB1  0087               	movwf	7
 14804  1EB2  1581               	bsf	1,3
 14805                           
 14806                           ;Dimmer_B1.c: 385: DimmerLights->Signal=1;
 14807  1EB3  086C               	movf	_DimmerLights,w
 14808  1EB4  0086               	movwf	6
 14809  1EB5  3001               	movlw	1	; select bank2/3
 14810  1EB6  0087               	movwf	7
 14811  1EB7  1481               	bsf	1,1
 14812                           
 14813                           ;Dimmer_B1.c: 386: }
 14814  1EB8  0008               	return
 14815  1EB9                     l8518:	
 14816                           
 14817                           ;Dimmer_B1.c: 387: else
 14818                           ;Dimmer_B1.c: 388: {
 14819                           ;Dimmer_B1.c: 389: if(DimmerLights->AdjFlag)
 14820  1EB9  086C               	movf	_DimmerLights,w
 14821  1EBA  0086               	movwf	6
 14822  1EBB  3001               	movlw	1	; select bank2/3
 14823  1EBC  0087               	movwf	7
 14824  1EBD  1D81               	btfss	1,3
 14825  1EBE  0008               	return
 14826                           
 14827                           ;Dimmer_B1.c: 390: {
 14828                           ;Dimmer_B1.c: 391: DimmerLights->Signal=0;
 14829  1EBF  086C               	movf	_DimmerLights,w
 14830  1EC0  0086               	movwf	6
 14831  1EC1  3001               	movlw	1	; select bank2/3
 14832  1EC2  0087               	movwf	7
 14833  1EC3  1081               	bcf	1,1
 14834                           
 14835                           ;Dimmer_B1.c: 392: DimmerLights->AdjFlag=0;
 14836  1EC4  086C               	movf	_DimmerLights,w
 14837  1EC5  0086               	movwf	6
 14838  1EC6  3001               	movlw	1	; select bank2/3
 14839  1EC7  0087               	movwf	7
 14840  1EC8  1181               	bcf	1,3
 14841                           
 14842                           ;Dimmer_B1.c: 393: setLoad_StatusOff(0,1);
 14843  1EC9  01A0               	clrf	setLoad_StatusOff@command
 14844  1ECA  0AA0               	incf	setLoad_StatusOff@command,f
 14845  1ECB  3000               	movlw	0
 14846  1ECC  319C  24AA  319E   	fcall	_setLoad_StatusOff
 14847                           
 14848                           ;Dimmer_B1.c: 394: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 14849  1ECF  0020               	movlb	0	; select bank0
 14850  1ED0  086C               	movf	_DimmerLights,w
 14851  1ED1  3E04               	addlw	4
 14852  1ED2  0086               	movwf	6
 14853  1ED3  3001               	movlw	1	; select bank2/3
 14854  1ED4  0087               	movwf	7
 14855  1ED5  0801               	movf	1,w
 14856  1ED6  00E3               	movwf	??_setDimmerLights_Adj
 14857  1ED7  086C               	movf	_DimmerLights,w
 14858  1ED8  3E05               	addlw	5
 14859  1ED9  0086               	movwf	6
 14860  1EDA  3001               	movlw	1	; select bank2/3
 14861  1EDB  0087               	movwf	7
 14862  1EDC  0863               	movf	??_setDimmerLights_Adj,w
 14863  1EDD  0081               	movwf	1
 14864                           
 14865                           ;Dimmer_B1.c: 402: setRF_DimmerLights(lights,1);
 14866  1EDE  01DD               	clrf	setRF_DimmerLights@on
 14867  1EDF  0ADD               	incf	setRF_DimmerLights@on,f
 14868  1EE0  0864               	movf	setDimmerLights_Adj@lights,w
 14869  1EE1  3193  2399  319E   	fcall	_setRF_DimmerLights
 14870                           
 14871                           ;Dimmer_B1.c: 403: setTxData(1);
 14872  1EE4  3001               	movlw	1
 14873  1EE5  3187  271E         	fcall	_setTxData
 14874  1EE7  0008               	return
 14875  1EE8                     __end_of_setDimmerLights_Adj:	
 14876                           
 14877                           	psect	text87
 14878  1CAA                     __ptext87:	
 14879 ;; *************** function _setLoad_StatusOff *****************
 14880 ;; Defined at:
 14881 ;;		line 284 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;  lights          1    wreg     unsigned char 
 14884 ;;  command         1    0[BANK0 ] unsigned char 
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  lights          1    1[BANK0 ] unsigned char 
 14887 ;; Return value:  Size  Location     Type
 14888 ;;		None               void
 14889 ;; Registers used:
 14890 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14891 ;; Tracked objects:
 14892 ;;		On entry : 0/0
 14893 ;;		On exit  : 0/0
 14894 ;;		Unchanged: 0/0
 14895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14896 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14899 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;Total ram usage:        2 bytes
 14901 ;; Hardware stack levels used:    1
 14902 ;; Hardware stack levels required when called:    4
 14903 ;; This function calls:
 14904 ;;		Nothing
 14905 ;; This function is called by:
 14906 ;;		_setDimmerLights_ERROR
 14907 ;;		_setDimmerLights_Adj
 14908 ;; This function uses a non-reentrant model
 14909 ;;
 14910                           
 14911                           
 14912                           ;psect for function _setLoad_StatusOff
 14913  1CAA                     _setLoad_StatusOff:	
 14914                           
 14915                           ;incstack = 0
 14916                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 14917                           ;setLoad_StatusOff@lights stored from wreg
 14918  1CAA  0020               	movlb	0	; select bank0
 14919  1CAB  00A1               	movwf	setLoad_StatusOff@lights
 14920                           
 14921                           ;OverLoad_B1.c: 286: Load->StatusOff=command;
 14922  1CAC  086E               	movf	_Load,w
 14923  1CAD  3E46               	addlw	70
 14924  1CAE  0086               	movwf	6
 14925  1CAF  3002               	movlw	2	; select bank4/5
 14926  1CB0  0087               	movwf	7
 14927  1CB1  0820               	movf	setLoad_StatusOff@command,w
 14928  1CB2  1081               	bcf	1,1
 14929  1CB3  1D03               	skipz
 14930  1CB4  1481               	bsf	1,1
 14931                           
 14932                           ;OverLoad_B1.c: 287: Load->SafeCount-=2;
 14933  1CB5  086E               	movf	_Load,w
 14934  1CB6  3E42               	addlw	66
 14935  1CB7  0086               	movwf	6
 14936  1CB8  3002               	movlw	2	; select bank4/5
 14937  1CB9  0087               	movwf	7
 14938  1CBA  3002               	movlw	2
 14939  1CBB  0281               	subwf	1,f
 14940                           
 14941                           ;OverLoad_B1.c: 288: if(lights == 1)
 14942  1CBC  0821               	movf	setLoad_StatusOff@lights,w
 14943  1CBD  3A01               	xorlw	1
 14944  1CBE  1D03               	skipz
 14945  1CBF  2CC6               	goto	l8178
 14946                           
 14947                           ;OverLoad_B1.c: 289: {
 14948                           ;OverLoad_B1.c: 290: Load->Lights1Status=0;
 14949  1CC0  086E               	movf	_Load,w
 14950  1CC1  3E43               	addlw	67
 14951  1CC2  0086               	movwf	6
 14952  1CC3  3002               	movlw	2	; select bank4/5
 14953  1CC4  0087               	movwf	7
 14954  1CC5  0181               	clrf	1
 14955  1CC6                     l8178:	
 14956                           
 14957                           ;OverLoad_B1.c: 291: }
 14958                           ;OverLoad_B1.c: 292: if(lights == 2)
 14959  1CC6  0821               	movf	setLoad_StatusOff@lights,w
 14960  1CC7  3A02               	xorlw	2
 14961  1CC8  1D03               	skipz
 14962  1CC9  2CD0               	goto	l8182
 14963                           
 14964                           ;OverLoad_B1.c: 293: {
 14965                           ;OverLoad_B1.c: 294: Load->Lights2Status=0;
 14966  1CCA  086E               	movf	_Load,w
 14967  1CCB  3E44               	addlw	68
 14968  1CCC  0086               	movwf	6
 14969  1CCD  3002               	movlw	2	; select bank4/5
 14970  1CCE  0087               	movwf	7
 14971  1CCF  0181               	clrf	1
 14972  1CD0                     l8182:	
 14973                           
 14974                           ;OverLoad_B1.c: 295: }
 14975                           ;OverLoad_B1.c: 296: if(lights == 3)
 14976  1CD0  0821               	movf	setLoad_StatusOff@lights,w
 14977  1CD1  3A03               	xorlw	3
 14978  1CD2  1D03               	skipz
 14979  1CD3  0008               	return
 14980                           
 14981                           ;OverLoad_B1.c: 297: {
 14982                           ;OverLoad_B1.c: 298: Load->Lights3Status=0;
 14983  1CD4  086E               	movf	_Load,w
 14984  1CD5  3E45               	addlw	69
 14985  1CD6  0086               	movwf	6
 14986  1CD7  3002               	movlw	2	; select bank4/5
 14987  1CD8  0087               	movwf	7
 14988  1CD9  0181               	clrf	1
 14989  1CDA  0008               	return
 14990  1CDB                     __end_of_setLoad_StatusOff:	
 14991                           
 14992                           	psect	text88
 14993  09F0                     __ptext88:	
 14994 ;; *************** function _setDimmerLights *****************
 14995 ;; Defined at:
 14996 ;;		line 321 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 14997 ;; Parameters:    Size  Location     Type
 14998 ;;  lights          1    wreg     unsigned char 
 14999 ;;  status          1    4[BANK0 ] unsigned char 
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;  lights          1    6[BANK0 ] unsigned char 
 15002 ;; Return value:  Size  Location     Type
 15003 ;;		None               void
 15004 ;; Registers used:
 15005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15006 ;; Tracked objects:
 15007 ;;		On entry : 0/0
 15008 ;;		On exit  : 0/0
 15009 ;;		Unchanged: 0/0
 15010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15011 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;Total ram usage:        3 bytes
 15016 ;; Hardware stack levels used:    1
 15017 ;; Hardware stack levels required when called:    6
 15018 ;; This function calls:
 15019 ;;		_DimmerLightsPointSelect
 15020 ;;		_setLED
 15021 ;;		_setLoad_Count
 15022 ;;		_setLoad_StatusOn
 15023 ;; This function is called by:
 15024 ;;		_setDimmerLights_Main
 15025 ;;		_setControl_Lights_Table
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           
 15030                           ;psect for function _setDimmerLights
 15031  09F0                     _setDimmerLights:	
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15035                           ;setDimmerLights@lights stored from wreg
 15036  09F0  0020               	movlb	0	; select bank0
 15037  09F1  00A6               	movwf	setDimmerLights@lights
 15038                           
 15039                           ;Dimmer_B1.c: 323: DimmerLightsPointSelect(lights);
 15040  09F2  0826               	movf	setDimmerLights@lights,w
 15041  09F3  31A6  26CC  3189   	fcall	_DimmerLightsPointSelect
 15042                           
 15043                           ;Dimmer_B1.c: 324: Dimmer->Load=lights;
 15044  09F6  0020               	movlb	0	; select bank0
 15045  09F7  0826               	movf	setDimmerLights@lights,w
 15046  09F8  00A5               	movwf	??_setDimmerLights
 15047  09F9  0021               	movlb	1	; select bank1
 15048  09FA  0A39               	incf	_Dimmer^(0+128),w
 15049  09FB  0086               	movwf	6
 15050  09FC  0187               	clrf	7
 15051  09FD  0020               	movlb	0	; select bank0
 15052  09FE  0825               	movf	??_setDimmerLights,w
 15053  09FF  0081               	movwf	1
 15054                           
 15055                           ;Dimmer_B1.c: 325: if(status)
 15056  0A00  0824               	movf	setDimmerLights@status,w
 15057  0A01  1903               	btfsc	3,2
 15058  0A02  2A5A               	goto	l8284
 15059                           
 15060                           ;Dimmer_B1.c: 326: {
 15061                           ;Dimmer_B1.c: 327: DimmerLights->Status=1;
 15062  0A03  086C               	movf	_DimmerLights,w
 15063  0A04  0086               	movwf	6
 15064  0A05  3001               	movlw	1	; select bank2/3
 15065  0A06  0087               	movwf	7
 15066  0A07  1681               	bsf	1,5
 15067                           
 15068                           ;Dimmer_B1.c: 328: setLED(lights,0);
 15069  0A08  01A2               	clrf	setLED@command
 15070  0A09  0826               	movf	setDimmerLights@lights,w
 15071  0A0A  3192  2276  3189   	fcall	_setLED
 15072                           
 15073                           ;Dimmer_B1.c: 329: RC7=!0;
 15074  0A0D  0020               	movlb	0	; select bank0
 15075  0A0E  178E               	bsf	14,7	;volatile
 15076                           
 15077                           ;Dimmer_B1.c: 330: setLoad_Count(0);
 15078  0A0F  3000               	movlw	0
 15079  0A10  3199  212E  3189   	fcall	_setLoad_Count
 15080                           
 15081                           ;Dimmer_B1.c: 332: DimmerLights->Signal=1;
 15082  0A13  0020               	movlb	0	; select bank0
 15083  0A14  086C               	movf	_DimmerLights,w
 15084  0A15  0086               	movwf	6
 15085  0A16  3001               	movlw	1	; select bank2/3
 15086  0A17  0087               	movwf	7
 15087  0A18  1481               	bsf	1,1
 15088                           
 15089                           ;Dimmer_B1.c: 333: DimmerLights->DimmingTimeValue=3;
 15090  0A19  3003               	movlw	3
 15091  0A1A  00A5               	movwf	??_setDimmerLights
 15092  0A1B  086C               	movf	_DimmerLights,w
 15093  0A1C  3E02               	addlw	2
 15094  0A1D  0086               	movwf	6
 15095  0A1E  3001               	movlw	1	; select bank2/3
 15096  0A1F  0087               	movwf	7
 15097  0A20  0825               	movf	??_setDimmerLights,w
 15098  0A21  0081               	movwf	1
 15099                           
 15100                           ;Dimmer_B1.c: 335: if(!DimmerLights->StatusFlag)
 15101  0A22  086C               	movf	_DimmerLights,w
 15102  0A23  0086               	movwf	6
 15103  0A24  3001               	movlw	1	; select bank2/3
 15104  0A25  0087               	movwf	7
 15105  0A26  1B01               	btfsc	1,6
 15106  0A27  0008               	return
 15107                           
 15108                           ;Dimmer_B1.c: 336: {
 15109                           ;Dimmer_B1.c: 337: DimmerLights->StatusFlag=1;
 15110  0A28  086C               	movf	_DimmerLights,w
 15111  0A29  0086               	movwf	6
 15112  0A2A  3001               	movlw	1	; select bank2/3
 15113  0A2B  0087               	movwf	7
 15114  0A2C  1701               	bsf	1,6
 15115                           
 15116                           ;Dimmer_B1.c: 338: setLoad_StatusOn(lights,1);
 15117  0A2D  01A0               	clrf	setLoad_StatusOn@command
 15118  0A2E  0AA0               	incf	setLoad_StatusOn@command,f
 15119  0A2F  0826               	movf	setDimmerLights@lights,w
 15120  0A30  319D  250C         	fcall	_setLoad_StatusOn
 15121                           
 15122                           ;Dimmer_B1.c: 339: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15123  0A32  0021               	movlb	1	; select bank1
 15124  0A33  086A               	movf	_Memory^(0+128),w
 15125  0A34  3E22               	addlw	34
 15126  0A35  0086               	movwf	6
 15127  0A36  3001               	movlw	1	; select bank2/3
 15128  0A37  0087               	movwf	7
 15129  0A38  1081               	bcf	1,1
 15130  0A39  086A               	movf	_Memory^(0+128),w
 15131  0A3A  3E23               	addlw	35
 15132  0A3B  0086               	movwf	6
 15133  0A3C  3001               	movlw	1	; select bank2/3
 15134  0A3D  0087               	movwf	7
 15135  0A3E  3000               	movlw	0
 15136  0A3F  3FC0               	movwi [0]fsr1
 15137  0A40  3FC1               	movwi [1]fsr1
 15138                           
 15139                           ;Dimmer_B1.c: 342: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15140  0A41  0020               	movlb	0	; select bank0
 15141  0A42  086C               	movf	_DimmerLights,w
 15142  0A43  3E05               	addlw	5
 15143  0A44  0086               	movwf	6
 15144  0A45  3001               	movlw	1	; select bank2/3
 15145  0A46  0087               	movwf	7
 15146  0A47  0801               	movf	1,w
 15147  0A48  00A5               	movwf	??_setDimmerLights
 15148  0A49  086C               	movf	_DimmerLights,w
 15149  0A4A  3E04               	addlw	4
 15150  0A4B  0086               	movwf	6
 15151  0A4C  3001               	movlw	1	; select bank2/3
 15152  0A4D  0087               	movwf	7
 15153  0A4E  0825               	movf	??_setDimmerLights,w
 15154  0A4F  0081               	movwf	1
 15155                           
 15156                           ;Dimmer_B1.c: 346: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15157  0A50  3043               	movlw	67
 15158  0A51  00A5               	movwf	??_setDimmerLights
 15159  0A52  086C               	movf	_DimmerLights,w
 15160  0A53  3E04               	addlw	4
 15161  0A54  0086               	movwf	6
 15162  0A55  3001               	movlw	1	; select bank2/3
 15163  0A56  0087               	movwf	7
 15164  0A57  0825               	movf	??_setDimmerLights,w
 15165  0A58  0081               	movwf	1
 15166                           
 15167                           ;Dimmer_B1.c: 348: }
 15168                           ;Dimmer_B1.c: 349: }
 15169  0A59  0008               	return
 15170  0A5A                     l8284:	
 15171                           
 15172                           ;Dimmer_B1.c: 350: else
 15173                           ;Dimmer_B1.c: 351: {
 15174                           ;Dimmer_B1.c: 352: DimmerLights->Status=0;
 15175  0A5A  086C               	movf	_DimmerLights,w
 15176  0A5B  0086               	movwf	6
 15177  0A5C  3001               	movlw	1	; select bank2/3
 15178  0A5D  0087               	movwf	7
 15179  0A5E  1281               	bcf	1,5
 15180                           
 15181                           ;Dimmer_B1.c: 354: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15182  0A5F  086C               	movf	_DimmerLights,w
 15183  0A60  3E06               	addlw	6
 15184  0A61  0086               	movwf	6
 15185  0A62  3001               	movlw	1	; select bank2/3
 15186  0A63  0087               	movwf	7
 15187  0A64  0801               	movf	1,w
 15188  0A65  00A5               	movwf	??_setDimmerLights
 15189  0A66  086C               	movf	_DimmerLights,w
 15190  0A67  3E04               	addlw	4
 15191  0A68  0086               	movwf	6
 15192  0A69  3001               	movlw	1	; select bank2/3
 15193  0A6A  0087               	movwf	7
 15194  0A6B  0825               	movf	??_setDimmerLights,w
 15195  0A6C  0081               	movwf	1
 15196                           
 15197                           ;Dimmer_B1.c: 361: DimmerLights->Signal=1;
 15198  0A6D  086C               	movf	_DimmerLights,w
 15199  0A6E  0086               	movwf	6
 15200  0A6F  3001               	movlw	1	; select bank2/3
 15201  0A70  0087               	movwf	7
 15202  0A71  1481               	bsf	1,1
 15203                           
 15204                           ;Dimmer_B1.c: 362: DimmerLights->AdjFlag=0;
 15205  0A72  086C               	movf	_DimmerLights,w
 15206  0A73  0086               	movwf	6
 15207  0A74  3001               	movlw	1	; select bank2/3
 15208  0A75  0087               	movwf	7
 15209  0A76  1181               	bcf	1,3
 15210                           
 15211                           ;Dimmer_B1.c: 363: DimmerLights->AdjStatus=0;
 15212  0A77  086C               	movf	_DimmerLights,w
 15213  0A78  0086               	movwf	6
 15214  0A79  3001               	movlw	1	; select bank2/3
 15215  0A7A  0087               	movwf	7
 15216  0A7B  1201               	bcf	1,4
 15217                           
 15218                           ;Dimmer_B1.c: 364: DimmerLights->DimmingTimeValue=3;
 15219  0A7C  3003               	movlw	3
 15220  0A7D  00A5               	movwf	??_setDimmerLights
 15221  0A7E  086C               	movf	_DimmerLights,w
 15222  0A7F  3E02               	addlw	2
 15223  0A80  0086               	movwf	6
 15224  0A81  3001               	movlw	1	; select bank2/3
 15225  0A82  0087               	movwf	7
 15226  0A83  0825               	movf	??_setDimmerLights,w
 15227  0A84  0081               	movwf	1
 15228  0A85  0008               	return
 15229  0A86                     __end_of_setDimmerLights:	
 15230                           
 15231                           	psect	text89
 15232  1D0C                     __ptext89:	
 15233 ;; *************** function _setLoad_StatusOn *****************
 15234 ;; Defined at:
 15235 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 15236 ;; Parameters:    Size  Location     Type
 15237 ;;  lights          1    wreg     unsigned char 
 15238 ;;  command         1    0[BANK0 ] unsigned char 
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;  lights          1    1[BANK0 ] unsigned char 
 15241 ;; Return value:  Size  Location     Type
 15242 ;;		None               void
 15243 ;; Registers used:
 15244 ;;		wreg, fsr1l, fsr1h
 15245 ;; Tracked objects:
 15246 ;;		On entry : 0/0
 15247 ;;		On exit  : 0/0
 15248 ;;		Unchanged: 0/0
 15249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15250 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;Total ram usage:        2 bytes
 15255 ;; Hardware stack levels used:    1
 15256 ;; Hardware stack levels required when called:    4
 15257 ;; This function calls:
 15258 ;;		Nothing
 15259 ;; This function is called by:
 15260 ;;		_setDimmerLights
 15261 ;; This function uses a non-reentrant model
 15262 ;;
 15263                           
 15264                           
 15265                           ;psect for function _setLoad_StatusOn
 15266  1D0C                     _setLoad_StatusOn:	
 15267                           
 15268                           ;incstack = 0
 15269                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15270                           ;setLoad_StatusOn@lights stored from wreg
 15271  1D0C  0020               	movlb	0	; select bank0
 15272  1D0D  00A1               	movwf	setLoad_StatusOn@lights
 15273                           
 15274                           ;OverLoad_B1.c: 268: Load->GO=1;
 15275  1D0E  086E               	movf	_Load,w
 15276  1D0F  0086               	movwf	6
 15277  1D10  3002               	movlw	2	; select bank4/5
 15278  1D11  0087               	movwf	7
 15279  1D12  1481               	bsf	1,1
 15280                           
 15281                           ;OverLoad_B1.c: 269: Load->StatusOn=command;
 15282  1D13  086E               	movf	_Load,w
 15283  1D14  3E46               	addlw	70
 15284  1D15  0086               	movwf	6
 15285  1D16  3002               	movlw	2	; select bank4/5
 15286  1D17  0087               	movwf	7
 15287  1D18  0820               	movf	setLoad_StatusOn@command,w
 15288  1D19  1001               	bcf	1,0
 15289  1D1A  1D03               	skipz
 15290  1D1B  1401               	bsf	1,0
 15291                           
 15292                           ;OverLoad_B1.c: 271: if(lights == 1)
 15293  1D1C  0821               	movf	setLoad_StatusOn@lights,w
 15294  1D1D  3A01               	xorlw	1
 15295  1D1E  1D03               	skipz
 15296  1D1F  2D27               	goto	l8242
 15297                           
 15298                           ;OverLoad_B1.c: 272: {
 15299                           ;OverLoad_B1.c: 273: Load->Lights1Status=1;
 15300  1D20  086E               	movf	_Load,w
 15301  1D21  3E43               	addlw	67
 15302  1D22  0086               	movwf	6
 15303  1D23  3002               	movlw	2	; select bank4/5
 15304  1D24  0087               	movwf	7
 15305  1D25  0181               	clrf	1
 15306  1D26  0A81               	incf	1,f
 15307  1D27                     l8242:	
 15308                           
 15309                           ;OverLoad_B1.c: 274: }
 15310                           ;OverLoad_B1.c: 275: if(lights == 2)
 15311  1D27  0821               	movf	setLoad_StatusOn@lights,w
 15312  1D28  3A02               	xorlw	2
 15313  1D29  1D03               	skipz
 15314  1D2A  2D32               	goto	l8246
 15315                           
 15316                           ;OverLoad_B1.c: 276: {
 15317                           ;OverLoad_B1.c: 277: Load->Lights2Status=1;
 15318  1D2B  086E               	movf	_Load,w
 15319  1D2C  3E44               	addlw	68
 15320  1D2D  0086               	movwf	6
 15321  1D2E  3002               	movlw	2	; select bank4/5
 15322  1D2F  0087               	movwf	7
 15323  1D30  0181               	clrf	1
 15324  1D31  0A81               	incf	1,f
 15325  1D32                     l8246:	
 15326                           
 15327                           ;OverLoad_B1.c: 278: }
 15328                           ;OverLoad_B1.c: 279: if(lights == 3)
 15329  1D32  0821               	movf	setLoad_StatusOn@lights,w
 15330  1D33  3A03               	xorlw	3
 15331  1D34  1D03               	skipz
 15332  1D35  0008               	return
 15333                           
 15334                           ;OverLoad_B1.c: 280: {
 15335                           ;OverLoad_B1.c: 281: Load->Lights3Status=1;
 15336  1D36  086E               	movf	_Load,w
 15337  1D37  3E45               	addlw	69
 15338  1D38  0086               	movwf	6
 15339  1D39  3002               	movlw	2	; select bank4/5
 15340  1D3A  0087               	movwf	7
 15341  1D3B  0181               	clrf	1
 15342  1D3C  0A81               	incf	1,f
 15343  1D3D  0008               	return
 15344  1D3E                     __end_of_setLoad_StatusOn:	
 15345                           
 15346                           	psect	text90
 15347  192E                     __ptext90:	
 15348 ;; *************** function _setLoad_Count *****************
 15349 ;; Defined at:
 15350 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 15351 ;; Parameters:    Size  Location     Type
 15352 ;;  command         1    wreg     unsigned char 
 15353 ;; Auto vars:     Size  Location     Type
 15354 ;;  command         1    1[BANK0 ] unsigned char 
 15355 ;; Return value:  Size  Location     Type
 15356 ;;		None               void
 15357 ;; Registers used:
 15358 ;;		wreg, fsr1l, fsr1h
 15359 ;; Tracked objects:
 15360 ;;		On entry : 0/0
 15361 ;;		On exit  : 0/0
 15362 ;;		Unchanged: 0/0
 15363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15368 ;;Total ram usage:        2 bytes
 15369 ;; Hardware stack levels used:    1
 15370 ;; Hardware stack levels required when called:    4
 15371 ;; This function calls:
 15372 ;;		Nothing
 15373 ;; This function is called by:
 15374 ;;		_setDimmerLights
 15375 ;; This function uses a non-reentrant model
 15376 ;;
 15377                           
 15378                           
 15379                           ;psect for function _setLoad_Count
 15380  192E                     _setLoad_Count:	
 15381                           
 15382                           ;incstack = 0
 15383                           ; Regs used in _setLoad_Count: [wregfsr1]
 15384                           ;setLoad_Count@command stored from wreg
 15385  192E  0020               	movlb	0	; select bank0
 15386  192F  00A1               	movwf	setLoad_Count@command
 15387                           
 15388                           ;OverLoad_B1.c: 253: Load->Count=command;
 15389  1930  0821               	movf	setLoad_Count@command,w
 15390  1931  00A0               	movwf	??_setLoad_Count
 15391  1932  086E               	movf	_Load,w
 15392  1933  3E3A               	addlw	58
 15393  1934  0086               	movwf	6
 15394  1935  3002               	movlw	2	; select bank4/5
 15395  1936  0087               	movwf	7
 15396  1937  0820               	movf	??_setLoad_Count,w
 15397  1938  0081               	movwf	1
 15398                           
 15399                           ;OverLoad_B1.c: 254: Load->SafeCount=command;
 15400  1939  0821               	movf	setLoad_Count@command,w
 15401  193A  00A0               	movwf	??_setLoad_Count
 15402  193B  086E               	movf	_Load,w
 15403  193C  3E42               	addlw	66
 15404  193D  0086               	movwf	6
 15405  193E  3002               	movlw	2	; select bank4/5
 15406  193F  0087               	movwf	7
 15407  1940  0820               	movf	??_setLoad_Count,w
 15408  1941  0081               	movwf	1
 15409  1942  0008               	return
 15410  1943                     __end_of_setLoad_Count:	
 15411                           
 15412                           	psect	text91
 15413  1276                     __ptext91:	
 15414 ;; *************** function _setLED *****************
 15415 ;; Defined at:
 15416 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\LED_B1.c"
 15417 ;; Parameters:    Size  Location     Type
 15418 ;;  led             1    wreg     unsigned char 
 15419 ;;  command         1    2[BANK0 ] unsigned char 
 15420 ;; Auto vars:     Size  Location     Type
 15421 ;;  led             1    3[BANK0 ] unsigned char 
 15422 ;; Return value:  Size  Location     Type
 15423 ;;		None               void
 15424 ;; Registers used:
 15425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15426 ;; Tracked objects:
 15427 ;;		On entry : 0/0
 15428 ;;		On exit  : 0/0
 15429 ;;		Unchanged: 0/0
 15430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15431 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;Total ram usage:        2 bytes
 15436 ;; Hardware stack levels used:    1
 15437 ;; Hardware stack levels required when called:    5
 15438 ;; This function calls:
 15439 ;;		_LedPointSelect
 15440 ;; This function is called by:
 15441 ;;		_setDimmerLights_ERROR
 15442 ;;		_setDimmerLights
 15443 ;;		_setLED_Initialization
 15444 ;;		_setLoad_Exceptions
 15445 ;;		_setOverTemp_Exceptions
 15446 ;;		_setPowerFault_Exceptions
 15447 ;;		_setSw_Initialization
 15448 ;; This function uses a non-reentrant model
 15449 ;;
 15450                           
 15451                           
 15452                           ;psect for function _setLED
 15453  1276                     _setLED:	
 15454                           
 15455                           ;incstack = 0
 15456                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15457                           ;setLED@led stored from wreg
 15458  1276  0020               	movlb	0	; select bank0
 15459  1277  00A3               	movwf	setLED@led
 15460                           
 15461                           ;LED_B1.c: 76: LedPointSelect(led);
 15462  1278  0823               	movf	setLED@led,w
 15463  1279  319A  2271  3192   	fcall	_LedPointSelect
 15464                           
 15465                           ;LED_B1.c: 77: if(command == 0)
 15466  127C  0020               	movlb	0	; select bank0
 15467  127D  08A2               	movf	setLED@command,f
 15468  127E  1D03               	skipz
 15469  127F  2A92               	goto	l8202
 15470                           
 15471                           ;LED_B1.c: 78: {
 15472                           ;LED_B1.c: 80: if(led == 1)
 15473  1280  0823               	movf	setLED@led,w
 15474  1281  3A01               	xorlw	1
 15475  1282  1D03               	skipz
 15476  1283  2A86               	goto	l8194
 15477                           
 15478                           ;LED_B1.c: 81: {
 15479                           ;LED_B1.c: 85: RA3=1;
 15480  1284  158C               	bsf	12,3	;volatile
 15481                           
 15482                           ;LED_B1.c: 87: }
 15483  1285  0008               	return
 15484  1286                     l8194:	
 15485                           
 15486                           ;LED_B1.c: 90: else if(led == 2)
 15487  1286  0823               	movf	setLED@led,w
 15488  1287  3A02               	xorlw	2
 15489  1288  1D03               	skipz
 15490  1289  2A8C               	goto	l8198
 15491                           
 15492                           ;LED_B1.c: 91: {
 15493                           ;LED_B1.c: 95: RC7=1;
 15494  128A  178E               	bsf	14,7	;volatile
 15495                           
 15496                           ;LED_B1.c: 97: }
 15497  128B  0008               	return
 15498  128C                     l8198:	
 15499                           
 15500                           ;LED_B1.c: 110: else if(led == 99)
 15501  128C  0823               	movf	setLED@led,w
 15502  128D  3A63               	xorlw	99
 15503  128E  1D03               	skipz
 15504  128F  0008               	return
 15505                           
 15506                           ;LED_B1.c: 111: {
 15507                           ;LED_B1.c: 115: RB5=1;
 15508  1290  168D               	bsf	13,5	;volatile
 15509                           
 15510                           ;LED_B1.c: 117: }
 15511                           ;LED_B1.c: 119: }
 15512  1291  0008               	return
 15513  1292                     l8202:	
 15514                           
 15515                           ;LED_B1.c: 120: else if(command == 1)
 15516  1292  0822               	movf	setLED@command,w
 15517  1293  3A01               	xorlw	1
 15518  1294  1D03               	skipz
 15519  1295  2AA8               	goto	l8216
 15520                           
 15521                           ;LED_B1.c: 121: {
 15522                           ;LED_B1.c: 123: if(led == 1)
 15523  1296  0823               	movf	setLED@led,w
 15524  1297  3A01               	xorlw	1
 15525  1298  1D03               	skipz
 15526  1299  2A9C               	goto	l8208
 15527                           
 15528                           ;LED_B1.c: 124: {
 15529                           ;LED_B1.c: 128: RA3=0;
 15530  129A  118C               	bcf	12,3	;volatile
 15531                           
 15532                           ;LED_B1.c: 130: }
 15533  129B  0008               	return
 15534  129C                     l8208:	
 15535                           
 15536                           ;LED_B1.c: 133: else if(led == 2)
 15537  129C  0823               	movf	setLED@led,w
 15538  129D  3A02               	xorlw	2
 15539  129E  1D03               	skipz
 15540  129F  2AA2               	goto	l8212
 15541                           
 15542                           ;LED_B1.c: 134: {
 15543                           ;LED_B1.c: 138: RC7=0;
 15544  12A0  138E               	bcf	14,7	;volatile
 15545                           
 15546                           ;LED_B1.c: 140: }
 15547  12A1  0008               	return
 15548  12A2                     l8212:	
 15549                           
 15550                           ;LED_B1.c: 153: else if(led == 99)
 15551  12A2  0823               	movf	setLED@led,w
 15552  12A3  3A63               	xorlw	99
 15553  12A4  1D03               	skipz
 15554  12A5  0008               	return
 15555                           
 15556                           ;LED_B1.c: 154: {
 15557                           ;LED_B1.c: 158: RB5=0;
 15558  12A6  128D               	bcf	13,5	;volatile
 15559                           
 15560                           ;LED_B1.c: 160: }
 15561                           ;LED_B1.c: 162: }
 15562  12A7  0008               	return
 15563  12A8                     l8216:	
 15564                           
 15565                           ;LED_B1.c: 163: else if(command == 10)
 15566  12A8  0822               	movf	setLED@command,w
 15567  12A9  3A0A               	xorlw	10
 15568  12AA  1D03               	skipz
 15569  12AB  2ACA               	goto	l8232
 15570                           
 15571                           ;LED_B1.c: 164: {
 15572                           ;LED_B1.c: 165: LED->GO=0;
 15573  12AC  0021               	movlb	1	; select bank1
 15574  12AD  083B               	movf	_LED^(0+128),w
 15575  12AE  0086               	movwf	6
 15576  12AF  0187               	clrf	7
 15577  12B0  1081               	bcf	1,1
 15578                           
 15579                           ;LED_B1.c: 166: LED->Time=0;
 15580  12B1  0A3B               	incf	_LED^(0+128),w
 15581  12B2  0086               	movwf	6
 15582  12B3  0187               	clrf	7
 15583  12B4  3000               	movlw	0
 15584  12B5  3FC0               	movwi [0]fsr1
 15585  12B6  3FC1               	movwi [1]fsr1
 15586                           
 15587                           ;LED_B1.c: 168: if(led == 1)
 15588  12B7  0020               	movlb	0	; select bank0
 15589  12B8  0823               	movf	setLED@led,w
 15590  12B9  3A01               	xorlw	1
 15591  12BA  1D03               	skipz
 15592  12BB  2ABE               	goto	l8224
 15593                           
 15594                           ;LED_B1.c: 169: {
 15595                           ;LED_B1.c: 173: RA3=1;
 15596  12BC  158C               	bsf	12,3	;volatile
 15597                           
 15598                           ;LED_B1.c: 175: }
 15599  12BD  0008               	return
 15600  12BE                     l8224:	
 15601                           
 15602                           ;LED_B1.c: 178: else if(led == 2)
 15603  12BE  0823               	movf	setLED@led,w
 15604  12BF  3A02               	xorlw	2
 15605  12C0  1D03               	skipz
 15606  12C1  2AC4               	goto	l8228
 15607                           
 15608                           ;LED_B1.c: 179: {
 15609                           ;LED_B1.c: 183: RC7=1;
 15610  12C2  178E               	bsf	14,7	;volatile
 15611                           
 15612                           ;LED_B1.c: 185: }
 15613  12C3  0008               	return
 15614  12C4                     l8228:	
 15615                           
 15616                           ;LED_B1.c: 198: else if(led == 99)
 15617  12C4  0823               	movf	setLED@led,w
 15618  12C5  3A63               	xorlw	99
 15619  12C6  1D03               	skipz
 15620  12C7  0008               	return
 15621                           
 15622                           ;LED_B1.c: 199: {
 15623                           ;LED_B1.c: 203: RB5=1;
 15624  12C8  168D               	bsf	13,5	;volatile
 15625                           
 15626                           ;LED_B1.c: 205: }
 15627                           ;LED_B1.c: 207: }
 15628  12C9  0008               	return
 15629  12CA                     l8232:	
 15630                           
 15631                           ;LED_B1.c: 208: else if(command == 11)
 15632  12CA  0822               	movf	setLED@command,w
 15633  12CB  3A0B               	xorlw	11
 15634  12CC  1D03               	skipz
 15635  12CD  0008               	return
 15636                           
 15637                           ;LED_B1.c: 209: {
 15638                           ;LED_B1.c: 210: LED->GO=1;
 15639  12CE  0021               	movlb	1	; select bank1
 15640  12CF  083B               	movf	_LED^(0+128),w
 15641  12D0  0086               	movwf	6
 15642  12D1  0187               	clrf	7
 15643  12D2  1481               	bsf	1,1
 15644  12D3  0008               	return
 15645  12D4                     __end_of_setLED:	
 15646                           
 15647                           	psect	text92
 15648  1A71                     __ptext92:	
 15649 ;; *************** function _LedPointSelect *****************
 15650 ;; Defined at:
 15651 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.1
      +.1.1\Release\LED_B1.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;  led             1    wreg     unsigned char 
 15654 ;; Auto vars:     Size  Location     Type
 15655 ;;  led             1    1[BANK0 ] unsigned char 
 15656 ;; Return value:  Size  Location     Type
 15657 ;;		None               void
 15658 ;; Registers used:
 15659 ;;		wreg
 15660 ;; Tracked objects:
 15661 ;;		On entry : 0/0
 15662 ;;		On exit  : 0/0
 15663 ;;		Unchanged: 0/0
 15664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15669 ;;Total ram usage:        2 bytes
 15670 ;; Hardware stack levels used:    1
 15671 ;; Hardware stack levels required when called:    4
 15672 ;; This function calls:
 15673 ;;		Nothing
 15674 ;; This function is called by:
 15675 ;;		_setLED_Initialization
 15676 ;;		_setLED
 15677 ;;		_setLED_Main
 15678 ;; This function uses a non-reentrant model
 15679 ;;
 15680                           
 15681                           
 15682                           ;psect for function _LedPointSelect
 15683  1A71                     _LedPointSelect:	
 15684                           
 15685                           ;incstack = 0
 15686                           ; Regs used in _LedPointSelect: [wreg]
 15687                           ;LedPointSelect@led stored from wreg
 15688  1A71  0020               	movlb	0	; select bank0
 15689  1A72  00A1               	movwf	LedPointSelect@led
 15690                           
 15691                           ;LED_B1.c: 10: if(led == 1)
 15692  1A73  0821               	movf	LedPointSelect@led,w
 15693  1A74  3A01               	xorlw	1
 15694  1A75  1D03               	skipz
 15695  1A76  2A7D               	goto	l6072
 15696                           
 15697                           ;LED_B1.c: 11: {
 15698                           ;LED_B1.c: 12: LED=&VarLED1;
 15699  1A77  30DC               	movlw	_VarLED1& (0+255)
 15700  1A78  00A0               	movwf	??_LedPointSelect
 15701  1A79  0820               	movf	??_LedPointSelect,w
 15702  1A7A  0021               	movlb	1	; select bank1
 15703  1A7B  00BB               	movwf	_LED^(0+128)
 15704                           
 15705                           ;LED_B1.c: 13: }
 15706  1A7C  0008               	return
 15707  1A7D                     l6072:	
 15708                           
 15709                           ;LED_B1.c: 16: else if(led == 2)
 15710  1A7D  0020               	movlb	0	; select bank0
 15711  1A7E  0821               	movf	LedPointSelect@led,w
 15712  1A7F  3A02               	xorlw	2
 15713  1A80  1D03               	skipz
 15714  1A81  2A88               	goto	l6076
 15715                           
 15716                           ;LED_B1.c: 17: {
 15717                           ;LED_B1.c: 18: LED=&VarLED2;
 15718  1A82  30E0               	movlw	_VarLED2& (0+255)
 15719  1A83  00A0               	movwf	??_LedPointSelect
 15720  1A84  0820               	movf	??_LedPointSelect,w
 15721  1A85  0021               	movlb	1	; select bank1
 15722  1A86  00BB               	movwf	_LED^(0+128)
 15723                           
 15724                           ;LED_B1.c: 19: }
 15725  1A87  0008               	return
 15726  1A88                     l6076:	
 15727                           
 15728                           ;LED_B1.c: 28: else if(led == 99)
 15729  1A88  0020               	movlb	0	; select bank0
 15730  1A89  0821               	movf	LedPointSelect@led,w
 15731  1A8A  3A63               	xorlw	99
 15732  1A8B  1D03               	skipz
 15733  1A8C  0008               	return
 15734                           
 15735                           ;LED_B1.c: 29: {
 15736                           ;LED_B1.c: 30: LED=&VarErrLED;
 15737  1A8D  30D8               	movlw	_VarErrLED& (0+255)
 15738  1A8E  00A0               	movwf	??_LedPointSelect
 15739  1A8F  0820               	movf	??_LedPointSelect,w
 15740  1A90  0021               	movlb	1	; select bank1
 15741  1A91  00BB               	movwf	_LED^(0+128)
 15742  1A92  0008               	return
 15743  1A93                     __end_of_LedPointSelect:	
 15744                           
 15745                           	psect	text93
 15746  19BC                     __ptext93:	
 15747 ;; *************** function _DimmerLights_Close *****************
 15748 ;; Defined at:
 15749 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Dimmer_B1.c"
 15750 ;; Parameters:    Size  Location     Type
 15751 ;;		None
 15752 ;; Auto vars:     Size  Location     Type
 15753 ;;		None
 15754 ;; Return value:  Size  Location     Type
 15755 ;;		None               void
 15756 ;; Registers used:
 15757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15758 ;; Tracked objects:
 15759 ;;		On entry : 0/0
 15760 ;;		On exit  : 0/0
 15761 ;;		Unchanged: 0/0
 15762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;Total ram usage:        0 bytes
 15768 ;; Hardware stack levels used:    1
 15769 ;; Hardware stack levels required when called:    5
 15770 ;; This function calls:
 15771 ;;		_getDimmerLights_StatusFlag
 15772 ;;		_setLoad_GO
 15773 ;; This function is called by:
 15774 ;;		_DimmerLights_Main
 15775 ;; This function uses a non-reentrant model
 15776 ;;
 15777                           
 15778                           
 15779                           ;psect for function _DimmerLights_Close
 15780  19BC                     _DimmerLights_Close:	
 15781                           
 15782                           ;Dimmer_B1.c: 94: if(Dimmer->Detect)
 15783                           
 15784                           ;incstack = 0
 15785                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15786  19BC  0021               	movlb	1	; select bank1
 15787  19BD  0839               	movf	_Dimmer^(0+128),w
 15788  19BE  0086               	movwf	6
 15789  19BF  0187               	clrf	7
 15790  19C0  1C01               	btfss	1,0
 15791  19C1  0008               	return
 15792                           
 15793                           ;Dimmer_B1.c: 95: {
 15794                           ;Dimmer_B1.c: 96: Dimmer->Detect=0;
 15795  19C2  0839               	movf	_Dimmer^(0+128),w
 15796  19C3  0086               	movwf	6
 15797  19C4  0187               	clrf	7
 15798  19C5  1001               	bcf	1,0
 15799                           
 15800                           ;Dimmer_B1.c: 97: if(!getDimmerLights_StatusFlag())
 15801  19C6  31A7  2761  3199   	fcall	_getDimmerLights_StatusFlag
 15802  19C9  3800               	iorlw	0
 15803  19CA  1D03               	skipz
 15804  19CB  0008               	return
 15805                           
 15806                           ;Dimmer_B1.c: 98: {
 15807                           ;Dimmer_B1.c: 99: setLoad_GO(0);
 15808  19CC  3000               	movlw	0
 15809  19CD  31A6  26ED         	fcall	_setLoad_GO
 15810                           
 15811                           ;Dimmer_B1.c: 100: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 15812  19CF  0021               	movlb	1	; select bank1
 15813  19D0  086A               	movf	_Memory^(0+128),w
 15814  19D1  3E22               	addlw	34
 15815  19D2  0086               	movwf	6
 15816  19D3  3001               	movlw	1	; select bank2/3
 15817  19D4  0087               	movwf	7
 15818  19D5  1481               	bsf	1,1
 15819  19D6  0008               	return
 15820  19D7                     __end_of_DimmerLights_Close:	
 15821                           
 15822                           	psect	text94
 15823  26ED                     __ptext94:	
 15824 ;; *************** function _setLoad_GO *****************
 15825 ;; Defined at:
 15826 ;;		line 262 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 15827 ;; Parameters:    Size  Location     Type
 15828 ;;  command         1    wreg     unsigned char 
 15829 ;; Auto vars:     Size  Location     Type
 15830 ;;  command         1    0[BANK0 ] unsigned char 
 15831 ;; Return value:  Size  Location     Type
 15832 ;;		None               void
 15833 ;; Registers used:
 15834 ;;		wreg, fsr1l, fsr1h
 15835 ;; Tracked objects:
 15836 ;;		On entry : 0/0
 15837 ;;		On exit  : 0/0
 15838 ;;		Unchanged: 0/0
 15839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;Total ram usage:        1 bytes
 15845 ;; Hardware stack levels used:    1
 15846 ;; Hardware stack levels required when called:    4
 15847 ;; This function calls:
 15848 ;;		Nothing
 15849 ;; This function is called by:
 15850 ;;		_DimmerLights_Close
 15851 ;; This function uses a non-reentrant model
 15852 ;;
 15853                           
 15854                           
 15855                           ;psect for function _setLoad_GO
 15856  26ED                     _setLoad_GO:	
 15857                           
 15858                           ;incstack = 0
 15859                           ; Regs used in _setLoad_GO: [wregfsr1]
 15860                           ;setLoad_GO@command stored from wreg
 15861  26ED  0020               	movlb	0	; select bank0
 15862  26EE  00A0               	movwf	setLoad_GO@command
 15863                           
 15864                           ;OverLoad_B1.c: 264: Load->GO=command;
 15865  26EF  086E               	movf	_Load,w
 15866  26F0  0086               	movwf	6
 15867  26F1  3002               	movlw	2	; select bank4/5
 15868  26F2  0087               	movwf	7
 15869  26F3  0820               	movf	setLoad_GO@command,w
 15870  26F4  1081               	bcf	1,1
 15871  26F5  1D03               	skipz
 15872  26F6  1481               	bsf	1,1
 15873  26F7  0008               	return
 15874  26F8                     __end_of_setLoad_GO:	
 15875                           
 15876                           	psect	text95
 15877  2761                     __ptext95:	
 15878 ;; *************** function _getDimmerLights_StatusFlag *****************
 15879 ;; Defined at:
 15880 ;;		line 199 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 15881 ;; Parameters:    Size  Location     Type
 15882 ;;		None
 15883 ;; Auto vars:     Size  Location     Type
 15884 ;;  Status          1    0[BANK0 ] unsigned char 
 15885 ;; Return value:  Size  Location     Type
 15886 ;;                  1    wreg      unsigned char 
 15887 ;; Registers used:
 15888 ;;		wreg, fsr1l, fsr1h, status,2
 15889 ;; Tracked objects:
 15890 ;;		On entry : 0/0
 15891 ;;		On exit  : 0/0
 15892 ;;		Unchanged: 0/0
 15893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;Total ram usage:        1 bytes
 15899 ;; Hardware stack levels used:    1
 15900 ;; Hardware stack levels required when called:    4
 15901 ;; This function calls:
 15902 ;;		Nothing
 15903 ;; This function is called by:
 15904 ;;		_DimmerLights_Close
 15905 ;;		_DimmerLights_Exceptions
 15906 ;; This function uses a non-reentrant model
 15907 ;;
 15908                           
 15909                           
 15910                           ;psect for function _getDimmerLights_StatusFlag
 15911  2761                     _getDimmerLights_StatusFlag:	
 15912                           
 15913                           ;Dimmer_B1.c: 201: char Status=0;
 15914                           
 15915                           ;incstack = 0
 15916                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 15917  2761  0020               	movlb	0	; select bank0
 15918  2762  01A0               	clrf	getDimmerLights_StatusFlag@Status
 15919                           
 15920                           ;Dimmer_B1.c: 212: Status=(DimmerLights11->StatusFlag)?1:0;
 15921  2763  0879               	movf	_DimmerLights11,w
 15922  2764  0086               	movwf	6
 15923  2765  3001               	movlw	1	; select bank2/3
 15924  2766  0087               	movwf	7
 15925  2767  3000               	movlw	0
 15926  2768  1B01               	btfsc	1,6
 15927  2769  3001               	movlw	1
 15928  276A  00A0               	movwf	getDimmerLights_StatusFlag@Status
 15929                           
 15930                           ;Dimmer_B1.c: 215: return Status;
 15931  276B  0820               	movf	getDimmerLights_StatusFlag@Status,w
 15932  276C  0008               	return
 15933  276D                     __end_of_getDimmerLights_StatusFlag:	
 15934                           
 15935                           	psect	text96
 15936  2755                     __ptext96:	
 15937 ;; *************** function _DimmerLights_Initialization *****************
 15938 ;; Defined at:
 15939 ;;		line 32 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Dimmer_B1.c"
 15940 ;; Parameters:    Size  Location     Type
 15941 ;;		None
 15942 ;; Auto vars:     Size  Location     Type
 15943 ;;		None
 15944 ;; Return value:  Size  Location     Type
 15945 ;;		None               void
 15946 ;; Registers used:
 15947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15948 ;; Tracked objects:
 15949 ;;		On entry : 0/0
 15950 ;;		On exit  : 0/0
 15951 ;;		Unchanged: 0/0
 15952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;Total ram usage:        1 bytes
 15958 ;; Hardware stack levels used:    1
 15959 ;; Hardware stack levels required when called:    6
 15960 ;; This function calls:
 15961 ;;		_Dimmer_Initialization
 15962 ;;		_setDimmerLights_Initialization
 15963 ;; This function is called by:
 15964 ;;		_main
 15965 ;; This function uses a non-reentrant model
 15966 ;;
 15967                           
 15968                           
 15969                           ;psect for function _DimmerLights_Initialization
 15970  2755                     _DimmerLights_Initialization:	
 15971                           
 15972                           ;Dimmer_B1.c: 35: DimmerLights11=&DimmerLights1;
 15973                           
 15974                           ;incstack = 0
 15975                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15976  2755  303E               	movlw	_DimmerLights1& (0+255)
 15977  2756  0020               	movlb	0	; select bank0
 15978  2757  00A4               	movwf	??_DimmerLights_Initialization
 15979  2758  0824               	movf	??_DimmerLights_Initialization,w
 15980  2759  00F9               	movwf	_DimmerLights11
 15981                           
 15982                           ;Dimmer_B1.c: 36: setDimmerLights_Initialization(1);
 15983  275A  3001               	movlw	1
 15984  275B  319B  23EE  31A7   	fcall	_setDimmerLights_Initialization
 15985                           
 15986                           ;Dimmer_B1.c: 50: Dimmer_Initialization();
 15987  275E  31A6  2664         	fcall	_Dimmer_Initialization
 15988  2760  0008               	return
 15989  2761                     __end_of_DimmerLights_Initialization:	
 15990                           
 15991                           	psect	text97
 15992  1BEE                     __ptext97:	
 15993 ;; *************** function _setDimmerLights_Initialization *****************
 15994 ;; Defined at:
 15995 ;;		line 54 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Dimmer_B1.c"
 15996 ;; Parameters:    Size  Location     Type
 15997 ;;  lights          1    wreg     unsigned char 
 15998 ;; Auto vars:     Size  Location     Type
 15999 ;;  lights          1    3[BANK0 ] unsigned char 
 16000 ;; Return value:  Size  Location     Type
 16001 ;;		None               void
 16002 ;; Registers used:
 16003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16004 ;; Tracked objects:
 16005 ;;		On entry : 0/0
 16006 ;;		On exit  : 0/0
 16007 ;;		Unchanged: 0/0
 16008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;Total ram usage:        2 bytes
 16014 ;; Hardware stack levels used:    1
 16015 ;; Hardware stack levels required when called:    5
 16016 ;; This function calls:
 16017 ;;		_DimmerLightsPointSelect
 16018 ;; This function is called by:
 16019 ;;		_DimmerLights_Initialization
 16020 ;; This function uses a non-reentrant model
 16021 ;;
 16022                           
 16023                           
 16024                           ;psect for function _setDimmerLights_Initialization
 16025  1BEE                     _setDimmerLights_Initialization:	
 16026                           
 16027                           ;incstack = 0
 16028                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16029                           ;setDimmerLights_Initialization@lights stored from wreg
 16030  1BEE  0020               	movlb	0	; select bank0
 16031  1BEF  00A3               	movwf	setDimmerLights_Initialization@lights
 16032                           
 16033                           ;Dimmer_B1.c: 56: DimmerLightsPointSelect(lights);
 16034  1BF0  0823               	movf	setDimmerLights_Initialization@lights,w
 16035  1BF1  31A6  26CC         	fcall	_DimmerLightsPointSelect
 16036                           
 16037                           ;Dimmer_B1.c: 57: DimmerLights->Clear=1;
 16038  1BF3  0020               	movlb	0	; select bank0
 16039  1BF4  086C               	movf	_DimmerLights,w
 16040  1BF5  3E0C               	addlw	12
 16041  1BF6  0086               	movwf	6
 16042  1BF7  3001               	movlw	1	; select bank2/3
 16043  1BF8  0087               	movwf	7
 16044  1BF9  1401               	bsf	1,0
 16045                           
 16046                           ;Dimmer_B1.c: 63: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16047  1BFA  3043               	movlw	67
 16048  1BFB  00A2               	movwf	??_setDimmerLights_Initialization
 16049  1BFC  086C               	movf	_DimmerLights,w
 16050  1BFD  3E05               	addlw	5
 16051  1BFE  0086               	movwf	6
 16052  1BFF  3001               	movlw	1	; select bank2/3
 16053  1C00  0087               	movwf	7
 16054  1C01  0822               	movf	??_setDimmerLights_Initialization,w
 16055  1C02  0081               	movwf	1
 16056                           
 16057                           ;Dimmer_B1.c: 64: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16058  1C03  3078               	movlw	120
 16059  1C04  00A2               	movwf	??_setDimmerLights_Initialization
 16060  1C05  086C               	movf	_DimmerLights,w
 16061  1C06  3E06               	addlw	6
 16062  1C07  0086               	movwf	6
 16063  1C08  3001               	movlw	1	; select bank2/3
 16064  1C09  0087               	movwf	7
 16065  1C0A  0822               	movf	??_setDimmerLights_Initialization,w
 16066  1C0B  0081               	movwf	1
 16067                           
 16068                           ;Dimmer_B1.c: 74: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16069  1C0C  086C               	movf	_DimmerLights,w
 16070  1C0D  3E06               	addlw	6
 16071  1C0E  0086               	movwf	6
 16072  1C0F  3001               	movlw	1	; select bank2/3
 16073  1C10  0087               	movwf	7
 16074  1C11  0801               	movf	1,w
 16075  1C12  00A2               	movwf	??_setDimmerLights_Initialization
 16076  1C13  086C               	movf	_DimmerLights,w
 16077  1C14  3E04               	addlw	4
 16078  1C15  0086               	movwf	6
 16079  1C16  3001               	movlw	1	; select bank2/3
 16080  1C17  0087               	movwf	7
 16081  1C18  0822               	movf	??_setDimmerLights_Initialization,w
 16082  1C19  0081               	movwf	1
 16083  1C1A  0008               	return
 16084  1C1B                     __end_of_setDimmerLights_Initialization:	
 16085                           
 16086                           	psect	text98
 16087  2664                     __ptext98:	
 16088 ;; *************** function _Dimmer_Initialization *****************
 16089 ;; Defined at:
 16090 ;;		line 511 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 16091 ;; Parameters:    Size  Location     Type
 16092 ;;		None
 16093 ;; Auto vars:     Size  Location     Type
 16094 ;;		None
 16095 ;; Return value:  Size  Location     Type
 16096 ;;		None               void
 16097 ;; Registers used:
 16098 ;;		wreg
 16099 ;; Tracked objects:
 16100 ;;		On entry : 0/0
 16101 ;;		On exit  : 0/0
 16102 ;;		Unchanged: 0/0
 16103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;Total ram usage:        1 bytes
 16109 ;; Hardware stack levels used:    1
 16110 ;; Hardware stack levels required when called:    4
 16111 ;; This function calls:
 16112 ;;		Nothing
 16113 ;; This function is called by:
 16114 ;;		_DimmerLights_Initialization
 16115 ;; This function uses a non-reentrant model
 16116 ;;
 16117                           
 16118                           
 16119                           ;psect for function _Dimmer_Initialization
 16120  2664                     _Dimmer_Initialization:	
 16121                           
 16122                           ;Dimmer_B1.c: 513: Dimmer=&Dimmer1;
 16123                           
 16124                           ;incstack = 0
 16125                           ; Regs used in _Dimmer_Initialization: [wreg]
 16126  2664  30E4               	movlw	_Dimmer1& (0+255)
 16127  2665  0020               	movlb	0	; select bank0
 16128  2666  00A0               	movwf	??_Dimmer_Initialization
 16129  2667  0820               	movf	??_Dimmer_Initialization,w
 16130  2668  0021               	movlb	1	; select bank1
 16131  2669  00B9               	movwf	_Dimmer^(0+128)
 16132  266A  0008               	return
 16133  266B                     __end_of_Dimmer_Initialization:	
 16134                           
 16135                           	psect	text99
 16136  2641                     __ptext99:	
 16137 ;; *************** function _DelayOff_Main *****************
 16138 ;; Defined at:
 16139 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\DelayOff_B1.c"
 16140 ;; Parameters:    Size  Location     Type
 16141 ;;		None
 16142 ;; Auto vars:     Size  Location     Type
 16143 ;;		None
 16144 ;; Return value:  Size  Location     Type
 16145 ;;		None               void
 16146 ;; Registers used:
 16147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16148 ;; Tracked objects:
 16149 ;;		On entry : 0/0
 16150 ;;		On exit  : 0/0
 16151 ;;		Unchanged: 0/0
 16152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;Total ram usage:        0 bytes
 16158 ;; Hardware stack levels used:    1
 16159 ;; Hardware stack levels required when called:    9
 16160 ;; This function calls:
 16161 ;;		_DlyOff_Main
 16162 ;; This function is called by:
 16163 ;;		_main
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           
 16168                           ;psect for function _DelayOff_Main
 16169  2641                     _DelayOff_Main:	
 16170                           
 16171                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16172                           
 16173                           ;incstack = 0
 16174                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16175  2641  3001               	movlw	1
 16176  2642  3197  2787         	fcall	_DlyOff_Main
 16177  2644  0008               	return
 16178  2645                     __end_of_DelayOff_Main:	
 16179                           
 16180                           	psect	text100
 16181  1787                     __ptext100:	
 16182 ;; *************** function _DlyOff_Main *****************
 16183 ;; Defined at:
 16184 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\DelayOff_B1.c"
 16185 ;; Parameters:    Size  Location     Type
 16186 ;;  sw              1    wreg     unsigned char 
 16187 ;; Auto vars:     Size  Location     Type
 16188 ;;  sw              1   68[BANK0 ] unsigned char 
 16189 ;; Return value:  Size  Location     Type
 16190 ;;		None               void
 16191 ;; Registers used:
 16192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16193 ;; Tracked objects:
 16194 ;;		On entry : 0/0
 16195 ;;		On exit  : 0/0
 16196 ;;		Unchanged: 0/0
 16197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16200 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;Total ram usage:        3 bytes
 16203 ;; Hardware stack levels used:    1
 16204 ;; Hardware stack levels required when called:    8
 16205 ;; This function calls:
 16206 ;;		_DelayOffPointSelect
 16207 ;;		_setBuz
 16208 ;;		_setDimmerLights_Switch
 16209 ;;		_setDimmerLights_Trigger
 16210 ;;		_setRFSW_Status
 16211 ;;		_setRF_DimmerLights
 16212 ;;		_setSw_Status
 16213 ;;		_setTxData
 16214 ;; This function is called by:
 16215 ;;		_DelayOff_Main
 16216 ;; This function uses a non-reentrant model
 16217 ;;
 16218                           
 16219                           
 16220                           ;psect for function _DlyOff_Main
 16221  1787                     _DlyOff_Main:	
 16222                           
 16223                           ;incstack = 0
 16224                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16225                           ;DlyOff_Main@sw stored from wreg
 16226  1787  0020               	movlb	0	; select bank0
 16227  1788  00E4               	movwf	DlyOff_Main@sw
 16228                           
 16229                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 16230  1789  0864               	movf	DlyOff_Main@sw,w
 16231  178A  31A7  273D  3197   	fcall	_DelayOffPointSelect
 16232                           
 16233                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 16234  178D  0021               	movlb	1	; select bank1
 16235  178E  0838               	movf	_DelayOff^(0+128),w
 16236  178F  0086               	movwf	6
 16237  1790  0187               	clrf	7
 16238  1791  1C81               	btfss	1,1
 16239  1792  0008               	return
 16240                           
 16241                           ;DelayOff_B1.c: 70: {
 16242                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 16243  1793  0838               	movf	_DelayOff^(0+128),w
 16244  1794  3E02               	addlw	2
 16245  1795  0086               	movwf	6
 16246  1796  0187               	clrf	7
 16247  1797  3001               	movlw	1
 16248  1798  0781               	addwf	1,f
 16249  1799  3141               	addfsr 1,1
 16250  179A  1803               	skipnc
 16251  179B  0A81               	incf	1,f
 16252                           
 16253                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5600)
 16254  179C  0838               	movf	_DelayOff^(0+128),w
 16255  179D  3E02               	addlw	2
 16256  179E  0086               	movwf	6
 16257  179F  0187               	clrf	7
 16258  17A0  3F40               	moviw [0]fsr1
 16259  17A1  0020               	movlb	0	; select bank0
 16260  17A2  00E2               	movwf	??_DlyOff_Main
 16261  17A3  3F41               	moviw [1]fsr1
 16262  17A4  00E3               	movwf	??_DlyOff_Main+1
 16263  17A5  3015               	movlw	21
 16264  17A6  0263               	subwf	??_DlyOff_Main+1,w
 16265  17A7  30E0               	movlw	224
 16266  17A8  1903               	skipnz
 16267  17A9  0262               	subwf	??_DlyOff_Main,w
 16268  17AA  1C03               	skipc
 16269  17AB  0008               	return
 16270                           
 16271                           ;DelayOff_B1.c: 73: {
 16272                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 16273  17AC  0021               	movlb	1	; select bank1
 16274  17AD  0838               	movf	_DelayOff^(0+128),w
 16275  17AE  3E02               	addlw	2
 16276  17AF  0086               	movwf	6
 16277  17B0  0187               	clrf	7
 16278  17B1  3000               	movlw	0
 16279  17B2  3FC0               	movwi [0]fsr1
 16280  17B3  3FC1               	movwi [1]fsr1
 16281                           
 16282                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 16283  17B4  3001               	movlw	1
 16284  17B5  0020               	movlb	0	; select bank0
 16285  17B6  00E2               	movwf	??_DlyOff_Main
 16286  17B7  0021               	movlb	1	; select bank1
 16287  17B8  0838               	movf	_DelayOff^(0+128),w
 16288  17B9  3E04               	addlw	4
 16289  17BA  0086               	movwf	6
 16290  17BB  0187               	clrf	7
 16291  17BC  0020               	movlb	0	; select bank0
 16292  17BD  0862               	movf	??_DlyOff_Main,w
 16293  17BE  0781               	addwf	1,f
 16294                           
 16295                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 16296  17BF  0021               	movlb	1	; select bank1
 16297  17C0  0838               	movf	_DelayOff^(0+128),w
 16298  17C1  3E04               	addlw	4
 16299  17C2  0086               	movwf	6
 16300  17C3  0187               	clrf	7
 16301  17C4  0A38               	incf	_DelayOff^(0+128),w
 16302  17C5  0084               	movwf	4
 16303  17C6  0185               	clrf	5
 16304  17C7  0800               	movf	0,w
 16305  17C8  0201               	subwf	1,w
 16306  17C9  1C03               	skipc
 16307  17CA  0008               	return
 16308                           
 16309                           ;DelayOff_B1.c: 77: {
 16310                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 16311  17CB  0838               	movf	_DelayOff^(0+128),w
 16312  17CC  3E04               	addlw	4
 16313  17CD  0086               	movwf	6
 16314  17CE  0187               	clrf	7
 16315  17CF  0181               	clrf	1
 16316                           
 16317                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 16318  17D0  0838               	movf	_DelayOff^(0+128),w
 16319  17D1  0086               	movwf	6
 16320  17D2  0187               	clrf	7
 16321  17D3  1081               	bcf	1,1
 16322                           
 16323                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 16324  17D4  0020               	movlb	0	; select bank0
 16325  17D5  01A2               	clrf	setSw_Status@command
 16326  17D6  0864               	movf	DlyOff_Main@sw,w
 16327  17D7  3198  206A  3197   	fcall	_setSw_Status
 16328                           
 16329                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 16330  17DA  0020               	movlb	0	; select bank0
 16331  17DB  01A2               	clrf	setRFSW_Status@command
 16332  17DC  0864               	movf	DlyOff_Main@sw,w
 16333  17DD  31A7  27F1  3197   	fcall	_setRFSW_Status
 16334                           
 16335                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 16336  17E0  0020               	movlb	0	; select bank0
 16337  17E1  01DD               	clrf	setRF_DimmerLights@on
 16338  17E2  0864               	movf	DlyOff_Main@sw,w
 16339  17E3  3193  2399  3197   	fcall	_setRF_DimmerLights
 16340                           
 16341                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 16342  17E6  0020               	movlb	0	; select bank0
 16343  17E7  01A2               	clrf	setDimmerLights_Trigger@command
 16344  17E8  0AA2               	incf	setDimmerLights_Trigger@command,f
 16345  17E9  0864               	movf	DlyOff_Main@sw,w
 16346  17EA  3198  20A8  3197   	fcall	_setDimmerLights_Trigger
 16347                           
 16348                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 16349  17ED  0020               	movlb	0	; select bank0
 16350  17EE  01A2               	clrf	setDimmerLights_Switch@command
 16351  17EF  0864               	movf	DlyOff_Main@sw,w
 16352  17F0  3198  2098  3197   	fcall	_setDimmerLights_Switch
 16353                           
 16354                           ;DelayOff_B1.c: 85: setTxData(1);
 16355  17F3  3001               	movlw	1
 16356  17F4  3187  271E  3197   	fcall	_setTxData
 16357                           
 16358                           ;DelayOff_B1.c: 86: setBuz(1,100);
 16359  17F7  3064               	movlw	100
 16360  17F8  0020               	movlb	0	; select bank0
 16361  17F9  00A6               	movwf	setBuz@time
 16362  17FA  3000               	movlw	0
 16363  17FB  00A7               	movwf	setBuz@time+1
 16364  17FC  3001               	movlw	1
 16365  17FD  3197  2710         	fcall	_setBuz
 16366  17FF  0008               	return
 16367  1800                     __end_of_DlyOff_Main:	
 16368                           
 16369                           	psect	text101
 16370  071E                     __ptext101:	
 16371 ;; *************** function _setTxData *****************
 16372 ;; Defined at:
 16373 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
 16374 ;; Parameters:    Size  Location     Type
 16375 ;;  rf              1    wreg     unsigned char 
 16376 ;; Auto vars:     Size  Location     Type
 16377 ;;  rf              1    3[BANK0 ] unsigned char 
 16378 ;;  i               1    0        unsigned char 
 16379 ;; Return value:  Size  Location     Type
 16380 ;;		None               void
 16381 ;; Registers used:
 16382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16383 ;; Tracked objects:
 16384 ;;		On entry : 0/0
 16385 ;;		On exit  : 0/0
 16386 ;;		Unchanged: 0/0
 16387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16391 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16392 ;;Total ram usage:        2 bytes
 16393 ;; Hardware stack levels used:    1
 16394 ;; Hardware stack levels required when called:    5
 16395 ;; This function calls:
 16396 ;;		_RfPointSelect
 16397 ;; This function is called by:
 16398 ;;		_DlyOff_Main
 16399 ;;		_setDimmerLights_Adj
 16400 ;;		_setControl_Lights_Table
 16401 ;;		_setRFSW_Control
 16402 ;;		_setRFSW_AdjControl
 16403 ;;		_Sw_DimmerOnFunc
 16404 ;;		_Sw_DimmerOffFunc
 16405 ;; This function uses a non-reentrant model
 16406 ;;
 16407                           
 16408                           
 16409                           ;psect for function _setTxData
 16410  071E                     _setTxData:	
 16411                           
 16412                           ;incstack = 0
 16413                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16414                           ;setTxData@rf stored from wreg
 16415  071E  0020               	movlb	0	; select bank0
 16416  071F  00A3               	movwf	setTxData@rf
 16417                           
 16418                           ;RF_Control_B1.c: 135: char i;
 16419                           ;RF_Control_B1.c: 136: RfPointSelect(rf);
 16420  0720  0823               	movf	setTxData@rf,w
 16421  0721  31A6  26E2  3187   	fcall	_RfPointSelect
 16422                           
 16423                           ;RF_Control_B1.c: 137: if(RF->Enable)
 16424  0724  087B               	movf	_RF,w
 16425  0725  0086               	movwf	6
 16426  0726  0187               	clrf	7
 16427  0727  1C01               	btfss	1,0
 16428  0728  0008               	return
 16429                           
 16430                           ;RF_Control_B1.c: 138: {
 16431                           ;RF_Control_B1.c: 140: if(!RF->TransceiveGO)
 16432  0729  087B               	movf	_RF,w
 16433  072A  0086               	movwf	6
 16434  072B  0187               	clrf	7
 16435  072C  1901               	btfsc	1,2
 16436  072D  0008               	return
 16437                           
 16438                           ;RF_Control_B1.c: 141: {
 16439                           ;RF_Control_B1.c: 142: RF->TransceiveGO=1;
 16440  072E  087B               	movf	_RF,w
 16441  072F  0086               	movwf	6
 16442  0730  0187               	clrf	7
 16443  0731  1501               	bsf	1,2
 16444                           
 16445                           ;RF_Control_B1.c: 151: RF_Data[0]=0x63;
 16446  0732  3063               	movlw	99
 16447  0733  0020               	movlb	0	; select bank0
 16448  0734  00A2               	movwf	??_setTxData
 16449  0735  0822               	movf	??_setTxData,w
 16450  0736  0021               	movlb	1	; select bank1
 16451  0737  00A0               	movwf	_RF_Data^(0+128)
 16452                           
 16453                           ;RF_Control_B1.c: 152: RF_Data[1]=0x02;
 16454  0738  3002               	movlw	2
 16455  0739  0020               	movlb	0	; select bank0
 16456  073A  00A2               	movwf	??_setTxData
 16457  073B  0822               	movf	??_setTxData,w
 16458  073C  0021               	movlb	1	; select bank1
 16459  073D  00A1               	movwf	(_RF_Data^(0+128)+1)
 16460                           
 16461                           ;RF_Control_B1.c: 153: RF_Data[2]=Product->Data[2];
 16462  073E  0020               	movlb	0	; select bank0
 16463  073F  086F               	movf	_Product,w
 16464  0740  0086               	movwf	6
 16465  0741  3001               	movlw	1	; select bank2/3
 16466  0742  0087               	movwf	7
 16467  0743  3001               	movlw	1	; select bank2/3
 16468  0744  3F42               	moviw [2]fsr1
 16469  0745  0021               	movlb	1	; select bank1
 16470  0746  00A2               	movwf	(_RF_Data^(0+128)+2)
 16471                           
 16472                           ;RF_Control_B1.c: 154: RF_Data[3]=Product->Data[3];
 16473  0747  0020               	movlb	0	; select bank0
 16474  0748  086F               	movf	_Product,w
 16475  0749  0086               	movwf	6
 16476  074A  3001               	movlw	1	; select bank2/3
 16477  074B  0087               	movwf	7
 16478  074C  3001               	movlw	1	; select bank2/3
 16479  074D  3F43               	moviw [3]fsr1
 16480  074E  0021               	movlb	1	; select bank1
 16481  074F  00A3               	movwf	(_RF_Data^(0+128)+3)
 16482                           
 16483                           ;RF_Control_B1.c: 155: RF_Data[4]=Product->Data[4];
 16484  0750  0020               	movlb	0	; select bank0
 16485  0751  086F               	movf	_Product,w
 16486  0752  0086               	movwf	6
 16487  0753  3001               	movlw	1	; select bank2/3
 16488  0754  0087               	movwf	7
 16489  0755  3001               	movlw	1	; select bank2/3
 16490  0756  3F44               	moviw [4]fsr1
 16491  0757  0021               	movlb	1	; select bank1
 16492  0758  00A4               	movwf	(_RF_Data^(0+128)+4)
 16493                           
 16494                           ;RF_Control_B1.c: 156: RF_Data[5]=Product->Data[5];
 16495  0759  0020               	movlb	0	; select bank0
 16496  075A  086F               	movf	_Product,w
 16497  075B  0086               	movwf	6
 16498  075C  3001               	movlw	1	; select bank2/3
 16499  075D  0087               	movwf	7
 16500  075E  3001               	movlw	1	; select bank2/3
 16501  075F  3F45               	moviw [5]fsr1
 16502  0760  0021               	movlb	1	; select bank1
 16503  0761  00A5               	movwf	(_RF_Data^(0+128)+5)
 16504                           
 16505                           ;RF_Control_B1.c: 157: RF_Data[6]=Product->Data[6];
 16506  0762  0020               	movlb	0	; select bank0
 16507  0763  086F               	movf	_Product,w
 16508  0764  0086               	movwf	6
 16509  0765  3001               	movlw	1	; select bank2/3
 16510  0766  0087               	movwf	7
 16511  0767  3001               	movlw	1	; select bank2/3
 16512  0768  3F46               	moviw [6]fsr1
 16513  0769  0021               	movlb	1	; select bank1
 16514  076A  00A6               	movwf	(_RF_Data^(0+128)+6)
 16515                           
 16516                           ;RF_Control_B1.c: 158: RF_Data[7]=Product->Data[7];
 16517  076B  0020               	movlb	0	; select bank0
 16518  076C  086F               	movf	_Product,w
 16519  076D  0086               	movwf	6
 16520  076E  3001               	movlw	1	; select bank2/3
 16521  076F  0087               	movwf	7
 16522  0770  3001               	movlw	1	; select bank2/3
 16523  0771  3F47               	moviw [7]fsr1
 16524  0772  0021               	movlb	1	; select bank1
 16525  0773  00A7               	movwf	(_RF_Data^(0+128)+7)
 16526                           
 16527                           ;RF_Control_B1.c: 159: RF_Data[8]=Product->Data[8];
 16528  0774  0020               	movlb	0	; select bank0
 16529  0775  086F               	movf	_Product,w
 16530  0776  0086               	movwf	6
 16531  0777  3001               	movlw	1	; select bank2/3
 16532  0778  0087               	movwf	7
 16533  0779  3001               	movlw	1	; select bank2/3
 16534  077A  3F48               	moviw [8]fsr1
 16535  077B  0021               	movlb	1	; select bank1
 16536  077C  00A8               	movwf	(_RF_Data^(0+128)+8)
 16537                           
 16538                           ;RF_Control_B1.c: 160: RF_Data[9]=Product->Data[9];
 16539  077D  0020               	movlb	0	; select bank0
 16540  077E  086F               	movf	_Product,w
 16541  077F  0086               	movwf	6
 16542  0780  3001               	movlw	1	; select bank2/3
 16543  0781  0087               	movwf	7
 16544  0782  3001               	movlw	1	; select bank2/3
 16545  0783  3F49               	moviw [9]fsr1
 16546  0784  0021               	movlb	1	; select bank1
 16547  0785  00A9               	movwf	(_RF_Data^(0+128)+9)
 16548                           
 16549                           ;RF_Control_B1.c: 161: RF_Data[10]=Product->Data[10];
 16550  0786  0020               	movlb	0	; select bank0
 16551  0787  086F               	movf	_Product,w
 16552  0788  0086               	movwf	6
 16553  0789  3001               	movlw	1	; select bank2/3
 16554  078A  0087               	movwf	7
 16555  078B  3001               	movlw	1	; select bank2/3
 16556  078C  3F4A               	moviw [10]fsr1
 16557  078D  0021               	movlb	1	; select bank1
 16558  078E  00AA               	movwf	(_RF_Data^(0+128)+10)
 16559                           
 16560                           ;RF_Control_B1.c: 162: RF_Data[11]=Product->Data[11];
 16561  078F  0020               	movlb	0	; select bank0
 16562  0790  086F               	movf	_Product,w
 16563  0791  0086               	movwf	6
 16564  0792  3001               	movlw	1	; select bank2/3
 16565  0793  0087               	movwf	7
 16566  0794  3001               	movlw	1	; select bank2/3
 16567  0795  3F4B               	moviw [11]fsr1
 16568  0796  0021               	movlb	1	; select bank1
 16569  0797  00AB               	movwf	(_RF_Data^(0+128)+11)
 16570                           
 16571                           ;RF_Control_B1.c: 163: RF_Data[12]=Product->Data[12];
 16572  0798  0020               	movlb	0	; select bank0
 16573  0799  086F               	movf	_Product,w
 16574  079A  0086               	movwf	6
 16575  079B  3001               	movlw	1	; select bank2/3
 16576  079C  0087               	movwf	7
 16577  079D  3001               	movlw	1	; select bank2/3
 16578  079E  3F4C               	moviw [12]fsr1
 16579  079F  0021               	movlb	1	; select bank1
 16580  07A0  00AC               	movwf	(_RF_Data^(0+128)+12)
 16581                           
 16582                           ;RF_Control_B1.c: 164: RF_Data[13]=Product->Data[13];
 16583  07A1  0020               	movlb	0	; select bank0
 16584  07A2  086F               	movf	_Product,w
 16585  07A3  0086               	movwf	6
 16586  07A4  3001               	movlw	1	; select bank2/3
 16587  07A5  0087               	movwf	7
 16588  07A6  3001               	movlw	1	; select bank2/3
 16589  07A7  3F4D               	moviw [13]fsr1
 16590  07A8  0021               	movlb	1	; select bank1
 16591  07A9  00AD               	movwf	(_RF_Data^(0+128)+13)
 16592                           
 16593                           ;RF_Control_B1.c: 165: RF_Data[14]=Product->Data[14];
 16594  07AA  0020               	movlb	0	; select bank0
 16595  07AB  086F               	movf	_Product,w
 16596  07AC  0086               	movwf	6
 16597  07AD  3001               	movlw	1	; select bank2/3
 16598  07AE  0087               	movwf	7
 16599  07AF  3001               	movlw	1	; select bank2/3
 16600  07B0  3F4E               	moviw [14]fsr1
 16601  07B1  0021               	movlb	1	; select bank1
 16602  07B2  00AE               	movwf	(_RF_Data^(0+128)+14)
 16603                           
 16604                           ;RF_Control_B1.c: 166: RF_Data[15]=Product->Data[15];
 16605  07B3  0020               	movlb	0	; select bank0
 16606  07B4  086F               	movf	_Product,w
 16607  07B5  0086               	movwf	6
 16608  07B6  3001               	movlw	1	; select bank2/3
 16609  07B7  0087               	movwf	7
 16610  07B8  3001               	movlw	1	; select bank2/3
 16611  07B9  3F4F               	moviw [15]fsr1
 16612  07BA  0021               	movlb	1	; select bank1
 16613  07BB  00AF               	movwf	(_RF_Data^(0+128)+15)
 16614                           
 16615                           ;RF_Control_B1.c: 167: RF_Data[16]=Product->Data[16];
 16616  07BC  0020               	movlb	0	; select bank0
 16617  07BD  086F               	movf	_Product,w
 16618  07BE  0086               	movwf	6
 16619  07BF  3001               	movlw	1	; select bank2/3
 16620  07C0  0087               	movwf	7
 16621  07C1  3001               	movlw	1	; select bank2/3
 16622  07C2  3F50               	moviw [16]fsr1
 16623  07C3  0021               	movlb	1	; select bank1
 16624  07C4  00B0               	movwf	(_RF_Data^(0+128)+16)
 16625                           
 16626                           ;RF_Control_B1.c: 168: RF_Data[17]=Product->Data[17];
 16627  07C5  0020               	movlb	0	; select bank0
 16628  07C6  086F               	movf	_Product,w
 16629  07C7  0086               	movwf	6
 16630  07C8  3001               	movlw	1	; select bank2/3
 16631  07C9  0087               	movwf	7
 16632  07CA  3001               	movlw	1	; select bank2/3
 16633  07CB  3F51               	moviw [17]fsr1
 16634  07CC  0021               	movlb	1	; select bank1
 16635  07CD  00B1               	movwf	(_RF_Data^(0+128)+17)
 16636                           
 16637                           ;RF_Control_B1.c: 169: RF_Data[18]=Product->Data[18];
 16638  07CE  0020               	movlb	0	; select bank0
 16639  07CF  086F               	movf	_Product,w
 16640  07D0  0086               	movwf	6
 16641  07D1  3001               	movlw	1	; select bank2/3
 16642  07D2  0087               	movwf	7
 16643  07D3  3001               	movlw	1	; select bank2/3
 16644  07D4  3F52               	moviw [18]fsr1
 16645  07D5  0021               	movlb	1	; select bank1
 16646  07D6  00B2               	movwf	(_RF_Data^(0+128)+18)
 16647                           
 16648                           ;RF_Control_B1.c: 170: RF_Data[19]=Product->Data[19];
 16649  07D7  0020               	movlb	0	; select bank0
 16650  07D8  086F               	movf	_Product,w
 16651  07D9  0086               	movwf	6
 16652  07DA  3001               	movlw	1	; select bank2/3
 16653  07DB  0087               	movwf	7
 16654  07DC  3001               	movlw	1	; select bank2/3
 16655  07DD  3F53               	moviw [19]fsr1
 16656  07DE  0021               	movlb	1	; select bank1
 16657  07DF  00B3               	movwf	(_RF_Data^(0+128)+19)
 16658                           
 16659                           ;RF_Control_B1.c: 171: RF_Data[20]=1;
 16660  07E0  01B4               	clrf	(_RF_Data^(0+128)+20)
 16661  07E1  0AB4               	incf	(_RF_Data^(0+128)+20),f
 16662  07E2  0008               	return
 16663  07E3                     __end_of_setTxData:	
 16664                           
 16665                           	psect	text102
 16666  26E2                     __ptext102:	
 16667 ;; *************** function _RfPointSelect *****************
 16668 ;; Defined at:
 16669 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.1
      +.1.1\Release\RF_Control_B1.c"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;  rf              1    wreg     unsigned char 
 16672 ;; Auto vars:     Size  Location     Type
 16673 ;;  rf              1    1[BANK0 ] unsigned char 
 16674 ;; Return value:  Size  Location     Type
 16675 ;;		None               void
 16676 ;; Registers used:
 16677 ;;		wreg
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;Total ram usage:        2 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; Hardware stack levels required when called:    4
 16690 ;; This function calls:
 16691 ;;		Nothing
 16692 ;; This function is called by:
 16693 ;;		_setRF_Learn
 16694 ;;		_setRF_RxStatus
 16695 ;;		_setRF_Main
 16696 ;;		_setTxData
 16697 ;;		_setRF_Enable
 16698 ;;		_RF_RxDisable
 16699 ;;		_getRxData
 16700 ;;		_setLog_Code
 16701 ;;		_setControl_Lights_Table
 16702 ;; This function uses a non-reentrant model
 16703 ;;
 16704                           
 16705                           
 16706                           ;psect for function _RfPointSelect
 16707  26E2                     _RfPointSelect:	
 16708                           
 16709                           ;incstack = 0
 16710                           ; Regs used in _RfPointSelect: [wreg]
 16711                           ;RfPointSelect@rf stored from wreg
 16712  26E2  0020               	movlb	0	; select bank0
 16713  26E3  00A1               	movwf	RfPointSelect@rf
 16714                           
 16715                           ;RF_Control_B1.c: 10: if(rf == 1)
 16716  26E4  0821               	movf	RfPointSelect@rf,w
 16717  26E5  3A01               	xorlw	1
 16718  26E6  1D03               	skipz
 16719  26E7  0008               	return
 16720                           
 16721                           ;RF_Control_B1.c: 11: {
 16722                           ;RF_Control_B1.c: 12: RF=&RF1;
 16723  26E8  30E7               	movlw	_RF1& (0+255)
 16724  26E9  00A0               	movwf	??_RfPointSelect
 16725  26EA  0820               	movf	??_RfPointSelect,w
 16726  26EB  00FB               	movwf	_RF
 16727  26EC  0008               	return
 16728  26ED                     __end_of_RfPointSelect:	
 16729                           
 16730                           	psect	text103
 16731  186A                     __ptext103:	
 16732 ;; *************** function _setSw_Status *****************
 16733 ;; Defined at:
 16734 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Switch_B1.c"
 16735 ;; Parameters:    Size  Location     Type
 16736 ;;  sw              1    wreg     unsigned char 
 16737 ;;  command         1    2[BANK0 ] unsigned char 
 16738 ;; Auto vars:     Size  Location     Type
 16739 ;;  sw              1    3[BANK0 ] unsigned char 
 16740 ;; Return value:  Size  Location     Type
 16741 ;;		None               void
 16742 ;; Registers used:
 16743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16744 ;; Tracked objects:
 16745 ;;		On entry : 0/0
 16746 ;;		On exit  : 0/0
 16747 ;;		Unchanged: 0/0
 16748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16749 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;Total ram usage:        2 bytes
 16754 ;; Hardware stack levels used:    1
 16755 ;; Hardware stack levels required when called:    5
 16756 ;; This function calls:
 16757 ;;		_SwPointSelect
 16758 ;; This function is called by:
 16759 ;;		_DlyOff_Main
 16760 ;;		_setDimmerLights_ERROR
 16761 ;;		_setControl_Lights_Table
 16762 ;;		_setRFSW_Control
 16763 ;; This function uses a non-reentrant model
 16764 ;;
 16765                           
 16766                           
 16767                           ;psect for function _setSw_Status
 16768  186A                     _setSw_Status:	
 16769                           
 16770                           ;incstack = 0
 16771                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16772                           ;setSw_Status@sw stored from wreg
 16773  186A  0020               	movlb	0	; select bank0
 16774  186B  00A3               	movwf	setSw_Status@sw
 16775                           
 16776                           ;Switch_B1.c: 108: SwPointSelect(sw);
 16777  186C  0823               	movf	setSw_Status@sw,w
 16778  186D  31A6  26D7         	fcall	_SwPointSelect
 16779                           
 16780                           ;Switch_B1.c: 109: Sw->Status=command;
 16781  186F  0020               	movlb	0	; select bank0
 16782  1870  086D               	movf	_Sw,w
 16783  1871  0086               	movwf	6
 16784  1872  3001               	movlw	1	; select bank2/3
 16785  1873  0087               	movwf	7
 16786  1874  0822               	movf	setSw_Status@command,w
 16787  1875  1301               	bcf	1,6
 16788  1876  1D03               	skipz
 16789  1877  1701               	bsf	1,6
 16790  1878  0008               	return
 16791  1879                     __end_of_setSw_Status:	
 16792                           
 16793                           	psect	text104
 16794  26D7                     __ptext104:	
 16795 ;; *************** function _SwPointSelect *****************
 16796 ;; Defined at:
 16797 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Switch_B1.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  sw              1    wreg     unsigned char 
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;  sw              1    1[BANK0 ] unsigned char 
 16802 ;; Return value:  Size  Location     Type
 16803 ;;		None               void
 16804 ;; Registers used:
 16805 ;;		wreg
 16806 ;; Tracked objects:
 16807 ;;		On entry : 0/0
 16808 ;;		On exit  : 0/0
 16809 ;;		Unchanged: 0/0
 16810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;Total ram usage:        2 bytes
 16816 ;; Hardware stack levels used:    1
 16817 ;; Hardware stack levels required when called:    4
 16818 ;; This function calls:
 16819 ;;		Nothing
 16820 ;; This function is called by:
 16821 ;;		_setSw_Enable
 16822 ;;		_setSw_Status
 16823 ;;		_setSw_Main
 16824 ;;		_Sw_Detect
 16825 ;; This function uses a non-reentrant model
 16826 ;;
 16827                           
 16828                           
 16829                           ;psect for function _SwPointSelect
 16830  26D7                     _SwPointSelect:	
 16831                           
 16832                           ;incstack = 0
 16833                           ; Regs used in _SwPointSelect: [wreg]
 16834                           ;SwPointSelect@sw stored from wreg
 16835  26D7  0020               	movlb	0	; select bank0
 16836  26D8  00A1               	movwf	SwPointSelect@sw
 16837                           
 16838                           ;Switch_B1.c: 19: if(sw == 1)
 16839  26D9  0821               	movf	SwPointSelect@sw,w
 16840  26DA  3A01               	xorlw	1
 16841  26DB  1D03               	skipz
 16842  26DC  0008               	return
 16843                           
 16844                           ;Switch_B1.c: 20: {
 16845                           ;Switch_B1.c: 21: Sw=&Sw1;
 16846  26DD  3057               	movlw	_Sw1& (0+255)
 16847  26DE  00A0               	movwf	??_SwPointSelect
 16848  26DF  0820               	movf	??_SwPointSelect,w
 16849  26E0  00ED               	movwf	_Sw
 16850  26E1  0008               	return
 16851  26E2                     __end_of_SwPointSelect:	
 16852                           
 16853                           	psect	text105
 16854  1399                     __ptext105:	
 16855 ;; *************** function _setRF_DimmerLights *****************
 16856 ;; Defined at:
 16857 ;;		line 437 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
 16858 ;; Parameters:    Size  Location     Type
 16859 ;;  lights          1    wreg     unsigned char 
 16860 ;;  on              1   61[BANK0 ] unsigned char 
 16861 ;; Auto vars:     Size  Location     Type
 16862 ;;  lights          1   65[BANK0 ] unsigned char 
 16863 ;;  status          1   64[BANK0 ] unsigned char 
 16864 ;; Return value:  Size  Location     Type
 16865 ;;		None               void
 16866 ;; Registers used:
 16867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16868 ;; Tracked objects:
 16869 ;;		On entry : 0/0
 16870 ;;		On exit  : 0/0
 16871 ;;		Unchanged: 0/0
 16872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16873 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16875 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16876 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16877 ;;Total ram usage:        5 bytes
 16878 ;; Hardware stack levels used:    1
 16879 ;; Hardware stack levels required when called:    7
 16880 ;; This function calls:
 16881 ;;		_setPercentValue
 16882 ;; This function is called by:
 16883 ;;		_DlyOff_Main
 16884 ;;		_setDimmerLights_Adj
 16885 ;;		_setRFSW_Control
 16886 ;;		_Sw_DimmerOnFunc
 16887 ;;		_Sw_DimmerOffFunc
 16888 ;; This function uses a non-reentrant model
 16889 ;;
 16890                           
 16891                           
 16892                           ;psect for function _setRF_DimmerLights
 16893  1399                     _setRF_DimmerLights:	
 16894                           
 16895                           ;incstack = 0
 16896                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16897                           ;setRF_DimmerLights@lights stored from wreg
 16898  1399  0020               	movlb	0	; select bank0
 16899  139A  00E1               	movwf	setRF_DimmerLights@lights
 16900                           
 16901                           ;RF_Control_B1.c: 439: char status;
 16902                           ;RF_Control_B1.c: 440: status=1;
 16903  139B  01E0               	clrf	setRF_DimmerLights@status
 16904  139C  0AE0               	incf	setRF_DimmerLights@status,f
 16905                           
 16906                           ;RF_Control_B1.c: 441: status<<=(lights-1);
 16907  139D  0861               	movf	setRF_DimmerLights@lights,w
 16908  139E  3EFF               	addlw	-1
 16909  139F  0A89               	incf	9,f
 16910  13A0  2BA3               	goto	u7510
 16911  13A1                     u7515:	
 16912  13A1  1003               	clrc
 16913  13A2  0DE0               	rlf	setRF_DimmerLights@status,f
 16914  13A3                     u7510:	
 16915  13A3  3EFF               	addlw	-1
 16916  13A4  1D03               	skipz
 16917  13A5  2BA1               	goto	u7515
 16918                           
 16919                           ;RF_Control_B1.c: 442: Product->Data[11]=lights;
 16920  13A6  0861               	movf	setRF_DimmerLights@lights,w
 16921  13A7  00DE               	movwf	??_setRF_DimmerLights
 16922  13A8  086F               	movf	_Product,w
 16923  13A9  3E0B               	addlw	11
 16924  13AA  0086               	movwf	6
 16925  13AB  3001               	movlw	1	; select bank2/3
 16926  13AC  0087               	movwf	7
 16927  13AD  085E               	movf	??_setRF_DimmerLights,w
 16928  13AE  0081               	movwf	1
 16929                           
 16930                           ;RF_Control_B1.c: 445: Product->Data[(20+lights)]=setPercentValue(((char)((100-55)*1.5))
      +                          );
 16931  13AF  3043               	movlw	67
 16932  13B0  319F  2771  3193   	fcall	_setPercentValue
 16933  13B3  0020               	movlb	0	; select bank0
 16934  13B4  00DE               	movwf	??_setRF_DimmerLights
 16935  13B5  0861               	movf	setRF_DimmerLights@lights,w
 16936  13B6  3E14               	addlw	20
 16937  13B7  076F               	addwf	_Product,w
 16938  13B8  00DF               	movwf	??_setRF_DimmerLights+1
 16939  13B9  085F               	movf	??_setRF_DimmerLights+1,w
 16940  13BA  0086               	movwf	6
 16941  13BB  3001               	movlw	1	; select bank2/3
 16942  13BC  0087               	movwf	7
 16943  13BD  085E               	movf	??_setRF_DimmerLights,w
 16944  13BE  0081               	movwf	1
 16945                           
 16946                           ;RF_Control_B1.c: 448: Product->Data[9]=Product->Data[20+lights];
 16947  13BF  0861               	movf	setRF_DimmerLights@lights,w
 16948  13C0  3E14               	addlw	20
 16949  13C1  076F               	addwf	_Product,w
 16950  13C2  00DE               	movwf	??_setRF_DimmerLights
 16951  13C3  085E               	movf	??_setRF_DimmerLights,w
 16952  13C4  0086               	movwf	6
 16953  13C5  3001               	movlw	1	; select bank2/3
 16954  13C6  0087               	movwf	7
 16955  13C7  0801               	movf	1,w
 16956  13C8  00DF               	movwf	??_setRF_DimmerLights+1
 16957  13C9  086F               	movf	_Product,w
 16958  13CA  3E09               	addlw	9
 16959  13CB  0086               	movwf	6
 16960  13CC  3001               	movlw	1	; select bank2/3
 16961  13CD  0087               	movwf	7
 16962  13CE  085F               	movf	??_setRF_DimmerLights+1,w
 16963  13CF  0081               	movwf	1
 16964                           
 16965                           ;RF_Control_B1.c: 449: Product->Data[17]=Product->Data[26+lights];
 16966  13D0  0861               	movf	setRF_DimmerLights@lights,w
 16967  13D1  3E1A               	addlw	26
 16968  13D2  076F               	addwf	_Product,w
 16969  13D3  00DE               	movwf	??_setRF_DimmerLights
 16970  13D4  085E               	movf	??_setRF_DimmerLights,w
 16971  13D5  0086               	movwf	6
 16972  13D6  3001               	movlw	1	; select bank2/3
 16973  13D7  0087               	movwf	7
 16974  13D8  0801               	movf	1,w
 16975  13D9  00DF               	movwf	??_setRF_DimmerLights+1
 16976  13DA  086F               	movf	_Product,w
 16977  13DB  3E11               	addlw	17
 16978  13DC  0086               	movwf	6
 16979  13DD  3001               	movlw	1	; select bank2/3
 16980  13DE  0087               	movwf	7
 16981  13DF  085F               	movf	??_setRF_DimmerLights+1,w
 16982  13E0  0081               	movwf	1
 16983                           
 16984                           ;RF_Control_B1.c: 450: if(on)
 16985  13E1  085D               	movf	setRF_DimmerLights@on,w
 16986  13E2  1903               	btfsc	3,2
 16987  13E3  2BF4               	goto	l8160
 16988                           
 16989                           ;RF_Control_B1.c: 451: {
 16990                           ;RF_Control_B1.c: 452: Product->Data[15]=(Product->Data[15]|status);
 16991  13E4  086F               	movf	_Product,w
 16992  13E5  3E0F               	addlw	15
 16993  13E6  0086               	movwf	6
 16994  13E7  3001               	movlw	1	; select bank2/3
 16995  13E8  0087               	movwf	7
 16996  13E9  0801               	movf	1,w
 16997  13EA  0460               	iorwf	setRF_DimmerLights@status,w
 16998  13EB  00DE               	movwf	??_setRF_DimmerLights
 16999  13EC  086F               	movf	_Product,w
 17000  13ED  3E0F               	addlw	15
 17001  13EE  0086               	movwf	6
 17002  13EF  3001               	movlw	1	; select bank2/3
 17003  13F0  0087               	movwf	7
 17004  13F1  085E               	movf	??_setRF_DimmerLights,w
 17005  13F2  0081               	movwf	1
 17006                           
 17007                           ;RF_Control_B1.c: 453: }
 17008  13F3  0008               	return
 17009  13F4                     l8160:	
 17010                           
 17011                           ;RF_Control_B1.c: 454: else
 17012                           ;RF_Control_B1.c: 455: {
 17013                           ;RF_Control_B1.c: 456: Product->Data[15]=(Product->Data[15]&(~status));
 17014  13F4  086F               	movf	_Product,w
 17015  13F5  3E0F               	addlw	15
 17016  13F6  0086               	movwf	6
 17017  13F7  3001               	movlw	1	; select bank2/3
 17018  13F8  0087               	movwf	7
 17019  13F9  0960               	comf	setRF_DimmerLights@status,w
 17020  13FA  0501               	andwf	1,w
 17021  13FB  00DE               	movwf	??_setRF_DimmerLights
 17022  13FC  086F               	movf	_Product,w
 17023  13FD  3E0F               	addlw	15
 17024  13FE  0086               	movwf	6
 17025  13FF  3001               	movlw	1	; select bank2/3
 17026  1400  0087               	movwf	7
 17027  1401  085E               	movf	??_setRF_DimmerLights,w
 17028  1402  0081               	movwf	1
 17029  1403  0008               	return
 17030  1404                     __end_of_setRF_DimmerLights:	
 17031                           
 17032                           	psect	text106
 17033  1F71                     __ptext106:	
 17034 ;; *************** function _setPercentValue *****************
 17035 ;; Defined at:
 17036 ;;		line 496 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 17037 ;; Parameters:    Size  Location     Type
 17038 ;;  value           1    wreg     unsigned char 
 17039 ;; Auto vars:     Size  Location     Type
 17040 ;;  value           1   57[BANK0 ] unsigned char 
 17041 ;;  i               3   58[BANK0 ] float 
 17042 ;; Return value:  Size  Location     Type
 17043 ;;                  1    wreg      unsigned char 
 17044 ;; Registers used:
 17045 ;;		wreg, status,2, status,0, pclath, cstack
 17046 ;; Tracked objects:
 17047 ;;		On entry : 0/0
 17048 ;;		On exit  : 0/0
 17049 ;;		Unchanged: 0/0
 17050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17052 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17054 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17055 ;;Total ram usage:        4 bytes
 17056 ;; Hardware stack levels used:    1
 17057 ;; Hardware stack levels required when called:    6
 17058 ;; This function calls:
 17059 ;;		___awtoft
 17060 ;;		___ftdiv
 17061 ;;		___fttol
 17062 ;; This function is called by:
 17063 ;;		_Flash_Memory_Initialization
 17064 ;;		_setRF_DimmerLights
 17065 ;; This function uses a non-reentrant model
 17066 ;;
 17067                           
 17068                           
 17069                           ;psect for function _setPercentValue
 17070  1F71                     _setPercentValue:	
 17071                           
 17072                           ;incstack = 0
 17073                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17074                           ;setPercentValue@value stored from wreg
 17075  1F71  0020               	movlb	0	; select bank0
 17076  1F72  00D9               	movwf	setPercentValue@value
 17077                           
 17078                           ;Dimmer_B1.c: 499: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17079  1F73  3000               	movlw	0
 17080  1F74  00DA               	movwf	setPercentValue@i
 17081  1F75  3054               	movlw	84
 17082  1F76  00DB               	movwf	setPercentValue@i+1
 17083  1F77  3042               	movlw	66
 17084  1F78  00DC               	movwf	setPercentValue@i+2
 17085                           
 17086                           ;Dimmer_B1.c: 500: i/=100;
 17087  1F79  3000               	movlw	0
 17088  1F7A  00AE               	movwf	___ftdiv@f2
 17089  1F7B  30C8               	movlw	200
 17090  1F7C  00AF               	movwf	___ftdiv@f2+1
 17091  1F7D  3042               	movlw	66
 17092  1F7E  00B0               	movwf	___ftdiv@f2+2
 17093  1F7F  085A               	movf	setPercentValue@i,w
 17094  1F80  00B1               	movwf	___ftdiv@f1
 17095  1F81  085B               	movf	setPercentValue@i+1,w
 17096  1F82  00B2               	movwf	___ftdiv@f1+1
 17097  1F83  085C               	movf	setPercentValue@i+2,w
 17098  1F84  00B3               	movwf	___ftdiv@f1+2
 17099  1F85  318B  23C4  319F   	fcall	___ftdiv
 17100  1F88  0020               	movlb	0	; select bank0
 17101  1F89  082E               	movf	?___ftdiv,w
 17102  1F8A  00DA               	movwf	setPercentValue@i
 17103  1F8B  082F               	movf	?___ftdiv+1,w
 17104  1F8C  00DB               	movwf	setPercentValue@i+1
 17105  1F8D  0830               	movf	?___ftdiv+2,w
 17106  1F8E  00DC               	movwf	setPercentValue@i+2
 17107                           
 17108                           ;Dimmer_B1.c: 501: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17109  1F8F  0859               	movf	setPercentValue@value,w
 17110  1F90  3EBD               	addlw	189
 17111  1F91  00A8               	movwf	___awtoft@c
 17112  1F92  30FF               	movlw	255
 17113  1F93  1803               	skipnc
 17114  1F94  3000               	movlw	0
 17115  1F95  00A9               	movwf	___awtoft@c+1
 17116  1F96  319A  224F  319F   	fcall	___awtoft
 17117  1F99  0020               	movlb	0	; select bank0
 17118  1F9A  0828               	movf	?___awtoft,w
 17119  1F9B  00B1               	movwf	___ftdiv@f1
 17120  1F9C  0829               	movf	?___awtoft+1,w
 17121  1F9D  00B2               	movwf	___ftdiv@f1+1
 17122  1F9E  082A               	movf	?___awtoft+2,w
 17123  1F9F  00B3               	movwf	___ftdiv@f1+2
 17124  1FA0  085A               	movf	setPercentValue@i,w
 17125  1FA1  00AE               	movwf	___ftdiv@f2
 17126  1FA2  085B               	movf	setPercentValue@i+1,w
 17127  1FA3  00AF               	movwf	___ftdiv@f2+1
 17128  1FA4  085C               	movf	setPercentValue@i+2,w
 17129  1FA5  00B0               	movwf	___ftdiv@f2+2
 17130  1FA6  318B  23C4  319F   	fcall	___ftdiv
 17131  1FA9  0020               	movlb	0	; select bank0
 17132  1FAA  082E               	movf	?___ftdiv,w
 17133  1FAB  00CB               	movwf	___fttol@f1
 17134  1FAC  082F               	movf	?___ftdiv+1,w
 17135  1FAD  00CC               	movwf	___fttol@f1+1
 17136  1FAE  0830               	movf	?___ftdiv+2,w
 17137  1FAF  00CD               	movwf	___fttol@f1+2
 17138  1FB0  3188  2051         	fcall	___fttol
 17139  1FB2  0020               	movlb	0	; select bank0
 17140  1FB3  034B               	decf	?___fttol,w
 17141  1FB4  3AFF               	xorlw	255
 17142  1FB5  3E64               	addlw	100
 17143  1FB6  0008               	return
 17144  1FB7                     __end_of_setPercentValue:	
 17145                           
 17146                           	psect	text107
 17147  0851                     __ptext107:	
 17148 ;; *************** function ___fttol *****************
 17149 ;; Defined at:
 17150 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17151 ;; Parameters:    Size  Location     Type
 17152 ;;  f1              3   43[BANK0 ] float 
 17153 ;; Auto vars:     Size  Location     Type
 17154 ;;  lval            4   52[BANK0 ] unsigned long 
 17155 ;;  exp1            1   56[BANK0 ] unsigned char 
 17156 ;;  sign1           1   51[BANK0 ] unsigned char 
 17157 ;; Return value:  Size  Location     Type
 17158 ;;                  4   43[BANK0 ] long 
 17159 ;; Registers used:
 17160 ;;		wreg, status,2, status,0
 17161 ;; Tracked objects:
 17162 ;;		On entry : 0/0
 17163 ;;		On exit  : 0/0
 17164 ;;		Unchanged: 0/0
 17165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17166 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;Total ram usage:       14 bytes
 17171 ;; Hardware stack levels used:    1
 17172 ;; Hardware stack levels required when called:    4
 17173 ;; This function calls:
 17174 ;;		Nothing
 17175 ;; This function is called by:
 17176 ;;		_getPercentValue
 17177 ;;		_setPercentValue
 17178 ;; This function uses a non-reentrant model
 17179 ;;
 17180                           
 17181                           
 17182                           ;psect for function ___fttol
 17183  0851                     ___fttol:	
 17184                           
 17185                           ;incstack = 0
 17186                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17187  0851  0020               	movlb	0	; select bank0
 17188  0852  084B               	movf	___fttol@f1,w
 17189  0853  00CF               	movwf	??___fttol
 17190  0854  084C               	movf	___fttol@f1+1,w
 17191  0855  00D0               	movwf	??___fttol+1
 17192  0856  084D               	movf	___fttol@f1+2,w
 17193  0857  00D1               	movwf	??___fttol+2
 17194  0858  1003               	clrc
 17195  0859  0D50               	rlf	??___fttol+1,w
 17196  085A  0D51               	rlf	??___fttol+2,w
 17197  085B  00D2               	movwf	??___fttol+3
 17198  085C  0852               	movf	??___fttol+3,w
 17199  085D  00D8               	movwf	___fttol@exp1
 17200  085E  08D8               	movf	___fttol@exp1,f
 17201  085F  1D03               	skipz
 17202  0860  286A               	goto	l5972
 17203  0861  3000               	movlw	0
 17204  0862  00CE               	movwf	?___fttol+3
 17205  0863  3000               	movlw	0
 17206  0864  00CD               	movwf	?___fttol+2
 17207  0865  3000               	movlw	0
 17208  0866  00CC               	movwf	?___fttol+1
 17209  0867  3000               	movlw	0
 17210  0868  00CB               	movwf	?___fttol
 17211  0869  0008               	return
 17212  086A                     l5972:	
 17213  086A  084B               	movf	___fttol@f1,w
 17214  086B  00CF               	movwf	??___fttol
 17215  086C  084C               	movf	___fttol@f1+1,w
 17216  086D  00D0               	movwf	??___fttol+1
 17217  086E  084D               	movf	___fttol@f1+2,w
 17218  086F  00D1               	movwf	??___fttol+2
 17219  0870  3017               	movlw	23
 17220  0871                     u4285:	
 17221  0871  36D1               	lsrf	??___fttol+2,f
 17222  0872  0CD0               	rrf	??___fttol+1,f
 17223  0873  0CCF               	rrf	??___fttol,f
 17224  0874  0B89               	decfsz	9,f
 17225  0875  2871               	goto	u4285
 17226  0876  084F               	movf	??___fttol,w
 17227  0877  00D2               	movwf	??___fttol+3
 17228  0878  0852               	movf	??___fttol+3,w
 17229  0879  00D3               	movwf	___fttol@sign1
 17230  087A  17CC               	bsf	___fttol@f1+1,7
 17231  087B  30FF               	movlw	255
 17232  087C  05CB               	andwf	___fttol@f1,f
 17233  087D  30FF               	movlw	255
 17234  087E  05CC               	andwf	___fttol@f1+1,f
 17235  087F  3000               	movlw	0
 17236  0880  05CD               	andwf	___fttol@f1+2,f
 17237  0881  084B               	movf	___fttol@f1,w
 17238  0882  00D4               	movwf	___fttol@lval
 17239  0883  084C               	movf	___fttol@f1+1,w
 17240  0884  00D5               	movwf	___fttol@lval+1
 17241  0885  084D               	movf	___fttol@f1+2,w
 17242  0886  00D6               	movwf	___fttol@lval+2
 17243  0887  01D7               	clrf	___fttol@lval+3
 17244  0888  308E               	movlw	142
 17245  0889  02D8               	subwf	___fttol@exp1,f
 17246  088A  1FD8               	btfss	___fttol@exp1,7
 17247  088B  28A8               	goto	l5992
 17248  088C  0858               	movf	___fttol@exp1,w
 17249  088D  3A80               	xorlw	128
 17250  088E  3E8F               	addlw	143
 17251  088F  1803               	skipnc
 17252  0890  289A               	goto	l5990
 17253  0891  3000               	movlw	0
 17254  0892  00CE               	movwf	?___fttol+3
 17255  0893  3000               	movlw	0
 17256  0894  00CD               	movwf	?___fttol+2
 17257  0895  3000               	movlw	0
 17258  0896  00CC               	movwf	?___fttol+1
 17259  0897  3000               	movlw	0
 17260  0898  00CB               	movwf	?___fttol
 17261  0899  0008               	return
 17262  089A                     l5990:	
 17263  089A  3001               	movlw	1
 17264  089B                     u4315:	
 17265  089B  36D7               	lsrf	___fttol@lval+3,f
 17266  089C  0CD6               	rrf	___fttol@lval+2,f
 17267  089D  0CD5               	rrf	___fttol@lval+1,f
 17268  089E  0CD4               	rrf	___fttol@lval,f
 17269  089F  0B89               	decfsz	9,f
 17270  08A0  289B               	goto	u4315
 17271  08A1  3001               	movlw	1
 17272  08A2  00CF               	movwf	??___fttol
 17273  08A3  084F               	movf	??___fttol,w
 17274  08A4  07D8               	addwf	___fttol@exp1,f
 17275  08A5  1903               	btfsc	3,2
 17276  08A6  28C1               	goto	l6002
 17277  08A7  289A               	goto	l5990
 17278  08A8                     l5992:	
 17279  08A8  3018               	movlw	24
 17280  08A9  0258               	subwf	___fttol@exp1,w
 17281  08AA  1C03               	skipc
 17282  08AB  28BE               	goto	l6000
 17283  08AC  3000               	movlw	0
 17284  08AD  00CE               	movwf	?___fttol+3
 17285  08AE  3000               	movlw	0
 17286  08AF  00CD               	movwf	?___fttol+2
 17287  08B0  3000               	movlw	0
 17288  08B1  00CC               	movwf	?___fttol+1
 17289  08B2  3000               	movlw	0
 17290  08B3  00CB               	movwf	?___fttol
 17291  08B4  0008               	return
 17292  08B5                     l5998:	
 17293  08B5  3001               	movlw	1
 17294  08B6                     u4345:	
 17295  08B6  35D4               	lslf	___fttol@lval,f
 17296  08B7  0DD5               	rlf	___fttol@lval+1,f
 17297  08B8  0DD6               	rlf	___fttol@lval+2,f
 17298  08B9  0DD7               	rlf	___fttol@lval+3,f
 17299  08BA  0B89               	decfsz	9,f
 17300  08BB  28B6               	goto	u4345
 17301  08BC  3001               	movlw	1
 17302  08BD  02D8               	subwf	___fttol@exp1,f
 17303  08BE                     l6000:	
 17304  08BE  08D8               	movf	___fttol@exp1,f
 17305  08BF  1D03               	skipz
 17306  08C0  28B5               	goto	l5998
 17307  08C1                     l6002:	
 17308  08C1  0853               	movf	___fttol@sign1,w
 17309  08C2  1903               	btfsc	3,2
 17310  08C3  28CF               	goto	l6006
 17311  08C4  09D4               	comf	___fttol@lval,f
 17312  08C5  09D5               	comf	___fttol@lval+1,f
 17313  08C6  09D6               	comf	___fttol@lval+2,f
 17314  08C7  09D7               	comf	___fttol@lval+3,f
 17315  08C8  0AD4               	incf	___fttol@lval,f
 17316  08C9  1903               	skipnz
 17317  08CA  0AD5               	incf	___fttol@lval+1,f
 17318  08CB  1903               	skipnz
 17319  08CC  0AD6               	incf	___fttol@lval+2,f
 17320  08CD  1903               	skipnz
 17321  08CE  0AD7               	incf	___fttol@lval+3,f
 17322  08CF                     l6006:	
 17323  08CF  0857               	movf	___fttol@lval+3,w
 17324  08D0  00CE               	movwf	?___fttol+3
 17325  08D1  0856               	movf	___fttol@lval+2,w
 17326  08D2  00CD               	movwf	?___fttol+2
 17327  08D3  0855               	movf	___fttol@lval+1,w
 17328  08D4  00CC               	movwf	?___fttol+1
 17329  08D5  0854               	movf	___fttol@lval,w
 17330  08D6  00CB               	movwf	?___fttol
 17331  08D7  0008               	return
 17332  08D8                     __end_of___fttol:	
 17333                           
 17334                           	psect	text108
 17335  0BC4                     __ptext108:	
 17336 ;; *************** function ___ftdiv *****************
 17337 ;; Defined at:
 17338 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17339 ;; Parameters:    Size  Location     Type
 17340 ;;  f2              3   14[BANK0 ] float 
 17341 ;;  f1              3   17[BANK0 ] float 
 17342 ;; Auto vars:     Size  Location     Type
 17343 ;;  f3              3   25[BANK0 ] float 
 17344 ;;  sign            1   29[BANK0 ] unsigned char 
 17345 ;;  exp             1   28[BANK0 ] unsigned char 
 17346 ;;  cntr            1   24[BANK0 ] unsigned char 
 17347 ;; Return value:  Size  Location     Type
 17348 ;;                  3   14[BANK0 ] float 
 17349 ;; Registers used:
 17350 ;;		wreg, status,2, status,0, pclath, cstack
 17351 ;; Tracked objects:
 17352 ;;		On entry : 0/0
 17353 ;;		On exit  : 0/0
 17354 ;;		Unchanged: 0/0
 17355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17356 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17357 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17358 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17359 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17360 ;;Total ram usage:       16 bytes
 17361 ;; Hardware stack levels used:    1
 17362 ;; Hardware stack levels required when called:    5
 17363 ;; This function calls:
 17364 ;;		___ftpack
 17365 ;; This function is called by:
 17366 ;;		_getPercentValue
 17367 ;;		_setPercentValue
 17368 ;; This function uses a non-reentrant model
 17369 ;;
 17370                           
 17371                           
 17372                           ;psect for function ___ftdiv
 17373  0BC4                     ___ftdiv:	
 17374                           
 17375                           ;incstack = 0
 17376                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17377  0BC4  0020               	movlb	0	; select bank0
 17378  0BC5  0831               	movf	___ftdiv@f1,w
 17379  0BC6  00B4               	movwf	??___ftdiv
 17380  0BC7  0832               	movf	___ftdiv@f1+1,w
 17381  0BC8  00B5               	movwf	??___ftdiv+1
 17382  0BC9  0833               	movf	___ftdiv@f1+2,w
 17383  0BCA  00B6               	movwf	??___ftdiv+2
 17384  0BCB  1003               	clrc
 17385  0BCC  0D35               	rlf	??___ftdiv+1,w
 17386  0BCD  0D36               	rlf	??___ftdiv+2,w
 17387  0BCE  00B7               	movwf	??___ftdiv+3
 17388  0BCF  0837               	movf	??___ftdiv+3,w
 17389  0BD0  00BC               	movwf	___ftdiv@exp
 17390  0BD1  08BC               	movf	___ftdiv@exp,f
 17391  0BD2  1D03               	skipz
 17392  0BD3  2BDB               	goto	l5880
 17393  0BD4  3000               	movlw	0
 17394  0BD5  00AE               	movwf	?___ftdiv
 17395  0BD6  3000               	movlw	0
 17396  0BD7  00AF               	movwf	?___ftdiv+1
 17397  0BD8  3000               	movlw	0
 17398  0BD9  00B0               	movwf	?___ftdiv+2
 17399  0BDA  0008               	return
 17400  0BDB                     l5880:	
 17401  0BDB  082E               	movf	___ftdiv@f2,w
 17402  0BDC  00B4               	movwf	??___ftdiv
 17403  0BDD  082F               	movf	___ftdiv@f2+1,w
 17404  0BDE  00B5               	movwf	??___ftdiv+1
 17405  0BDF  0830               	movf	___ftdiv@f2+2,w
 17406  0BE0  00B6               	movwf	??___ftdiv+2
 17407  0BE1  1003               	clrc
 17408  0BE2  0D35               	rlf	??___ftdiv+1,w
 17409  0BE3  0D36               	rlf	??___ftdiv+2,w
 17410  0BE4  00B7               	movwf	??___ftdiv+3
 17411  0BE5  0837               	movf	??___ftdiv+3,w
 17412  0BE6  00BD               	movwf	___ftdiv@sign
 17413  0BE7  08BD               	movf	___ftdiv@sign,f
 17414  0BE8  1D03               	skipz
 17415  0BE9  2BF1               	goto	l5886
 17416  0BEA  3000               	movlw	0
 17417  0BEB  00AE               	movwf	?___ftdiv
 17418  0BEC  3000               	movlw	0
 17419  0BED  00AF               	movwf	?___ftdiv+1
 17420  0BEE  3000               	movlw	0
 17421  0BEF  00B0               	movwf	?___ftdiv+2
 17422  0BF0  0008               	return
 17423  0BF1                     l5886:	
 17424  0BF1  3000               	movlw	0
 17425  0BF2  00B9               	movwf	___ftdiv@f3
 17426  0BF3  3000               	movlw	0
 17427  0BF4  00BA               	movwf	___ftdiv@f3+1
 17428  0BF5  3000               	movlw	0
 17429  0BF6  00BB               	movwf	___ftdiv@f3+2
 17430  0BF7  3089               	movlw	137
 17431  0BF8  073D               	addwf	___ftdiv@sign,w
 17432  0BF9  00B4               	movwf	??___ftdiv
 17433  0BFA  0834               	movf	??___ftdiv,w
 17434  0BFB  02BC               	subwf	___ftdiv@exp,f
 17435  0BFC  0831               	movf	___ftdiv@f1,w
 17436  0BFD  00B4               	movwf	??___ftdiv
 17437  0BFE  0832               	movf	___ftdiv@f1+1,w
 17438  0BFF  00B5               	movwf	??___ftdiv+1
 17439  0C00  0833               	movf	___ftdiv@f1+2,w
 17440  0C01  00B6               	movwf	??___ftdiv+2
 17441  0C02  3010               	movlw	16
 17442  0C03                     u4095:	
 17443  0C03  36B6               	lsrf	??___ftdiv+2,f
 17444  0C04  0CB5               	rrf	??___ftdiv+1,f
 17445  0C05  0CB4               	rrf	??___ftdiv,f
 17446  0C06  0B89               	decfsz	9,f
 17447  0C07  2C03               	goto	u4095
 17448  0C08  0834               	movf	??___ftdiv,w
 17449  0C09  00B7               	movwf	??___ftdiv+3
 17450  0C0A  0837               	movf	??___ftdiv+3,w
 17451  0C0B  00BD               	movwf	___ftdiv@sign
 17452  0C0C  082E               	movf	___ftdiv@f2,w
 17453  0C0D  00B4               	movwf	??___ftdiv
 17454  0C0E  082F               	movf	___ftdiv@f2+1,w
 17455  0C0F  00B5               	movwf	??___ftdiv+1
 17456  0C10  0830               	movf	___ftdiv@f2+2,w
 17457  0C11  00B6               	movwf	??___ftdiv+2
 17458  0C12  3010               	movlw	16
 17459  0C13                     u4105:	
 17460  0C13  36B6               	lsrf	??___ftdiv+2,f
 17461  0C14  0CB5               	rrf	??___ftdiv+1,f
 17462  0C15  0CB4               	rrf	??___ftdiv,f
 17463  0C16  0B89               	decfsz	9,f
 17464  0C17  2C13               	goto	u4105
 17465  0C18  0834               	movf	??___ftdiv,w
 17466  0C19  00B7               	movwf	??___ftdiv+3
 17467  0C1A  0837               	movf	??___ftdiv+3,w
 17468  0C1B  06BD               	xorwf	___ftdiv@sign,f
 17469  0C1C  3080               	movlw	128
 17470  0C1D  00B4               	movwf	??___ftdiv
 17471  0C1E  0834               	movf	??___ftdiv,w
 17472  0C1F  05BD               	andwf	___ftdiv@sign,f
 17473  0C20  17B2               	bsf	___ftdiv@f1+1,7
 17474  0C21  30FF               	movlw	255
 17475  0C22  05B1               	andwf	___ftdiv@f1,f
 17476  0C23  30FF               	movlw	255
 17477  0C24  05B2               	andwf	___ftdiv@f1+1,f
 17478  0C25  3000               	movlw	0
 17479  0C26  05B3               	andwf	___ftdiv@f1+2,f
 17480  0C27  17AF               	bsf	___ftdiv@f2+1,7
 17481  0C28  30FF               	movlw	255
 17482  0C29  05AE               	andwf	___ftdiv@f2,f
 17483  0C2A  30FF               	movlw	255
 17484  0C2B  05AF               	andwf	___ftdiv@f2+1,f
 17485  0C2C  3000               	movlw	0
 17486  0C2D  05B0               	andwf	___ftdiv@f2+2,f
 17487  0C2E  3018               	movlw	24
 17488  0C2F  00B4               	movwf	??___ftdiv
 17489  0C30  0834               	movf	??___ftdiv,w
 17490  0C31  00B8               	movwf	___ftdiv@cntr
 17491  0C32                     l5900:	
 17492  0C32  3001               	movlw	1
 17493  0C33                     u4115:	
 17494  0C33  35B9               	lslf	___ftdiv@f3,f
 17495  0C34  0DBA               	rlf	___ftdiv@f3+1,f
 17496  0C35  0DBB               	rlf	___ftdiv@f3+2,f
 17497  0C36  0B89               	decfsz	9,f
 17498  0C37  2C33               	goto	u4115
 17499  0C38  0830               	movf	___ftdiv@f2+2,w
 17500  0C39  0233               	subwf	___ftdiv@f1+2,w
 17501  0C3A  1D03               	skipz
 17502  0C3B  2C42               	goto	u4125
 17503  0C3C  082F               	movf	___ftdiv@f2+1,w
 17504  0C3D  0232               	subwf	___ftdiv@f1+1,w
 17505  0C3E  1D03               	skipz
 17506  0C3F  2C42               	goto	u4125
 17507  0C40  082E               	movf	___ftdiv@f2,w
 17508  0C41  0231               	subwf	___ftdiv@f1,w
 17509  0C42                     u4125:	
 17510  0C42  1C03               	skipc
 17511  0C43  2C4B               	goto	l5908
 17512  0C44  082E               	movf	___ftdiv@f2,w
 17513  0C45  02B1               	subwf	___ftdiv@f1,f
 17514  0C46  082F               	movf	___ftdiv@f2+1,w
 17515  0C47  3BB2               	subwfb	___ftdiv@f1+1,f
 17516  0C48  0830               	movf	___ftdiv@f2+2,w
 17517  0C49  3BB3               	subwfb	___ftdiv@f1+2,f
 17518  0C4A  1439               	bsf	___ftdiv@f3,0
 17519  0C4B                     l5908:	
 17520  0C4B  3001               	movlw	1
 17521  0C4C                     u4135:	
 17522  0C4C  35B1               	lslf	___ftdiv@f1,f
 17523  0C4D  0DB2               	rlf	___ftdiv@f1+1,f
 17524  0C4E  0DB3               	rlf	___ftdiv@f1+2,f
 17525  0C4F  0B89               	decfsz	9,f
 17526  0C50  2C4C               	goto	u4135
 17527  0C51  3001               	movlw	1
 17528  0C52  02B8               	subwf	___ftdiv@cntr,f
 17529  0C53  1D03               	btfss	3,2
 17530  0C54  2C32               	goto	l5900
 17531  0C55  0839               	movf	___ftdiv@f3,w
 17532  0C56  00A0               	movwf	___ftpack@arg
 17533  0C57  083A               	movf	___ftdiv@f3+1,w
 17534  0C58  00A1               	movwf	___ftpack@arg+1
 17535  0C59  083B               	movf	___ftdiv@f3+2,w
 17536  0C5A  00A2               	movwf	___ftpack@arg+2
 17537  0C5B  083C               	movf	___ftdiv@exp,w
 17538  0C5C  00B4               	movwf	??___ftdiv
 17539  0C5D  0834               	movf	??___ftdiv,w
 17540  0C5E  00A3               	movwf	___ftpack@exp
 17541  0C5F  083D               	movf	___ftdiv@sign,w
 17542  0C60  00B5               	movwf	??___ftdiv+1
 17543  0C61  0835               	movf	??___ftdiv+1,w
 17544  0C62  00A4               	movwf	___ftpack@sign
 17545  0C63  3192  22D4         	fcall	___ftpack
 17546  0C65  0020               	movlb	0	; select bank0
 17547  0C66  0820               	movf	?___ftpack,w
 17548  0C67  00AE               	movwf	?___ftdiv
 17549  0C68  0821               	movf	?___ftpack+1,w
 17550  0C69  00AF               	movwf	?___ftdiv+1
 17551  0C6A  0822               	movf	?___ftpack+2,w
 17552  0C6B  00B0               	movwf	?___ftdiv+2
 17553  0C6C  0008               	return
 17554  0C6D                     __end_of___ftdiv:	
 17555                           
 17556                           	psect	text109
 17557  1A4F                     __ptext109:	
 17558 ;; *************** function ___awtoft *****************
 17559 ;; Defined at:
 17560 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17561 ;; Parameters:    Size  Location     Type
 17562 ;;  c               2    8[BANK0 ] int 
 17563 ;; Auto vars:     Size  Location     Type
 17564 ;;  sign            1   13[BANK0 ] unsigned char 
 17565 ;; Return value:  Size  Location     Type
 17566 ;;                  3    8[BANK0 ] float 
 17567 ;; Registers used:
 17568 ;;		wreg, status,2, status,0, pclath, cstack
 17569 ;; Tracked objects:
 17570 ;;		On entry : 0/0
 17571 ;;		On exit  : 0/0
 17572 ;;		Unchanged: 0/0
 17573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17577 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17578 ;;Total ram usage:        6 bytes
 17579 ;; Hardware stack levels used:    1
 17580 ;; Hardware stack levels required when called:    5
 17581 ;; This function calls:
 17582 ;;		___ftpack
 17583 ;; This function is called by:
 17584 ;;		_getPercentValue
 17585 ;;		_setPercentValue
 17586 ;; This function uses a non-reentrant model
 17587 ;;
 17588                           
 17589                           
 17590                           ;psect for function ___awtoft
 17591  1A4F                     ___awtoft:	
 17592                           
 17593                           ;incstack = 0
 17594                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17595  1A4F  0020               	movlb	0	; select bank0
 17596  1A50  01AD               	clrf	___awtoft@sign
 17597  1A51  1FA9               	btfss	___awtoft@c+1,7
 17598  1A52  2A5A               	goto	l5798
 17599  1A53  09A8               	comf	___awtoft@c,f
 17600  1A54  09A9               	comf	___awtoft@c+1,f
 17601  1A55  0AA8               	incf	___awtoft@c,f
 17602  1A56  1903               	skipnz
 17603  1A57  0AA9               	incf	___awtoft@c+1,f
 17604  1A58  01AD               	clrf	___awtoft@sign
 17605  1A59  0AAD               	incf	___awtoft@sign,f
 17606  1A5A                     l5798:	
 17607  1A5A  0828               	movf	___awtoft@c,w
 17608  1A5B  00A0               	movwf	___ftpack@arg
 17609  1A5C  0829               	movf	___awtoft@c+1,w
 17610  1A5D  00A1               	movwf	___ftpack@arg+1
 17611  1A5E  01A2               	clrf	___ftpack@arg+2
 17612  1A5F  308E               	movlw	142
 17613  1A60  00AB               	movwf	??___awtoft
 17614  1A61  082B               	movf	??___awtoft,w
 17615  1A62  00A3               	movwf	___ftpack@exp
 17616  1A63  082D               	movf	___awtoft@sign,w
 17617  1A64  00AC               	movwf	??___awtoft+1
 17618  1A65  082C               	movf	??___awtoft+1,w
 17619  1A66  00A4               	movwf	___ftpack@sign
 17620  1A67  3192  22D4         	fcall	___ftpack
 17621  1A69  0020               	movlb	0	; select bank0
 17622  1A6A  0820               	movf	?___ftpack,w
 17623  1A6B  00A8               	movwf	?___awtoft
 17624  1A6C  0821               	movf	?___ftpack+1,w
 17625  1A6D  00A9               	movwf	?___awtoft+1
 17626  1A6E  0822               	movf	?___ftpack+2,w
 17627  1A6F  00AA               	movwf	?___awtoft+2
 17628  1A70  0008               	return
 17629  1A71                     __end_of___awtoft:	
 17630                           
 17631                           	psect	text110
 17632  12D4                     __ptext110:	
 17633 ;; *************** function ___ftpack *****************
 17634 ;; Defined at:
 17635 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17636 ;; Parameters:    Size  Location     Type
 17637 ;;  arg             3    0[BANK0 ] unsigned um
 17638 ;;  exp             1    3[BANK0 ] unsigned char 
 17639 ;;  sign            1    4[BANK0 ] unsigned char 
 17640 ;; Auto vars:     Size  Location     Type
 17641 ;;		None
 17642 ;; Return value:  Size  Location     Type
 17643 ;;                  3    0[BANK0 ] float 
 17644 ;; Registers used:
 17645 ;;		wreg, status,2, status,0
 17646 ;; Tracked objects:
 17647 ;;		On entry : 0/0
 17648 ;;		On exit  : 0/0
 17649 ;;		Unchanged: 0/0
 17650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17651 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17653 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17654 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17655 ;;Total ram usage:        8 bytes
 17656 ;; Hardware stack levels used:    1
 17657 ;; Hardware stack levels required when called:    4
 17658 ;; This function calls:
 17659 ;;		Nothing
 17660 ;; This function is called by:
 17661 ;;		___awtoft
 17662 ;;		___ftadd
 17663 ;;		___ftdiv
 17664 ;;		___ftmul
 17665 ;; This function uses a non-reentrant model
 17666 ;;
 17667                           
 17668                           
 17669                           ;psect for function ___ftpack
 17670  12D4                     ___ftpack:	
 17671                           
 17672                           ;incstack = 0
 17673                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17674  12D4  0020               	movlb	0	; select bank0
 17675  12D5  0823               	movf	___ftpack@exp,w
 17676  12D6  1903               	btfsc	3,2
 17677  12D7  2ADD               	goto	l5764
 17678  12D8  0822               	movf	___ftpack@arg+2,w
 17679  12D9  0421               	iorwf	___ftpack@arg+1,w
 17680  12DA  0420               	iorwf	___ftpack@arg,w
 17681  12DB  1D03               	skipz
 17682  12DC  2AEE               	goto	l5770
 17683  12DD                     l5764:	
 17684  12DD  3000               	movlw	0
 17685  12DE  00A0               	movwf	?___ftpack
 17686  12DF  3000               	movlw	0
 17687  12E0  00A1               	movwf	?___ftpack+1
 17688  12E1  3000               	movlw	0
 17689  12E2  00A2               	movwf	?___ftpack+2
 17690  12E3  0008               	return
 17691  12E4                     l5768:	
 17692  12E4  3001               	movlw	1
 17693  12E5  00A5               	movwf	??___ftpack
 17694  12E6  0825               	movf	??___ftpack,w
 17695  12E7  07A3               	addwf	___ftpack@exp,f
 17696  12E8  3001               	movlw	1
 17697  12E9                     u3745:	
 17698  12E9  36A2               	lsrf	___ftpack@arg+2,f
 17699  12EA  0CA1               	rrf	___ftpack@arg+1,f
 17700  12EB  0CA0               	rrf	___ftpack@arg,f
 17701  12EC  0B89               	decfsz	9,f
 17702  12ED  2AE9               	goto	u3745
 17703  12EE                     l5770:	
 17704  12EE  30FE               	movlw	254
 17705  12EF  0522               	andwf	___ftpack@arg+2,w
 17706  12F0  1903               	btfsc	3,2
 17707  12F1  2B07               	goto	l3188
 17708  12F2  2AE4               	goto	l5768
 17709  12F3                     l5772:	
 17710  12F3  3001               	movlw	1
 17711  12F4  00A5               	movwf	??___ftpack
 17712  12F5  0825               	movf	??___ftpack,w
 17713  12F6  07A3               	addwf	___ftpack@exp,f
 17714  12F7  3001               	movlw	1
 17715  12F8  07A0               	addwf	___ftpack@arg,f
 17716  12F9  3000               	movlw	0
 17717  12FA  1803               	skipnc
 17718  12FB  3001               	movlw	1
 17719  12FC  07A1               	addwf	___ftpack@arg+1,f
 17720  12FD  3000               	movlw	0
 17721  12FE  1803               	skipnc
 17722  12FF  3001               	movlw	1
 17723  1300  07A2               	addwf	___ftpack@arg+2,f
 17724  1301  3001               	movlw	1
 17725  1302                     u3765:	
 17726  1302  36A2               	lsrf	___ftpack@arg+2,f
 17727  1303  0CA1               	rrf	___ftpack@arg+1,f
 17728  1304  0CA0               	rrf	___ftpack@arg,f
 17729  1305  0B89               	decfsz	9,f
 17730  1306  2B02               	goto	u3765
 17731  1307                     l3188:	
 17732  1307  30FF               	movlw	255
 17733  1308  0522               	andwf	___ftpack@arg+2,w
 17734  1309  1903               	btfsc	3,2
 17735  130A  2B14               	goto	l5780
 17736  130B  2AF3               	goto	l5772
 17737  130C                     l5778:	
 17738  130C  3001               	movlw	1
 17739  130D  02A3               	subwf	___ftpack@exp,f
 17740  130E  3001               	movlw	1
 17741  130F                     u3785:	
 17742  130F  35A0               	lslf	___ftpack@arg,f
 17743  1310  0DA1               	rlf	___ftpack@arg+1,f
 17744  1311  0DA2               	rlf	___ftpack@arg+2,f
 17745  1312  0B89               	decfsz	9,f
 17746  1313  2B0F               	goto	u3785
 17747  1314                     l5780:	
 17748  1314  1FA1               	btfss	___ftpack@arg+1,7
 17749  1315  2B0C               	goto	l5778
 17750  1316  1823               	btfsc	___ftpack@exp,0
 17751  1317  2B1E               	goto	l3194
 17752  1318  30FF               	movlw	255
 17753  1319  05A0               	andwf	___ftpack@arg,f
 17754  131A  307F               	movlw	127
 17755  131B  05A1               	andwf	___ftpack@arg+1,f
 17756  131C  30FF               	movlw	255
 17757  131D  05A2               	andwf	___ftpack@arg+2,f
 17758  131E                     l3194:	
 17759  131E  1003               	clrc
 17760  131F  0CA3               	rrf	___ftpack@exp,f
 17761  1320  0823               	movf	___ftpack@exp,w
 17762  1321  00A5               	movwf	??___ftpack
 17763  1322  01A6               	clrf	??___ftpack+1
 17764  1323  01A7               	clrf	??___ftpack+2
 17765  1324  3010               	movlw	16
 17766  1325                     u3815:	
 17767  1325  35A5               	lslf	??___ftpack,f
 17768  1326  0DA6               	rlf	??___ftpack+1,f
 17769  1327  0DA7               	rlf	??___ftpack+2,f
 17770  1328  0B89               	decfsz	9,f
 17771  1329  2B25               	goto	u3815
 17772  132A  0825               	movf	??___ftpack,w
 17773  132B  04A0               	iorwf	___ftpack@arg,f
 17774  132C  0826               	movf	??___ftpack+1,w
 17775  132D  04A1               	iorwf	___ftpack@arg+1,f
 17776  132E  0827               	movf	??___ftpack+2,w
 17777  132F  04A2               	iorwf	___ftpack@arg+2,f
 17778  1330  0824               	movf	___ftpack@sign,w
 17779  1331  1903               	btfsc	3,2
 17780  1332  0008               	return
 17781  1333  17A2               	bsf	___ftpack@arg+2,7
 17782  1334  0008               	return
 17783  1335                     __end_of___ftpack:	
 17784                           
 17785                           	psect	text111
 17786  27F1                     __ptext111:	
 17787 ;; *************** function _setRFSW_Status *****************
 17788 ;; Defined at:
 17789 ;;		line 417 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
 17790 ;; Parameters:    Size  Location     Type
 17791 ;;  sw              1    wreg     unsigned char 
 17792 ;;  command         1    2[BANK0 ] unsigned char 
 17793 ;; Auto vars:     Size  Location     Type
 17794 ;;  sw              1    3[BANK0 ] unsigned char 
 17795 ;; Return value:  Size  Location     Type
 17796 ;;		None               void
 17797 ;; Registers used:
 17798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17799 ;; Tracked objects:
 17800 ;;		On entry : 0/0
 17801 ;;		On exit  : 0/0
 17802 ;;		Unchanged: 0/0
 17803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17804 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17808 ;;Total ram usage:        2 bytes
 17809 ;; Hardware stack levels used:    1
 17810 ;; Hardware stack levels required when called:    5
 17811 ;; This function calls:
 17812 ;;		_RfSWPointSelect
 17813 ;; This function is called by:
 17814 ;;		_DlyOff_Main
 17815 ;;		_setDimmerLights_ERROR
 17816 ;;		_setControl_Lights_Table
 17817 ;;		_Sw_DimmerOnFunc
 17818 ;;		_Sw_DimmerAdjFunc
 17819 ;; This function uses a non-reentrant model
 17820 ;;
 17821                           
 17822                           
 17823                           ;psect for function _setRFSW_Status
 17824  27F1                     _setRFSW_Status:	
 17825                           
 17826                           ;incstack = 0
 17827                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17828                           ;setRFSW_Status@sw stored from wreg
 17829  27F1  0020               	movlb	0	; select bank0
 17830  27F2  00A3               	movwf	setRFSW_Status@sw
 17831                           
 17832                           ;RF_Control_B1.c: 419: RfSWPointSelect(sw);
 17833  27F3  0823               	movf	setRFSW_Status@sw,w
 17834  27F4  31A7  2749         	fcall	_RfSWPointSelect
 17835                           
 17836                           ;RF_Control_B1.c: 420: RFSW->Status=command;
 17837  27F6  0021               	movlb	1	; select bank1
 17838  27F7  083C               	movf	_RFSW^(0+128),w
 17839  27F8  0086               	movwf	6
 17840  27F9  0187               	clrf	7
 17841  27FA  0020               	movlb	0	; select bank0
 17842  27FB  0822               	movf	setRFSW_Status@command,w
 17843  27FC  1001               	bcf	1,0
 17844  27FD  1D03               	skipz
 17845  27FE  1401               	bsf	1,0
 17846  27FF  0008               	return
 17847  2800                     __end_of_setRFSW_Status:	
 17848                           
 17849                           	psect	text112
 17850  2749                     __ptext112:	
 17851 ;; *************** function _RfSWPointSelect *****************
 17852 ;; Defined at:
 17853 ;;		line 339 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\RF_Control_B1.c"
 17854 ;; Parameters:    Size  Location     Type
 17855 ;;  sw              1    wreg     unsigned char 
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;  sw              1    1[BANK0 ] unsigned char 
 17858 ;; Return value:  Size  Location     Type
 17859 ;;		None               void
 17860 ;; Registers used:
 17861 ;;		wreg
 17862 ;; Tracked objects:
 17863 ;;		On entry : 0/0
 17864 ;;		On exit  : 0/0
 17865 ;;		Unchanged: 0/0
 17866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;Total ram usage:        2 bytes
 17872 ;; Hardware stack levels used:    1
 17873 ;; Hardware stack levels required when called:    4
 17874 ;; This function calls:
 17875 ;;		Nothing
 17876 ;; This function is called by:
 17877 ;;		_setRFSW_Control
 17878 ;;		_setRFSW_AdjControl
 17879 ;;		_setRFSW_Status
 17880 ;; This function uses a non-reentrant model
 17881 ;;
 17882                           
 17883                           
 17884                           ;psect for function _RfSWPointSelect
 17885  2749                     _RfSWPointSelect:	
 17886                           
 17887                           ;incstack = 0
 17888                           ; Regs used in _RfSWPointSelect: [wreg]
 17889                           ;RfSWPointSelect@sw stored from wreg
 17890  2749  0020               	movlb	0	; select bank0
 17891  274A  00A1               	movwf	RfSWPointSelect@sw
 17892                           
 17893                           ;RF_Control_B1.c: 342: if(sw == 1)
 17894  274B  0821               	movf	RfSWPointSelect@sw,w
 17895  274C  3A01               	xorlw	1
 17896  274D  1D03               	skipz
 17897  274E  0008               	return
 17898                           
 17899                           ;RF_Control_B1.c: 343: {
 17900                           ;RF_Control_B1.c: 344: RFSW=&RFSW1;
 17901  274F  30E9               	movlw	_RFSW1& (0+255)
 17902  2750  00A0               	movwf	??_RfSWPointSelect
 17903  2751  0820               	movf	??_RfSWPointSelect,w
 17904  2752  0021               	movlb	1	; select bank1
 17905  2753  00BC               	movwf	_RFSW^(0+128)
 17906  2754  0008               	return
 17907  2755                     __end_of_RfSWPointSelect:	
 17908                           
 17909                           	psect	text113
 17910  18A8                     __ptext113:	
 17911 ;; *************** function _setDimmerLights_Trigger *****************
 17912 ;; Defined at:
 17913 ;;		line 436 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 17914 ;; Parameters:    Size  Location     Type
 17915 ;;  lights          1    wreg     unsigned char 
 17916 ;;  command         1    2[BANK0 ] unsigned char 
 17917 ;; Auto vars:     Size  Location     Type
 17918 ;;  lights          1    3[BANK0 ] unsigned char 
 17919 ;; Return value:  Size  Location     Type
 17920 ;;		None               void
 17921 ;; Registers used:
 17922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17923 ;; Tracked objects:
 17924 ;;		On entry : 0/0
 17925 ;;		On exit  : 0/0
 17926 ;;		Unchanged: 0/0
 17927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17928 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17932 ;;Total ram usage:        2 bytes
 17933 ;; Hardware stack levels used:    1
 17934 ;; Hardware stack levels required when called:    5
 17935 ;; This function calls:
 17936 ;;		_DimmerLightsPointSelect
 17937 ;; This function is called by:
 17938 ;;		_DlyOff_Main
 17939 ;;		_setRFSW_Control
 17940 ;;		_Sw_DimmerOnFunc
 17941 ;;		_Sw_DimmerOffFunc
 17942 ;; This function uses a non-reentrant model
 17943 ;;
 17944                           
 17945                           
 17946                           ;psect for function _setDimmerLights_Trigger
 17947  18A8                     _setDimmerLights_Trigger:	
 17948                           
 17949                           ;incstack = 0
 17950                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17951                           ;setDimmerLights_Trigger@lights stored from wreg
 17952  18A8  0020               	movlb	0	; select bank0
 17953  18A9  00A3               	movwf	setDimmerLights_Trigger@lights
 17954                           
 17955                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 17956  18AA  0823               	movf	setDimmerLights_Trigger@lights,w
 17957  18AB  31A6  26CC         	fcall	_DimmerLightsPointSelect
 17958                           
 17959                           ;Dimmer_B1.c: 439: DimmerLights->Trigger=command;
 17960  18AD  0020               	movlb	0	; select bank0
 17961  18AE  086C               	movf	_DimmerLights,w
 17962  18AF  3E09               	addlw	9
 17963  18B0  0086               	movwf	6
 17964  18B1  3001               	movlw	1	; select bank2/3
 17965  18B2  0087               	movwf	7
 17966  18B3  0822               	movf	setDimmerLights_Trigger@command,w
 17967  18B4  1081               	bcf	1,1
 17968  18B5  1D03               	skipz
 17969  18B6  1481               	bsf	1,1
 17970  18B7  0008               	return
 17971  18B8                     __end_of_setDimmerLights_Trigger:	
 17972                           
 17973                           	psect	text114
 17974  1898                     __ptext114:	
 17975 ;; *************** function _setDimmerLights_Switch *****************
 17976 ;; Defined at:
 17977 ;;		line 426 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\Dimmer_B1.c"
 17978 ;; Parameters:    Size  Location     Type
 17979 ;;  lights          1    wreg     unsigned char 
 17980 ;;  command         1    2[BANK0 ] unsigned char 
 17981 ;; Auto vars:     Size  Location     Type
 17982 ;;  lights          1    3[BANK0 ] unsigned char 
 17983 ;; Return value:  Size  Location     Type
 17984 ;;		None               void
 17985 ;; Registers used:
 17986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17987 ;; Tracked objects:
 17988 ;;		On entry : 0/0
 17989 ;;		On exit  : 0/0
 17990 ;;		Unchanged: 0/0
 17991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17992 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17993 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17995 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17996 ;;Total ram usage:        2 bytes
 17997 ;; Hardware stack levels used:    1
 17998 ;; Hardware stack levels required when called:    5
 17999 ;; This function calls:
 18000 ;;		_DimmerLightsPointSelect
 18001 ;; This function is called by:
 18002 ;;		_DlyOff_Main
 18003 ;;		_setRFSW_Control
 18004 ;;		_Sw_DimmerOnFunc
 18005 ;;		_Sw_DimmerOffFunc
 18006 ;; This function uses a non-reentrant model
 18007 ;;
 18008                           
 18009                           
 18010                           ;psect for function _setDimmerLights_Switch
 18011  1898                     _setDimmerLights_Switch:	
 18012                           
 18013                           ;incstack = 0
 18014                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18015                           ;setDimmerLights_Switch@lights stored from wreg
 18016  1898  0020               	movlb	0	; select bank0
 18017  1899  00A3               	movwf	setDimmerLights_Switch@lights
 18018                           
 18019                           ;Dimmer_B1.c: 428: DimmerLightsPointSelect(lights);
 18020  189A  0823               	movf	setDimmerLights_Switch@lights,w
 18021  189B  31A6  26CC         	fcall	_DimmerLightsPointSelect
 18022                           
 18023                           ;Dimmer_B1.c: 429: DimmerLights->Switch=command;
 18024  189D  0020               	movlb	0	; select bank0
 18025  189E  086C               	movf	_DimmerLights,w
 18026  189F  3E09               	addlw	9
 18027  18A0  0086               	movwf	6
 18028  18A1  3001               	movlw	1	; select bank2/3
 18029  18A2  0087               	movwf	7
 18030  18A3  0822               	movf	setDimmerLights_Switch@command,w
 18031  18A4  1001               	bcf	1,0
 18032  18A5  1D03               	skipz
 18033  18A6  1401               	bsf	1,0
 18034  18A7  0008               	return
 18035  18A8                     __end_of_setDimmerLights_Switch:	
 18036                           
 18037                           	psect	text115
 18038  26CC                     __ptext115:	
 18039 ;; *************** function _DimmerLightsPointSelect *****************
 18040 ;; Defined at:
 18041 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.1
      +.1.1\Release\Dimmer_B1.c"
 18042 ;; Parameters:    Size  Location     Type
 18043 ;;  lights          1    wreg     unsigned char 
 18044 ;; Auto vars:     Size  Location     Type
 18045 ;;  lights          1    1[BANK0 ] unsigned char 
 18046 ;; Return value:  Size  Location     Type
 18047 ;;		None               void
 18048 ;; Registers used:
 18049 ;;		wreg
 18050 ;; Tracked objects:
 18051 ;;		On entry : 0/0
 18052 ;;		On exit  : 0/0
 18053 ;;		Unchanged: 0/0
 18054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;Total ram usage:        2 bytes
 18060 ;; Hardware stack levels used:    1
 18061 ;; Hardware stack levels required when called:    4
 18062 ;; This function calls:
 18063 ;;		Nothing
 18064 ;; This function is called by:
 18065 ;;		_setDimmerLights_Initialization
 18066 ;;		_setDimmerLights_Main
 18067 ;;		_setDimmerLights_ERROR
 18068 ;;		_setDimmerLights_TriggerERROR
 18069 ;;		_setDimmerLights
 18070 ;;		_setDimmerLights_Adj
 18071 ;;		_setDimmerLights_AdjRF
 18072 ;;		_setDimmerLights_Switch
 18073 ;;		_setDimmerLights_AdjGo
 18074 ;;		_setDimmerLights_Trigger
 18075 ;;		_setDimmerLights_TriggerAdj
 18076 ;;		_setDimmerLights_Clear
 18077 ;;		_setDimmerLights_GO
 18078 ;;		_setDimmerLights_MaxmumValue
 18079 ;; This function uses a non-reentrant model
 18080 ;;
 18081                           
 18082                           
 18083                           ;psect for function _DimmerLightsPointSelect
 18084  26CC                     _DimmerLightsPointSelect:	
 18085                           
 18086                           ;incstack = 0
 18087                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18088                           ;DimmerLightsPointSelect@lights stored from wreg
 18089  26CC  0020               	movlb	0	; select bank0
 18090  26CD  00A1               	movwf	DimmerLightsPointSelect@lights
 18091                           
 18092                           ;Dimmer_B1.c: 10: if(lights == 1)
 18093  26CE  0821               	movf	DimmerLightsPointSelect@lights,w
 18094  26CF  3A01               	xorlw	1
 18095  26D0  1D03               	skipz
 18096  26D1  0008               	return
 18097                           
 18098                           ;Dimmer_B1.c: 11: {
 18099                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18100  26D2  303E               	movlw	_DimmerLights1& (0+255)
 18101  26D3  00A0               	movwf	??_DimmerLightsPointSelect
 18102  26D4  0820               	movf	??_DimmerLightsPointSelect,w
 18103  26D5  00EC               	movwf	_DimmerLights
 18104  26D6  0008               	return
 18105  26D7                     __end_of_DimmerLightsPointSelect:	
 18106                           
 18107                           	psect	text116
 18108  1710                     __ptext116:	
 18109 ;; *************** function _setBuz *****************
 18110 ;; Defined at:
 18111 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Buzzer_B1.c"
 18112 ;; Parameters:    Size  Location     Type
 18113 ;;  count           1    wreg     unsigned char 
 18114 ;;  time            2    6[BANK0 ] int 
 18115 ;; Auto vars:     Size  Location     Type
 18116 ;;  count           1    9[BANK0 ] unsigned char 
 18117 ;; Return value:  Size  Location     Type
 18118 ;;		None               void
 18119 ;; Registers used:
 18120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18121 ;; Tracked objects:
 18122 ;;		On entry : 0/0
 18123 ;;		On exit  : 0/0
 18124 ;;		Unchanged: 0/0
 18125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18126 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18129 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18130 ;;Total ram usage:        4 bytes
 18131 ;; Hardware stack levels used:    1
 18132 ;; Hardware stack levels required when called:    5
 18133 ;; This function calls:
 18134 ;;		___wmul
 18135 ;; This function is called by:
 18136 ;;		_DlyOff_Main
 18137 ;;		_setDimmerLights_Main
 18138 ;;		_DimmerLights_Exceptions
 18139 ;;		_MainT
 18140 ;;		_setOverTemp_Exceptions
 18141 ;;		_setLog_Code
 18142 ;;		_setControl_Lights_Table
 18143 ;;		_setRFSW_Control
 18144 ;;		_setSw_Main
 18145 ;;		_Sw_DimmerOnFunc
 18146 ;; This function uses a non-reentrant model
 18147 ;;
 18148                           
 18149                           
 18150                           ;psect for function _setBuz
 18151  1710                     _setBuz:	
 18152                           
 18153                           ;incstack = 0
 18154                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18155                           ;setBuz@count stored from wreg
 18156  1710  0020               	movlb	0	; select bank0
 18157  1711  00A9               	movwf	setBuz@count
 18158                           
 18159                           ;Buzzer_B1.c: 24: time*=20;
 18160  1712  3014               	movlw	20
 18161  1713  00A0               	movwf	___wmul@multiplier
 18162  1714  3000               	movlw	0
 18163  1715  00A1               	movwf	___wmul@multiplier+1
 18164  1716  0827               	movf	setBuz@time+1,w
 18165  1717  01A3               	clrf	___wmul@multiplicand+1
 18166  1718  07A3               	addwf	___wmul@multiplicand+1,f
 18167  1719  0826               	movf	setBuz@time,w
 18168  171A  01A2               	clrf	___wmul@multiplicand
 18169  171B  07A2               	addwf	___wmul@multiplicand,f
 18170  171C  3199  21F2  3197   	fcall	___wmul
 18171  171F  0020               	movlb	0	; select bank0
 18172  1720  0821               	movf	?___wmul+1,w
 18173  1721  01A7               	clrf	setBuz@time+1
 18174  1722  07A7               	addwf	setBuz@time+1,f
 18175  1723  0820               	movf	?___wmul,w
 18176  1724  01A6               	clrf	setBuz@time
 18177  1725  07A6               	addwf	setBuz@time,f
 18178                           
 18179                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 18180  1726  0878               	movf	_Buz,w
 18181  1727  0086               	movwf	6
 18182  1728  3001               	movlw	1	; select bank2/3
 18183  1729  0087               	movwf	7
 18184  172A  1C01               	btfss	1,0
 18185  172B  0008               	return
 18186                           
 18187                           ;Buzzer_B1.c: 26: {
 18188                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 18189  172C  0878               	movf	_Buz,w
 18190  172D  0086               	movwf	6
 18191  172E  3001               	movlw	1	; select bank2/3
 18192  172F  0087               	movwf	7
 18193  1730  1881               	btfsc	1,1
 18194  1731  2F4B               	goto	l8128
 18195                           
 18196                           ;Buzzer_B1.c: 28: {
 18197                           ;Buzzer_B1.c: 29: Buz->GO=1;
 18198  1732  0878               	movf	_Buz,w
 18199  1733  0086               	movwf	6
 18200  1734  3001               	movlw	1	; select bank2/3
 18201  1735  0087               	movwf	7
 18202  1736  1481               	bsf	1,1
 18203                           
 18204                           ;Buzzer_B1.c: 30: Buz->Count=count;
 18205  1737  0829               	movf	setBuz@count,w
 18206  1738  00A8               	movwf	??_setBuz
 18207  1739  0878               	movf	_Buz,w
 18208  173A  3E03               	addlw	3
 18209  173B  0086               	movwf	6
 18210  173C  3001               	movlw	1	; select bank2/3
 18211  173D  0087               	movwf	7
 18212  173E  0828               	movf	??_setBuz,w
 18213  173F  0081               	movwf	1
 18214                           
 18215                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 18216  1740  0878               	movf	_Buz,w
 18217  1741  3E06               	addlw	6
 18218  1742  0086               	movwf	6
 18219  1743  3001               	movlw	1	; select bank2/3
 18220  1744  0087               	movwf	7
 18221  1745  0826               	movf	setBuz@time,w
 18222  1746  3FC0               	movwi [0]fsr1
 18223  1747  0827               	movf	setBuz@time+1,w
 18224  1748  3FC1               	movwi [1]fsr1
 18225                           
 18226                           ;Buzzer_B1.c: 33: RB3=1;
 18227  1749  158D               	bsf	13,3	;volatile
 18228                           
 18229                           ;Buzzer_B1.c: 34: }
 18230  174A  0008               	return
 18231  174B                     l8128:	
 18232                           
 18233                           ;Buzzer_B1.c: 35: else
 18234                           ;Buzzer_B1.c: 36: {
 18235                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 18236  174B  0878               	movf	_Buz,w
 18237  174C  0086               	movwf	6
 18238  174D  3001               	movlw	1	; select bank2/3
 18239  174E  0087               	movwf	7
 18240  174F  1981               	btfsc	1,3
 18241  1750  2F69               	goto	l8132
 18242                           
 18243                           ;Buzzer_B1.c: 38: {
 18244                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 18245  1751  0878               	movf	_Buz,w
 18246  1752  0086               	movwf	6
 18247  1753  3001               	movlw	1	; select bank2/3
 18248  1754  0087               	movwf	7
 18249  1755  1581               	bsf	1,3
 18250                           
 18251                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 18252  1756  0829               	movf	setBuz@count,w
 18253  1757  00A8               	movwf	??_setBuz
 18254  1758  0878               	movf	_Buz,w
 18255  1759  3E04               	addlw	4
 18256  175A  0086               	movwf	6
 18257  175B  3001               	movlw	1	; select bank2/3
 18258  175C  0087               	movwf	7
 18259  175D  0828               	movf	??_setBuz,w
 18260  175E  0081               	movwf	1
 18261                           
 18262                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 18263  175F  0878               	movf	_Buz,w
 18264  1760  3E08               	addlw	8
 18265  1761  0086               	movwf	6
 18266  1762  3001               	movlw	1	; select bank2/3
 18267  1763  0087               	movwf	7
 18268  1764  0826               	movf	setBuz@time,w
 18269  1765  3FC0               	movwi [0]fsr1
 18270  1766  0827               	movf	setBuz@time+1,w
 18271  1767  3FC1               	movwi [1]fsr1
 18272                           
 18273                           ;Buzzer_B1.c: 42: }
 18274  1768  0008               	return
 18275  1769                     l8132:	
 18276                           
 18277                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 18278  1769  0878               	movf	_Buz,w
 18279  176A  0086               	movwf	6
 18280  176B  3001               	movlw	1	; select bank2/3
 18281  176C  0087               	movwf	7
 18282  176D  1A01               	btfsc	1,4
 18283  176E  0008               	return
 18284                           
 18285                           ;Buzzer_B1.c: 44: {
 18286                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 18287  176F  0878               	movf	_Buz,w
 18288  1770  0086               	movwf	6
 18289  1771  3001               	movlw	1	; select bank2/3
 18290  1772  0087               	movwf	7
 18291  1773  1601               	bsf	1,4
 18292                           
 18293                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 18294  1774  0829               	movf	setBuz@count,w
 18295  1775  00A8               	movwf	??_setBuz
 18296  1776  0878               	movf	_Buz,w
 18297  1777  3E05               	addlw	5
 18298  1778  0086               	movwf	6
 18299  1779  3001               	movlw	1	; select bank2/3
 18300  177A  0087               	movwf	7
 18301  177B  0828               	movf	??_setBuz,w
 18302  177C  0081               	movwf	1
 18303                           
 18304                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 18305  177D  0878               	movf	_Buz,w
 18306  177E  3E0A               	addlw	10
 18307  177F  0086               	movwf	6
 18308  1780  3001               	movlw	1	; select bank2/3
 18309  1781  0087               	movwf	7
 18310  1782  0826               	movf	setBuz@time,w
 18311  1783  3FC0               	movwi [0]fsr1
 18312  1784  0827               	movf	setBuz@time+1,w
 18313  1785  3FC1               	movwi [1]fsr1
 18314  1786  0008               	return
 18315  1787                     __end_of_setBuz:	
 18316                           
 18317                           	psect	text117
 18318  19F2                     __ptext117:	
 18319 ;; *************** function ___wmul *****************
 18320 ;; Defined at:
 18321 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18322 ;; Parameters:    Size  Location     Type
 18323 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18324 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18325 ;; Auto vars:     Size  Location     Type
 18326 ;;  product         2    4[BANK0 ] unsigned int 
 18327 ;; Return value:  Size  Location     Type
 18328 ;;                  2    0[BANK0 ] unsigned int 
 18329 ;; Registers used:
 18330 ;;		wreg, status,2, status,0
 18331 ;; Tracked objects:
 18332 ;;		On entry : 0/0
 18333 ;;		On exit  : 0/0
 18334 ;;		Unchanged: 0/0
 18335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18336 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18339 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18340 ;;Total ram usage:        6 bytes
 18341 ;; Hardware stack levels used:    1
 18342 ;; Hardware stack levels required when called:    4
 18343 ;; This function calls:
 18344 ;;		Nothing
 18345 ;; This function is called by:
 18346 ;;		_setBuz
 18347 ;;		_Load_Main
 18348 ;; This function uses a non-reentrant model
 18349 ;;
 18350                           
 18351                           
 18352                           ;psect for function ___wmul
 18353  19F2                     ___wmul:	
 18354                           
 18355                           ;incstack = 0
 18356                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18357  19F2  0020               	movlb	0	; select bank0
 18358  19F3  01A4               	clrf	___wmul@product
 18359  19F4  01A5               	clrf	___wmul@product+1
 18360  19F5                     l8108:	
 18361  19F5  1C20               	btfss	___wmul@multiplier,0
 18362  19F6  29FB               	goto	l3027
 18363  19F7  0822               	movf	___wmul@multiplicand,w
 18364  19F8  07A4               	addwf	___wmul@product,f
 18365  19F9  0823               	movf	___wmul@multiplicand+1,w
 18366  19FA  3DA5               	addwfc	___wmul@product+1,f
 18367  19FB                     l3027:	
 18368  19FB  3001               	movlw	1
 18369  19FC                     u7445:	
 18370  19FC  35A2               	lslf	___wmul@multiplicand,f
 18371  19FD  0DA3               	rlf	___wmul@multiplicand+1,f
 18372  19FE  0B89               	decfsz	9,f
 18373  19FF  29FC               	goto	u7445
 18374  1A00  3001               	movlw	1
 18375  1A01                     u7455:	
 18376  1A01  36A1               	lsrf	___wmul@multiplier+1,f
 18377  1A02  0CA0               	rrf	___wmul@multiplier,f
 18378  1A03  0B89               	decfsz	9,f
 18379  1A04  2A01               	goto	u7455
 18380  1A05  0821               	movf	___wmul@multiplier+1,w
 18381  1A06  0420               	iorwf	___wmul@multiplier,w
 18382  1A07  1D03               	skipz
 18383  1A08  29F5               	goto	l8108
 18384  1A09  0825               	movf	___wmul@product+1,w
 18385  1A0A  01A1               	clrf	?___wmul+1
 18386  1A0B  07A1               	addwf	?___wmul+1,f
 18387  1A0C  0824               	movf	___wmul@product,w
 18388  1A0D  01A0               	clrf	?___wmul
 18389  1A0E  07A0               	addwf	?___wmul,f
 18390  1A0F  0008               	return
 18391  1A10                     __end_of___wmul:	
 18392                           
 18393                           	psect	text118
 18394  263D                     __ptext118:	
 18395 ;; *************** function _DelayOff_Initialization *****************
 18396 ;; Defined at:
 18397 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\DelayOff_B1.c"
 18398 ;; Parameters:    Size  Location     Type
 18399 ;;		None
 18400 ;; Auto vars:     Size  Location     Type
 18401 ;;		None
 18402 ;; Return value:  Size  Location     Type
 18403 ;;		None               void
 18404 ;; Registers used:
 18405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18406 ;; Tracked objects:
 18407 ;;		On entry : 0/0
 18408 ;;		On exit  : 0/0
 18409 ;;		Unchanged: 0/0
 18410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18415 ;;Total ram usage:        0 bytes
 18416 ;; Hardware stack levels used:    1
 18417 ;; Hardware stack levels required when called:    6
 18418 ;; This function calls:
 18419 ;;		_DlyOff_Initialization
 18420 ;; This function is called by:
 18421 ;;		_main
 18422 ;; This function uses a non-reentrant model
 18423 ;;
 18424                           
 18425                           
 18426                           ;psect for function _DelayOff_Initialization
 18427  263D                     _DelayOff_Initialization:	
 18428                           
 18429                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18430                           
 18431                           ;incstack = 0
 18432                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18433  263D  3001               	movlw	1
 18434  263E  31A6  26C1         	fcall	_DlyOff_Initialization
 18435  2640  0008               	return
 18436  2641                     __end_of_DelayOff_Initialization:	
 18437                           
 18438                           	psect	text119
 18439  26C1                     __ptext119:	
 18440 ;; *************** function _DlyOff_Initialization *****************
 18441 ;; Defined at:
 18442 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\DelayOff_B1.c"
 18443 ;; Parameters:    Size  Location     Type
 18444 ;;  sw              1    wreg     unsigned char 
 18445 ;; Auto vars:     Size  Location     Type
 18446 ;;  sw              1    2[BANK0 ] unsigned char 
 18447 ;; Return value:  Size  Location     Type
 18448 ;;		None               void
 18449 ;; Registers used:
 18450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18451 ;; Tracked objects:
 18452 ;;		On entry : 0/0
 18453 ;;		On exit  : 0/0
 18454 ;;		Unchanged: 0/0
 18455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18459 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18460 ;;Total ram usage:        1 bytes
 18461 ;; Hardware stack levels used:    1
 18462 ;; Hardware stack levels required when called:    5
 18463 ;; This function calls:
 18464 ;;		_DelayOffPointSelect
 18465 ;; This function is called by:
 18466 ;;		_DelayOff_Initialization
 18467 ;; This function uses a non-reentrant model
 18468 ;;
 18469                           
 18470                           
 18471                           ;psect for function _DlyOff_Initialization
 18472  26C1                     _DlyOff_Initialization:	
 18473                           
 18474                           ;incstack = 0
 18475                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18476                           ;DlyOff_Initialization@sw stored from wreg
 18477  26C1  0020               	movlb	0	; select bank0
 18478  26C2  00A2               	movwf	DlyOff_Initialization@sw
 18479                           
 18480                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18481  26C3  0822               	movf	DlyOff_Initialization@sw,w
 18482  26C4  31A7  273D         	fcall	_DelayOffPointSelect
 18483                           
 18484                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18485  26C6  0021               	movlb	1	; select bank1
 18486  26C7  0838               	movf	_DelayOff^(0+128),w
 18487  26C8  0086               	movwf	6
 18488  26C9  0187               	clrf	7
 18489  26CA  1401               	bsf	1,0
 18490  26CB  0008               	return
 18491  26CC                     __end_of_DlyOff_Initialization:	
 18492                           
 18493                           	psect	text120
 18494  273D                     __ptext120:	
 18495 ;; *************** function _DelayOffPointSelect *****************
 18496 ;; Defined at:
 18497 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.1
      +.1.1\Release\DelayOff_B1.c"
 18498 ;; Parameters:    Size  Location     Type
 18499 ;;  sw              1    wreg     unsigned char 
 18500 ;; Auto vars:     Size  Location     Type
 18501 ;;  sw              1    1[BANK0 ] unsigned char 
 18502 ;; Return value:  Size  Location     Type
 18503 ;;		None               void
 18504 ;; Registers used:
 18505 ;;		wreg
 18506 ;; Tracked objects:
 18507 ;;		On entry : 0/0
 18508 ;;		On exit  : 0/0
 18509 ;;		Unchanged: 0/0
 18510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18515 ;;Total ram usage:        2 bytes
 18516 ;; Hardware stack levels used:    1
 18517 ;; Hardware stack levels required when called:    4
 18518 ;; This function calls:
 18519 ;;		Nothing
 18520 ;; This function is called by:
 18521 ;;		_DlyOff_Initialization
 18522 ;;		_DlyOff_Main
 18523 ;;		_setDelayOff_GO
 18524 ;; This function uses a non-reentrant model
 18525 ;;
 18526                           
 18527                           
 18528                           ;psect for function _DelayOffPointSelect
 18529  273D                     _DelayOffPointSelect:	
 18530                           
 18531                           ;incstack = 0
 18532                           ; Regs used in _DelayOffPointSelect: [wreg]
 18533                           ;DelayOffPointSelect@sw stored from wreg
 18534  273D  0020               	movlb	0	; select bank0
 18535  273E  00A1               	movwf	DelayOffPointSelect@sw
 18536                           
 18537                           ;DelayOff_B1.c: 11: if(sw == 1)
 18538  273F  0821               	movf	DelayOffPointSelect@sw,w
 18539  2740  3A01               	xorlw	1
 18540  2741  1D03               	skipz
 18541  2742  0008               	return
 18542                           
 18543                           ;DelayOff_B1.c: 12: {
 18544                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 18545  2743  30D3               	movlw	_DlySw1& (0+255)
 18546  2744  00A0               	movwf	??_DelayOffPointSelect
 18547  2745  0820               	movf	??_DelayOffPointSelect,w
 18548  2746  0021               	movlb	1	; select bank1
 18549  2747  00B8               	movwf	_DelayOff^(0+128)
 18550  2748  0008               	return
 18551  2749                     __end_of_DelayOffPointSelect:	
 18552                           
 18553                           	psect	text121
 18554  1919                     __ptext121:	
 18555 ;; *************** function _CC2500_PowerOnInitial *****************
 18556 ;; Defined at:
 18557 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\CC2500_B1.c"
 18558 ;; Parameters:    Size  Location     Type
 18559 ;;		None
 18560 ;; Auto vars:     Size  Location     Type
 18561 ;;		None
 18562 ;; Return value:  Size  Location     Type
 18563 ;;		None               void
 18564 ;; Registers used:
 18565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18566 ;; Tracked objects:
 18567 ;;		On entry : 0/0
 18568 ;;		On exit  : 0/0
 18569 ;;		Unchanged: 0/0
 18570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18575 ;;Total ram usage:        0 bytes
 18576 ;; Hardware stack levels used:    1
 18577 ;; Hardware stack levels required when called:    7
 18578 ;; This function calls:
 18579 ;;		_CC2500_ClearRXFIFO
 18580 ;;		_CC2500_ClearTXFIFO
 18581 ;;		_CC2500_FrequencyCabr
 18582 ;;		_CC2500_InitPATable
 18583 ;;		_CC2500_InitSetREG
 18584 ;;		_CC2500_PowerRST
 18585 ;;		_CC2500_SIDLEMode
 18586 ;; This function is called by:
 18587 ;;		_main
 18588 ;; This function uses a non-reentrant model
 18589 ;;
 18590                           
 18591                           
 18592                           ;psect for function _CC2500_PowerOnInitial
 18593  1919                     _CC2500_PowerOnInitial:	
 18594                           
 18595                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 18596                           
 18597                           ;incstack = 0
 18598                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18599  1919  319C  2449  3199   	fcall	_CC2500_PowerRST
 18600                           
 18601                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 18602  191C  319B  236F  3199   	fcall	_CC2500_InitSetREG
 18603                           
 18604                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 18605  191F  319A  2210  3199   	fcall	_CC2500_InitPATable
 18606                           
 18607                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 18608  1922  31A6  2635  3199   	fcall	_CC2500_ClearTXFIFO
 18609                           
 18610                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 18611  1925  31A6  2631  3199   	fcall	_CC2500_ClearRXFIFO
 18612                           
 18613                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 18614  1928  31A7  2731  3199   	fcall	_CC2500_FrequencyCabr
 18615                           
 18616                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 18617  192B  31A6  2639         	fcall	_CC2500_SIDLEMode
 18618  192D  0008               	return
 18619  192E                     __end_of_CC2500_PowerOnInitial:	
 18620                           
 18621                           	psect	text122
 18622  2639                     __ptext122:	
 18623 ;; *************** function _CC2500_SIDLEMode *****************
 18624 ;; Defined at:
 18625 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 18626 ;; Parameters:    Size  Location     Type
 18627 ;;		None
 18628 ;; Auto vars:     Size  Location     Type
 18629 ;;		None
 18630 ;; Return value:  Size  Location     Type
 18631 ;;		None               void
 18632 ;; Registers used:
 18633 ;;		wreg, status,2, status,0, pclath, cstack
 18634 ;; Tracked objects:
 18635 ;;		On entry : 0/0
 18636 ;;		On exit  : 0/0
 18637 ;;		Unchanged: 0/0
 18638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18643 ;;Total ram usage:        0 bytes
 18644 ;; Hardware stack levels used:    1
 18645 ;; Hardware stack levels required when called:    6
 18646 ;; This function calls:
 18647 ;;		_CC2500_WriteCommand
 18648 ;; This function is called by:
 18649 ;;		_CC2500_PowerOnInitial
 18650 ;; This function uses a non-reentrant model
 18651 ;;
 18652                           
 18653                           
 18654                           ;psect for function _CC2500_SIDLEMode
 18655  2639                     _CC2500_SIDLEMode:	
 18656                           
 18657                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 18658                           
 18659                           ;incstack = 0
 18660                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 18661  2639  3036               	movlw	54
 18662  263A  3198  2088         	fcall	_CC2500_WriteCommand
 18663  263C  0008               	return
 18664  263D                     __end_of_CC2500_SIDLEMode:	
 18665                           
 18666                           	psect	text123
 18667  1C49                     __ptext123:	
 18668 ;; *************** function _CC2500_PowerRST *****************
 18669 ;; Defined at:
 18670 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 18671 ;; Parameters:    Size  Location     Type
 18672 ;;		None
 18673 ;; Auto vars:     Size  Location     Type
 18674 ;;		None
 18675 ;; Return value:  Size  Location     Type
 18676 ;;		None               void
 18677 ;; Registers used:
 18678 ;;		wreg, status,2, status,0, pclath, cstack
 18679 ;; Tracked objects:
 18680 ;;		On entry : 0/0
 18681 ;;		On exit  : 0/0
 18682 ;;		Unchanged: 0/0
 18683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18687 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18688 ;;Total ram usage:        1 bytes
 18689 ;; Hardware stack levels used:    1
 18690 ;; Hardware stack levels required when called:    5
 18691 ;; This function calls:
 18692 ;;		_CC2500_WriteByte
 18693 ;;		_DelayTime_1us
 18694 ;; This function is called by:
 18695 ;;		_CC2500_PowerOnInitial
 18696 ;; This function uses a non-reentrant model
 18697 ;;
 18698                           
 18699                           
 18700                           ;psect for function _CC2500_PowerRST
 18701  1C49                     _CC2500_PowerRST:	
 18702                           
 18703                           ;CC2500_B1.c: 112: RC1=0;
 18704                           
 18705                           ;incstack = 0
 18706                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 18707  1C49  0020               	movlb	0	; select bank0
 18708  1C4A  108E               	bcf	14,1	;volatile
 18709                           
 18710                           ;CC2500_B1.c: 113: RC0=0;
 18711  1C4B  100E               	bcf	14,0	;volatile
 18712                           
 18713                           ;CC2500_B1.c: 114: RC4=1;
 18714  1C4C  160E               	bsf	14,4	;volatile
 18715                           
 18716                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 18717  1C4D  300A               	movlw	10
 18718  1C4E  00A0               	movwf	DelayTime_1us@count
 18719  1C4F  3000               	movlw	0
 18720  1C50  00A1               	movwf	DelayTime_1us@count+1
 18721  1C51  319A  22FC  319C   	fcall	_DelayTime_1us
 18722                           
 18723                           ;CC2500_B1.c: 116: RC4=0;
 18724  1C54  0020               	movlb	0	; select bank0
 18725  1C55  120E               	bcf	14,4	;volatile
 18726                           
 18727                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 18728  1C56  300A               	movlw	10
 18729  1C57  00A0               	movwf	DelayTime_1us@count
 18730  1C58  3000               	movlw	0
 18731  1C59  00A1               	movwf	DelayTime_1us@count+1
 18732  1C5A  319A  22FC  319C   	fcall	_DelayTime_1us
 18733                           
 18734                           ;CC2500_B1.c: 118: RC4=1;
 18735  1C5D  0020               	movlb	0	; select bank0
 18736  1C5E  160E               	bsf	14,4	;volatile
 18737                           
 18738                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 18739  1C5F  3028               	movlw	40
 18740  1C60  00A0               	movwf	DelayTime_1us@count
 18741  1C61  3000               	movlw	0
 18742  1C62  00A1               	movwf	DelayTime_1us@count+1
 18743  1C63  319A  22FC  319C   	fcall	_DelayTime_1us
 18744                           
 18745                           ;CC2500_B1.c: 120: RC4=0;
 18746  1C66  0020               	movlb	0	; select bank0
 18747  1C67  120E               	bcf	14,4	;volatile
 18748                           
 18749                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 18750  1C68  3030               	movlw	48
 18751  1C69  00A6               	movwf	??_CC2500_PowerRST
 18752  1C6A  0826               	movf	??_CC2500_PowerRST,w
 18753  1C6B  0021               	movlb	1	; select bank1
 18754  1C6C  00BF               	movwf	_SPI0Buffer^(0+128)
 18755  1C6D                     l320:	
 18756                           ;CC2500_B1.c: 122: while(RC2==1);
 18757                           
 18758  1C6D  0020               	movlb	0	; select bank0
 18759  1C6E  190E               	btfsc	14,2	;volatile
 18760  1C6F  2C6D               	goto	l320
 18761                           
 18762                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 18763  1C70  3199  2171  319C   	fcall	_CC2500_WriteByte
 18764  1C73                     l323:	
 18765                           ;CC2500_B1.c: 124: while(RC2==1);
 18766                           
 18767  1C73  0020               	movlb	0	; select bank0
 18768  1C74  190E               	btfsc	14,2	;volatile
 18769  1C75  2C73               	goto	l323
 18770                           
 18771                           ;CC2500_B1.c: 125: RC0=0;
 18772  1C76  100E               	bcf	14,0	;volatile
 18773                           
 18774                           ;CC2500_B1.c: 126: RC4=1;
 18775  1C77  160E               	bsf	14,4	;volatile
 18776  1C78  0008               	return
 18777  1C79                     __end_of_CC2500_PowerRST:	
 18778                           
 18779                           	psect	text124
 18780  1B6F                     __ptext124:	
 18781 ;; *************** function _CC2500_InitSetREG *****************
 18782 ;; Defined at:
 18783 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 18784 ;; Parameters:    Size  Location     Type
 18785 ;;		None
 18786 ;; Auto vars:     Size  Location     Type
 18787 ;;  loop_c          1    8[BANK0 ] unsigned char 
 18788 ;;  temp2           1    7[BANK0 ] unsigned char 
 18789 ;;  temp1           1    6[BANK0 ] unsigned char 
 18790 ;; Return value:  Size  Location     Type
 18791 ;;		None               void
 18792 ;; Registers used:
 18793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18794 ;; Tracked objects:
 18795 ;;		On entry : 0/0
 18796 ;;		On exit  : 0/0
 18797 ;;		Unchanged: 0/0
 18798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18800 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18802 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18803 ;;Total ram usage:        4 bytes
 18804 ;; Hardware stack levels used:    1
 18805 ;; Hardware stack levels required when called:    6
 18806 ;; This function calls:
 18807 ;;		_CC2500_WriteREG
 18808 ;; This function is called by:
 18809 ;;		_CC2500_PowerOnInitial
 18810 ;; This function uses a non-reentrant model
 18811 ;;
 18812                           
 18813                           
 18814                           ;psect for function _CC2500_InitSetREG
 18815  1B6F                     _CC2500_InitSetREG:	
 18816                           
 18817                           ;CC2500_B1.c: 133: unsigned char loop_c;
 18818                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 18819                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 18820                           
 18821                           ;incstack = 0
 18822                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18823  1B6F  0020               	movlb	0	; select bank0
 18824  1B70  01A8               	clrf	CC2500_InitSetREG@loop_c
 18825  1B71                     L12:	
 18826  1B71  302F               	movlw	47
 18827  1B72  0228               	subwf	CC2500_InitSetREG@loop_c,w
 18828  1B73  1803               	btfsc	3,0
 18829  1B74  0008               	return
 18830                           
 18831                           ;CC2500_B1.c: 137: {
 18832                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 18833  1B75  0828               	movf	CC2500_InitSetREG@loop_c,w
 18834  1B76  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 18835  1B77  0084               	movwf	4
 18836  1B78  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 18837  1B79  1803               	skipnc
 18838  1B7A  3E01               	addlw	1
 18839  1B7B  0085               	movwf	5
 18840  1B7C  0800               	movf	0,w	;code access
 18841  1B7D  00A5               	movwf	??_CC2500_InitSetREG
 18842  1B7E  0825               	movf	??_CC2500_InitSetREG,w
 18843  1B7F  00A6               	movwf	CC2500_InitSetREG@temp1
 18844                           
 18845                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 18846  1B80  0828               	movf	CC2500_InitSetREG@loop_c,w
 18847  1B81  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 18848  1B82  0084               	movwf	4
 18849  1B83  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 18850  1B84  1803               	skipnc
 18851  1B85  3E01               	addlw	1
 18852  1B86  0085               	movwf	5
 18853  1B87  0800               	movf	0,w	;code access
 18854  1B88  00A5               	movwf	??_CC2500_InitSetREG
 18855  1B89  0825               	movf	??_CC2500_InitSetREG,w
 18856  1B8A  00A7               	movwf	CC2500_InitSetREG@temp2
 18857                           
 18858                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 18859  1B8B  0827               	movf	CC2500_InitSetREG@temp2,w
 18860  1B8C  00A5               	movwf	??_CC2500_InitSetREG
 18861  1B8D  0825               	movf	??_CC2500_InitSetREG,w
 18862  1B8E  00A2               	movwf	CC2500_WriteREG@value
 18863  1B8F  0826               	movf	CC2500_InitSetREG@temp1,w
 18864  1B90  3199  218A  319B   	fcall	_CC2500_WriteREG
 18865  1B93  3001               	movlw	1
 18866  1B94  0020               	movlb	0	; select bank0
 18867  1B95  00A5               	movwf	??_CC2500_InitSetREG
 18868  1B96  0825               	movf	??_CC2500_InitSetREG,w
 18869  1B97  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 18870  1B98  2B71               	goto	L12
 18871  1B99                     __end_of_CC2500_InitSetREG:	
 18872                           
 18873                           	psect	text125
 18874  1A10                     __ptext125:	
 18875 ;; *************** function _CC2500_InitPATable *****************
 18876 ;; Defined at:
 18877 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 18878 ;; Parameters:    Size  Location     Type
 18879 ;;		None
 18880 ;; Auto vars:     Size  Location     Type
 18881 ;;  loop_d          1    7[BANK0 ] unsigned char 
 18882 ;;  temp            1    6[BANK0 ] unsigned char 
 18883 ;; Return value:  Size  Location     Type
 18884 ;;		None               void
 18885 ;; Registers used:
 18886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18887 ;; Tracked objects:
 18888 ;;		On entry : 0/0
 18889 ;;		On exit  : 0/0
 18890 ;;		Unchanged: 0/0
 18891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18893 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18895 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18896 ;;Total ram usage:        3 bytes
 18897 ;; Hardware stack levels used:    1
 18898 ;; Hardware stack levels required when called:    6
 18899 ;; This function calls:
 18900 ;;		_CC2500_WriteREG
 18901 ;; This function is called by:
 18902 ;;		_CC2500_PowerOnInitial
 18903 ;; This function uses a non-reentrant model
 18904 ;;
 18905                           
 18906                           
 18907                           ;psect for function _CC2500_InitPATable
 18908  1A10                     _CC2500_InitPATable:	
 18909                           
 18910                           ;CC2500_B1.c: 149: unsigned char loop_d;
 18911                           ;CC2500_B1.c: 150: unsigned char temp;
 18912                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 18913                           
 18914                           ;incstack = 0
 18915                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18916  1A10  0020               	movlb	0	; select bank0
 18917  1A11  01A7               	clrf	CC2500_InitPATable@loop_d
 18918  1A12                     L13:	
 18919  1A12  3008               	movlw	8
 18920  1A13  0227               	subwf	CC2500_InitPATable@loop_d,w
 18921  1A14  1803               	btfsc	3,0
 18922  1A15  0008               	return
 18923                           
 18924                           ;CC2500_B1.c: 153: {
 18925                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 18926  1A16  0827               	movf	CC2500_InitPATable@loop_d,w
 18927  1A17  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 18928  1A18  0084               	movwf	4
 18929  1A19  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 18930  1A1A  1803               	skipnc
 18931  1A1B  3E01               	addlw	1
 18932  1A1C  0085               	movwf	5
 18933  1A1D  0800               	movf	0,w	;code access
 18934  1A1E  00A5               	movwf	??_CC2500_InitPATable
 18935  1A1F  0825               	movf	??_CC2500_InitPATable,w
 18936  1A20  00A6               	movwf	CC2500_InitPATable@temp
 18937                           
 18938                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 18939  1A21  0826               	movf	CC2500_InitPATable@temp,w
 18940  1A22  00A5               	movwf	??_CC2500_InitPATable
 18941  1A23  0825               	movf	??_CC2500_InitPATable,w
 18942  1A24  00A2               	movwf	CC2500_WriteREG@value
 18943  1A25  303E               	movlw	62
 18944  1A26  3199  218A  319A   	fcall	_CC2500_WriteREG
 18945  1A29  3001               	movlw	1
 18946  1A2A  0020               	movlb	0	; select bank0
 18947  1A2B  00A5               	movwf	??_CC2500_InitPATable
 18948  1A2C  0825               	movf	??_CC2500_InitPATable,w
 18949  1A2D  07A7               	addwf	CC2500_InitPATable@loop_d,f
 18950  1A2E  2A12               	goto	L13
 18951  1A2F                     __end_of_CC2500_InitPATable:	
 18952                           
 18953                           	psect	text126
 18954  198A                     __ptext126:	
 18955 ;; *************** function _CC2500_WriteREG *****************
 18956 ;; Defined at:
 18957 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 18958 ;; Parameters:    Size  Location     Type
 18959 ;;  w_addr          1    wreg     unsigned char 
 18960 ;;  value           1    2[BANK0 ] unsigned char 
 18961 ;; Auto vars:     Size  Location     Type
 18962 ;;  w_addr          1    4[BANK0 ] unsigned char 
 18963 ;; Return value:  Size  Location     Type
 18964 ;;		None               void
 18965 ;; Registers used:
 18966 ;;		wreg, status,2, status,0, pclath, cstack
 18967 ;; Tracked objects:
 18968 ;;		On entry : 0/0
 18969 ;;		On exit  : 0/0
 18970 ;;		Unchanged: 0/0
 18971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18972 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18975 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18976 ;;Total ram usage:        3 bytes
 18977 ;; Hardware stack levels used:    1
 18978 ;; Hardware stack levels required when called:    5
 18979 ;; This function calls:
 18980 ;;		_CC2500_WriteByte
 18981 ;; This function is called by:
 18982 ;;		_CC2500_InitSetREG
 18983 ;;		_CC2500_InitPATable
 18984 ;; This function uses a non-reentrant model
 18985 ;;
 18986                           
 18987                           
 18988                           ;psect for function _CC2500_WriteREG
 18989  198A                     _CC2500_WriteREG:	
 18990                           
 18991                           ;incstack = 0
 18992                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 18993                           ;CC2500_WriteREG@w_addr stored from wreg
 18994  198A  0020               	movlb	0	; select bank0
 18995  198B  00A4               	movwf	CC2500_WriteREG@w_addr
 18996                           
 18997                           ;CC2500_B1.c: 229: RC4=0;
 18998  198C  120E               	bcf	14,4	;volatile
 18999                           
 19000                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 19001  198D  0824               	movf	CC2500_WriteREG@w_addr,w
 19002  198E  00A3               	movwf	??_CC2500_WriteREG
 19003  198F  0823               	movf	??_CC2500_WriteREG,w
 19004  1990  0021               	movlb	1	; select bank1
 19005  1991  00BF               	movwf	_SPI0Buffer^(0+128)
 19006  1992                     l365:	
 19007                           ;CC2500_B1.c: 231: while(RC2==1);
 19008                           
 19009  1992  0020               	movlb	0	; select bank0
 19010  1993  190E               	btfsc	14,2	;volatile
 19011  1994  2992               	goto	l365
 19012                           
 19013                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 19014  1995  3199  2171  3199   	fcall	_CC2500_WriteByte
 19015                           
 19016                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 19017  1998  0020               	movlb	0	; select bank0
 19018  1999  0822               	movf	CC2500_WriteREG@value,w
 19019  199A  00A3               	movwf	??_CC2500_WriteREG
 19020  199B  0823               	movf	??_CC2500_WriteREG,w
 19021  199C  0021               	movlb	1	; select bank1
 19022  199D  00BF               	movwf	_SPI0Buffer^(0+128)
 19023                           
 19024                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 19025  199E  3199  2171         	fcall	_CC2500_WriteByte
 19026                           
 19027                           ;CC2500_B1.c: 235: RC4=1;
 19028  19A0  0020               	movlb	0	; select bank0
 19029  19A1  160E               	bsf	14,4	;volatile
 19030  19A2  0008               	return
 19031  19A3                     __end_of_CC2500_WriteREG:	
 19032                           
 19033                           	psect	text127
 19034  2731                     __ptext127:	
 19035 ;; *************** function _CC2500_FrequencyCabr *****************
 19036 ;; Defined at:
 19037 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 19038 ;; Parameters:    Size  Location     Type
 19039 ;;		None
 19040 ;; Auto vars:     Size  Location     Type
 19041 ;;		None
 19042 ;; Return value:  Size  Location     Type
 19043 ;;		None               void
 19044 ;; Registers used:
 19045 ;;		wreg, status,2, status,0, pclath, cstack
 19046 ;; Tracked objects:
 19047 ;;		On entry : 0/0
 19048 ;;		On exit  : 0/0
 19049 ;;		Unchanged: 0/0
 19050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19055 ;;Total ram usage:        0 bytes
 19056 ;; Hardware stack levels used:    1
 19057 ;; Hardware stack levels required when called:    6
 19058 ;; This function calls:
 19059 ;;		_CC2500_WriteCommand
 19060 ;;		_DelayTime_1us
 19061 ;; This function is called by:
 19062 ;;		_CC2500_PowerOnInitial
 19063 ;; This function uses a non-reentrant model
 19064 ;;
 19065                           
 19066                           
 19067                           ;psect for function _CC2500_FrequencyCabr
 19068  2731                     _CC2500_FrequencyCabr:	
 19069                           
 19070                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 19071                           
 19072                           ;incstack = 0
 19073                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19074  2731  3033               	movlw	51
 19075  2732  3198  2088  31A7   	fcall	_CC2500_WriteCommand
 19076                           
 19077                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 19078  2735  30E8               	movlw	232
 19079  2736  0020               	movlb	0	; select bank0
 19080  2737  00A0               	movwf	DelayTime_1us@count
 19081  2738  3003               	movlw	3
 19082  2739  00A1               	movwf	DelayTime_1us@count+1
 19083  273A  319A  22FC         	fcall	_DelayTime_1us
 19084  273C  0008               	return
 19085  273D                     __end_of_CC2500_FrequencyCabr:	
 19086                           
 19087                           	psect	text128
 19088  1AFC                     __ptext128:	
 19089 ;; *************** function _DelayTime_1us *****************
 19090 ;; Defined at:
 19091 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 19092 ;; Parameters:    Size  Location     Type
 19093 ;;  count           2    0[BANK0 ] int 
 19094 ;; Auto vars:     Size  Location     Type
 19095 ;;  j               2    4[BANK0 ] unsigned int 
 19096 ;;  i               2    2[BANK0 ] unsigned int 
 19097 ;; Return value:  Size  Location     Type
 19098 ;;		None               void
 19099 ;; Registers used:
 19100 ;;		wreg, status,2
 19101 ;; Tracked objects:
 19102 ;;		On entry : 0/0
 19103 ;;		On exit  : 0/0
 19104 ;;		Unchanged: 0/0
 19105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19107 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19109 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19110 ;;Total ram usage:        6 bytes
 19111 ;; Hardware stack levels used:    1
 19112 ;; Hardware stack levels required when called:    4
 19113 ;; This function calls:
 19114 ;;		Nothing
 19115 ;; This function is called by:
 19116 ;;		_CC2500_PowerRST
 19117 ;;		_CC2500_FrequencyCabr
 19118 ;; This function uses a non-reentrant model
 19119 ;;
 19120                           
 19121                           
 19122                           ;psect for function _DelayTime_1us
 19123  1AFC                     _DelayTime_1us:	
 19124                           
 19125                           ;CC2500_B1.c: 285: unsigned int i,j;
 19126                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 19127                           
 19128                           ;incstack = 0
 19129                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19130  1AFC  3001               	movlw	1
 19131  1AFD  0020               	movlb	0	; select bank0
 19132  1AFE  00A2               	movwf	DelayTime_1us@i
 19133  1AFF  3000               	movlw	0
 19134  1B00  00A3               	movwf	DelayTime_1us@i+1
 19135  1B01                     l389:	
 19136  1B01  0821               	movf	DelayTime_1us@count+1,w
 19137  1B02  0223               	subwf	DelayTime_1us@i+1,w
 19138  1B03  1D03               	skipz
 19139  1B04  2B07               	goto	u7985
 19140  1B05  0820               	movf	DelayTime_1us@count,w
 19141  1B06  0222               	subwf	DelayTime_1us@i,w
 19142  1B07                     u7985:	
 19143  1B07  1803               	btfsc	3,0
 19144  1B08  0008               	return
 19145                           
 19146                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 19147  1B09  01A4               	clrf	DelayTime_1us@j
 19148  1B0A  01A5               	clrf	DelayTime_1us@j+1
 19149  1B0B  3000               	movlw	0
 19150  1B0C  0225               	subwf	DelayTime_1us@j+1,w
 19151  1B0D  3002               	movlw	2
 19152  1B0E  1903               	skipnz
 19153  1B0F  0224               	subwf	DelayTime_1us@j,w
 19154  1B10  1803               	btfsc	3,0
 19155  1B11  2B1D               	goto	l8508
 19156  1B12                     l8506:	
 19157  1B12  3001               	movlw	1
 19158  1B13  07A4               	addwf	DelayTime_1us@j,f
 19159  1B14  3000               	movlw	0
 19160  1B15  3DA5               	addwfc	DelayTime_1us@j+1,f
 19161  1B16  3000               	movlw	0
 19162  1B17  0225               	subwf	DelayTime_1us@j+1,w
 19163  1B18  3002               	movlw	2
 19164  1B19  1903               	skipnz
 19165  1B1A  0224               	subwf	DelayTime_1us@j,w
 19166  1B1B  1C03               	skipc
 19167  1B1C  2B12               	goto	l8506
 19168  1B1D                     l8508:	
 19169  1B1D  3001               	movlw	1
 19170  1B1E  07A2               	addwf	DelayTime_1us@i,f
 19171  1B1F  3000               	movlw	0
 19172  1B20  3DA3               	addwfc	DelayTime_1us@i+1,f
 19173  1B21  2B01               	goto	l389
 19174  1B22                     __end_of_DelayTime_1us:	
 19175                           
 19176                           	psect	text129
 19177  2635                     __ptext129:	
 19178 ;; *************** function _CC2500_ClearTXFIFO *****************
 19179 ;; Defined at:
 19180 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 19181 ;; Parameters:    Size  Location     Type
 19182 ;;		None
 19183 ;; Auto vars:     Size  Location     Type
 19184 ;;		None
 19185 ;; Return value:  Size  Location     Type
 19186 ;;		None               void
 19187 ;; Registers used:
 19188 ;;		wreg, status,2, status,0, pclath, cstack
 19189 ;; Tracked objects:
 19190 ;;		On entry : 0/0
 19191 ;;		On exit  : 0/0
 19192 ;;		Unchanged: 0/0
 19193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19198 ;;Total ram usage:        0 bytes
 19199 ;; Hardware stack levels used:    1
 19200 ;; Hardware stack levels required when called:    6
 19201 ;; This function calls:
 19202 ;;		_CC2500_WriteCommand
 19203 ;; This function is called by:
 19204 ;;		_CC2500_PowerOnInitial
 19205 ;; This function uses a non-reentrant model
 19206 ;;
 19207                           
 19208                           
 19209                           ;psect for function _CC2500_ClearTXFIFO
 19210  2635                     _CC2500_ClearTXFIFO:	
 19211                           
 19212                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 19213                           
 19214                           ;incstack = 0
 19215                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19216  2635  303B               	movlw	59
 19217  2636  3198  2088         	fcall	_CC2500_WriteCommand
 19218  2638  0008               	return
 19219  2639                     __end_of_CC2500_ClearTXFIFO:	
 19220                           
 19221                           	psect	text130
 19222  2631                     __ptext130:	
 19223 ;; *************** function _CC2500_ClearRXFIFO *****************
 19224 ;; Defined at:
 19225 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 19226 ;; Parameters:    Size  Location     Type
 19227 ;;		None
 19228 ;; Auto vars:     Size  Location     Type
 19229 ;;		None
 19230 ;; Return value:  Size  Location     Type
 19231 ;;		None               void
 19232 ;; Registers used:
 19233 ;;		wreg, status,2, status,0, pclath, cstack
 19234 ;; Tracked objects:
 19235 ;;		On entry : 0/0
 19236 ;;		On exit  : 0/0
 19237 ;;		Unchanged: 0/0
 19238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19243 ;;Total ram usage:        0 bytes
 19244 ;; Hardware stack levels used:    1
 19245 ;; Hardware stack levels required when called:    6
 19246 ;; This function calls:
 19247 ;;		_CC2500_WriteCommand
 19248 ;; This function is called by:
 19249 ;;		_CC2500_PowerOnInitial
 19250 ;; This function uses a non-reentrant model
 19251 ;;
 19252                           
 19253                           
 19254                           ;psect for function _CC2500_ClearRXFIFO
 19255  2631                     _CC2500_ClearRXFIFO:	
 19256                           
 19257                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 19258                           
 19259                           ;incstack = 0
 19260                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19261  2631  303A               	movlw	58
 19262  2632  3198  2088         	fcall	_CC2500_WriteCommand
 19263  2634  0008               	return
 19264  2635                     __end_of_CC2500_ClearRXFIFO:	
 19265                           
 19266                           	psect	text131
 19267  1888                     __ptext131:	
 19268 ;; *************** function _CC2500_WriteCommand *****************
 19269 ;; Defined at:
 19270 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 19271 ;; Parameters:    Size  Location     Type
 19272 ;;  command         1    wreg     unsigned char 
 19273 ;; Auto vars:     Size  Location     Type
 19274 ;;  command         1    3[BANK0 ] unsigned char 
 19275 ;; Return value:  Size  Location     Type
 19276 ;;		None               void
 19277 ;; Registers used:
 19278 ;;		wreg, status,2, status,0, pclath, cstack
 19279 ;; Tracked objects:
 19280 ;;		On entry : 0/0
 19281 ;;		On exit  : 0/0
 19282 ;;		Unchanged: 0/0
 19283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19288 ;;Total ram usage:        2 bytes
 19289 ;; Hardware stack levels used:    1
 19290 ;; Hardware stack levels required when called:    5
 19291 ;; This function calls:
 19292 ;;		_CC2500_WriteByte
 19293 ;; This function is called by:
 19294 ;;		_CC2500_TxData
 19295 ;;		_CC2500_RxData
 19296 ;;		_CC2500_ClearTXFIFO
 19297 ;;		_CC2500_ClearRXFIFO
 19298 ;;		_CC2500_FrequencyCabr
 19299 ;;		_CC2500_SIDLEMode
 19300 ;;		_setRF_Main
 19301 ;;		_RF_RxDisable
 19302 ;; This function uses a non-reentrant model
 19303 ;;
 19304                           
 19305                           
 19306                           ;psect for function _CC2500_WriteCommand
 19307  1888                     _CC2500_WriteCommand:	
 19308                           
 19309                           ;incstack = 0
 19310                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19311                           ;CC2500_WriteCommand@command stored from wreg
 19312  1888  0020               	movlb	0	; select bank0
 19313  1889  00A3               	movwf	CC2500_WriteCommand@command
 19314                           
 19315                           ;CC2500_B1.c: 255: RC4=0;
 19316  188A  120E               	bcf	14,4	;volatile
 19317                           
 19318                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 19319  188B  0823               	movf	CC2500_WriteCommand@command,w
 19320  188C  00A2               	movwf	??_CC2500_WriteCommand
 19321  188D  0822               	movf	??_CC2500_WriteCommand,w
 19322  188E  0021               	movlb	1	; select bank1
 19323  188F  00BF               	movwf	_SPI0Buffer^(0+128)
 19324  1890                     l377:	
 19325                           ;CC2500_B1.c: 258: while(RC2==1);
 19326                           
 19327  1890  0020               	movlb	0	; select bank0
 19328  1891  190E               	btfsc	14,2	;volatile
 19329  1892  2890               	goto	l377
 19330                           
 19331                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 19332  1893  3199  2171         	fcall	_CC2500_WriteByte
 19333                           
 19334                           ;CC2500_B1.c: 261: RC4=1;
 19335  1895  0020               	movlb	0	; select bank0
 19336  1896  160E               	bsf	14,4	;volatile
 19337  1897  0008               	return
 19338  1898                     __end_of_CC2500_WriteCommand:	
 19339                           
 19340                           	psect	text132
 19341  1971                     __ptext132:	
 19342 ;; *************** function _CC2500_WriteByte *****************
 19343 ;; Defined at:
 19344 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\CC2500_B1.c"
 19345 ;; Parameters:    Size  Location     Type
 19346 ;;		None
 19347 ;; Auto vars:     Size  Location     Type
 19348 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19349 ;; Return value:  Size  Location     Type
 19350 ;;		None               void
 19351 ;; Registers used:
 19352 ;;		wreg, status,2, status,0
 19353 ;; Tracked objects:
 19354 ;;		On entry : 0/0
 19355 ;;		On exit  : 0/0
 19356 ;;		Unchanged: 0/0
 19357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19362 ;;Total ram usage:        2 bytes
 19363 ;; Hardware stack levels used:    1
 19364 ;; Hardware stack levels required when called:    4
 19365 ;; This function calls:
 19366 ;;		Nothing
 19367 ;; This function is called by:
 19368 ;;		_CC2500_TxData
 19369 ;;		_CC2500_RxData
 19370 ;;		_CC2500_PowerRST
 19371 ;;		_CC2500_WriteREG
 19372 ;;		_CC2500_WriteCommand
 19373 ;;		_CC2500_ReadStatus
 19374 ;;		_CC2500_ReadREG
 19375 ;; This function uses a non-reentrant model
 19376 ;;
 19377                           
 19378                           
 19379                           ;psect for function _CC2500_WriteByte
 19380  1971                     _CC2500_WriteByte:	
 19381                           
 19382                           ;CC2500_B1.c: 195: unsigned char loop_a;
 19383                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 19384                           
 19385                           ;incstack = 0
 19386                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19387  1971  0020               	movlb	0	; select bank0
 19388  1972  01A1               	clrf	CC2500_WriteByte@loop_a
 19389  1973                     L14:	
 19390  1973  3008               	movlw	8
 19391  1974  0221               	subwf	CC2500_WriteByte@loop_a,w
 19392  1975  1803               	btfsc	3,0
 19393  1976  0008               	return
 19394                           
 19395                           ;CC2500_B1.c: 197: {
 19396                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 19397  1977  0021               	movlb	1	; select bank1
 19398  1978  1FBF               	btfss	_SPI0Buffer^(0+128),7
 19399  1979  297D               	goto	l353
 19400                           
 19401                           ;CC2500_B1.c: 199: RC0=1;
 19402  197A  0020               	movlb	0	; select bank0
 19403  197B  140E               	bsf	14,0	;volatile
 19404  197C  297F               	goto	l354
 19405  197D                     l353:	
 19406                           
 19407                           ;CC2500_B1.c: 200: else
 19408                           ;CC2500_B1.c: 201: RC0=0;
 19409  197D  0020               	movlb	0	; select bank0
 19410  197E  100E               	bcf	14,0	;volatile
 19411  197F                     l354:	
 19412                           
 19413                           ;CC2500_B1.c: 202: RC1=1;
 19414  197F  148E               	bsf	14,1	;volatile
 19415                           
 19416                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 19417  1980  1003               	clrc
 19418  1981  0021               	movlb	1	; select bank1
 19419  1982  0DBF               	rlf	_SPI0Buffer^(0+128),f
 19420                           
 19421                           ;CC2500_B1.c: 204: RC1=0;
 19422  1983  0020               	movlb	0	; select bank0
 19423  1984  108E               	bcf	14,1	;volatile
 19424  1985  3001               	movlw	1
 19425  1986  00A0               	movwf	??_CC2500_WriteByte
 19426  1987  0820               	movf	??_CC2500_WriteByte,w
 19427  1988  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19428  1989  2973               	goto	L14
 19429  198A                     __end_of_CC2500_WriteByte:	
 19430                           
 19431                           	psect	text133
 19432  0B1C                     __ptext133:	
 19433 ;; *************** function _Buzzer_Main *****************
 19434 ;; Defined at:
 19435 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Buzzer_B1.c"
 19436 ;; Parameters:    Size  Location     Type
 19437 ;;		None
 19438 ;; Auto vars:     Size  Location     Type
 19439 ;;		None
 19440 ;; Return value:  Size  Location     Type
 19441 ;;		None               void
 19442 ;; Registers used:
 19443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19444 ;; Tracked objects:
 19445 ;;		On entry : 0/0
 19446 ;;		On exit  : 0/0
 19447 ;;		Unchanged: 0/0
 19448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19451 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19452 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19453 ;;Total ram usage:        4 bytes
 19454 ;; Hardware stack levels used:    1
 19455 ;; Hardware stack levels required when called:    4
 19456 ;; This function calls:
 19457 ;;		Nothing
 19458 ;; This function is called by:
 19459 ;;		_main
 19460 ;; This function uses a non-reentrant model
 19461 ;;
 19462                           
 19463                           
 19464                           ;psect for function _Buzzer_Main
 19465  0B1C                     _Buzzer_Main:	
 19466                           
 19467                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 19468                           
 19469                           ;incstack = 0
 19470                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19471  0B1C  0878               	movf	_Buz,w
 19472  0B1D  0086               	movwf	6
 19473  0B1E  3001               	movlw	1	; select bank2/3
 19474  0B1F  0087               	movwf	7
 19475  0B20  1281               	bcf	1,5
 19476  0B21  0020               	movlb	0	; select bank0
 19477  0B22  198D               	btfsc	13,3	;volatile
 19478  0B23  1681               	bsf	1,5
 19479                           
 19480                           ;Buzzer_B1.c: 57: if(Buz->GO)
 19481  0B24  0878               	movf	_Buz,w
 19482  0B25  0086               	movwf	6
 19483  0B26  3001               	movlw	1	; select bank2/3
 19484  0B27  0087               	movwf	7
 19485  0B28  1C81               	btfss	1,1
 19486  0B29  0008               	return
 19487                           
 19488                           ;Buzzer_B1.c: 58: {
 19489                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 19490  0B2A  0878               	movf	_Buz,w
 19491  0B2B  3E06               	addlw	6
 19492  0B2C  0086               	movwf	6
 19493  0B2D  3001               	movlw	1	; select bank2/3
 19494  0B2E  0087               	movwf	7
 19495  0B2F  3F40               	moviw [0]fsr1
 19496  0B30  0020               	movlb	0	; select bank0
 19497  0B31  00A0               	movwf	??_Buzzer_Main
 19498  0B32  3F41               	moviw [1]fsr1
 19499  0B33  00A1               	movwf	??_Buzzer_Main+1
 19500  0B34  0A78               	incf	_Buz,w
 19501  0B35  0086               	movwf	6
 19502  0B36  3001               	movlw	1	; select bank2/3
 19503  0B37  0087               	movwf	7
 19504  0B38  3F40               	moviw [0]fsr1
 19505  0B39  00A2               	movwf	??_Buzzer_Main+2
 19506  0B3A  3F41               	moviw [1]fsr1
 19507  0B3B  00A3               	movwf	??_Buzzer_Main+3
 19508  0B3C  0821               	movf	??_Buzzer_Main+1,w
 19509  0B3D  0223               	subwf	??_Buzzer_Main+3,w
 19510  0B3E  1D03               	skipz
 19511  0B3F  2B42               	goto	u6545
 19512  0B40  0820               	movf	??_Buzzer_Main,w
 19513  0B41  0222               	subwf	??_Buzzer_Main+2,w
 19514  0B42                     u6545:	
 19515  0B42  1C03               	skipc
 19516  0B43  0008               	return
 19517                           
 19518                           ;Buzzer_B1.c: 61: {
 19519                           ;Buzzer_B1.c: 62: Buz->Time=0;
 19520  0B44  0A78               	incf	_Buz,w
 19521  0B45  0086               	movwf	6
 19522  0B46  3001               	movlw	1	; select bank2/3
 19523  0B47  0087               	movwf	7
 19524  0B48  3000               	movlw	0
 19525  0B49  3FC0               	movwi [0]fsr1
 19526  0B4A  3FC1               	movwi [1]fsr1
 19527                           
 19528                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 19529  0B4B  0878               	movf	_Buz,w
 19530  0B4C  0086               	movwf	6
 19531  0B4D  3001               	movlw	1	; select bank2/3
 19532  0B4E  0087               	movwf	7
 19533  0B4F  1A81               	btfsc	1,5
 19534  0B50  2BB6               	goto	l7528
 19535                           
 19536                           ;Buzzer_B1.c: 64: {
 19537                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 19538  0B51  0878               	movf	_Buz,w
 19539  0B52  3E03               	addlw	3
 19540  0B53  0086               	movwf	6
 19541  0B54  3001               	movlw	1	; select bank2/3
 19542  0B55  0087               	movwf	7
 19543  0B56  0881               	movf	1,f
 19544  0B57  1D03               	skipz
 19545  0B58  2BAF               	goto	l7524
 19546                           
 19547                           ;Buzzer_B1.c: 66: {
 19548                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 19549  0B59  0878               	movf	_Buz,w
 19550  0B5A  0086               	movwf	6
 19551  0B5B  3001               	movlw	1	; select bank2/3
 19552  0B5C  0087               	movwf	7
 19553  0B5D  1D81               	btfss	1,3
 19554  0B5E  2B81               	goto	l7516
 19555                           
 19556                           ;Buzzer_B1.c: 68: {
 19557                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 19558  0B5F  0878               	movf	_Buz,w
 19559  0B60  0086               	movwf	6
 19560  0B61  3001               	movlw	1	; select bank2/3
 19561  0B62  0087               	movwf	7
 19562  0B63  1181               	bcf	1,3
 19563                           
 19564                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 19565  0B64  0878               	movf	_Buz,w
 19566  0B65  3E04               	addlw	4
 19567  0B66  0086               	movwf	6
 19568  0B67  3001               	movlw	1	; select bank2/3
 19569  0B68  0087               	movwf	7
 19570  0B69  0801               	movf	1,w
 19571  0B6A  00A0               	movwf	??_Buzzer_Main
 19572  0B6B  0878               	movf	_Buz,w
 19573  0B6C  3E03               	addlw	3
 19574  0B6D  0086               	movwf	6
 19575  0B6E  3001               	movlw	1	; select bank2/3
 19576  0B6F  0087               	movwf	7
 19577  0B70  0820               	movf	??_Buzzer_Main,w
 19578  0B71  0081               	movwf	1
 19579                           
 19580                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 19581  0B72  0878               	movf	_Buz,w
 19582  0B73  3E08               	addlw	8
 19583  0B74  0086               	movwf	6
 19584  0B75  3001               	movlw	1	; select bank2/3
 19585  0B76  0087               	movwf	7
 19586  0B77  0878               	movf	_Buz,w
 19587  0B78  3E06               	addlw	6
 19588  0B79  0084               	movwf	4
 19589  0B7A  3001               	movlw	1	; select bank2/3
 19590  0B7B  0085               	movwf	5
 19591  0B7C  3F40               	moviw [0]fsr1
 19592  0B7D  3F80               	movwi [0]fsr0
 19593  0B7E  3F41               	moviw [1]fsr1
 19594  0B7F  3F81               	movwi [1]fsr0
 19595                           
 19596                           ;Buzzer_B1.c: 72: }
 19597  0B80  0008               	return
 19598  0B81                     l7516:	
 19599                           
 19600                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 19601  0B81  0878               	movf	_Buz,w
 19602  0B82  0086               	movwf	6
 19603  0B83  3001               	movlw	1	; select bank2/3
 19604  0B84  0087               	movwf	7
 19605  0B85  1E01               	btfss	1,4
 19606  0B86  2BA9               	goto	l7522
 19607                           
 19608                           ;Buzzer_B1.c: 74: {
 19609                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 19610  0B87  0878               	movf	_Buz,w
 19611  0B88  0086               	movwf	6
 19612  0B89  3001               	movlw	1	; select bank2/3
 19613  0B8A  0087               	movwf	7
 19614  0B8B  1201               	bcf	1,4
 19615                           
 19616                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 19617  0B8C  0878               	movf	_Buz,w
 19618  0B8D  3E05               	addlw	5
 19619  0B8E  0086               	movwf	6
 19620  0B8F  3001               	movlw	1	; select bank2/3
 19621  0B90  0087               	movwf	7
 19622  0B91  0801               	movf	1,w
 19623  0B92  00A0               	movwf	??_Buzzer_Main
 19624  0B93  0878               	movf	_Buz,w
 19625  0B94  3E03               	addlw	3
 19626  0B95  0086               	movwf	6
 19627  0B96  3001               	movlw	1	; select bank2/3
 19628  0B97  0087               	movwf	7
 19629  0B98  0820               	movf	??_Buzzer_Main,w
 19630  0B99  0081               	movwf	1
 19631                           
 19632                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 19633  0B9A  0878               	movf	_Buz,w
 19634  0B9B  3E0A               	addlw	10
 19635  0B9C  0086               	movwf	6
 19636  0B9D  3001               	movlw	1	; select bank2/3
 19637  0B9E  0087               	movwf	7
 19638  0B9F  0878               	movf	_Buz,w
 19639  0BA0  3E06               	addlw	6
 19640  0BA1  0084               	movwf	4
 19641  0BA2  3001               	movlw	1	; select bank2/3
 19642  0BA3  0085               	movwf	5
 19643  0BA4  3F40               	moviw [0]fsr1
 19644  0BA5  3F80               	movwi [0]fsr0
 19645  0BA6  3F41               	moviw [1]fsr1
 19646  0BA7  3F81               	movwi [1]fsr0
 19647                           
 19648                           ;Buzzer_B1.c: 78: }
 19649  0BA8  0008               	return
 19650  0BA9                     l7522:	
 19651                           
 19652                           ;Buzzer_B1.c: 79: else
 19653                           ;Buzzer_B1.c: 80: {
 19654                           ;Buzzer_B1.c: 81: Buz->GO=0;
 19655  0BA9  0878               	movf	_Buz,w
 19656  0BAA  0086               	movwf	6
 19657  0BAB  3001               	movlw	1	; select bank2/3
 19658  0BAC  0087               	movwf	7
 19659  0BAD  1081               	bcf	1,1
 19660                           
 19661                           ;Buzzer_B1.c: 82: }
 19662                           ;Buzzer_B1.c: 83: }
 19663  0BAE  0008               	return
 19664  0BAF                     l7524:	
 19665                           
 19666                           ;Buzzer_B1.c: 84: else
 19667                           ;Buzzer_B1.c: 85: {
 19668                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 19669  0BAF  0878               	movf	_Buz,w
 19670  0BB0  0086               	movwf	6
 19671  0BB1  3001               	movlw	1	; select bank2/3
 19672  0BB2  0087               	movwf	7
 19673  0BB3  1681               	bsf	1,5
 19674                           
 19675                           ;Buzzer_B1.c: 88: RB3=1;
 19676  0BB4  158D               	bsf	13,3	;volatile
 19677                           
 19678                           ;Buzzer_B1.c: 89: }
 19679                           ;Buzzer_B1.c: 90: }
 19680  0BB5  0008               	return
 19681  0BB6                     l7528:	
 19682                           
 19683                           ;Buzzer_B1.c: 91: else
 19684                           ;Buzzer_B1.c: 92: {
 19685                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 19686  0BB6  0878               	movf	_Buz,w
 19687  0BB7  0086               	movwf	6
 19688  0BB8  3001               	movlw	1	; select bank2/3
 19689  0BB9  0087               	movwf	7
 19690  0BBA  1281               	bcf	1,5
 19691                           
 19692                           ;Buzzer_B1.c: 95: RB3=0;
 19693  0BBB  118D               	bcf	13,3	;volatile
 19694                           
 19695                           ;Buzzer_B1.c: 97: Buz->Count--;
 19696  0BBC  0878               	movf	_Buz,w
 19697  0BBD  3E03               	addlw	3
 19698  0BBE  0086               	movwf	6
 19699  0BBF  3001               	movlw	1	; select bank2/3
 19700  0BC0  0087               	movwf	7
 19701  0BC1  3001               	movlw	1
 19702  0BC2  0281               	subwf	1,f
 19703  0BC3  0008               	return
 19704  0BC4                     __end_of_Buzzer_Main:	
 19705                           
 19706                           	psect	text134
 19707  26B6                     __ptext134:	
 19708 ;; *************** function _Buzzer_Initialization *****************
 19709 ;; Defined at:
 19710 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\Buzzer_B1.c"
 19711 ;; Parameters:    Size  Location     Type
 19712 ;;		None
 19713 ;; Auto vars:     Size  Location     Type
 19714 ;;		None
 19715 ;; Return value:  Size  Location     Type
 19716 ;;		None               void
 19717 ;; Registers used:
 19718 ;;		wreg, fsr1l, fsr1h
 19719 ;; Tracked objects:
 19720 ;;		On entry : 0/0
 19721 ;;		On exit  : 0/0
 19722 ;;		Unchanged: 0/0
 19723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19727 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19728 ;;Total ram usage:        1 bytes
 19729 ;; Hardware stack levels used:    1
 19730 ;; Hardware stack levels required when called:    4
 19731 ;; This function calls:
 19732 ;;		Nothing
 19733 ;; This function is called by:
 19734 ;;		_main
 19735 ;; This function uses a non-reentrant model
 19736 ;;
 19737                           
 19738                           
 19739                           ;psect for function _Buzzer_Initialization
 19740  26B6                     _Buzzer_Initialization:	
 19741                           
 19742                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 19743                           
 19744                           ;incstack = 0
 19745                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 19746  26B6  304B               	movlw	_Buz1& (0+255)
 19747  26B7  0020               	movlb	0	; select bank0
 19748  26B8  00A0               	movwf	??_Buzzer_Initialization
 19749  26B9  0820               	movf	??_Buzzer_Initialization,w
 19750  26BA  00F8               	movwf	_Buz
 19751                           
 19752                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 19753  26BB  0878               	movf	_Buz,w
 19754  26BC  0086               	movwf	6
 19755  26BD  3001               	movlw	1	; select bank2/3
 19756  26BE  0087               	movwf	7
 19757  26BF  1401               	bsf	1,0
 19758  26C0  0008               	return
 19759  26C1                     __end_of_Buzzer_Initialization:	
 19760                           
 19761                           	psect	intentry
 19762  0004                     __pintentry:	
 19763 ;; *************** function _ISR *****************
 19764 ;; Defined at:
 19765 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\MCU_16f1518_B1.c"
 19766 ;; Parameters:    Size  Location     Type
 19767 ;;		None
 19768 ;; Auto vars:     Size  Location     Type
 19769 ;;		None
 19770 ;; Return value:  Size  Location     Type
 19771 ;;		None               void
 19772 ;; Registers used:
 19773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19774 ;; Tracked objects:
 19775 ;;		On entry : 0/0
 19776 ;;		On exit  : 0/0
 19777 ;;		Unchanged: 0/0
 19778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19782 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19783 ;;Total ram usage:        1 bytes
 19784 ;; Hardware stack levels used:    1
 19785 ;; Hardware stack levels required when called:    3
 19786 ;; This function calls:
 19787 ;;		_INT_ISR
 19788 ;;		_IOC_ISR
 19789 ;;		_TMR0_ISR
 19790 ;; This function is called by:
 19791 ;;		Interrupt level 1
 19792 ;; This function uses a non-reentrant model
 19793 ;;
 19794                           
 19795  0004                     _ISR:	
 19796                           
 19797                           ;incstack = 0
 19798                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19799  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19800  0005  3180               	pagesel	$
 19801  0006  0020               	movlb	0	; select bank0
 19802  0007  087F               	movf	127,w
 19803  0008  00F7               	movwf	??_ISR
 19804                           
 19805                           ;MCU_16f1518_B1.c: 58: IOC_ISR();
 19806  0009  319A  22D8  3180   	fcall	_IOC_ISR
 19807                           
 19808                           ;MCU_16f1518_B1.c: 60: TMR0_ISR();
 19809  000C  3182  22EE  3180   	fcall	_TMR0_ISR
 19810                           
 19811                           ;MCU_16f1518_B1.c: 62: ;;
 19812                           ;MCU_16f1518_B1.c: 66: INT_ISR();
 19813  000F  31A7  2725         	fcall	_INT_ISR
 19814  0011  0877               	movf	??_ISR,w
 19815  0012  0020               	movlb	0	; select bank0
 19816  0013  00FF               	movwf	127
 19817  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 19818  0015  0009               	retfie
 19819  0016                     __end_of_ISR:	
 19820                           
 19821                           	psect	text136
 19822  02EE                     __ptext136:	
 19823 ;; *************** function _TMR0_ISR *****************
 19824 ;; Defined at:
 19825 ;;		line 82 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\MCU_16f1518_B1.c"
 19826 ;; Parameters:    Size  Location     Type
 19827 ;;		None
 19828 ;; Auto vars:     Size  Location     Type
 19829 ;;		None
 19830 ;; Return value:  Size  Location     Type
 19831 ;;		None               void
 19832 ;; Registers used:
 19833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19834 ;; Tracked objects:
 19835 ;;		On entry : 0/0
 19836 ;;		On exit  : 0/0
 19837 ;;		Unchanged: 0/0
 19838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19841 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19842 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19843 ;;Total ram usage:        4 bytes
 19844 ;; Hardware stack levels used:    1
 19845 ;; Hardware stack levels required when called:    1
 19846 ;; This function calls:
 19847 ;;		i1_setLoad_StatusOff
 19848 ;; This function is called by:
 19849 ;;		_ISR
 19850 ;; This function uses a non-reentrant model
 19851 ;;
 19852                           
 19853                           
 19854                           ;psect for function _TMR0_ISR
 19855  02EE                     _TMR0_ISR:	
 19856                           
 19857                           ;MCU_16f1518_B1.c: 84: if(TMR0IE && TMR0IF)
 19858                           
 19859                           ;incstack = 0
 19860                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19861  02EE  1E8B               	btfss	11,5	;volatile
 19862  02EF  0008               	return
 19863  02F0  1D0B               	btfss	11,2	;volatile
 19864  02F1  0008               	return
 19865                           
 19866                           ;MCU_16f1518_B1.c: 85: {
 19867                           ;MCU_16f1518_B1.c: 86: TMR0=(256-90);
 19868  02F2  30A6               	movlw	166
 19869  02F3  0020               	movlb	0	; select bank0
 19870  02F4  0095               	movwf	21	;volatile
 19871                           
 19872                           ;MCU_16f1518_B1.c: 87: TMR0IF=0;
 19873  02F5  110B               	bcf	11,2	;volatile
 19874                           
 19875                           ;MCU_16f1518_B1.c: 100: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLight
      +                          s11->Count >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count
      +                          =0; DimmerLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1
      +                          ; RB4=1; }
 19876  02F6  0879               	movf	_DimmerLights11,w
 19877  02F7  0086               	movwf	6
 19878  02F8  3001               	movlw	1	; select bank2/3
 19879  02F9  0087               	movwf	7
 19880  02FA  1C01               	btfss	1,0
 19881  02FB  2B47               	goto	i1l7906
 19882  02FC  3001               	movlw	1
 19883  02FD  00F3               	movwf	??_TMR0_ISR
 19884  02FE  0879               	movf	_DimmerLights11,w
 19885  02FF  3E03               	addlw	3
 19886  0300  0086               	movwf	6
 19887  0301  3001               	movlw	1	; select bank2/3
 19888  0302  0087               	movwf	7
 19889  0303  0873               	movf	??_TMR0_ISR,w
 19890  0304  0781               	addwf	1,f
 19891  0305  0021               	movlb	1	; select bank1
 19892  0306  0839               	movf	_Dimmer^(0+128),w
 19893  0307  3E02               	addlw	2
 19894  0308  0086               	movwf	6
 19895  0309  0187               	clrf	7
 19896  030A  0801               	movf	1,w
 19897  030B  00F3               	movwf	??_TMR0_ISR
 19898  030C  01F4               	clrf	??_TMR0_ISR+1
 19899  030D  09F3               	comf	??_TMR0_ISR,f
 19900  030E  09F4               	comf	??_TMR0_ISR+1,f
 19901  030F  0AF3               	incf	??_TMR0_ISR,f
 19902  0310  1903               	skipnz
 19903  0311  0AF4               	incf	??_TMR0_ISR+1,f
 19904  0312  0879               	movf	_DimmerLights11,w
 19905  0313  3E04               	addlw	4
 19906  0314  0086               	movwf	6
 19907  0315  3001               	movlw	1	; select bank2/3
 19908  0316  0087               	movwf	7
 19909  0317  0801               	movf	1,w
 19910  0318  0773               	addwf	??_TMR0_ISR,w
 19911  0319  00F5               	movwf	??_TMR0_ISR+2
 19912  031A  0874               	movf	??_TMR0_ISR+1,w
 19913  031B  1803               	skipnc
 19914  031C  0A74               	incf	??_TMR0_ISR+1,w
 19915  031D  00F6               	movwf	??_TMR0_ISR+3
 19916  031E  0879               	movf	_DimmerLights11,w
 19917  031F  3E03               	addlw	3
 19918  0320  0086               	movwf	6
 19919  0321  3001               	movlw	1	; select bank2/3
 19920  0322  0087               	movwf	7
 19921  0323  0876               	movf	??_TMR0_ISR+3,w
 19922  0324  3A80               	xorlw	128
 19923  0325  3C80               	sublw	128
 19924  0326  1D03               	skipz
 19925  0327  2B2A               	goto	u712_25
 19926  0328  0875               	movf	??_TMR0_ISR+2,w
 19927  0329  0201               	subwf	1,w
 19928  032A                     u712_25:	
 19929  032A  1C03               	skipc
 19930  032B  2C83               	goto	i1l7976
 19931  032C  0879               	movf	_DimmerLights11,w
 19932  032D  3E03               	addlw	3
 19933  032E  0086               	movwf	6
 19934  032F  3001               	movlw	1	; select bank2/3
 19935  0330  0087               	movwf	7
 19936  0331  0181               	clrf	1
 19937  0332  0879               	movf	_DimmerLights11,w
 19938  0333  0086               	movwf	6
 19939  0334  3001               	movlw	1	; select bank2/3
 19940  0335  0087               	movwf	7
 19941  0336  1001               	bcf	1,0
 19942  0337  0879               	movf	_DimmerLights11,w
 19943  0338  3E07               	addlw	7
 19944  0339  0086               	movwf	6
 19945  033A  3001               	movlw	1	; select bank2/3
 19946  033B  0087               	movwf	7
 19947  033C  1401               	bsf	1,0
 19948  033D  0879               	movf	_DimmerLights11,w
 19949  033E  0086               	movwf	6
 19950  033F  3001               	movlw	1	; select bank2/3
 19951  0340  0087               	movwf	7
 19952  0341  1F01               	btfss	1,6
 19953  0342  2C83               	goto	i1l7976
 19954  0343  0020               	movlb	0	; select bank0
 19955  0344  178C               	bsf	12,7	;volatile
 19956  0345  160D               	bsf	13,4	;volatile
 19957  0346  2C83               	goto	i1l7976
 19958  0347                     i1l7906:	
 19959  0347  0879               	movf	_DimmerLights11,w
 19960  0348  3E07               	addlw	7
 19961  0349  0086               	movwf	6
 19962  034A  3001               	movlw	1	; select bank2/3
 19963  034B  0087               	movwf	7
 19964  034C  1C01               	btfss	1,0
 19965  034D  2C4D               	goto	i1l7966
 19966  034E  0879               	movf	_DimmerLights11,w
 19967  034F  3E07               	addlw	7
 19968  0350  0086               	movwf	6
 19969  0351  3001               	movlw	1	; select bank2/3
 19970  0352  0087               	movwf	7
 19971  0353  1001               	bcf	1,0
 19972  0354  0879               	movf	_DimmerLights11,w
 19973  0355  0086               	movwf	6
 19974  0356  3001               	movlw	1	; select bank2/3
 19975  0357  0087               	movwf	7
 19976  0358  1C81               	btfss	1,1
 19977  0359  2C4D               	goto	i1l7966
 19978  035A  3001               	movlw	1
 19979  035B  00F3               	movwf	??_TMR0_ISR
 19980  035C  0A79               	incf	_DimmerLights11,w
 19981  035D  0086               	movwf	6
 19982  035E  3001               	movlw	1	; select bank2/3
 19983  035F  0087               	movwf	7
 19984  0360  0873               	movf	??_TMR0_ISR,w
 19985  0361  0781               	addwf	1,f
 19986  0362  0A79               	incf	_DimmerLights11,w
 19987  0363  0086               	movwf	6
 19988  0364  3001               	movlw	1	; select bank2/3
 19989  0365  0087               	movwf	7
 19990  0366  0879               	movf	_DimmerLights11,w
 19991  0367  3E02               	addlw	2
 19992  0368  0084               	movwf	4
 19993  0369  3001               	movlw	1	; select bank2/3
 19994  036A  0085               	movwf	5
 19995  036B  0800               	movf	0,w
 19996  036C  0201               	subwf	1,w
 19997  036D  1C03               	skipc
 19998  036E  2C4D               	goto	i1l7966
 19999  036F  0A79               	incf	_DimmerLights11,w
 20000  0370  0086               	movwf	6
 20001  0371  3001               	movlw	1	; select bank2/3
 20002  0372  0087               	movwf	7
 20003  0373  0181               	clrf	1
 20004  0374  0879               	movf	_DimmerLights11,w
 20005  0375  0086               	movwf	6
 20006  0376  3001               	movlw	1	; select bank2/3
 20007  0377  0087               	movwf	7
 20008  0378  1D81               	btfss	1,3
 20009  0379  2BB0               	goto	i1l7932
 20010  037A  0879               	movf	_DimmerLights11,w
 20011  037B  0086               	movwf	6
 20012  037C  3001               	movlw	1	; select bank2/3
 20013  037D  0087               	movwf	7
 20014  037E  1A01               	btfsc	1,4
 20015  037F  2B97               	goto	i1l7926
 20016  0380  0879               	movf	_DimmerLights11,w
 20017  0381  3E04               	addlw	4
 20018  0382  0086               	movwf	6
 20019  0383  3001               	movlw	1	; select bank2/3
 20020  0384  0087               	movwf	7
 20021  0385  3044               	movlw	68
 20022  0386  0201               	subwf	1,w
 20023  0387  1C03               	skipc
 20024  0388  2B91               	goto	i1l7924
 20025  0389  0879               	movf	_DimmerLights11,w
 20026  038A  3E04               	addlw	4
 20027  038B  0086               	movwf	6
 20028  038C  3001               	movlw	1	; select bank2/3
 20029  038D  0087               	movwf	7
 20030  038E  3001               	movlw	1
 20031  038F  0281               	subwf	1,f
 20032  0390  2C4D               	goto	i1l7966
 20033  0391                     i1l7924:	
 20034  0391  0879               	movf	_DimmerLights11,w
 20035  0392  0086               	movwf	6
 20036  0393  3001               	movlw	1	; select bank2/3
 20037  0394  0087               	movwf	7
 20038  0395  1601               	bsf	1,4
 20039  0396  2C4D               	goto	i1l7966
 20040  0397                     i1l7926:	
 20041  0397  0879               	movf	_DimmerLights11,w
 20042  0398  3E04               	addlw	4
 20043  0399  0086               	movwf	6
 20044  039A  3001               	movlw	1	; select bank2/3
 20045  039B  0087               	movwf	7
 20046  039C  3078               	movlw	120
 20047  039D  0201               	subwf	1,w
 20048  039E  1803               	skipnc
 20049  039F  2BAA               	goto	i1l7930
 20050  03A0  3001               	movlw	1
 20051  03A1  00F3               	movwf	??_TMR0_ISR
 20052  03A2  0879               	movf	_DimmerLights11,w
 20053  03A3  3E04               	addlw	4
 20054  03A4  0086               	movwf	6
 20055  03A5  3001               	movlw	1	; select bank2/3
 20056  03A6  0087               	movwf	7
 20057  03A7  0873               	movf	??_TMR0_ISR,w
 20058  03A8  0781               	addwf	1,f
 20059  03A9  2C4D               	goto	i1l7966
 20060  03AA                     i1l7930:	
 20061  03AA  0879               	movf	_DimmerLights11,w
 20062  03AB  0086               	movwf	6
 20063  03AC  3001               	movlw	1	; select bank2/3
 20064  03AD  0087               	movwf	7
 20065  03AE  1201               	bcf	1,4
 20066  03AF  2C4D               	goto	i1l7966
 20067  03B0                     i1l7932:	
 20068  03B0  0879               	movf	_DimmerLights11,w
 20069  03B1  0086               	movwf	6
 20070  03B2  3001               	movlw	1	; select bank2/3
 20071  03B3  0087               	movwf	7
 20072  03B4  1D01               	btfss	1,2
 20073  03B5  2BF7               	goto	i1l7946
 20074  03B6  0879               	movf	_DimmerLights11,w
 20075  03B7  3E05               	addlw	5
 20076  03B8  0086               	movwf	6
 20077  03B9  3001               	movlw	1	; select bank2/3
 20078  03BA  0087               	movwf	7
 20079  03BB  0879               	movf	_DimmerLights11,w
 20080  03BC  3E04               	addlw	4
 20081  03BD  0084               	movwf	4
 20082  03BE  3001               	movlw	1	; select bank2/3
 20083  03BF  0085               	movwf	5
 20084  03C0  0800               	movf	0,w
 20085  03C1  0201               	subwf	1,w
 20086  03C2  1803               	skipnc
 20087  03C3  2BCC               	goto	i1l7938
 20088  03C4  0879               	movf	_DimmerLights11,w
 20089  03C5  3E04               	addlw	4
 20090  03C6  0086               	movwf	6
 20091  03C7  3001               	movlw	1	; select bank2/3
 20092  03C8  0087               	movwf	7
 20093  03C9  3001               	movlw	1
 20094  03CA  0281               	subwf	1,f
 20095  03CB  2BE3               	goto	i1l7942
 20096  03CC                     i1l7938:	
 20097  03CC  0879               	movf	_DimmerLights11,w
 20098  03CD  3E04               	addlw	4
 20099  03CE  0086               	movwf	6
 20100  03CF  3001               	movlw	1	; select bank2/3
 20101  03D0  0087               	movwf	7
 20102  03D1  0879               	movf	_DimmerLights11,w
 20103  03D2  3E05               	addlw	5
 20104  03D3  0084               	movwf	4
 20105  03D4  3001               	movlw	1	; select bank2/3
 20106  03D5  0085               	movwf	5
 20107  03D6  0800               	movf	0,w
 20108  03D7  0201               	subwf	1,w
 20109  03D8  1803               	skipnc
 20110  03D9  2BE3               	goto	i1l7942
 20111  03DA  3001               	movlw	1
 20112  03DB  00F3               	movwf	??_TMR0_ISR
 20113  03DC  0879               	movf	_DimmerLights11,w
 20114  03DD  3E04               	addlw	4
 20115  03DE  0086               	movwf	6
 20116  03DF  3001               	movlw	1	; select bank2/3
 20117  03E0  0087               	movwf	7
 20118  03E1  0873               	movf	??_TMR0_ISR,w
 20119  03E2  0781               	addwf	1,f
 20120  03E3                     i1l7942:	
 20121  03E3  0879               	movf	_DimmerLights11,w
 20122  03E4  3E05               	addlw	5
 20123  03E5  0086               	movwf	6
 20124  03E6  3001               	movlw	1	; select bank2/3
 20125  03E7  0087               	movwf	7
 20126  03E8  0879               	movf	_DimmerLights11,w
 20127  03E9  3E04               	addlw	4
 20128  03EA  0084               	movwf	4
 20129  03EB  3001               	movlw	1	; select bank2/3
 20130  03EC  0085               	movwf	5
 20131  03ED  0800               	movf	0,w
 20132  03EE  0601               	xorwf	1,w
 20133  03EF  1D03               	skipz
 20134  03F0  2C4D               	goto	i1l7966
 20135  03F1  0879               	movf	_DimmerLights11,w
 20136  03F2  0086               	movwf	6
 20137  03F3  3001               	movlw	1	; select bank2/3
 20138  03F4  0087               	movwf	7
 20139  03F5  1101               	bcf	1,2
 20140  03F6  2C12               	goto	i1l7952
 20141  03F7                     i1l7946:	
 20142  03F7  0879               	movf	_DimmerLights11,w
 20143  03F8  0086               	movwf	6
 20144  03F9  3001               	movlw	1	; select bank2/3
 20145  03FA  0087               	movwf	7
 20146  03FB  1E81               	btfss	1,5
 20147  03FC  2C18               	goto	i1l7954
 20148  03FD  0879               	movf	_DimmerLights11,w
 20149  03FE  3E04               	addlw	4
 20150  03FF  0086               	movwf	6
 20151  0400  3001               	movlw	1	; select bank2/3
 20152  0401  0087               	movwf	7
 20153  0402  3001               	movlw	1
 20154  0403  0281               	subwf	1,f
 20155  0404  0879               	movf	_DimmerLights11,w
 20156  0405  3E05               	addlw	5
 20157  0406  0086               	movwf	6
 20158  0407  3001               	movlw	1	; select bank2/3
 20159  0408  0087               	movwf	7
 20160  0409  0879               	movf	_DimmerLights11,w
 20161  040A  3E04               	addlw	4
 20162  040B  0084               	movwf	4
 20163  040C  3001               	movlw	1	; select bank2/3
 20164  040D  0085               	movwf	5
 20165  040E  0800               	movf	0,w
 20166  040F  0201               	subwf	1,w
 20167  0410  1C03               	skipc
 20168  0411  2C4D               	goto	i1l7966
 20169  0412                     i1l7952:	
 20170  0412  0879               	movf	_DimmerLights11,w
 20171  0413  0086               	movwf	6
 20172  0414  3001               	movlw	1	; select bank2/3
 20173  0415  0087               	movwf	7
 20174  0416  1081               	bcf	1,1
 20175  0417  2C4D               	goto	i1l7966
 20176  0418                     i1l7954:	
 20177  0418  3001               	movlw	1
 20178  0419  00F3               	movwf	??_TMR0_ISR
 20179  041A  0879               	movf	_DimmerLights11,w
 20180  041B  3E04               	addlw	4
 20181  041C  0086               	movwf	6
 20182  041D  3001               	movlw	1	; select bank2/3
 20183  041E  0087               	movwf	7
 20184  041F  0873               	movf	??_TMR0_ISR,w
 20185  0420  0781               	addwf	1,f
 20186  0421  0879               	movf	_DimmerLights11,w
 20187  0422  3E04               	addlw	4
 20188  0423  0086               	movwf	6
 20189  0424  3001               	movlw	1	; select bank2/3
 20190  0425  0087               	movwf	7
 20191  0426  0879               	movf	_DimmerLights11,w
 20192  0427  3E06               	addlw	6
 20193  0428  0084               	movwf	4
 20194  0429  3001               	movlw	1	; select bank2/3
 20195  042A  0085               	movwf	5
 20196  042B  0800               	movf	0,w
 20197  042C  0201               	subwf	1,w
 20198  042D  1C03               	skipc
 20199  042E  2C4D               	goto	i1l7966
 20200  042F  0879               	movf	_DimmerLights11,w
 20201  0430  0086               	movwf	6
 20202  0431  3001               	movlw	1	; select bank2/3
 20203  0432  0087               	movwf	7
 20204  0433  1081               	bcf	1,1
 20205  0434  0879               	movf	_DimmerLights11,w
 20206  0435  0086               	movwf	6
 20207  0436  3001               	movlw	1	; select bank2/3
 20208  0437  0087               	movwf	7
 20209  0438  1301               	bcf	1,6
 20210  0439  0879               	movf	_DimmerLights11,w
 20211  043A  3E0C               	addlw	12
 20212  043B  0086               	movwf	6
 20213  043C  3001               	movlw	1	; select bank2/3
 20214  043D  0087               	movwf	7
 20215  043E  1401               	bsf	1,0
 20216  043F  0021               	movlb	1	; select bank1
 20217  0440  0839               	movf	_Dimmer^(0+128),w
 20218  0441  0086               	movwf	6
 20219  0442  0187               	clrf	7
 20220  0443  1401               	bsf	1,0
 20221  0444  0020               	movlb	0	; select bank0
 20222  0445  118C               	bcf	12,3	;volatile
 20223  0446  138E               	bcf	14,7	;volatile
 20224  0447  01F1               	clrf	i1setLoad_StatusOff@command
 20225  0448  0AF1               	incf	i1setLoad_StatusOff@command,f
 20226  0449  3001               	movlw	1
 20227  044A  319C  2479  3182   	fcall	i1_setLoad_StatusOff
 20228  044D                     i1l7966:	
 20229  044D  0020               	movlb	0	; select bank0
 20230  044E  1F8C               	btfss	12,7	;volatile
 20231  044F  2C83               	goto	i1l7976
 20232  0450  3001               	movlw	1
 20233  0451  00F3               	movwf	??_TMR0_ISR
 20234  0452  0879               	movf	_DimmerLights11,w
 20235  0453  3E08               	addlw	8
 20236  0454  0086               	movwf	6
 20237  0455  3001               	movlw	1	; select bank2/3
 20238  0456  0087               	movwf	7
 20239  0457  0873               	movf	??_TMR0_ISR,w
 20240  0458  0781               	addwf	1,f
 20241  0459  0879               	movf	_DimmerLights11,w
 20242  045A  3E04               	addlw	4
 20243  045B  0086               	movwf	6
 20244  045C  3001               	movlw	1	; select bank2/3
 20245  045D  0087               	movwf	7
 20246  045E  0801               	movf	1,w
 20247  045F  00F3               	movwf	??_TMR0_ISR
 20248  0460  01F4               	clrf	??_TMR0_ISR+1
 20249  0461  09F3               	comf	??_TMR0_ISR,f
 20250  0462  09F4               	comf	??_TMR0_ISR+1,f
 20251  0463  0AF3               	incf	??_TMR0_ISR,f
 20252  0464  1903               	skipnz
 20253  0465  0AF4               	incf	??_TMR0_ISR+1,f
 20254  0466  0873               	movf	??_TMR0_ISR,w
 20255  0467  3E78               	addlw	120
 20256  0468  00F5               	movwf	??_TMR0_ISR+2
 20257  0469  3000               	movlw	0
 20258  046A  3D74               	addwfc	??_TMR0_ISR+1,w
 20259  046B  00F6               	movwf	??_TMR0_ISR+3
 20260  046C  0879               	movf	_DimmerLights11,w
 20261  046D  3E08               	addlw	8
 20262  046E  0086               	movwf	6
 20263  046F  3001               	movlw	1	; select bank2/3
 20264  0470  0087               	movwf	7
 20265  0471  0876               	movf	??_TMR0_ISR+3,w
 20266  0472  3A80               	xorlw	128
 20267  0473  3C80               	sublw	128
 20268  0474  1D03               	skipz
 20269  0475  2C78               	goto	u729_25
 20270  0476  0875               	movf	??_TMR0_ISR+2,w
 20271  0477  0201               	subwf	1,w
 20272  0478                     u729_25:	
 20273  0478  1C03               	skipc
 20274  0479  2C83               	goto	i1l7976
 20275  047A  0879               	movf	_DimmerLights11,w
 20276  047B  3E08               	addlw	8
 20277  047C  0086               	movwf	6
 20278  047D  3001               	movlw	1	; select bank2/3
 20279  047E  0087               	movwf	7
 20280  047F  0181               	clrf	1
 20281  0480  0020               	movlb	0	; select bank0
 20282  0481  138C               	bcf	12,7	;volatile
 20283  0482  120D               	bcf	13,4	;volatile
 20284  0483                     i1l7976:	
 20285                           
 20286                           ;MCU_16f1518_B1.c: 113: Timer0->Count++;
 20287  0483  0021               	movlb	1	; select bank1
 20288  0484  0A6B               	incf	_Timer0^(0+128),w
 20289  0485  0086               	movwf	6
 20290  0486  0187               	clrf	7
 20291  0487  3001               	movlw	1
 20292  0488  0781               	addwf	1,f
 20293  0489  3141               	addfsr 1,1
 20294  048A  1803               	skipnc
 20295  048B  0A81               	incf	1,f
 20296                           
 20297                           ;MCU_16f1518_B1.c: 114: if(Timer0->Count == 200)
 20298  048C  0A6B               	incf	_Timer0^(0+128),w
 20299  048D  0086               	movwf	6
 20300  048E  0187               	clrf	7
 20301  048F  3F40               	moviw [0]fsr1
 20302  0490  3AC8               	xorlw	200
 20303  0491  1D03               	skipz
 20304  0492  2C95               	goto	u730_25
 20305  0493  3F41               	moviw [1]fsr1
 20306  0494  3A00               	xorlw	0
 20307  0495                     u730_25:	
 20308  0495  1D03               	skipz
 20309  0496  2CA2               	goto	i1l1570
 20310                           
 20311                           ;MCU_16f1518_B1.c: 115: {
 20312                           ;MCU_16f1518_B1.c: 116: Timer0->Count=0;
 20313  0497  0A6B               	incf	_Timer0^(0+128),w
 20314  0498  0086               	movwf	6
 20315  0499  0187               	clrf	7
 20316  049A  3000               	movlw	0
 20317  049B  3FC0               	movwi [0]fsr1
 20318  049C  3FC1               	movwi [1]fsr1
 20319                           
 20320                           ;MCU_16f1518_B1.c: 117: TMain->T0_Timerout=1;
 20321  049D  087D               	movf	_TMain,w
 20322  049E  0086               	movwf	6
 20323  049F  3001               	movlw	1	; select bank2/3
 20324  04A0  0087               	movwf	7
 20325  04A1  1481               	bsf	1,1
 20326  04A2                     i1l1570:	
 20327                           
 20328                           ;MCU_16f1518_B1.c: 118: }
 20329                           ;MCU_16f1518_B1.c: 121: if(Buz->GO)
 20330  04A2  0878               	movf	_Buz,w
 20331  04A3  0086               	movwf	6
 20332  04A4  3001               	movlw	1	; select bank2/3
 20333  04A5  0087               	movwf	7
 20334  04A6  1C81               	btfss	1,1
 20335  04A7  0008               	return
 20336                           
 20337                           ;MCU_16f1518_B1.c: 122: {
 20338                           ;MCU_16f1518_B1.c: 123: Buz->Time++;
 20339  04A8  0A78               	incf	_Buz,w
 20340  04A9  0086               	movwf	6
 20341  04AA  3001               	movlw	1	; select bank2/3
 20342  04AB  0087               	movwf	7
 20343  04AC  3001               	movlw	1
 20344  04AD  0781               	addwf	1,f
 20345  04AE  3141               	addfsr 1,1
 20346  04AF  1803               	skipnc
 20347  04B0  0A81               	incf	1,f
 20348  04B1  0008               	return
 20349  04B2                     __end_of_TMR0_ISR:	
 20350                           
 20351                           	psect	text137
 20352  1C79                     __ptext137:	
 20353 ;; *************** function i1_setLoad_StatusOff *****************
 20354 ;; Defined at:
 20355 ;;		line 284 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\OverLoad_B1.c"
 20356 ;; Parameters:    Size  Location     Type
 20357 ;;  lights          1    wreg     unsigned char 
 20358 ;;  command         1    0[COMMON] unsigned char 
 20359 ;; Auto vars:     Size  Location     Type
 20360 ;;  lights          1    1[COMMON] unsigned char 
 20361 ;; Return value:  Size  Location     Type
 20362 ;;		None               void
 20363 ;; Registers used:
 20364 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20365 ;; Tracked objects:
 20366 ;;		On entry : 0/0
 20367 ;;		On exit  : 0/0
 20368 ;;		Unchanged: 0/0
 20369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20370 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20374 ;;Total ram usage:        2 bytes
 20375 ;; Hardware stack levels used:    1
 20376 ;; This function calls:
 20377 ;;		Nothing
 20378 ;; This function is called by:
 20379 ;;		_TMR0_ISR
 20380 ;; This function uses a non-reentrant model
 20381 ;;
 20382                           
 20383                           
 20384                           ;psect for function i1_setLoad_StatusOff
 20385  1C79                     i1_setLoad_StatusOff:	
 20386                           
 20387                           ;incstack = 0
 20388                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20389                           ;i1setLoad_StatusOff@lights stored from wreg
 20390  1C79  00F2               	movwf	i1setLoad_StatusOff@lights
 20391                           
 20392                           ;OverLoad_B1.c: 286: Load->StatusOff=command;
 20393  1C7A  0020               	movlb	0	; select bank0
 20394  1C7B  086E               	movf	_Load,w
 20395  1C7C  3E46               	addlw	70
 20396  1C7D  0086               	movwf	6
 20397  1C7E  3002               	movlw	2	; select bank4/5
 20398  1C7F  0087               	movwf	7
 20399  1C80  0871               	movf	i1setLoad_StatusOff@command,w
 20400  1C81  1081               	bcf	1,1
 20401  1C82  1D03               	skipz
 20402  1C83  1481               	bsf	1,1
 20403                           
 20404                           ;OverLoad_B1.c: 287: Load->SafeCount-=2;
 20405  1C84  086E               	movf	_Load,w
 20406  1C85  3E42               	addlw	66
 20407  1C86  0086               	movwf	6
 20408  1C87  3002               	movlw	2	; select bank4/5
 20409  1C88  0087               	movwf	7
 20410  1C89  3002               	movlw	2
 20411  1C8A  0281               	subwf	1,f
 20412                           
 20413                           ;OverLoad_B1.c: 288: if(lights == 1)
 20414  1C8B  0872               	movf	i1setLoad_StatusOff@lights,w
 20415  1C8C  3A01               	xorlw	1
 20416  1C8D  1D03               	skipz
 20417  1C8E  2C95               	goto	i1l7490
 20418                           
 20419                           ;OverLoad_B1.c: 289: {
 20420                           ;OverLoad_B1.c: 290: Load->Lights1Status=0;
 20421  1C8F  086E               	movf	_Load,w
 20422  1C90  3E43               	addlw	67
 20423  1C91  0086               	movwf	6
 20424  1C92  3002               	movlw	2	; select bank4/5
 20425  1C93  0087               	movwf	7
 20426  1C94  0181               	clrf	1
 20427  1C95                     i1l7490:	
 20428                           
 20429                           ;OverLoad_B1.c: 291: }
 20430                           ;OverLoad_B1.c: 292: if(lights == 2)
 20431  1C95  0872               	movf	i1setLoad_StatusOff@lights,w
 20432  1C96  3A02               	xorlw	2
 20433  1C97  1D03               	skipz
 20434  1C98  2C9F               	goto	i1l7494
 20435                           
 20436                           ;OverLoad_B1.c: 293: {
 20437                           ;OverLoad_B1.c: 294: Load->Lights2Status=0;
 20438  1C99  086E               	movf	_Load,w
 20439  1C9A  3E44               	addlw	68
 20440  1C9B  0086               	movwf	6
 20441  1C9C  3002               	movlw	2	; select bank4/5
 20442  1C9D  0087               	movwf	7
 20443  1C9E  0181               	clrf	1
 20444  1C9F                     i1l7494:	
 20445                           
 20446                           ;OverLoad_B1.c: 295: }
 20447                           ;OverLoad_B1.c: 296: if(lights == 3)
 20448  1C9F  0872               	movf	i1setLoad_StatusOff@lights,w
 20449  1CA0  3A03               	xorlw	3
 20450  1CA1  1D03               	skipz
 20451  1CA2  0008               	return
 20452                           
 20453                           ;OverLoad_B1.c: 297: {
 20454                           ;OverLoad_B1.c: 298: Load->Lights3Status=0;
 20455  1CA3  086E               	movf	_Load,w
 20456  1CA4  3E45               	addlw	69
 20457  1CA5  0086               	movwf	6
 20458  1CA6  3002               	movlw	2	; select bank4/5
 20459  1CA7  0087               	movwf	7
 20460  1CA8  0181               	clrf	1
 20461  1CA9  0008               	return
 20462  1CAA                     __end_ofi1_setLoad_StatusOff:	
 20463                           
 20464                           	psect	text138
 20465  1AD8                     __ptext138:	
 20466 ;; *************** function _IOC_ISR *****************
 20467 ;; Defined at:
 20468 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 20469 ;; Parameters:    Size  Location     Type
 20470 ;;		None
 20471 ;; Auto vars:     Size  Location     Type
 20472 ;;		None
 20473 ;; Return value:  Size  Location     Type
 20474 ;;		None               void
 20475 ;; Registers used:
 20476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20477 ;; Tracked objects:
 20478 ;;		On entry : 0/0
 20479 ;;		On exit  : 0/0
 20480 ;;		Unchanged: 0/0
 20481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20486 ;;Total ram usage:        1 bytes
 20487 ;; Hardware stack levels used:    1
 20488 ;; Hardware stack levels required when called:    1
 20489 ;; This function calls:
 20490 ;;		_setDimmerReClock
 20491 ;; This function is called by:
 20492 ;;		_ISR
 20493 ;; This function uses a non-reentrant model
 20494 ;;
 20495                           
 20496                           
 20497                           ;psect for function _IOC_ISR
 20498  1AD8                     _IOC_ISR:	
 20499                           
 20500                           ;MCU_16f1518_B1.c: 269: if(IOCIE && IOCBF2)
 20501                           
 20502                           ;incstack = 0
 20503                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20504  1AD8  1D8B               	btfss	11,3	;volatile
 20505  1AD9  0008               	return
 20506  1ADA  0027               	movlb	7	; select bank7
 20507  1ADB  1D16               	btfss	22,2	;volatile
 20508  1ADC  0008               	return
 20509                           
 20510                           ;MCU_16f1518_B1.c: 270: {
 20511                           ;MCU_16f1518_B1.c: 271: IOCBF2=0;
 20512  1ADD  1116               	bcf	22,2	;volatile
 20513                           
 20514                           ;MCU_16f1518_B1.c: 272: IOCIF=0;
 20515  1ADE  100B               	bcf	11,0	;volatile
 20516                           
 20517                           ;MCU_16f1518_B1.c: 273: if(TMain->PowerON)
 20518  1ADF  087D               	movf	_TMain,w
 20519  1AE0  0086               	movwf	6
 20520  1AE1  3001               	movlw	1	; select bank2/3
 20521  1AE2  0087               	movwf	7
 20522  1AE3  1C01               	btfss	1,0
 20523  1AE4  0008               	return
 20524                           
 20525                           ;MCU_16f1518_B1.c: 274: {
 20526                           ;MCU_16f1518_B1.c: 278: setDimmerReClock();
 20527  1AE5  31A7  27E2  319A   	fcall	_setDimmerReClock
 20528                           
 20529                           ;MCU_16f1518_B1.c: 279: if(RB2)
 20530  1AE8  0020               	movlb	0	; select bank0
 20531  1AE9  1D0D               	btfss	13,2	;volatile
 20532  1AEA  2AF2               	goto	i1l7882
 20533                           
 20534                           ;MCU_16f1518_B1.c: 280: {
 20535                           ;MCU_16f1518_B1.c: 281: Dimmer->Correction=0;
 20536  1AEB  0021               	movlb	1	; select bank1
 20537  1AEC  0839               	movf	_Dimmer^(0+128),w
 20538  1AED  3E02               	addlw	2
 20539  1AEE  0086               	movwf	6
 20540  1AEF  0187               	clrf	7
 20541  1AF0  0181               	clrf	1
 20542                           
 20543                           ;MCU_16f1518_B1.c: 282: }
 20544  1AF1  0008               	return
 20545  1AF2                     i1l7882:	
 20546                           
 20547                           ;MCU_16f1518_B1.c: 283: else
 20548                           ;MCU_16f1518_B1.c: 284: {
 20549                           ;MCU_16f1518_B1.c: 285: Dimmer->Correction=8;
 20550  1AF2  3008               	movlw	8
 20551  1AF3  00F1               	movwf	??_IOC_ISR
 20552  1AF4  0021               	movlb	1	; select bank1
 20553  1AF5  0839               	movf	_Dimmer^(0+128),w
 20554  1AF6  3E02               	addlw	2
 20555  1AF7  0086               	movwf	6
 20556  1AF8  0187               	clrf	7
 20557  1AF9  0871               	movf	??_IOC_ISR,w
 20558  1AFA  0081               	movwf	1
 20559  1AFB  0008               	return
 20560  1AFC                     __end_of_IOC_ISR:	
 20561                           
 20562                           	psect	text139
 20563  27E2                     __ptext139:	
 20564 ;; *************** function _setDimmerReClock *****************
 20565 ;; Defined at:
 20566 ;;		line 129 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 20567 ;; Parameters:    Size  Location     Type
 20568 ;;		None
 20569 ;; Auto vars:     Size  Location     Type
 20570 ;;		None
 20571 ;; Return value:  Size  Location     Type
 20572 ;;		None               void
 20573 ;; Registers used:
 20574 ;;		wreg, fsr1l, fsr1h
 20575 ;; Tracked objects:
 20576 ;;		On entry : 0/0
 20577 ;;		On exit  : 0/0
 20578 ;;		Unchanged: 0/0
 20579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20584 ;;Total ram usage:        0 bytes
 20585 ;; Hardware stack levels used:    1
 20586 ;; This function calls:
 20587 ;;		Nothing
 20588 ;; This function is called by:
 20589 ;;		_IOC_ISR
 20590 ;; This function uses a non-reentrant model
 20591 ;;
 20592                           
 20593                           
 20594                           ;psect for function _setDimmerReClock
 20595  27E2                     _setDimmerReClock:	
 20596                           
 20597                           ;MCU_16f1518_B1.c: 131: TMR0=255;
 20598                           
 20599                           ;incstack = 0
 20600                           ; Regs used in _setDimmerReClock: [wregfsr1]
 20601  27E2  30FF               	movlw	255
 20602  27E3  0020               	movlb	0	; select bank0
 20603  27E4  0095               	movwf	21	;volatile
 20604                           
 20605                           ;MCU_16f1518_B1.c: 136: if(!DimmerLights11->GO)
 20606  27E5  0879               	movf	_DimmerLights11,w
 20607  27E6  0086               	movwf	6
 20608  27E7  3001               	movlw	1	; select bank2/3
 20609  27E8  0087               	movwf	7
 20610  27E9  1801               	btfsc	1,0
 20611  27EA  0008               	return
 20612                           
 20613                           ;MCU_16f1518_B1.c: 137: {
 20614                           ;MCU_16f1518_B1.c: 138: DimmerLights11->GO=1;
 20615  27EB  0879               	movf	_DimmerLights11,w
 20616  27EC  0086               	movwf	6
 20617  27ED  3001               	movlw	1	; select bank2/3
 20618  27EE  0087               	movwf	7
 20619  27EF  1401               	bsf	1,0
 20620  27F0  0008               	return
 20621  27F1                     __end_of_setDimmerReClock:	
 20622                           
 20623                           	psect	text140
 20624  2725                     __ptext140:	
 20625 ;; *************** function _INT_ISR *****************
 20626 ;; Defined at:
 20627 ;;		line 225 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2
      +.1.1.1\Release\MCU_16f1518_B1.c"
 20628 ;; Parameters:    Size  Location     Type
 20629 ;;		None
 20630 ;; Auto vars:     Size  Location     Type
 20631 ;;		None
 20632 ;; Return value:  Size  Location     Type
 20633 ;;		None               void
 20634 ;; Registers used:
 20635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20636 ;; Tracked objects:
 20637 ;;		On entry : 0/0
 20638 ;;		On exit  : 0/0
 20639 ;;		Unchanged: 0/0
 20640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20645 ;;Total ram usage:        0 bytes
 20646 ;; Hardware stack levels used:    1
 20647 ;; Hardware stack levels required when called:    2
 20648 ;; This function calls:
 20649 ;;		_setRF_ReceiveGO
 20650 ;; This function is called by:
 20651 ;;		_ISR
 20652 ;; This function uses a non-reentrant model
 20653 ;;
 20654                           
 20655                           
 20656                           ;psect for function _INT_ISR
 20657  2725                     _INT_ISR:	
 20658                           
 20659                           ;MCU_16f1518_B1.c: 227: if(INTE && INTF)
 20660                           
 20661                           ;incstack = 0
 20662                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20663  2725  1E0B               	btfss	11,4	;volatile
 20664  2726  0008               	return
 20665  2727  1C8B               	btfss	11,1	;volatile
 20666  2728  0008               	return
 20667                           
 20668                           ;MCU_16f1518_B1.c: 228: {
 20669                           ;MCU_16f1518_B1.c: 229: INTF=0;
 20670  2729  108B               	bcf	11,1	;volatile
 20671                           
 20672                           ;MCU_16f1518_B1.c: 230: INTE=0;
 20673  272A  120B               	bcf	11,4	;volatile
 20674                           
 20675                           ;MCU_16f1518_B1.c: 231: setRF_ReceiveGO(1,1);
 20676  272B  01F3               	clrf	setRF_ReceiveGO@command
 20677  272C  0AF3               	incf	setRF_ReceiveGO@command,f
 20678  272D  3001               	movlw	1
 20679  272E  31A7  2719         	fcall	_setRF_ReceiveGO
 20680  2730  0008               	return
 20681  2731                     __end_of_INT_ISR:	
 20682                           
 20683                           	psect	text141
 20684  2719                     __ptext141:	
 20685 ;; *************** function _setRF_ReceiveGO *****************
 20686 ;; Defined at:
 20687 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.
      +1.1.1\Release\RF_Control_B1.c"
 20688 ;; Parameters:    Size  Location     Type
 20689 ;;  rf              1    wreg     unsigned char 
 20690 ;;  command         1    2[COMMON] unsigned char 
 20691 ;; Auto vars:     Size  Location     Type
 20692 ;;  rf              1    3[COMMON] unsigned char 
 20693 ;; Return value:  Size  Location     Type
 20694 ;;		None               void
 20695 ;; Registers used:
 20696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20697 ;; Tracked objects:
 20698 ;;		On entry : 0/0
 20699 ;;		On exit  : 0/0
 20700 ;;		Unchanged: 0/0
 20701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20702 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20706 ;;Total ram usage:        2 bytes
 20707 ;; Hardware stack levels used:    1
 20708 ;; Hardware stack levels required when called:    1
 20709 ;; This function calls:
 20710 ;;		i1_RfPointSelect
 20711 ;; This function is called by:
 20712 ;;		_INT_ISR
 20713 ;; This function uses a non-reentrant model
 20714 ;;
 20715                           
 20716                           
 20717                           ;psect for function _setRF_ReceiveGO
 20718  2719                     _setRF_ReceiveGO:	
 20719                           
 20720                           ;incstack = 0
 20721                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20722                           ;setRF_ReceiveGO@rf stored from wreg
 20723  2719  00F4               	movwf	setRF_ReceiveGO@rf
 20724                           
 20725                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 20726  271A  0874               	movf	setRF_ReceiveGO@rf,w
 20727  271B  31A6  26A2         	fcall	i1_RfPointSelect
 20728                           
 20729                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 20730  271D  087B               	movf	_RF,w
 20731  271E  0086               	movwf	6
 20732  271F  0187               	clrf	7
 20733  2720  0873               	movf	setRF_ReceiveGO@command,w
 20734  2721  1081               	bcf	1,1
 20735  2722  1D03               	skipz
 20736  2723  1481               	bsf	1,1
 20737  2724  0008               	return
 20738  2725                     __end_of_setRF_ReceiveGO:	
 20739                           
 20740                           	psect	text142
 20741  26A2                     __ptext142:	
 20742 ;; *************** function i1_RfPointSelect *****************
 20743 ;; Defined at:
 20744 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\10.Switch_1Key_Dimmer\Release\Switch_1Key_Dimmer_V1.2.1
      +.1.1\Release\RF_Control_B1.c"
 20745 ;; Parameters:    Size  Location     Type
 20746 ;;  rf              1    wreg     unsigned char 
 20747 ;; Auto vars:     Size  Location     Type
 20748 ;;  rf              1    1[COMMON] unsigned char 
 20749 ;; Return value:  Size  Location     Type
 20750 ;;		None               void
 20751 ;; Registers used:
 20752 ;;		wreg
 20753 ;; Tracked objects:
 20754 ;;		On entry : 0/0
 20755 ;;		On exit  : 0/0
 20756 ;;		Unchanged: 0/0
 20757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20761 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20762 ;;Total ram usage:        2 bytes
 20763 ;; Hardware stack levels used:    1
 20764 ;; This function calls:
 20765 ;;		Nothing
 20766 ;; This function is called by:
 20767 ;;		_setRF_ReceiveGO
 20768 ;; This function uses a non-reentrant model
 20769 ;;
 20770                           
 20771                           
 20772                           ;psect for function i1_RfPointSelect
 20773  26A2                     i1_RfPointSelect:	
 20774                           
 20775                           ;incstack = 0
 20776                           ; Regs used in i1_RfPointSelect: [wreg]
 20777                           ;i1RfPointSelect@rf stored from wreg
 20778  26A2  00F2               	movwf	i1RfPointSelect@rf
 20779                           
 20780                           ;RF_Control_B1.c: 10: if(rf == 1)
 20781  26A3  0872               	movf	i1RfPointSelect@rf,w
 20782  26A4  3A01               	xorlw	1
 20783  26A5  1D03               	skipz
 20784  26A6  0008               	return
 20785                           
 20786                           ;RF_Control_B1.c: 11: {
 20787                           ;RF_Control_B1.c: 12: RF=&RF1;
 20788  26A7  30E7               	movlw	_RF1& (0+255)
 20789  26A8  00F1               	movwf	??i1_RfPointSelect
 20790  26A9  0871               	movf	??i1_RfPointSelect,w
 20791  26AA  00FB               	movwf	_RF
 20792  26AB  0008               	return
 20793  26AC                     __end_ofi1_RfPointSelect:	
 20794  007E                     btemp	set	126	;btemp
 20795  007E                     pic14e$flags	set	126
 20796  007E                     wtemp	set	126
 20797  007E                     wtemp0	set	126
 20798  0080                     wtemp1	set	128
 20799  0082                     wtemp2	set	130
 20800  0084                     wtemp3	set	132
 20801  0086                     wtemp4	set	134
 20802  0088                     wtemp5	set	136
 20803  007F                     wtemp6	set	127
 20804  007E                     ttemp	set	126
 20805  007E                     ttemp0	set	126
 20806  0081                     ttemp1	set	129
 20807  0084                     ttemp2	set	132
 20808  0087                     ttemp3	set	135
 20809  007F                     ttemp4	set	127
 20810  007E                     ltemp	set	126
 20811  007E                     ltemp0	set	126
 20812  0082                     ltemp1	set	130
 20813  0086                     ltemp2	set	134
 20814  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         254
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      76
    BANK2            80      0      64
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 2
		 -> NULL(NULL[0]), RF1(BANK1[2]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK1[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 7
		 -> NULL(NULL[0]), VarTimer0(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK2[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights1(BANK2[13]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 13
		 -> NULL(NULL[0]), DimmerLights1(BANK2[13]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  109459
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8274
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8274
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8274
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21673
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21673
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9556
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     1     1      0    1115
                                              4 BANK0      1     1      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1409
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1409
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29229
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29229
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28225
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26608
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10674
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     959
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6763
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6763
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6763
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2049
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8114
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6794
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4754
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2859
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1475
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1475
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10813
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10745
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2000
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1347
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10044
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10044
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     176      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     176      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Sep 15 16:39:33 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007A  
                                     _RD 0CA8                                       _RF 007B  
                __end_of_CC2500_WriteREG 19A3                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 276D  
             _getDimmerLights_StatusFlag 2761                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 1276                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 1CDB                     _setDimmerLights_Main 162A  
                           ___ftadd@sign 0048                                      l303 1337  
                                    l320 1C6D                                      l323 1C73  
                                    l307 1348                                      l353 197D  
                                    l354 197F                                      l292 1F19  
                                    l365 1992                                      l293 1F1E  
                                    l383 19E0                                      l287 1EEF  
                                    l296 1F21                                      l377 1890  
                                    l389 1B01                                      l664 1C47  
                                    l864 1197                                      _GIE 005F  
                                    _CRC 00B7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000C  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 00C4                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 00BB                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00E7  
                                    _ISR 0004          setPowerFault_Exceptions@command 002C  
                                    _Sw1 0157                                      _Buz 0078  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 198A  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 26B6  
                        __end_of_ADC_Set 2687                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 09F0                    _setDimmerLights_ERROR 10B5  
                  _setDimmerLights_AdjRF 1AB5                    _setDimmerLights_AdjGo 18E8  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 18B8  
                                   ?_ISR 0071                          _PowerFault_Main 2628  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1AFC  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l2024 1049                                     l2304 0E0D  
                                   l1602 194D                 ?_DimmerLightsPointSelect 0071  
                                   l3027 19FB                                     l2308 1E0A  
                                   l3217 0FA9                                     l1628 1D05  
                                   l2540 1FF8                                     l1813 0837  
                        __end_of_IOC_Set 27AB                                     l6000 08BE  
                                   l3194 131E                                     l6002 08C1  
                                   l3188 1307                                     l2741 264D  
                                   l6006 08CF                                     l6030 1C27  
                                   l2567 1E8E                                     l6042 1C39  
                                   l6034 1C2D                                     l6046 1C3F  
                                   l6038 1C33                                     l6072 1A7D  
                                   l6320 07F3                                     l7050 1E56  
                                   l6322 07F9                                     l6076 1A88  
                                   l7054 1E5D                                     l6190 125C  
                                   l6184 1249                                     l8202 1292  
                                   l9010 0DE5                                     l5810 0F32  
                                   l6194 1268                                     l8108 19F5  
                                   l8132 1769                                     l5900 0C32  
                                   l8212 12A2                                     l9020 0E04  
                                   l5820 0F48                                     l6284 1D4B  
                                   l6436 1E7C                                     l6188 124F  
                                   l9006 0DC8                                     l5814 0F39  
                                   l8128 174B                                     l8160 13F4  
                                   l8224 12BE                                     l8232 12CA  
                                   l8208 129C                                     l8216 12A8  
                                   l5840 0F7F                                     l5832 0F62  
                                   l9120 04FD                                     l9104 04C8  
                                   l7522 0BA9                                     l5770 12EE  
                                   l8242 1D27                                     l9018 0DFF  
                                   l5850 0F9B                                     l5842 0F84  
                                   l5922 0C84                                     l8322 097D  
                                   l9042 08F3                                     l9130 052F  
                                   l7516 0B81                                     l7524 0BAF  
                                   l5780 1314                                     l5772 12F3  
                                   l5764 12DD                                     l5908 0C4B  
                                   l8228 12C4                                     l6580 1F01  
                                   l5860 0FCD                                     l5852 0FA5  
                                   l5844 0F88                                     l5940 0CD5  
                                   l8332 09A1                                     l9052 0910  
                                   l8246 1D32                                     l8182 1CD0  
                                   l5870 0FE8                                     l5838 0F75  
                                   l9038 08EC                                     l7528 0BB6  
                                   l5768 12E4                                     l5880 0BDB  
                                   l5856 0FBB                                     l5952 0CF1  
                                   l5944 0CDD                                     l5928 0C9A  
                                   l8336 09B7                                     l9080 0955  
                                   l9064 092B                                     l9144 0573  
                                   l9304 0B17                                     l8506 1B12  
                                   l5778 130C                                     l8194 1286  
                                   l8178 1CC6                                     l9226 0E8C  
                                   l7474 1D9A                                     l7466 1D7C  
                                   l8362 117B                                     l9402 00F8  
                                   l8442 158B                                     l8610 107A  
                                   l9066 092F                                     l9154 05A6  
                                   l8508 1B1D                                     l5972 086A  
                                   l8284 0A5A                                     l7468 1D88  
                                   l5956 0CF9                                     l8452 15B0  
                                   l9316 1447                                     l5798 1A5A  
                                   l5886 0BF1                                     l5990 089A  
                                   l8198 128C                                     l8518 1EB9  
                                   l8542 1CE9                                     l7478 1DA3  
                                   l8366 118E                                     l9422 01A9  
                                   l8622 1090                                     l5992 08A8  
                                   l8368 1193                                     l9440 0211  
                                   l9416 018D                                     l9424 01C1  
                                   l9344 16E5                                     l8480 135A  
                                   l8448 15A7                                     l8802 1669  
                                   l9434 01F8                                     l8482 1372  
                                   l9282 0AA7                                     l9452 0241  
                                   l9460 0279                                     l9380 007D  
                                   l8708 1605                                     l9292 0AE0  
                                   l9524 1497                                     l5998 08B5  
                                   l8814 1695                                     l9366 1F69  
                                   l9462 027C                                     l8494 138B  
                                   l9288 0AD8                                     l9528 14AC  
                                   l9474 02A6                                     l8586 1040  
                                   l8922 063E                                     l9468 0293  
                                   l9396 00CA                                     l8676 1152  
                                   l8924 0647                                     l8880 14E2  
                                   _CFGS 0CAE                                     l8890 1542  
                                   l8962 06EC                                     l8946 06AD  
                                   l8796 1657                                     l8956 06DB  
                                   l8886 14FB                                     l8958 06E1  
                                   l8984 0D60                                     l8986 0D69  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 2731  
                                   _LATC 010E                                     u4105 0C13  
                                   u4025 0F9C                                     u4115 0C33  
                                   u4125 0C42                                     u4205 0CDE  
                                   u4135 0C4C                                     u4215 0CE4  
                                   u4315 089B                                     u4245 0CFA  
                                   u4095 0C03                                     u4255 0D00  
                                   u4175 0CA6                                     u4345 08B6  
                                   u4185 0CB6                                     _PEIE 005E  
                                   u4285 0871                                     _INTE 005C  
                                   _INTF 0059                                     u3815 1325  
                                   u3745 12E9                                     u3765 1302  
                                   u3935 0F63                                     u3785 130F  
                                   u6435 1D7F                                     u3965 0F76  
                                   u7510 13A3                                     u6455 1D89  
                                   u6545 0B42                                     u6465 1D93  
                                   u7515 13A1                                     u6475 1D9B  
                                   u3995 0F89                                     u9115 1436  
                                   u7445 19FC                                     u9045 0AC2  
                                   u9125 145F                                     u7455 1A01  
                                   u9215 1F50                                     u9145 1DD7  
                                   u9165 16B5                                     u9085 0B03  
                                   u7750 2697                                     u9335 01D9  
                                   u9175 16FA                                     u9285 0144  
                                   u7985 1B07                                     _LWLO 0CAD  
                                   _RFSW 00BC                                     _TMR0 0015  
                        __end_of_INT_Set 2658                                     _RSSI 00BD  
                                   _WREN 0CAA                                     _Buz1 014B  
                                   _Load 006E                                     _Temp 007C  
                                   _main 1470                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 2628                      __end_of_DlyOff_Main 1800  
                        __end_of_RF_Main 264D                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 27E2                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1DE5                      DelayTimejudge@value 0022  
                          _RfPointSelect 26E2               __end_of_setRFSW_AdjControl 1EA4  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 00F3  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                         __end_of_LED_Main 2791  
                  ?_setDimmerLights_Main 0071                          ?_setDelayOff_GO 0023  
                  __end_of_setLoad_Count 1943                                    ?_main 0071  
              setControl_Lights_Table@rf 0067                          __end_of___ftadd 1000  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0C6D  
                        __end_of___ftmul 0D21                          __end_of___fttol 08D8  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1DAA                   _setDimmerLights_Switch 1898  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E9  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0071  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0031                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                                  _TMain 007D                            setRF_Learn@rf 0023  
                                  _MainT 169C                                    _Load1 0220  
                          __CFG_WRT$HALF 0000                                    _Temp1 0130  
                       __end_of_TMR0_ISR 04B2             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 27B8                                    _getAD 1943  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 11BF  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 18C8              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 0380  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0071                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1919                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1399  
            __size_of_Flash_Memory_Write 0031                   ??_MainT_Initialization 0020  
                      ?_CC2500_SIDLEMode 0071               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0071                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0071                setDimmerLights_Main@clear 0065  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 11BF                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0071  
                      ??_Sw_DimmerOnFunc 0062                     __end_of_getLoad_Safe 270E  
                      ??_setPercentValue 0059                             __end_of_main 14DC  
                    ?_setRF_DimmerLights 005D                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0A86  
                   _setSw_Initialization 18D8               __size_of_setLoad_StatusOff 0031  
                                 ??_main 006C                            ___fttol@sign1 0053  
                           ?_setLog_Code 0071                  _setControl_Lights_Table 154A  
                 ?_Buzzer_Initialization 0071                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 262B                               _Receive_GO 0381  
                             _Receive_OK 0382                                ??_IOC_ISR 0071  
                 ?_setDimmerLights_ERROR 0071                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 26D7                                   ?_MainT 0071  
                 ?_setDimmerLights_AdjRF 0071                                ??_INT_ISR 0075  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 18D8                     __end_of_getTemp_Safe 2680  
                      i1RfPointSelect@rf 0072                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 1787  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0071  
                      ?_getPowerFault_AD 0071                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1A71                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1335                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 18A8                                   i1l1570 04A2  
                                 i1l7490 1C95                                   i1l7494 1C9F  
                                 i1l7930 03AA                                   i1l7906 0347  
                                 i1l7924 0391                                   i1l7932 03B0  
                                 i1l7942 03E3                                   i1l7926 0397  
                                 i1l7952 0412                                   i1l7882 1AF2  
                                 i1l7954 0418                                   i1l7938 03CC  
                                 i1l7946 03F7                                   i1l7966 044D  
                                 i1l7976 0483                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 u712_25 032A                                   _OSCCON 0099  
                                 u730_25 0495                       __size_of_Load_Main 029E  
                                 u729_25 0478                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1001  
                     DelayTime_1us@count 0020                               _VarProduct 01C5  
                  _Dimmer_Initialization 2664           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 192E                                   _Dimmer 00B9  
                                 _DlySw1 00D3              __size_of_setLoad_Exceptions 004A  
             __end_of_Mcu_Initialization 1971                      __end_of_Buzzer_Main 0BC4  
                                 _Memory 00EA                                   _Timer0 00EB  
     __end_of_setDimmerLights_TriggerAdj 1908               _setDimmerLights_TriggerAdj 18F8  
          setDimmerLights_Switch@command 0022                                   ___wmul 19F2  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 000C  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0071                                ??___lwdiv 0024  
                        i1_RfPointSelect 26A2              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C2  
                                 _s_data 00C3                                   _setLED 1276  
                       _DimmerLightsIntr 00BA                    ?_setSw_Initialization 0071  
                  setDimmerLights@status 0024                                   _setBuz 1710  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 279E  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0071  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0023                    __end_of_SwPointSelect 26E2  
                        ?_setLoad_Enable 0071                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                           _setTemp_Enable 26F8  
                        _RfSWPointSelect 2749             __size_of_Flash_Memory_Modify 006E  
            __size_of_DimmerLights_Close 001B                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 264D                        ?_Sw_DimmerAdjFunc 0071  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 121A         __end_of_CC2500_registers_address 182F  
   __end_of_setPowerFault_Initialization 27C6    __size_of_setPowerFault_Initialization 000E  
           _setPowerFault_Initialization 27B8                  __end_of__initialization 004C  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0071  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0071  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0071  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                          __end_of_MainT 1710                               ___fttol@f1 004B  
                         __pcstackCOMMON 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1A2F                            __end_of_getAD 1959  
                              ?_TMR0_ISR 0071                                ?_TMR0_Set 0071  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 2779                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 005A                         ??_DelayTimejudge 0020  
            ?_getDimmerLights_StatusFlag 0071                __size_of_setLoad_StatusOn 0032  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000C  
                       ?_setDimmerLights 0024                        __end_of_Load_Main 02EE  
                       ?_PowerFault_Main 0071                 __end_of_setDimmerReClock 27F1  
                     __size_of_getRxData 0052                      ?_LED_Initialization 0071  
                 __end_of_setTemp_Enable 2703                        ?_CC2500_WriteByte 0071  
                                ??_MainT 002A                           ??_setRF_Enable 0023  
                         _DimmerLights11 0079                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 262B                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002B             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                              _Buzzer_Main 0B1C  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 2631  
                 ?_Dimmer_Initialization 0071                                  ?_IO_Set 0071  
                             ??_LED_Main 0025                  _DelayOff_Initialization 263D  
                             __pnvCOMMON 007D                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0071                               _getPF_Safe 2672  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 26AC                      i1_setLoad_StatusOff 1C79  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 1470                      _CC2500_WriteCommand 1888  
                   ?_Temp_Initialization 0071         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 0025            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0073  
                          ?_setTemp_Main 0071                               ??_TMR0_Set 0020  
                             _getLoad_AD 0A86                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C5                  ?_setDimmerLights_Switch 0022  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 2680                _PowerFault_Initialization 2625  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1404  
           __end_of_setRF_Initialization 0807                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1E64  
                __end_of_RfSWPointSelect 2755                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0071                                  _IOC_ISR 1AD8  
                        ?_setTemp_Enable 0071                                  _IOC_Set 279E  
                   __size_of_setLog_Code 0049                                  _INT_ISR 2725  
                                _INT_Set 2652                     ?_CC2500_WriteCommand 0071  
                      _Flash_Memory_Main 1F2C                        _Flash_Memory_Read 19A3  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0071      setDimmerLights_TriggerERROR@command 0022  
                           _getLoad_Safe 2703                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 2649  
                     ?_Flash_Memory_Main 0071                       ?_Flash_Memory_Read 0071  
        __end_of_setControl_Lights_Table 15B9                              ?_TouchPower 0071  
                        _Sw_DimmerOnFunc 110C                          _setPercentValue 1F71  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0071                                  _Dimmer1 00E4  
           __end_of_CC2500_FrequencyCabr 273D                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00DC                                  _VarLED2 00E0  
                      __end_of_getRxData 10B5               __end_of_setPowerFault_Main 0E14  
               _CC2500_registers_address 1800                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 18B8  
                                _Product 006F                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 2679                           ??_setTemp_Main 002D  
         __end_of_setDimmerLights_Switch 18A8                                  ___ftadd 0F0A  
                         ??_setSw_Enable 0022                                  ___ftdiv 0BC4  
                        __size_of___wmul 001E                                  ___ftmul 0C6D  
                                ___fttol 0851                      __end_of_Switch_Main 186A  
                                ___lwdiv 1D73                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002B                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0077                           ??_setSw_Status 0023  
                                __ptext1 1404                                  __ptext2 1DAA  
                                __ptext3 0A86                                  __ptext4 1943  
                                __ptext5 262E                                  __ptext6 05FB  
                                __ptext7 101A                                  __ptext8 262B  
                                __ptext9 270E                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0072                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1F71                __end_of_Flash_Memory_Read 19BC  
                             _setRF_Main 08D8                            _DelayOff_Main 2641  
                      _DimmerLights_Main 266B                        __end_of_setINT_GO 2699  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 26CC                        ??_setRF_ReceiveGO 0074  
             __end_of_CC2500_ClearRXFIFO 2635                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 2639            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0071                       ?_DimmerLights_Main 0071  
                         _LedPointSelect 1A71                      _DelayOffPointSelect 273D  
                                clrloop0 265F           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 26A2                     end_of_initialization 004C  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 26ED  
                      _CC2500_InitSetREG 1B6F                            _DelayTime_1us 1AFC  
                      __end_of_setTxData 07E3               __end_of_Flash_Memory_Write 1D0C  
                                init_ram 2658                       ?_CC2500_InitSetREG 0071  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 2659                               _setSw_Main 04B2  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 19D7  
                            ?_getPF_Safe 0071                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 1908  
                          _CC2500_Enable 0380                         ?i1_RfPointSelect 0071  
                     ?_CC2500_ReadStatus 0071                         setRFSW_Status@sw 0023  
          __size_of_MainT_Initialization 000A                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 1335                            _CC2500_TxData 1EE8  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1BC3  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 003B            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0071                      _Flash_Memory_Modify 14DC  
                _DimmerLights_Exceptions 1165                              ?_getLoad_AD 0071  
                           __pstringtext 1800                      _Flash_Memory_Unlock 2687  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0071  
                       _setLoad_StatusOn 1D0C         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0071  
              setLoad_Exceptions@command 002C                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 2672                       _Mcu_Initialization 1959  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0071                         ?_RfSWPointSelect 0071  
                        _setSw_Main$4560 0067                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1A93                  __end_of_Sw_DimmerOnFunc 1165  
                __end_of_setPercentValue 1FB7                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1B99                      ?_Mcu_Initialization 0071  
       __end_of_setPowerFault_Exceptions 1E24                     ?_Flash_Memory_Modify 0071  
            __size_of_setRF_DimmerLights 006B                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1EA4                     ?_Flash_Memory_Unlock 0071  
              __end_of_CC2500_ReadStatus 19F2                            ?_RF_RxDisable 0071  
             __end_of_setLoad_Exceptions 0851                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 101A                     _setRF_Initialization 0800  
                            _Switch_Main 1866              setDimmerLights_Clear@lights 0023  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0071  
                         ?_CC2500_TxData 0071                  _DimmerLightsPointSelect 26CC  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1919  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0026  
                   setRF_DimmerLights@on 005D                           __end_of___wmul 1A10  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 01C4  
        __size_of_setOverTemp_Exceptions 0049                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0072                           __end_of_setLED 12D4  
                         __end_of_setBuz 1787                            _setLoad_Count 192E  
                   _CC2500_FrequencyCabr 2731                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0071  
                        _setRFSW_Control 0960                      __size_of_getPF_Safe 0007  
                      ?_setDimmerReClock 0071                      start_initialization 0018  
                      _setRF_DimmerValue 1D3E                          ?_LedPointSelect 0071  
             __end_of_DimmerLights_Close 19D7                                _Load_Main 0050  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0071  
                     ?_setRF_DimmerValue 0071               __end_of_CC2500_InitPATable 1A2F  
        __size_of_setTemp_Initialization 000B                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 071E  
                            ?_setLoad_GO 0071                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1888                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0071  
                               ??_IO_Set 0020                                _VarErrLED 00D8  
                            ?_setSw_Main 0071                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 006C                   ?_setLED_Initialization 0071  
                   __end_of_setSw_Status 1879                       Sw_DimmerAdjFunc@sw 0024  
                  ?_setRF_Initialization 0071                i1setLoad_StatusOff@lights 0072  
                              _VarMemory 01A0                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 26ED                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00CC                                _Temp_Main 262E  
              ??_DimmerLights_Exceptions 002A            setOverTemp_Exceptions@command 002C  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C0  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 2639               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 1D73                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4214 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0096  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 101A                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 013E  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002A                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1AB5                  __size_of_setRF_RxStatus 000E  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
                              __pnvBANK1 00EA              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0071                               ?_Temp_Main 0071  
                    __size_of_setRF_Main 0088                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0071  
                 _setTemp_Initialization 270E                         _getPowerFault_AD 1DAA  
      __size_of_setPowerFault_Exceptions 003F      __end_of_Flash_Memory_Initialization 0F0A  
            _Flash_Memory_Initialization 0E14                ?_setPowerFault_Exceptions 0071  
                              __ptext100 1787                                __ptext101 071E  
                              __ptext110 12D4                                __ptext102 26E2  
                              __ptext111 27F1                                __ptext103 186A  
                              __ptext120 273D                                __ptext112 2749  
                              __ptext104 26D7                                __ptext121 1919  
                              __ptext113 18A8                                __ptext105 1399  
                              __ptext130 2631                                __ptext122 2639  
                              __ptext114 1898                                __ptext106 1F71  
                              __ptext131 1888                                __ptext123 1C49  
                              __ptext115 26CC                                __ptext107 0851  
                              __ptext140 2725                                __ptext132 1971  
                              __ptext124 1B6F                                __ptext116 1710  
                              __ptext108 0BC4                                __ptext141 2719  
                              __ptext133 0B1C                                __ptext125 1A10  
                              __ptext117 19F2                                __ptext109 1A4F  
                               ?___ftadd 003E                                __ptext142 26A2  
                              __ptext134 26B6                                __ptext126 198A  
                              __ptext118 263D                                __ptext127 2731  
                              __ptext119 26C1                                __ptext136 02EE  
                              __ptext128 1AFC                                __ptext137 1C79  
                              __ptext129 2635                                __ptext138 1AD8  
                              __ptext139 27E2                                _getRxData 1063  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 09F0                          _setRF_ReceiveGO 2719  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 26C1  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002A                       __end_of_TouchPower 2652  
                     _setPowerFault_Main 0D21       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0021                      __size_of_setSw_Main 0149  
          __end_of_setDimmerLights_ERROR 110C             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1AD8            __end_of_setDimmerLights_AdjGo 18F8  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 18C8                           __size_of_MainT 0074  
                              _r_address 00C1             __end_of_CC2500_patable_vaule 1866  
                    ?_setPowerFault_Main 0071                           __size_of_getAD 0016  
                           _setRF_Enable 1B99                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002E                            _SwPointSelect 26D7  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 2690  
                    __end_of_setLED_Main 1E64                 __end_of_setLoad_StatusOn 1D3E  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 262E  
                      _CC2500_rfSettings 182F                           ___wmul@product 0024  
                               _LED_Main 2785                             ??_getPF_Safe 0020  
                        SwPointSelect@sw 0021                                clear_ram0 265E  
               CC2500_InitPATable@loop_d 0027                                _setTxData 071E  
    __end_of_DimmerLights_Initialization 2761              _DimmerLights_Initialization 2755  
                     _CC2500_ClearRXFIFO 2631                       _CC2500_ClearTXFIFO 2635  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 27E2  
                   ??_setPowerFault_Main 002D                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0073  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 1CDB  
                             ?_getRxData 0071                                 _TMR0_ISR 02EE  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1CAA  
                      setRF_ReceiveGO@rf 0074                                 _TMR0_Set 27AB  
                       _Sw_DimmerAdjFunc 1B22                      ?_CC2500_ClearRXFIFO 0071  
                    ?_CC2500_ClearTXFIFO 0071                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1B6F                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1898                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0071                         _Sw_DimmerOffFunc 15B9  
                  __size_of_setTemp_Main 0123             __end_of_MainT_Initialization 26B6  
                __size_of_setDelayOff_GO 005C                    __size_of_setSw_Enable 000F  
                               _DelayOff 00B8                             setSw_Main@sw 0068  
                            ??_Load_Main 002D                       __end_of_getPF_Safe 2679  
                       __size_of_IOC_ISR 0024                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 2779                           ?_SwPointSelect 0071  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 2000  
                  _DlyOff_Initialization 26C1                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0071                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 185E  
                       __size_of_RF_Main 0004                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0B1C                    _Switch_Initialization 2699  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 27F1                     __size_of_Buzzer_Main 00A8  
                     __end_of_getTemp_AD 1470                               ?_setTxData 0071  
                           ?_Switch_Main 0071                         _CC2500_WriteByte 1971  
                               _VarTMain 0120                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 2725  
                            ??_Temp_Main 0030                        ??_PowerFault_Main 002F  
                      setRFSW_Control@sw 0063                      _Load_Initialization 2791  
                              setLED@led 0023                                 _RxStatus 0383  
   __end_of_setDimmerLights_TriggerERROR 1BEE    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1BC3                                 _TxStatus 0386  
                           _setTemp_Main 05FB                       _setLoad_Exceptions 0807  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0071  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1879  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000A  
                               ___awtoft 1A4F                         ??_LedPointSelect 0020  
                               ___ftpack 12D4                             _setSw_Status 186A  
                      getTemp_AD@channel 0028                             ??_setRF_Main 0069  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1E24  
                    ?_setLoad_Exceptions 0071                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 1404                 ?_DelayOff_Initialization 0071  
                       setDelayOff_GO@sw 0027                          ___lwdiv@divisor 0020  
                   ?_Load_Initialization 0071                          ___lwdiv@counter 0027  
                               __ptext10 1866                                 __ptext11 04B2  
                               __ptext20 264D                                 __ptext12 27D4  
                               __ptext21 2649                                 __ptext13 110C  
                               __ptext30 1D3E                                 __ptext22 08D8  
                               __ptext14 15B9                                 __ptext31 1AB5  
                               __ptext23 1063                                 __ptext15 1B22  
                               __ptext40 07E3                                 __ptext32 11BF  
                               __ptext24 1FB7                                 __ptext16 18F8  
                               __ptext41 2645                                 __ptext33 0C6D  
                               __ptext25 154A                                 __ptext17 18E8  
                               __ptext50 27AB                                 __ptext42 0800  
                               __ptext34 0F0A                                 __ptext26 0960  
                               __ptext18 2699                                 __ptext51 1001  
                               __ptext43 2628                                 __ptext35 1B48  
                               __ptext27 121A                                 __ptext19 18D8  
                               __ptext60 0807                                 __ptext52 279E  
                               __ptext44 0D21                                 __ptext36 1EE8  
                               __ptext28 1C1B                                 __ptext61 1879  
                               __ptext53 2652                                 __ptext45 1DE5  
                               __ptext37 1335                                 __ptext29 1E64  
                               __ptext70 1D73                                 __ptext62 1B99  
                               __ptext54 2680                                 __ptext46 2703  
                               __ptext38 27C6                                 __ptext71 2791  
                               __ptext63 2690                                 __ptext55 26AC  
                               __ptext47 2625                                 __ptext39 19D7  
                               __ptext80 0E14                                 __ptext72 1A93  
                               __ptext64 1165                                 __ptext56 169C  
                               __ptext48 27B8                                 __ptext81 1CDB  
                               __ptext73 2785                                 __ptext65 1BC3  
                               __ptext57 26F8                                 __ptext49 1959  
                               __ptext90 192E                                 __ptext82 2687  
                               __ptext74 1E24                                 __ptext66 10B5  
                               __ptext58 18C8                                 __ptext91 1276  
                               __ptext83 19A3                                 __ptext75 2779  
                               __ptext67 18B8                                 __ptext59 0050  
                               __ptext92 1A71                                 __ptext84 266B  
                               __ptext76 1908                                 __ptext68 2679  
                               __ptext93 19BC                                 __ptext85 162A  
                               __ptext77 1F2C                                 __ptext69 2672  
                               __ptext94 26ED                                 __ptext86 1EA4  
                               __ptext78 14DC                                 __ptext95 2761  
                               __ptext87 1CAA                                 __ptext79 276D  
                               __ptext96 2755                                 __ptext88 09F0  
                               __ptext97 1BEE                                 __ptext89 1D0C  
                               __ptext98 2664                                 __ptext99 2641  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 000C           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 2800            __end_of_Dimmer_Initialization 266B  
           __end_of_setDimmerLights_Main 169C              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 006C                              _setRF_Learn 27D4  
               __end_of_CC2500_SIDLEMode 263D                           _setRF_RxStatus 27C6  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 2749  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 19BC  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000F  
                   ??_setLoad_Exceptions 002B                          _CC2500_ReadByte 07E3  
                     _CC2500_InitPATable 1A10      __size_of_getDimmerLights_StatusFlag 000C  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0960  
            __size_of_Mcu_Initialization 0018                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0071  
       setDimmerLights_TriggerAdj@lights 0023            ?_setDimmerLights_TriggerERROR 0022  
                    ?_CC2500_InitPATable 0071                          _CC2500_PowerRST 1C49  
                     __end_of_setLoad_GO 26F8              __end_of_Flash_Memory_Modify 154A  
                      ??_getPercentValue 0059                              _setLog_Code 1FB7  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 2690  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 198A  
                     __end_of_setSw_Main 05FB                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_GO 0384  
                          _Transceive_OK 0385                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0071                  ?_setOverTemp_Exceptions 0071  
                         _DelayTimejudge 1C1B                            ?_getLoad_Safe 0071  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 1DE5  
                   ??_DimmerLights_Close 0021                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0071  
                 __end_of_setRF_RxStatus 27D4                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1C1B  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1BEE  
            __end_of_setDimmerLights_Adj 1EE8                  ?_setTemp_Initialization 0071  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0073  
                 CC2500_InitPATable@temp 0026                     _MainT_Initialization 26AC  
                  __size_of_RF_RxDisable 0027                        _RF_Initialization 2645  
                            getLoad_AD@i 002B                              getLoad_AD@j 002A  
                          ?_getTemp_Safe 0071                     _Flash_Memory_Erasing 276D  
                     ?_RF_Initialization 0071                               _SPI0Buffer 00BF  
        __end_of_DelayOff_Initialization 2641                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 2645                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 121A  
       __size_of_setControl_Lights_Table 006F                        _setLoad_StatusOff 1CAA  
                 __end_of_DelayTimejudge 1C49           __end_of_setOverTemp_Exceptions 1063  
                 __size_of_RfPointSelect 000B                        ??i1_RfPointSelect 0071  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F6  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1B22                 __end_of_Sw_DimmerAdjFunc 1B48  
                __end_of_CC2500_ReadByte 0800             __end_of_setSw_Initialization 18E8  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 1B48               ?_PowerFault_Initialization 0071  
             __end_of_LED_Initialization 2785         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 2719  
               __size_of_Sw_DimmerOnFunc 0059                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0071                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 2649  
               __end_of_Sw_DimmerOffFunc 162A                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0071                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 1399                    __end_of_CC2500_TxData 1F2C  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1A93  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1C79  
