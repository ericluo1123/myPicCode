

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Sep 27 20:35:19 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	dabs	1,0x7E,2
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  0090                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0095                     	;# 
    95  0096                     	;# 
    96  0097                     	;# 
    97  0099                     	;# 
    98  009A                     	;# 
    99  009B                     	;# 
   100  009B                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  0116                     	;# 
   108  0117                     	;# 
   109  011D                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  018E                     	;# 
   113  0191                     	;# 
   114  0191                     	;# 
   115  0192                     	;# 
   116  0193                     	;# 
   117  0193                     	;# 
   118  0194                     	;# 
   119  0195                     	;# 
   120  0196                     	;# 
   121  0197                     	;# 
   122  0199                     	;# 
   123  019A                     	;# 
   124  019B                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019C                     	;# 
   129  019C                     	;# 
   130  019D                     	;# 
   131  019E                     	;# 
   132  019F                     	;# 
   133  020D                     	;# 
   134  0210                     	;# 
   135  0211                     	;# 
   136  0211                     	;# 
   137  0212                     	;# 
   138  0212                     	;# 
   139  0213                     	;# 
   140  0213                     	;# 
   141  0214                     	;# 
   142  0214                     	;# 
   143  0215                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0216                     	;# 
   147  0216                     	;# 
   148  0217                     	;# 
   149  0217                     	;# 
   150  0291                     	;# 
   151  0291                     	;# 
   152  0292                     	;# 
   153  0293                     	;# 
   154  0298                     	;# 
   155  0298                     	;# 
   156  0299                     	;# 
   157  029A                     	;# 
   158  0394                     	;# 
   159  0395                     	;# 
   160  0396                     	;# 
   161  0FE4                     	;# 
   162  0FE5                     	;# 
   163  0FE6                     	;# 
   164  0FE7                     	;# 
   165  0FE8                     	;# 
   166  0FE9                     	;# 
   167  0FEA                     	;# 
   168  0FEB                     	;# 
   169  0FED                     	;# 
   170  0FEE                     	;# 
   171  0FEF                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  0010                     	;# 
   188  0011                     	;# 
   189  0012                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  0090                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0099                     	;# 
   209  009A                     	;# 
   210  009B                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  0116                     	;# 
   219  0117                     	;# 
   220  011D                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  018E                     	;# 
   224  0191                     	;# 
   225  0191                     	;# 
   226  0192                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0194                     	;# 
   230  0195                     	;# 
   231  0196                     	;# 
   232  0197                     	;# 
   233  0199                     	;# 
   234  019A                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019C                     	;# 
   241  019D                     	;# 
   242  019E                     	;# 
   243  019F                     	;# 
   244  020D                     	;# 
   245  0210                     	;# 
   246  0211                     	;# 
   247  0211                     	;# 
   248  0212                     	;# 
   249  0212                     	;# 
   250  0213                     	;# 
   251  0213                     	;# 
   252  0214                     	;# 
   253  0214                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0216                     	;# 
   258  0216                     	;# 
   259  0217                     	;# 
   260  0217                     	;# 
   261  0291                     	;# 
   262  0291                     	;# 
   263  0292                     	;# 
   264  0293                     	;# 
   265  0298                     	;# 
   266  0298                     	;# 
   267  0299                     	;# 
   268  029A                     	;# 
   269  0394                     	;# 
   270  0395                     	;# 
   271  0396                     	;# 
   272  0FE4                     	;# 
   273  0FE5                     	;# 
   274  0FE6                     	;# 
   275  0FE7                     	;# 
   276  0FE8                     	;# 
   277  0FE9                     	;# 
   278  0FEA                     	;# 
   279  0FEB                     	;# 
   280  0FED                     	;# 
   281  0FEE                     	;# 
   282  0FEF                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000D                     	;# 
   297  000E                     	;# 
   298  0010                     	;# 
   299  0011                     	;# 
   300  0012                     	;# 
   301  0015                     	;# 
   302  0016                     	;# 
   303  0016                     	;# 
   304  0017                     	;# 
   305  0018                     	;# 
   306  0019                     	;# 
   307  001A                     	;# 
   308  001B                     	;# 
   309  001C                     	;# 
   310  008C                     	;# 
   311  008D                     	;# 
   312  008E                     	;# 
   313  0090                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0095                     	;# 
   317  0096                     	;# 
   318  0097                     	;# 
   319  0099                     	;# 
   320  009A                     	;# 
   321  009B                     	;# 
   322  009B                     	;# 
   323  009C                     	;# 
   324  009D                     	;# 
   325  009E                     	;# 
   326  010C                     	;# 
   327  010D                     	;# 
   328  010E                     	;# 
   329  0116                     	;# 
   330  0117                     	;# 
   331  011D                     	;# 
   332  018C                     	;# 
   333  018D                     	;# 
   334  018E                     	;# 
   335  0191                     	;# 
   336  0191                     	;# 
   337  0192                     	;# 
   338  0193                     	;# 
   339  0193                     	;# 
   340  0194                     	;# 
   341  0195                     	;# 
   342  0196                     	;# 
   343  0197                     	;# 
   344  0199                     	;# 
   345  019A                     	;# 
   346  019B                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019C                     	;# 
   351  019C                     	;# 
   352  019D                     	;# 
   353  019E                     	;# 
   354  019F                     	;# 
   355  020D                     	;# 
   356  0210                     	;# 
   357  0211                     	;# 
   358  0211                     	;# 
   359  0212                     	;# 
   360  0212                     	;# 
   361  0213                     	;# 
   362  0213                     	;# 
   363  0214                     	;# 
   364  0214                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0216                     	;# 
   369  0216                     	;# 
   370  0217                     	;# 
   371  0217                     	;# 
   372  0291                     	;# 
   373  0291                     	;# 
   374  0292                     	;# 
   375  0293                     	;# 
   376  0298                     	;# 
   377  0298                     	;# 
   378  0299                     	;# 
   379  029A                     	;# 
   380  0394                     	;# 
   381  0395                     	;# 
   382  0396                     	;# 
   383  0FE4                     	;# 
   384  0FE5                     	;# 
   385  0FE6                     	;# 
   386  0FE7                     	;# 
   387  0FE8                     	;# 
   388  0FE9                     	;# 
   389  0FEA                     	;# 
   390  0FEB                     	;# 
   391  0FED                     	;# 
   392  0FEE                     	;# 
   393  0FEF                     	;# 
   394  0000                     	;# 
   395  0001                     	;# 
   396  0002                     	;# 
   397  0003                     	;# 
   398  0004                     	;# 
   399  0005                     	;# 
   400  0006                     	;# 
   401  0007                     	;# 
   402  0008                     	;# 
   403  0009                     	;# 
   404  000A                     	;# 
   405  000B                     	;# 
   406  000C                     	;# 
   407  000D                     	;# 
   408  000E                     	;# 
   409  0010                     	;# 
   410  0011                     	;# 
   411  0012                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  008C                     	;# 
   422  008D                     	;# 
   423  008E                     	;# 
   424  0090                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0095                     	;# 
   428  0096                     	;# 
   429  0097                     	;# 
   430  0099                     	;# 
   431  009A                     	;# 
   432  009B                     	;# 
   433  009B                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  010C                     	;# 
   438  010D                     	;# 
   439  010E                     	;# 
   440  0116                     	;# 
   441  0117                     	;# 
   442  011D                     	;# 
   443  018C                     	;# 
   444  018D                     	;# 
   445  018E                     	;# 
   446  0191                     	;# 
   447  0191                     	;# 
   448  0192                     	;# 
   449  0193                     	;# 
   450  0193                     	;# 
   451  0194                     	;# 
   452  0195                     	;# 
   453  0196                     	;# 
   454  0197                     	;# 
   455  0199                     	;# 
   456  019A                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019C                     	;# 
   462  019C                     	;# 
   463  019D                     	;# 
   464  019E                     	;# 
   465  019F                     	;# 
   466  020D                     	;# 
   467  0210                     	;# 
   468  0211                     	;# 
   469  0211                     	;# 
   470  0212                     	;# 
   471  0212                     	;# 
   472  0213                     	;# 
   473  0213                     	;# 
   474  0214                     	;# 
   475  0214                     	;# 
   476  0215                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0216                     	;# 
   480  0216                     	;# 
   481  0217                     	;# 
   482  0217                     	;# 
   483  0291                     	;# 
   484  0291                     	;# 
   485  0292                     	;# 
   486  0293                     	;# 
   487  0298                     	;# 
   488  0298                     	;# 
   489  0299                     	;# 
   490  029A                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  0FE4                     	;# 
   495  0FE5                     	;# 
   496  0FE6                     	;# 
   497  0FE7                     	;# 
   498  0FE8                     	;# 
   499  0FE9                     	;# 
   500  0FEA                     	;# 
   501  0FEB                     	;# 
   502  0FED                     	;# 
   503  0FEE                     	;# 
   504  0FEF                     	;# 
   505                           
   506                           	psect	idataBANK1
   507  049A                     __pidataBANK1:	
   508                           
   509                           ;initializer for _VarProduct
   510  049A  3463               	retlw	99
   511  049B  3402               	retlw	2
   512  049C  3400               	retlw	0
   513  049D  3400               	retlw	0
   514  049E  3400               	retlw	0
   515  049F  3400               	retlw	0
   516  04A0  3400               	retlw	0
   517  04A1  3400               	retlw	0
   518  04A2  3400               	retlw	0
   519  04A3  3400               	retlw	0
   520  04A4  3400               	retlw	0
   521  04A5  3400               	retlw	0
   522  04A6  34FF               	retlw	255
   523  04A7  34FF               	retlw	255
   524  04A8  34FF               	retlw	255
   525  04A9  3400               	retlw	0
   526  04AA  3400               	retlw	0
   527  04AB  3400               	retlw	0
   528  04AC  3400               	retlw	0
   529  04AD  3400               	retlw	0
   530  04AE  3400               	retlw	0
   531  04AF  3400               	retlw	0
   532  04B0  3400               	retlw	0
   533  04B1  3400               	retlw	0
   534  04B2  3400               	retlw	0
   535  04B3  3400               	retlw	0
   536  04B4  3400               	retlw	0
   537  04B5  3400               	retlw	0
   538  04B6  3400               	retlw	0
   539  04B7  3400               	retlw	0
   540  04B8  3400               	retlw	0
   541  04B9  3400               	retlw	0
   542                           
   543                           	psect	stringtext
   544  0200                     __pstringtext:	
   545  0200                     _CC2500_registers_address:	
   546  0200  3403               	retlw	3
   547  0201  3416               	retlw	22
   548  0202  3417               	retlw	23
   549  0203  341E               	retlw	30
   550  0204  341F               	retlw	31
   551  0205  3420               	retlw	32
   552  0206  342A               	retlw	42
   553  0207  342B               	retlw	43
   554  0208  340B               	retlw	11
   555  0209  340C               	retlw	12
   556  020A  340D               	retlw	13
   557  020B  340E               	retlw	14
   558  020C  340F               	retlw	15
   559  020D  3410               	retlw	16
   560  020E  3411               	retlw	17
   561  020F  3412               	retlw	18
   562  0210  3413               	retlw	19
   563  0211  3414               	retlw	20
   564  0212  340A               	retlw	10
   565  0213  3415               	retlw	21
   566  0214  3421               	retlw	33
   567  0215  3422               	retlw	34
   568  0216  3418               	retlw	24
   569  0217  3419               	retlw	25
   570  0218  341A               	retlw	26
   571  0219  341B               	retlw	27
   572  021A  341C               	retlw	28
   573  021B  341D               	retlw	29
   574  021C  3423               	retlw	35
   575  021D  3424               	retlw	36
   576  021E  3425               	retlw	37
   577  021F  3426               	retlw	38
   578  0220  3429               	retlw	41
   579  0221  342C               	retlw	44
   580  0222  342D               	retlw	45
   581  0223  342E               	retlw	46
   582  0224  3400               	retlw	0
   583  0225  3401               	retlw	1
   584  0226  3402               	retlw	2
   585  0227  3407               	retlw	7
   586  0228  3408               	retlw	8
   587  0229  3409               	retlw	9
   588  022A  3406               	retlw	6
   589  022B  3404               	retlw	4
   590  022C  3405               	retlw	5
   591  022D  3427               	retlw	39
   592  022E  3428               	retlw	40
   593  022F                     __end_of_CC2500_registers_address:	
   594  022F                     _CC2500_rfSettings:	
   595  022F  3407               	retlw	7
   596  0230  3407               	retlw	7
   597  0231  3430               	retlw	48
   598  0232  3487               	retlw	135
   599  0233  346B               	retlw	107
   600  0234  34F8               	retlw	248
   601  0235  347F               	retlw	127
   602  0236  343F               	retlw	63
   603  0237  3409               	retlw	9
   604  0238  3400               	retlw	0
   605  0239  345C               	retlw	92
   606  023A  34A7               	retlw	167
   607  023B  3462               	retlw	98
   608  023C  3486               	retlw	134
   609  023D  3483               	retlw	131
   610  023E  3403               	retlw	3
   611  023F  3422               	retlw	34
   612  0240  34F8               	retlw	248
   613  0241  3400               	retlw	0
   614  0242  3444               	retlw	68
   615  0243  34B6               	retlw	182
   616  0244  3410               	retlw	16
   617  0245  3418               	retlw	24
   618  0246  341D               	retlw	29
   619  0247  341C               	retlw	28
   620  0248  34C7               	retlw	199
   621  0249  3400               	retlw	0
   622  024A  34B2               	retlw	178
   623  024B  34EA               	retlw	234
   624  024C  340A               	retlw	10
   625  024D  3400               	retlw	0
   626  024E  3411               	retlw	17
   627  024F  3459               	retlw	89
   628  0250  3488               	retlw	136
   629  0251  3431               	retlw	49
   630  0252  340B               	retlw	11
   631  0253  342F               	retlw	47
   632  0254  342E               	retlw	46
   633  0255  3406               	retlw	6
   634  0256  3404               	retlw	4
   635  0257  3405               	retlw	5
   636  0258  3400               	retlw	0
   637  0259  3430               	retlw	48
   638  025A  34D3               	retlw	211
   639  025B  3491               	retlw	145
   640  025C  3441               	retlw	65
   641  025D  3400               	retlw	0
   642  025E                     __end_of_CC2500_rfSettings:	
   643  025E                     _CC2500_patable_vaule:	
   644  025E  34FE               	retlw	254
   645  025F  34FE               	retlw	254
   646  0260  34FE               	retlw	254
   647  0261  34FE               	retlw	254
   648  0262  34FE               	retlw	254
   649  0263  34FE               	retlw	254
   650  0264  34FE               	retlw	254
   651  0265  34FE               	retlw	254
   652  0266                     __end_of_CC2500_patable_vaule:	
   653                           
   654                           	psect	nvCOMMON
   655  0076                     __pnvCOMMON:	
   656  0076                     _Product:	
   657  0076                     	ds	1
   658  0077                     _I2C:	
   659  0077                     	ds	1
   660                           
   661                           	psect	nvBANK0
   662  005C                     __pnvBANK0:	
   663  005C                     _TMain:	
   664  005C                     	ds	1
   665  005D                     _Timer1:	
   666  005D                     	ds	1
   667  005E                     _Tx_Length:	
   668  005E                     	ds	1
   669  000C                     _PORTA	set	12
   670  000D                     _PORTB	set	13
   671  000E                     _PORTC	set	14
   672  0018                     _T1CON	set	24
   673  0017                     _TMR1H	set	23
   674  0016                     _TMR1L	set	22
   675  005F                     _GIE	set	95
   676  005C                     _INTE	set	92
   677  0059                     _INTF	set	89
   678  005E                     _PEIE	set	94
   679  0060                     _RA0	set	96
   680  0061                     _RA1	set	97
   681  0068                     _RB0	set	104
   682  0069                     _RB1	set	105
   683  006A                     _RB2	set	106
   684  006B                     _RB3	set	107
   685  006D                     _RB5	set	109
   686  0070                     _RC0	set	112
   687  008B                     _SSPIF	set	139
   688  0088                     _TMR1IF	set	136
   689  0099                     _OSCCON	set	153
   690  008C                     _TRISA	set	140
   691  008D                     _TRISB	set	141
   692  008E                     _TRISC	set	142
   693  048B                     _SSPIE	set	1163
   694  0488                     _TMR1IE	set	1160
   695  010C                     _LATA	set	268
   696  010D                     _LATB	set	269
   697  010E                     _LATC	set	270
   698  018C                     _ANSELA	set	396
   699  018D                     _ANSELB	set	397
   700  018E                     _ANSELC	set	398
   701  0212                     _SSPADD	set	530
   702  0211                     _SSPBUF	set	529
   703  0215                     _SSPCON1	set	533
   704  0216                     _SSPCON2	set	534
   705  0214                     _SSPSTAT	set	532
   706  10B4                     _ACKEN	set	4276
   707  10B6                     _ACKSTAT	set	4278
   708  10B9                     _AHEN	set	4281
   709  10A0                     _BF	set	4256
   710  10AC                     _CKP	set	4268
   711  10B8                     _DHEN	set	4280
   712  10B2                     _PEN	set	4274
   713  10B3                     _RCEN	set	4275
   714  10A2                     _R_nW	set	4258
   715  10B0                     _SEN	set	4272
   716  10AE                     _SSPOV	set	4270
   717  1068                     _WPUB0	set	4200
   718                           
   719                           ; #config settings
   720  0000                     
   721                           	psect	cinit
   722  0018                     start_initialization:	
   723  0018                     __initialization:	
   724                           
   725                           ; Clear objects allocated to BITCOMMON
   726  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   727                           
   728                           ; Clear objects allocated to COMMON
   729  0019  01F8               	clrf	__pbssCOMMON& (0+127)
   730  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   731                           
   732                           ; Clear objects allocated to BANK0
   733  001B  3020               	movlw	low __pbssBANK0
   734  001C  0084               	movwf	4
   735  001D  3000               	movlw	high __pbssBANK0
   736  001E  0085               	movwf	5
   737  001F  3033               	movlw	51
   738  0020  3186  260B  3180   	fcall	clear_ram0
   739                           
   740                           ; Clear objects allocated to BANK2
   741  0023  3020               	movlw	low __pbssBANK2
   742  0024  0084               	movwf	4
   743  0025  3001               	movlw	high __pbssBANK2
   744  0026  0085               	movwf	5
   745  0027  3043               	movlw	67
   746  0028  3186  260B  3180   	fcall	clear_ram0
   747                           
   748                           ; Initialize objects allocated to BANK1
   749  002B  309A               	movlw	low __pidataBANK1
   750  002C  0084               	movwf	4
   751  002D  3084               	movlw	(high __pidataBANK1)| (0+128)
   752  002E  0085               	movwf	5
   753  002F  30A0               	movlw	low __pdataBANK1
   754  0030  0086               	movwf	6
   755  0031  3000               	movlw	high __pdataBANK1
   756  0032  0087               	movwf	7
   757  0033  3020               	movlw	32
   758  0034  3186  2611         	fcall	init_ram
   759  0036                     end_of_initialization:	
   760                           ;End of C runtime variable initialization code
   761                           
   762  0036                     __end_of__initialization:	
   763  0036  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   764  0037  0020               	movlb	0
   765  0038  3184  2C4E         	ljmp	_main	;jump to C main() function
   766                           
   767                           	psect	bitbssCOMMON
   768  0380                     __pbitbssCOMMON:	
   769  0380                     _CC2500_Enable:	
   770  0380                     	ds	1
   771  0381                     _Receive_GO:	
   772  0381                     	ds	1
   773  0382                     _Receive_OK:	
   774  0382                     	ds	1
   775  0383                     _RxStatus:	
   776  0383                     	ds	1
   777  0384                     _Transceive_GO:	
   778  0384                     	ds	1
   779  0385                     _Transceive_OK:	
   780  0385                     	ds	1
   781  0386                     _TxStatus:	
   782  0386                     	ds	1
   783                           
   784                           	psect	bssCOMMON
   785  0078                     __pbssCOMMON:	
   786  0078                     _RF:	
   787  0078                     	ds	1
   788  0079                     _RFSW:	
   789  0079                     	ds	1
   790                           
   791                           	psect	bssBANK0
   792  0020                     __pbssBANK0:	
   793  0020                     _RF_Data:	
   794  0020                     	ds	21
   795  0035                     _RF_Count:	
   796  0035                     	ds	2
   797  0037                     _CRC:	
   798  0037                     	ds	1
   799  0038                     _RSSI:	
   800  0038                     	ds	1
   801  0039                     _Rx_Length:	
   802  0039                     	ds	1
   803  003A                     _SPI0Buffer:	
   804  003A                     	ds	1
   805  003B                     _r_address:	
   806  003B                     	ds	1
   807  003C                     _r_data:	
   808  003C                     	ds	1
   809  003D                     _s_data:	
   810  003D                     	ds	1
   811  003E                     _VarTMain:	
   812  003E                     	ds	15
   813  004D                     _RF1:	
   814  004D                     	ds	3
   815  0050                     _VarTimer1:	
   816  0050                     	ds	3
   817                           
   818                           	psect	dataBANK1
   819  00A0                     __pdataBANK1:	
   820  00A0                     _VarProduct:	
   821  00A0                     	ds	32
   822                           
   823                           	psect	bssBANK2
   824  0120                     __pbssBANK2:	
   825  0120                     _VarI2C:	
   826  0120                     	ds	67
   827                           
   828                           	psect	clrtext
   829  060B                     clear_ram0:	
   830                           ;	Called with FSR0 containing the base address, and
   831                           ;	WREG with the size to clear
   832                           
   833  060B  0064               	clrwdt	;clear the watchdog before getting into this loop
   834  060C                     clrloop0:	
   835  060C  0180               	clrf	0	;clear RAM location pointed to by FSR
   836  060D  3101               	addfsr 0,1
   837  060E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   838  060F  2E0C               	goto	clrloop0	;have we reached the end yet?
   839  0610  3400               	retlw	0	;all done for this memory range, return
   840                           
   841                           	psect	inittext
   842  0611                     init_ram:	
   843  0611  00FE               	movwf	126
   844  0612                     initloop:	
   845  0612  0012               	moviw fsr0++
   846  0613  001E               	movwi fsr1++
   847  0614  0BFE               	decfsz	126,f
   848  0615  2E12               	goto	initloop
   849  0616  3400               	retlw	0
   850                           
   851                           	psect	cstackCOMMON
   852  0071                     __pcstackCOMMON:	
   853  0071                     ?_CC2500_WriteByte:	
   854  0071                     ?_CC2500_WriteCommand:	
   855                           ; 0 bytes @ 0x0
   856                           
   857  0071                     ?_CC2500_ReadStatus:	
   858                           ; 0 bytes @ 0x0
   859                           
   860  0071                     ?_CC2500_ReadByte:	
   861                           ; 0 bytes @ 0x0
   862                           
   863  0071                     ?_CC2500_PowerRST:	
   864                           ; 0 bytes @ 0x0
   865                           
   866  0071                     ?_CC2500_InitSetREG:	
   867                           ; 0 bytes @ 0x0
   868                           
   869  0071                     ?_CC2500_InitPATable:	
   870                           ; 0 bytes @ 0x0
   871                           
   872  0071                     ?_CC2500_ClearTXFIFO:	
   873                           ; 0 bytes @ 0x0
   874                           
   875  0071                     ?_CC2500_ClearRXFIFO:	
   876                           ; 0 bytes @ 0x0
   877                           
   878  0071                     ?_CC2500_FrequencyCabr:	
   879                           ; 0 bytes @ 0x0
   880                           
   881  0071                     ?_CC2500_SIDLEMode:	
   882                           ; 0 bytes @ 0x0
   883                           
   884  0071                     ?_setRF_Initialization:	
   885                           ; 0 bytes @ 0x0
   886                           
   887  0071                     ?_setRF_Main:	
   888                           ; 0 bytes @ 0x0
   889                           
   890  0071                     ?_I2C_SetData:	
   891                           ; 0 bytes @ 0x0
   892                           
   893  0071                     ?_setINT_GO:	
   894                           ; 0 bytes @ 0x0
   895                           
   896  0071                     ?_RF_RxDisable:	
   897                           ; 0 bytes @ 0x0
   898                           
   899  0071                     ?_MainT_Initial:	
   900                           ; 0 bytes @ 0x0
   901                           
   902  0071                     ?_Mcu_Initialization:	
   903                           ; 0 bytes @ 0x0
   904                           
   905  0071                     ?_MainT:	
   906                           ; 0 bytes @ 0x0
   907                           
   908  0071                     ?_I2C_Main:	
   909                           ; 0 bytes @ 0x0
   910                           
   911  0071                     ?_IO_Set:	
   912                           ; 0 bytes @ 0x0
   913                           
   914  0071                     ?_TMR1_Set:	
   915                           ; 0 bytes @ 0x0
   916                           
   917  0071                     ?_INT_Set:	
   918                           ; 0 bytes @ 0x0
   919                           
   920  0071                     ?_I2C_Set:	
   921                           ; 0 bytes @ 0x0
   922                           
   923  0071                     ?_TMR1_ISR:	
   924                           ; 0 bytes @ 0x0
   925                           
   926  0071                     ??_TMR1_ISR:	
   927                           ; 0 bytes @ 0x0
   928                           
   929  0071                     ?_INT_ISR:	
   930                           ; 0 bytes @ 0x0
   931                           
   932  0071                     ?_I2C_ISR:	
   933                           ; 0 bytes @ 0x0
   934                           
   935  0071                     ??_I2C_ISR:	
   936                           ; 0 bytes @ 0x0
   937                           
   938  0071                     ?_I2C_Slave_Mode:	
   939                           ; 0 bytes @ 0x0
   940                           
   941  0071                     ?_CC2500_TxData:	
   942                           ; 0 bytes @ 0x0
   943                           
   944  0071                     ?_CC2500_RxData:	
   945                           ; 0 bytes @ 0x0
   946                           
   947  0071                     ?_CC2500_PowerOnInitial:	
   948                           ; 0 bytes @ 0x0
   949                           
   950  0071                     ?_RfPointSelect:	
   951                           ; 0 bytes @ 0x0
   952                           
   953  0071                     ?_RF_Initialization:	
   954                           ; 0 bytes @ 0x0
   955                           
   956  0071                     ?_RF_Main:	
   957                           ; 0 bytes @ 0x0
   958                           
   959  0071                     ?_main:	
   960                           ; 0 bytes @ 0x0
   961                           
   962  0071                     ?_ISR:	
   963                           ; 0 bytes @ 0x0
   964                           
   965  0071                     ?i1_RfPointSelect:	
   966                           ; 0 bytes @ 0x0
   967                           
   968  0071                     ??i1_RfPointSelect:	
   969                           ; 0 bytes @ 0x0
   970                           
   971  0071                     setRF_Initialization@rf:	
   972                           ; 0 bytes @ 0x0
   973                           
   974                           
   975                           ; 1 bytes @ 0x0
   976  0071                     	ds	1
   977  0072                     i1RfPointSelect@rf:	
   978                           
   979                           ; 1 bytes @ 0x1
   980  0072                     	ds	1
   981  0073                     ?_setRF_ReceiveGO:	
   982  0073                     setRF_ReceiveGO@command:	
   983                           ; 0 bytes @ 0x2
   984                           
   985                           
   986                           ; 1 bytes @ 0x2
   987  0073                     	ds	1
   988  0074                     ??_setRF_ReceiveGO:	
   989  0074                     setRF_ReceiveGO@rf:	
   990                           ; 0 bytes @ 0x3
   991                           
   992                           
   993                           ; 1 bytes @ 0x3
   994  0074                     	ds	1
   995  0075                     ??_INT_ISR:	
   996  0075                     ??_ISR:	
   997                           ; 0 bytes @ 0x4
   998                           
   999                           
  1000                           ; 0 bytes @ 0x4
  1001  0075                     	ds	1
  1002                           
  1003                           	psect	cstackBANK0
  1004  0053                     __pcstackBANK0:	
  1005  0053                     ??_CC2500_WriteByte:	
  1006  0053                     ??_CC2500_ReadByte:	
  1007                           ; 0 bytes @ 0x0
  1008                           
  1009  0053                     ?_DelayTime_1us:	
  1010                           ; 0 bytes @ 0x0
  1011                           
  1012  0053                     ??_setRF_Initialization:	
  1013                           ; 0 bytes @ 0x0
  1014                           
  1015  0053                     ??_I2C_SetData:	
  1016                           ; 0 bytes @ 0x0
  1017                           
  1018  0053                     ??_setINT_GO:	
  1019                           ; 0 bytes @ 0x0
  1020                           
  1021  0053                     ??_MainT_Initial:	
  1022                           ; 0 bytes @ 0x0
  1023                           
  1024  0053                     ??_IO_Set:	
  1025                           ; 0 bytes @ 0x0
  1026                           
  1027  0053                     ??_TMR1_Set:	
  1028                           ; 0 bytes @ 0x0
  1029                           
  1030  0053                     ??_INT_Set:	
  1031                           ; 0 bytes @ 0x0
  1032                           
  1033  0053                     ??_I2C_Set:	
  1034                           ; 0 bytes @ 0x0
  1035                           
  1036  0053                     ??_I2C_Slave_Mode:	
  1037                           ; 0 bytes @ 0x0
  1038                           
  1039  0053                     ??_RfPointSelect:	
  1040                           ; 0 bytes @ 0x0
  1041                           
  1042  0053                     setINT_GO@command:	
  1043                           ; 0 bytes @ 0x0
  1044                           
  1045  0053                     DelayTime_1us@count:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048                           
  1049                           ; 2 bytes @ 0x0
  1050  0053                     	ds	1
  1051  0054                     ??_Mcu_Initialization:	
  1052  0054                     ??_RF_Initialization:	
  1053                           ; 0 bytes @ 0x1
  1054                           
  1055  0054                     CC2500_WriteByte@loop_a:	
  1056                           ; 0 bytes @ 0x1
  1057                           
  1058  0054                     CC2500_ReadByte@loop_b:	
  1059                           ; 1 bytes @ 0x1
  1060                           
  1061  0054                     RfPointSelect@rf:	
  1062                           ; 1 bytes @ 0x1
  1063                           
  1064                           
  1065                           ; 1 bytes @ 0x1
  1066  0054                     	ds	1
  1067  0055                     ??_CC2500_WriteCommand:	
  1068  0055                     ??_CC2500_ReadStatus:	
  1069                           ; 0 bytes @ 0x2
  1070                           
  1071  0055                     ?_setRF_RxStatus:	
  1072                           ; 0 bytes @ 0x2
  1073                           
  1074  0055                     ??_DelayTime_1us:	
  1075                           ; 0 bytes @ 0x2
  1076                           
  1077  0055                     ?_CC2500_WriteREG:	
  1078                           ; 0 bytes @ 0x2
  1079                           
  1080  0055                     ?_setRF_Enable:	
  1081                           ; 0 bytes @ 0x2
  1082                           
  1083  0055                     CC2500_WriteREG@value:	
  1084                           ; 0 bytes @ 0x2
  1085                           
  1086  0055                     setRF_RxStatus@command:	
  1087                           ; 1 bytes @ 0x2
  1088                           
  1089  0055                     setRF_Enable@command:	
  1090                           ; 1 bytes @ 0x2
  1091                           
  1092  0055                     I2C_SetData@command:	
  1093                           ; 1 bytes @ 0x2
  1094                           
  1095  0055                     I2C_Slave_Mode@i:	
  1096                           ; 1 bytes @ 0x2
  1097                           
  1098  0055                     DelayTime_1us@i:	
  1099                           ; 1 bytes @ 0x2
  1100                           
  1101                           
  1102                           ; 2 bytes @ 0x2
  1103  0055                     	ds	1
  1104  0056                     ??_setRF_RxStatus:	
  1105  0056                     ??_CC2500_WriteREG:	
  1106                           ; 0 bytes @ 0x3
  1107                           
  1108  0056                     ??_setRF_Enable:	
  1109                           ; 0 bytes @ 0x3
  1110                           
  1111  0056                     CC2500_WriteCommand@command:	
  1112                           ; 0 bytes @ 0x3
  1113                           
  1114  0056                     CC2500_ReadStatus@status_addr:	
  1115                           ; 1 bytes @ 0x3
  1116                           
  1117  0056                     setRF_RxStatus@rf:	
  1118                           ; 1 bytes @ 0x3
  1119                           
  1120  0056                     setRF_Enable@rf:	
  1121                           ; 1 bytes @ 0x3
  1122                           
  1123  0056                     I2C_SetData@i:	
  1124                           ; 1 bytes @ 0x3
  1125                           
  1126                           
  1127                           ; 1 bytes @ 0x3
  1128  0056                     	ds	1
  1129  0057                     ??_CC2500_ClearTXFIFO:	
  1130  0057                     ??_CC2500_ClearRXFIFO:	
  1131                           ; 0 bytes @ 0x4
  1132                           
  1133  0057                     ??_CC2500_SIDLEMode:	
  1134                           ; 0 bytes @ 0x4
  1135                           
  1136  0057                     ??_RF_RxDisable:	
  1137                           ; 0 bytes @ 0x4
  1138                           
  1139  0057                     ??_MainT:	
  1140                           ; 0 bytes @ 0x4
  1141                           
  1142  0057                     ??_I2C_Main:	
  1143                           ; 0 bytes @ 0x4
  1144                           
  1145  0057                     ??_CC2500_TxData:	
  1146                           ; 0 bytes @ 0x4
  1147                           
  1148  0057                     ??_CC2500_RxData:	
  1149                           ; 0 bytes @ 0x4
  1150                           
  1151  0057                     CC2500_WriteREG@w_addr:	
  1152                           ; 0 bytes @ 0x4
  1153                           
  1154  0057                     RF_RxDisable@rf:	
  1155                           ; 1 bytes @ 0x4
  1156                           
  1157  0057                     DelayTime_1us@j:	
  1158                           ; 1 bytes @ 0x4
  1159                           
  1160                           
  1161                           ; 2 bytes @ 0x4
  1162  0057                     	ds	1
  1163  0058                     ??_CC2500_InitSetREG:	
  1164  0058                     ??_CC2500_InitPATable:	
  1165                           ; 0 bytes @ 0x5
  1166                           
  1167  0058                     CC2500_TxData@loop_e:	
  1168                           ; 0 bytes @ 0x5
  1169                           
  1170  0058                     CC2500_RxData@loop_f:	
  1171                           ; 1 bytes @ 0x5
  1172                           
  1173                           
  1174                           ; 1 bytes @ 0x5
  1175  0058                     	ds	1
  1176  0059                     ??_CC2500_PowerRST:	
  1177  0059                     ??_CC2500_FrequencyCabr:	
  1178                           ; 0 bytes @ 0x6
  1179                           
  1180  0059                     ??_setRF_Main:	
  1181                           ; 0 bytes @ 0x6
  1182                           
  1183  0059                     CC2500_InitSetREG@temp1:	
  1184                           ; 0 bytes @ 0x6
  1185                           
  1186  0059                     CC2500_InitPATable@temp:	
  1187                           ; 1 bytes @ 0x6
  1188                           
  1189                           
  1190                           ; 1 bytes @ 0x6
  1191  0059                     	ds	1
  1192  005A                     CC2500_InitSetREG@temp2:	
  1193  005A                     CC2500_InitPATable@loop_d:	
  1194                           ; 1 bytes @ 0x7
  1195                           
  1196  005A                     setRF_Main@rf:	
  1197                           ; 1 bytes @ 0x7
  1198                           
  1199                           
  1200                           ; 1 bytes @ 0x7
  1201  005A                     	ds	1
  1202  005B                     ??_RF_Main:	
  1203  005B                     CC2500_InitSetREG@loop_c:	
  1204                           ; 0 bytes @ 0x8
  1205                           
  1206                           
  1207                           ; 1 bytes @ 0x8
  1208  005B                     	ds	1
  1209  005C                     ??_CC2500_PowerOnInitial:	
  1210  005C                     ??_main:	
  1211                           ; 0 bytes @ 0x9
  1212                           
  1213                           
  1214                           	psect	maintext
  1215  044E                     __pmaintext:	
  1216                           ; 0 bytes @ 0x9
  1217 ;;
  1218 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1219 ;;
  1220 ;; *************** function _main *****************
  1221 ;; Defined at:
  1222 ;;		line 6 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;		None
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;		None
  1227 ;; Return value:  Size  Location     Type
  1228 ;;		None               void
  1229 ;; Registers used:
  1230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1231 ;; Tracked objects:
  1232 ;;		On entry : 17F/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1236 ;;      Params:         0       0       0       0       0       0       0       0
  1237 ;;      Locals:         0       0       0       0       0       0       0       0
  1238 ;;      Temps:          0       0       0       0       0       0       0       0
  1239 ;;      Totals:         0       0       0       0       0       0       0       0
  1240 ;;Total ram usage:        0 bytes
  1241 ;; Hardware stack levels required when called:    9
  1242 ;; This function calls:
  1243 ;;		_CC2500_PowerOnInitial
  1244 ;;		_I2C_Main
  1245 ;;		_MainT
  1246 ;;		_MainT_Initial
  1247 ;;		_Mcu_Initialization
  1248 ;;		_RF_Initialization
  1249 ;;		_RF_Main
  1250 ;; This function is called by:
  1251 ;;		Startup code after reset
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           
  1256                           ;psect for function _main
  1257  044E                     _main:	
  1258                           
  1259                           ;myMain.c: 8: MainT_Initial();
  1260                           
  1261                           ;incstack = 0
  1262                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1263  044E  3185  258F  3184   	fcall	_MainT_Initial
  1264                           
  1265                           ;myMain.c: 9: Mcu_Initialization();
  1266  0451  3185  2580  3184   	fcall	_Mcu_Initialization
  1267                           
  1268                           ;myMain.c: 10: ;;
  1269                           ;myMain.c: 11: RF_Initialization();
  1270  0454  3186  2627  3184   	fcall	_RF_Initialization
  1271                           
  1272                           ;myMain.c: 12: CC2500_PowerOnInitial();
  1273  0457  3185  2547  3184   	fcall	_CC2500_PowerOnInitial
  1274  045A                     l3137:	
  1275                           ;myMain.c: 13: while(1)
  1276                           
  1277                           
  1278                           ;myMain.c: 14: {
  1279                           ;myMain.c: 17: if(TMain->T1_Timerout)
  1280  045A  0020               	movlb	0	; select bank0
  1281  045B  085C               	movf	_TMain,w
  1282  045C  0086               	movwf	6
  1283  045D  0187               	clrf	7
  1284  045E  1D01               	btfss	1,2
  1285  045F  2C5A               	goto	l3137
  1286                           
  1287                           ;myMain.c: 18: {
  1288                           ;myMain.c: 19: TMain->T1_Timerout = 0;
  1289  0460  085C               	movf	_TMain,w
  1290  0461  0086               	movwf	6
  1291  0462  0187               	clrf	7
  1292  0463  1101               	bcf	1,2
  1293                           
  1294                           ;myMain.c: 20: MainT();
  1295  0464  3182  22BB  3184   	fcall	_MainT
  1296                           
  1297                           ;myMain.c: 21: if(TMain->PowerON)
  1298  0467  0020               	movlb	0	; select bank0
  1299  0468  085C               	movf	_TMain,w
  1300  0469  0086               	movwf	6
  1301  046A  0187               	clrf	7
  1302  046B  1C01               	btfss	1,0
  1303  046C  2C5A               	goto	l3137
  1304                           
  1305                           ;myMain.c: 22: {
  1306                           ;myMain.c: 23: RF_Main();
  1307  046D  3186  2623  3184   	fcall	_RF_Main
  1308                           
  1309                           ;myMain.c: 24: I2C_Main();
  1310  0470  3183  2341  3184   	fcall	_I2C_Main
  1311                           
  1312                           ;myMain.c: 25: ;;
  1313                           ;myMain.c: 26: ;;
  1314  0473  2C5A               	goto	l3137
  1315  0474                     __end_of_main:	
  1316                           
  1317                           	psect	text1
  1318  0623                     __ptext1:	
  1319 ;; *************** function _RF_Main *****************
  1320 ;; Defined at:
  1321 ;;		line 24 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;		None
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;		None
  1326 ;; Return value:  Size  Location     Type
  1327 ;;		None               void
  1328 ;; Registers used:
  1329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1335 ;;      Params:         0       0       0       0       0       0       0       0
  1336 ;;      Locals:         0       0       0       0       0       0       0       0
  1337 ;;      Temps:          0       0       0       0       0       0       0       0
  1338 ;;      Totals:         0       0       0       0       0       0       0       0
  1339 ;;Total ram usage:        0 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; Hardware stack levels required when called:    8
  1342 ;; This function calls:
  1343 ;;		_setRF_Main
  1344 ;; This function is called by:
  1345 ;;		_main
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _RF_Main
  1351  0623                     _RF_Main:	
  1352                           
  1353                           ;RF_Control_B1.c: 27: setRF_Main(1);
  1354                           
  1355                           ;incstack = 0
  1356                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1357  0623  3001               	movlw	1
  1358  0624  3180  203A         	fcall	_setRF_Main
  1359  0626  0008               	return
  1360  0627                     __end_of_RF_Main:	
  1361                           
  1362                           	psect	text2
  1363  003A                     __ptext2:	
  1364 ;; *************** function _setRF_Main *****************
  1365 ;; Defined at:
  1366 ;;		line 58 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  rf              1    wreg     unsigned char 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  rf              1    7[BANK0 ] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;		None               void
  1373 ;; Registers used:
  1374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1380 ;;      Params:         0       0       0       0       0       0       0       0
  1381 ;;      Locals:         0       1       0       0       0       0       0       0
  1382 ;;      Temps:          0       1       0       0       0       0       0       0
  1383 ;;      Totals:         0       2       0       0       0       0       0       0
  1384 ;;Total ram usage:        2 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    7
  1387 ;; This function calls:
  1388 ;;		_CC2500_RxData
  1389 ;;		_CC2500_TxData
  1390 ;;		_CC2500_WriteCommand
  1391 ;;		_I2C_SetData
  1392 ;;		_RF_RxDisable
  1393 ;;		_RfPointSelect
  1394 ;;		_setINT_GO
  1395 ;; This function is called by:
  1396 ;;		_RF_Main
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           
  1401                           ;psect for function _setRF_Main
  1402  003A                     _setRF_Main:	
  1403                           
  1404                           ;incstack = 0
  1405                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1406                           ;setRF_Main@rf stored from wreg
  1407  003A  0020               	movlb	0	; select bank0
  1408  003B  00DA               	movwf	setRF_Main@rf
  1409                           
  1410                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  1411  003C  085A               	movf	setRF_Main@rf,w
  1412  003D  3185  25ED  3180   	fcall	_RfPointSelect
  1413                           
  1414                           ;RF_Control_B1.c: 61: if(RF->Enable)
  1415  0040  0878               	movf	_RF,w
  1416  0041  0086               	movwf	6
  1417  0042  0187               	clrf	7
  1418  0043  1C01               	btfss	1,0
  1419  0044  0008               	return
  1420                           
  1421                           ;RF_Control_B1.c: 62: {
  1422                           ;RF_Control_B1.c: 77: if(!RF->Key)
  1423  0045  0878               	movf	_RF,w
  1424  0046  0086               	movwf	6
  1425  0047  0187               	clrf	7
  1426  0048  1B81               	btfsc	1,7
  1427  0049  2876               	goto	l2833
  1428                           
  1429                           ;RF_Control_B1.c: 78: {
  1430                           ;RF_Control_B1.c: 79: if(RF->ReceiveGO)
  1431  004A  0878               	movf	_RF,w
  1432  004B  0086               	movwf	6
  1433  004C  0187               	clrf	7
  1434  004D  1C81               	btfss	1,1
  1435  004E  285B               	goto	l2821
  1436                           
  1437                           ;RF_Control_B1.c: 80: {
  1438                           ;RF_Control_B1.c: 81: RF->ReceiveGO=0;
  1439  004F  0878               	movf	_RF,w
  1440  0050  0086               	movwf	6
  1441  0051  0187               	clrf	7
  1442  0052  1081               	bcf	1,1
  1443                           
  1444                           ;RF_Control_B1.c: 82: CC2500_RxData();
  1445  0053  3182  2266  3180   	fcall	_CC2500_RxData
  1446                           
  1447                           ;RF_Control_B1.c: 84: I2C_SetData(1);
  1448  0056  3001               	movlw	1
  1449  0057  3180  20AB  3180   	fcall	_I2C_SetData
  1450                           
  1451                           ;RF_Control_B1.c: 92: }
  1452  005A  287A               	goto	l2835
  1453  005B                     l2821:	
  1454                           
  1455                           ;RF_Control_B1.c: 93: else
  1456                           ;RF_Control_B1.c: 94: {
  1457                           ;RF_Control_B1.c: 95: if(!RF->TransceiveGO)
  1458  005B  0878               	movf	_RF,w
  1459  005C  0086               	movwf	6
  1460  005D  0187               	clrf	7
  1461  005E  1901               	btfsc	1,2
  1462  005F  287A               	goto	l2835
  1463                           
  1464                           ;RF_Control_B1.c: 96: {
  1465                           ;RF_Control_B1.c: 98: if(!RF->RxStatus)
  1466  0060  0878               	movf	_RF,w
  1467  0061  0086               	movwf	6
  1468  0062  0187               	clrf	7
  1469  0063  1981               	btfsc	1,3
  1470  0064  287A               	goto	l2835
  1471                           
  1472                           ;RF_Control_B1.c: 99: {
  1473                           ;RF_Control_B1.c: 100: RF->RxStatus=1;
  1474  0065  0878               	movf	_RF,w
  1475  0066  0086               	movwf	6
  1476  0067  0187               	clrf	7
  1477  0068  1581               	bsf	1,3
  1478                           
  1479                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x36);
  1480  0069  3036               	movlw	54
  1481  006A  3185  25BB  3180   	fcall	_CC2500_WriteCommand
  1482                           
  1483                           ;RF_Control_B1.c: 102: CC2500_WriteCommand(0x34);
  1484  006D  3034               	movlw	52
  1485  006E  3185  25BB  3180   	fcall	_CC2500_WriteCommand
  1486                           
  1487                           ;RF_Control_B1.c: 103: setINT_GO(1);
  1488  0071  3001               	movlw	1
  1489  0072  3186  2602  3180   	fcall	_setINT_GO
  1490                           
  1491                           ;RF_Control_B1.c: 104: }
  1492                           ;RF_Control_B1.c: 106: }
  1493                           ;RF_Control_B1.c: 107: }
  1494                           ;RF_Control_B1.c: 108: }
  1495  0075  287A               	goto	l2835
  1496  0076                     l2833:	
  1497                           
  1498                           ;RF_Control_B1.c: 109: else
  1499                           ;RF_Control_B1.c: 110: {
  1500                           ;RF_Control_B1.c: 111: RF_RxDisable(1);
  1501  0076  3001               	movlw	1
  1502  0077  3184  2427  3180   	fcall	_RF_RxDisable
  1503  007A                     l2835:	
  1504                           
  1505                           ;RF_Control_B1.c: 112: }
  1506                           ;RF_Control_B1.c: 113: if(RF->TransceiveGO)
  1507  007A  0878               	movf	_RF,w
  1508  007B  0086               	movwf	6
  1509  007C  0187               	clrf	7
  1510  007D  1D01               	btfss	1,2
  1511  007E  0008               	return
  1512                           
  1513                           ;RF_Control_B1.c: 114: {
  1514                           ;RF_Control_B1.c: 115: RF_RxDisable(1);
  1515  007F  3001               	movlw	1
  1516  0080  3184  2427  3180   	fcall	_RF_RxDisable
  1517                           
  1518                           ;RF_Control_B1.c: 116: if(!RF->Debounce)
  1519  0083  0878               	movf	_RF,w
  1520  0084  0086               	movwf	6
  1521  0085  0187               	clrf	7
  1522  0086  1A81               	btfsc	1,5
  1523  0087  28A0               	goto	l2849
  1524                           
  1525                           ;RF_Control_B1.c: 117: {
  1526                           ;RF_Control_B1.c: 118: RF->DebounceTime++;
  1527  0088  3001               	movlw	1
  1528  0089  0020               	movlb	0	; select bank0
  1529  008A  00D9               	movwf	??_setRF_Main
  1530  008B  0A78               	incf	_RF,w
  1531  008C  0086               	movwf	6
  1532  008D  0187               	clrf	7
  1533  008E  0859               	movf	??_setRF_Main,w
  1534  008F  0781               	addwf	1,f
  1535                           
  1536                           ;RF_Control_B1.c: 119: if(RF->DebounceTime == 25)
  1537  0090  0A78               	incf	_RF,w
  1538  0091  0086               	movwf	6
  1539  0092  0187               	clrf	7
  1540  0093  0801               	movf	1,w
  1541  0094  3A19               	xorlw	25
  1542  0095  1D03               	skipz
  1543  0096  0008               	return
  1544                           
  1545                           ;RF_Control_B1.c: 120: {
  1546                           ;RF_Control_B1.c: 121: RF->DebounceTime=0;
  1547  0097  0A78               	incf	_RF,w
  1548  0098  0086               	movwf	6
  1549  0099  0187               	clrf	7
  1550  009A  0181               	clrf	1
  1551                           
  1552                           ;RF_Control_B1.c: 122: RF->Debounce=1;
  1553  009B  0878               	movf	_RF,w
  1554  009C  0086               	movwf	6
  1555  009D  0187               	clrf	7
  1556  009E  1681               	bsf	1,5
  1557                           
  1558                           ;RF_Control_B1.c: 123: }
  1559                           ;RF_Control_B1.c: 124: }
  1560  009F  0008               	return
  1561  00A0                     l2849:	
  1562                           
  1563                           ;RF_Control_B1.c: 125: else
  1564                           ;RF_Control_B1.c: 126: {
  1565                           ;RF_Control_B1.c: 127: RF->Debounce=0;
  1566  00A0  0878               	movf	_RF,w
  1567  00A1  0086               	movwf	6
  1568  00A2  0187               	clrf	7
  1569  00A3  1281               	bcf	1,5
  1570                           
  1571                           ;RF_Control_B1.c: 128: RF->TransceiveGO=0;
  1572  00A4  0878               	movf	_RF,w
  1573  00A5  0086               	movwf	6
  1574  00A6  0187               	clrf	7
  1575  00A7  1101               	bcf	1,2
  1576                           
  1577                           ;RF_Control_B1.c: 129: CC2500_TxData();
  1578  00A8  3183  2304         	fcall	_CC2500_TxData
  1579  00AA  0008               	return
  1580  00AB                     __end_of_setRF_Main:	
  1581                           
  1582                           	psect	text3
  1583  0427                     __ptext3:	
  1584 ;; *************** function _RF_RxDisable *****************
  1585 ;; Defined at:
  1586 ;;		line 199 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  rf              1    wreg     unsigned char 
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  rf              1    4[BANK0 ] unsigned char 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;		None               void
  1593 ;; Registers used:
  1594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1600 ;;      Params:         0       0       0       0       0       0       0       0
  1601 ;;      Locals:         0       1       0       0       0       0       0       0
  1602 ;;      Temps:          0       0       0       0       0       0       0       0
  1603 ;;      Totals:         0       1       0       0       0       0       0       0
  1604 ;;Total ram usage:        1 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; Hardware stack levels required when called:    6
  1607 ;; This function calls:
  1608 ;;		_CC2500_WriteCommand
  1609 ;;		_RfPointSelect
  1610 ;;		_setINT_GO
  1611 ;; This function is called by:
  1612 ;;		_setRF_Main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           
  1617                           ;psect for function _RF_RxDisable
  1618  0427                     _RF_RxDisable:	
  1619                           
  1620                           ;incstack = 0
  1621                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1622                           ;RF_RxDisable@rf stored from wreg
  1623  0427  0020               	movlb	0	; select bank0
  1624  0428  00D7               	movwf	RF_RxDisable@rf
  1625                           
  1626                           ;RF_Control_B1.c: 201: RfPointSelect(rf);
  1627  0429  0857               	movf	RF_RxDisable@rf,w
  1628  042A  3185  25ED  3184   	fcall	_RfPointSelect
  1629                           
  1630                           ;RF_Control_B1.c: 203: if(RF->RxStatus)
  1631  042D  0878               	movf	_RF,w
  1632  042E  0086               	movwf	6
  1633  042F  0187               	clrf	7
  1634  0430  1D81               	btfss	1,3
  1635  0431  0008               	return
  1636                           
  1637                           ;RF_Control_B1.c: 204: {
  1638                           ;RF_Control_B1.c: 205: RF->RxStatus=0;
  1639  0432  0878               	movf	_RF,w
  1640  0433  0086               	movwf	6
  1641  0434  0187               	clrf	7
  1642  0435  1181               	bcf	1,3
  1643                           
  1644                           ;RF_Control_B1.c: 206: RF->ReceiveGO=0;
  1645  0436  0878               	movf	_RF,w
  1646  0437  0086               	movwf	6
  1647  0438  0187               	clrf	7
  1648  0439  1081               	bcf	1,1
  1649                           
  1650                           ;RF_Control_B1.c: 207: RF->DebounceTime=0;
  1651  043A  0A78               	incf	_RF,w
  1652  043B  0086               	movwf	6
  1653  043C  0187               	clrf	7
  1654  043D  0181               	clrf	1
  1655                           
  1656                           ;RF_Control_B1.c: 208: RF->Debounce=0;
  1657  043E  0878               	movf	_RF,w
  1658  043F  0086               	movwf	6
  1659  0440  0187               	clrf	7
  1660  0441  1281               	bcf	1,5
  1661                           
  1662                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x36);
  1663  0442  3036               	movlw	54
  1664  0443  3185  25BB  3184   	fcall	_CC2500_WriteCommand
  1665                           
  1666                           ;RF_Control_B1.c: 210: CC2500_WriteCommand(0x3A);
  1667  0446  303A               	movlw	58
  1668  0447  3185  25BB  3184   	fcall	_CC2500_WriteCommand
  1669                           
  1670                           ;RF_Control_B1.c: 211: setINT_GO(0);
  1671  044A  3000               	movlw	0
  1672  044B  3186  2602         	fcall	_setINT_GO
  1673  044D  0008               	return
  1674  044E                     __end_of_RF_RxDisable:	
  1675                           
  1676                           	psect	text4
  1677  0304                     __ptext4:	
  1678 ;; *************** function _CC2500_TxData *****************
  1679 ;; Defined at:
  1680 ;;		line 30 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;  loop_e          1    5[BANK0 ] unsigned char 
  1685 ;; Return value:  Size  Location     Type
  1686 ;;		None               void
  1687 ;; Registers used:
  1688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1694 ;;      Params:         0       0       0       0       0       0       0       0
  1695 ;;      Locals:         0       1       0       0       0       0       0       0
  1696 ;;      Temps:          0       1       0       0       0       0       0       0
  1697 ;;      Totals:         0       2       0       0       0       0       0       0
  1698 ;;Total ram usage:        2 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; Hardware stack levels required when called:    6
  1701 ;; This function calls:
  1702 ;;		_CC2500_WriteByte
  1703 ;;		_CC2500_WriteCommand
  1704 ;; This function is called by:
  1705 ;;		_setRF_Main
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           
  1710                           ;psect for function _CC2500_TxData
  1711  0304                     _CC2500_TxData:	
  1712                           
  1713                           ;CC2500_B1.c: 32: unsigned char loop_e;
  1714                           ;CC2500_B1.c: 34: RB5=0;
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1718  0304  0020               	movlb	0	; select bank0
  1719  0305  128D               	bcf	13,5	;volatile
  1720                           
  1721                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  1722  0306  307F               	movlw	127
  1723  0307  00D7               	movwf	??_CC2500_TxData
  1724  0308  0857               	movf	??_CC2500_TxData,w
  1725  0309  00BA               	movwf	_SPI0Buffer
  1726  030A                     l103:	
  1727                           ;CC2500_B1.c: 36: while(RB3==1);
  1728                           
  1729  030A  198D               	btfsc	13,3	;volatile
  1730  030B  2B0A               	goto	l103
  1731                           
  1732                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  1733  030C  3185  255C  3183   	fcall	_CC2500_WriteByte
  1734                           
  1735                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  1736  030F  0020               	movlb	0	; select bank0
  1737  0310  085E               	movf	_Tx_Length,w
  1738  0311  00D7               	movwf	??_CC2500_TxData
  1739  0312  0857               	movf	??_CC2500_TxData,w
  1740  0313  00BA               	movwf	_SPI0Buffer
  1741                           
  1742                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  1743  0314  3185  255C  3183   	fcall	_CC2500_WriteByte
  1744                           
  1745                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  1746  0317  0020               	movlb	0	; select bank0
  1747  0318  01D8               	clrf	CC2500_TxData@loop_e
  1748  0319                     l2629:	
  1749  0319  085E               	movf	_Tx_Length,w
  1750  031A  0258               	subwf	CC2500_TxData@loop_e,w
  1751  031B  1803               	btfsc	3,0
  1752  031C  2B2E               	goto	l108
  1753                           
  1754                           ;CC2500_B1.c: 41: {
  1755                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  1756  031D  0858               	movf	CC2500_TxData@loop_e,w
  1757  031E  3E20               	addlw	_RF_Data& (0+255)
  1758  031F  0086               	movwf	6
  1759  0320  0187               	clrf	7
  1760  0321  0801               	movf	1,w
  1761  0322  00D7               	movwf	??_CC2500_TxData
  1762  0323  0857               	movf	??_CC2500_TxData,w
  1763  0324  00BA               	movwf	_SPI0Buffer
  1764                           
  1765                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  1766  0325  3185  255C  3183   	fcall	_CC2500_WriteByte
  1767  0328  3001               	movlw	1
  1768  0329  0020               	movlb	0	; select bank0
  1769  032A  00D7               	movwf	??_CC2500_TxData
  1770  032B  0857               	movf	??_CC2500_TxData,w
  1771  032C  07D8               	addwf	CC2500_TxData@loop_e,f
  1772  032D  2B19               	goto	l2629
  1773  032E                     l108:	
  1774                           
  1775                           ;CC2500_B1.c: 44: }
  1776                           ;CC2500_B1.c: 45: RB5=1;
  1777  032E  168D               	bsf	13,5	;volatile
  1778                           
  1779                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  1780  032F  3035               	movlw	53
  1781  0330  3185  25BB  3183   	fcall	_CC2500_WriteCommand
  1782  0333                     l109:	
  1783                           ;CC2500_B1.c: 47: while(RB0==0);
  1784                           
  1785  0333  0020               	movlb	0	; select bank0
  1786  0334  1C0D               	btfss	13,0	;volatile
  1787  0335  2B33               	goto	l109
  1788  0336                     l112:	
  1789                           ;CC2500_B1.c: 48: while(RB0==1);
  1790                           
  1791  0336  180D               	btfsc	13,0	;volatile
  1792  0337  2B36               	goto	l112
  1793                           
  1794                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  1795  0338  3036               	movlw	54
  1796  0339  3185  25BB  3183   	fcall	_CC2500_WriteCommand
  1797                           
  1798                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  1799  033C  303B               	movlw	59
  1800  033D  3185  25BB         	fcall	_CC2500_WriteCommand
  1801                           
  1802                           ;CC2500_B1.c: 51: Transceive_OK=1;
  1803  033F  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  1804  0340  0008               	return
  1805  0341                     __end_of_CC2500_TxData:	
  1806                           
  1807                           	psect	text5
  1808  0266                     __ptext5:	
  1809 ;; *************** function _CC2500_RxData *****************
  1810 ;; Defined at:
  1811 ;;		line 56 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  loop_f          1    5[BANK0 ] unsigned char 
  1816 ;; Return value:  Size  Location     Type
  1817 ;;		None               void
  1818 ;; Registers used:
  1819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1825 ;;      Params:         0       0       0       0       0       0       0       0
  1826 ;;      Locals:         0       1       0       0       0       0       0       0
  1827 ;;      Temps:          0       1       0       0       0       0       0       0
  1828 ;;      Totals:         0       2       0       0       0       0       0       0
  1829 ;;Total ram usage:        2 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:    6
  1832 ;; This function calls:
  1833 ;;		_CC2500_ReadByte
  1834 ;;		_CC2500_ReadStatus
  1835 ;;		_CC2500_WriteByte
  1836 ;;		_CC2500_WriteCommand
  1837 ;;		_setRF_RxStatus
  1838 ;; This function is called by:
  1839 ;;		_setRF_Main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           
  1844                           ;psect for function _CC2500_RxData
  1845  0266                     _CC2500_RxData:	
  1846                           
  1847                           ;CC2500_B1.c: 58: unsigned char loop_f;
  1848                           ;CC2500_B1.c: 62: if(RB0 == 1)
  1849                           
  1850                           ;incstack = 0
  1851                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1852  0266  0020               	movlb	0	; select bank0
  1853  0267  180D               	btfsc	13,0	;volatile
  1854  0268                     l119:	
  1855                           ;CC2500_B1.c: 63: {
  1856                           ;CC2500_B1.c: 64: while(RB0 == 1);
  1857                           
  1858  0268  180D               	btfsc	13,0	;volatile
  1859  0269  2A68               	goto	l119
  1860                           
  1861                           ;CC2500_B1.c: 65: }
  1862                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  1863  026A  303B               	movlw	59
  1864  026B  3184  24F0  3182   	fcall	_CC2500_ReadStatus
  1865                           
  1866                           ;CC2500_B1.c: 67: if(s_data != 0)
  1867  026E  0020               	movlb	0	; select bank0
  1868  026F  083D               	movf	_s_data,w
  1869  0270  1903               	btfsc	3,2
  1870  0271  2AAD               	goto	l2675
  1871                           
  1872                           ;CC2500_B1.c: 69: {
  1873                           ;CC2500_B1.c: 70: RB5=0;
  1874  0272  128D               	bcf	13,5	;volatile
  1875                           
  1876                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  1877  0273  30FF               	movlw	255
  1878  0274  00D7               	movwf	??_CC2500_RxData
  1879  0275  0857               	movf	??_CC2500_RxData,w
  1880  0276  00BA               	movwf	_SPI0Buffer
  1881  0277                     l123:	
  1882                           ;CC2500_B1.c: 72: while(RB3==1);
  1883                           
  1884  0277  198D               	btfsc	13,3	;volatile
  1885  0278  2A77               	goto	l123
  1886                           
  1887                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  1888  0279  3185  255C  3182   	fcall	_CC2500_WriteByte
  1889                           
  1890                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  1891  027C  3184  24D9  3182   	fcall	_CC2500_ReadByte
  1892                           
  1893                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  1894  027F  0020               	movlb	0	; select bank0
  1895  0280  083A               	movf	_SPI0Buffer,w
  1896  0281  00D7               	movwf	??_CC2500_RxData
  1897  0282  0857               	movf	??_CC2500_RxData,w
  1898  0283  00B9               	movwf	_Rx_Length
  1899                           
  1900                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  1901  0284  01D8               	clrf	CC2500_RxData@loop_f
  1902  0285                     l2661:	
  1903  0285  0839               	movf	_Rx_Length,w
  1904  0286  0258               	subwf	CC2500_RxData@loop_f,w
  1905  0287  1803               	btfsc	3,0
  1906  0288  2A9A               	goto	l2663
  1907                           
  1908                           ;CC2500_B1.c: 78: {
  1909                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  1910  0289  3184  24D9  3182   	fcall	_CC2500_ReadByte
  1911                           
  1912                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  1913  028C  0020               	movlb	0	; select bank0
  1914  028D  083A               	movf	_SPI0Buffer,w
  1915  028E  00D7               	movwf	??_CC2500_RxData
  1916  028F  0858               	movf	CC2500_RxData@loop_f,w
  1917  0290  3E20               	addlw	_RF_Data& (0+255)
  1918  0291  0086               	movwf	6
  1919  0292  0187               	clrf	7
  1920  0293  0857               	movf	??_CC2500_RxData,w
  1921  0294  0081               	movwf	1
  1922  0295  3001               	movlw	1
  1923  0296  00D7               	movwf	??_CC2500_RxData
  1924  0297  0857               	movf	??_CC2500_RxData,w
  1925  0298  07D8               	addwf	CC2500_RxData@loop_f,f
  1926  0299  2A85               	goto	l2661
  1927  029A                     l2663:	
  1928                           
  1929                           ;CC2500_B1.c: 81: }
  1930                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  1931  029A  3184  24D9  3182   	fcall	_CC2500_ReadByte
  1932                           
  1933                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  1934  029D  0020               	movlb	0	; select bank0
  1935  029E  083A               	movf	_SPI0Buffer,w
  1936  029F  00D7               	movwf	??_CC2500_RxData
  1937  02A0  0857               	movf	??_CC2500_RxData,w
  1938  02A1  00B8               	movwf	_RSSI
  1939                           
  1940                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  1941  02A2  3184  24D9  3182   	fcall	_CC2500_ReadByte
  1942                           
  1943                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  1944  02A5  0020               	movlb	0	; select bank0
  1945  02A6  083A               	movf	_SPI0Buffer,w
  1946  02A7  00D7               	movwf	??_CC2500_RxData
  1947  02A8  0857               	movf	??_CC2500_RxData,w
  1948  02A9  00B7               	movwf	_CRC
  1949                           
  1950                           ;CC2500_B1.c: 86: RB5=1;
  1951  02AA  168D               	bsf	13,5	;volatile
  1952                           
  1953                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  1954  02AB  1BB7               	btfsc	_CRC,7
  1955                           
  1956                           ;CC2500_B1.c: 88: Receive_OK=1;
  1957  02AC  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  1958  02AD                     l2675:	
  1959                           
  1960                           ;CC2500_B1.c: 89: }
  1961                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  1962  02AD  3036               	movlw	54
  1963  02AE  3185  25BB  3182   	fcall	_CC2500_WriteCommand
  1964                           
  1965                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  1966  02B1  303A               	movlw	58
  1967  02B2  3185  25BB  3182   	fcall	_CC2500_WriteCommand
  1968                           
  1969                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  1970  02B5  0020               	movlb	0	; select bank0
  1971  02B6  01D5               	clrf	setRF_RxStatus@command
  1972  02B7  3001               	movlw	1
  1973  02B8  3185  25AD         	fcall	_setRF_RxStatus
  1974  02BA  0008               	return
  1975  02BB                     __end_of_CC2500_RxData:	
  1976                           
  1977                           	psect	text6
  1978  05AD                     __ptext6:	
  1979 ;; *************** function _setRF_RxStatus *****************
  1980 ;; Defined at:
  1981 ;;		line 43 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  rf              1    wreg     unsigned char 
  1984 ;;  command         1    2[BANK0 ] unsigned char 
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;  rf              1    3[BANK0 ] unsigned char 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;		None               void
  1989 ;; Registers used:
  1990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1996 ;;      Params:         0       1       0       0       0       0       0       0
  1997 ;;      Locals:         0       1       0       0       0       0       0       0
  1998 ;;      Temps:          0       0       0       0       0       0       0       0
  1999 ;;      Totals:         0       2       0       0       0       0       0       0
  2000 ;;Total ram usage:        2 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    5
  2003 ;; This function calls:
  2004 ;;		_RfPointSelect
  2005 ;; This function is called by:
  2006 ;;		_CC2500_RxData
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           
  2011                           ;psect for function _setRF_RxStatus
  2012  05AD                     _setRF_RxStatus:	
  2013                           
  2014                           ;incstack = 0
  2015                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2016                           ;setRF_RxStatus@rf stored from wreg
  2017  05AD  0020               	movlb	0	; select bank0
  2018  05AE  00D6               	movwf	setRF_RxStatus@rf
  2019                           
  2020                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  2021  05AF  0856               	movf	setRF_RxStatus@rf,w
  2022  05B0  3185  25ED         	fcall	_RfPointSelect
  2023                           
  2024                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  2025  05B2  0878               	movf	_RF,w
  2026  05B3  0086               	movwf	6
  2027  05B4  0187               	clrf	7
  2028  05B5  0020               	movlb	0	; select bank0
  2029  05B6  0855               	movf	setRF_RxStatus@command,w
  2030  05B7  1181               	bcf	1,3
  2031  05B8  1D03               	skipz
  2032  05B9  1581               	bsf	1,3
  2033  05BA  0008               	return
  2034  05BB                     __end_of_setRF_RxStatus:	
  2035                           
  2036                           	psect	text7
  2037  04F0                     __ptext7:	
  2038 ;; *************** function _CC2500_ReadStatus *****************
  2039 ;; Defined at:
  2040 ;;		line 267 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  status_addr     1    wreg     unsigned char 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  status_addr     1    3[BANK0 ] unsigned char 
  2045 ;; Return value:  Size  Location     Type
  2046 ;;		None               void
  2047 ;; Registers used:
  2048 ;;		wreg, status,2, status,0, pclath, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2054 ;;      Params:         0       0       0       0       0       0       0       0
  2055 ;;      Locals:         0       1       0       0       0       0       0       0
  2056 ;;      Temps:          0       1       0       0       0       0       0       0
  2057 ;;      Totals:         0       2       0       0       0       0       0       0
  2058 ;;Total ram usage:        2 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    5
  2061 ;; This function calls:
  2062 ;;		_CC2500_ReadByte
  2063 ;;		_CC2500_WriteByte
  2064 ;; This function is called by:
  2065 ;;		_CC2500_RxData
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           
  2070                           ;psect for function _CC2500_ReadStatus
  2071  04F0                     _CC2500_ReadStatus:	
  2072                           
  2073                           ;incstack = 0
  2074                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  2075                           ;CC2500_ReadStatus@status_addr stored from wreg
  2076  04F0  0020               	movlb	0	; select bank0
  2077  04F1  00D6               	movwf	CC2500_ReadStatus@status_addr
  2078                           
  2079                           ;CC2500_B1.c: 269: RB5=0;
  2080  04F2  128D               	bcf	13,5	;volatile
  2081                           
  2082                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  2083  04F3  0856               	movf	CC2500_ReadStatus@status_addr,w
  2084  04F4  3EC0               	addlw	192
  2085  04F5  00D5               	movwf	??_CC2500_ReadStatus
  2086  04F6  0855               	movf	??_CC2500_ReadStatus,w
  2087  04F7  00BA               	movwf	_SPI0Buffer
  2088  04F8                     l199:	
  2089                           ;CC2500_B1.c: 272: while(RB3==1);
  2090                           
  2091  04F8  198D               	btfsc	13,3	;volatile
  2092  04F9  2CF8               	goto	l199
  2093                           
  2094                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  2095  04FA  3185  255C  3184   	fcall	_CC2500_WriteByte
  2096                           
  2097                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  2098  04FD  3184  24D9         	fcall	_CC2500_ReadByte
  2099                           
  2100                           ;CC2500_B1.c: 276: RB5=1;
  2101  04FF  0020               	movlb	0	; select bank0
  2102  0500  168D               	bsf	13,5	;volatile
  2103                           
  2104                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  2105  0501  083A               	movf	_SPI0Buffer,w
  2106  0502  00D5               	movwf	??_CC2500_ReadStatus
  2107  0503  0855               	movf	??_CC2500_ReadStatus,w
  2108  0504  00BD               	movwf	_s_data
  2109  0505  0008               	return
  2110  0506                     __end_of_CC2500_ReadStatus:	
  2111                           
  2112                           	psect	text8
  2113  04D9                     __ptext8:	
  2114 ;; *************** function _CC2500_ReadByte *****************
  2115 ;; Defined at:
  2116 ;;		line 210 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;		None
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  loop_b          1    1[BANK0 ] unsigned char 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;		None               void
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2130 ;;      Params:         0       0       0       0       0       0       0       0
  2131 ;;      Locals:         0       1       0       0       0       0       0       0
  2132 ;;      Temps:          0       1       0       0       0       0       0       0
  2133 ;;      Totals:         0       2       0       0       0       0       0       0
  2134 ;;Total ram usage:        2 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    4
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_CC2500_RxData
  2141 ;;		_CC2500_ReadStatus
  2142 ;;		_CC2500_ReadREG
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function _CC2500_ReadByte
  2148  04D9                     _CC2500_ReadByte:	
  2149                           
  2150                           ;CC2500_B1.c: 212: unsigned char loop_b;
  2151                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  2152                           
  2153                           ;incstack = 0
  2154                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  2155  04D9  0020               	movlb	0	; select bank0
  2156  04DA  01D4               	clrf	CC2500_ReadByte@loop_b
  2157  04DB                     L1:	
  2158  04DB  3008               	movlw	8
  2159  04DC  0254               	subwf	CC2500_ReadByte@loop_b,w
  2160  04DD  1803               	btfsc	3,0
  2161  04DE  0008               	return
  2162                           
  2163                           ;CC2500_B1.c: 214: {
  2164                           ;CC2500_B1.c: 215: RB2=1;
  2165  04DF  150D               	bsf	13,2	;volatile
  2166                           
  2167                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  2168  04E0  1003               	clrc
  2169  04E1  0DBA               	rlf	_SPI0Buffer,f
  2170                           
  2171                           ;CC2500_B1.c: 217: if(RB3 == 1)
  2172  04E2  1D8D               	btfss	13,3	;volatile
  2173  04E3  2CE6               	goto	l2575
  2174                           
  2175                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  2176  04E4  143A               	bsf	_SPI0Buffer,0
  2177  04E5  2CEA               	goto	l2577
  2178  04E6                     l2575:	
  2179                           
  2180                           ;CC2500_B1.c: 219: else
  2181                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  2182  04E6  30FE               	movlw	254
  2183  04E7  00D3               	movwf	??_CC2500_ReadByte
  2184  04E8  0853               	movf	??_CC2500_ReadByte,w
  2185  04E9  05BA               	andwf	_SPI0Buffer,f
  2186  04EA                     l2577:	
  2187                           
  2188                           ;CC2500_B1.c: 221: RB2=0;
  2189  04EA  110D               	bcf	13,2	;volatile
  2190  04EB  3001               	movlw	1
  2191  04EC  00D3               	movwf	??_CC2500_ReadByte
  2192  04ED  0853               	movf	??_CC2500_ReadByte,w
  2193  04EE  07D4               	addwf	CC2500_ReadByte@loop_b,f
  2194  04EF  2CDB               	goto	L1
  2195  04F0                     __end_of_CC2500_ReadByte:	
  2196                           
  2197                           	psect	text9
  2198  0627                     __ptext9:	
  2199 ;; *************** function _RF_Initialization *****************
  2200 ;; Defined at:
  2201 ;;		line 17 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;		None
  2206 ;; Return value:  Size  Location     Type
  2207 ;;		None               void
  2208 ;; Registers used:
  2209 ;;		wreg, status,2, status,0, pclath, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2215 ;;      Params:         0       0       0       0       0       0       0       0
  2216 ;;      Locals:         0       0       0       0       0       0       0       0
  2217 ;;      Temps:          0       0       0       0       0       0       0       0
  2218 ;;      Totals:         0       0       0       0       0       0       0       0
  2219 ;;Total ram usage:        0 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    5
  2222 ;; This function calls:
  2223 ;;		_setRF_Initialization
  2224 ;; This function is called by:
  2225 ;;		_main
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           
  2230                           ;psect for function _RF_Initialization
  2231  0627                     _RF_Initialization:	
  2232                           
  2233                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  2234                           
  2235                           ;incstack = 0
  2236                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  2237  0627  3001               	movlw	1
  2238  0628  3186  2617         	fcall	_setRF_Initialization
  2239  062A  0008               	return
  2240  062B                     __end_of_RF_Initialization:	
  2241                           
  2242                           	psect	text10
  2243  0617                     __ptext10:	
  2244 ;; *************** function _setRF_Initialization *****************
  2245 ;; Defined at:
  2246 ;;		line 50 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  rf              1    wreg     unsigned char 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;  rf              1    0[COMMON] unsigned char 
  2251 ;; Return value:  Size  Location     Type
  2252 ;;		None               void
  2253 ;; Registers used:
  2254 ;;		wreg
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2260 ;;      Params:         0       0       0       0       0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0       0
  2262 ;;      Temps:          0       1       0       0       0       0       0       0
  2263 ;;      Totals:         0       1       0       0       0       0       0       0
  2264 ;;Total ram usage:        1 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    4
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_RF_Initialization
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           
  2275                           ;psect for function _setRF_Initialization
  2276  0617                     _setRF_Initialization:	
  2277                           
  2278                           ;RF_Control_B1.c: 54: Tx_Length=21;
  2279                           
  2280                           ;incstack = 0
  2281                           ; Regs used in _setRF_Initialization: [wreg]
  2282  0617  3015               	movlw	21
  2283  0618  0020               	movlb	0	; select bank0
  2284  0619  00D3               	movwf	??_setRF_Initialization
  2285  061A  0853               	movf	??_setRF_Initialization,w
  2286  061B  00DE               	movwf	_Tx_Length
  2287  061C  0008               	return
  2288  061D                     __end_of_setRF_Initialization:	
  2289                           
  2290                           	psect	text11
  2291  0580                     __ptext11:	
  2292 ;; *************** function _Mcu_Initialization *****************
  2293 ;; Defined at:
  2294 ;;		line 24 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;		None
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;		None
  2299 ;; Return value:  Size  Location     Type
  2300 ;;		None               void
  2301 ;; Registers used:
  2302 ;;		wreg, status,2, status,0, pclath, cstack
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2308 ;;      Params:         0       0       0       0       0       0       0       0
  2309 ;;      Locals:         0       0       0       0       0       0       0       0
  2310 ;;      Temps:          0       0       0       0       0       0       0       0
  2311 ;;      Totals:         0       0       0       0       0       0       0       0
  2312 ;;Total ram usage:        0 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    5
  2315 ;; This function calls:
  2316 ;;		_I2C_Set
  2317 ;;		_INT_Set
  2318 ;;		_IO_Set
  2319 ;;		_TMR1_Set
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function _Mcu_Initialization
  2327  0580                     _Mcu_Initialization:	
  2328                           
  2329                           ;MCU_B1.c: 27: OSCCON=0x78; ;;
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  2333  0580  3078               	movlw	120
  2334  0581  0021               	movlb	1	; select bank1
  2335  0582  0099               	movwf	25	;volatile
  2336                           
  2337                           ;MCU_B1.c: 29: IO_Set();
  2338  0583  3185  2532  3185   	fcall	_IO_Set
  2339                           
  2340                           ;MCU_B1.c: 31: ;;
  2341                           ;MCU_B1.c: 33: TMR1_Set();
  2342  0586  3185  2570  3185   	fcall	_TMR1_Set
  2343                           
  2344                           ;MCU_B1.c: 35: ;;
  2345                           ;MCU_B1.c: 39: INT_Set();
  2346  0589  3186  261D  3185   	fcall	_INT_Set
  2347                           
  2348                           ;MCU_B1.c: 41: ;;
  2349                           ;MCU_B1.c: 43: I2C_Set();
  2350  058C  3185  2506         	fcall	_I2C_Set
  2351  058E  0008               	return
  2352  058F                     __end_of_Mcu_Initialization:	
  2353                           
  2354                           	psect	text12
  2355  0570                     __ptext12:	
  2356 ;; *************** function _TMR1_Set *****************
  2357 ;; Defined at:
  2358 ;;		line 242 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;		None
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;		None               void
  2365 ;; Registers used:
  2366 ;;		wreg
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2372 ;;      Params:         0       0       0       0       0       0       0       0
  2373 ;;      Locals:         0       0       0       0       0       0       0       0
  2374 ;;      Temps:          0       1       0       0       0       0       0       0
  2375 ;;      Totals:         0       1       0       0       0       0       0       0
  2376 ;;Total ram usage:        1 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    4
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_Mcu_Initialization
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           
  2387                           ;psect for function _TMR1_Set
  2388  0570                     _TMR1_Set:	
  2389                           
  2390                           ;MCU_B1.c: 244: Timer1=&VarTimer1;
  2391                           
  2392                           ;incstack = 0
  2393                           ; Regs used in _TMR1_Set: [wreg]
  2394  0570  3050               	movlw	_VarTimer1& (0+255)
  2395  0571  0020               	movlb	0	; select bank0
  2396  0572  00D3               	movwf	??_TMR1_Set
  2397  0573  0853               	movf	??_TMR1_Set,w
  2398  0574  00DD               	movwf	_Timer1
  2399                           
  2400                           ;MCU_B1.c: 245: T1CON=(0x40 | 0x00 | 0x01);
  2401  0575  3041               	movlw	65
  2402  0576  0098               	movwf	24	;volatile
  2403                           
  2404                           ;MCU_B1.c: 246: TMR1H=((65536-700)/256);
  2405  0577  30FD               	movlw	253
  2406  0578  0097               	movwf	23	;volatile
  2407                           
  2408                           ;MCU_B1.c: 247: TMR1L=((65536-700)%256);
  2409  0579  3044               	movlw	68
  2410  057A  0096               	movwf	22	;volatile
  2411                           
  2412                           ;MCU_B1.c: 248: TMR1IE=1;
  2413  057B  0021               	movlb	1	; select bank1
  2414  057C  1411               	bsf	17,0	;volatile
  2415                           
  2416                           ;MCU_B1.c: 249: PEIE=1;
  2417  057D  170B               	bsf	11,6	;volatile
  2418                           
  2419                           ;MCU_B1.c: 250: GIE=1;
  2420  057E  178B               	bsf	11,7	;volatile
  2421  057F  0008               	return
  2422  0580                     __end_of_TMR1_Set:	
  2423                           
  2424                           	psect	text13
  2425  0532                     __ptext13:	
  2426 ;; *************** function _IO_Set *****************
  2427 ;; Defined at:
  2428 ;;		line 50 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;		None               void
  2435 ;; Registers used:
  2436 ;;		wreg, status,2
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2442 ;;      Params:         0       0       0       0       0       0       0       0
  2443 ;;      Locals:         0       0       0       0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0
  2445 ;;      Totals:         0       0       0       0       0       0       0       0
  2446 ;;Total ram usage:        0 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    4
  2449 ;; This function calls:
  2450 ;;		Nothing
  2451 ;; This function is called by:
  2452 ;;		_Mcu_Initialization
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           
  2457                           ;psect for function _IO_Set
  2458  0532                     _IO_Set:	
  2459                           
  2460                           ;MCU_B1.c: 64: TRISA=0b00000000;;
  2461                           
  2462                           ;incstack = 0
  2463                           ; Regs used in _IO_Set: [wreg+status,2]
  2464  0532  0021               	movlb	1	; select bank1
  2465  0533  018C               	clrf	12	;volatile
  2466                           
  2467                           ;MCU_B1.c: 65: TRISB=0b00011001;;
  2468  0534  3019               	movlw	25
  2469  0535  008D               	movwf	13	;volatile
  2470                           
  2471                           ;MCU_B1.c: 66: TRISC=0b00011000;;
  2472  0536  3018               	movlw	24
  2473  0537  008E               	movwf	14	;volatile
  2474                           
  2475                           ;MCU_B1.c: 67: LATA=0b00000000;;
  2476  0538  0022               	movlb	2	; select bank2
  2477  0539  018C               	clrf	12	;volatile
  2478                           
  2479                           ;MCU_B1.c: 68: LATB=0b00000000;;
  2480  053A  018D               	clrf	13	;volatile
  2481                           
  2482                           ;MCU_B1.c: 69: LATC=0b00000000;;
  2483  053B  018E               	clrf	14	;volatile
  2484                           
  2485                           ;MCU_B1.c: 70: ANSELA=0b00000000;;
  2486  053C  0023               	movlb	3	; select bank3
  2487  053D  018C               	clrf	12	;volatile
  2488                           
  2489                           ;MCU_B1.c: 71: ANSELB=0b00000000;;
  2490  053E  018D               	clrf	13	;volatile
  2491                           
  2492                           ;MCU_B1.c: 72: ANSELC=0b00000000;;
  2493  053F  018E               	clrf	14	;volatile
  2494                           
  2495                           ;MCU_B1.c: 73: PORTA=0b00000000;;
  2496  0540  0020               	movlb	0	; select bank0
  2497  0541  018C               	clrf	12	;volatile
  2498                           
  2499                           ;MCU_B1.c: 74: PORTB=0b00011001;;
  2500  0542  3019               	movlw	25
  2501  0543  008D               	movwf	13	;volatile
  2502                           
  2503                           ;MCU_B1.c: 75: PORTC=0b00011000;;
  2504  0544  3018               	movlw	24
  2505  0545  008E               	movwf	14	;volatile
  2506  0546  0008               	return
  2507  0547                     __end_of_IO_Set:	
  2508                           
  2509                           	psect	text14
  2510  061D                     __ptext14:	
  2511 ;; *************** function _INT_Set *****************
  2512 ;; Defined at:
  2513 ;;		line 283 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;		None
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;		None
  2518 ;; Return value:  Size  Location     Type
  2519 ;;		None               void
  2520 ;; Registers used:
  2521 ;;		None
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2527 ;;      Params:         0       0       0       0       0       0       0       0
  2528 ;;      Locals:         0       0       0       0       0       0       0       0
  2529 ;;      Temps:          0       0       0       0       0       0       0       0
  2530 ;;      Totals:         0       0       0       0       0       0       0       0
  2531 ;;Total ram usage:        0 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    4
  2534 ;; This function calls:
  2535 ;;		Nothing
  2536 ;; This function is called by:
  2537 ;;		_Mcu_Initialization
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           
  2542                           ;psect for function _INT_Set
  2543  061D                     _INT_Set:	
  2544                           
  2545                           ;MCU_B1.c: 285: WPUB0=0;
  2546                           
  2547                           ;incstack = 0
  2548                           ; Regs used in _INT_Set: []
  2549  061D  0024               	movlb	4	; select bank4
  2550  061E  100D               	bcf	13,0	;volatile
  2551                           
  2552                           ;MCU_B1.c: 286: INTE=1;
  2553  061F  160B               	bsf	11,4	;volatile
  2554                           
  2555                           ;MCU_B1.c: 287: PEIE=1;
  2556  0620  170B               	bsf	11,6	;volatile
  2557                           
  2558                           ;MCU_B1.c: 288: GIE=1;
  2559  0621  178B               	bsf	11,7	;volatile
  2560  0622  0008               	return
  2561  0623                     __end_of_INT_Set:	
  2562                           
  2563                           	psect	text15
  2564  0506                     __ptext15:	
  2565 ;; *************** function _I2C_Set *****************
  2566 ;; Defined at:
  2567 ;;		line 403 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;		None
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;		None
  2572 ;; Return value:  Size  Location     Type
  2573 ;;		None               void
  2574 ;; Registers used:
  2575 ;;		wreg
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2581 ;;      Params:         0       0       0       0       0       0       0       0
  2582 ;;      Locals:         0       0       0       0       0       0       0       0
  2583 ;;      Temps:          0       1       0       0       0       0       0       0
  2584 ;;      Totals:         0       1       0       0       0       0       0       0
  2585 ;;Total ram usage:        1 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    4
  2588 ;; This function calls:
  2589 ;;		Nothing
  2590 ;; This function is called by:
  2591 ;;		_Mcu_Initialization
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           
  2596                           ;psect for function _I2C_Set
  2597  0506                     _I2C_Set:	
  2598                           
  2599                           ;MCU_B1.c: 405: I2C=&VarI2C;
  2600                           
  2601                           ;incstack = 0
  2602                           ; Regs used in _I2C_Set: [wreg]
  2603  0506  3020               	movlw	_VarI2C& (0+255)
  2604  0507  0020               	movlb	0	; select bank0
  2605  0508  00D3               	movwf	??_I2C_Set
  2606  0509  0853               	movf	??_I2C_Set,w
  2607  050A  00F7               	movwf	_I2C
  2608                           
  2609                           ;MCU_B1.c: 415: SSPADD=0x10;
  2610  050B  3010               	movlw	16
  2611  050C  0024               	movlb	4	; select bank4
  2612  050D  0092               	movwf	18	;volatile
  2613                           
  2614                           ;MCU_B1.c: 417: SSPSTAT = 0x80;
  2615  050E  3080               	movlw	128
  2616  050F  0094               	movwf	20	;volatile
  2617                           
  2618                           ;MCU_B1.c: 418: SSPCON2 = 0x80;
  2619  0510  3080               	movlw	128
  2620  0511  0096               	movwf	22	;volatile
  2621                           
  2622                           ;MCU_B1.c: 419: SSPCON1=0b100110;
  2623  0512  3026               	movlw	38
  2624  0513  0095               	movwf	21	;volatile
  2625                           
  2626                           ;MCU_B1.c: 421: SEN=1;
  2627  0514  1416               	bsf	22,0	;volatile
  2628                           
  2629                           ;MCU_B1.c: 422: AHEN=0;
  2630  0515  1097               	bcf	23,1	;volatile
  2631                           
  2632                           ;MCU_B1.c: 423: DHEN=0;
  2633  0516  1017               	bcf	23,0	;volatile
  2634                           
  2635                           ;MCU_B1.c: 424: SSPIE=1;
  2636  0517  0021               	movlb	1	; select bank1
  2637  0518  1591               	bsf	17,3	;volatile
  2638                           
  2639                           ;MCU_B1.c: 425: PEIE=1;
  2640  0519  170B               	bsf	11,6	;volatile
  2641                           
  2642                           ;MCU_B1.c: 426: GIE=1;
  2643  051A  178B               	bsf	11,7	;volatile
  2644  051B  0008               	return
  2645  051C                     __end_of_I2C_Set:	
  2646                           
  2647                           	psect	text16
  2648  058F                     __ptext16:	
  2649 ;; *************** function _MainT_Initial *****************
  2650 ;; Defined at:
  2651 ;;		line 33 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;		None               void
  2658 ;; Registers used:
  2659 ;;		wreg, fsr1l, fsr1h
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2665 ;;      Params:         0       0       0       0       0       0       0       0
  2666 ;;      Locals:         0       0       0       0       0       0       0       0
  2667 ;;      Temps:          0       1       0       0       0       0       0       0
  2668 ;;      Totals:         0       1       0       0       0       0       0       0
  2669 ;;Total ram usage:        1 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    4
  2672 ;; This function calls:
  2673 ;;		Nothing
  2674 ;; This function is called by:
  2675 ;;		_main
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           
  2680                           ;psect for function _MainT_Initial
  2681  058F                     _MainT_Initial:	
  2682                           
  2683                           ;myMain.c: 35: TMain=&VarTMain;
  2684                           
  2685                           ;incstack = 0
  2686                           ; Regs used in _MainT_Initial: [wregfsr1]
  2687  058F  303E               	movlw	_VarTMain& (0+255)
  2688  0590  0020               	movlb	0	; select bank0
  2689  0591  00D3               	movwf	??_MainT_Initial
  2690  0592  0853               	movf	??_MainT_Initial,w
  2691  0593  00DC               	movwf	_TMain
  2692                           
  2693                           ;myMain.c: 36: TMain->FirstOpen=1;
  2694  0594  085C               	movf	_TMain,w
  2695  0595  3E0D               	addlw	13
  2696  0596  0086               	movwf	6
  2697  0597  0187               	clrf	7
  2698  0598  1401               	bsf	1,0
  2699                           
  2700                           ;myMain.c: 37: Product=&VarProduct;
  2701  0599  30A0               	movlw	_VarProduct& (0+255)
  2702  059A  00D3               	movwf	??_MainT_Initial
  2703  059B  0853               	movf	??_MainT_Initial,w
  2704  059C  00F6               	movwf	_Product
  2705  059D  0008               	return
  2706  059E                     __end_of_MainT_Initial:	
  2707                           
  2708                           	psect	text17
  2709  02BB                     __ptext17:	
  2710 ;; *************** function _MainT *****************
  2711 ;; Defined at:
  2712 ;;		line 41 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  i               1    0        unsigned char 
  2717 ;; Return value:  Size  Location     Type
  2718 ;;		None               void
  2719 ;; Registers used:
  2720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2726 ;;      Params:         0       0       0       0       0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0       0       0
  2728 ;;      Temps:          0       0       0       0       0       0       0       0
  2729 ;;      Totals:         0       0       0       0       0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    6
  2733 ;; This function calls:
  2734 ;;		_setRF_Enable
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           
  2741                           ;psect for function _MainT
  2742  02BB                     _MainT:	
  2743                           
  2744                           ;myMain.c: 43: char i;
  2745                           ;myMain.c: 45: if(!TMain->PowerON)
  2746                           
  2747                           ;incstack = 0
  2748                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2749  02BB  0020               	movlb	0	; select bank0
  2750  02BC  085C               	movf	_TMain,w
  2751  02BD  0086               	movwf	6
  2752  02BE  0187               	clrf	7
  2753  02BF  1801               	btfsc	1,0
  2754  02C0  2AE4               	goto	l2993
  2755                           
  2756                           ;myMain.c: 46: {
  2757                           ;myMain.c: 47: TMain->PowerCount++;
  2758  02C1  0A5C               	incf	_TMain,w
  2759  02C2  0086               	movwf	6
  2760  02C3  0187               	clrf	7
  2761  02C4  3001               	movlw	1
  2762  02C5  0781               	addwf	1,f
  2763  02C6  3141               	addfsr 1,1
  2764  02C7  1803               	skipnc
  2765  02C8  0A81               	incf	1,f
  2766                           
  2767                           ;myMain.c: 48: if(TMain->PowerCount == 1500)
  2768  02C9  0A5C               	incf	_TMain,w
  2769  02CA  0086               	movwf	6
  2770  02CB  0187               	clrf	7
  2771  02CC  3F40               	moviw [0]fsr1
  2772  02CD  3ADC               	xorlw	220
  2773  02CE  1D03               	skipz
  2774  02CF  2AD2               	goto	u3005
  2775  02D0  3F41               	moviw [1]fsr1
  2776  02D1  3A05               	xorlw	5
  2777  02D2                     u3005:	
  2778  02D2  1D03               	skipz
  2779  02D3  0008               	return
  2780                           
  2781                           ;myMain.c: 49: {
  2782                           ;myMain.c: 50: TMain->PowerCount=0;
  2783  02D4  0A5C               	incf	_TMain,w
  2784  02D5  0086               	movwf	6
  2785  02D6  0187               	clrf	7
  2786  02D7  3000               	movlw	0
  2787  02D8  3FC0               	movwi [0]fsr1
  2788  02D9  3FC1               	movwi [1]fsr1
  2789                           
  2790                           ;myMain.c: 51: TMain->PowerON=1;
  2791  02DA  085C               	movf	_TMain,w
  2792  02DB  0086               	movwf	6
  2793  02DC  0187               	clrf	7
  2794  02DD  1401               	bsf	1,0
  2795                           
  2796                           ;myMain.c: 54: setRF_Enable(1,1);
  2797  02DE  01D5               	clrf	setRF_Enable@command
  2798  02DF  0AD5               	incf	setRF_Enable@command,f
  2799  02E0  3001               	movlw	1
  2800  02E1  3183  23AA         	fcall	_setRF_Enable
  2801                           
  2802                           ;myMain.c: 56: }
  2803                           ;myMain.c: 57: }
  2804  02E3  0008               	return
  2805  02E4                     l2993:	
  2806                           
  2807                           ;myMain.c: 58: else
  2808                           ;myMain.c: 59: {
  2809                           ;myMain.c: 60: TMain->Count1++;
  2810  02E4  0020               	movlb	0	; select bank0
  2811  02E5  085C               	movf	_TMain,w
  2812  02E6  3E05               	addlw	5
  2813  02E7  0086               	movwf	6
  2814  02E8  0187               	clrf	7
  2815  02E9  3001               	movlw	1
  2816  02EA  0781               	addwf	1,f
  2817  02EB  3141               	addfsr 1,1
  2818  02EC  1803               	skipnc
  2819  02ED  0A81               	incf	1,f
  2820                           
  2821                           ;myMain.c: 61: if(TMain->Count1 == 1000)
  2822  02EE  085C               	movf	_TMain,w
  2823  02EF  3E05               	addlw	5
  2824  02F0  0086               	movwf	6
  2825  02F1  0187               	clrf	7
  2826  02F2  3F40               	moviw [0]fsr1
  2827  02F3  3AE8               	xorlw	232
  2828  02F4  1D03               	skipz
  2829  02F5  2AF8               	goto	u3015
  2830  02F6  3F41               	moviw [1]fsr1
  2831  02F7  3A03               	xorlw	3
  2832  02F8                     u3015:	
  2833  02F8  1D03               	skipz
  2834  02F9  0008               	return
  2835                           
  2836                           ;myMain.c: 62: {
  2837                           ;myMain.c: 63: TMain->Count1=0;
  2838  02FA  085C               	movf	_TMain,w
  2839  02FB  3E05               	addlw	5
  2840  02FC  0086               	movwf	6
  2841  02FD  0187               	clrf	7
  2842  02FE  3000               	movlw	0
  2843  02FF  3FC0               	movwi [0]fsr1
  2844  0300  3FC1               	movwi [1]fsr1
  2845                           
  2846                           ;myMain.c: 64: RA0=~RA0;
  2847  0301  3001               	movlw	1
  2848  0302  068C               	xorwf	12,f
  2849                           
  2850                           ;myMain.c: 77: {
  2851  0303  0008               	return
  2852  0304                     __end_of_MainT:	
  2853                           
  2854                           	psect	text18
  2855  03AA                     __ptext18:	
  2856 ;; *************** function _setRF_Enable *****************
  2857 ;; Defined at:
  2858 ;;		line 186 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  rf              1    wreg     unsigned char 
  2861 ;;  command         1    2[BANK0 ] unsigned char 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  rf              1    3[BANK0 ] unsigned char 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;		None               void
  2866 ;; Registers used:
  2867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2873 ;;      Params:         0       1       0       0       0       0       0       0
  2874 ;;      Locals:         0       1       0       0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0
  2876 ;;      Totals:         0       2       0       0       0       0       0       0
  2877 ;;Total ram usage:        2 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    5
  2880 ;; This function calls:
  2881 ;;		_RfPointSelect
  2882 ;;		_setINT_GO
  2883 ;; This function is called by:
  2884 ;;		_MainT
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           
  2889                           ;psect for function _setRF_Enable
  2890  03AA                     _setRF_Enable:	
  2891                           
  2892                           ;incstack = 0
  2893                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2894                           ;setRF_Enable@rf stored from wreg
  2895  03AA  0020               	movlb	0	; select bank0
  2896  03AB  00D6               	movwf	setRF_Enable@rf
  2897                           
  2898                           ;RF_Control_B1.c: 188: RfPointSelect(rf);
  2899  03AC  0856               	movf	setRF_Enable@rf,w
  2900  03AD  3185  25ED  3183   	fcall	_RfPointSelect
  2901                           
  2902                           ;RF_Control_B1.c: 189: RF->Enable=command;
  2903  03B0  0878               	movf	_RF,w
  2904  03B1  0086               	movwf	6
  2905  03B2  0187               	clrf	7
  2906  03B3  0020               	movlb	0	; select bank0
  2907  03B4  0855               	movf	setRF_Enable@command,w
  2908  03B5  1001               	bcf	1,0
  2909  03B6  1D03               	skipz
  2910  03B7  1401               	bsf	1,0
  2911                           
  2912                           ;RF_Control_B1.c: 190: RF->Learn=0;
  2913  03B8  0878               	movf	_RF,w
  2914  03B9  0086               	movwf	6
  2915  03BA  0187               	clrf	7
  2916  03BB  1301               	bcf	1,6
  2917                           
  2918                           ;RF_Control_B1.c: 191: RF->TransceiveGO=0;
  2919  03BC  0878               	movf	_RF,w
  2920  03BD  0086               	movwf	6
  2921  03BE  0187               	clrf	7
  2922  03BF  1101               	bcf	1,2
  2923                           
  2924                           ;RF_Control_B1.c: 192: RF->RxStatus=0;
  2925  03C0  0878               	movf	_RF,w
  2926  03C1  0086               	movwf	6
  2927  03C2  0187               	clrf	7
  2928  03C3  1181               	bcf	1,3
  2929                           
  2930                           ;RF_Control_B1.c: 193: RF->ReceiveGO=0;
  2931  03C4  0878               	movf	_RF,w
  2932  03C5  0086               	movwf	6
  2933  03C6  0187               	clrf	7
  2934  03C7  1081               	bcf	1,1
  2935                           
  2936                           ;RF_Control_B1.c: 194: RF->DebounceTime=0;
  2937  03C8  0A78               	incf	_RF,w
  2938  03C9  0086               	movwf	6
  2939  03CA  0187               	clrf	7
  2940  03CB  0181               	clrf	1
  2941                           
  2942                           ;RF_Control_B1.c: 195: RF->Debounce=0;
  2943  03CC  0878               	movf	_RF,w
  2944  03CD  0086               	movwf	6
  2945  03CE  0187               	clrf	7
  2946  03CF  1281               	bcf	1,5
  2947                           
  2948                           ;RF_Control_B1.c: 196: setINT_GO(0);
  2949  03D0  3000               	movlw	0
  2950  03D1  3186  2602         	fcall	_setINT_GO
  2951  03D3  0008               	return
  2952  03D4                     __end_of_setRF_Enable:	
  2953                           
  2954                           	psect	text19
  2955  0602                     __ptext19:	
  2956 ;; *************** function _setINT_GO *****************
  2957 ;; Defined at:
  2958 ;;		line 301 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  command         1    wreg     unsigned char 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  command         1    0[BANK0 ] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;		None               void
  2965 ;; Registers used:
  2966 ;;		wreg
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2972 ;;      Params:         0       0       0       0       0       0       0       0
  2973 ;;      Locals:         0       1       0       0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0
  2975 ;;      Totals:         0       1       0       0       0       0       0       0
  2976 ;;Total ram usage:        1 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    4
  2979 ;; This function calls:
  2980 ;;		Nothing
  2981 ;; This function is called by:
  2982 ;;		_setRF_Main
  2983 ;;		_setRF_Enable
  2984 ;;		_RF_RxDisable
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           
  2989                           ;psect for function _setINT_GO
  2990  0602                     _setINT_GO:	
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in _setINT_GO: [wreg]
  2994                           ;setINT_GO@command stored from wreg
  2995  0602  0020               	movlb	0	; select bank0
  2996  0603  00D3               	movwf	setINT_GO@command
  2997                           
  2998                           ;MCU_B1.c: 303: INTF=0;
  2999  0604  108B               	bcf	11,1	;volatile
  3000                           
  3001                           ;MCU_B1.c: 304: INTE=command;
  3002  0605  1C53               	btfss	setINT_GO@command,0
  3003  0606  2E09               	goto	u2520
  3004  0607  160B               	bsf	11,4	;volatile
  3005  0608  0008               	return
  3006  0609                     u2520:	
  3007  0609  120B               	bcf	11,4	;volatile
  3008  060A  0008               	return
  3009  060B                     __end_of_setINT_GO:	
  3010                           
  3011                           	psect	text20
  3012  05ED                     __ptext20:	
  3013 ;; *************** function _RfPointSelect *****************
  3014 ;; Defined at:
  3015 ;;		line 7 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  rf              1    wreg     unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  rf              1    1[BANK0 ] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;		None               void
  3022 ;; Registers used:
  3023 ;;		wreg
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3029 ;;      Params:         0       0       0       0       0       0       0       0
  3030 ;;      Locals:         0       1       0       0       0       0       0       0
  3031 ;;      Temps:          0       1       0       0       0       0       0       0
  3032 ;;      Totals:         0       2       0       0       0       0       0       0
  3033 ;;Total ram usage:        2 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    4
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_setRF_RxStatus
  3040 ;;		_setRF_Main
  3041 ;;		_setRF_Enable
  3042 ;;		_RF_RxDisable
  3043 ;;		_setRF_Learn
  3044 ;;		_setTxData
  3045 ;;		_getRxData
  3046 ;;		_setLog_Code
  3047 ;;		_setControl_Lights_Table
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           
  3052                           ;psect for function _RfPointSelect
  3053  05ED                     _RfPointSelect:	
  3054                           
  3055                           ;incstack = 0
  3056                           ; Regs used in _RfPointSelect: [wreg]
  3057                           ;RfPointSelect@rf stored from wreg
  3058  05ED  0020               	movlb	0	; select bank0
  3059  05EE  00D4               	movwf	RfPointSelect@rf
  3060                           
  3061                           ;RF_Control_B1.c: 10: if(rf == 1)
  3062  05EF  0854               	movf	RfPointSelect@rf,w
  3063  05F0  3A01               	xorlw	1
  3064  05F1  1D03               	skipz
  3065  05F2  0008               	return
  3066                           
  3067                           ;RF_Control_B1.c: 11: {
  3068                           ;RF_Control_B1.c: 12: RF=&RF1;
  3069  05F3  304D               	movlw	_RF1& (0+255)
  3070  05F4  00D3               	movwf	??_RfPointSelect
  3071  05F5  0853               	movf	??_RfPointSelect,w
  3072  05F6  00F8               	movwf	_RF
  3073  05F7  0008               	return
  3074  05F8                     __end_of_RfPointSelect:	
  3075                           
  3076                           	psect	text21
  3077  0341                     __ptext21:	
  3078 ;; *************** function _I2C_Main *****************
  3079 ;; Defined at:
  3080 ;;		line 444 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  i               1    0        unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;		None               void
  3087 ;; Registers used:
  3088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3094 ;;      Params:         0       0       0       0       0       0       0       0
  3095 ;;      Locals:         0       0       0       0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0
  3097 ;;      Totals:         0       0       0       0       0       0       0       0
  3098 ;;Total ram usage:        0 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    5
  3101 ;; This function calls:
  3102 ;;		_I2C_SetData
  3103 ;;		_I2C_Slave_Mode
  3104 ;; This function is called by:
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           
  3110                           ;psect for function _I2C_Main
  3111  0341                     _I2C_Main:	
  3112                           
  3113                           ;MCU_B1.c: 446: char i;
  3114                           ;MCU_B1.c: 448: if(I2C->SlaveGO)
  3115                           
  3116                           ;incstack = 0
  3117                           ; Regs used in _I2C_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3118  0341  0877               	movf	_I2C,w
  3119  0342  3E42               	addlw	66
  3120  0343  0086               	movwf	6
  3121  0344  3001               	movlw	1	; select bank2/3
  3122  0345  0087               	movwf	7
  3123  0346  1C01               	btfss	1,0
  3124  0347  0008               	return
  3125                           
  3126                           ;MCU_B1.c: 449: {
  3127                           ;MCU_B1.c: 450: I2C->SlaveGO=0;
  3128  0348  0877               	movf	_I2C,w
  3129  0349  3E42               	addlw	66
  3130  034A  0086               	movwf	6
  3131  034B  3001               	movlw	1	; select bank2/3
  3132  034C  0087               	movwf	7
  3133  034D  1001               	bcf	1,0
  3134                           
  3135                           ;MCU_B1.c: 451: I2C_Slave_Mode();
  3136  034E  3181  2118  3183   	fcall	_I2C_Slave_Mode
  3137                           
  3138                           ;MCU_B1.c: 452: SSPIE=1;
  3139  0351  0021               	movlb	1	; select bank1
  3140  0352  1591               	bsf	17,3	;volatile
  3141                           
  3142                           ;MCU_B1.c: 454: if(I2C->SlaveTxGO)
  3143  0353  0877               	movf	_I2C,w
  3144  0354  3E42               	addlw	66
  3145  0355  0086               	movwf	6
  3146  0356  3001               	movlw	1	; select bank2/3
  3147  0357  0087               	movwf	7
  3148  0358  1D01               	btfss	1,2
  3149  0359  2B68               	goto	l690
  3150                           
  3151                           ;MCU_B1.c: 455: {
  3152                           ;MCU_B1.c: 456: I2C->SlaveTxGO=0;
  3153  035A  0877               	movf	_I2C,w
  3154  035B  3E42               	addlw	66
  3155  035C  0086               	movwf	6
  3156  035D  3001               	movlw	1	; select bank2/3
  3157  035E  0087               	movwf	7
  3158  035F  1101               	bcf	1,2
  3159                           
  3160                           ;MCU_B1.c: 457: RC0=0;
  3161  0360  0020               	movlb	0	; select bank0
  3162  0361  100E               	bcf	14,0	;volatile
  3163                           
  3164                           ;MCU_B1.c: 458: I2C->SS=0;
  3165  0362  0877               	movf	_I2C,w
  3166  0363  3E42               	addlw	66
  3167  0364  0086               	movwf	6
  3168  0365  3001               	movlw	1	; select bank2/3
  3169  0366  0087               	movwf	7
  3170  0367  1281               	bcf	1,5
  3171  0368                     l690:	
  3172                           
  3173                           ;MCU_B1.c: 459: }
  3174                           ;MCU_B1.c: 460: if(I2C->SlaveRxGO)
  3175  0368  0877               	movf	_I2C,w
  3176  0369  3E42               	addlw	66
  3177  036A  0086               	movwf	6
  3178  036B  3001               	movlw	1	; select bank2/3
  3179  036C  0087               	movwf	7
  3180  036D  1C81               	btfss	1,1
  3181  036E  2B78               	goto	l3021
  3182                           
  3183                           ;MCU_B1.c: 461: {
  3184                           ;MCU_B1.c: 462: I2C->SlaveRxGO=0;
  3185  036F  0877               	movf	_I2C,w
  3186  0370  3E42               	addlw	66
  3187  0371  0086               	movwf	6
  3188  0372  3001               	movlw	1	; select bank2/3
  3189  0373  0087               	movwf	7
  3190  0374  1081               	bcf	1,1
  3191                           
  3192                           ;MCU_B1.c: 463: I2C_SetData(0);
  3193  0375  3000               	movlw	0
  3194  0376  3180  20AB         	fcall	_I2C_SetData
  3195  0378                     l3021:	
  3196                           
  3197                           ;MCU_B1.c: 464: }
  3198                           ;MCU_B1.c: 465: RA1=~RA1;
  3199  0378  3002               	movlw	2
  3200  0379  0020               	movlb	0	; select bank0
  3201  037A  068C               	xorwf	12,f
  3202  037B  0008               	return
  3203  037C                     __end_of_I2C_Main:	
  3204                           
  3205                           	psect	text22
  3206  0118                     __ptext22:	
  3207 ;; *************** function _I2C_Slave_Mode *****************
  3208 ;; Defined at:
  3209 ;;		line 629 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  i               1    2[BANK0 ] unsigned char 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;		None               void
  3216 ;; Registers used:
  3217 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3223 ;;      Params:         0       0       0       0       0       0       0       0
  3224 ;;      Locals:         0       1       0       0       0       0       0       0
  3225 ;;      Temps:          0       2       0       0       0       0       0       0
  3226 ;;      Totals:         0       3       0       0       0       0       0       0
  3227 ;;Total ram usage:        3 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    4
  3230 ;; This function calls:
  3231 ;;		Nothing
  3232 ;; This function is called by:
  3233 ;;		_I2C_Main
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           
  3238                           ;psect for function _I2C_Slave_Mode
  3239  0118                     _I2C_Slave_Mode:	
  3240                           
  3241                           ;MCU_B1.c: 631: char i;
  3242                           ;MCU_B1.c: 632: SSPIF=0;
  3243                           
  3244                           ;incstack = 0
  3245                           ; Regs used in _I2C_Slave_Mode: [wreg+fsr1l+fsr1h+status,2+status,0]
  3246  0118  0020               	movlb	0	; select bank0
  3247  0119  1191               	bcf	17,3	;volatile
  3248                           
  3249                           ;MCU_B1.c: 633: I2C->Address=SSPBUF;
  3250  011A  0024               	movlb	4	; select bank4
  3251  011B  0811               	movf	17,w	;volatile
  3252  011C  0020               	movlb	0	; select bank0
  3253  011D  00D3               	movwf	??_I2C_Slave_Mode
  3254  011E  0877               	movf	_I2C,w
  3255  011F  3E41               	addlw	65
  3256  0120  0086               	movwf	6
  3257  0121  3001               	movlw	1	; select bank2/3
  3258  0122  0087               	movwf	7
  3259  0123  0853               	movf	??_I2C_Slave_Mode,w
  3260  0124  0081               	movwf	1
  3261                           
  3262                           ;MCU_B1.c: 635: if(R_nW)
  3263  0125  0024               	movlb	4	; select bank4
  3264  0126  1D14               	btfss	20,2	;volatile
  3265  0127  2954               	goto	l799
  3266                           
  3267                           ;MCU_B1.c: 636: {
  3268                           ;MCU_B1.c: 637: SSPOV=0;
  3269  0128  1315               	bcf	21,6	;volatile
  3270                           
  3271                           ;MCU_B1.c: 639: for(i=0;i<32;i++)
  3272  0129  0020               	movlb	0	; select bank0
  3273  012A  01D5               	clrf	I2C_Slave_Mode@i
  3274  012B  3020               	movlw	32
  3275  012C  0255               	subwf	I2C_Slave_Mode@i,w
  3276  012D  1803               	btfsc	3,0
  3277  012E  294B               	goto	l801
  3278  012F                     l2919:	
  3279                           
  3280                           ;MCU_B1.c: 640: {
  3281                           ;MCU_B1.c: 641: SSPBUF=I2C->BufferWriter[i];
  3282  012F  0855               	movf	I2C_Slave_Mode@i,w
  3283  0130  3E20               	addlw	32
  3284  0131  0777               	addwf	_I2C,w
  3285  0132  00D3               	movwf	??_I2C_Slave_Mode
  3286  0133  0853               	movf	??_I2C_Slave_Mode,w
  3287  0134  0086               	movwf	6
  3288  0135  3001               	movlw	1	; select bank2/3
  3289  0136  0087               	movwf	7
  3290  0137  0801               	movf	1,w
  3291  0138  0024               	movlb	4	; select bank4
  3292  0139  0091               	movwf	17	;volatile
  3293                           
  3294                           ;MCU_B1.c: 643: CKP=1;
  3295  013A  1615               	bsf	21,4	;volatile
  3296  013B                     l802:	
  3297                           ;MCU_B1.c: 644: while(!SSPIF);
  3298                           
  3299  013B  0020               	movlb	0	; select bank0
  3300  013C  1D91               	btfss	17,3	;volatile
  3301  013D  293B               	goto	l802
  3302                           
  3303                           ;MCU_B1.c: 645: SSPIF=0;
  3304  013E  1191               	bcf	17,3	;volatile
  3305  013F                     l805:	
  3306                           ;MCU_B1.c: 646: while(ACKSTAT);
  3307                           
  3308  013F  0024               	movlb	4	; select bank4
  3309  0140  1B16               	btfsc	22,6	;volatile
  3310  0141  293F               	goto	l805
  3311  0142  3001               	movlw	1
  3312  0143  0020               	movlb	0	; select bank0
  3313  0144  00D3               	movwf	??_I2C_Slave_Mode
  3314  0145  0853               	movf	??_I2C_Slave_Mode,w
  3315  0146  07D5               	addwf	I2C_Slave_Mode@i,f
  3316  0147  3020               	movlw	32
  3317  0148  0255               	subwf	I2C_Slave_Mode@i,w
  3318  0149  1C03               	skipc
  3319  014A  292F               	goto	l2919
  3320  014B                     l801:	
  3321                           
  3322                           ;MCU_B1.c: 647: }
  3323                           ;MCU_B1.c: 648: CKP=1;
  3324  014B  0024               	movlb	4	; select bank4
  3325  014C  1615               	bsf	21,4	;volatile
  3326                           
  3327                           ;MCU_B1.c: 650: I2C->SlaveTxGO=1;
  3328  014D  0877               	movf	_I2C,w
  3329  014E  3E42               	addlw	66
  3330  014F  0086               	movwf	6
  3331  0150  3001               	movlw	1	; select bank2/3
  3332  0151  0087               	movwf	7
  3333  0152  1501               	bsf	1,2
  3334                           
  3335                           ;MCU_B1.c: 651: }
  3336  0153  0008               	return
  3337  0154                     l799:	
  3338                           
  3339                           ;MCU_B1.c: 652: else
  3340                           ;MCU_B1.c: 653: {
  3341                           ;MCU_B1.c: 655: CKP=1;
  3342  0154  1615               	bsf	21,4	;volatile
  3343                           
  3344                           ;MCU_B1.c: 656: for(i=0;i<32;i++)
  3345  0155  0020               	movlb	0	; select bank0
  3346  0156  01D5               	clrf	I2C_Slave_Mode@i
  3347  0157  3020               	movlw	32
  3348  0158  0255               	subwf	I2C_Slave_Mode@i,w
  3349  0159  1803               	btfsc	3,0
  3350  015A  2976               	goto	l810
  3351  015B                     l811:	
  3352                           ;MCU_B1.c: 657: {
  3353                           ;MCU_B1.c: 658: while(!SSPIF);
  3354                           
  3355  015B  1D91               	btfss	17,3	;volatile
  3356  015C  295B               	goto	l811
  3357                           
  3358                           ;MCU_B1.c: 659: SSPIF=0;
  3359  015D  1191               	bcf	17,3	;volatile
  3360                           
  3361                           ;MCU_B1.c: 660: I2C->BufferReader[i]=SSPBUF;
  3362  015E  0024               	movlb	4	; select bank4
  3363  015F  0811               	movf	17,w	;volatile
  3364  0160  0020               	movlb	0	; select bank0
  3365  0161  00D3               	movwf	??_I2C_Slave_Mode
  3366  0162  0855               	movf	I2C_Slave_Mode@i,w
  3367  0163  0777               	addwf	_I2C,w
  3368  0164  00D4               	movwf	??_I2C_Slave_Mode+1
  3369  0165  0854               	movf	??_I2C_Slave_Mode+1,w
  3370  0166  0086               	movwf	6
  3371  0167  3001               	movlw	1	; select bank2/3
  3372  0168  0087               	movwf	7
  3373  0169  0853               	movf	??_I2C_Slave_Mode,w
  3374  016A  0081               	movwf	1
  3375                           
  3376                           ;MCU_B1.c: 662: CKP=1;
  3377  016B  0024               	movlb	4	; select bank4
  3378  016C  1615               	bsf	21,4	;volatile
  3379  016D  3001               	movlw	1
  3380  016E  0020               	movlb	0	; select bank0
  3381  016F  00D3               	movwf	??_I2C_Slave_Mode
  3382  0170  0853               	movf	??_I2C_Slave_Mode,w
  3383  0171  07D5               	addwf	I2C_Slave_Mode@i,f
  3384  0172  3020               	movlw	32
  3385  0173  0255               	subwf	I2C_Slave_Mode@i,w
  3386  0174  1C03               	skipc
  3387  0175  295B               	goto	l811
  3388  0176                     l810:	
  3389                           
  3390                           ;MCU_B1.c: 663: }
  3391                           ;MCU_B1.c: 665: CKP=1;
  3392  0176  0024               	movlb	4	; select bank4
  3393  0177  1615               	bsf	21,4	;volatile
  3394                           
  3395                           ;MCU_B1.c: 666: I2C->SlaveRxGO=1;
  3396  0178  0877               	movf	_I2C,w
  3397  0179  3E42               	addlw	66
  3398  017A  0086               	movwf	6
  3399  017B  3001               	movlw	1	; select bank2/3
  3400  017C  0087               	movwf	7
  3401  017D  1481               	bsf	1,1
  3402  017E  0008               	return
  3403  017F                     __end_of_I2C_Slave_Mode:	
  3404                           
  3405                           	psect	text23
  3406  00AB                     __ptext23:	
  3407 ;; *************** function _I2C_SetData *****************
  3408 ;; Defined at:
  3409 ;;		line 511 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  command         1    wreg     unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  command         1    2[BANK0 ] unsigned char 
  3414 ;;  i               1    3[BANK0 ] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;		None               void
  3417 ;; Registers used:
  3418 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3424 ;;      Params:         0       0       0       0       0       0       0       0
  3425 ;;      Locals:         0       2       0       0       0       0       0       0
  3426 ;;      Temps:          0       2       0       0       0       0       0       0
  3427 ;;      Totals:         0       4       0       0       0       0       0       0
  3428 ;;Total ram usage:        4 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    4
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_setRF_Main
  3435 ;;		_I2C_Main
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           
  3440                           ;psect for function _I2C_SetData
  3441  00AB                     _I2C_SetData:	
  3442                           
  3443                           ;incstack = 0
  3444                           ; Regs used in _I2C_SetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  3445                           ;I2C_SetData@command stored from wreg
  3446  00AB  0020               	movlb	0	; select bank0
  3447  00AC  00D5               	movwf	I2C_SetData@command
  3448                           
  3449                           ;MCU_B1.c: 514: char i;
  3450                           ;MCU_B1.c: 515: if(command)
  3451  00AD  0855               	movf	I2C_SetData@command,w
  3452  00AE  1903               	btfsc	3,2
  3453  00AF  28F7               	goto	l2725
  3454                           
  3455                           ;MCU_B1.c: 516: {
  3456                           ;MCU_B1.c: 517: if(!I2C->SS)
  3457  00B0  0877               	movf	_I2C,w
  3458  00B1  3E42               	addlw	66
  3459  00B2  0086               	movwf	6
  3460  00B3  3001               	movlw	1	; select bank2/3
  3461  00B4  0087               	movwf	7
  3462  00B5  1A81               	btfsc	1,5
  3463  00B6  0008               	return
  3464                           
  3465                           ;MCU_B1.c: 518: {
  3466                           ;MCU_B1.c: 519: I2C->SS=1;
  3467  00B7  0877               	movf	_I2C,w
  3468  00B8  3E42               	addlw	66
  3469  00B9  0086               	movwf	6
  3470  00BA  3001               	movlw	1	; select bank2/3
  3471  00BB  0087               	movwf	7
  3472  00BC  1681               	bsf	1,5
  3473                           
  3474                           ;MCU_B1.c: 520: for(i=0 ;i< 21 ;i++)
  3475  00BD  01D6               	clrf	I2C_SetData@i
  3476  00BE  3015               	movlw	21
  3477  00BF  0256               	subwf	I2C_SetData@i,w
  3478  00C0  1803               	btfsc	3,0
  3479  00C1  28DA               	goto	l2721
  3480  00C2                     l2715:	
  3481                           
  3482                           ;MCU_B1.c: 521: {
  3483                           ;MCU_B1.c: 522: I2C->BufferWriter[i+1]=RF_Data[i];
  3484  00C2  0856               	movf	I2C_SetData@i,w
  3485  00C3  3E20               	addlw	_RF_Data& (0+255)
  3486  00C4  0086               	movwf	6
  3487  00C5  0187               	clrf	7
  3488  00C6  0801               	movf	1,w
  3489  00C7  00D3               	movwf	??_I2C_SetData
  3490  00C8  0856               	movf	I2C_SetData@i,w
  3491  00C9  3E21               	addlw	33
  3492  00CA  0777               	addwf	_I2C,w
  3493  00CB  00D4               	movwf	??_I2C_SetData+1
  3494  00CC  0854               	movf	??_I2C_SetData+1,w
  3495  00CD  0086               	movwf	6
  3496  00CE  3001               	movlw	1	; select bank2/3
  3497  00CF  0087               	movwf	7
  3498  00D0  0853               	movf	??_I2C_SetData,w
  3499  00D1  0081               	movwf	1
  3500  00D2  3001               	movlw	1
  3501  00D3  00D3               	movwf	??_I2C_SetData
  3502  00D4  0853               	movf	??_I2C_SetData,w
  3503  00D5  07D6               	addwf	I2C_SetData@i,f
  3504  00D6  3015               	movlw	21
  3505  00D7  0256               	subwf	I2C_SetData@i,w
  3506  00D8  1C03               	skipc
  3507  00D9  28C2               	goto	l2715
  3508  00DA                     l2721:	
  3509                           
  3510                           ;MCU_B1.c: 523: }
  3511                           ;MCU_B1.c: 524: I2C->BufferWriter[0]=Tx_Length;
  3512  00DA  085E               	movf	_Tx_Length,w
  3513  00DB  00D3               	movwf	??_I2C_SetData
  3514  00DC  0877               	movf	_I2C,w
  3515  00DD  3E20               	addlw	32
  3516  00DE  0086               	movwf	6
  3517  00DF  3001               	movlw	1	; select bank2/3
  3518  00E0  0087               	movwf	7
  3519  00E1  0853               	movf	??_I2C_SetData,w
  3520  00E2  0081               	movwf	1
  3521                           
  3522                           ;MCU_B1.c: 525: I2C->BufferWriter[22]=RSSI;
  3523  00E3  0838               	movf	_RSSI,w
  3524  00E4  00D3               	movwf	??_I2C_SetData
  3525  00E5  0877               	movf	_I2C,w
  3526  00E6  3E36               	addlw	54
  3527  00E7  0086               	movwf	6
  3528  00E8  3001               	movlw	1	; select bank2/3
  3529  00E9  0087               	movwf	7
  3530  00EA  0853               	movf	??_I2C_SetData,w
  3531  00EB  0081               	movwf	1
  3532                           
  3533                           ;MCU_B1.c: 526: I2C->BufferWriter[23]=CRC;
  3534  00EC  0837               	movf	_CRC,w
  3535  00ED  00D3               	movwf	??_I2C_SetData
  3536  00EE  0877               	movf	_I2C,w
  3537  00EF  3E37               	addlw	55
  3538  00F0  0086               	movwf	6
  3539  00F1  3001               	movlw	1	; select bank2/3
  3540  00F2  0087               	movwf	7
  3541  00F3  0853               	movf	??_I2C_SetData,w
  3542  00F4  0081               	movwf	1
  3543                           
  3544                           ;MCU_B1.c: 527: RC0=1;
  3545  00F5  140E               	bsf	14,0	;volatile
  3546                           
  3547                           ;MCU_B1.c: 528: }
  3548                           ;MCU_B1.c: 529: }
  3549  00F6  0008               	return
  3550  00F7                     l2725:	
  3551                           
  3552                           ;MCU_B1.c: 530: else
  3553                           ;MCU_B1.c: 531: {
  3554                           ;MCU_B1.c: 533: for(i=0;i<21;i++)
  3555  00F7  01D6               	clrf	I2C_SetData@i
  3556  00F8  3015               	movlw	21
  3557  00F9  0256               	subwf	I2C_SetData@i,w
  3558  00FA  1803               	btfsc	3,0
  3559  00FB  2913               	goto	l2737
  3560  00FC                     l2731:	
  3561                           
  3562                           ;MCU_B1.c: 534: {
  3563                           ;MCU_B1.c: 535: RF_Data[i]=I2C->BufferReader[i];
  3564  00FC  0856               	movf	I2C_SetData@i,w
  3565  00FD  0777               	addwf	_I2C,w
  3566  00FE  00D3               	movwf	??_I2C_SetData
  3567  00FF  0853               	movf	??_I2C_SetData,w
  3568  0100  0086               	movwf	6
  3569  0101  3001               	movlw	1	; select bank2/3
  3570  0102  0087               	movwf	7
  3571  0103  0801               	movf	1,w
  3572  0104  00D4               	movwf	??_I2C_SetData+1
  3573  0105  0856               	movf	I2C_SetData@i,w
  3574  0106  3E20               	addlw	_RF_Data& (0+255)
  3575  0107  0086               	movwf	6
  3576  0108  0187               	clrf	7
  3577  0109  0854               	movf	??_I2C_SetData+1,w
  3578  010A  0081               	movwf	1
  3579  010B  3001               	movlw	1
  3580  010C  00D3               	movwf	??_I2C_SetData
  3581  010D  0853               	movf	??_I2C_SetData,w
  3582  010E  07D6               	addwf	I2C_SetData@i,f
  3583  010F  3015               	movlw	21
  3584  0110  0256               	subwf	I2C_SetData@i,w
  3585  0111  1C03               	skipc
  3586  0112  28FC               	goto	l2731
  3587  0113                     l2737:	
  3588                           
  3589                           ;MCU_B1.c: 536: }
  3590                           ;MCU_B1.c: 537: RF->TransceiveGO=1;
  3591  0113  0878               	movf	_RF,w
  3592  0114  0086               	movwf	6
  3593  0115  0187               	clrf	7
  3594  0116  1501               	bsf	1,2
  3595  0117  0008               	return
  3596  0118                     __end_of_I2C_SetData:	
  3597                           
  3598                           	psect	text24
  3599  0547                     __ptext24:	
  3600 ;; *************** function _CC2500_PowerOnInitial *****************
  3601 ;; Defined at:
  3602 ;;		line 97 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;		None               void
  3609 ;; Registers used:
  3610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3616 ;;      Params:         0       0       0       0       0       0       0       0
  3617 ;;      Locals:         0       0       0       0       0       0       0       0
  3618 ;;      Temps:          0       0       0       0       0       0       0       0
  3619 ;;      Totals:         0       0       0       0       0       0       0       0
  3620 ;;Total ram usage:        0 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    7
  3623 ;; This function calls:
  3624 ;;		_CC2500_ClearRXFIFO
  3625 ;;		_CC2500_ClearTXFIFO
  3626 ;;		_CC2500_FrequencyCabr
  3627 ;;		_CC2500_InitPATable
  3628 ;;		_CC2500_InitSetREG
  3629 ;;		_CC2500_PowerRST
  3630 ;;		_CC2500_SIDLEMode
  3631 ;; This function is called by:
  3632 ;;		_main
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           
  3637                           ;psect for function _CC2500_PowerOnInitial
  3638  0547                     _CC2500_PowerOnInitial:	
  3639                           
  3640                           ;CC2500_B1.c: 99: CC2500_PowerRST();
  3641                           
  3642                           ;incstack = 0
  3643                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3644  0547  3183  237C  3185   	fcall	_CC2500_PowerRST
  3645                           
  3646                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
  3647  054A  3183  23D4  3185   	fcall	_CC2500_InitSetREG
  3648                           
  3649                           ;CC2500_B1.c: 101: CC2500_InitPATable();
  3650  054D  3184  24BA  3185   	fcall	_CC2500_InitPATable
  3651                           
  3652                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
  3653  0550  3186  262F  3185   	fcall	_CC2500_ClearTXFIFO
  3654                           
  3655                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
  3656  0553  3186  2633  3185   	fcall	_CC2500_ClearRXFIFO
  3657                           
  3658                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
  3659  0556  3185  25C9  3185   	fcall	_CC2500_FrequencyCabr
  3660                           
  3661                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
  3662  0559  3186  262B         	fcall	_CC2500_SIDLEMode
  3663  055B  0008               	return
  3664  055C                     __end_of_CC2500_PowerOnInitial:	
  3665                           
  3666                           	psect	text25
  3667  062B                     __ptext25:	
  3668 ;; *************** function _CC2500_SIDLEMode *****************
  3669 ;; Defined at:
  3670 ;;		line 183 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;		None
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;		None               void
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0, pclath, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3684 ;;      Params:         0       0       0       0       0       0       0       0
  3685 ;;      Locals:         0       0       0       0       0       0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0
  3687 ;;      Totals:         0       0       0       0       0       0       0       0
  3688 ;;Total ram usage:        0 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    6
  3691 ;; This function calls:
  3692 ;;		_CC2500_WriteCommand
  3693 ;; This function is called by:
  3694 ;;		_CC2500_PowerOnInitial
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           
  3699                           ;psect for function _CC2500_SIDLEMode
  3700  062B                     _CC2500_SIDLEMode:	
  3701                           
  3702                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
  3703                           
  3704                           ;incstack = 0
  3705                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
  3706  062B  3036               	movlw	54
  3707  062C  3185  25BB         	fcall	_CC2500_WriteCommand
  3708  062E  0008               	return
  3709  062F                     __end_of_CC2500_SIDLEMode:	
  3710                           
  3711                           	psect	text26
  3712  037C                     __ptext26:	
  3713 ;; *************** function _CC2500_PowerRST *****************
  3714 ;; Defined at:
  3715 ;;		line 110 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;		None
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;		None               void
  3722 ;; Registers used:
  3723 ;;		wreg, status,2, status,0, pclath, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3729 ;;      Params:         0       0       0       0       0       0       0       0
  3730 ;;      Locals:         0       0       0       0       0       0       0       0
  3731 ;;      Temps:          0       1       0       0       0       0       0       0
  3732 ;;      Totals:         0       1       0       0       0       0       0       0
  3733 ;;Total ram usage:        1 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    5
  3736 ;; This function calls:
  3737 ;;		_CC2500_WriteByte
  3738 ;;		_DelayTime_1us
  3739 ;; This function is called by:
  3740 ;;		_CC2500_PowerOnInitial
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           
  3745                           ;psect for function _CC2500_PowerRST
  3746  037C                     _CC2500_PowerRST:	
  3747                           
  3748                           ;CC2500_B1.c: 112: RB2=0;
  3749                           
  3750                           ;incstack = 0
  3751                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
  3752  037C  0020               	movlb	0	; select bank0
  3753  037D  110D               	bcf	13,2	;volatile
  3754                           
  3755                           ;CC2500_B1.c: 113: RB1=0;
  3756  037E  108D               	bcf	13,1	;volatile
  3757                           
  3758                           ;CC2500_B1.c: 114: RB5=1;
  3759  037F  168D               	bsf	13,5	;volatile
  3760                           
  3761                           ;CC2500_B1.c: 115: DelayTime_1us(10);
  3762  0380  300A               	movlw	10
  3763  0381  00D3               	movwf	DelayTime_1us@count
  3764  0382  3000               	movlw	0
  3765  0383  00D4               	movwf	DelayTime_1us@count+1
  3766  0384  3184  2474  3183   	fcall	_DelayTime_1us
  3767                           
  3768                           ;CC2500_B1.c: 116: RB5=0;
  3769  0387  0020               	movlb	0	; select bank0
  3770  0388  128D               	bcf	13,5	;volatile
  3771                           
  3772                           ;CC2500_B1.c: 117: DelayTime_1us(10);
  3773  0389  300A               	movlw	10
  3774  038A  00D3               	movwf	DelayTime_1us@count
  3775  038B  3000               	movlw	0
  3776  038C  00D4               	movwf	DelayTime_1us@count+1
  3777  038D  3184  2474  3183   	fcall	_DelayTime_1us
  3778                           
  3779                           ;CC2500_B1.c: 118: RB5=1;
  3780  0390  0020               	movlb	0	; select bank0
  3781  0391  168D               	bsf	13,5	;volatile
  3782                           
  3783                           ;CC2500_B1.c: 119: DelayTime_1us(40);
  3784  0392  3028               	movlw	40
  3785  0393  00D3               	movwf	DelayTime_1us@count
  3786  0394  3000               	movlw	0
  3787  0395  00D4               	movwf	DelayTime_1us@count+1
  3788  0396  3184  2474  3183   	fcall	_DelayTime_1us
  3789                           
  3790                           ;CC2500_B1.c: 120: RB5=0;
  3791  0399  0020               	movlb	0	; select bank0
  3792  039A  128D               	bcf	13,5	;volatile
  3793                           
  3794                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
  3795  039B  3030               	movlw	48
  3796  039C  00D9               	movwf	??_CC2500_PowerRST
  3797  039D  0859               	movf	??_CC2500_PowerRST,w
  3798  039E  00BA               	movwf	_SPI0Buffer
  3799  039F                     l136:	
  3800                           ;CC2500_B1.c: 122: while(RB3==1);
  3801                           
  3802  039F  198D               	btfsc	13,3	;volatile
  3803  03A0  2B9F               	goto	l136
  3804                           
  3805                           ;CC2500_B1.c: 123: CC2500_WriteByte();
  3806  03A1  3185  255C  3183   	fcall	_CC2500_WriteByte
  3807  03A4                     l139:	
  3808                           ;CC2500_B1.c: 124: while(RB3==1);
  3809                           
  3810  03A4  0020               	movlb	0	; select bank0
  3811  03A5  198D               	btfsc	13,3	;volatile
  3812  03A6  2BA4               	goto	l139
  3813                           
  3814                           ;CC2500_B1.c: 125: RB1=0;
  3815  03A7  108D               	bcf	13,1	;volatile
  3816                           
  3817                           ;CC2500_B1.c: 126: RB5=1;
  3818  03A8  168D               	bsf	13,5	;volatile
  3819  03A9  0008               	return
  3820  03AA                     __end_of_CC2500_PowerRST:	
  3821                           
  3822                           	psect	text27
  3823  03D4                     __ptext27:	
  3824 ;; *************** function _CC2500_InitSetREG *****************
  3825 ;; Defined at:
  3826 ;;		line 131 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;		None
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  loop_c          1    8[BANK0 ] unsigned char 
  3831 ;;  temp2           1    7[BANK0 ] unsigned char 
  3832 ;;  temp1           1    6[BANK0 ] unsigned char 
  3833 ;; Return value:  Size  Location     Type
  3834 ;;		None               void
  3835 ;; Registers used:
  3836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3842 ;;      Params:         0       0       0       0       0       0       0       0
  3843 ;;      Locals:         0       3       0       0       0       0       0       0
  3844 ;;      Temps:          0       1       0       0       0       0       0       0
  3845 ;;      Totals:         0       4       0       0       0       0       0       0
  3846 ;;Total ram usage:        4 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    6
  3849 ;; This function calls:
  3850 ;;		_CC2500_WriteREG
  3851 ;; This function is called by:
  3852 ;;		_CC2500_PowerOnInitial
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _CC2500_InitSetREG
  3858  03D4                     _CC2500_InitSetREG:	
  3859                           
  3860                           ;CC2500_B1.c: 133: unsigned char loop_c;
  3861                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
  3862                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
  3863                           
  3864                           ;incstack = 0
  3865                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3866  03D4  0020               	movlb	0	; select bank0
  3867  03D5  01DB               	clrf	CC2500_InitSetREG@loop_c
  3868  03D6                     L2:	
  3869  03D6  302F               	movlw	47
  3870  03D7  025B               	subwf	CC2500_InitSetREG@loop_c,w
  3871  03D8  1803               	btfsc	3,0
  3872  03D9  0008               	return
  3873                           
  3874                           ;CC2500_B1.c: 137: {
  3875                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
  3876  03DA  085B               	movf	CC2500_InitSetREG@loop_c,w
  3877  03DB  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  3878  03DC  0084               	movwf	4
  3879  03DD  3082               	movlw	high (_CC2500_registers_address| (0+32768))
  3880  03DE  1803               	skipnc
  3881  03DF  3E01               	addlw	1
  3882  03E0  0085               	movwf	5
  3883  03E1  0800               	movf	0,w	;code access
  3884  03E2  00D8               	movwf	??_CC2500_InitSetREG
  3885  03E3  0858               	movf	??_CC2500_InitSetREG,w
  3886  03E4  00D9               	movwf	CC2500_InitSetREG@temp1
  3887                           
  3888                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
  3889  03E5  085B               	movf	CC2500_InitSetREG@loop_c,w
  3890  03E6  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  3891  03E7  0084               	movwf	4
  3892  03E8  3082               	movlw	high (_CC2500_rfSettings| (0+32768))
  3893  03E9  1803               	skipnc
  3894  03EA  3E01               	addlw	1
  3895  03EB  0085               	movwf	5
  3896  03EC  0800               	movf	0,w	;code access
  3897  03ED  00D8               	movwf	??_CC2500_InitSetREG
  3898  03EE  0858               	movf	??_CC2500_InitSetREG,w
  3899  03EF  00DA               	movwf	CC2500_InitSetREG@temp2
  3900                           
  3901                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
  3902  03F0  085A               	movf	CC2500_InitSetREG@temp2,w
  3903  03F1  00D8               	movwf	??_CC2500_InitSetREG
  3904  03F2  0858               	movf	??_CC2500_InitSetREG,w
  3905  03F3  00D5               	movwf	CC2500_WriteREG@value
  3906  03F4  0859               	movf	CC2500_InitSetREG@temp1,w
  3907  03F5  3185  251C  3183   	fcall	_CC2500_WriteREG
  3908  03F8  3001               	movlw	1
  3909  03F9  0020               	movlb	0	; select bank0
  3910  03FA  00D8               	movwf	??_CC2500_InitSetREG
  3911  03FB  0858               	movf	??_CC2500_InitSetREG,w
  3912  03FC  07DB               	addwf	CC2500_InitSetREG@loop_c,f
  3913  03FD  2BD6               	goto	L2
  3914  03FE                     __end_of_CC2500_InitSetREG:	
  3915                           
  3916                           	psect	text28
  3917  04BA                     __ptext28:	
  3918 ;; *************** function _CC2500_InitPATable *****************
  3919 ;; Defined at:
  3920 ;;		line 147 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  loop_d          1    7[BANK0 ] unsigned char 
  3925 ;;  temp            1    6[BANK0 ] unsigned char 
  3926 ;; Return value:  Size  Location     Type
  3927 ;;		None               void
  3928 ;; Registers used:
  3929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3935 ;;      Params:         0       0       0       0       0       0       0       0
  3936 ;;      Locals:         0       2       0       0       0       0       0       0
  3937 ;;      Temps:          0       1       0       0       0       0       0       0
  3938 ;;      Totals:         0       3       0       0       0       0       0       0
  3939 ;;Total ram usage:        3 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    6
  3942 ;; This function calls:
  3943 ;;		_CC2500_WriteREG
  3944 ;; This function is called by:
  3945 ;;		_CC2500_PowerOnInitial
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           
  3950                           ;psect for function _CC2500_InitPATable
  3951  04BA                     _CC2500_InitPATable:	
  3952                           
  3953                           ;CC2500_B1.c: 149: unsigned char loop_d;
  3954                           ;CC2500_B1.c: 150: unsigned char temp;
  3955                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3959  04BA  0020               	movlb	0	; select bank0
  3960  04BB  01DA               	clrf	CC2500_InitPATable@loop_d
  3961  04BC                     L3:	
  3962  04BC  3008               	movlw	8
  3963  04BD  025A               	subwf	CC2500_InitPATable@loop_d,w
  3964  04BE  1803               	btfsc	3,0
  3965  04BF  0008               	return
  3966                           
  3967                           ;CC2500_B1.c: 153: {
  3968                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
  3969  04C0  085A               	movf	CC2500_InitPATable@loop_d,w
  3970  04C1  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  3971  04C2  0084               	movwf	4
  3972  04C3  3082               	movlw	high (_CC2500_patable_vaule| (0+32768))
  3973  04C4  1803               	skipnc
  3974  04C5  3E01               	addlw	1
  3975  04C6  0085               	movwf	5
  3976  04C7  0800               	movf	0,w	;code access
  3977  04C8  00D8               	movwf	??_CC2500_InitPATable
  3978  04C9  0858               	movf	??_CC2500_InitPATable,w
  3979  04CA  00D9               	movwf	CC2500_InitPATable@temp
  3980                           
  3981                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
  3982  04CB  0859               	movf	CC2500_InitPATable@temp,w
  3983  04CC  00D8               	movwf	??_CC2500_InitPATable
  3984  04CD  0858               	movf	??_CC2500_InitPATable,w
  3985  04CE  00D5               	movwf	CC2500_WriteREG@value
  3986  04CF  303E               	movlw	62
  3987  04D0  3185  251C  3184   	fcall	_CC2500_WriteREG
  3988  04D3  3001               	movlw	1
  3989  04D4  0020               	movlb	0	; select bank0
  3990  04D5  00D8               	movwf	??_CC2500_InitPATable
  3991  04D6  0858               	movf	??_CC2500_InitPATable,w
  3992  04D7  07DA               	addwf	CC2500_InitPATable@loop_d,f
  3993  04D8  2CBC               	goto	L3
  3994  04D9                     __end_of_CC2500_InitPATable:	
  3995                           
  3996                           	psect	text29
  3997  051C                     __ptext29:	
  3998 ;; *************** function _CC2500_WriteREG *****************
  3999 ;; Defined at:
  4000 ;;		line 227 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  w_addr          1    wreg     unsigned char 
  4003 ;;  value           1    2[BANK0 ] unsigned char 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  w_addr          1    4[BANK0 ] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;		None               void
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4015 ;;      Params:         0       1       0       0       0       0       0       0
  4016 ;;      Locals:         0       1       0       0       0       0       0       0
  4017 ;;      Temps:          0       1       0       0       0       0       0       0
  4018 ;;      Totals:         0       3       0       0       0       0       0       0
  4019 ;;Total ram usage:        3 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    5
  4022 ;; This function calls:
  4023 ;;		_CC2500_WriteByte
  4024 ;; This function is called by:
  4025 ;;		_CC2500_InitSetREG
  4026 ;;		_CC2500_InitPATable
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           
  4031                           ;psect for function _CC2500_WriteREG
  4032  051C                     _CC2500_WriteREG:	
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
  4036                           ;CC2500_WriteREG@w_addr stored from wreg
  4037  051C  0020               	movlb	0	; select bank0
  4038  051D  00D7               	movwf	CC2500_WriteREG@w_addr
  4039                           
  4040                           ;CC2500_B1.c: 229: RB5=0;
  4041  051E  128D               	bcf	13,5	;volatile
  4042                           
  4043                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
  4044  051F  0857               	movf	CC2500_WriteREG@w_addr,w
  4045  0520  00D6               	movwf	??_CC2500_WriteREG
  4046  0521  0856               	movf	??_CC2500_WriteREG,w
  4047  0522  00BA               	movwf	_SPI0Buffer
  4048  0523                     l181:	
  4049                           ;CC2500_B1.c: 231: while(RB3==1);
  4050                           
  4051  0523  198D               	btfsc	13,3	;volatile
  4052  0524  2D23               	goto	l181
  4053                           
  4054                           ;CC2500_B1.c: 232: CC2500_WriteByte();
  4055  0525  3185  255C  3185   	fcall	_CC2500_WriteByte
  4056                           
  4057                           ;CC2500_B1.c: 233: SPI0Buffer=value;
  4058  0528  0020               	movlb	0	; select bank0
  4059  0529  0855               	movf	CC2500_WriteREG@value,w
  4060  052A  00D6               	movwf	??_CC2500_WriteREG
  4061  052B  0856               	movf	??_CC2500_WriteREG,w
  4062  052C  00BA               	movwf	_SPI0Buffer
  4063                           
  4064                           ;CC2500_B1.c: 234: CC2500_WriteByte();
  4065  052D  3185  255C         	fcall	_CC2500_WriteByte
  4066                           
  4067                           ;CC2500_B1.c: 235: RB5=1;
  4068  052F  0020               	movlb	0	; select bank0
  4069  0530  168D               	bsf	13,5	;volatile
  4070  0531  0008               	return
  4071  0532                     __end_of_CC2500_WriteREG:	
  4072                           
  4073                           	psect	text30
  4074  05C9                     __ptext30:	
  4075 ;; *************** function _CC2500_FrequencyCabr *****************
  4076 ;; Defined at:
  4077 ;;		line 175 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;		None
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;		None
  4082 ;; Return value:  Size  Location     Type
  4083 ;;		None               void
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0, pclath, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4091 ;;      Params:         0       0       0       0       0       0       0       0
  4092 ;;      Locals:         0       0       0       0       0       0       0       0
  4093 ;;      Temps:          0       0       0       0       0       0       0       0
  4094 ;;      Totals:         0       0       0       0       0       0       0       0
  4095 ;;Total ram usage:        0 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    6
  4098 ;; This function calls:
  4099 ;;		_CC2500_WriteCommand
  4100 ;;		_DelayTime_1us
  4101 ;; This function is called by:
  4102 ;;		_CC2500_PowerOnInitial
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _CC2500_FrequencyCabr
  4108  05C9                     _CC2500_FrequencyCabr:	
  4109                           
  4110                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
  4114  05C9  3033               	movlw	51
  4115  05CA  3185  25BB  3185   	fcall	_CC2500_WriteCommand
  4116                           
  4117                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
  4118  05CD  30E8               	movlw	232
  4119  05CE  0020               	movlb	0	; select bank0
  4120  05CF  00D3               	movwf	DelayTime_1us@count
  4121  05D0  3003               	movlw	3
  4122  05D1  00D4               	movwf	DelayTime_1us@count+1
  4123  05D2  3184  2474         	fcall	_DelayTime_1us
  4124  05D4  0008               	return
  4125  05D5                     __end_of_CC2500_FrequencyCabr:	
  4126                           
  4127                           	psect	text31
  4128  0474                     __ptext31:	
  4129 ;; *************** function _DelayTime_1us *****************
  4130 ;; Defined at:
  4131 ;;		line 283 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  count           2    0[BANK0 ] int 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  j               2    4[BANK0 ] unsigned int 
  4136 ;;  i               2    2[BANK0 ] unsigned int 
  4137 ;; Return value:  Size  Location     Type
  4138 ;;		None               void
  4139 ;; Registers used:
  4140 ;;		wreg, status,2
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4146 ;;      Params:         0       2       0       0       0       0       0       0
  4147 ;;      Locals:         0       4       0       0       0       0       0       0
  4148 ;;      Temps:          0       0       0       0       0       0       0       0
  4149 ;;      Totals:         0       6       0       0       0       0       0       0
  4150 ;;Total ram usage:        6 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    4
  4153 ;; This function calls:
  4154 ;;		Nothing
  4155 ;; This function is called by:
  4156 ;;		_CC2500_PowerRST
  4157 ;;		_CC2500_FrequencyCabr
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           
  4162                           ;psect for function _DelayTime_1us
  4163  0474                     _DelayTime_1us:	
  4164                           
  4165                           ;CC2500_B1.c: 285: unsigned int i,j;
  4166                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  4170  0474  3001               	movlw	1
  4171  0475  0020               	movlb	0	; select bank0
  4172  0476  00D5               	movwf	DelayTime_1us@i
  4173  0477  3000               	movlw	0
  4174  0478  00D6               	movwf	DelayTime_1us@i+1
  4175  0479                     l205:	
  4176  0479  0854               	movf	DelayTime_1us@count+1,w
  4177  047A  0256               	subwf	DelayTime_1us@i+1,w
  4178  047B  1D03               	skipz
  4179  047C  2C7F               	goto	u2665
  4180  047D  0853               	movf	DelayTime_1us@count,w
  4181  047E  0255               	subwf	DelayTime_1us@i,w
  4182  047F                     u2665:	
  4183  047F  1803               	btfsc	3,0
  4184  0480  0008               	return
  4185                           
  4186                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
  4187  0481  01D7               	clrf	DelayTime_1us@j
  4188  0482  01D8               	clrf	DelayTime_1us@j+1
  4189  0483  3000               	movlw	0
  4190  0484  0258               	subwf	DelayTime_1us@j+1,w
  4191  0485  3002               	movlw	2
  4192  0486  1903               	skipnz
  4193  0487  0257               	subwf	DelayTime_1us@j,w
  4194  0488  1803               	btfsc	3,0
  4195  0489  2C95               	goto	l2689
  4196  048A                     l2687:	
  4197  048A  3001               	movlw	1
  4198  048B  07D7               	addwf	DelayTime_1us@j,f
  4199  048C  3000               	movlw	0
  4200  048D  3DD8               	addwfc	DelayTime_1us@j+1,f
  4201  048E  3000               	movlw	0
  4202  048F  0258               	subwf	DelayTime_1us@j+1,w
  4203  0490  3002               	movlw	2
  4204  0491  1903               	skipnz
  4205  0492  0257               	subwf	DelayTime_1us@j,w
  4206  0493  1C03               	skipc
  4207  0494  2C8A               	goto	l2687
  4208  0495                     l2689:	
  4209  0495  3001               	movlw	1
  4210  0496  07D5               	addwf	DelayTime_1us@i,f
  4211  0497  3000               	movlw	0
  4212  0498  3DD6               	addwfc	DelayTime_1us@i+1,f
  4213  0499  2C79               	goto	l205
  4214  049A                     __end_of_DelayTime_1us:	
  4215                           
  4216                           	psect	text32
  4217  062F                     __ptext32:	
  4218 ;; *************** function _CC2500_ClearTXFIFO *****************
  4219 ;; Defined at:
  4220 ;;		line 161 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;		None               void
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0, pclath, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4234 ;;      Params:         0       0       0       0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0
  4237 ;;      Totals:         0       0       0       0       0       0       0       0
  4238 ;;Total ram usage:        0 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    6
  4241 ;; This function calls:
  4242 ;;		_CC2500_WriteCommand
  4243 ;; This function is called by:
  4244 ;;		_CC2500_PowerOnInitial
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           
  4249                           ;psect for function _CC2500_ClearTXFIFO
  4250  062F                     _CC2500_ClearTXFIFO:	
  4251                           
  4252                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
  4256  062F  303B               	movlw	59
  4257  0630  3185  25BB         	fcall	_CC2500_WriteCommand
  4258  0632  0008               	return
  4259  0633                     __end_of_CC2500_ClearTXFIFO:	
  4260                           
  4261                           	psect	text33
  4262  0633                     __ptext33:	
  4263 ;; *************** function _CC2500_ClearRXFIFO *****************
  4264 ;; Defined at:
  4265 ;;		line 168 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;		None
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;		None               void
  4272 ;; Registers used:
  4273 ;;		wreg, status,2, status,0, pclath, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4279 ;;      Params:         0       0       0       0       0       0       0       0
  4280 ;;      Locals:         0       0       0       0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0       0
  4282 ;;      Totals:         0       0       0       0       0       0       0       0
  4283 ;;Total ram usage:        0 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    6
  4286 ;; This function calls:
  4287 ;;		_CC2500_WriteCommand
  4288 ;; This function is called by:
  4289 ;;		_CC2500_PowerOnInitial
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function _CC2500_ClearRXFIFO
  4295  0633                     _CC2500_ClearRXFIFO:	
  4296                           
  4297                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
  4298                           
  4299                           ;incstack = 0
  4300                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
  4301  0633  303A               	movlw	58
  4302  0634  3185  25BB         	fcall	_CC2500_WriteCommand
  4303  0636  0008               	return
  4304  0637                     __end_of_CC2500_ClearRXFIFO:	
  4305                           
  4306                           	psect	text34
  4307  05BB                     __ptext34:	
  4308 ;; *************** function _CC2500_WriteCommand *****************
  4309 ;; Defined at:
  4310 ;;		line 253 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  command         1    wreg     unsigned char 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  command         1    3[BANK0 ] unsigned char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;		None               void
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0, pclath, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4324 ;;      Params:         0       0       0       0       0       0       0       0
  4325 ;;      Locals:         0       1       0       0       0       0       0       0
  4326 ;;      Temps:          0       1       0       0       0       0       0       0
  4327 ;;      Totals:         0       2       0       0       0       0       0       0
  4328 ;;Total ram usage:        2 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    5
  4331 ;; This function calls:
  4332 ;;		_CC2500_WriteByte
  4333 ;; This function is called by:
  4334 ;;		_CC2500_TxData
  4335 ;;		_CC2500_RxData
  4336 ;;		_CC2500_ClearTXFIFO
  4337 ;;		_CC2500_ClearRXFIFO
  4338 ;;		_CC2500_FrequencyCabr
  4339 ;;		_CC2500_SIDLEMode
  4340 ;;		_setRF_Main
  4341 ;;		_RF_RxDisable
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           
  4346                           ;psect for function _CC2500_WriteCommand
  4347  05BB                     _CC2500_WriteCommand:	
  4348                           
  4349                           ;incstack = 0
  4350                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
  4351                           ;CC2500_WriteCommand@command stored from wreg
  4352  05BB  0020               	movlb	0	; select bank0
  4353  05BC  00D6               	movwf	CC2500_WriteCommand@command
  4354                           
  4355                           ;CC2500_B1.c: 255: RB5=0;
  4356  05BD  128D               	bcf	13,5	;volatile
  4357                           
  4358                           ;CC2500_B1.c: 256: SPI0Buffer=command;
  4359  05BE  0856               	movf	CC2500_WriteCommand@command,w
  4360  05BF  00D5               	movwf	??_CC2500_WriteCommand
  4361  05C0  0855               	movf	??_CC2500_WriteCommand,w
  4362  05C1  00BA               	movwf	_SPI0Buffer
  4363  05C2                     l193:	
  4364                           ;CC2500_B1.c: 258: while(RB3==1);
  4365                           
  4366  05C2  198D               	btfsc	13,3	;volatile
  4367  05C3  2DC2               	goto	l193
  4368                           
  4369                           ;CC2500_B1.c: 260: CC2500_WriteByte();
  4370  05C4  3185  255C         	fcall	_CC2500_WriteByte
  4371                           
  4372                           ;CC2500_B1.c: 261: RB5=1;
  4373  05C6  0020               	movlb	0	; select bank0
  4374  05C7  168D               	bsf	13,5	;volatile
  4375  05C8  0008               	return
  4376  05C9                     __end_of_CC2500_WriteCommand:	
  4377                           
  4378                           	psect	text35
  4379  055C                     __ptext35:	
  4380 ;; *************** function _CC2500_WriteByte *****************
  4381 ;; Defined at:
  4382 ;;		line 193 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;		None
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  loop_a          1    1[BANK0 ] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;		None               void
  4389 ;; Registers used:
  4390 ;;		wreg, status,2, status,0
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4396 ;;      Params:         0       0       0       0       0       0       0       0
  4397 ;;      Locals:         0       1       0       0       0       0       0       0
  4398 ;;      Temps:          0       1       0       0       0       0       0       0
  4399 ;;      Totals:         0       2       0       0       0       0       0       0
  4400 ;;Total ram usage:        2 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    4
  4403 ;; This function calls:
  4404 ;;		Nothing
  4405 ;; This function is called by:
  4406 ;;		_CC2500_TxData
  4407 ;;		_CC2500_RxData
  4408 ;;		_CC2500_PowerRST
  4409 ;;		_CC2500_WriteREG
  4410 ;;		_CC2500_WriteCommand
  4411 ;;		_CC2500_ReadStatus
  4412 ;;		_CC2500_ReadREG
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           
  4417                           ;psect for function _CC2500_WriteByte
  4418  055C                     _CC2500_WriteByte:	
  4419                           
  4420                           ;CC2500_B1.c: 195: unsigned char loop_a;
  4421                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  4425  055C  0020               	movlb	0	; select bank0
  4426  055D  01D4               	clrf	CC2500_WriteByte@loop_a
  4427  055E                     L4:	
  4428  055E  3008               	movlw	8
  4429  055F  0254               	subwf	CC2500_WriteByte@loop_a,w
  4430  0560  1803               	btfsc	3,0
  4431  0561  0008               	return
  4432                           
  4433                           ;CC2500_B1.c: 197: {
  4434                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
  4435  0562  1FBA               	btfss	_SPI0Buffer,7
  4436  0563  2D66               	goto	l169
  4437                           
  4438                           ;CC2500_B1.c: 199: RB1=1;
  4439  0564  148D               	bsf	13,1	;volatile
  4440  0565  2D67               	goto	l170
  4441  0566                     l169:	
  4442                           
  4443                           ;CC2500_B1.c: 200: else
  4444                           ;CC2500_B1.c: 201: RB1=0;
  4445  0566  108D               	bcf	13,1	;volatile
  4446  0567                     l170:	
  4447                           
  4448                           ;CC2500_B1.c: 202: RB2=1;
  4449  0567  150D               	bsf	13,2	;volatile
  4450                           
  4451                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
  4452  0568  1003               	clrc
  4453  0569  0DBA               	rlf	_SPI0Buffer,f
  4454                           
  4455                           ;CC2500_B1.c: 204: RB2=0;
  4456  056A  110D               	bcf	13,2	;volatile
  4457  056B  3001               	movlw	1
  4458  056C  00D3               	movwf	??_CC2500_WriteByte
  4459  056D  0853               	movf	??_CC2500_WriteByte,w
  4460  056E  07D4               	addwf	CC2500_WriteByte@loop_a,f
  4461  056F  2D5E               	goto	L4
  4462  0570                     __end_of_CC2500_WriteByte:	
  4463                           
  4464                           	psect	intentry
  4465  0004                     __pintentry:	
  4466 ;; *************** function _ISR *****************
  4467 ;; Defined at:
  4468 ;;		line 97 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;		None
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;		None               void
  4475 ;; Registers used:
  4476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4482 ;;      Params:         0       0       0       0       0       0       0       0
  4483 ;;      Locals:         0       0       0       0       0       0       0       0
  4484 ;;      Temps:          1       0       0       0       0       0       0       0
  4485 ;;      Totals:         1       0       0       0       0       0       0       0
  4486 ;;Total ram usage:        1 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    3
  4489 ;; This function calls:
  4490 ;;		_I2C_ISR
  4491 ;;		_INT_ISR
  4492 ;;		_TMR1_ISR
  4493 ;; This function is called by:
  4494 ;;		Interrupt level 1
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498  0004                     _ISR:	
  4499                           
  4500                           ;incstack = 0
  4501                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4502  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4503  0005  3180               	pagesel	$
  4504  0006  0020               	movlb	0	; select bank0
  4505  0007  087F               	movf	127,w
  4506  0008  00F5               	movwf	??_ISR
  4507                           
  4508                           ;MCU_B1.c: 99: ;;
  4509                           ;MCU_B1.c: 101: ;;
  4510                           ;MCU_B1.c: 103: TMR1_ISR();
  4511  0009  3183  23FE  3180   	fcall	_TMR1_ISR
  4512                           
  4513                           ;MCU_B1.c: 107: INT_ISR();
  4514  000C  3185  25D5  3180   	fcall	_INT_ISR
  4515                           
  4516                           ;MCU_B1.c: 109: ;;
  4517                           ;MCU_B1.c: 111: I2C_ISR();
  4518  000F  3185  259E         	fcall	_I2C_ISR
  4519  0011  0875               	movf	??_ISR,w
  4520  0012  0020               	movlb	0	; select bank0
  4521  0013  00FF               	movwf	127
  4522  0014  107E               	bcf	126,0	;clear compiler interrupt flag
  4523  0015  0009               	retfie
  4524  0016                     __end_of_ISR:	
  4525                           
  4526                           	psect	text37
  4527  03FE                     __ptext37:	
  4528 ;; *************** function _TMR1_ISR *****************
  4529 ;; Defined at:
  4530 ;;		line 253 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;		None
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;		None
  4535 ;; Return value:  Size  Location     Type
  4536 ;;		None               void
  4537 ;; Registers used:
  4538 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4544 ;;      Params:         0       0       0       0       0       0       0       0
  4545 ;;      Locals:         0       0       0       0       0       0       0       0
  4546 ;;      Temps:          0       0       0       0       0       0       0       0
  4547 ;;      Totals:         0       0       0       0       0       0       0       0
  4548 ;;Total ram usage:        0 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_ISR
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           
  4558                           ;psect for function _TMR1_ISR
  4559  03FE                     _TMR1_ISR:	
  4560                           
  4561                           ;MCU_B1.c: 255: if(TMR1IE && TMR1IF)
  4562                           
  4563                           ;incstack = 0
  4564                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4565  03FE  0021               	movlb	1	; select bank1
  4566  03FF  1C11               	btfss	17,0	;volatile
  4567  0400  0008               	return
  4568  0401  0020               	movlb	0	; select bank0
  4569  0402  1C11               	btfss	17,0	;volatile
  4570  0403  0008               	return
  4571                           
  4572                           ;MCU_B1.c: 256: {
  4573                           ;MCU_B1.c: 257: TMR1H=((65536-700)/256);
  4574  0404  30FD               	movlw	253
  4575  0405  0097               	movwf	23	;volatile
  4576                           
  4577                           ;MCU_B1.c: 258: TMR1L=((65536-700)%256);
  4578  0406  3044               	movlw	68
  4579  0407  0096               	movwf	22	;volatile
  4580                           
  4581                           ;MCU_B1.c: 259: TMR1IF=0;
  4582  0408  1011               	bcf	17,0	;volatile
  4583                           
  4584                           ;MCU_B1.c: 260: Timer1->Count++;
  4585  0409  0A5D               	incf	_Timer1,w
  4586  040A  0086               	movwf	6
  4587  040B  0187               	clrf	7
  4588  040C  3001               	movlw	1
  4589  040D  0781               	addwf	1,f
  4590  040E  3141               	addfsr 1,1
  4591  040F  1803               	skipnc
  4592  0410  0A81               	incf	1,f
  4593                           
  4594                           ;MCU_B1.c: 261: if(Timer1->Count == 20)
  4595  0411  0A5D               	incf	_Timer1,w
  4596  0412  0086               	movwf	6
  4597  0413  0187               	clrf	7
  4598  0414  3F40               	moviw [0]fsr1
  4599  0415  3A14               	xorlw	20
  4600  0416  1D03               	skipz
  4601  0417  2C1A               	goto	u187_25
  4602  0418  3F41               	moviw [1]fsr1
  4603  0419  3A00               	xorlw	0
  4604  041A                     u187_25:	
  4605  041A  1D03               	skipz
  4606  041B  0008               	return
  4607                           
  4608                           ;MCU_B1.c: 262: {
  4609                           ;MCU_B1.c: 263: Timer1->Count=0;
  4610  041C  0A5D               	incf	_Timer1,w
  4611  041D  0086               	movwf	6
  4612  041E  0187               	clrf	7
  4613  041F  3000               	movlw	0
  4614  0420  3FC0               	movwi [0]fsr1
  4615  0421  3FC1               	movwi [1]fsr1
  4616                           
  4617                           ;MCU_B1.c: 264: TMain->T1_Timerout=1;
  4618  0422  085C               	movf	_TMain,w
  4619  0423  0086               	movwf	6
  4620  0424  0187               	clrf	7
  4621  0425  1501               	bsf	1,2
  4622  0426  0008               	return
  4623  0427                     __end_of_TMR1_ISR:	
  4624                           
  4625                           	psect	text38
  4626  05D5                     __ptext38:	
  4627 ;; *************** function _INT_ISR *****************
  4628 ;; Defined at:
  4629 ;;		line 291 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;		None
  4634 ;; Return value:  Size  Location     Type
  4635 ;;		None               void
  4636 ;; Registers used:
  4637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4643 ;;      Params:         0       0       0       0       0       0       0       0
  4644 ;;      Locals:         0       0       0       0       0       0       0       0
  4645 ;;      Temps:          0       0       0       0       0       0       0       0
  4646 ;;      Totals:         0       0       0       0       0       0       0       0
  4647 ;;Total ram usage:        0 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    2
  4650 ;; This function calls:
  4651 ;;		_setRF_ReceiveGO
  4652 ;; This function is called by:
  4653 ;;		_ISR
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           
  4658                           ;psect for function _INT_ISR
  4659  05D5                     _INT_ISR:	
  4660                           
  4661                           ;MCU_B1.c: 293: if(INTE && INTF)
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4665  05D5  1E0B               	btfss	11,4	;volatile
  4666  05D6  0008               	return
  4667  05D7  1C8B               	btfss	11,1	;volatile
  4668  05D8  0008               	return
  4669                           
  4670                           ;MCU_B1.c: 294: {
  4671                           ;MCU_B1.c: 295: INTF=0;
  4672  05D9  108B               	bcf	11,1	;volatile
  4673                           
  4674                           ;MCU_B1.c: 296: INTE=0;
  4675  05DA  120B               	bcf	11,4	;volatile
  4676                           
  4677                           ;MCU_B1.c: 297: setRF_ReceiveGO(1,1);
  4678  05DB  01F3               	clrf	setRF_ReceiveGO@command
  4679  05DC  0AF3               	incf	setRF_ReceiveGO@command,f
  4680  05DD  3001               	movlw	1
  4681  05DE  3185  25E1         	fcall	_setRF_ReceiveGO
  4682  05E0  0008               	return
  4683  05E1                     __end_of_INT_ISR:	
  4684                           
  4685                           	psect	text39
  4686  05E1                     __ptext39:	
  4687 ;; *************** function _setRF_ReceiveGO *****************
  4688 ;; Defined at:
  4689 ;;		line 37 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  rf              1    wreg     unsigned char 
  4692 ;;  command         1    2[COMMON] unsigned char 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  rf              1    3[COMMON] unsigned char 
  4695 ;; Return value:  Size  Location     Type
  4696 ;;		None               void
  4697 ;; Registers used:
  4698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4704 ;;      Params:         1       0       0       0       0       0       0       0
  4705 ;;      Locals:         1       0       0       0       0       0       0       0
  4706 ;;      Temps:          0       0       0       0       0       0       0       0
  4707 ;;      Totals:         2       0       0       0       0       0       0       0
  4708 ;;Total ram usage:        2 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:    1
  4711 ;; This function calls:
  4712 ;;		i1_RfPointSelect
  4713 ;; This function is called by:
  4714 ;;		_INT_ISR
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           
  4719                           ;psect for function _setRF_ReceiveGO
  4720  05E1                     _setRF_ReceiveGO:	
  4721                           
  4722                           ;incstack = 0
  4723                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4724                           ;setRF_ReceiveGO@rf stored from wreg
  4725  05E1  00F4               	movwf	setRF_ReceiveGO@rf
  4726                           
  4727                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
  4728  05E2  0874               	movf	setRF_ReceiveGO@rf,w
  4729  05E3  3185  25F8         	fcall	i1_RfPointSelect
  4730                           
  4731                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
  4732  05E5  0878               	movf	_RF,w
  4733  05E6  0086               	movwf	6
  4734  05E7  0187               	clrf	7
  4735  05E8  0873               	movf	setRF_ReceiveGO@command,w
  4736  05E9  1081               	bcf	1,1
  4737  05EA  1D03               	skipz
  4738  05EB  1481               	bsf	1,1
  4739  05EC  0008               	return
  4740  05ED                     __end_of_setRF_ReceiveGO:	
  4741                           
  4742                           	psect	text40
  4743  05F8                     __ptext40:	
  4744 ;; *************** function i1_RfPointSelect *****************
  4745 ;; Defined at:
  4746 ;;		line 7 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  rf              1    wreg     unsigned char 
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  rf              1    1[COMMON] unsigned char 
  4751 ;; Return value:  Size  Location     Type
  4752 ;;		None               void
  4753 ;; Registers used:
  4754 ;;		wreg
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4760 ;;      Params:         0       0       0       0       0       0       0       0
  4761 ;;      Locals:         1       0       0       0       0       0       0       0
  4762 ;;      Temps:          1       0       0       0       0       0       0       0
  4763 ;;      Totals:         2       0       0       0       0       0       0       0
  4764 ;;Total ram usage:        2 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		_setRF_ReceiveGO
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           
  4774                           ;psect for function i1_RfPointSelect
  4775  05F8                     i1_RfPointSelect:	
  4776                           
  4777                           ;incstack = 0
  4778                           ; Regs used in i1_RfPointSelect: [wreg]
  4779                           ;i1RfPointSelect@rf stored from wreg
  4780  05F8  00F2               	movwf	i1RfPointSelect@rf
  4781                           
  4782                           ;RF_Control_B1.c: 10: if(rf == 1)
  4783  05F9  0872               	movf	i1RfPointSelect@rf,w
  4784  05FA  3A01               	xorlw	1
  4785  05FB  1D03               	skipz
  4786  05FC  0008               	return
  4787                           
  4788                           ;RF_Control_B1.c: 11: {
  4789                           ;RF_Control_B1.c: 12: RF=&RF1;
  4790  05FD  304D               	movlw	_RF1& (0+255)
  4791  05FE  00F1               	movwf	??i1_RfPointSelect
  4792  05FF  0871               	movf	??i1_RfPointSelect,w
  4793  0600  00F8               	movwf	_RF
  4794  0601  0008               	return
  4795  0602                     __end_ofi1_RfPointSelect:	
  4796                           
  4797                           	psect	text41
  4798  059E                     __ptext41:	
  4799 ;; *************** function _I2C_ISR *****************
  4800 ;; Defined at:
  4801 ;;		line 430 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;		None
  4806 ;; Return value:  Size  Location     Type
  4807 ;;		None               void
  4808 ;; Registers used:
  4809 ;;		wreg, fsr1l, fsr1h
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4815 ;;      Params:         0       0       0       0       0       0       0       0
  4816 ;;      Locals:         0       0       0       0       0       0       0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0       0
  4818 ;;      Totals:         0       0       0       0       0       0       0       0
  4819 ;;Total ram usage:        0 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; This function calls:
  4822 ;;		Nothing
  4823 ;; This function is called by:
  4824 ;;		_ISR
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           
  4829                           ;psect for function _I2C_ISR
  4830  059E                     _I2C_ISR:	
  4831                           
  4832                           ;MCU_B1.c: 432: if(SSPIE && SSPIF)
  4833                           
  4834                           ;incstack = 0
  4835                           ; Regs used in _I2C_ISR: [wregfsr1]
  4836  059E  0021               	movlb	1	; select bank1
  4837  059F  1D91               	btfss	17,3	;volatile
  4838  05A0  0008               	return
  4839  05A1  0020               	movlb	0	; select bank0
  4840  05A2  1D91               	btfss	17,3	;volatile
  4841  05A3  0008               	return
  4842                           
  4843                           ;MCU_B1.c: 433: {
  4844                           ;MCU_B1.c: 434: SSPIE=0;
  4845  05A4  0021               	movlb	1	; select bank1
  4846  05A5  1191               	bcf	17,3	;volatile
  4847                           
  4848                           ;MCU_B1.c: 435: I2C->SlaveGO=1;
  4849  05A6  0877               	movf	_I2C,w
  4850  05A7  3E42               	addlw	66
  4851  05A8  0086               	movwf	6
  4852  05A9  3001               	movlw	1	; select bank2/3
  4853  05AA  0087               	movwf	7
  4854  05AB  1401               	bsf	1,0
  4855  05AC  0008               	return
  4856  05AD                     __end_of_I2C_ISR:	
  4857  007E                     btemp	set	126	;btemp
  4858  007E                     pic14e$flags	set	126
  4859  007E                     wtemp	set	126
  4860  007E                     wtemp0	set	126
  4861  0080                     wtemp1	set	128
  4862  0082                     wtemp2	set	130
  4863  0084                     wtemp3	set	132
  4864  0086                     wtemp4	set	134
  4865  0088                     wtemp5	set	136
  4866  007F                     wtemp6	set	127
  4867  007E                     ttemp	set	126
  4868  007E                     ttemp0	set	126
  4869  0081                     ttemp1	set	129
  4870  0084                     ttemp2	set	132
  4871  0087                     ttemp3	set	135
  4872  007F                     ttemp4	set	127
  4873  007E                     ltemp	set	126
  4874  007E                     ltemp0	set	126
  4875  0082                     ltemp1	set	130
  4876  0086                     ltemp2	set	134
  4877  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         120
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      9      63
    BANK1            80      0      32
    BANK2            80      0      67
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    I2C	PTR struct I2C size(1) Largest target is 67
		 -> NULL(NULL[0]), VarI2C(BANK2[67]), 

    Timer1	PTR struct Timer1 size(1) Largest target is 3
		 -> NULL(NULL[0]), VarTimer1(BANK0[3]), 

    RFSW	PTR struct RFSW size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    TMain	PTR struct TMain size(1) Largest target is 15
		 -> NULL(NULL[0]), VarTMain(BANK0[15]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK1[32]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _RF_Main->_setRF_Main
    _setRF_Main->_CC2500_RxData
    _setRF_Main->_CC2500_TxData
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_I2C_Set
    _Mcu_Initialization->_TMR1_Set
    _MainT->_setRF_Enable
    _setRF_Enable->_RfPointSelect
    _I2C_Main->_I2C_SetData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4323
              _CC2500_PowerOnInitial
                           _I2C_Main
                              _MainT
                      _MainT_Initial
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0    1538
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0    1538
                                              6 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                        _I2C_SetData
                       _RF_RxDisable
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     192
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     628
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     158
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _I2C_Set
                            _INT_Set
                             _IO_Set
                           _TMR1_Set
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initial                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                1     1      0     189
                       _setRF_Enable
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     189
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Main                                             1     1      0     489
                        _I2C_SetData
                     _I2C_Slave_Mode
 ---------------------------------------------------------------------------------
 (2) _I2C_Slave_Mode                                       3     3      0     198
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _I2C_SetData                                          4     4      0     291
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2107
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     464
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     458
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     393
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     260
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     495
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     396
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0     119
                                              4 COMMON     1     1      0
                            _I2C_ISR
                            _INT_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_ISR                                              0     0      0     119
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (8) _setRF_ReceiveGO                                      2     1      1     119
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (9) i1_RfPointSelect                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _I2C_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _I2C_Main
     _I2C_SetData
     _I2C_Slave_Mode
   _MainT
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
   _MainT_Initial
   _Mcu_Initialization
     _I2C_Set
     _INT_Set
     _IO_Set
     _TMR1_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _I2C_SetData
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _setINT_GO

 _ISR (ROOT)
   _I2C_ISR
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      AC       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      20       8       40.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      43      10       83.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      AC      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Sep 27 20:35:19 2014

                 ??_MainT_Initial 0053                                _BF 10A0                                _RF 0078  
         __end_of_CC2500_WriteREG 0532                               l103 030A                               l112 0336  
                             l123 0277                               l108 032E                               l205 0479  
                             l109 0333                               l119 0268                               l136 039F  
                             l170 0567                               l139 03A4                               _I2C 0077  
                             l181 0523                               l169 0566                               l193 05C2  
                             l199 04F8                               l801 014B                               l810 0176  
                             l802 013B                               l811 015B                               l805 013F  
                             l690 0368                               l799 0154                               _CKP 10AC  
                             _GIE 005F                               _CRC 0037                               _RA0 0060  
                             _RA1 0061                               _RB0 0068                               _RB1 0069  
                             _RC0 0070                               _RB2 006A                               _RB3 006B  
                             _RB5 006D                               _RF1 004D                               _PEN 10B2  
                             _ISR 0004                               _SEN 10B0                   __end_of_I2C_ISR 05AD  
        __end_of_CC2500_WriteByte 0570                   __end_of_I2C_Set 051C              __size_of_I2C_SetData 006D  
                             wreg 0009                              ?_ISR 0071                              l3021 0378  
                            l3137 045A                              l2721 00DA                              l2731 00FC  
                            l2715 00C2                              l2725 00F7                              l2661 0285  
                            l2629 0319                              l2821 005B                              l2575 04E6  
                            l2663 029A                              l2737 0113                              l2577 04EA  
                            l2833 0076                              l2675 02AD                              l2835 007A  
                            l2687 048A                              l2919 012F                              l2689 0495  
                            l2849 00A0                              l2993 02E4                              _AHEN 10B9  
                            _DHEN 10B8                              u3005 02D2                              _LATA 010C  
                            _LATB 010D                   __end_of_INT_ISR 05E1                              u3015 02F8  
                            _LATC 010E                              u2520 0609                              u2665 047F  
                            _PEIE 005E                              _INTE 005C                              _INTF 0059  
                            _RCEN 10B3                              _RFSW 0079                   __end_of_INT_Set 0623  
                            _RSSI 0038                              _R_nW 10A2                              _main 044E  
                 __end_of_RF_Main 0627                  __end_of_I2C_Main 037C                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            indf1 0001                              fsr1l 0006                              btemp 007E  
                            ltemp 007E     __size_of_setRF_Initialization 0006                              start 0016  
                            ttemp 007E                              wtemp 007E                     _RfPointSelect 05ED  
                           ??_ISR 0075                             ?_main 0071                             _ACKEN 10B4  
                   __CFG_WDTE$OFF 0000                             _T1CON 0018     __size_of_CC2500_FrequencyCabr 000C  
                           _TMR1H 0017                             _TMR1L 0016                             _PORTA 000C  
                           _PORTB 000D                             _PORTC 000E                             _TRISA 008C  
                           _TRISB 008D                             _TRISC 008E                             _SSPIE 048B  
                           _SSPIF 008B                             _WPUB0 1068                             _SSPOV 10AE  
                           _TMain 005C                             _MainT 02BB                     __CFG_WRT$BOOT 0000  
                __end_of_TMR1_ISR 0427      __size_of_CC2500_WriteCommand 000E                  __end_of_TMR1_Set 0580  
     __size_of_CC2500_ClearRXFIFO 0004       __size_of_CC2500_ClearTXFIFO 0004               CC2500_RxData@loop_f 0058  
                  __pbitbssCOMMON 0380                  ?_CC2500_ReadByte 0071                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                           ttemp0 007E                             ttemp1 0081                             ttemp2 0084  
                           ttemp3 0087                             ttemp4 007F                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
               ?_CC2500_SIDLEMode 0071        __size_of_RF_Initialization 0004                    ?_RfPointSelect 0071  
              ??_CC2500_SIDLEMode 0057                   __initialization 0018                  ?_CC2500_PowerRST 0071  
                    __end_of_main 0474                         ??_I2C_ISR 0071                  ?_CC2500_WriteREG 0055  
                       ??_I2C_Set 0053                            ??_main 005C                        _Receive_GO 0381  
                      _Receive_OK 0382                            ?_MainT 0071                         ??_INT_ISR 0075  
                       ??_INT_Set 0053                 i1RfPointSelect@rf 0072                         ??_RF_Main 005B  
                  setRF_Enable@rf 0056                            _ANSELA 018C                            _ANSELB 018D  
                          _ANSELC 018E                            u187_25 041A                            _OSCCON 0099  
                          _TMR1IE 0488                            _TMR1IF 0088                            _IO_Set 0532  
                          _SSPADD 0212                            _SSPBUF 0211                DelayTime_1us@count 0053  
                      _VarProduct 00A0    __size_of_CC2500_PowerOnInitial 0015     __end_of_CC2500_PowerOnInitial 055C  
      __end_of_Mcu_Initialization 058F                            _VarI2C 0120                            _Timer1 005D  
                 i1_RfPointSelect 05F8                            _r_data 003C                            _s_data 003D  
                       ?_I2C_Main 0071                  ??_setRF_RxStatus 0056                     ?_setRF_Enable 0055  
     __size_of_CC2500_InitPATable 001F               CC2500_TxData@loop_e 0058  __end_of_CC2500_registers_address 022F  
         __end_of__initialization 0036                   ??_RfPointSelect 0053                     __end_of_MainT 0304  
                  __pcstackCOMMON 0071                      __pidataBANK1 049A           __size_of_I2C_Slave_Mode 0067  
                       ?_TMR1_ISR 0071                         ?_TMR1_Set 0071          __size_of_setRF_ReceiveGO 000C  
                      ??_I2C_Main 0057                 ?_CC2500_WriteByte 0071                           ??_MainT 0057  
                  ??_setRF_Enable 0056                ??_CC2500_WriteByte 0053                        __pbssBANK0 0020  
                      __pbssBANK2 0120                           ?_IO_Set 0071                        __pnvCOMMON 0076  
                  DelayTime_1us@i 0055                    DelayTime_1us@j 0057           __end_ofi1_RfPointSelect 0602  
              __size_of_setINT_GO 0009                        __pmaintext 044E               _CC2500_WriteCommand 05BB  
                      ??_TMR1_ISR 0071                        ??_TMR1_Set 0053                        __pintentry 0004  
                         _I2C_ISR 059E                           _ACKSTAT 10B6                           _I2C_Set 0506  
          __size_of_DelayTime_1us 0026             __end_of_MainT_Initial 059E                      I2C_SetData@i 0056  
                   ??_I2C_SetData 0053      __end_of_setRF_Initialization 061D                           _INT_ISR 05D5  
                         _INT_Set 061D              ?_CC2500_WriteCommand 0071            __size_of_CC2500_RxData 0055  
          __size_of_CC2500_TxData 003D                           _RF_Data 0020                           _SSPCON1 0215  
                         _SSPCON2 0216                           _RF_Main 0623                           _SSPSTAT 0214  
    __end_of_CC2500_FrequencyCabr 05D5                   __size_of_IO_Set 0015          _CC2500_registers_address 0200  
                  RF_RxDisable@rf 0057                           _Product 0076                           __ptext1 0623  
                         __ptext2 003A                           __ptext3 0427                           __ptext4 0304  
                         __ptext5 0266                           __ptext6 05AD                           __ptext7 04F0  
                         __ptext8 04D9                           __ptext9 0627         __size_of_CC2500_SIDLEMode 0004  
                    __size_of_ISR 0012                        _setRF_Main 003A                I2C_SetData@command 0055  
               __end_of_setINT_GO 060B             ??_CC2500_WriteCommand 0055                 ??_setRF_ReceiveGO 0074  
      __end_of_CC2500_ClearRXFIFO 0637        __end_of_CC2500_ClearTXFIFO 0633               __end_of_I2C_SetData 0118  
                         clrloop0 060C              end_of_initialization 0036                 _CC2500_InitSetREG 03D4  
                   _DelayTime_1us 0474                           init_ram 0611                ?_CC2500_InitSetREG 0071  
                         initloop 0612             CC2500_ReadByte@loop_b 0054                 _CC2500_ReadStatus 04F0  
                   _CC2500_Enable 0380                  ?i1_RfPointSelect 0071                ?_CC2500_ReadStatus 0071  
        __size_of_CC2500_ReadByte 0017                     _CC2500_RxData 0266                     _CC2500_TxData 0304  
             ??_CC2500_InitSetREG 0058              __end_of_setRF_Enable 03D4                    _I2C_Slave_Mode 0118  
                    __pstringtext 0200               ??_CC2500_ReadStatus 0055            setRF_Initialization@rf 0071  
         CC2500_InitSetREG@loop_c 005B                _Mcu_Initialization 0580          __size_of_CC2500_PowerRST 002E  
                __CFG_FOSC$INTOSC 0000          __size_of_CC2500_WriteREG 0016                 __size_of_I2C_Main 003B  
       __end_of_CC2500_InitSetREG 03FE               ?_Mcu_Initialization 0071                    ?_DelayTime_1us 0053  
       __end_of_CC2500_ReadStatus 0506                     ?_RF_RxDisable 0071                    __end_of_IO_Set 0547  
            _setRF_Initialization 0617            __end_of_I2C_Slave_Mode 017F                    ?_CC2500_RxData 0071  
                  ?_CC2500_TxData 0071             _CC2500_PowerOnInitial 0547              ??_Mcu_Initialization 0054  
                    setRF_Main@rf 005A                 __size_of_TMR1_ISR 0029                 __size_of_TMR1_Set 0010  
                     _I2C_SetData 00AB              _CC2500_FrequencyCabr 05C9                       ?_setRF_Main 0071  
             start_initialization 0018                       __end_of_ISR 0016        __end_of_CC2500_InitPATable 04D9  
                  ??_RF_RxDisable 0057                   RfPointSelect@rf 0054                          ??_IO_Set 0053  
           ?_setRF_Initialization 0071             __end_of_RfPointSelect 05F8         __size_of_CC2500_WriteByte 0014  
                       _VarTimer1 0050                   ?_I2C_Slave_Mode 0071                         _Rx_Length 0039  
                       _Tx_Length 005E                       __pdataBANK1 00A0                          ?_I2C_ISR 0071  
                        ?_I2C_Set 0071                 ??_CC2500_ReadByte 0053                  _CC2500_SIDLEMode 062B  
           ?_CC2500_FrequencyCabr 0071                  setINT_GO@command 0053                       __pbssCOMMON 0078  
                       ___latbits 0002                          ?_INT_ISR 0071               setRF_Enable@command 0055  
                   __pcstackBANK0 0053                          ?_INT_Set 0071                   ??_DelayTime_1us 0055  
      __size_of_CC2500_InitSetREG 002A                 ??_CC2500_PowerRST 0059                          ?_RF_Main 0071  
      __size_of_CC2500_ReadStatus 0016                 ??_CC2500_WriteREG 0056             CC2500_WriteREG@w_addr 0057  
           __size_of_setRF_Enable 002A                   ??_CC2500_RxData 0057           __size_of_setRF_RxStatus 000E  
                 ??_CC2500_TxData 0057                         __pnvBANK0 005C            ?_CC2500_PowerOnInitial 0071  
             __size_of_setRF_Main 0071                   _setRF_ReceiveGO 05E1      CC2500_ReadStatus@status_addr 0056  
                        _I2C_Main 0341            CC2500_WriteByte@loop_a 0054                    __size_of_MainT 0049  
                       _r_address 003B      __end_of_CC2500_patable_vaule 0266                      _setRF_Enable 03AA  
                       _setINT_GO 0602            ??_setRF_Initialization 0053                 _CC2500_rfSettings 022F  
          __size_of_MainT_Initial 000F                         clear_ram0 060B          CC2500_InitPATable@loop_d 005A  
              _CC2500_ClearRXFIFO 0633                _CC2500_ClearTXFIFO 062F            setRF_ReceiveGO@command 0073  
                        _TMR1_ISR 03FE            CC2500_InitSetREG@temp1 0059            CC2500_InitSetREG@temp2 005A  
               setRF_ReceiveGO@rf 0074                          _TMR1_Set 0570               ?_CC2500_ClearRXFIFO 0071  
             ?_CC2500_ClearTXFIFO 0071                          _RF_Count 0035              __end_of_RF_RxDisable 044E  
     __end_of_CC2500_WriteCommand 05C9            ??_CC2500_FrequencyCabr 0059                  __size_of_I2C_ISR 000F  
                __size_of_I2C_Set 0016                  __size_of_INT_ISR 000C                  __size_of_INT_Set 0006  
                      ?_setINT_GO 0071              ??_CC2500_ClearRXFIFO 0057              ??_CC2500_ClearTXFIFO 0057  
       __end_of_CC2500_rfSettings 025E                  __size_of_RF_Main 0004                  _CC2500_WriteByte 055C  
                        _VarTMain 003E           __end_of_setRF_ReceiveGO 05ED                          _RxStatus 0383  
                        _TxStatus 0386          __size_ofi1_RfPointSelect 000A                     _MainT_Initial 058F  
                    ?_I2C_SetData 0071                      ??_setRF_Main 0059              CC2500_WriteREG@value 0055  
                        __ptext10 0617                          __ptext11 0580                          __ptext20 05ED  
                        __ptext12 0570                          __ptext21 0341                          __ptext13 0532  
                        __ptext30 05C9                          __ptext22 0118                          __ptext14 061D  
                        __ptext31 0474                          __ptext23 00AB                          __ptext15 0506  
                        __ptext40 05F8                          __ptext32 062F                          __ptext24 0547  
                        __ptext16 058F                          __ptext41 059E                          __ptext33 0633  
                        __ptext25 062B                          __ptext17 02BB                          __ptext34 05BB  
                        __ptext26 037C                          __ptext18 03AA                          __ptext35 055C  
                        __ptext27 03D4                          __ptext19 0602                          __ptext28 04BA  
                        __ptext37 03FE                          __ptext29 051C                          __ptext38 05D5  
                        __ptext39 05E1                  ??_I2C_Slave_Mode 0053                     __size_of_main 0026  
        __end_of_CC2500_SIDLEMode 062F                    _setRF_RxStatus 05AD        CC2500_WriteCommand@command 0056  
                 _CC2500_ReadByte 04D9                _CC2500_InitPATable 04BA                __end_of_setRF_Main 00AB  
     __size_of_Mcu_Initialization 000F              _CC2500_patable_vaule 025E               ?_CC2500_InitPATable 0071  
                  ?_MainT_Initial 0071                   _CC2500_PowerRST 037C             setRF_RxStatus@command 0055  
                 _CC2500_WriteREG 051C                     _Transceive_GO 0384                     _Transceive_OK 0385  
                     pic14e$flags 007E                       ??_setINT_GO 0053                          intlevel1 0000  
            ??_CC2500_InitPATable 0058            __end_of_setRF_RxStatus 05BB           ??_CC2500_PowerOnInitial 005C  
                ?_setRF_ReceiveGO 0073            CC2500_InitPATable@temp 0059             __size_of_RF_RxDisable 0027  
               _RF_Initialization 0627                ?_RF_Initialization 0071                        _SPI0Buffer 003A  
             ??_RF_Initialization 0054                   I2C_Slave_Mode@i 0055            __size_of_RfPointSelect 000B  
               ??i1_RfPointSelect 0071             __end_of_DelayTime_1us 049A           __end_of_CC2500_ReadByte 04F0  
                 ?_setRF_RxStatus 0055                      _RF_RxDisable 0427         __end_of_RF_Initialization 062B  
                setRF_RxStatus@rf 0056             __end_of_CC2500_RxData 02BB             __end_of_CC2500_TxData 0341  
         __end_of_CC2500_PowerRST 03AA  
