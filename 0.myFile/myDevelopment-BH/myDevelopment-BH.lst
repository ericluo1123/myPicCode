

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Sep 17 23:33:51 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	dabs	1,0x7E,2
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  0090                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0095                     	;# 
    95  0096                     	;# 
    96  0097                     	;# 
    97  0099                     	;# 
    98  009A                     	;# 
    99  009B                     	;# 
   100  009B                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  0116                     	;# 
   108  0117                     	;# 
   109  011D                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  018E                     	;# 
   113  0191                     	;# 
   114  0191                     	;# 
   115  0192                     	;# 
   116  0193                     	;# 
   117  0193                     	;# 
   118  0194                     	;# 
   119  0195                     	;# 
   120  0196                     	;# 
   121  0197                     	;# 
   122  0199                     	;# 
   123  019A                     	;# 
   124  019B                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019C                     	;# 
   129  019C                     	;# 
   130  019D                     	;# 
   131  019E                     	;# 
   132  019F                     	;# 
   133  020D                     	;# 
   134  0210                     	;# 
   135  0211                     	;# 
   136  0211                     	;# 
   137  0212                     	;# 
   138  0212                     	;# 
   139  0213                     	;# 
   140  0213                     	;# 
   141  0214                     	;# 
   142  0214                     	;# 
   143  0215                     	;# 
   144  0215                     	;# 
   145  0215                     	;# 
   146  0216                     	;# 
   147  0216                     	;# 
   148  0217                     	;# 
   149  0217                     	;# 
   150  0291                     	;# 
   151  0291                     	;# 
   152  0292                     	;# 
   153  0293                     	;# 
   154  0298                     	;# 
   155  0298                     	;# 
   156  0299                     	;# 
   157  029A                     	;# 
   158  0394                     	;# 
   159  0395                     	;# 
   160  0396                     	;# 
   161  0FE4                     	;# 
   162  0FE5                     	;# 
   163  0FE6                     	;# 
   164  0FE7                     	;# 
   165  0FE8                     	;# 
   166  0FE9                     	;# 
   167  0FEA                     	;# 
   168  0FEB                     	;# 
   169  0FED                     	;# 
   170  0FEE                     	;# 
   171  0FEF                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  0010                     	;# 
   188  0011                     	;# 
   189  0012                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001C                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  0090                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0099                     	;# 
   209  009A                     	;# 
   210  009B                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  0116                     	;# 
   219  0117                     	;# 
   220  011D                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  018E                     	;# 
   224  0191                     	;# 
   225  0191                     	;# 
   226  0192                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0194                     	;# 
   230  0195                     	;# 
   231  0196                     	;# 
   232  0197                     	;# 
   233  0199                     	;# 
   234  019A                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019C                     	;# 
   241  019D                     	;# 
   242  019E                     	;# 
   243  019F                     	;# 
   244  020D                     	;# 
   245  0210                     	;# 
   246  0211                     	;# 
   247  0211                     	;# 
   248  0212                     	;# 
   249  0212                     	;# 
   250  0213                     	;# 
   251  0213                     	;# 
   252  0214                     	;# 
   253  0214                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0216                     	;# 
   258  0216                     	;# 
   259  0217                     	;# 
   260  0217                     	;# 
   261  0291                     	;# 
   262  0291                     	;# 
   263  0292                     	;# 
   264  0293                     	;# 
   265  0298                     	;# 
   266  0298                     	;# 
   267  0299                     	;# 
   268  029A                     	;# 
   269  0394                     	;# 
   270  0395                     	;# 
   271  0396                     	;# 
   272  0FE4                     	;# 
   273  0FE5                     	;# 
   274  0FE6                     	;# 
   275  0FE7                     	;# 
   276  0FE8                     	;# 
   277  0FE9                     	;# 
   278  0FEA                     	;# 
   279  0FEB                     	;# 
   280  0FED                     	;# 
   281  0FEE                     	;# 
   282  0FEF                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000D                     	;# 
   297  000E                     	;# 
   298  0010                     	;# 
   299  0011                     	;# 
   300  0012                     	;# 
   301  0015                     	;# 
   302  0016                     	;# 
   303  0016                     	;# 
   304  0017                     	;# 
   305  0018                     	;# 
   306  0019                     	;# 
   307  001A                     	;# 
   308  001B                     	;# 
   309  001C                     	;# 
   310  008C                     	;# 
   311  008D                     	;# 
   312  008E                     	;# 
   313  0090                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0095                     	;# 
   317  0096                     	;# 
   318  0097                     	;# 
   319  0099                     	;# 
   320  009A                     	;# 
   321  009B                     	;# 
   322  009B                     	;# 
   323  009C                     	;# 
   324  009D                     	;# 
   325  009E                     	;# 
   326  010C                     	;# 
   327  010D                     	;# 
   328  010E                     	;# 
   329  0116                     	;# 
   330  0117                     	;# 
   331  011D                     	;# 
   332  018C                     	;# 
   333  018D                     	;# 
   334  018E                     	;# 
   335  0191                     	;# 
   336  0191                     	;# 
   337  0192                     	;# 
   338  0193                     	;# 
   339  0193                     	;# 
   340  0194                     	;# 
   341  0195                     	;# 
   342  0196                     	;# 
   343  0197                     	;# 
   344  0199                     	;# 
   345  019A                     	;# 
   346  019B                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019C                     	;# 
   351  019C                     	;# 
   352  019D                     	;# 
   353  019E                     	;# 
   354  019F                     	;# 
   355  020D                     	;# 
   356  0210                     	;# 
   357  0211                     	;# 
   358  0211                     	;# 
   359  0212                     	;# 
   360  0212                     	;# 
   361  0213                     	;# 
   362  0213                     	;# 
   363  0214                     	;# 
   364  0214                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0216                     	;# 
   369  0216                     	;# 
   370  0217                     	;# 
   371  0217                     	;# 
   372  0291                     	;# 
   373  0291                     	;# 
   374  0292                     	;# 
   375  0293                     	;# 
   376  0298                     	;# 
   377  0298                     	;# 
   378  0299                     	;# 
   379  029A                     	;# 
   380  0394                     	;# 
   381  0395                     	;# 
   382  0396                     	;# 
   383  0FE4                     	;# 
   384  0FE5                     	;# 
   385  0FE6                     	;# 
   386  0FE7                     	;# 
   387  0FE8                     	;# 
   388  0FE9                     	;# 
   389  0FEA                     	;# 
   390  0FEB                     	;# 
   391  0FED                     	;# 
   392  0FEE                     	;# 
   393  0FEF                     	;# 
   394  0000                     	;# 
   395  0001                     	;# 
   396  0002                     	;# 
   397  0003                     	;# 
   398  0004                     	;# 
   399  0005                     	;# 
   400  0006                     	;# 
   401  0007                     	;# 
   402  0008                     	;# 
   403  0009                     	;# 
   404  000A                     	;# 
   405  000B                     	;# 
   406  000C                     	;# 
   407  000D                     	;# 
   408  000E                     	;# 
   409  0010                     	;# 
   410  0011                     	;# 
   411  0012                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  008C                     	;# 
   422  008D                     	;# 
   423  008E                     	;# 
   424  0090                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0095                     	;# 
   428  0096                     	;# 
   429  0097                     	;# 
   430  0099                     	;# 
   431  009A                     	;# 
   432  009B                     	;# 
   433  009B                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  010C                     	;# 
   438  010D                     	;# 
   439  010E                     	;# 
   440  0116                     	;# 
   441  0117                     	;# 
   442  011D                     	;# 
   443  018C                     	;# 
   444  018D                     	;# 
   445  018E                     	;# 
   446  0191                     	;# 
   447  0191                     	;# 
   448  0192                     	;# 
   449  0193                     	;# 
   450  0193                     	;# 
   451  0194                     	;# 
   452  0195                     	;# 
   453  0196                     	;# 
   454  0197                     	;# 
   455  0199                     	;# 
   456  019A                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019C                     	;# 
   462  019C                     	;# 
   463  019D                     	;# 
   464  019E                     	;# 
   465  019F                     	;# 
   466  020D                     	;# 
   467  0210                     	;# 
   468  0211                     	;# 
   469  0211                     	;# 
   470  0212                     	;# 
   471  0212                     	;# 
   472  0213                     	;# 
   473  0213                     	;# 
   474  0214                     	;# 
   475  0214                     	;# 
   476  0215                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0216                     	;# 
   480  0216                     	;# 
   481  0217                     	;# 
   482  0217                     	;# 
   483  0291                     	;# 
   484  0291                     	;# 
   485  0292                     	;# 
   486  0293                     	;# 
   487  0298                     	;# 
   488  0298                     	;# 
   489  0299                     	;# 
   490  029A                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  0FE4                     	;# 
   495  0FE5                     	;# 
   496  0FE6                     	;# 
   497  0FE7                     	;# 
   498  0FE8                     	;# 
   499  0FE9                     	;# 
   500  0FEA                     	;# 
   501  0FEB                     	;# 
   502  0FED                     	;# 
   503  0FEE                     	;# 
   504  0FEF                     	;# 
   505                           
   506                           	psect	idataBANK1
   507  0451                     __pidataBANK1:	
   508                           
   509                           ;initializer for _VarProduct
   510  0451  3463               	retlw	99
   511  0452  3402               	retlw	2
   512  0453  3400               	retlw	0
   513  0454  3400               	retlw	0
   514  0455  3400               	retlw	0
   515  0456  3400               	retlw	0
   516  0457  3400               	retlw	0
   517  0458  3400               	retlw	0
   518  0459  3400               	retlw	0
   519  045A  3400               	retlw	0
   520  045B  3400               	retlw	0
   521  045C  3400               	retlw	0
   522  045D  34FF               	retlw	255
   523  045E  34FF               	retlw	255
   524  045F  34FF               	retlw	255
   525  0460  3400               	retlw	0
   526  0461  3400               	retlw	0
   527  0462  3400               	retlw	0
   528  0463  3400               	retlw	0
   529  0464  3400               	retlw	0
   530  0465  3400               	retlw	0
   531  0466  3400               	retlw	0
   532  0467  3400               	retlw	0
   533  0468  3400               	retlw	0
   534  0469  3400               	retlw	0
   535  046A  3400               	retlw	0
   536  046B  3400               	retlw	0
   537  046C  3400               	retlw	0
   538  046D  3400               	retlw	0
   539  046E  3400               	retlw	0
   540  046F  3400               	retlw	0
   541  0470  3400               	retlw	0
   542                           
   543                           	psect	stringtext
   544  0200                     __pstringtext:	
   545  0200                     _CC2500_registers_address:	
   546  0200  3403               	retlw	3
   547  0201  3416               	retlw	22
   548  0202  3417               	retlw	23
   549  0203  341E               	retlw	30
   550  0204  341F               	retlw	31
   551  0205  3420               	retlw	32
   552  0206  342A               	retlw	42
   553  0207  342B               	retlw	43
   554  0208  340B               	retlw	11
   555  0209  340C               	retlw	12
   556  020A  340D               	retlw	13
   557  020B  340E               	retlw	14
   558  020C  340F               	retlw	15
   559  020D  3410               	retlw	16
   560  020E  3411               	retlw	17
   561  020F  3412               	retlw	18
   562  0210  3413               	retlw	19
   563  0211  3414               	retlw	20
   564  0212  340A               	retlw	10
   565  0213  3415               	retlw	21
   566  0214  3421               	retlw	33
   567  0215  3422               	retlw	34
   568  0216  3418               	retlw	24
   569  0217  3419               	retlw	25
   570  0218  341A               	retlw	26
   571  0219  341B               	retlw	27
   572  021A  341C               	retlw	28
   573  021B  341D               	retlw	29
   574  021C  3423               	retlw	35
   575  021D  3424               	retlw	36
   576  021E  3425               	retlw	37
   577  021F  3426               	retlw	38
   578  0220  3429               	retlw	41
   579  0221  342C               	retlw	44
   580  0222  342D               	retlw	45
   581  0223  342E               	retlw	46
   582  0224  3400               	retlw	0
   583  0225  3401               	retlw	1
   584  0226  3402               	retlw	2
   585  0227  3407               	retlw	7
   586  0228  3408               	retlw	8
   587  0229  3409               	retlw	9
   588  022A  3406               	retlw	6
   589  022B  3404               	retlw	4
   590  022C  3405               	retlw	5
   591  022D  3427               	retlw	39
   592  022E  3428               	retlw	40
   593  022F                     __end_of_CC2500_registers_address:	
   594  022F                     _CC2500_rfSettings:	
   595  022F  3407               	retlw	7
   596  0230  3407               	retlw	7
   597  0231  3430               	retlw	48
   598  0232  3487               	retlw	135
   599  0233  346B               	retlw	107
   600  0234  34F8               	retlw	248
   601  0235  347F               	retlw	127
   602  0236  343F               	retlw	63
   603  0237  3409               	retlw	9
   604  0238  3400               	retlw	0
   605  0239  345C               	retlw	92
   606  023A  34A7               	retlw	167
   607  023B  3462               	retlw	98
   608  023C  3486               	retlw	134
   609  023D  3483               	retlw	131
   610  023E  3403               	retlw	3
   611  023F  3422               	retlw	34
   612  0240  34F8               	retlw	248
   613  0241  3400               	retlw	0
   614  0242  3444               	retlw	68
   615  0243  34B6               	retlw	182
   616  0244  3410               	retlw	16
   617  0245  3418               	retlw	24
   618  0246  341D               	retlw	29
   619  0247  341C               	retlw	28
   620  0248  34C7               	retlw	199
   621  0249  3400               	retlw	0
   622  024A  34B2               	retlw	178
   623  024B  34EA               	retlw	234
   624  024C  340A               	retlw	10
   625  024D  3400               	retlw	0
   626  024E  3411               	retlw	17
   627  024F  3459               	retlw	89
   628  0250  3488               	retlw	136
   629  0251  3431               	retlw	49
   630  0252  340B               	retlw	11
   631  0253  342F               	retlw	47
   632  0254  342E               	retlw	46
   633  0255  3406               	retlw	6
   634  0256  3404               	retlw	4
   635  0257  3405               	retlw	5
   636  0258  3400               	retlw	0
   637  0259  3430               	retlw	48
   638  025A  34D3               	retlw	211
   639  025B  3491               	retlw	145
   640  025C  3441               	retlw	65
   641  025D  3400               	retlw	0
   642  025E                     __end_of_CC2500_rfSettings:	
   643  025E                     _CC2500_patable_vaule:	
   644  025E  34FE               	retlw	254
   645  025F  34FE               	retlw	254
   646  0260  34FE               	retlw	254
   647  0261  34FE               	retlw	254
   648  0262  34FE               	retlw	254
   649  0263  34FE               	retlw	254
   650  0264  34FE               	retlw	254
   651  0265  34FE               	retlw	254
   652  0266                     __end_of_CC2500_patable_vaule:	
   653                           
   654                           	psect	nvCOMMON
   655  0079                     __pnvCOMMON:	
   656  0079                     _Product:	
   657  0079                     	ds	1
   658                           
   659                           	psect	nvBANK0
   660  005D                     __pnvBANK0:	
   661  005D                     _TMain:	
   662  005D                     	ds	1
   663  000C                     _PORTA	set	12
   664  000D                     _PORTB	set	13
   665  000E                     _PORTC	set	14
   666  0018                     _T1CON	set	24
   667  0017                     _TMR1H	set	23
   668  0016                     _TMR1L	set	22
   669  005F                     _GIE	set	95
   670  005C                     _INTE	set	92
   671  0059                     _INTF	set	89
   672  005E                     _PEIE	set	94
   673  0060                     _RA0	set	96
   674  0061                     _RA1	set	97
   675  0068                     _RB0	set	104
   676  0069                     _RB1	set	105
   677  006A                     _RB2	set	106
   678  006B                     _RB3	set	107
   679  006D                     _RB5	set	109
   680  0070                     _RC0	set	112
   681  008B                     _SSPIF	set	139
   682  0088                     _TMR1IF	set	136
   683  0099                     _OSCCON	set	153
   684  008C                     _TRISA	set	140
   685  008D                     _TRISB	set	141
   686  008E                     _TRISC	set	142
   687  048B                     _SSPIE	set	1163
   688  0488                     _TMR1IE	set	1160
   689  010C                     _LATA	set	268
   690  010D                     _LATB	set	269
   691  010E                     _LATC	set	270
   692  018C                     _ANSELA	set	396
   693  018D                     _ANSELB	set	397
   694  018E                     _ANSELC	set	398
   695  0212                     _SSPADD	set	530
   696  0211                     _SSPBUF	set	529
   697  0215                     _SSPCON1	set	533
   698  0216                     _SSPCON2	set	534
   699  0214                     _SSPSTAT	set	532
   700  10B4                     _ACKEN	set	4276
   701  10B6                     _ACKSTAT	set	4278
   702  10B9                     _AHEN	set	4281
   703  10A0                     _BF	set	4256
   704  10AC                     _CKP	set	4268
   705  10B8                     _DHEN	set	4280
   706  10B2                     _PEN	set	4274
   707  10B3                     _RCEN	set	4275
   708  10A2                     _R_nW	set	4258
   709  10B0                     _SEN	set	4272
   710  10AE                     _SSPOV	set	4270
   711  1068                     _WPUB0	set	4200
   712                           
   713                           ; #config settings
   714  0000                     
   715                           	psect	cinit
   716  001A                     start_initialization:	
   717  001A                     __initialization:	
   718                           
   719                           ; Clear objects allocated to BITCOMMON
   720  001A  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   721                           
   722                           ; Clear objects allocated to COMMON
   723  001B  01F6               	clrf	__pbssCOMMON& (0+127)
   724  001C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   725  001D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   726                           
   727                           ; Clear objects allocated to BANK0
   728  001E  3020               	movlw	low __pbssBANK0
   729  001F  0084               	movwf	4
   730  0020  3000               	movlw	high __pbssBANK0
   731  0021  0085               	movwf	5
   732  0022  3034               	movlw	52
   733  0023  3185  25C5  3180   	fcall	clear_ram0
   734                           
   735                           ; Clear objects allocated to BANK2
   736  0026  3020               	movlw	low __pbssBANK2
   737  0027  0084               	movwf	4
   738  0028  3001               	movlw	high __pbssBANK2
   739  0029  0085               	movwf	5
   740  002A  3043               	movlw	67
   741  002B  3185  25C5  3180   	fcall	clear_ram0
   742                           
   743                           ; Initialize objects allocated to BANK1
   744  002E  3051               	movlw	low __pidataBANK1
   745  002F  0084               	movwf	4
   746  0030  3084               	movlw	(high __pidataBANK1)| (0+128)
   747  0031  0085               	movwf	5
   748  0032  30A0               	movlw	low __pdataBANK1
   749  0033  0086               	movwf	6
   750  0034  3000               	movlw	high __pdataBANK1
   751  0035  0087               	movwf	7
   752  0036  3020               	movlw	32
   753  0037  3185  25CB         	fcall	init_ram
   754  0039                     end_of_initialization:	
   755                           ;End of C runtime variable initialization code
   756                           
   757  0039                     __end_of__initialization:	
   758  0039  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   759  003A  0020               	movlb	0
   760  003B  3184  2C05         	ljmp	_main	;jump to C main() function
   761                           
   762                           	psect	bitbssCOMMON
   763  0380                     __pbitbssCOMMON:	
   764  0380                     _CC2500_Enable:	
   765  0380                     	ds	1
   766  0381                     _Receive_GO:	
   767  0381                     	ds	1
   768  0382                     _Receive_OK:	
   769  0382                     	ds	1
   770  0383                     _RxStatus:	
   771  0383                     	ds	1
   772  0384                     _Transceive_GO:	
   773  0384                     	ds	1
   774  0385                     _Transceive_OK:	
   775  0385                     	ds	1
   776  0386                     _TxStatus:	
   777  0386                     	ds	1
   778                           
   779                           	psect	bssCOMMON
   780  0076                     __pbssCOMMON:	
   781  0076                     _RF:	
   782  0076                     	ds	1
   783  0077                     _RFSW:	
   784  0077                     	ds	1
   785  0078                     _I2C:	
   786  0078                     	ds	1
   787                           
   788                           	psect	bssBANK0
   789  0020                     __pbssBANK0:	
   790  0020                     _RF_Data:	
   791  0020                     	ds	21
   792  0035                     _RF_Count:	
   793  0035                     	ds	2
   794  0037                     _CRC:	
   795  0037                     	ds	1
   796  0038                     _RSSI:	
   797  0038                     	ds	1
   798  0039                     _Rx_Length:	
   799  0039                     	ds	1
   800  003A                     _SPI0Buffer:	
   801  003A                     	ds	1
   802  003B                     _Timer1:	
   803  003B                     	ds	1
   804  003C                     _Tx_Length:	
   805  003C                     	ds	1
   806  003D                     _r_address:	
   807  003D                     	ds	1
   808  003E                     _r_data:	
   809  003E                     	ds	1
   810  003F                     _s_data:	
   811  003F                     	ds	1
   812  0040                     _VarTMain:	
   813  0040                     	ds	15
   814  004F                     _VarTimer1:	
   815  004F                     	ds	3
   816  0052                     _RF1:	
   817  0052                     	ds	2
   818                           
   819                           	psect	dataBANK1
   820  00A0                     __pdataBANK1:	
   821  00A0                     _VarProduct:	
   822  00A0                     	ds	32
   823                           
   824                           	psect	bssBANK2
   825  0120                     __pbssBANK2:	
   826  0120                     _VarI2C:	
   827  0120                     	ds	67
   828                           
   829                           	psect	clrtext
   830  05C5                     clear_ram0:	
   831                           ;	Called with FSR0 containing the base address, and
   832                           ;	WREG with the size to clear
   833                           
   834  05C5  0064               	clrwdt	;clear the watchdog before getting into this loop
   835  05C6                     clrloop0:	
   836  05C6  0180               	clrf	0	;clear RAM location pointed to by FSR
   837  05C7  3101               	addfsr 0,1
   838  05C8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   839  05C9  2DC6               	goto	clrloop0	;have we reached the end yet?
   840  05CA  3400               	retlw	0	;all done for this memory range, return
   841                           
   842                           	psect	inittext
   843  05CB                     init_ram:	
   844  05CB  00FE               	movwf	126
   845  05CC                     initloop:	
   846  05CC  0012               	moviw fsr0++
   847  05CD  001E               	movwi fsr1++
   848  05CE  0BFE               	decfsz	126,f
   849  05CF  2DCC               	goto	initloop
   850  05D0  3400               	retlw	0
   851                           
   852                           	psect	cstackCOMMON
   853  0071                     __pcstackCOMMON:	
   854  0071                     ?_CC2500_WriteByte:	
   855  0071                     ?_CC2500_WriteCommand:	
   856                           ; 0 bytes @ 0x0
   857                           
   858  0071                     ?_CC2500_ReadStatus:	
   859                           ; 0 bytes @ 0x0
   860                           
   861  0071                     ?_CC2500_ReadByte:	
   862                           ; 0 bytes @ 0x0
   863                           
   864  0071                     ?_CC2500_PowerRST:	
   865                           ; 0 bytes @ 0x0
   866                           
   867  0071                     ?_CC2500_InitSetREG:	
   868                           ; 0 bytes @ 0x0
   869                           
   870  0071                     ?_CC2500_InitPATable:	
   871                           ; 0 bytes @ 0x0
   872                           
   873  0071                     ?_CC2500_ClearTXFIFO:	
   874                           ; 0 bytes @ 0x0
   875                           
   876  0071                     ?_CC2500_ClearRXFIFO:	
   877                           ; 0 bytes @ 0x0
   878                           
   879  0071                     ?_CC2500_FrequencyCabr:	
   880                           ; 0 bytes @ 0x0
   881                           
   882  0071                     ?_CC2500_SIDLEMode:	
   883                           ; 0 bytes @ 0x0
   884                           
   885  0071                     ?_IO_Set:	
   886                           ; 0 bytes @ 0x0
   887                           
   888  0071                     ?_TMR1_Set:	
   889                           ; 0 bytes @ 0x0
   890                           
   891  0071                     ?_INT_Set:	
   892                           ; 0 bytes @ 0x0
   893                           
   894  0071                     ?_I2C_Set:	
   895                           ; 0 bytes @ 0x0
   896                           
   897  0071                     ?_TMR1_ISR:	
   898                           ; 0 bytes @ 0x0
   899                           
   900  0071                     ??_TMR1_ISR:	
   901                           ; 0 bytes @ 0x0
   902                           
   903  0071                     ?_INT_ISR:	
   904                           ; 0 bytes @ 0x0
   905                           
   906  0071                     ?_I2C_ISR:	
   907                           ; 0 bytes @ 0x0
   908                           
   909  0071                     ??_I2C_ISR:	
   910                           ; 0 bytes @ 0x0
   911                           
   912  0071                     ?_I2C_Slave_Mode:	
   913                           ; 0 bytes @ 0x0
   914                           
   915  0071                     ?_I2C_SetData:	
   916                           ; 0 bytes @ 0x0
   917                           
   918  0071                     ?_setRF_Initialization:	
   919                           ; 0 bytes @ 0x0
   920                           
   921  0071                     ?_setRF_Main:	
   922                           ; 0 bytes @ 0x0
   923                           
   924  0071                     ?_RF_RxDisable:	
   925                           ; 0 bytes @ 0x0
   926                           
   927  0071                     ?_MainT_Initial:	
   928                           ; 0 bytes @ 0x0
   929                           
   930  0071                     ?_MainT:	
   931                           ; 0 bytes @ 0x0
   932                           
   933  0071                     ?_CC2500_TxData:	
   934                           ; 0 bytes @ 0x0
   935                           
   936  0071                     ?_CC2500_RxData:	
   937                           ; 0 bytes @ 0x0
   938                           
   939  0071                     ?_CC2500_PowerOnInitial:	
   940                           ; 0 bytes @ 0x0
   941                           
   942  0071                     ?_Mcu_Initial:	
   943                           ; 0 bytes @ 0x0
   944                           
   945  0071                     ?_ISR:	
   946                           ; 0 bytes @ 0x0
   947                           
   948  0071                     ?_setINT_GO:	
   949                           ; 0 bytes @ 0x0
   950                           
   951  0071                     ?_I2C_Main:	
   952                           ; 0 bytes @ 0x0
   953                           
   954  0071                     ?_RfPointSelect:	
   955                           ; 0 bytes @ 0x0
   956                           
   957  0071                     ?_RF_Initialization:	
   958                           ; 0 bytes @ 0x0
   959                           
   960  0071                     ?_RF_Main:	
   961                           ; 0 bytes @ 0x0
   962                           
   963  0071                     ?_main:	
   964                           ; 0 bytes @ 0x0
   965                           
   966  0071                     ?i1_RfPointSelect:	
   967                           ; 0 bytes @ 0x0
   968                           
   969  0071                     ??i1_RfPointSelect:	
   970                           ; 0 bytes @ 0x0
   971                           
   972  0071                     setRF_Initialization@rf:	
   973                           ; 0 bytes @ 0x0
   974                           
   975                           
   976                           ; 1 bytes @ 0x0
   977  0071                     	ds	1
   978  0072                     i1RfPointSelect@rf:	
   979                           
   980                           ; 1 bytes @ 0x1
   981  0072                     	ds	1
   982  0073                     ?_setRF_ReceiveGO:	
   983  0073                     setRF_ReceiveGO@command:	
   984                           ; 0 bytes @ 0x2
   985                           
   986                           
   987                           ; 1 bytes @ 0x2
   988  0073                     	ds	1
   989  0074                     ??_setRF_ReceiveGO:	
   990  0074                     setRF_ReceiveGO@rf:	
   991                           ; 0 bytes @ 0x3
   992                           
   993                           
   994                           ; 1 bytes @ 0x3
   995  0074                     	ds	1
   996  0075                     ??_INT_ISR:	
   997  0075                     ??_ISR:	
   998                           ; 0 bytes @ 0x4
   999                           
  1000                           
  1001                           ; 0 bytes @ 0x4
  1002  0075                     	ds	1
  1003                           
  1004                           	psect	cstackBANK0
  1005  0054                     __pcstackBANK0:	
  1006  0054                     ??_CC2500_WriteByte:	
  1007  0054                     ??_CC2500_ReadByte:	
  1008                           ; 0 bytes @ 0x0
  1009                           
  1010  0054                     ?_DelayTime_1us:	
  1011                           ; 0 bytes @ 0x0
  1012                           
  1013  0054                     ??_IO_Set:	
  1014                           ; 0 bytes @ 0x0
  1015                           
  1016  0054                     ??_TMR1_Set:	
  1017                           ; 0 bytes @ 0x0
  1018                           
  1019  0054                     ??_INT_Set:	
  1020                           ; 0 bytes @ 0x0
  1021                           
  1022  0054                     ??_I2C_Set:	
  1023                           ; 0 bytes @ 0x0
  1024                           
  1025  0054                     ??_I2C_Slave_Mode:	
  1026                           ; 0 bytes @ 0x0
  1027                           
  1028  0054                     ??_I2C_SetData:	
  1029                           ; 0 bytes @ 0x0
  1030                           
  1031  0054                     ??_setRF_Initialization:	
  1032                           ; 0 bytes @ 0x0
  1033                           
  1034  0054                     ??_MainT_Initial:	
  1035                           ; 0 bytes @ 0x0
  1036                           
  1037  0054                     ??_setINT_GO:	
  1038                           ; 0 bytes @ 0x0
  1039                           
  1040  0054                     ??_RfPointSelect:	
  1041                           ; 0 bytes @ 0x0
  1042                           
  1043  0054                     setINT_GO@command:	
  1044                           ; 0 bytes @ 0x0
  1045                           
  1046  0054                     DelayTime_1us@count:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049                           
  1050                           ; 2 bytes @ 0x0
  1051  0054                     	ds	1
  1052  0055                     ??_Mcu_Initial:	
  1053  0055                     ??_RF_Initialization:	
  1054                           ; 0 bytes @ 0x1
  1055                           
  1056  0055                     CC2500_WriteByte@loop_a:	
  1057                           ; 0 bytes @ 0x1
  1058                           
  1059  0055                     CC2500_ReadByte@loop_b:	
  1060                           ; 1 bytes @ 0x1
  1061                           
  1062  0055                     RfPointSelect@rf:	
  1063                           ; 1 bytes @ 0x1
  1064                           
  1065                           
  1066                           ; 1 bytes @ 0x1
  1067  0055                     	ds	1
  1068  0056                     ??_CC2500_WriteCommand:	
  1069  0056                     ??_CC2500_ReadStatus:	
  1070                           ; 0 bytes @ 0x2
  1071                           
  1072  0056                     ?_setRF_RxStatus:	
  1073                           ; 0 bytes @ 0x2
  1074                           
  1075  0056                     ??_DelayTime_1us:	
  1076                           ; 0 bytes @ 0x2
  1077                           
  1078  0056                     ?_CC2500_WriteREG:	
  1079                           ; 0 bytes @ 0x2
  1080                           
  1081  0056                     ?_setRF_Enable:	
  1082                           ; 0 bytes @ 0x2
  1083                           
  1084  0056                     CC2500_WriteREG@value:	
  1085                           ; 0 bytes @ 0x2
  1086                           
  1087  0056                     I2C_SetData@command:	
  1088                           ; 1 bytes @ 0x2
  1089                           
  1090  0056                     I2C_Slave_Mode@i:	
  1091                           ; 1 bytes @ 0x2
  1092                           
  1093  0056                     setRF_RxStatus@command:	
  1094                           ; 1 bytes @ 0x2
  1095                           
  1096  0056                     setRF_Enable@command:	
  1097                           ; 1 bytes @ 0x2
  1098                           
  1099  0056                     DelayTime_1us@i:	
  1100                           ; 1 bytes @ 0x2
  1101                           
  1102                           
  1103                           ; 2 bytes @ 0x2
  1104  0056                     	ds	1
  1105  0057                     ??_setRF_RxStatus:	
  1106  0057                     ??_CC2500_WriteREG:	
  1107                           ; 0 bytes @ 0x3
  1108                           
  1109  0057                     ??_setRF_Enable:	
  1110                           ; 0 bytes @ 0x3
  1111                           
  1112  0057                     CC2500_WriteCommand@command:	
  1113                           ; 0 bytes @ 0x3
  1114                           
  1115  0057                     CC2500_ReadStatus@status_addr:	
  1116                           ; 1 bytes @ 0x3
  1117                           
  1118  0057                     I2C_SetData@i:	
  1119                           ; 1 bytes @ 0x3
  1120                           
  1121  0057                     setRF_RxStatus@rf:	
  1122                           ; 1 bytes @ 0x3
  1123                           
  1124  0057                     setRF_Enable@rf:	
  1125                           ; 1 bytes @ 0x3
  1126                           
  1127                           
  1128                           ; 1 bytes @ 0x3
  1129  0057                     	ds	1
  1130  0058                     ??_CC2500_ClearTXFIFO:	
  1131  0058                     ??_CC2500_ClearRXFIFO:	
  1132                           ; 0 bytes @ 0x4
  1133                           
  1134  0058                     ??_CC2500_SIDLEMode:	
  1135                           ; 0 bytes @ 0x4
  1136                           
  1137  0058                     ??_RF_RxDisable:	
  1138                           ; 0 bytes @ 0x4
  1139                           
  1140  0058                     ??_MainT:	
  1141                           ; 0 bytes @ 0x4
  1142                           
  1143  0058                     ??_CC2500_TxData:	
  1144                           ; 0 bytes @ 0x4
  1145                           
  1146  0058                     ??_CC2500_RxData:	
  1147                           ; 0 bytes @ 0x4
  1148                           
  1149  0058                     ??_I2C_Main:	
  1150                           ; 0 bytes @ 0x4
  1151                           
  1152  0058                     CC2500_WriteREG@w_addr:	
  1153                           ; 0 bytes @ 0x4
  1154                           
  1155  0058                     RF_RxDisable@rf:	
  1156                           ; 1 bytes @ 0x4
  1157                           
  1158  0058                     DelayTime_1us@j:	
  1159                           ; 1 bytes @ 0x4
  1160                           
  1161                           
  1162                           ; 2 bytes @ 0x4
  1163  0058                     	ds	1
  1164  0059                     ??_CC2500_InitSetREG:	
  1165  0059                     ??_CC2500_InitPATable:	
  1166                           ; 0 bytes @ 0x5
  1167                           
  1168  0059                     CC2500_TxData@loop_e:	
  1169                           ; 0 bytes @ 0x5
  1170                           
  1171  0059                     CC2500_RxData@loop_f:	
  1172                           ; 1 bytes @ 0x5
  1173                           
  1174                           
  1175                           ; 1 bytes @ 0x5
  1176  0059                     	ds	1
  1177  005A                     ??_CC2500_PowerRST:	
  1178  005A                     ??_CC2500_FrequencyCabr:	
  1179                           ; 0 bytes @ 0x6
  1180                           
  1181  005A                     ??_setRF_Main:	
  1182                           ; 0 bytes @ 0x6
  1183                           
  1184  005A                     CC2500_InitSetREG@temp1:	
  1185                           ; 0 bytes @ 0x6
  1186                           
  1187  005A                     CC2500_InitPATable@temp:	
  1188                           ; 1 bytes @ 0x6
  1189                           
  1190                           
  1191                           ; 1 bytes @ 0x6
  1192  005A                     	ds	1
  1193  005B                     CC2500_InitSetREG@temp2:	
  1194  005B                     CC2500_InitPATable@loop_d:	
  1195                           ; 1 bytes @ 0x7
  1196                           
  1197  005B                     setRF_Main@rf:	
  1198                           ; 1 bytes @ 0x7
  1199                           
  1200                           
  1201                           ; 1 bytes @ 0x7
  1202  005B                     	ds	1
  1203  005C                     ??_RF_Main:	
  1204  005C                     CC2500_InitSetREG@loop_c:	
  1205                           ; 0 bytes @ 0x8
  1206                           
  1207                           
  1208                           ; 1 bytes @ 0x8
  1209  005C                     	ds	1
  1210  005D                     ??_CC2500_PowerOnInitial:	
  1211  005D                     ??_main:	
  1212                           ; 0 bytes @ 0x9
  1213                           
  1214                           
  1215                           	psect	maintext
  1216  0405                     __pmaintext:	
  1217                           ; 0 bytes @ 0x9
  1218 ;;
  1219 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1220 ;;
  1221 ;; *************** function _main *****************
  1222 ;; Defined at:
  1223 ;;		line 6 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;		None               void
  1230 ;; Registers used:
  1231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 17F/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1237 ;;      Params:         0       0       0       0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0       0
  1240 ;;      Totals:         0       0       0       0       0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels required when called:    9
  1243 ;; This function calls:
  1244 ;;		_CC2500_PowerOnInitial
  1245 ;;		_I2C_Main
  1246 ;;		_MainT
  1247 ;;		_MainT_Initial
  1248 ;;		_Mcu_Initial
  1249 ;;		_RF_Initialization
  1250 ;;		_RF_Main
  1251 ;; This function is called by:
  1252 ;;		Startup code after reset
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           
  1257                           ;psect for function _main
  1258  0405                     _main:	
  1259                           
  1260                           ;myMain.c: 8: MainT_Initial();
  1261                           
  1262                           ;incstack = 0
  1263                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1264  0405  3185  2549  3184   	fcall	_MainT_Initial
  1265                           
  1266                           ;myMain.c: 9: Mcu_Initial();
  1267  0408  3185  2527  3184   	fcall	_Mcu_Initial
  1268                           
  1269                           ;myMain.c: 10: ;;
  1270                           ;myMain.c: 11: RF_Initialization();
  1271  040B  3185  25E0  3184   	fcall	_RF_Initialization
  1272                           
  1273                           ;myMain.c: 12: CC2500_PowerOnInitial();
  1274  040E  3184  24FE  3184   	fcall	_CC2500_PowerOnInitial
  1275  0411                     l3177:	
  1276                           ;myMain.c: 13: while(1)
  1277                           
  1278                           
  1279                           ;myMain.c: 14: {
  1280                           ;myMain.c: 17: if(TMain->T1_Timerout)
  1281  0411  0020               	movlb	0	; select bank0
  1282  0412  085D               	movf	_TMain,w
  1283  0413  0086               	movwf	6
  1284  0414  0187               	clrf	7
  1285  0415  1D01               	btfss	1,2
  1286  0416  2C11               	goto	l3177
  1287                           
  1288                           ;myMain.c: 18: {
  1289                           ;myMain.c: 19: TMain->T1_Timerout = 0;
  1290  0417  085D               	movf	_TMain,w
  1291  0418  0086               	movwf	6
  1292  0419  0187               	clrf	7
  1293  041A  1101               	bcf	1,2
  1294                           
  1295                           ;myMain.c: 20: MainT();
  1296  041B  3181  211B  3184   	fcall	_MainT
  1297                           
  1298                           ;myMain.c: 21: if(TMain->PowerON)
  1299  041E  0020               	movlb	0	; select bank0
  1300  041F  085D               	movf	_TMain,w
  1301  0420  0086               	movwf	6
  1302  0421  0187               	clrf	7
  1303  0422  1C01               	btfss	1,0
  1304  0423  2C11               	goto	l3177
  1305                           
  1306                           ;myMain.c: 22: {
  1307                           ;myMain.c: 23: RF_Main();
  1308  0424  3185  25DC  3184   	fcall	_RF_Main
  1309                           
  1310                           ;myMain.c: 24: I2C_Main();
  1311  0427  3182  22F8  3184   	fcall	_I2C_Main
  1312                           
  1313                           ;myMain.c: 25: ;;
  1314                           ;myMain.c: 26: ;;
  1315  042A  2C11               	goto	l3177
  1316  042B                     __end_of_main:	
  1317                           
  1318                           	psect	text1
  1319  05DC                     __ptext1:	
  1320 ;; *************** function _RF_Main *****************
  1321 ;; Defined at:
  1322 ;;		line 24 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;		None               void
  1329 ;; Registers used:
  1330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1336 ;;      Params:         0       0       0       0       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0       0       0       0
  1338 ;;      Temps:          0       0       0       0       0       0       0       0
  1339 ;;      Totals:         0       0       0       0       0       0       0       0
  1340 ;;Total ram usage:        0 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    8
  1343 ;; This function calls:
  1344 ;;		_setRF_Main
  1345 ;; This function is called by:
  1346 ;;		_main
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function _RF_Main
  1352  05DC                     _RF_Main:	
  1353                           
  1354                           ;RF_Control_B1.c: 27: setRF_Main(1);
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1358  05DC  3001               	movlw	1
  1359  05DD  3180  203D         	fcall	_setRF_Main
  1360  05DF  0008               	return
  1361  05E0                     __end_of_RF_Main:	
  1362                           
  1363                           	psect	text2
  1364  003D                     __ptext2:	
  1365 ;; *************** function _setRF_Main *****************
  1366 ;; Defined at:
  1367 ;;		line 58 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  rf              1    wreg     unsigned char 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  rf              1    7[BANK0 ] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;		None               void
  1374 ;; Registers used:
  1375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1381 ;;      Params:         0       0       0       0       0       0       0       0
  1382 ;;      Locals:         0       1       0       0       0       0       0       0
  1383 ;;      Temps:          0       1       0       0       0       0       0       0
  1384 ;;      Totals:         0       2       0       0       0       0       0       0
  1385 ;;Total ram usage:        2 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    7
  1388 ;; This function calls:
  1389 ;;		_CC2500_RxData
  1390 ;;		_CC2500_TxData
  1391 ;;		_CC2500_WriteCommand
  1392 ;;		_I2C_SetData
  1393 ;;		_RF_RxDisable
  1394 ;;		_RfPointSelect
  1395 ;;		_setINT_GO
  1396 ;; This function is called by:
  1397 ;;		_RF_Main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           
  1402                           ;psect for function _setRF_Main
  1403  003D                     _setRF_Main:	
  1404                           
  1405                           ;incstack = 0
  1406                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1407                           ;setRF_Main@rf stored from wreg
  1408  003D  0020               	movlb	0	; select bank0
  1409  003E  00DB               	movwf	setRF_Main@rf
  1410                           
  1411                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  1412  003F  085B               	movf	setRF_Main@rf,w
  1413  0040  3185  25A7  3180   	fcall	_RfPointSelect
  1414                           
  1415                           ;RF_Control_B1.c: 61: if(RF->Enable)
  1416  0043  0876               	movf	_RF,w
  1417  0044  0086               	movwf	6
  1418  0045  0187               	clrf	7
  1419  0046  1C01               	btfss	1,0
  1420  0047  0008               	return
  1421                           
  1422                           ;RF_Control_B1.c: 62: {
  1423                           ;RF_Control_B1.c: 76: if(!RF->Key)
  1424  0048  0876               	movf	_RF,w
  1425  0049  0086               	movwf	6
  1426  004A  0187               	clrf	7
  1427  004B  1B81               	btfsc	1,7
  1428  004C  2879               	goto	l2933
  1429                           
  1430                           ;RF_Control_B1.c: 77: {
  1431                           ;RF_Control_B1.c: 78: if(RF->ReceiveGO)
  1432  004D  0876               	movf	_RF,w
  1433  004E  0086               	movwf	6
  1434  004F  0187               	clrf	7
  1435  0050  1C81               	btfss	1,1
  1436  0051  285E               	goto	l2921
  1437                           
  1438                           ;RF_Control_B1.c: 79: {
  1439                           ;RF_Control_B1.c: 80: RF->ReceiveGO=0;
  1440  0052  0876               	movf	_RF,w
  1441  0053  0086               	movwf	6
  1442  0054  0187               	clrf	7
  1443  0055  1081               	bcf	1,1
  1444                           
  1445                           ;RF_Control_B1.c: 81: CC2500_RxData();
  1446  0056  3182  2266  3180   	fcall	_CC2500_RxData
  1447                           
  1448                           ;RF_Control_B1.c: 83: I2C_SetData(1);
  1449  0059  3001               	movlw	1
  1450  005A  3180  20AE  3180   	fcall	_I2C_SetData
  1451                           
  1452                           ;RF_Control_B1.c: 90: }
  1453  005D  287D               	goto	l2935
  1454  005E                     l2921:	
  1455                           
  1456                           ;RF_Control_B1.c: 91: else
  1457                           ;RF_Control_B1.c: 92: {
  1458                           ;RF_Control_B1.c: 93: if(!RF->TransceiveGO)
  1459  005E  0876               	movf	_RF,w
  1460  005F  0086               	movwf	6
  1461  0060  0187               	clrf	7
  1462  0061  1901               	btfsc	1,2
  1463  0062  287D               	goto	l2935
  1464                           
  1465                           ;RF_Control_B1.c: 94: {
  1466                           ;RF_Control_B1.c: 96: if(!RF->RxStatus)
  1467  0063  0876               	movf	_RF,w
  1468  0064  0086               	movwf	6
  1469  0065  0187               	clrf	7
  1470  0066  1981               	btfsc	1,3
  1471  0067  287D               	goto	l2935
  1472                           
  1473                           ;RF_Control_B1.c: 97: {
  1474                           ;RF_Control_B1.c: 98: RF->RxStatus=1;
  1475  0068  0876               	movf	_RF,w
  1476  0069  0086               	movwf	6
  1477  006A  0187               	clrf	7
  1478  006B  1581               	bsf	1,3
  1479                           
  1480                           ;RF_Control_B1.c: 99: CC2500_WriteCommand(0x36);
  1481  006C  3036               	movlw	54
  1482  006D  3185  2575  3180   	fcall	_CC2500_WriteCommand
  1483                           
  1484                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x34);
  1485  0070  3034               	movlw	52
  1486  0071  3185  2575  3180   	fcall	_CC2500_WriteCommand
  1487                           
  1488                           ;RF_Control_B1.c: 101: setINT_GO(1);
  1489  0074  3001               	movlw	1
  1490  0075  3185  25BC  3180   	fcall	_setINT_GO
  1491                           
  1492                           ;RF_Control_B1.c: 102: }
  1493                           ;RF_Control_B1.c: 104: }
  1494                           ;RF_Control_B1.c: 105: }
  1495                           ;RF_Control_B1.c: 106: }
  1496  0078  287D               	goto	l2935
  1497  0079                     l2933:	
  1498                           
  1499                           ;RF_Control_B1.c: 107: else
  1500                           ;RF_Control_B1.c: 108: {
  1501                           ;RF_Control_B1.c: 109: RF_RxDisable(1);
  1502  0079  3001               	movlw	1
  1503  007A  3183  23DE  3180   	fcall	_RF_RxDisable
  1504  007D                     l2935:	
  1505                           
  1506                           ;RF_Control_B1.c: 110: }
  1507                           ;RF_Control_B1.c: 111: if(RF->TransceiveGO)
  1508  007D  0876               	movf	_RF,w
  1509  007E  0086               	movwf	6
  1510  007F  0187               	clrf	7
  1511  0080  1D01               	btfss	1,2
  1512  0081  0008               	return
  1513                           
  1514                           ;RF_Control_B1.c: 112: {
  1515                           ;RF_Control_B1.c: 113: RF_RxDisable(1);
  1516  0082  3001               	movlw	1
  1517  0083  3183  23DE  3180   	fcall	_RF_RxDisable
  1518                           
  1519                           ;RF_Control_B1.c: 114: if(!RF->Debounce)
  1520  0086  0876               	movf	_RF,w
  1521  0087  0086               	movwf	6
  1522  0088  0187               	clrf	7
  1523  0089  1A81               	btfsc	1,5
  1524  008A  28A3               	goto	l2949
  1525                           
  1526                           ;RF_Control_B1.c: 115: {
  1527                           ;RF_Control_B1.c: 116: RF->DebounceTime++;
  1528  008B  3001               	movlw	1
  1529  008C  0020               	movlb	0	; select bank0
  1530  008D  00DA               	movwf	??_setRF_Main
  1531  008E  0A76               	incf	_RF,w
  1532  008F  0086               	movwf	6
  1533  0090  0187               	clrf	7
  1534  0091  085A               	movf	??_setRF_Main,w
  1535  0092  0781               	addwf	1,f
  1536                           
  1537                           ;RF_Control_B1.c: 117: if(RF->DebounceTime == 25)
  1538  0093  0A76               	incf	_RF,w
  1539  0094  0086               	movwf	6
  1540  0095  0187               	clrf	7
  1541  0096  0801               	movf	1,w
  1542  0097  3A19               	xorlw	25
  1543  0098  1D03               	skipz
  1544  0099  0008               	return
  1545                           
  1546                           ;RF_Control_B1.c: 118: {
  1547                           ;RF_Control_B1.c: 119: RF->DebounceTime=0;
  1548  009A  0A76               	incf	_RF,w
  1549  009B  0086               	movwf	6
  1550  009C  0187               	clrf	7
  1551  009D  0181               	clrf	1
  1552                           
  1553                           ;RF_Control_B1.c: 120: RF->Debounce=1;
  1554  009E  0876               	movf	_RF,w
  1555  009F  0086               	movwf	6
  1556  00A0  0187               	clrf	7
  1557  00A1  1681               	bsf	1,5
  1558                           
  1559                           ;RF_Control_B1.c: 121: }
  1560                           ;RF_Control_B1.c: 122: }
  1561  00A2  0008               	return
  1562  00A3                     l2949:	
  1563                           
  1564                           ;RF_Control_B1.c: 123: else
  1565                           ;RF_Control_B1.c: 124: {
  1566                           ;RF_Control_B1.c: 125: RF->Debounce=0;
  1567  00A3  0876               	movf	_RF,w
  1568  00A4  0086               	movwf	6
  1569  00A5  0187               	clrf	7
  1570  00A6  1281               	bcf	1,5
  1571                           
  1572                           ;RF_Control_B1.c: 126: RF->TransceiveGO=0;
  1573  00A7  0876               	movf	_RF,w
  1574  00A8  0086               	movwf	6
  1575  00A9  0187               	clrf	7
  1576  00AA  1101               	bcf	1,2
  1577                           
  1578                           ;RF_Control_B1.c: 127: CC2500_TxData();
  1579  00AB  3182  22BB         	fcall	_CC2500_TxData
  1580  00AD  0008               	return
  1581  00AE                     __end_of_setRF_Main:	
  1582                           
  1583                           	psect	text3
  1584  03DE                     __ptext3:	
  1585 ;; *************** function _RF_RxDisable *****************
  1586 ;; Defined at:
  1587 ;;		line 191 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;  rf              1    wreg     unsigned char 
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  rf              1    4[BANK0 ] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;		None               void
  1594 ;; Registers used:
  1595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1601 ;;      Params:         0       0       0       0       0       0       0       0
  1602 ;;      Locals:         0       1       0       0       0       0       0       0
  1603 ;;      Temps:          0       0       0       0       0       0       0       0
  1604 ;;      Totals:         0       1       0       0       0       0       0       0
  1605 ;;Total ram usage:        1 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; Hardware stack levels required when called:    6
  1608 ;; This function calls:
  1609 ;;		_CC2500_WriteCommand
  1610 ;;		_RfPointSelect
  1611 ;;		_setINT_GO
  1612 ;; This function is called by:
  1613 ;;		_setRF_Main
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           
  1618                           ;psect for function _RF_RxDisable
  1619  03DE                     _RF_RxDisable:	
  1620                           
  1621                           ;incstack = 0
  1622                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1623                           ;RF_RxDisable@rf stored from wreg
  1624  03DE  0020               	movlb	0	; select bank0
  1625  03DF  00D8               	movwf	RF_RxDisable@rf
  1626                           
  1627                           ;RF_Control_B1.c: 193: RfPointSelect(rf);
  1628  03E0  0858               	movf	RF_RxDisable@rf,w
  1629  03E1  3185  25A7  3183   	fcall	_RfPointSelect
  1630                           
  1631                           ;RF_Control_B1.c: 195: if(RF->RxStatus)
  1632  03E4  0876               	movf	_RF,w
  1633  03E5  0086               	movwf	6
  1634  03E6  0187               	clrf	7
  1635  03E7  1D81               	btfss	1,3
  1636  03E8  0008               	return
  1637                           
  1638                           ;RF_Control_B1.c: 196: {
  1639                           ;RF_Control_B1.c: 197: RF->RxStatus=0;
  1640  03E9  0876               	movf	_RF,w
  1641  03EA  0086               	movwf	6
  1642  03EB  0187               	clrf	7
  1643  03EC  1181               	bcf	1,3
  1644                           
  1645                           ;RF_Control_B1.c: 198: RF->ReceiveGO=0;
  1646  03ED  0876               	movf	_RF,w
  1647  03EE  0086               	movwf	6
  1648  03EF  0187               	clrf	7
  1649  03F0  1081               	bcf	1,1
  1650                           
  1651                           ;RF_Control_B1.c: 199: RF->DebounceTime=0;
  1652  03F1  0A76               	incf	_RF,w
  1653  03F2  0086               	movwf	6
  1654  03F3  0187               	clrf	7
  1655  03F4  0181               	clrf	1
  1656                           
  1657                           ;RF_Control_B1.c: 200: RF->Debounce=0;
  1658  03F5  0876               	movf	_RF,w
  1659  03F6  0086               	movwf	6
  1660  03F7  0187               	clrf	7
  1661  03F8  1281               	bcf	1,5
  1662                           
  1663                           ;RF_Control_B1.c: 201: CC2500_WriteCommand(0x36);
  1664  03F9  3036               	movlw	54
  1665  03FA  3185  2575  3183   	fcall	_CC2500_WriteCommand
  1666                           
  1667                           ;RF_Control_B1.c: 202: CC2500_WriteCommand(0x3A);
  1668  03FD  303A               	movlw	58
  1669  03FE  3185  2575  3183   	fcall	_CC2500_WriteCommand
  1670                           
  1671                           ;RF_Control_B1.c: 203: setINT_GO(0);
  1672  0401  3000               	movlw	0
  1673  0402  3185  25BC         	fcall	_setINT_GO
  1674  0404  0008               	return
  1675  0405                     __end_of_RF_RxDisable:	
  1676                           
  1677                           	psect	text4
  1678  02BB                     __ptext4:	
  1679 ;; *************** function _CC2500_TxData *****************
  1680 ;; Defined at:
  1681 ;;		line 30 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  loop_e          1    5[BANK0 ] unsigned char 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;		None               void
  1688 ;; Registers used:
  1689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1695 ;;      Params:         0       0       0       0       0       0       0       0
  1696 ;;      Locals:         0       1       0       0       0       0       0       0
  1697 ;;      Temps:          0       1       0       0       0       0       0       0
  1698 ;;      Totals:         0       2       0       0       0       0       0       0
  1699 ;;Total ram usage:        2 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    6
  1702 ;; This function calls:
  1703 ;;		_CC2500_WriteByte
  1704 ;;		_CC2500_WriteCommand
  1705 ;; This function is called by:
  1706 ;;		_setRF_Main
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function _CC2500_TxData
  1712  02BB                     _CC2500_TxData:	
  1713                           
  1714                           ;CC2500_B1.c: 32: unsigned char loop_e;
  1715                           ;CC2500_B1.c: 34: RB5=0;
  1716                           
  1717                           ;incstack = 0
  1718                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1719  02BB  0020               	movlb	0	; select bank0
  1720  02BC  128D               	bcf	13,5	;volatile
  1721                           
  1722                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  1723  02BD  307F               	movlw	127
  1724  02BE  00D8               	movwf	??_CC2500_TxData
  1725  02BF  0858               	movf	??_CC2500_TxData,w
  1726  02C0  00BA               	movwf	_SPI0Buffer
  1727  02C1                     l103:	
  1728                           ;CC2500_B1.c: 36: while(RB3==1);
  1729                           
  1730  02C1  198D               	btfsc	13,3	;volatile
  1731  02C2  2AC1               	goto	l103
  1732                           
  1733                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  1734  02C3  3185  2513  3182   	fcall	_CC2500_WriteByte
  1735                           
  1736                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  1737  02C6  0020               	movlb	0	; select bank0
  1738  02C7  083C               	movf	_Tx_Length,w
  1739  02C8  00D8               	movwf	??_CC2500_TxData
  1740  02C9  0858               	movf	??_CC2500_TxData,w
  1741  02CA  00BA               	movwf	_SPI0Buffer
  1742                           
  1743                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  1744  02CB  3185  2513  3182   	fcall	_CC2500_WriteByte
  1745                           
  1746                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  1747  02CE  0020               	movlb	0	; select bank0
  1748  02CF  01D9               	clrf	CC2500_TxData@loop_e
  1749  02D0                     l2653:	
  1750  02D0  083C               	movf	_Tx_Length,w
  1751  02D1  0259               	subwf	CC2500_TxData@loop_e,w
  1752  02D2  1803               	btfsc	3,0
  1753  02D3  2AE5               	goto	l108
  1754                           
  1755                           ;CC2500_B1.c: 41: {
  1756                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  1757  02D4  0859               	movf	CC2500_TxData@loop_e,w
  1758  02D5  3E20               	addlw	_RF_Data& (0+255)
  1759  02D6  0086               	movwf	6
  1760  02D7  0187               	clrf	7
  1761  02D8  0801               	movf	1,w
  1762  02D9  00D8               	movwf	??_CC2500_TxData
  1763  02DA  0858               	movf	??_CC2500_TxData,w
  1764  02DB  00BA               	movwf	_SPI0Buffer
  1765                           
  1766                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  1767  02DC  3185  2513  3182   	fcall	_CC2500_WriteByte
  1768  02DF  3001               	movlw	1
  1769  02E0  0020               	movlb	0	; select bank0
  1770  02E1  00D8               	movwf	??_CC2500_TxData
  1771  02E2  0858               	movf	??_CC2500_TxData,w
  1772  02E3  07D9               	addwf	CC2500_TxData@loop_e,f
  1773  02E4  2AD0               	goto	l2653
  1774  02E5                     l108:	
  1775                           
  1776                           ;CC2500_B1.c: 44: }
  1777                           ;CC2500_B1.c: 45: RB5=1;
  1778  02E5  168D               	bsf	13,5	;volatile
  1779                           
  1780                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  1781  02E6  3035               	movlw	53
  1782  02E7  3185  2575  3182   	fcall	_CC2500_WriteCommand
  1783  02EA                     l109:	
  1784                           ;CC2500_B1.c: 47: while(RB0==0);
  1785                           
  1786  02EA  0020               	movlb	0	; select bank0
  1787  02EB  1C0D               	btfss	13,0	;volatile
  1788  02EC  2AEA               	goto	l109
  1789  02ED                     l112:	
  1790                           ;CC2500_B1.c: 48: while(RB0==1);
  1791                           
  1792  02ED  180D               	btfsc	13,0	;volatile
  1793  02EE  2AED               	goto	l112
  1794                           
  1795                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  1796  02EF  3036               	movlw	54
  1797  02F0  3185  2575  3182   	fcall	_CC2500_WriteCommand
  1798                           
  1799                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  1800  02F3  303B               	movlw	59
  1801  02F4  3185  2575         	fcall	_CC2500_WriteCommand
  1802                           
  1803                           ;CC2500_B1.c: 51: Transceive_OK=1;
  1804  02F6  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  1805  02F7  0008               	return
  1806  02F8                     __end_of_CC2500_TxData:	
  1807                           
  1808                           	psect	text5
  1809  0266                     __ptext5:	
  1810 ;; *************** function _CC2500_RxData *****************
  1811 ;; Defined at:
  1812 ;;		line 56 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;		None
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  loop_f          1    5[BANK0 ] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;		None               void
  1819 ;; Registers used:
  1820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1826 ;;      Params:         0       0       0       0       0       0       0       0
  1827 ;;      Locals:         0       1       0       0       0       0       0       0
  1828 ;;      Temps:          0       1       0       0       0       0       0       0
  1829 ;;      Totals:         0       2       0       0       0       0       0       0
  1830 ;;Total ram usage:        2 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    6
  1833 ;; This function calls:
  1834 ;;		_CC2500_ReadByte
  1835 ;;		_CC2500_ReadStatus
  1836 ;;		_CC2500_WriteByte
  1837 ;;		_CC2500_WriteCommand
  1838 ;;		_setRF_RxStatus
  1839 ;; This function is called by:
  1840 ;;		_setRF_Main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function _CC2500_RxData
  1846  0266                     _CC2500_RxData:	
  1847                           
  1848                           ;CC2500_B1.c: 58: unsigned char loop_f;
  1849                           ;CC2500_B1.c: 62: if(RB0 == 1)
  1850                           
  1851                           ;incstack = 0
  1852                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1853  0266  0020               	movlb	0	; select bank0
  1854  0267  180D               	btfsc	13,0	;volatile
  1855  0268                     l119:	
  1856                           ;CC2500_B1.c: 63: {
  1857                           ;CC2500_B1.c: 64: while(RB0 == 1);
  1858                           
  1859  0268  180D               	btfsc	13,0	;volatile
  1860  0269  2A68               	goto	l119
  1861                           
  1862                           ;CC2500_B1.c: 65: }
  1863                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  1864  026A  303B               	movlw	59
  1865  026B  3184  24A7  3182   	fcall	_CC2500_ReadStatus
  1866                           
  1867                           ;CC2500_B1.c: 67: if(s_data != 0)
  1868  026E  0020               	movlb	0	; select bank0
  1869  026F  083F               	movf	_s_data,w
  1870  0270  1903               	btfsc	3,2
  1871  0271  2AAD               	goto	l2699
  1872                           
  1873                           ;CC2500_B1.c: 69: {
  1874                           ;CC2500_B1.c: 70: RB5=0;
  1875  0272  128D               	bcf	13,5	;volatile
  1876                           
  1877                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  1878  0273  30FF               	movlw	255
  1879  0274  00D8               	movwf	??_CC2500_RxData
  1880  0275  0858               	movf	??_CC2500_RxData,w
  1881  0276  00BA               	movwf	_SPI0Buffer
  1882  0277                     l123:	
  1883                           ;CC2500_B1.c: 72: while(RB3==1);
  1884                           
  1885  0277  198D               	btfsc	13,3	;volatile
  1886  0278  2A77               	goto	l123
  1887                           
  1888                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  1889  0279  3185  2513  3182   	fcall	_CC2500_WriteByte
  1890                           
  1891                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  1892  027C  3184  2490  3182   	fcall	_CC2500_ReadByte
  1893                           
  1894                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  1895  027F  0020               	movlb	0	; select bank0
  1896  0280  083A               	movf	_SPI0Buffer,w
  1897  0281  00D8               	movwf	??_CC2500_RxData
  1898  0282  0858               	movf	??_CC2500_RxData,w
  1899  0283  00B9               	movwf	_Rx_Length
  1900                           
  1901                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  1902  0284  01D9               	clrf	CC2500_RxData@loop_f
  1903  0285                     l2685:	
  1904  0285  0839               	movf	_Rx_Length,w
  1905  0286  0259               	subwf	CC2500_RxData@loop_f,w
  1906  0287  1803               	btfsc	3,0
  1907  0288  2A9A               	goto	l2687
  1908                           
  1909                           ;CC2500_B1.c: 78: {
  1910                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  1911  0289  3184  2490  3182   	fcall	_CC2500_ReadByte
  1912                           
  1913                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  1914  028C  0020               	movlb	0	; select bank0
  1915  028D  083A               	movf	_SPI0Buffer,w
  1916  028E  00D8               	movwf	??_CC2500_RxData
  1917  028F  0859               	movf	CC2500_RxData@loop_f,w
  1918  0290  3E20               	addlw	_RF_Data& (0+255)
  1919  0291  0086               	movwf	6
  1920  0292  0187               	clrf	7
  1921  0293  0858               	movf	??_CC2500_RxData,w
  1922  0294  0081               	movwf	1
  1923  0295  3001               	movlw	1
  1924  0296  00D8               	movwf	??_CC2500_RxData
  1925  0297  0858               	movf	??_CC2500_RxData,w
  1926  0298  07D9               	addwf	CC2500_RxData@loop_f,f
  1927  0299  2A85               	goto	l2685
  1928  029A                     l2687:	
  1929                           
  1930                           ;CC2500_B1.c: 81: }
  1931                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  1932  029A  3184  2490  3182   	fcall	_CC2500_ReadByte
  1933                           
  1934                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  1935  029D  0020               	movlb	0	; select bank0
  1936  029E  083A               	movf	_SPI0Buffer,w
  1937  029F  00D8               	movwf	??_CC2500_RxData
  1938  02A0  0858               	movf	??_CC2500_RxData,w
  1939  02A1  00B8               	movwf	_RSSI
  1940                           
  1941                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  1942  02A2  3184  2490  3182   	fcall	_CC2500_ReadByte
  1943                           
  1944                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  1945  02A5  0020               	movlb	0	; select bank0
  1946  02A6  083A               	movf	_SPI0Buffer,w
  1947  02A7  00D8               	movwf	??_CC2500_RxData
  1948  02A8  0858               	movf	??_CC2500_RxData,w
  1949  02A9  00B7               	movwf	_CRC
  1950                           
  1951                           ;CC2500_B1.c: 86: RB5=1;
  1952  02AA  168D               	bsf	13,5	;volatile
  1953                           
  1954                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  1955  02AB  1BB7               	btfsc	_CRC,7
  1956                           
  1957                           ;CC2500_B1.c: 88: Receive_OK=1;
  1958  02AC  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  1959  02AD                     l2699:	
  1960                           
  1961                           ;CC2500_B1.c: 89: }
  1962                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  1963  02AD  3036               	movlw	54
  1964  02AE  3185  2575  3182   	fcall	_CC2500_WriteCommand
  1965                           
  1966                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  1967  02B1  303A               	movlw	58
  1968  02B2  3185  2575  3182   	fcall	_CC2500_WriteCommand
  1969                           
  1970                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  1971  02B5  0020               	movlb	0	; select bank0
  1972  02B6  01D6               	clrf	setRF_RxStatus@command
  1973  02B7  3001               	movlw	1
  1974  02B8  3185  2567         	fcall	_setRF_RxStatus
  1975  02BA  0008               	return
  1976  02BB                     __end_of_CC2500_RxData:	
  1977                           
  1978                           	psect	text6
  1979  0567                     __ptext6:	
  1980 ;; *************** function _setRF_RxStatus *****************
  1981 ;; Defined at:
  1982 ;;		line 43 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;  rf              1    wreg     unsigned char 
  1985 ;;  command         1    2[BANK0 ] unsigned char 
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  rf              1    3[BANK0 ] unsigned char 
  1988 ;; Return value:  Size  Location     Type
  1989 ;;		None               void
  1990 ;; Registers used:
  1991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1997 ;;      Params:         0       1       0       0       0       0       0       0
  1998 ;;      Locals:         0       1       0       0       0       0       0       0
  1999 ;;      Temps:          0       0       0       0       0       0       0       0
  2000 ;;      Totals:         0       2       0       0       0       0       0       0
  2001 ;;Total ram usage:        2 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    5
  2004 ;; This function calls:
  2005 ;;		_RfPointSelect
  2006 ;; This function is called by:
  2007 ;;		_CC2500_RxData
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           
  2012                           ;psect for function _setRF_RxStatus
  2013  0567                     _setRF_RxStatus:	
  2014                           
  2015                           ;incstack = 0
  2016                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2017                           ;setRF_RxStatus@rf stored from wreg
  2018  0567  0020               	movlb	0	; select bank0
  2019  0568  00D7               	movwf	setRF_RxStatus@rf
  2020                           
  2021                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  2022  0569  0857               	movf	setRF_RxStatus@rf,w
  2023  056A  3185  25A7         	fcall	_RfPointSelect
  2024                           
  2025                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  2026  056C  0876               	movf	_RF,w
  2027  056D  0086               	movwf	6
  2028  056E  0187               	clrf	7
  2029  056F  0020               	movlb	0	; select bank0
  2030  0570  0856               	movf	setRF_RxStatus@command,w
  2031  0571  1181               	bcf	1,3
  2032  0572  1D03               	skipz
  2033  0573  1581               	bsf	1,3
  2034  0574  0008               	return
  2035  0575                     __end_of_setRF_RxStatus:	
  2036                           
  2037                           	psect	text7
  2038  04A7                     __ptext7:	
  2039 ;; *************** function _CC2500_ReadStatus *****************
  2040 ;; Defined at:
  2041 ;;		line 267 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  status_addr     1    wreg     unsigned char 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  status_addr     1    3[BANK0 ] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;		None               void
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0, pclath, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2055 ;;      Params:         0       0       0       0       0       0       0       0
  2056 ;;      Locals:         0       1       0       0       0       0       0       0
  2057 ;;      Temps:          0       1       0       0       0       0       0       0
  2058 ;;      Totals:         0       2       0       0       0       0       0       0
  2059 ;;Total ram usage:        2 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    5
  2062 ;; This function calls:
  2063 ;;		_CC2500_ReadByte
  2064 ;;		_CC2500_WriteByte
  2065 ;; This function is called by:
  2066 ;;		_CC2500_RxData
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           
  2071                           ;psect for function _CC2500_ReadStatus
  2072  04A7                     _CC2500_ReadStatus:	
  2073                           
  2074                           ;incstack = 0
  2075                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  2076                           ;CC2500_ReadStatus@status_addr stored from wreg
  2077  04A7  0020               	movlb	0	; select bank0
  2078  04A8  00D7               	movwf	CC2500_ReadStatus@status_addr
  2079                           
  2080                           ;CC2500_B1.c: 269: RB5=0;
  2081  04A9  128D               	bcf	13,5	;volatile
  2082                           
  2083                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  2084  04AA  0857               	movf	CC2500_ReadStatus@status_addr,w
  2085  04AB  3EC0               	addlw	192
  2086  04AC  00D6               	movwf	??_CC2500_ReadStatus
  2087  04AD  0856               	movf	??_CC2500_ReadStatus,w
  2088  04AE  00BA               	movwf	_SPI0Buffer
  2089  04AF                     l199:	
  2090                           ;CC2500_B1.c: 272: while(RB3==1);
  2091                           
  2092  04AF  198D               	btfsc	13,3	;volatile
  2093  04B0  2CAF               	goto	l199
  2094                           
  2095                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  2096  04B1  3185  2513  3184   	fcall	_CC2500_WriteByte
  2097                           
  2098                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  2099  04B4  3184  2490         	fcall	_CC2500_ReadByte
  2100                           
  2101                           ;CC2500_B1.c: 276: RB5=1;
  2102  04B6  0020               	movlb	0	; select bank0
  2103  04B7  168D               	bsf	13,5	;volatile
  2104                           
  2105                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  2106  04B8  083A               	movf	_SPI0Buffer,w
  2107  04B9  00D6               	movwf	??_CC2500_ReadStatus
  2108  04BA  0856               	movf	??_CC2500_ReadStatus,w
  2109  04BB  00BF               	movwf	_s_data
  2110  04BC  0008               	return
  2111  04BD                     __end_of_CC2500_ReadStatus:	
  2112                           
  2113                           	psect	text8
  2114  0490                     __ptext8:	
  2115 ;; *************** function _CC2500_ReadByte *****************
  2116 ;; Defined at:
  2117 ;;		line 210 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;		None
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  loop_b          1    1[BANK0 ] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;		None               void
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2131 ;;      Params:         0       0       0       0       0       0       0       0
  2132 ;;      Locals:         0       1       0       0       0       0       0       0
  2133 ;;      Temps:          0       1       0       0       0       0       0       0
  2134 ;;      Totals:         0       2       0       0       0       0       0       0
  2135 ;;Total ram usage:        2 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    4
  2138 ;; This function calls:
  2139 ;;		Nothing
  2140 ;; This function is called by:
  2141 ;;		_CC2500_RxData
  2142 ;;		_CC2500_ReadStatus
  2143 ;;		_CC2500_ReadREG
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           
  2148                           ;psect for function _CC2500_ReadByte
  2149  0490                     _CC2500_ReadByte:	
  2150                           
  2151                           ;CC2500_B1.c: 212: unsigned char loop_b;
  2152                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  2153                           
  2154                           ;incstack = 0
  2155                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  2156  0490  0020               	movlb	0	; select bank0
  2157  0491  01D5               	clrf	CC2500_ReadByte@loop_b
  2158  0492                     L1:	
  2159  0492  3008               	movlw	8
  2160  0493  0255               	subwf	CC2500_ReadByte@loop_b,w
  2161  0494  1803               	btfsc	3,0
  2162  0495  0008               	return
  2163                           
  2164                           ;CC2500_B1.c: 214: {
  2165                           ;CC2500_B1.c: 215: RB2=1;
  2166  0496  150D               	bsf	13,2	;volatile
  2167                           
  2168                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  2169  0497  1003               	clrc
  2170  0498  0DBA               	rlf	_SPI0Buffer,f
  2171                           
  2172                           ;CC2500_B1.c: 217: if(RB3 == 1)
  2173  0499  1D8D               	btfss	13,3	;volatile
  2174  049A  2C9D               	goto	l2599
  2175                           
  2176                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  2177  049B  143A               	bsf	_SPI0Buffer,0
  2178  049C  2CA1               	goto	l2601
  2179  049D                     l2599:	
  2180                           
  2181                           ;CC2500_B1.c: 219: else
  2182                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  2183  049D  30FE               	movlw	254
  2184  049E  00D4               	movwf	??_CC2500_ReadByte
  2185  049F  0854               	movf	??_CC2500_ReadByte,w
  2186  04A0  05BA               	andwf	_SPI0Buffer,f
  2187  04A1                     l2601:	
  2188                           
  2189                           ;CC2500_B1.c: 221: RB2=0;
  2190  04A1  110D               	bcf	13,2	;volatile
  2191  04A2  3001               	movlw	1
  2192  04A3  00D4               	movwf	??_CC2500_ReadByte
  2193  04A4  0854               	movf	??_CC2500_ReadByte,w
  2194  04A5  07D5               	addwf	CC2500_ReadByte@loop_b,f
  2195  04A6  2C92               	goto	L1
  2196  04A7                     __end_of_CC2500_ReadByte:	
  2197                           
  2198                           	psect	text9
  2199  05E0                     __ptext9:	
  2200 ;; *************** function _RF_Initialization *****************
  2201 ;; Defined at:
  2202 ;;		line 17 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;		None
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;		None
  2207 ;; Return value:  Size  Location     Type
  2208 ;;		None               void
  2209 ;; Registers used:
  2210 ;;		wreg, status,2, status,0, pclath, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2216 ;;      Params:         0       0       0       0       0       0       0       0
  2217 ;;      Locals:         0       0       0       0       0       0       0       0
  2218 ;;      Temps:          0       0       0       0       0       0       0       0
  2219 ;;      Totals:         0       0       0       0       0       0       0       0
  2220 ;;Total ram usage:        0 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    5
  2223 ;; This function calls:
  2224 ;;		_setRF_Initialization
  2225 ;; This function is called by:
  2226 ;;		_main
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           
  2231                           ;psect for function _RF_Initialization
  2232  05E0                     _RF_Initialization:	
  2233                           
  2234                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  2235                           
  2236                           ;incstack = 0
  2237                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  2238  05E0  3001               	movlw	1
  2239  05E1  3185  25D1         	fcall	_setRF_Initialization
  2240  05E3  0008               	return
  2241  05E4                     __end_of_RF_Initialization:	
  2242                           
  2243                           	psect	text10
  2244  05D1                     __ptext10:	
  2245 ;; *************** function _setRF_Initialization *****************
  2246 ;; Defined at:
  2247 ;;		line 50 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  rf              1    wreg     unsigned char 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  rf              1    0[COMMON] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;		None               void
  2254 ;; Registers used:
  2255 ;;		wreg
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2261 ;;      Params:         0       0       0       0       0       0       0       0
  2262 ;;      Locals:         0       0       0       0       0       0       0       0
  2263 ;;      Temps:          0       1       0       0       0       0       0       0
  2264 ;;      Totals:         0       1       0       0       0       0       0       0
  2265 ;;Total ram usage:        1 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    4
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_RF_Initialization
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           
  2276                           ;psect for function _setRF_Initialization
  2277  05D1                     _setRF_Initialization:	
  2278                           
  2279                           ;RF_Control_B1.c: 54: Tx_Length=21;
  2280                           
  2281                           ;incstack = 0
  2282                           ; Regs used in _setRF_Initialization: [wreg]
  2283  05D1  3015               	movlw	21
  2284  05D2  0020               	movlb	0	; select bank0
  2285  05D3  00D4               	movwf	??_setRF_Initialization
  2286  05D4  0854               	movf	??_setRF_Initialization,w
  2287  05D5  00BC               	movwf	_Tx_Length
  2288  05D6  0008               	return
  2289  05D7                     __end_of_setRF_Initialization:	
  2290                           
  2291                           	psect	text11
  2292  0527                     __ptext11:	
  2293 ;; *************** function _Mcu_Initial *****************
  2294 ;; Defined at:
  2295 ;;		line 11 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;		None               void
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, pclath, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2309 ;;      Params:         0       0       0       0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0       0
  2312 ;;      Totals:         0       0       0       0       0       0       0       0
  2313 ;;Total ram usage:        0 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		_I2C_Set
  2318 ;;		_INT_Set
  2319 ;;		_IO_Set
  2320 ;;		_TMR1_Set
  2321 ;; This function is called by:
  2322 ;;		_main
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           
  2327                           ;psect for function _Mcu_Initial
  2328  0527                     _Mcu_Initial:	
  2329                           
  2330                           ;MCU_16f1516_B1.c: 14: OSCCON=0x78; ;;
  2331                           
  2332                           ;incstack = 0
  2333                           ; Regs used in _Mcu_Initial: [wreg+status,2+status,0+pclath+cstack]
  2334  0527  3078               	movlw	120
  2335  0528  0021               	movlb	1	; select bank1
  2336  0529  0099               	movwf	25	;volatile
  2337                           
  2338                           ;MCU_16f1516_B1.c: 16: IO_Set();
  2339  052A  3184  24E9  3185   	fcall	_IO_Set
  2340                           
  2341                           ;MCU_16f1516_B1.c: 18: __nop();
  2342  052D  0000               	nop
  2343                           
  2344                           ;MCU_16f1516_B1.c: 20: TMR1_Set();
  2345  052E  3185  2539  3185   	fcall	_TMR1_Set
  2346                           
  2347                           ;MCU_16f1516_B1.c: 22: __nop();
  2348  0531  0000               	nop
  2349                           
  2350                           ;MCU_16f1516_B1.c: 26: INT_Set();
  2351  0532  3185  25D7  3185   	fcall	_INT_Set
  2352                           
  2353                           ;MCU_16f1516_B1.c: 28: __nop();
  2354  0535  0000               	nop
  2355                           
  2356                           ;MCU_16f1516_B1.c: 30: I2C_Set();
  2357  0536  3184  24BD         	fcall	_I2C_Set
  2358  0538  0008               	return
  2359  0539                     __end_of_Mcu_Initial:	
  2360                           
  2361                           	psect	text12
  2362  0539                     __ptext12:	
  2363 ;; *************** function _TMR1_Set *****************
  2364 ;; Defined at:
  2365 ;;		line 114 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;		None               void
  2372 ;; Registers used:
  2373 ;;		wreg
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2379 ;;      Params:         0       0       0       0       0       0       0       0
  2380 ;;      Locals:         0       0       0       0       0       0       0       0
  2381 ;;      Temps:          0       1       0       0       0       0       0       0
  2382 ;;      Totals:         0       1       0       0       0       0       0       0
  2383 ;;Total ram usage:        1 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    4
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_Mcu_Initial
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _TMR1_Set
  2395  0539                     _TMR1_Set:	
  2396                           
  2397                           ;MCU_16f1516_B1.c: 116: Timer1=&VarTimer1;
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _TMR1_Set: [wreg]
  2401  0539  304F               	movlw	_VarTimer1& (0+255)
  2402  053A  0020               	movlb	0	; select bank0
  2403  053B  00D4               	movwf	??_TMR1_Set
  2404  053C  0854               	movf	??_TMR1_Set,w
  2405  053D  00BB               	movwf	_Timer1
  2406                           
  2407                           ;MCU_16f1516_B1.c: 117: T1CON=(0x40 | 0x00 | 0x01);
  2408  053E  3041               	movlw	65
  2409  053F  0098               	movwf	24	;volatile
  2410                           
  2411                           ;MCU_16f1516_B1.c: 118: TMR1H=((65536-700)/256);
  2412  0540  30FD               	movlw	253
  2413  0541  0097               	movwf	23	;volatile
  2414                           
  2415                           ;MCU_16f1516_B1.c: 119: TMR1L=((65536-700)%256);
  2416  0542  3044               	movlw	68
  2417  0543  0096               	movwf	22	;volatile
  2418                           
  2419                           ;MCU_16f1516_B1.c: 120: TMR1IE=1;
  2420  0544  0021               	movlb	1	; select bank1
  2421  0545  1411               	bsf	17,0	;volatile
  2422                           
  2423                           ;MCU_16f1516_B1.c: 121: PEIE=1;
  2424  0546  170B               	bsf	11,6	;volatile
  2425                           
  2426                           ;MCU_16f1516_B1.c: 122: GIE=1;
  2427  0547  178B               	bsf	11,7	;volatile
  2428  0548  0008               	return
  2429  0549                     __end_of_TMR1_Set:	
  2430                           
  2431                           	psect	text13
  2432  04E9                     __ptext13:	
  2433 ;; *************** function _IO_Set *****************
  2434 ;; Defined at:
  2435 ;;		line 37 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;		None
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;		None
  2440 ;; Return value:  Size  Location     Type
  2441 ;;		None               void
  2442 ;; Registers used:
  2443 ;;		wreg, status,2
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2449 ;;      Params:         0       0       0       0       0       0       0       0
  2450 ;;      Locals:         0       0       0       0       0       0       0       0
  2451 ;;      Temps:          0       0       0       0       0       0       0       0
  2452 ;;      Totals:         0       0       0       0       0       0       0       0
  2453 ;;Total ram usage:        0 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; Hardware stack levels required when called:    4
  2456 ;; This function calls:
  2457 ;;		Nothing
  2458 ;; This function is called by:
  2459 ;;		_Mcu_Initial
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           
  2464                           ;psect for function _IO_Set
  2465  04E9                     _IO_Set:	
  2466                           
  2467                           ;MCU_16f1516_B1.c: 39: TRISA=0b00000000;;
  2468                           
  2469                           ;incstack = 0
  2470                           ; Regs used in _IO_Set: [wreg+status,2]
  2471  04E9  0021               	movlb	1	; select bank1
  2472  04EA  018C               	clrf	12	;volatile
  2473                           
  2474                           ;MCU_16f1516_B1.c: 40: TRISB=0b00011001;;
  2475  04EB  3019               	movlw	25
  2476  04EC  008D               	movwf	13	;volatile
  2477                           
  2478                           ;MCU_16f1516_B1.c: 41: TRISC=0b00011000;;
  2479  04ED  3018               	movlw	24
  2480  04EE  008E               	movwf	14	;volatile
  2481                           
  2482                           ;MCU_16f1516_B1.c: 42: LATA=0b00000000;;
  2483  04EF  0022               	movlb	2	; select bank2
  2484  04F0  018C               	clrf	12	;volatile
  2485                           
  2486                           ;MCU_16f1516_B1.c: 43: LATB=0b00000000;;
  2487  04F1  018D               	clrf	13	;volatile
  2488                           
  2489                           ;MCU_16f1516_B1.c: 44: LATC=0b00000000;;
  2490  04F2  018E               	clrf	14	;volatile
  2491                           
  2492                           ;MCU_16f1516_B1.c: 45: ANSELA=0b00000000;;
  2493  04F3  0023               	movlb	3	; select bank3
  2494  04F4  018C               	clrf	12	;volatile
  2495                           
  2496                           ;MCU_16f1516_B1.c: 46: ANSELB=0b00000000;;
  2497  04F5  018D               	clrf	13	;volatile
  2498                           
  2499                           ;MCU_16f1516_B1.c: 47: ANSELC=0b00000000;;
  2500  04F6  018E               	clrf	14	;volatile
  2501                           
  2502                           ;MCU_16f1516_B1.c: 48: PORTA=0b00000000;;
  2503  04F7  0020               	movlb	0	; select bank0
  2504  04F8  018C               	clrf	12	;volatile
  2505                           
  2506                           ;MCU_16f1516_B1.c: 49: PORTB=0b00011001;;
  2507  04F9  3019               	movlw	25
  2508  04FA  008D               	movwf	13	;volatile
  2509                           
  2510                           ;MCU_16f1516_B1.c: 50: PORTC=0b00011000;;
  2511  04FB  3018               	movlw	24
  2512  04FC  008E               	movwf	14	;volatile
  2513  04FD  0008               	return
  2514  04FE                     __end_of_IO_Set:	
  2515                           
  2516                           	psect	text14
  2517  05D7                     __ptext14:	
  2518 ;; *************** function _INT_Set *****************
  2519 ;; Defined at:
  2520 ;;		line 148 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;		None
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;		None
  2525 ;; Return value:  Size  Location     Type
  2526 ;;		None               void
  2527 ;; Registers used:
  2528 ;;		None
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2534 ;;      Params:         0       0       0       0       0       0       0       0
  2535 ;;      Locals:         0       0       0       0       0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0       0       0       0
  2537 ;;      Totals:         0       0       0       0       0       0       0       0
  2538 ;;Total ram usage:        0 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    4
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_Mcu_Initial
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           
  2549                           ;psect for function _INT_Set
  2550  05D7                     _INT_Set:	
  2551                           
  2552                           ;MCU_16f1516_B1.c: 150: WPUB0=0;
  2553                           
  2554                           ;incstack = 0
  2555                           ; Regs used in _INT_Set: []
  2556  05D7  0024               	movlb	4	; select bank4
  2557  05D8  100D               	bcf	13,0	;volatile
  2558                           
  2559                           ;MCU_16f1516_B1.c: 152: PEIE=1;
  2560  05D9  170B               	bsf	11,6	;volatile
  2561                           
  2562                           ;MCU_16f1516_B1.c: 153: GIE=1;
  2563  05DA  178B               	bsf	11,7	;volatile
  2564  05DB  0008               	return
  2565  05DC                     __end_of_INT_Set:	
  2566                           
  2567                           	psect	text15
  2568  04BD                     __ptext15:	
  2569 ;; *************** function _I2C_Set *****************
  2570 ;; Defined at:
  2571 ;;		line 233 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;		None               void
  2578 ;; Registers used:
  2579 ;;		wreg
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2585 ;;      Params:         0       0       0       0       0       0       0       0
  2586 ;;      Locals:         0       0       0       0       0       0       0       0
  2587 ;;      Temps:          0       1       0       0       0       0       0       0
  2588 ;;      Totals:         0       1       0       0       0       0       0       0
  2589 ;;Total ram usage:        1 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    4
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_Mcu_Initial
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           
  2600                           ;psect for function _I2C_Set
  2601  04BD                     _I2C_Set:	
  2602                           
  2603                           ;MCU_16f1516_B1.c: 235: I2C=&VarI2C;
  2604                           
  2605                           ;incstack = 0
  2606                           ; Regs used in _I2C_Set: [wreg]
  2607  04BD  3020               	movlw	_VarI2C& (0+255)
  2608  04BE  0020               	movlb	0	; select bank0
  2609  04BF  00D4               	movwf	??_I2C_Set
  2610  04C0  0854               	movf	??_I2C_Set,w
  2611  04C1  00F8               	movwf	_I2C
  2612                           
  2613                           ;MCU_16f1516_B1.c: 245: SSPADD=0x10;
  2614  04C2  3010               	movlw	16
  2615  04C3  0024               	movlb	4	; select bank4
  2616  04C4  0092               	movwf	18	;volatile
  2617                           
  2618                           ;MCU_16f1516_B1.c: 247: SSPSTAT = 0x80;
  2619  04C5  3080               	movlw	128
  2620  04C6  0094               	movwf	20	;volatile
  2621                           
  2622                           ;MCU_16f1516_B1.c: 248: SSPCON2 = 0x80;
  2623  04C7  3080               	movlw	128
  2624  04C8  0096               	movwf	22	;volatile
  2625                           
  2626                           ;MCU_16f1516_B1.c: 249: SSPCON1=0b100110;
  2627  04C9  3026               	movlw	38
  2628  04CA  0095               	movwf	21	;volatile
  2629                           
  2630                           ;MCU_16f1516_B1.c: 251: SEN=1;
  2631  04CB  1416               	bsf	22,0	;volatile
  2632                           
  2633                           ;MCU_16f1516_B1.c: 252: AHEN=0;
  2634  04CC  1097               	bcf	23,1	;volatile
  2635                           
  2636                           ;MCU_16f1516_B1.c: 253: DHEN=0;
  2637  04CD  1017               	bcf	23,0	;volatile
  2638                           
  2639                           ;MCU_16f1516_B1.c: 254: SSPIE=1;
  2640  04CE  0021               	movlb	1	; select bank1
  2641  04CF  1591               	bsf	17,3	;volatile
  2642                           
  2643                           ;MCU_16f1516_B1.c: 255: PEIE=1;
  2644  04D0  170B               	bsf	11,6	;volatile
  2645                           
  2646                           ;MCU_16f1516_B1.c: 256: GIE=1;
  2647  04D1  178B               	bsf	11,7	;volatile
  2648  04D2  0008               	return
  2649  04D3                     __end_of_I2C_Set:	
  2650                           
  2651                           	psect	text16
  2652  0549                     __ptext16:	
  2653 ;; *************** function _MainT_Initial *****************
  2654 ;; Defined at:
  2655 ;;		line 33 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;		None               void
  2662 ;; Registers used:
  2663 ;;		wreg, fsr1l, fsr1h
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2669 ;;      Params:         0       0       0       0       0       0       0       0
  2670 ;;      Locals:         0       0       0       0       0       0       0       0
  2671 ;;      Temps:          0       1       0       0       0       0       0       0
  2672 ;;      Totals:         0       1       0       0       0       0       0       0
  2673 ;;Total ram usage:        1 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    4
  2676 ;; This function calls:
  2677 ;;		Nothing
  2678 ;; This function is called by:
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _MainT_Initial
  2685  0549                     _MainT_Initial:	
  2686                           
  2687                           ;myMain.c: 35: TMain=&VarTMain;
  2688                           
  2689                           ;incstack = 0
  2690                           ; Regs used in _MainT_Initial: [wregfsr1]
  2691  0549  3040               	movlw	_VarTMain& (0+255)
  2692  054A  0020               	movlb	0	; select bank0
  2693  054B  00D4               	movwf	??_MainT_Initial
  2694  054C  0854               	movf	??_MainT_Initial,w
  2695  054D  00DD               	movwf	_TMain
  2696                           
  2697                           ;myMain.c: 36: TMain->FirstOpen=1;
  2698  054E  085D               	movf	_TMain,w
  2699  054F  3E0D               	addlw	13
  2700  0550  0086               	movwf	6
  2701  0551  0187               	clrf	7
  2702  0552  1401               	bsf	1,0
  2703                           
  2704                           ;myMain.c: 37: Product=&VarProduct;
  2705  0553  30A0               	movlw	_VarProduct& (0+255)
  2706  0554  00D4               	movwf	??_MainT_Initial
  2707  0555  0854               	movf	??_MainT_Initial,w
  2708  0556  00F9               	movwf	_Product
  2709  0557  0008               	return
  2710  0558                     __end_of_MainT_Initial:	
  2711                           
  2712                           	psect	text17
  2713  011B                     __ptext17:	
  2714 ;; *************** function _MainT *****************
  2715 ;; Defined at:
  2716 ;;		line 41 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;		None
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  i               1    0        unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;		None               void
  2723 ;; Registers used:
  2724 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2730 ;;      Params:         0       0       0       0       0       0       0       0
  2731 ;;      Locals:         0       0       0       0       0       0       0       0
  2732 ;;      Temps:          0       1       0       0       0       0       0       0
  2733 ;;      Totals:         0       1       0       0       0       0       0       0
  2734 ;;Total ram usage:        1 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    6
  2737 ;; This function calls:
  2738 ;;		_setRF_Enable
  2739 ;; This function is called by:
  2740 ;;		_main
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function _MainT
  2746  011B                     _MainT:	
  2747                           
  2748                           ;myMain.c: 43: char i;
  2749                           ;myMain.c: 45: if(!TMain->PowerON)
  2750                           
  2751                           ;incstack = 0
  2752                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2753  011B  0020               	movlb	0	; select bank0
  2754  011C  085D               	movf	_TMain,w
  2755  011D  0086               	movwf	6
  2756  011E  0187               	clrf	7
  2757  011F  1801               	btfsc	1,0
  2758  0120  2944               	goto	l3045
  2759                           
  2760                           ;myMain.c: 46: {
  2761                           ;myMain.c: 47: TMain->PowerCount++;
  2762  0121  0A5D               	incf	_TMain,w
  2763  0122  0086               	movwf	6
  2764  0123  0187               	clrf	7
  2765  0124  3001               	movlw	1
  2766  0125  0781               	addwf	1,f
  2767  0126  3141               	addfsr 1,1
  2768  0127  1803               	skipnc
  2769  0128  0A81               	incf	1,f
  2770                           
  2771                           ;myMain.c: 48: if(TMain->PowerCount == 1500)
  2772  0129  0A5D               	incf	_TMain,w
  2773  012A  0086               	movwf	6
  2774  012B  0187               	clrf	7
  2775  012C  3F40               	moviw [0]fsr1
  2776  012D  3ADC               	xorlw	220
  2777  012E  1D03               	skipz
  2778  012F  2932               	goto	u2995
  2779  0130  3F41               	moviw [1]fsr1
  2780  0131  3A05               	xorlw	5
  2781  0132                     u2995:	
  2782  0132  1D03               	skipz
  2783  0133  0008               	return
  2784                           
  2785                           ;myMain.c: 49: {
  2786                           ;myMain.c: 50: TMain->PowerCount=0;
  2787  0134  0A5D               	incf	_TMain,w
  2788  0135  0086               	movwf	6
  2789  0136  0187               	clrf	7
  2790  0137  3000               	movlw	0
  2791  0138  3FC0               	movwi [0]fsr1
  2792  0139  3FC1               	movwi [1]fsr1
  2793                           
  2794                           ;myMain.c: 51: TMain->PowerON=1;
  2795  013A  085D               	movf	_TMain,w
  2796  013B  0086               	movwf	6
  2797  013C  0187               	clrf	7
  2798  013D  1401               	bsf	1,0
  2799                           
  2800                           ;myMain.c: 54: setRF_Enable(1,1);
  2801  013E  01D6               	clrf	setRF_Enable@command
  2802  013F  0AD6               	incf	setRF_Enable@command,f
  2803  0140  3001               	movlw	1
  2804  0141  3183  2361         	fcall	_setRF_Enable
  2805                           
  2806                           ;myMain.c: 56: }
  2807                           ;myMain.c: 57: }
  2808  0143  0008               	return
  2809  0144                     l3045:	
  2810                           
  2811                           ;myMain.c: 58: else
  2812                           ;myMain.c: 59: {
  2813                           ;myMain.c: 60: TMain->Count1++;
  2814  0144  0020               	movlb	0	; select bank0
  2815  0145  085D               	movf	_TMain,w
  2816  0146  3E05               	addlw	5
  2817  0147  0086               	movwf	6
  2818  0148  0187               	clrf	7
  2819  0149  3001               	movlw	1
  2820  014A  0781               	addwf	1,f
  2821  014B  3141               	addfsr 1,1
  2822  014C  1803               	skipnc
  2823  014D  0A81               	incf	1,f
  2824                           
  2825                           ;myMain.c: 61: if(TMain->Count1 == 1000)
  2826  014E  085D               	movf	_TMain,w
  2827  014F  3E05               	addlw	5
  2828  0150  0086               	movwf	6
  2829  0151  0187               	clrf	7
  2830  0152  3F40               	moviw [0]fsr1
  2831  0153  3AE8               	xorlw	232
  2832  0154  1D03               	skipz
  2833  0155  2958               	goto	u3005
  2834  0156  3F41               	moviw [1]fsr1
  2835  0157  3A03               	xorlw	3
  2836  0158                     u3005:	
  2837  0158  1D03               	skipz
  2838  0159  0008               	return
  2839                           
  2840                           ;myMain.c: 62: {
  2841                           ;myMain.c: 63: TMain->Count1=0;
  2842  015A  085D               	movf	_TMain,w
  2843  015B  3E05               	addlw	5
  2844  015C  0086               	movwf	6
  2845  015D  0187               	clrf	7
  2846  015E  3000               	movlw	0
  2847  015F  3FC0               	movwi [0]fsr1
  2848  0160  3FC1               	movwi [1]fsr1
  2849                           
  2850                           ;myMain.c: 64: RA0=~RA0;
  2851  0161  3001               	movlw	1
  2852  0162  068C               	xorwf	12,f
  2853                           
  2854                           ;myMain.c: 82: }
  2855                           ;myMain.c: 84: if(TMain->Test)
  2856                           
  2857                           ;myMain.c: 79: {
  2858  0163  085D               	movf	_TMain,w
  2859  0164  3E0C               	addlw	12
  2860  0165  0086               	movwf	6
  2861  0166  0187               	clrf	7
  2862  0167  0801               	movf	1,w
  2863  0168  3A00               	xorlw	0
  2864  0169  1903               	skipnz
  2865  016A  0008               	return
  2866                           
  2867                           ;myMain.c: 85: {
  2868                           ;myMain.c: 86: ;;
  2869                           ;myMain.c: 87: I2C->Count++;
  2870  016B  3001               	movlw	1
  2871  016C  00D8               	movwf	??_MainT
  2872  016D  0878               	movf	_I2C,w
  2873  016E  3E40               	addlw	64
  2874  016F  0086               	movwf	6
  2875  0170  3001               	movlw	1	; select bank2/3
  2876  0171  0087               	movwf	7
  2877  0172  0858               	movf	??_MainT,w
  2878  0173  0781               	addwf	1,f
  2879                           
  2880                           ;myMain.c: 88: if(I2C->Count==32)
  2881  0174  0878               	movf	_I2C,w
  2882  0175  3E40               	addlw	64
  2883  0176  0086               	movwf	6
  2884  0177  3001               	movlw	1	; select bank2/3
  2885  0178  0087               	movwf	7
  2886  0179  0801               	movf	1,w
  2887  017A  3A20               	xorlw	32
  2888  017B  1D03               	skipz
  2889  017C  0008               	return
  2890                           
  2891                           ;myMain.c: 89: {
  2892                           ;myMain.c: 90: I2C->Count=0;
  2893  017D  0878               	movf	_I2C,w
  2894  017E  3E40               	addlw	64
  2895  017F  0086               	movwf	6
  2896  0180  3001               	movlw	1	; select bank2/3
  2897  0181  0087               	movwf	7
  2898  0182  0181               	clrf	1
  2899  0183  0008               	return
  2900  0184                     __end_of_MainT:	
  2901                           
  2902                           	psect	text18
  2903  0361                     __ptext18:	
  2904 ;; *************** function _setRF_Enable *****************
  2905 ;; Defined at:
  2906 ;;		line 178 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  rf              1    wreg     unsigned char 
  2909 ;;  command         1    2[BANK0 ] unsigned char 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  rf              1    3[BANK0 ] unsigned char 
  2912 ;; Return value:  Size  Location     Type
  2913 ;;		None               void
  2914 ;; Registers used:
  2915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2921 ;;      Params:         0       1       0       0       0       0       0       0
  2922 ;;      Locals:         0       1       0       0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0       0       0       0
  2924 ;;      Totals:         0       2       0       0       0       0       0       0
  2925 ;;Total ram usage:        2 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    5
  2928 ;; This function calls:
  2929 ;;		_RfPointSelect
  2930 ;;		_setINT_GO
  2931 ;; This function is called by:
  2932 ;;		_MainT
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           
  2937                           ;psect for function _setRF_Enable
  2938  0361                     _setRF_Enable:	
  2939                           
  2940                           ;incstack = 0
  2941                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2942                           ;setRF_Enable@rf stored from wreg
  2943  0361  0020               	movlb	0	; select bank0
  2944  0362  00D7               	movwf	setRF_Enable@rf
  2945                           
  2946                           ;RF_Control_B1.c: 180: RfPointSelect(rf);
  2947  0363  0857               	movf	setRF_Enable@rf,w
  2948  0364  3185  25A7  3183   	fcall	_RfPointSelect
  2949                           
  2950                           ;RF_Control_B1.c: 181: RF->Enable=command;
  2951  0367  0876               	movf	_RF,w
  2952  0368  0086               	movwf	6
  2953  0369  0187               	clrf	7
  2954  036A  0020               	movlb	0	; select bank0
  2955  036B  0856               	movf	setRF_Enable@command,w
  2956  036C  1001               	bcf	1,0
  2957  036D  1D03               	skipz
  2958  036E  1401               	bsf	1,0
  2959                           
  2960                           ;RF_Control_B1.c: 182: RF->Learn=0;
  2961  036F  0876               	movf	_RF,w
  2962  0370  0086               	movwf	6
  2963  0371  0187               	clrf	7
  2964  0372  1301               	bcf	1,6
  2965                           
  2966                           ;RF_Control_B1.c: 183: RF->TransceiveGO=0;
  2967  0373  0876               	movf	_RF,w
  2968  0374  0086               	movwf	6
  2969  0375  0187               	clrf	7
  2970  0376  1101               	bcf	1,2
  2971                           
  2972                           ;RF_Control_B1.c: 184: RF->RxStatus=0;
  2973  0377  0876               	movf	_RF,w
  2974  0378  0086               	movwf	6
  2975  0379  0187               	clrf	7
  2976  037A  1181               	bcf	1,3
  2977                           
  2978                           ;RF_Control_B1.c: 185: RF->ReceiveGO=0;
  2979  037B  0876               	movf	_RF,w
  2980  037C  0086               	movwf	6
  2981  037D  0187               	clrf	7
  2982  037E  1081               	bcf	1,1
  2983                           
  2984                           ;RF_Control_B1.c: 186: RF->DebounceTime=0;
  2985  037F  0A76               	incf	_RF,w
  2986  0380  0086               	movwf	6
  2987  0381  0187               	clrf	7
  2988  0382  0181               	clrf	1
  2989                           
  2990                           ;RF_Control_B1.c: 187: RF->Debounce=0;
  2991  0383  0876               	movf	_RF,w
  2992  0384  0086               	movwf	6
  2993  0385  0187               	clrf	7
  2994  0386  1281               	bcf	1,5
  2995                           
  2996                           ;RF_Control_B1.c: 188: setINT_GO(0);
  2997  0387  3000               	movlw	0
  2998  0388  3185  25BC         	fcall	_setINT_GO
  2999  038A  0008               	return
  3000  038B                     __end_of_setRF_Enable:	
  3001                           
  3002                           	psect	text19
  3003  05BC                     __ptext19:	
  3004 ;; *************** function _setINT_GO *****************
  3005 ;; Defined at:
  3006 ;;		line 166 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  command         1    wreg     unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  command         1    0[BANK0 ] unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;		None               void
  3013 ;; Registers used:
  3014 ;;		wreg
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3020 ;;      Params:         0       0       0       0       0       0       0       0
  3021 ;;      Locals:         0       1       0       0       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0       0
  3023 ;;      Totals:         0       1       0       0       0       0       0       0
  3024 ;;Total ram usage:        1 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    4
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_setRF_Main
  3031 ;;		_setRF_Enable
  3032 ;;		_RF_RxDisable
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           
  3037                           ;psect for function _setINT_GO
  3038  05BC                     _setINT_GO:	
  3039                           
  3040                           ;incstack = 0
  3041                           ; Regs used in _setINT_GO: [wreg]
  3042                           ;setINT_GO@command stored from wreg
  3043  05BC  0020               	movlb	0	; select bank0
  3044  05BD  00D4               	movwf	setINT_GO@command
  3045                           
  3046                           ;MCU_16f1516_B1.c: 168: INTF=0;
  3047  05BE  108B               	bcf	11,1	;volatile
  3048                           
  3049                           ;MCU_16f1516_B1.c: 169: INTE=command;
  3050  05BF  1C54               	btfss	setINT_GO@command,0
  3051  05C0  2DC3               	goto	u2480
  3052  05C1  160B               	bsf	11,4	;volatile
  3053  05C2  0008               	return
  3054  05C3                     u2480:	
  3055  05C3  120B               	bcf	11,4	;volatile
  3056  05C4  0008               	return
  3057  05C5                     __end_of_setINT_GO:	
  3058                           
  3059                           	psect	text20
  3060  05A7                     __ptext20:	
  3061 ;; *************** function _RfPointSelect *****************
  3062 ;; Defined at:
  3063 ;;		line 7 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  rf              1    wreg     unsigned char 
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  rf              1    1[BANK0 ] unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;		None               void
  3070 ;; Registers used:
  3071 ;;		wreg
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3077 ;;      Params:         0       0       0       0       0       0       0       0
  3078 ;;      Locals:         0       1       0       0       0       0       0       0
  3079 ;;      Temps:          0       1       0       0       0       0       0       0
  3080 ;;      Totals:         0       2       0       0       0       0       0       0
  3081 ;;Total ram usage:        2 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:    4
  3084 ;; This function calls:
  3085 ;;		Nothing
  3086 ;; This function is called by:
  3087 ;;		_setRF_RxStatus
  3088 ;;		_setRF_Main
  3089 ;;		_setRF_Enable
  3090 ;;		_RF_RxDisable
  3091 ;;		_setRF_Learn
  3092 ;;		_setTxData
  3093 ;;		_getRxData
  3094 ;;		_setLog_Code
  3095 ;;		_setControl_Lights_Table
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           
  3100                           ;psect for function _RfPointSelect
  3101  05A7                     _RfPointSelect:	
  3102                           
  3103                           ;incstack = 0
  3104                           ; Regs used in _RfPointSelect: [wreg]
  3105                           ;RfPointSelect@rf stored from wreg
  3106  05A7  0020               	movlb	0	; select bank0
  3107  05A8  00D5               	movwf	RfPointSelect@rf
  3108                           
  3109                           ;RF_Control_B1.c: 10: if(rf == 1)
  3110  05A9  0855               	movf	RfPointSelect@rf,w
  3111  05AA  3A01               	xorlw	1
  3112  05AB  1D03               	skipz
  3113  05AC  0008               	return
  3114                           
  3115                           ;RF_Control_B1.c: 11: {
  3116                           ;RF_Control_B1.c: 12: RF=&RF1;
  3117  05AD  3052               	movlw	_RF1& (0+255)
  3118  05AE  00D4               	movwf	??_RfPointSelect
  3119  05AF  0854               	movf	??_RfPointSelect,w
  3120  05B0  00F6               	movwf	_RF
  3121  05B1  0008               	return
  3122  05B2                     __end_of_RfPointSelect:	
  3123                           
  3124                           	psect	text21
  3125  02F8                     __ptext21:	
  3126 ;; *************** function _I2C_Main *****************
  3127 ;; Defined at:
  3128 ;;		line 275 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  i               1    0        unsigned char 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;		None               void
  3135 ;; Registers used:
  3136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3142 ;;      Params:         0       0       0       0       0       0       0       0
  3143 ;;      Locals:         0       0       0       0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0       0
  3145 ;;      Totals:         0       0       0       0       0       0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    5
  3149 ;; This function calls:
  3150 ;;		_I2C_SetData
  3151 ;;		_I2C_Slave_Mode
  3152 ;; This function is called by:
  3153 ;;		_main
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           
  3158                           ;psect for function _I2C_Main
  3159  02F8                     _I2C_Main:	
  3160                           
  3161                           ;MCU_16f1516_B1.c: 277: char i;
  3162                           ;MCU_16f1516_B1.c: 279: if(I2C->SlaveGO)
  3163                           
  3164                           ;incstack = 0
  3165                           ; Regs used in _I2C_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3166  02F8  0878               	movf	_I2C,w
  3167  02F9  3E42               	addlw	66
  3168  02FA  0086               	movwf	6
  3169  02FB  3001               	movlw	1	; select bank2/3
  3170  02FC  0087               	movwf	7
  3171  02FD  1C01               	btfss	1,0
  3172  02FE  0008               	return
  3173                           
  3174                           ;MCU_16f1516_B1.c: 280: {
  3175                           ;MCU_16f1516_B1.c: 281: I2C->SlaveGO=0;
  3176  02FF  0878               	movf	_I2C,w
  3177  0300  3E42               	addlw	66
  3178  0301  0086               	movwf	6
  3179  0302  3001               	movlw	1	; select bank2/3
  3180  0303  0087               	movwf	7
  3181  0304  1001               	bcf	1,0
  3182                           
  3183                           ;MCU_16f1516_B1.c: 282: I2C_Slave_Mode();
  3184  0305  3181  2184  3182   	fcall	_I2C_Slave_Mode
  3185                           
  3186                           ;MCU_16f1516_B1.c: 283: SSPIE=1;
  3187  0308  0021               	movlb	1	; select bank1
  3188  0309  1591               	bsf	17,3	;volatile
  3189                           
  3190                           ;MCU_16f1516_B1.c: 285: if(I2C->SlaveTxGO)
  3191  030A  0878               	movf	_I2C,w
  3192  030B  3E42               	addlw	66
  3193  030C  0086               	movwf	6
  3194  030D  3001               	movlw	1	; select bank2/3
  3195  030E  0087               	movwf	7
  3196  030F  1D01               	btfss	1,2
  3197  0310  2B1F               	goto	l418
  3198                           
  3199                           ;MCU_16f1516_B1.c: 286: {
  3200                           ;MCU_16f1516_B1.c: 287: I2C->SlaveTxGO=0;
  3201  0311  0878               	movf	_I2C,w
  3202  0312  3E42               	addlw	66
  3203  0313  0086               	movwf	6
  3204  0314  3001               	movlw	1	; select bank2/3
  3205  0315  0087               	movwf	7
  3206  0316  1101               	bcf	1,2
  3207                           
  3208                           ;MCU_16f1516_B1.c: 288: RC0=0;
  3209  0317  0020               	movlb	0	; select bank0
  3210  0318  100E               	bcf	14,0	;volatile
  3211                           
  3212                           ;MCU_16f1516_B1.c: 289: I2C->SS=0;
  3213  0319  0878               	movf	_I2C,w
  3214  031A  3E42               	addlw	66
  3215  031B  0086               	movwf	6
  3216  031C  3001               	movlw	1	; select bank2/3
  3217  031D  0087               	movwf	7
  3218  031E  1281               	bcf	1,5
  3219  031F                     l418:	
  3220                           
  3221                           ;MCU_16f1516_B1.c: 290: }
  3222                           ;MCU_16f1516_B1.c: 291: if(I2C->SlaveRxGO)
  3223  031F  0878               	movf	_I2C,w
  3224  0320  3E42               	addlw	66
  3225  0321  0086               	movwf	6
  3226  0322  3001               	movlw	1	; select bank2/3
  3227  0323  0087               	movwf	7
  3228  0324  1C81               	btfss	1,1
  3229  0325  2B2F               	goto	l3009
  3230                           
  3231                           ;MCU_16f1516_B1.c: 292: {
  3232                           ;MCU_16f1516_B1.c: 293: I2C->SlaveRxGO=0;
  3233  0326  0878               	movf	_I2C,w
  3234  0327  3E42               	addlw	66
  3235  0328  0086               	movwf	6
  3236  0329  3001               	movlw	1	; select bank2/3
  3237  032A  0087               	movwf	7
  3238  032B  1081               	bcf	1,1
  3239                           
  3240                           ;MCU_16f1516_B1.c: 294: I2C_SetData(0);
  3241  032C  3000               	movlw	0
  3242  032D  3180  20AE         	fcall	_I2C_SetData
  3243  032F                     l3009:	
  3244                           
  3245                           ;MCU_16f1516_B1.c: 295: }
  3246                           ;MCU_16f1516_B1.c: 296: RA1=~RA1;
  3247  032F  3002               	movlw	2
  3248  0330  0020               	movlb	0	; select bank0
  3249  0331  068C               	xorwf	12,f
  3250  0332  0008               	return
  3251  0333                     __end_of_I2C_Main:	
  3252                           
  3253                           	psect	text22
  3254  0184                     __ptext22:	
  3255 ;; *************** function _I2C_Slave_Mode *****************
  3256 ;; Defined at:
  3257 ;;		line 446 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;		None
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  i               1    2[BANK0 ] unsigned char 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;		None               void
  3264 ;; Registers used:
  3265 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3271 ;;      Params:         0       0       0       0       0       0       0       0
  3272 ;;      Locals:         0       1       0       0       0       0       0       0
  3273 ;;      Temps:          0       2       0       0       0       0       0       0
  3274 ;;      Totals:         0       3       0       0       0       0       0       0
  3275 ;;Total ram usage:        3 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    4
  3278 ;; This function calls:
  3279 ;;		Nothing
  3280 ;; This function is called by:
  3281 ;;		_I2C_Main
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           
  3286                           ;psect for function _I2C_Slave_Mode
  3287  0184                     _I2C_Slave_Mode:	
  3288                           
  3289                           ;MCU_16f1516_B1.c: 448: char i;
  3290                           ;MCU_16f1516_B1.c: 449: SSPIF=0;
  3291                           
  3292                           ;incstack = 0
  3293                           ; Regs used in _I2C_Slave_Mode: [wreg+fsr1l+fsr1h+status,2+status,0]
  3294  0184  0020               	movlb	0	; select bank0
  3295  0185  1191               	bcf	17,3	;volatile
  3296                           
  3297                           ;MCU_16f1516_B1.c: 450: I2C->Address=SSPBUF;
  3298  0186  0024               	movlb	4	; select bank4
  3299  0187  0811               	movf	17,w	;volatile
  3300  0188  0020               	movlb	0	; select bank0
  3301  0189  00D4               	movwf	??_I2C_Slave_Mode
  3302  018A  0878               	movf	_I2C,w
  3303  018B  3E41               	addlw	65
  3304  018C  0086               	movwf	6
  3305  018D  3001               	movlw	1	; select bank2/3
  3306  018E  0087               	movwf	7
  3307  018F  0854               	movf	??_I2C_Slave_Mode,w
  3308  0190  0081               	movwf	1
  3309                           
  3310                           ;MCU_16f1516_B1.c: 452: if(R_nW)
  3311  0191  0024               	movlb	4	; select bank4
  3312  0192  1D14               	btfss	20,2	;volatile
  3313  0193  29C2               	goto	l515
  3314                           
  3315                           ;MCU_16f1516_B1.c: 453: {
  3316                           ;MCU_16f1516_B1.c: 454: SSPOV=0;
  3317  0194  1315               	bcf	21,6	;volatile
  3318                           
  3319                           ;MCU_16f1516_B1.c: 455: for(i=0;i<32;i++)
  3320  0195  0020               	movlb	0	; select bank0
  3321  0196  01D6               	clrf	I2C_Slave_Mode@i
  3322  0197  3020               	movlw	32
  3323  0198  0256               	subwf	I2C_Slave_Mode@i,w
  3324  0199  1803               	btfsc	3,0
  3325  019A  29B7               	goto	l517
  3326  019B                     l2877:	
  3327                           
  3328                           ;MCU_16f1516_B1.c: 456: {
  3329                           ;MCU_16f1516_B1.c: 457: SSPBUF=I2C->BufferWriter[i];
  3330  019B  0856               	movf	I2C_Slave_Mode@i,w
  3331  019C  3E20               	addlw	32
  3332  019D  0778               	addwf	_I2C,w
  3333  019E  00D4               	movwf	??_I2C_Slave_Mode
  3334  019F  0854               	movf	??_I2C_Slave_Mode,w
  3335  01A0  0086               	movwf	6
  3336  01A1  3001               	movlw	1	; select bank2/3
  3337  01A2  0087               	movwf	7
  3338  01A3  0801               	movf	1,w
  3339  01A4  0024               	movlb	4	; select bank4
  3340  01A5  0091               	movwf	17	;volatile
  3341                           
  3342                           ;MCU_16f1516_B1.c: 459: CKP=1;
  3343  01A6  1615               	bsf	21,4	;volatile
  3344  01A7                     l518:	
  3345                           ;MCU_16f1516_B1.c: 460: while(!SSPIF);
  3346                           
  3347  01A7  0020               	movlb	0	; select bank0
  3348  01A8  1D91               	btfss	17,3	;volatile
  3349  01A9  29A7               	goto	l518
  3350                           
  3351                           ;MCU_16f1516_B1.c: 461: SSPIF=0;
  3352  01AA  1191               	bcf	17,3	;volatile
  3353  01AB                     l521:	
  3354                           ;MCU_16f1516_B1.c: 462: while(ACKSTAT);
  3355                           
  3356  01AB  0024               	movlb	4	; select bank4
  3357  01AC  1B16               	btfsc	22,6	;volatile
  3358  01AD  29AB               	goto	l521
  3359  01AE  3001               	movlw	1
  3360  01AF  0020               	movlb	0	; select bank0
  3361  01B0  00D4               	movwf	??_I2C_Slave_Mode
  3362  01B1  0854               	movf	??_I2C_Slave_Mode,w
  3363  01B2  07D6               	addwf	I2C_Slave_Mode@i,f
  3364  01B3  3020               	movlw	32
  3365  01B4  0256               	subwf	I2C_Slave_Mode@i,w
  3366  01B5  1C03               	skipc
  3367  01B6  299B               	goto	l2877
  3368  01B7                     l517:	
  3369                           
  3370                           ;MCU_16f1516_B1.c: 463: }
  3371                           ;MCU_16f1516_B1.c: 464: CKP=1;
  3372  01B7  0024               	movlb	4	; select bank4
  3373  01B8  1615               	bsf	21,4	;volatile
  3374                           
  3375                           ;MCU_16f1516_B1.c: 466: I2C->SlaveTxGO=1;
  3376  01B9  0878               	movf	_I2C,w
  3377  01BA  3E42               	addlw	66
  3378  01BB  0086               	movwf	6
  3379  01BC  3001               	movlw	1	; select bank2/3
  3380  01BD  0087               	movwf	7
  3381  01BE  1501               	bsf	1,2
  3382                           
  3383                           ;MCU_16f1516_B1.c: 467: RA1=1;
  3384  01BF  0020               	movlb	0	; select bank0
  3385  01C0  148C               	bsf	12,1	;volatile
  3386                           
  3387                           ;MCU_16f1516_B1.c: 468: }
  3388  01C1  0008               	return
  3389  01C2                     l515:	
  3390                           
  3391                           ;MCU_16f1516_B1.c: 469: else
  3392                           ;MCU_16f1516_B1.c: 470: {
  3393                           ;MCU_16f1516_B1.c: 472: CKP=1;
  3394  01C2  1615               	bsf	21,4	;volatile
  3395                           
  3396                           ;MCU_16f1516_B1.c: 473: for(i=0;i<32;i++)
  3397  01C3  0020               	movlb	0	; select bank0
  3398  01C4  01D6               	clrf	I2C_Slave_Mode@i
  3399  01C5  3020               	movlw	32
  3400  01C6  0256               	subwf	I2C_Slave_Mode@i,w
  3401  01C7  1803               	btfsc	3,0
  3402  01C8  29E4               	goto	l2903
  3403  01C9                     l527:	
  3404                           ;MCU_16f1516_B1.c: 474: {
  3405                           ;MCU_16f1516_B1.c: 475: while(!SSPIF);
  3406                           
  3407  01C9  1D91               	btfss	17,3	;volatile
  3408  01CA  29C9               	goto	l527
  3409                           
  3410                           ;MCU_16f1516_B1.c: 476: SSPIF=0;
  3411  01CB  1191               	bcf	17,3	;volatile
  3412                           
  3413                           ;MCU_16f1516_B1.c: 477: I2C->BufferReader[i]=SSPBUF;
  3414  01CC  0024               	movlb	4	; select bank4
  3415  01CD  0811               	movf	17,w	;volatile
  3416  01CE  0020               	movlb	0	; select bank0
  3417  01CF  00D4               	movwf	??_I2C_Slave_Mode
  3418  01D0  0856               	movf	I2C_Slave_Mode@i,w
  3419  01D1  0778               	addwf	_I2C,w
  3420  01D2  00D5               	movwf	??_I2C_Slave_Mode+1
  3421  01D3  0855               	movf	??_I2C_Slave_Mode+1,w
  3422  01D4  0086               	movwf	6
  3423  01D5  3001               	movlw	1	; select bank2/3
  3424  01D6  0087               	movwf	7
  3425  01D7  0854               	movf	??_I2C_Slave_Mode,w
  3426  01D8  0081               	movwf	1
  3427                           
  3428                           ;MCU_16f1516_B1.c: 479: CKP=1;
  3429  01D9  0024               	movlb	4	; select bank4
  3430  01DA  1615               	bsf	21,4	;volatile
  3431  01DB  3001               	movlw	1
  3432  01DC  0020               	movlb	0	; select bank0
  3433  01DD  00D4               	movwf	??_I2C_Slave_Mode
  3434  01DE  0854               	movf	??_I2C_Slave_Mode,w
  3435  01DF  07D6               	addwf	I2C_Slave_Mode@i,f
  3436  01E0  3020               	movlw	32
  3437  01E1  0256               	subwf	I2C_Slave_Mode@i,w
  3438  01E2  1C03               	skipc
  3439  01E3  29C9               	goto	l527
  3440  01E4                     l2903:	
  3441                           
  3442                           ;MCU_16f1516_B1.c: 480: }
  3443                           ;MCU_16f1516_B1.c: 483: I2C->SlaveRxGO=1;
  3444  01E4  0878               	movf	_I2C,w
  3445  01E5  3E42               	addlw	66
  3446  01E6  0086               	movwf	6
  3447  01E7  3001               	movlw	1	; select bank2/3
  3448  01E8  0087               	movwf	7
  3449  01E9  1481               	bsf	1,1
  3450  01EA  0008               	return
  3451  01EB                     __end_of_I2C_Slave_Mode:	
  3452                           
  3453                           	psect	text23
  3454  00AE                     __ptext23:	
  3455 ;; *************** function _I2C_SetData *****************
  3456 ;; Defined at:
  3457 ;;		line 342 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  command         1    wreg     unsigned char 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  command         1    2[BANK0 ] unsigned char 
  3462 ;;  i               1    3[BANK0 ] unsigned char 
  3463 ;; Return value:  Size  Location     Type
  3464 ;;		None               void
  3465 ;; Registers used:
  3466 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3472 ;;      Params:         0       0       0       0       0       0       0       0
  3473 ;;      Locals:         0       2       0       0       0       0       0       0
  3474 ;;      Temps:          0       2       0       0       0       0       0       0
  3475 ;;      Totals:         0       4       0       0       0       0       0       0
  3476 ;;Total ram usage:        4 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:    4
  3479 ;; This function calls:
  3480 ;;		Nothing
  3481 ;; This function is called by:
  3482 ;;		_I2C_Main
  3483 ;;		_setRF_Main
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           
  3488                           ;psect for function _I2C_SetData
  3489  00AE                     _I2C_SetData:	
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _I2C_SetData: [wreg+fsr1l+fsr1h+status,2+status,0]
  3493                           ;I2C_SetData@command stored from wreg
  3494  00AE  0020               	movlb	0	; select bank0
  3495  00AF  00D6               	movwf	I2C_SetData@command
  3496                           
  3497                           ;MCU_16f1516_B1.c: 345: char i;
  3498                           ;MCU_16f1516_B1.c: 346: if(command)
  3499  00B0  0856               	movf	I2C_SetData@command,w
  3500  00B1  1903               	btfsc	3,2
  3501  00B2  28FA               	goto	l2749
  3502                           
  3503                           ;MCU_16f1516_B1.c: 347: {
  3504                           ;MCU_16f1516_B1.c: 348: if(!I2C->SS)
  3505  00B3  0878               	movf	_I2C,w
  3506  00B4  3E42               	addlw	66
  3507  00B5  0086               	movwf	6
  3508  00B6  3001               	movlw	1	; select bank2/3
  3509  00B7  0087               	movwf	7
  3510  00B8  1A81               	btfsc	1,5
  3511  00B9  0008               	return
  3512                           
  3513                           ;MCU_16f1516_B1.c: 349: {
  3514                           ;MCU_16f1516_B1.c: 350: I2C->SS=1;
  3515  00BA  0878               	movf	_I2C,w
  3516  00BB  3E42               	addlw	66
  3517  00BC  0086               	movwf	6
  3518  00BD  3001               	movlw	1	; select bank2/3
  3519  00BE  0087               	movwf	7
  3520  00BF  1681               	bsf	1,5
  3521                           
  3522                           ;MCU_16f1516_B1.c: 351: for(i=0 ;i< 21 ;i++)
  3523  00C0  01D7               	clrf	I2C_SetData@i
  3524  00C1  3015               	movlw	21
  3525  00C2  0257               	subwf	I2C_SetData@i,w
  3526  00C3  1803               	btfsc	3,0
  3527  00C4  28DD               	goto	l2745
  3528  00C5                     l2739:	
  3529                           
  3530                           ;MCU_16f1516_B1.c: 352: {
  3531                           ;MCU_16f1516_B1.c: 353: I2C->BufferWriter[i]=RF_Data[i];
  3532  00C5  0857               	movf	I2C_SetData@i,w
  3533  00C6  3E20               	addlw	_RF_Data& (0+255)
  3534  00C7  0086               	movwf	6
  3535  00C8  0187               	clrf	7
  3536  00C9  0801               	movf	1,w
  3537  00CA  00D4               	movwf	??_I2C_SetData
  3538  00CB  0857               	movf	I2C_SetData@i,w
  3539  00CC  3E20               	addlw	32
  3540  00CD  0778               	addwf	_I2C,w
  3541  00CE  00D5               	movwf	??_I2C_SetData+1
  3542  00CF  0855               	movf	??_I2C_SetData+1,w
  3543  00D0  0086               	movwf	6
  3544  00D1  3001               	movlw	1	; select bank2/3
  3545  00D2  0087               	movwf	7
  3546  00D3  0854               	movf	??_I2C_SetData,w
  3547  00D4  0081               	movwf	1
  3548  00D5  3001               	movlw	1
  3549  00D6  00D4               	movwf	??_I2C_SetData
  3550  00D7  0854               	movf	??_I2C_SetData,w
  3551  00D8  07D7               	addwf	I2C_SetData@i,f
  3552  00D9  3015               	movlw	21
  3553  00DA  0257               	subwf	I2C_SetData@i,w
  3554  00DB  1C03               	skipc
  3555  00DC  28C5               	goto	l2739
  3556  00DD                     l2745:	
  3557                           
  3558                           ;MCU_16f1516_B1.c: 354: }
  3559                           ;MCU_16f1516_B1.c: 355: I2C->BufferWriter[21]=Tx_Length;
  3560  00DD  083C               	movf	_Tx_Length,w
  3561  00DE  00D4               	movwf	??_I2C_SetData
  3562  00DF  0878               	movf	_I2C,w
  3563  00E0  3E35               	addlw	53
  3564  00E1  0086               	movwf	6
  3565  00E2  3001               	movlw	1	; select bank2/3
  3566  00E3  0087               	movwf	7
  3567  00E4  0854               	movf	??_I2C_SetData,w
  3568  00E5  0081               	movwf	1
  3569                           
  3570                           ;MCU_16f1516_B1.c: 356: I2C->BufferWriter[22]=RSSI;
  3571  00E6  0838               	movf	_RSSI,w
  3572  00E7  00D4               	movwf	??_I2C_SetData
  3573  00E8  0878               	movf	_I2C,w
  3574  00E9  3E36               	addlw	54
  3575  00EA  0086               	movwf	6
  3576  00EB  3001               	movlw	1	; select bank2/3
  3577  00EC  0087               	movwf	7
  3578  00ED  0854               	movf	??_I2C_SetData,w
  3579  00EE  0081               	movwf	1
  3580                           
  3581                           ;MCU_16f1516_B1.c: 357: I2C->BufferWriter[23]=CRC;
  3582  00EF  0837               	movf	_CRC,w
  3583  00F0  00D4               	movwf	??_I2C_SetData
  3584  00F1  0878               	movf	_I2C,w
  3585  00F2  3E37               	addlw	55
  3586  00F3  0086               	movwf	6
  3587  00F4  3001               	movlw	1	; select bank2/3
  3588  00F5  0087               	movwf	7
  3589  00F6  0854               	movf	??_I2C_SetData,w
  3590  00F7  0081               	movwf	1
  3591                           
  3592                           ;MCU_16f1516_B1.c: 358: RC0=1;
  3593  00F8  140E               	bsf	14,0	;volatile
  3594                           
  3595                           ;MCU_16f1516_B1.c: 359: }
  3596                           ;MCU_16f1516_B1.c: 360: }
  3597  00F9  0008               	return
  3598  00FA                     l2749:	
  3599                           
  3600                           ;MCU_16f1516_B1.c: 361: else
  3601                           ;MCU_16f1516_B1.c: 362: {
  3602                           ;MCU_16f1516_B1.c: 363: for(i=0;i<21;i++)
  3603  00FA  01D7               	clrf	I2C_SetData@i
  3604  00FB  3015               	movlw	21
  3605  00FC  0257               	subwf	I2C_SetData@i,w
  3606  00FD  1803               	btfsc	3,0
  3607  00FE  2916               	goto	l2761
  3608  00FF                     l2755:	
  3609                           
  3610                           ;MCU_16f1516_B1.c: 364: {
  3611                           ;MCU_16f1516_B1.c: 365: RF_Data[i]=I2C->BufferReader[i];
  3612  00FF  0857               	movf	I2C_SetData@i,w
  3613  0100  0778               	addwf	_I2C,w
  3614  0101  00D4               	movwf	??_I2C_SetData
  3615  0102  0854               	movf	??_I2C_SetData,w
  3616  0103  0086               	movwf	6
  3617  0104  3001               	movlw	1	; select bank2/3
  3618  0105  0087               	movwf	7
  3619  0106  0801               	movf	1,w
  3620  0107  00D5               	movwf	??_I2C_SetData+1
  3621  0108  0857               	movf	I2C_SetData@i,w
  3622  0109  3E20               	addlw	_RF_Data& (0+255)
  3623  010A  0086               	movwf	6
  3624  010B  0187               	clrf	7
  3625  010C  0855               	movf	??_I2C_SetData+1,w
  3626  010D  0081               	movwf	1
  3627  010E  3001               	movlw	1
  3628  010F  00D4               	movwf	??_I2C_SetData
  3629  0110  0854               	movf	??_I2C_SetData,w
  3630  0111  07D7               	addwf	I2C_SetData@i,f
  3631  0112  3015               	movlw	21
  3632  0113  0257               	subwf	I2C_SetData@i,w
  3633  0114  1C03               	skipc
  3634  0115  28FF               	goto	l2755
  3635  0116                     l2761:	
  3636                           
  3637                           ;MCU_16f1516_B1.c: 366: }
  3638                           ;MCU_16f1516_B1.c: 368: RF->TransceiveGO=1;
  3639  0116  0876               	movf	_RF,w
  3640  0117  0086               	movwf	6
  3641  0118  0187               	clrf	7
  3642  0119  1501               	bsf	1,2
  3643  011A  0008               	return
  3644  011B                     __end_of_I2C_SetData:	
  3645                           
  3646                           	psect	text24
  3647  04FE                     __ptext24:	
  3648 ;; *************** function _CC2500_PowerOnInitial *****************
  3649 ;; Defined at:
  3650 ;;		line 97 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;		None               void
  3657 ;; Registers used:
  3658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3664 ;;      Params:         0       0       0       0       0       0       0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0       0
  3667 ;;      Totals:         0       0       0       0       0       0       0       0
  3668 ;;Total ram usage:        0 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    7
  3671 ;; This function calls:
  3672 ;;		_CC2500_ClearRXFIFO
  3673 ;;		_CC2500_ClearTXFIFO
  3674 ;;		_CC2500_FrequencyCabr
  3675 ;;		_CC2500_InitPATable
  3676 ;;		_CC2500_InitSetREG
  3677 ;;		_CC2500_PowerRST
  3678 ;;		_CC2500_SIDLEMode
  3679 ;; This function is called by:
  3680 ;;		_main
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           
  3685                           ;psect for function _CC2500_PowerOnInitial
  3686  04FE                     _CC2500_PowerOnInitial:	
  3687                           
  3688                           ;CC2500_B1.c: 99: CC2500_PowerRST();
  3689                           
  3690                           ;incstack = 0
  3691                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3692  04FE  3183  2333  3184   	fcall	_CC2500_PowerRST
  3693                           
  3694                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
  3695  0501  3183  238B  3184   	fcall	_CC2500_InitSetREG
  3696                           
  3697                           ;CC2500_B1.c: 101: CC2500_InitPATable();
  3698  0504  3184  2471  3184   	fcall	_CC2500_InitPATable
  3699                           
  3700                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
  3701  0507  3185  25E8  3184   	fcall	_CC2500_ClearTXFIFO
  3702                           
  3703                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
  3704  050A  3185  25EC  3184   	fcall	_CC2500_ClearRXFIFO
  3705                           
  3706                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
  3707  050D  3185  2583  3184   	fcall	_CC2500_FrequencyCabr
  3708                           
  3709                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
  3710  0510  3185  25E4         	fcall	_CC2500_SIDLEMode
  3711  0512  0008               	return
  3712  0513                     __end_of_CC2500_PowerOnInitial:	
  3713                           
  3714                           	psect	text25
  3715  05E4                     __ptext25:	
  3716 ;; *************** function _CC2500_SIDLEMode *****************
  3717 ;; Defined at:
  3718 ;;		line 183 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;		None
  3723 ;; Return value:  Size  Location     Type
  3724 ;;		None               void
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0, pclath, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3732 ;;      Params:         0       0       0       0       0       0       0       0
  3733 ;;      Locals:         0       0       0       0       0       0       0       0
  3734 ;;      Temps:          0       0       0       0       0       0       0       0
  3735 ;;      Totals:         0       0       0       0       0       0       0       0
  3736 ;;Total ram usage:        0 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    6
  3739 ;; This function calls:
  3740 ;;		_CC2500_WriteCommand
  3741 ;; This function is called by:
  3742 ;;		_CC2500_PowerOnInitial
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           
  3747                           ;psect for function _CC2500_SIDLEMode
  3748  05E4                     _CC2500_SIDLEMode:	
  3749                           
  3750                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
  3751                           
  3752                           ;incstack = 0
  3753                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
  3754  05E4  3036               	movlw	54
  3755  05E5  3185  2575         	fcall	_CC2500_WriteCommand
  3756  05E7  0008               	return
  3757  05E8                     __end_of_CC2500_SIDLEMode:	
  3758                           
  3759                           	psect	text26
  3760  0333                     __ptext26:	
  3761 ;; *************** function _CC2500_PowerRST *****************
  3762 ;; Defined at:
  3763 ;;		line 110 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;		None               void
  3770 ;; Registers used:
  3771 ;;		wreg, status,2, status,0, pclath, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3777 ;;      Params:         0       0       0       0       0       0       0       0
  3778 ;;      Locals:         0       0       0       0       0       0       0       0
  3779 ;;      Temps:          0       1       0       0       0       0       0       0
  3780 ;;      Totals:         0       1       0       0       0       0       0       0
  3781 ;;Total ram usage:        1 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    5
  3784 ;; This function calls:
  3785 ;;		_CC2500_WriteByte
  3786 ;;		_DelayTime_1us
  3787 ;; This function is called by:
  3788 ;;		_CC2500_PowerOnInitial
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           
  3793                           ;psect for function _CC2500_PowerRST
  3794  0333                     _CC2500_PowerRST:	
  3795                           
  3796                           ;CC2500_B1.c: 112: RB2=0;
  3797                           
  3798                           ;incstack = 0
  3799                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
  3800  0333  0020               	movlb	0	; select bank0
  3801  0334  110D               	bcf	13,2	;volatile
  3802                           
  3803                           ;CC2500_B1.c: 113: RB1=0;
  3804  0335  108D               	bcf	13,1	;volatile
  3805                           
  3806                           ;CC2500_B1.c: 114: RB5=1;
  3807  0336  168D               	bsf	13,5	;volatile
  3808                           
  3809                           ;CC2500_B1.c: 115: DelayTime_1us(10);
  3810  0337  300A               	movlw	10
  3811  0338  00D4               	movwf	DelayTime_1us@count
  3812  0339  3000               	movlw	0
  3813  033A  00D5               	movwf	DelayTime_1us@count+1
  3814  033B  3184  242B  3183   	fcall	_DelayTime_1us
  3815                           
  3816                           ;CC2500_B1.c: 116: RB5=0;
  3817  033E  0020               	movlb	0	; select bank0
  3818  033F  128D               	bcf	13,5	;volatile
  3819                           
  3820                           ;CC2500_B1.c: 117: DelayTime_1us(10);
  3821  0340  300A               	movlw	10
  3822  0341  00D4               	movwf	DelayTime_1us@count
  3823  0342  3000               	movlw	0
  3824  0343  00D5               	movwf	DelayTime_1us@count+1
  3825  0344  3184  242B  3183   	fcall	_DelayTime_1us
  3826                           
  3827                           ;CC2500_B1.c: 118: RB5=1;
  3828  0347  0020               	movlb	0	; select bank0
  3829  0348  168D               	bsf	13,5	;volatile
  3830                           
  3831                           ;CC2500_B1.c: 119: DelayTime_1us(40);
  3832  0349  3028               	movlw	40
  3833  034A  00D4               	movwf	DelayTime_1us@count
  3834  034B  3000               	movlw	0
  3835  034C  00D5               	movwf	DelayTime_1us@count+1
  3836  034D  3184  242B  3183   	fcall	_DelayTime_1us
  3837                           
  3838                           ;CC2500_B1.c: 120: RB5=0;
  3839  0350  0020               	movlb	0	; select bank0
  3840  0351  128D               	bcf	13,5	;volatile
  3841                           
  3842                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
  3843  0352  3030               	movlw	48
  3844  0353  00DA               	movwf	??_CC2500_PowerRST
  3845  0354  085A               	movf	??_CC2500_PowerRST,w
  3846  0355  00BA               	movwf	_SPI0Buffer
  3847  0356                     l136:	
  3848                           ;CC2500_B1.c: 122: while(RB3==1);
  3849                           
  3850  0356  198D               	btfsc	13,3	;volatile
  3851  0357  2B56               	goto	l136
  3852                           
  3853                           ;CC2500_B1.c: 123: CC2500_WriteByte();
  3854  0358  3185  2513  3183   	fcall	_CC2500_WriteByte
  3855  035B                     l139:	
  3856                           ;CC2500_B1.c: 124: while(RB3==1);
  3857                           
  3858  035B  0020               	movlb	0	; select bank0
  3859  035C  198D               	btfsc	13,3	;volatile
  3860  035D  2B5B               	goto	l139
  3861                           
  3862                           ;CC2500_B1.c: 125: RB1=0;
  3863  035E  108D               	bcf	13,1	;volatile
  3864                           
  3865                           ;CC2500_B1.c: 126: RB5=1;
  3866  035F  168D               	bsf	13,5	;volatile
  3867  0360  0008               	return
  3868  0361                     __end_of_CC2500_PowerRST:	
  3869                           
  3870                           	psect	text27
  3871  038B                     __ptext27:	
  3872 ;; *************** function _CC2500_InitSetREG *****************
  3873 ;; Defined at:
  3874 ;;		line 131 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  loop_c          1    8[BANK0 ] unsigned char 
  3879 ;;  temp2           1    7[BANK0 ] unsigned char 
  3880 ;;  temp1           1    6[BANK0 ] unsigned char 
  3881 ;; Return value:  Size  Location     Type
  3882 ;;		None               void
  3883 ;; Registers used:
  3884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3890 ;;      Params:         0       0       0       0       0       0       0       0
  3891 ;;      Locals:         0       3       0       0       0       0       0       0
  3892 ;;      Temps:          0       1       0       0       0       0       0       0
  3893 ;;      Totals:         0       4       0       0       0       0       0       0
  3894 ;;Total ram usage:        4 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    6
  3897 ;; This function calls:
  3898 ;;		_CC2500_WriteREG
  3899 ;; This function is called by:
  3900 ;;		_CC2500_PowerOnInitial
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           
  3905                           ;psect for function _CC2500_InitSetREG
  3906  038B                     _CC2500_InitSetREG:	
  3907                           
  3908                           ;CC2500_B1.c: 133: unsigned char loop_c;
  3909                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
  3910                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
  3911                           
  3912                           ;incstack = 0
  3913                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3914  038B  0020               	movlb	0	; select bank0
  3915  038C  01DC               	clrf	CC2500_InitSetREG@loop_c
  3916  038D                     L2:	
  3917  038D  302F               	movlw	47
  3918  038E  025C               	subwf	CC2500_InitSetREG@loop_c,w
  3919  038F  1803               	btfsc	3,0
  3920  0390  0008               	return
  3921                           
  3922                           ;CC2500_B1.c: 137: {
  3923                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
  3924  0391  085C               	movf	CC2500_InitSetREG@loop_c,w
  3925  0392  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  3926  0393  0084               	movwf	4
  3927  0394  3082               	movlw	high (_CC2500_registers_address| (0+32768))
  3928  0395  1803               	skipnc
  3929  0396  3E01               	addlw	1
  3930  0397  0085               	movwf	5
  3931  0398  0800               	movf	0,w	;code access
  3932  0399  00D9               	movwf	??_CC2500_InitSetREG
  3933  039A  0859               	movf	??_CC2500_InitSetREG,w
  3934  039B  00DA               	movwf	CC2500_InitSetREG@temp1
  3935                           
  3936                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
  3937  039C  085C               	movf	CC2500_InitSetREG@loop_c,w
  3938  039D  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  3939  039E  0084               	movwf	4
  3940  039F  3082               	movlw	high (_CC2500_rfSettings| (0+32768))
  3941  03A0  1803               	skipnc
  3942  03A1  3E01               	addlw	1
  3943  03A2  0085               	movwf	5
  3944  03A3  0800               	movf	0,w	;code access
  3945  03A4  00D9               	movwf	??_CC2500_InitSetREG
  3946  03A5  0859               	movf	??_CC2500_InitSetREG,w
  3947  03A6  00DB               	movwf	CC2500_InitSetREG@temp2
  3948                           
  3949                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
  3950  03A7  085B               	movf	CC2500_InitSetREG@temp2,w
  3951  03A8  00D9               	movwf	??_CC2500_InitSetREG
  3952  03A9  0859               	movf	??_CC2500_InitSetREG,w
  3953  03AA  00D6               	movwf	CC2500_WriteREG@value
  3954  03AB  085A               	movf	CC2500_InitSetREG@temp1,w
  3955  03AC  3184  24D3  3183   	fcall	_CC2500_WriteREG
  3956  03AF  3001               	movlw	1
  3957  03B0  0020               	movlb	0	; select bank0
  3958  03B1  00D9               	movwf	??_CC2500_InitSetREG
  3959  03B2  0859               	movf	??_CC2500_InitSetREG,w
  3960  03B3  07DC               	addwf	CC2500_InitSetREG@loop_c,f
  3961  03B4  2B8D               	goto	L2
  3962  03B5                     __end_of_CC2500_InitSetREG:	
  3963                           
  3964                           	psect	text28
  3965  0471                     __ptext28:	
  3966 ;; *************** function _CC2500_InitPATable *****************
  3967 ;; Defined at:
  3968 ;;		line 147 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;		None
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  loop_d          1    7[BANK0 ] unsigned char 
  3973 ;;  temp            1    6[BANK0 ] unsigned char 
  3974 ;; Return value:  Size  Location     Type
  3975 ;;		None               void
  3976 ;; Registers used:
  3977 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3983 ;;      Params:         0       0       0       0       0       0       0       0
  3984 ;;      Locals:         0       2       0       0       0       0       0       0
  3985 ;;      Temps:          0       1       0       0       0       0       0       0
  3986 ;;      Totals:         0       3       0       0       0       0       0       0
  3987 ;;Total ram usage:        3 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    6
  3990 ;; This function calls:
  3991 ;;		_CC2500_WriteREG
  3992 ;; This function is called by:
  3993 ;;		_CC2500_PowerOnInitial
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           
  3998                           ;psect for function _CC2500_InitPATable
  3999  0471                     _CC2500_InitPATable:	
  4000                           
  4001                           ;CC2500_B1.c: 149: unsigned char loop_d;
  4002                           ;CC2500_B1.c: 150: unsigned char temp;
  4003                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
  4004                           
  4005                           ;incstack = 0
  4006                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4007  0471  0020               	movlb	0	; select bank0
  4008  0472  01DB               	clrf	CC2500_InitPATable@loop_d
  4009  0473                     L3:	
  4010  0473  3008               	movlw	8
  4011  0474  025B               	subwf	CC2500_InitPATable@loop_d,w
  4012  0475  1803               	btfsc	3,0
  4013  0476  0008               	return
  4014                           
  4015                           ;CC2500_B1.c: 153: {
  4016                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
  4017  0477  085B               	movf	CC2500_InitPATable@loop_d,w
  4018  0478  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  4019  0479  0084               	movwf	4
  4020  047A  3082               	movlw	high (_CC2500_patable_vaule| (0+32768))
  4021  047B  1803               	skipnc
  4022  047C  3E01               	addlw	1
  4023  047D  0085               	movwf	5
  4024  047E  0800               	movf	0,w	;code access
  4025  047F  00D9               	movwf	??_CC2500_InitPATable
  4026  0480  0859               	movf	??_CC2500_InitPATable,w
  4027  0481  00DA               	movwf	CC2500_InitPATable@temp
  4028                           
  4029                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
  4030  0482  085A               	movf	CC2500_InitPATable@temp,w
  4031  0483  00D9               	movwf	??_CC2500_InitPATable
  4032  0484  0859               	movf	??_CC2500_InitPATable,w
  4033  0485  00D6               	movwf	CC2500_WriteREG@value
  4034  0486  303E               	movlw	62
  4035  0487  3184  24D3  3184   	fcall	_CC2500_WriteREG
  4036  048A  3001               	movlw	1
  4037  048B  0020               	movlb	0	; select bank0
  4038  048C  00D9               	movwf	??_CC2500_InitPATable
  4039  048D  0859               	movf	??_CC2500_InitPATable,w
  4040  048E  07DB               	addwf	CC2500_InitPATable@loop_d,f
  4041  048F  2C73               	goto	L3
  4042  0490                     __end_of_CC2500_InitPATable:	
  4043                           
  4044                           	psect	text29
  4045  04D3                     __ptext29:	
  4046 ;; *************** function _CC2500_WriteREG *****************
  4047 ;; Defined at:
  4048 ;;		line 227 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  w_addr          1    wreg     unsigned char 
  4051 ;;  value           1    2[BANK0 ] unsigned char 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  w_addr          1    4[BANK0 ] unsigned char 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;		None               void
  4056 ;; Registers used:
  4057 ;;		wreg, status,2, status,0, pclath, cstack
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4063 ;;      Params:         0       1       0       0       0       0       0       0
  4064 ;;      Locals:         0       1       0       0       0       0       0       0
  4065 ;;      Temps:          0       1       0       0       0       0       0       0
  4066 ;;      Totals:         0       3       0       0       0       0       0       0
  4067 ;;Total ram usage:        3 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:    5
  4070 ;; This function calls:
  4071 ;;		_CC2500_WriteByte
  4072 ;; This function is called by:
  4073 ;;		_CC2500_InitSetREG
  4074 ;;		_CC2500_InitPATable
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           
  4079                           ;psect for function _CC2500_WriteREG
  4080  04D3                     _CC2500_WriteREG:	
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
  4084                           ;CC2500_WriteREG@w_addr stored from wreg
  4085  04D3  0020               	movlb	0	; select bank0
  4086  04D4  00D8               	movwf	CC2500_WriteREG@w_addr
  4087                           
  4088                           ;CC2500_B1.c: 229: RB5=0;
  4089  04D5  128D               	bcf	13,5	;volatile
  4090                           
  4091                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
  4092  04D6  0858               	movf	CC2500_WriteREG@w_addr,w
  4093  04D7  00D7               	movwf	??_CC2500_WriteREG
  4094  04D8  0857               	movf	??_CC2500_WriteREG,w
  4095  04D9  00BA               	movwf	_SPI0Buffer
  4096  04DA                     l181:	
  4097                           ;CC2500_B1.c: 231: while(RB3==1);
  4098                           
  4099  04DA  198D               	btfsc	13,3	;volatile
  4100  04DB  2CDA               	goto	l181
  4101                           
  4102                           ;CC2500_B1.c: 232: CC2500_WriteByte();
  4103  04DC  3185  2513  3184   	fcall	_CC2500_WriteByte
  4104                           
  4105                           ;CC2500_B1.c: 233: SPI0Buffer=value;
  4106  04DF  0020               	movlb	0	; select bank0
  4107  04E0  0856               	movf	CC2500_WriteREG@value,w
  4108  04E1  00D7               	movwf	??_CC2500_WriteREG
  4109  04E2  0857               	movf	??_CC2500_WriteREG,w
  4110  04E3  00BA               	movwf	_SPI0Buffer
  4111                           
  4112                           ;CC2500_B1.c: 234: CC2500_WriteByte();
  4113  04E4  3185  2513         	fcall	_CC2500_WriteByte
  4114                           
  4115                           ;CC2500_B1.c: 235: RB5=1;
  4116  04E6  0020               	movlb	0	; select bank0
  4117  04E7  168D               	bsf	13,5	;volatile
  4118  04E8  0008               	return
  4119  04E9                     __end_of_CC2500_WriteREG:	
  4120                           
  4121                           	psect	text30
  4122  0583                     __ptext30:	
  4123 ;; *************** function _CC2500_FrequencyCabr *****************
  4124 ;; Defined at:
  4125 ;;		line 175 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;		None
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;		None               void
  4132 ;; Registers used:
  4133 ;;		wreg, status,2, status,0, pclath, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4139 ;;      Params:         0       0       0       0       0       0       0       0
  4140 ;;      Locals:         0       0       0       0       0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0
  4142 ;;      Totals:         0       0       0       0       0       0       0       0
  4143 ;;Total ram usage:        0 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    6
  4146 ;; This function calls:
  4147 ;;		_CC2500_WriteCommand
  4148 ;;		_DelayTime_1us
  4149 ;; This function is called by:
  4150 ;;		_CC2500_PowerOnInitial
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           
  4155                           ;psect for function _CC2500_FrequencyCabr
  4156  0583                     _CC2500_FrequencyCabr:	
  4157                           
  4158                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
  4159                           
  4160                           ;incstack = 0
  4161                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
  4162  0583  3033               	movlw	51
  4163  0584  3185  2575  3185   	fcall	_CC2500_WriteCommand
  4164                           
  4165                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
  4166  0587  30E8               	movlw	232
  4167  0588  0020               	movlb	0	; select bank0
  4168  0589  00D4               	movwf	DelayTime_1us@count
  4169  058A  3003               	movlw	3
  4170  058B  00D5               	movwf	DelayTime_1us@count+1
  4171  058C  3184  242B         	fcall	_DelayTime_1us
  4172  058E  0008               	return
  4173  058F                     __end_of_CC2500_FrequencyCabr:	
  4174                           
  4175                           	psect	text31
  4176  042B                     __ptext31:	
  4177 ;; *************** function _DelayTime_1us *****************
  4178 ;; Defined at:
  4179 ;;		line 283 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  count           2    0[BANK0 ] int 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  j               2    4[BANK0 ] unsigned int 
  4184 ;;  i               2    2[BANK0 ] unsigned int 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;		None               void
  4187 ;; Registers used:
  4188 ;;		wreg, status,2
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4194 ;;      Params:         0       2       0       0       0       0       0       0
  4195 ;;      Locals:         0       4       0       0       0       0       0       0
  4196 ;;      Temps:          0       0       0       0       0       0       0       0
  4197 ;;      Totals:         0       6       0       0       0       0       0       0
  4198 ;;Total ram usage:        6 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    4
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_CC2500_PowerRST
  4205 ;;		_CC2500_FrequencyCabr
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           
  4210                           ;psect for function _DelayTime_1us
  4211  042B                     _DelayTime_1us:	
  4212                           
  4213                           ;CC2500_B1.c: 285: unsigned int i,j;
  4214                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  4218  042B  3001               	movlw	1
  4219  042C  0020               	movlb	0	; select bank0
  4220  042D  00D6               	movwf	DelayTime_1us@i
  4221  042E  3000               	movlw	0
  4222  042F  00D7               	movwf	DelayTime_1us@i+1
  4223  0430                     l205:	
  4224  0430  0855               	movf	DelayTime_1us@count+1,w
  4225  0431  0257               	subwf	DelayTime_1us@i+1,w
  4226  0432  1D03               	skipz
  4227  0433  2C36               	goto	u2625
  4228  0434  0854               	movf	DelayTime_1us@count,w
  4229  0435  0256               	subwf	DelayTime_1us@i,w
  4230  0436                     u2625:	
  4231  0436  1803               	btfsc	3,0
  4232  0437  0008               	return
  4233                           
  4234                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
  4235  0438  01D8               	clrf	DelayTime_1us@j
  4236  0439  01D9               	clrf	DelayTime_1us@j+1
  4237  043A  3000               	movlw	0
  4238  043B  0259               	subwf	DelayTime_1us@j+1,w
  4239  043C  3002               	movlw	2
  4240  043D  1903               	skipnz
  4241  043E  0258               	subwf	DelayTime_1us@j,w
  4242  043F  1803               	btfsc	3,0
  4243  0440  2C4C               	goto	l2713
  4244  0441                     l2711:	
  4245  0441  3001               	movlw	1
  4246  0442  07D8               	addwf	DelayTime_1us@j,f
  4247  0443  3000               	movlw	0
  4248  0444  3DD9               	addwfc	DelayTime_1us@j+1,f
  4249  0445  3000               	movlw	0
  4250  0446  0259               	subwf	DelayTime_1us@j+1,w
  4251  0447  3002               	movlw	2
  4252  0448  1903               	skipnz
  4253  0449  0258               	subwf	DelayTime_1us@j,w
  4254  044A  1C03               	skipc
  4255  044B  2C41               	goto	l2711
  4256  044C                     l2713:	
  4257  044C  3001               	movlw	1
  4258  044D  07D6               	addwf	DelayTime_1us@i,f
  4259  044E  3000               	movlw	0
  4260  044F  3DD7               	addwfc	DelayTime_1us@i+1,f
  4261  0450  2C30               	goto	l205
  4262  0451                     __end_of_DelayTime_1us:	
  4263                           
  4264                           	psect	text32
  4265  05E8                     __ptext32:	
  4266 ;; *************** function _CC2500_ClearTXFIFO *****************
  4267 ;; Defined at:
  4268 ;;		line 161 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;		None               void
  4275 ;; Registers used:
  4276 ;;		wreg, status,2, status,0, pclath, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4282 ;;      Params:         0       0       0       0       0       0       0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0
  4285 ;;      Totals:         0       0       0       0       0       0       0       0
  4286 ;;Total ram usage:        0 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    6
  4289 ;; This function calls:
  4290 ;;		_CC2500_WriteCommand
  4291 ;; This function is called by:
  4292 ;;		_CC2500_PowerOnInitial
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           
  4297                           ;psect for function _CC2500_ClearTXFIFO
  4298  05E8                     _CC2500_ClearTXFIFO:	
  4299                           
  4300                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
  4301                           
  4302                           ;incstack = 0
  4303                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
  4304  05E8  303B               	movlw	59
  4305  05E9  3185  2575         	fcall	_CC2500_WriteCommand
  4306  05EB  0008               	return
  4307  05EC                     __end_of_CC2500_ClearTXFIFO:	
  4308                           
  4309                           	psect	text33
  4310  05EC                     __ptext33:	
  4311 ;; *************** function _CC2500_ClearRXFIFO *****************
  4312 ;; Defined at:
  4313 ;;		line 168 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;		None               void
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, status,0, pclath, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4327 ;;      Params:         0       0       0       0       0       0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0       0
  4329 ;;      Temps:          0       0       0       0       0       0       0       0
  4330 ;;      Totals:         0       0       0       0       0       0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    6
  4334 ;; This function calls:
  4335 ;;		_CC2500_WriteCommand
  4336 ;; This function is called by:
  4337 ;;		_CC2500_PowerOnInitial
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           
  4342                           ;psect for function _CC2500_ClearRXFIFO
  4343  05EC                     _CC2500_ClearRXFIFO:	
  4344                           
  4345                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
  4346                           
  4347                           ;incstack = 0
  4348                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
  4349  05EC  303A               	movlw	58
  4350  05ED  3185  2575         	fcall	_CC2500_WriteCommand
  4351  05EF  0008               	return
  4352  05F0                     __end_of_CC2500_ClearRXFIFO:	
  4353                           
  4354                           	psect	text34
  4355  0575                     __ptext34:	
  4356 ;; *************** function _CC2500_WriteCommand *****************
  4357 ;; Defined at:
  4358 ;;		line 253 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  command         1    wreg     unsigned char 
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;  command         1    3[BANK0 ] unsigned char 
  4363 ;; Return value:  Size  Location     Type
  4364 ;;		None               void
  4365 ;; Registers used:
  4366 ;;		wreg, status,2, status,0, pclath, cstack
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4372 ;;      Params:         0       0       0       0       0       0       0       0
  4373 ;;      Locals:         0       1       0       0       0       0       0       0
  4374 ;;      Temps:          0       1       0       0       0       0       0       0
  4375 ;;      Totals:         0       2       0       0       0       0       0       0
  4376 ;;Total ram usage:        2 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    5
  4379 ;; This function calls:
  4380 ;;		_CC2500_WriteByte
  4381 ;; This function is called by:
  4382 ;;		_CC2500_TxData
  4383 ;;		_CC2500_RxData
  4384 ;;		_CC2500_ClearTXFIFO
  4385 ;;		_CC2500_ClearRXFIFO
  4386 ;;		_CC2500_FrequencyCabr
  4387 ;;		_CC2500_SIDLEMode
  4388 ;;		_setRF_Main
  4389 ;;		_RF_RxDisable
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           
  4394                           ;psect for function _CC2500_WriteCommand
  4395  0575                     _CC2500_WriteCommand:	
  4396                           
  4397                           ;incstack = 0
  4398                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
  4399                           ;CC2500_WriteCommand@command stored from wreg
  4400  0575  0020               	movlb	0	; select bank0
  4401  0576  00D7               	movwf	CC2500_WriteCommand@command
  4402                           
  4403                           ;CC2500_B1.c: 255: RB5=0;
  4404  0577  128D               	bcf	13,5	;volatile
  4405                           
  4406                           ;CC2500_B1.c: 256: SPI0Buffer=command;
  4407  0578  0857               	movf	CC2500_WriteCommand@command,w
  4408  0579  00D6               	movwf	??_CC2500_WriteCommand
  4409  057A  0856               	movf	??_CC2500_WriteCommand,w
  4410  057B  00BA               	movwf	_SPI0Buffer
  4411  057C                     l193:	
  4412                           ;CC2500_B1.c: 258: while(RB3==1);
  4413                           
  4414  057C  198D               	btfsc	13,3	;volatile
  4415  057D  2D7C               	goto	l193
  4416                           
  4417                           ;CC2500_B1.c: 260: CC2500_WriteByte();
  4418  057E  3185  2513         	fcall	_CC2500_WriteByte
  4419                           
  4420                           ;CC2500_B1.c: 261: RB5=1;
  4421  0580  0020               	movlb	0	; select bank0
  4422  0581  168D               	bsf	13,5	;volatile
  4423  0582  0008               	return
  4424  0583                     __end_of_CC2500_WriteCommand:	
  4425                           
  4426                           	psect	text35
  4427  0513                     __ptext35:	
  4428 ;; *************** function _CC2500_WriteByte *****************
  4429 ;; Defined at:
  4430 ;;		line 193 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  4431 ;; Parameters:    Size  Location     Type
  4432 ;;		None
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;  loop_a          1    1[BANK0 ] unsigned char 
  4435 ;; Return value:  Size  Location     Type
  4436 ;;		None               void
  4437 ;; Registers used:
  4438 ;;		wreg, status,2, status,0
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4444 ;;      Params:         0       0       0       0       0       0       0       0
  4445 ;;      Locals:         0       1       0       0       0       0       0       0
  4446 ;;      Temps:          0       1       0       0       0       0       0       0
  4447 ;;      Totals:         0       2       0       0       0       0       0       0
  4448 ;;Total ram usage:        2 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    4
  4451 ;; This function calls:
  4452 ;;		Nothing
  4453 ;; This function is called by:
  4454 ;;		_CC2500_TxData
  4455 ;;		_CC2500_RxData
  4456 ;;		_CC2500_PowerRST
  4457 ;;		_CC2500_WriteREG
  4458 ;;		_CC2500_WriteCommand
  4459 ;;		_CC2500_ReadStatus
  4460 ;;		_CC2500_ReadREG
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           
  4465                           ;psect for function _CC2500_WriteByte
  4466  0513                     _CC2500_WriteByte:	
  4467                           
  4468                           ;CC2500_B1.c: 195: unsigned char loop_a;
  4469                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
  4470                           
  4471                           ;incstack = 0
  4472                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  4473  0513  0020               	movlb	0	; select bank0
  4474  0514  01D5               	clrf	CC2500_WriteByte@loop_a
  4475  0515                     L4:	
  4476  0515  3008               	movlw	8
  4477  0516  0255               	subwf	CC2500_WriteByte@loop_a,w
  4478  0517  1803               	btfsc	3,0
  4479  0518  0008               	return
  4480                           
  4481                           ;CC2500_B1.c: 197: {
  4482                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
  4483  0519  1FBA               	btfss	_SPI0Buffer,7
  4484  051A  2D1D               	goto	l169
  4485                           
  4486                           ;CC2500_B1.c: 199: RB1=1;
  4487  051B  148D               	bsf	13,1	;volatile
  4488  051C  2D1E               	goto	l170
  4489  051D                     l169:	
  4490                           
  4491                           ;CC2500_B1.c: 200: else
  4492                           ;CC2500_B1.c: 201: RB1=0;
  4493  051D  108D               	bcf	13,1	;volatile
  4494  051E                     l170:	
  4495                           
  4496                           ;CC2500_B1.c: 202: RB2=1;
  4497  051E  150D               	bsf	13,2	;volatile
  4498                           
  4499                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
  4500  051F  1003               	clrc
  4501  0520  0DBA               	rlf	_SPI0Buffer,f
  4502                           
  4503                           ;CC2500_B1.c: 204: RB2=0;
  4504  0521  110D               	bcf	13,2	;volatile
  4505  0522  3001               	movlw	1
  4506  0523  00D4               	movwf	??_CC2500_WriteByte
  4507  0524  0854               	movf	??_CC2500_WriteByte,w
  4508  0525  07D5               	addwf	CC2500_WriteByte@loop_a,f
  4509  0526  2D15               	goto	L4
  4510  0527                     __end_of_CC2500_WriteByte:	
  4511                           
  4512                           	psect	intentry
  4513  0004                     __pintentry:	
  4514 ;; *************** function _ISR *****************
  4515 ;; Defined at:
  4516 ;;		line 56 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;		None
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;		None               void
  4523 ;; Registers used:
  4524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4530 ;;      Params:         0       0       0       0       0       0       0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0
  4532 ;;      Temps:          1       0       0       0       0       0       0       0
  4533 ;;      Totals:         1       0       0       0       0       0       0       0
  4534 ;;Total ram usage:        1 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    3
  4537 ;; This function calls:
  4538 ;;		_I2C_ISR
  4539 ;;		_INT_ISR
  4540 ;;		_TMR1_ISR
  4541 ;; This function is called by:
  4542 ;;		Interrupt level 1
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546  0004                     _ISR:	
  4547                           
  4548                           ;incstack = 0
  4549                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4550  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4551  0005  3180               	pagesel	$
  4552  0006  0020               	movlb	0	; select bank0
  4553  0007  087F               	movf	127,w
  4554  0008  00F5               	movwf	??_ISR
  4555                           
  4556                           ;MCU_16f1516_B1.c: 58: __nop();
  4557  0009  0000               	nop
  4558                           
  4559                           ;MCU_16f1516_B1.c: 60: __nop();
  4560  000A  0000               	nop
  4561                           
  4562                           ;MCU_16f1516_B1.c: 62: TMR1_ISR();
  4563  000B  3183  23B5  3180   	fcall	_TMR1_ISR
  4564                           
  4565                           ;MCU_16f1516_B1.c: 66: INT_ISR();
  4566  000E  3185  258F  3180   	fcall	_INT_ISR
  4567                           
  4568                           ;MCU_16f1516_B1.c: 68: ;;
  4569                           ;MCU_16f1516_B1.c: 70: I2C_ISR();
  4570  0011  3185  2558         	fcall	_I2C_ISR
  4571  0013  0875               	movf	??_ISR,w
  4572  0014  0020               	movlb	0	; select bank0
  4573  0015  00FF               	movwf	127
  4574  0016  107E               	bcf	126,0	;clear compiler interrupt flag
  4575  0017  0009               	retfie
  4576  0018                     __end_of_ISR:	
  4577                           
  4578                           	psect	text37
  4579  03B5                     __ptext37:	
  4580 ;; *************** function _TMR1_ISR *****************
  4581 ;; Defined at:
  4582 ;;		line 125 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;		None
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;		None
  4587 ;; Return value:  Size  Location     Type
  4588 ;;		None               void
  4589 ;; Registers used:
  4590 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4596 ;;      Params:         0       0       0       0       0       0       0       0
  4597 ;;      Locals:         0       0       0       0       0       0       0       0
  4598 ;;      Temps:          0       0       0       0       0       0       0       0
  4599 ;;      Totals:         0       0       0       0       0       0       0       0
  4600 ;;Total ram usage:        0 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; This function calls:
  4603 ;;		Nothing
  4604 ;; This function is called by:
  4605 ;;		_ISR
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           
  4610                           ;psect for function _TMR1_ISR
  4611  03B5                     _TMR1_ISR:	
  4612                           
  4613                           ;MCU_16f1516_B1.c: 127: if(TMR1IE && TMR1IF)
  4614                           
  4615                           ;incstack = 0
  4616                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4617  03B5  0021               	movlb	1	; select bank1
  4618  03B6  1C11               	btfss	17,0	;volatile
  4619  03B7  0008               	return
  4620  03B8  0020               	movlb	0	; select bank0
  4621  03B9  1C11               	btfss	17,0	;volatile
  4622  03BA  0008               	return
  4623                           
  4624                           ;MCU_16f1516_B1.c: 128: {
  4625                           ;MCU_16f1516_B1.c: 129: TMR1H=((65536-700)/256);
  4626  03BB  30FD               	movlw	253
  4627  03BC  0097               	movwf	23	;volatile
  4628                           
  4629                           ;MCU_16f1516_B1.c: 130: TMR1L=((65536-700)%256);
  4630  03BD  3044               	movlw	68
  4631  03BE  0096               	movwf	22	;volatile
  4632                           
  4633                           ;MCU_16f1516_B1.c: 131: TMR1IF=0;
  4634  03BF  1011               	bcf	17,0	;volatile
  4635                           
  4636                           ;MCU_16f1516_B1.c: 132: Timer1->Count++;
  4637  03C0  0A3B               	incf	_Timer1,w
  4638  03C1  0086               	movwf	6
  4639  03C2  0187               	clrf	7
  4640  03C3  3001               	movlw	1
  4641  03C4  0781               	addwf	1,f
  4642  03C5  3141               	addfsr 1,1
  4643  03C6  1803               	skipnc
  4644  03C7  0A81               	incf	1,f
  4645                           
  4646                           ;MCU_16f1516_B1.c: 133: if(Timer1->Count == 20)
  4647  03C8  0A3B               	incf	_Timer1,w
  4648  03C9  0086               	movwf	6
  4649  03CA  0187               	clrf	7
  4650  03CB  3F40               	moviw [0]fsr1
  4651  03CC  3A14               	xorlw	20
  4652  03CD  1D03               	skipz
  4653  03CE  2BD1               	goto	u177_25
  4654  03CF  3F41               	moviw [1]fsr1
  4655  03D0  3A00               	xorlw	0
  4656  03D1                     u177_25:	
  4657  03D1  1D03               	skipz
  4658  03D2  0008               	return
  4659                           
  4660                           ;MCU_16f1516_B1.c: 134: {
  4661                           ;MCU_16f1516_B1.c: 135: Timer1->Count=0;
  4662  03D3  0A3B               	incf	_Timer1,w
  4663  03D4  0086               	movwf	6
  4664  03D5  0187               	clrf	7
  4665  03D6  3000               	movlw	0
  4666  03D7  3FC0               	movwi [0]fsr1
  4667  03D8  3FC1               	movwi [1]fsr1
  4668                           
  4669                           ;MCU_16f1516_B1.c: 136: TMain->T1_Timerout=1;
  4670  03D9  085D               	movf	_TMain,w
  4671  03DA  0086               	movwf	6
  4672  03DB  0187               	clrf	7
  4673  03DC  1501               	bsf	1,2
  4674  03DD  0008               	return
  4675  03DE                     __end_of_TMR1_ISR:	
  4676                           
  4677                           	psect	text38
  4678  058F                     __ptext38:	
  4679 ;; *************** function _INT_ISR *****************
  4680 ;; Defined at:
  4681 ;;		line 156 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;		None               void
  4688 ;; Registers used:
  4689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4695 ;;      Params:         0       0       0       0       0       0       0       0
  4696 ;;      Locals:         0       0       0       0       0       0       0       0
  4697 ;;      Temps:          0       0       0       0       0       0       0       0
  4698 ;;      Totals:         0       0       0       0       0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    2
  4702 ;; This function calls:
  4703 ;;		_setRF_ReceiveGO
  4704 ;; This function is called by:
  4705 ;;		_ISR
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function _INT_ISR
  4711  058F                     _INT_ISR:	
  4712                           
  4713                           ;MCU_16f1516_B1.c: 158: if(INTE && INTF)
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4717  058F  1E0B               	btfss	11,4	;volatile
  4718  0590  0008               	return
  4719  0591  1C8B               	btfss	11,1	;volatile
  4720  0592  0008               	return
  4721                           
  4722                           ;MCU_16f1516_B1.c: 159: {
  4723                           ;MCU_16f1516_B1.c: 160: INTF=0;
  4724  0593  108B               	bcf	11,1	;volatile
  4725                           
  4726                           ;MCU_16f1516_B1.c: 161: INTE=0;
  4727  0594  120B               	bcf	11,4	;volatile
  4728                           
  4729                           ;MCU_16f1516_B1.c: 162: setRF_ReceiveGO(1,1);
  4730  0595  01F3               	clrf	setRF_ReceiveGO@command
  4731  0596  0AF3               	incf	setRF_ReceiveGO@command,f
  4732  0597  3001               	movlw	1
  4733  0598  3185  259B         	fcall	_setRF_ReceiveGO
  4734  059A  0008               	return
  4735  059B                     __end_of_INT_ISR:	
  4736                           
  4737                           	psect	text39
  4738  059B                     __ptext39:	
  4739 ;; *************** function _setRF_ReceiveGO *****************
  4740 ;; Defined at:
  4741 ;;		line 37 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;  rf              1    wreg     unsigned char 
  4744 ;;  command         1    2[COMMON] unsigned char 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  rf              1    3[COMMON] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;		None               void
  4749 ;; Registers used:
  4750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4756 ;;      Params:         1       0       0       0       0       0       0       0
  4757 ;;      Locals:         1       0       0       0       0       0       0       0
  4758 ;;      Temps:          0       0       0       0       0       0       0       0
  4759 ;;      Totals:         2       0       0       0       0       0       0       0
  4760 ;;Total ram usage:        2 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    1
  4763 ;; This function calls:
  4764 ;;		i1_RfPointSelect
  4765 ;; This function is called by:
  4766 ;;		_INT_ISR
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           
  4771                           ;psect for function _setRF_ReceiveGO
  4772  059B                     _setRF_ReceiveGO:	
  4773                           
  4774                           ;incstack = 0
  4775                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4776                           ;setRF_ReceiveGO@rf stored from wreg
  4777  059B  00F4               	movwf	setRF_ReceiveGO@rf
  4778                           
  4779                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
  4780  059C  0874               	movf	setRF_ReceiveGO@rf,w
  4781  059D  3185  25B2         	fcall	i1_RfPointSelect
  4782                           
  4783                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
  4784  059F  0876               	movf	_RF,w
  4785  05A0  0086               	movwf	6
  4786  05A1  0187               	clrf	7
  4787  05A2  0873               	movf	setRF_ReceiveGO@command,w
  4788  05A3  1081               	bcf	1,1
  4789  05A4  1D03               	skipz
  4790  05A5  1481               	bsf	1,1
  4791  05A6  0008               	return
  4792  05A7                     __end_of_setRF_ReceiveGO:	
  4793                           
  4794                           	psect	text40
  4795  05B2                     __ptext40:	
  4796 ;; *************** function i1_RfPointSelect *****************
  4797 ;; Defined at:
  4798 ;;		line 7 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  rf              1    wreg     unsigned char 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  rf              1    1[COMMON] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;		None               void
  4805 ;; Registers used:
  4806 ;;		wreg
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4812 ;;      Params:         0       0       0       0       0       0       0       0
  4813 ;;      Locals:         1       0       0       0       0       0       0       0
  4814 ;;      Temps:          1       0       0       0       0       0       0       0
  4815 ;;      Totals:         2       0       0       0       0       0       0       0
  4816 ;;Total ram usage:        2 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; This function calls:
  4819 ;;		Nothing
  4820 ;; This function is called by:
  4821 ;;		_setRF_ReceiveGO
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           
  4826                           ;psect for function i1_RfPointSelect
  4827  05B2                     i1_RfPointSelect:	
  4828                           
  4829                           ;incstack = 0
  4830                           ; Regs used in i1_RfPointSelect: [wreg]
  4831                           ;i1RfPointSelect@rf stored from wreg
  4832  05B2  00F2               	movwf	i1RfPointSelect@rf
  4833                           
  4834                           ;RF_Control_B1.c: 10: if(rf == 1)
  4835  05B3  0872               	movf	i1RfPointSelect@rf,w
  4836  05B4  3A01               	xorlw	1
  4837  05B5  1D03               	skipz
  4838  05B6  0008               	return
  4839                           
  4840                           ;RF_Control_B1.c: 11: {
  4841                           ;RF_Control_B1.c: 12: RF=&RF1;
  4842  05B7  3052               	movlw	_RF1& (0+255)
  4843  05B8  00F1               	movwf	??i1_RfPointSelect
  4844  05B9  0871               	movf	??i1_RfPointSelect,w
  4845  05BA  00F6               	movwf	_RF
  4846  05BB  0008               	return
  4847  05BC                     __end_ofi1_RfPointSelect:	
  4848                           
  4849                           	psect	text41
  4850  0558                     __ptext41:	
  4851 ;; *************** function _I2C_ISR *****************
  4852 ;; Defined at:
  4853 ;;		line 260 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;		None               void
  4860 ;; Registers used:
  4861 ;;		wreg, fsr1l, fsr1h
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4867 ;;      Params:         0       0       0       0       0       0       0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0       0
  4870 ;;      Totals:         0       0       0       0       0       0       0       0
  4871 ;;Total ram usage:        0 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_ISR
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           
  4881                           ;psect for function _I2C_ISR
  4882  0558                     _I2C_ISR:	
  4883                           
  4884                           ;MCU_16f1516_B1.c: 262: if(SSPIE && SSPIF)
  4885                           
  4886                           ;incstack = 0
  4887                           ; Regs used in _I2C_ISR: [wregfsr1]
  4888  0558  0021               	movlb	1	; select bank1
  4889  0559  1D91               	btfss	17,3	;volatile
  4890  055A  0008               	return
  4891  055B  0020               	movlb	0	; select bank0
  4892  055C  1D91               	btfss	17,3	;volatile
  4893  055D  0008               	return
  4894                           
  4895                           ;MCU_16f1516_B1.c: 263: {
  4896                           ;MCU_16f1516_B1.c: 264: SSPIE=0;
  4897  055E  0021               	movlb	1	; select bank1
  4898  055F  1191               	bcf	17,3	;volatile
  4899                           
  4900                           ;MCU_16f1516_B1.c: 265: I2C->SlaveGO=1;
  4901  0560  0878               	movf	_I2C,w
  4902  0561  3E42               	addlw	66
  4903  0562  0086               	movwf	6
  4904  0563  3001               	movlw	1	; select bank2/3
  4905  0564  0087               	movwf	7
  4906  0565  1401               	bsf	1,0
  4907  0566  0008               	return
  4908  0567                     __end_of_I2C_ISR:	
  4909  007E                     btemp	set	126	;btemp
  4910  007E                     pic14e$flags	set	126
  4911  007E                     wtemp	set	126
  4912  007E                     wtemp0	set	126
  4913  0080                     wtemp1	set	128
  4914  0082                     wtemp2	set	130
  4915  0084                     wtemp3	set	132
  4916  0086                     wtemp4	set	134
  4917  0088                     wtemp5	set	136
  4918  007F                     wtemp6	set	127
  4919  007E                     ttemp	set	126
  4920  007E                     ttemp0	set	126
  4921  0081                     ttemp1	set	129
  4922  0084                     ttemp2	set	132
  4923  0087                     ttemp3	set	135
  4924  007F                     ttemp4	set	127
  4925  007E                     ltemp	set	126
  4926  007E                     ltemp0	set	126
  4927  0082                     ltemp1	set	130
  4928  0086                     ltemp2	set	134
  4929  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         122
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      9      62
    BANK1            80      0      32
    BANK2            80      0      67
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    RFSW	PTR struct RFSW size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK1[32]), 

    RF	PTR struct RF size(1) Largest target is 2
		 -> NULL(NULL[0]), RF1(BANK0[2]), 

    I2C	PTR struct I2C size(1) Largest target is 67
		 -> NULL(NULL[0]), VarI2C(BANK2[67]), 

    TMain	PTR struct TMain size(1) Largest target is 15
		 -> NULL(NULL[0]), VarTMain(BANK0[15]), 

    Timer1	PTR struct Timer1 size(1) Largest target is 3
		 -> NULL(NULL[0]), VarTimer1(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _RF_Main->_setRF_Main
    _setRF_Main->_CC2500_RxData
    _setRF_Main->_CC2500_TxData
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initial->_I2C_Set
    _Mcu_Initial->_TMR1_Set
    _MainT->_setRF_Enable
    _setRF_Enable->_RfPointSelect
    _I2C_Main->_I2C_SetData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4323
              _CC2500_PowerOnInitial
                           _I2C_Main
                              _MainT
                      _MainT_Initial
                        _Mcu_Initial
                  _RF_Initialization
                            _RF_Main
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0    1538
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0    1538
                                              6 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                        _I2C_SetData
                       _RF_RxDisable
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     192
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     628
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     158
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initial                                          0     0      0       0
                            _I2C_Set
                            _INT_Set
                             _IO_Set
                           _TMR1_Set
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initial                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                2     2      0     189
                                              4 BANK0      1     1      0
                       _setRF_Enable
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     189
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Main                                             1     1      0     489
                        _I2C_SetData
                     _I2C_Slave_Mode
 ---------------------------------------------------------------------------------
 (2) _I2C_Slave_Mode                                       3     3      0     198
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _I2C_SetData                                          4     4      0     291
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2107
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     464
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     458
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     393
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     260
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     495
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     396
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  1     1      0     119
                                              4 COMMON     1     1      0
                            _I2C_ISR
                            _INT_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT_ISR                                              0     0      0     119
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (8) _setRF_ReceiveGO                                      2     1      1     119
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (9) i1_RfPointSelect                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _I2C_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _I2C_Main
     _I2C_SetData
     _I2C_Slave_Mode
   _MainT
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
   _MainT_Initial
   _Mcu_Initial
     _I2C_Set
     _INT_Set
     _IO_Set
     _TMR1_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _I2C_SetData
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _setINT_GO

 _ISR (ROOT)
   _I2C_ISR
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      AB       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      3E       6       77.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      20       8       40.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      43      10       83.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      AB      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Sep 17 23:33:51 2014

                 ??_MainT_Initial 0054                                _BF 10A0                                _RF 0076  
         __end_of_CC2500_WriteREG 04E9                               l103 02C1                               l112 02ED  
                             l123 0277                               l108 02E5                               l205 0430  
                             l109 02EA                               l119 0268                               l136 0356  
                             l170 051E                               l139 035B                               _I2C 0078  
                             l181 04DA                               l169 051D                               l193 057C  
                             l521 01AB                               l418 031F                               l515 01C2  
                             l517 01B7                               l518 01A7                               l527 01C9  
                             l199 04AF                               _CKP 10AC                               _GIE 005F  
                             _CRC 0037                               _RA0 0060                               _RA1 0061  
                             _RB0 0068                               _RB1 0069                               _RC0 0070  
                             _RB2 006A                               _RB3 006B                               _RB5 006D  
                             _RF1 0052                               _PEN 10B2                               _ISR 0004  
                             _SEN 10B0                   __end_of_I2C_ISR 0567          __end_of_CC2500_WriteByte 0527  
                 __end_of_I2C_Set 04D3              __size_of_I2C_SetData 006D                               wreg 0009  
                            ?_ISR 0071                              l3009 032F                              l3045 0144  
                            l2601 04A1                              l2711 0441                              l2713 044C  
                            l3177 0411                              l2653 02D0                              l2903 01E4  
                            l2761 0116                              l2745 00DD                              l2921 005E  
                            l2755 00FF                              l2739 00C5                     ??_Mcu_Initial 0055  
                            l2749 00FA                              l2685 0285                              l2933 0079  
                            l2599 049D                              l2687 029A                              l2935 007D  
                            l2699 02AD                              l2877 019B                              l2949 00A3  
                            _AHEN 10B9                              _DHEN 10B8                              u3005 0158  
                            _LATA 010C                              _LATB 010D                   __end_of_INT_ISR 059B  
                            _LATC 010E                              u2480 05C3                              u2625 0436  
                            _PEIE 005E                              _INTE 005C                              _INTF 0059  
                            _RCEN 10B3                              u2995 0132                              _RFSW 0077  
                 __end_of_INT_Set 05DC                              _RSSI 0038                              _R_nW 10A2  
                            _main 0405                   __end_of_RF_Main 05E0                  __end_of_I2C_Main 0333  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              indf1 0001                              fsr1l 0006  
                            btemp 007E                              ltemp 007E     __size_of_setRF_Initialization 0006  
                            start 0018                              ttemp 007E                              wtemp 007E  
                   _RfPointSelect 05A7                             ??_ISR 0075                             ?_main 0071  
                           _ACKEN 10B4                     __CFG_WDTE$OFF 0000                             _T1CON 0018  
   __size_of_CC2500_FrequencyCabr 000C                             _TMR1H 0017                             _TMR1L 0016  
                           _PORTA 000C                             _PORTB 000D                             _PORTC 000E  
                           _TRISA 008C                             _TRISB 008D                             _TRISC 008E  
                           _SSPIE 048B                             _SSPIF 008B                             _WPUB0 1068  
                           _SSPOV 10AE                             _TMain 005D                             _MainT 011B  
                   __CFG_WRT$BOOT 0000                  __end_of_TMR1_ISR 03DE      __size_of_CC2500_WriteCommand 000E  
                __end_of_TMR1_Set 0549       __size_of_CC2500_ClearRXFIFO 0004       __size_of_CC2500_ClearTXFIFO 0004  
             CC2500_RxData@loop_f 0059                    __pbitbssCOMMON 0380                  ?_CC2500_ReadByte 0071  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F                 ?_CC2500_SIDLEMode 0071        __size_of_RF_Initialization 0004  
                  ?_RfPointSelect 0071               __end_of_Mcu_Initial 0539                ??_CC2500_SIDLEMode 0058  
                 __initialization 001A                  ?_CC2500_PowerRST 0071                      __end_of_main 042B  
                       ??_I2C_ISR 0071                  ?_CC2500_WriteREG 0056                         ??_I2C_Set 0054  
                          ??_main 005D                        _Receive_GO 0381                        _Receive_OK 0382  
                          ?_MainT 0071                         ??_INT_ISR 0075                         ??_INT_Set 0054  
               i1RfPointSelect@rf 0072                         ??_RF_Main 005C                    setRF_Enable@rf 0057  
                          _ANSELA 018C                            _ANSELB 018D                            _ANSELC 018E  
                          u177_25 03D1                            _OSCCON 0099                            _TMR1IE 0488  
                          _TMR1IF 0088                            _IO_Set 04E9                            _SSPADD 0212  
                          _SSPBUF 0211                DelayTime_1us@count 0054                        _VarProduct 00A0  
  __size_of_CC2500_PowerOnInitial 0015     __end_of_CC2500_PowerOnInitial 0513                            _VarI2C 0120  
                          _Timer1 003B                   i1_RfPointSelect 05B2                            _r_data 003E  
                          _s_data 003F                         ?_I2C_Main 0071                  ??_setRF_RxStatus 0057  
                   ?_setRF_Enable 0056                       _Mcu_Initial 0527       __size_of_CC2500_InitPATable 001F  
             CC2500_TxData@loop_e 0059  __end_of_CC2500_registers_address 022F           __end_of__initialization 0039  
                 ??_RfPointSelect 0054                     __end_of_MainT 0184                    __pcstackCOMMON 0071  
                    __pidataBANK1 0451           __size_of_I2C_Slave_Mode 0067                         ?_TMR1_ISR 0071  
                       ?_TMR1_Set 0071          __size_of_setRF_ReceiveGO 000C                        ??_I2C_Main 0058  
               ?_CC2500_WriteByte 0071                           ??_MainT 0058                    ??_setRF_Enable 0057  
              ??_CC2500_WriteByte 0054                        __pbssBANK0 0020                        __pbssBANK2 0120  
                         ?_IO_Set 0071                        __pnvCOMMON 0079                    DelayTime_1us@i 0056  
                  DelayTime_1us@j 0058           __end_ofi1_RfPointSelect 05BC                __size_of_setINT_GO 0009  
                      __pmaintext 0405               _CC2500_WriteCommand 0575                        ??_TMR1_ISR 0071  
                      ??_TMR1_Set 0054                        __pintentry 0004                           _I2C_ISR 0558  
                         _ACKSTAT 10B6                           _I2C_Set 04BD            __size_of_DelayTime_1us 0026  
           __end_of_MainT_Initial 0558                      I2C_SetData@i 0057                     ??_I2C_SetData 0054  
    __end_of_setRF_Initialization 05D7                           _INT_ISR 058F                           _INT_Set 05D7  
            ?_CC2500_WriteCommand 0071            __size_of_CC2500_RxData 0055            __size_of_CC2500_TxData 003D  
                         _RF_Data 0020                           _SSPCON1 0215                           _SSPCON2 0216  
                         _RF_Main 05DC                           _SSPSTAT 0214      __end_of_CC2500_FrequencyCabr 058F  
                 __size_of_IO_Set 0015          _CC2500_registers_address 0200                    RF_RxDisable@rf 0058  
                         _Product 0079                           __ptext1 05DC                           __ptext2 003D  
                         __ptext3 03DE                           __ptext4 02BB                           __ptext5 0266  
                         __ptext6 0567                           __ptext7 04A7                           __ptext8 0490  
                         __ptext9 05E0         __size_of_CC2500_SIDLEMode 0004                      __size_of_ISR 0014  
                      _setRF_Main 003D                I2C_SetData@command 0056                 __end_of_setINT_GO 05C5  
           ??_CC2500_WriteCommand 0056                 ??_setRF_ReceiveGO 0074        __end_of_CC2500_ClearRXFIFO 05F0  
      __end_of_CC2500_ClearTXFIFO 05EC               __end_of_I2C_SetData 011B                           clrloop0 05C6  
            end_of_initialization 0039                 _CC2500_InitSetREG 038B                     _DelayTime_1us 042B  
                         init_ram 05CB                ?_CC2500_InitSetREG 0071                           initloop 05CC  
           CC2500_ReadByte@loop_b 0055                 _CC2500_ReadStatus 04A7                     _CC2500_Enable 0380  
                ?i1_RfPointSelect 0071                ?_CC2500_ReadStatus 0071          __size_of_CC2500_ReadByte 0017  
                   _CC2500_RxData 0266                     _CC2500_TxData 02BB               ??_CC2500_InitSetREG 0059  
            __end_of_setRF_Enable 038B                    _I2C_Slave_Mode 0184                      __pstringtext 0200  
             ??_CC2500_ReadStatus 0056            setRF_Initialization@rf 0071           CC2500_InitSetREG@loop_c 005C  
        __size_of_CC2500_PowerRST 002E                  __CFG_FOSC$INTOSC 0000          __size_of_CC2500_WriteREG 0016  
               __size_of_I2C_Main 003B         __end_of_CC2500_InitSetREG 03B5                    ?_DelayTime_1us 0054  
                    ?_Mcu_Initial 0071         __end_of_CC2500_ReadStatus 04BD                     ?_RF_RxDisable 0071  
                  __end_of_IO_Set 04FE              _setRF_Initialization 05D1            __end_of_I2C_Slave_Mode 01EB  
                  ?_CC2500_RxData 0071                    ?_CC2500_TxData 0071             _CC2500_PowerOnInitial 04FE  
                    setRF_Main@rf 005B                 __size_of_TMR1_ISR 0029                 __size_of_TMR1_Set 0010  
                     _I2C_SetData 00AE              _CC2500_FrequencyCabr 0583                       ?_setRF_Main 0071  
             start_initialization 001A                       __end_of_ISR 0018        __end_of_CC2500_InitPATable 0490  
                  ??_RF_RxDisable 0058                   RfPointSelect@rf 0055                          ??_IO_Set 0054  
           ?_setRF_Initialization 0071             __end_of_RfPointSelect 05B2         __size_of_CC2500_WriteByte 0014  
                       _VarTimer1 004F                   ?_I2C_Slave_Mode 0071                         _Rx_Length 0039  
                       _Tx_Length 003C                       __pdataBANK1 00A0                          ?_I2C_ISR 0071  
                        ?_I2C_Set 0071                 ??_CC2500_ReadByte 0054                  _CC2500_SIDLEMode 05E4  
           ?_CC2500_FrequencyCabr 0071                  setINT_GO@command 0054                       __pbssCOMMON 0076  
                       ___latbits 0002                          ?_INT_ISR 0071               setRF_Enable@command 0056  
                   __pcstackBANK0 0054                          ?_INT_Set 0071                   ??_DelayTime_1us 0056  
      __size_of_CC2500_InitSetREG 002A                 ??_CC2500_PowerRST 005A                          ?_RF_Main 0071  
      __size_of_CC2500_ReadStatus 0016                 ??_CC2500_WriteREG 0057             CC2500_WriteREG@w_addr 0058  
           __size_of_setRF_Enable 002A                   ??_CC2500_RxData 0058           __size_of_setRF_RxStatus 000E  
                 ??_CC2500_TxData 0058                         __pnvBANK0 005D            ?_CC2500_PowerOnInitial 0071  
             __size_of_setRF_Main 0071                   _setRF_ReceiveGO 059B      CC2500_ReadStatus@status_addr 0057  
                        _I2C_Main 02F8            CC2500_WriteByte@loop_a 0055                    __size_of_MainT 0069  
                       _r_address 003D      __end_of_CC2500_patable_vaule 0266                      _setRF_Enable 0361  
                       _setINT_GO 05BC            ??_setRF_Initialization 0054                 _CC2500_rfSettings 022F  
          __size_of_MainT_Initial 000F              __size_of_Mcu_Initial 0012                         clear_ram0 05C5  
        CC2500_InitPATable@loop_d 005B                _CC2500_ClearRXFIFO 05EC                _CC2500_ClearTXFIFO 05E8  
          setRF_ReceiveGO@command 0073                          _TMR1_ISR 03B5            CC2500_InitSetREG@temp1 005A  
          CC2500_InitSetREG@temp2 005B                 setRF_ReceiveGO@rf 0074                          _TMR1_Set 0539  
             ?_CC2500_ClearRXFIFO 0071               ?_CC2500_ClearTXFIFO 0071                          _RF_Count 0035  
            __end_of_RF_RxDisable 0405       __end_of_CC2500_WriteCommand 0583            ??_CC2500_FrequencyCabr 005A  
                __size_of_I2C_ISR 000F                  __size_of_I2C_Set 0016                  __size_of_INT_ISR 000C  
                __size_of_INT_Set 0005                        ?_setINT_GO 0071              ??_CC2500_ClearRXFIFO 0058  
            ??_CC2500_ClearTXFIFO 0058         __end_of_CC2500_rfSettings 025E                  __size_of_RF_Main 0004  
                _CC2500_WriteByte 0513                          _VarTMain 0040           __end_of_setRF_ReceiveGO 05A7  
                        _RxStatus 0383                          _TxStatus 0386          __size_ofi1_RfPointSelect 000A  
                   _MainT_Initial 0549                      ?_I2C_SetData 0071                      ??_setRF_Main 005A  
            CC2500_WriteREG@value 0056                          __ptext10 05D1                          __ptext11 0527  
                        __ptext20 05A7                          __ptext12 0539                          __ptext21 02F8  
                        __ptext13 04E9                          __ptext30 0583                          __ptext22 0184  
                        __ptext14 05D7                          __ptext31 042B                          __ptext23 00AE  
                        __ptext15 04BD                          __ptext40 05B2                          __ptext32 05E8  
                        __ptext24 04FE                          __ptext16 0549                          __ptext41 0558  
                        __ptext33 05EC                          __ptext25 05E4                          __ptext17 011B  
                        __ptext34 0575                          __ptext26 0333                          __ptext18 0361  
                        __ptext35 0513                          __ptext27 038B                          __ptext19 05BC  
                        __ptext28 0471                          __ptext37 03B5                          __ptext29 04D3  
                        __ptext38 058F                          __ptext39 059B                  ??_I2C_Slave_Mode 0054  
                   __size_of_main 0026          __end_of_CC2500_SIDLEMode 05E8                    _setRF_RxStatus 0567  
      CC2500_WriteCommand@command 0057                   _CC2500_ReadByte 0490                _CC2500_InitPATable 0471  
              __end_of_setRF_Main 00AE              _CC2500_patable_vaule 025E               ?_CC2500_InitPATable 0071  
                  ?_MainT_Initial 0071                   _CC2500_PowerRST 0333             setRF_RxStatus@command 0056  
                 _CC2500_WriteREG 04D3                     _Transceive_GO 0384                     _Transceive_OK 0385  
                     pic14e$flags 007E                       ??_setINT_GO 0054                          intlevel1 0000  
            ??_CC2500_InitPATable 0059            __end_of_setRF_RxStatus 0575           ??_CC2500_PowerOnInitial 005D  
                ?_setRF_ReceiveGO 0073            CC2500_InitPATable@temp 005A             __size_of_RF_RxDisable 0027  
               _RF_Initialization 05E0                ?_RF_Initialization 0071                        _SPI0Buffer 003A  
             ??_RF_Initialization 0055                   I2C_Slave_Mode@i 0056            __size_of_RfPointSelect 000B  
               ??i1_RfPointSelect 0071             __end_of_DelayTime_1us 0451           __end_of_CC2500_ReadByte 04A7  
                 ?_setRF_RxStatus 0056                      _RF_RxDisable 03DE         __end_of_RF_Initialization 05E4  
                setRF_RxStatus@rf 0057             __end_of_CC2500_RxData 02BB             __end_of_CC2500_TxData 02F8  
         __end_of_CC2500_PowerRST 0361  
