

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Sep 18 00:08:16 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  0010                     	;# 
    63  0011                     	;# 
    64  0012                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0016                     	;# 
    68  0017                     	;# 
    69  0018                     	;# 
    70  0019                     	;# 
    71  001A                     	;# 
    72  001B                     	;# 
    73  001C                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  0090                     	;# 
    78  0091                     	;# 
    79  0092                     	;# 
    80  0095                     	;# 
    81  0096                     	;# 
    82  0097                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009E                     	;# 
    90  010C                     	;# 
    91  010D                     	;# 
    92  010E                     	;# 
    93  0116                     	;# 
    94  0117                     	;# 
    95  011D                     	;# 
    96  018C                     	;# 
    97  018D                     	;# 
    98  018E                     	;# 
    99  0191                     	;# 
   100  0191                     	;# 
   101  0192                     	;# 
   102  0193                     	;# 
   103  0193                     	;# 
   104  0194                     	;# 
   105  0195                     	;# 
   106  0196                     	;# 
   107  0197                     	;# 
   108  0199                     	;# 
   109  019A                     	;# 
   110  019B                     	;# 
   111  019B                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019C                     	;# 
   115  019C                     	;# 
   116  019D                     	;# 
   117  019E                     	;# 
   118  019F                     	;# 
   119  020D                     	;# 
   120  0210                     	;# 
   121  0211                     	;# 
   122  0211                     	;# 
   123  0212                     	;# 
   124  0212                     	;# 
   125  0213                     	;# 
   126  0213                     	;# 
   127  0214                     	;# 
   128  0214                     	;# 
   129  0215                     	;# 
   130  0215                     	;# 
   131  0215                     	;# 
   132  0216                     	;# 
   133  0216                     	;# 
   134  0217                     	;# 
   135  0217                     	;# 
   136  0291                     	;# 
   137  0291                     	;# 
   138  0292                     	;# 
   139  0293                     	;# 
   140  0298                     	;# 
   141  0298                     	;# 
   142  0299                     	;# 
   143  029A                     	;# 
   144  0394                     	;# 
   145  0395                     	;# 
   146  0396                     	;# 
   147  0FE4                     	;# 
   148  0FE5                     	;# 
   149  0FE6                     	;# 
   150  0FE7                     	;# 
   151  0FE8                     	;# 
   152  0FE9                     	;# 
   153  0FEA                     	;# 
   154  0FEB                     	;# 
   155  0FED                     	;# 
   156  0FEE                     	;# 
   157  0FEF                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  0116                     	;# 
   205  0117                     	;# 
   206  011D                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0197                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019C                     	;# 
   226  019C                     	;# 
   227  019D                     	;# 
   228  019E                     	;# 
   229  019F                     	;# 
   230  020D                     	;# 
   231  0210                     	;# 
   232  0211                     	;# 
   233  0211                     	;# 
   234  0212                     	;# 
   235  0212                     	;# 
   236  0213                     	;# 
   237  0213                     	;# 
   238  0214                     	;# 
   239  0214                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0216                     	;# 
   245  0217                     	;# 
   246  0217                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0298                     	;# 
   252  0298                     	;# 
   253  0299                     	;# 
   254  029A                     	;# 
   255  0394                     	;# 
   256  0395                     	;# 
   257  0396                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0095                     	;# 
   303  0096                     	;# 
   304  0097                     	;# 
   305  0099                     	;# 
   306  009A                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  010C                     	;# 
   313  010D                     	;# 
   314  010E                     	;# 
   315  0116                     	;# 
   316  0117                     	;# 
   317  011D                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  018E                     	;# 
   321  0191                     	;# 
   322  0191                     	;# 
   323  0192                     	;# 
   324  0193                     	;# 
   325  0193                     	;# 
   326  0194                     	;# 
   327  0195                     	;# 
   328  0196                     	;# 
   329  0197                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019D                     	;# 
   339  019E                     	;# 
   340  019F                     	;# 
   341  020D                     	;# 
   342  0210                     	;# 
   343  0211                     	;# 
   344  0211                     	;# 
   345  0212                     	;# 
   346  0212                     	;# 
   347  0213                     	;# 
   348  0213                     	;# 
   349  0214                     	;# 
   350  0214                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0216                     	;# 
   355  0216                     	;# 
   356  0217                     	;# 
   357  0217                     	;# 
   358  0291                     	;# 
   359  0291                     	;# 
   360  0292                     	;# 
   361  0293                     	;# 
   362  0298                     	;# 
   363  0298                     	;# 
   364  0299                     	;# 
   365  029A                     	;# 
   366  0394                     	;# 
   367  0395                     	;# 
   368  0396                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380                           
   381                           	psect	idataBANK0
   382  071C                     __pidataBANK0:	
   383                           
   384                           ;initializer for _VarSegment
   385  071C  34C0               	retlw	192
   386  071D  34F9               	retlw	249
   387  071E  34A4               	retlw	164
   388  071F  34B0               	retlw	176
   389  0720  3499               	retlw	153
   390  0721  3492               	retlw	146
   391  0722  3482               	retlw	130
   392  0723  34D8               	retlw	216
   393  0724  3480               	retlw	128
   394  0725  3490               	retlw	144
   395  0726  3488               	retlw	136
   396  0727  3483               	retlw	131
   397  0728  34A7               	retlw	167
   398  0729  34A1               	retlw	161
   399  072A  3486               	retlw	134
   400  072B  348E               	retlw	142
   401  072C  34BF               	retlw	191
   402  072D  3400               	retlw	0
   403  072E  3400               	retlw	0
   404  072F  3400               	retlw	0
   405  0730  3400               	retlw	0
   406  0731  3400               	retlw	0
   407  0732  3400               	retlw	0
   408  0733  3400               	retlw	0
   409  0734  3400               	retlw	0
   410  0735  3400               	retlw	0
   411                           
   412                           	psect	idataBANK1
   413  05ED                     __pidataBANK1:	
   414                           
   415                           ;initializer for _VarProduct
   416  05ED  3463               	retlw	99
   417  05EE  3402               	retlw	2
   418  05EF  3400               	retlw	0
   419  05F0  3400               	retlw	0
   420  05F1  3400               	retlw	0
   421  05F2  3400               	retlw	0
   422  05F3  3400               	retlw	0
   423  05F4  3400               	retlw	0
   424  05F5  3400               	retlw	0
   425  05F6  3400               	retlw	0
   426  05F7  3400               	retlw	0
   427  05F8  3400               	retlw	0
   428  05F9  34FF               	retlw	255
   429  05FA  34FF               	retlw	255
   430  05FB  34FF               	retlw	255
   431  05FC  3400               	retlw	0
   432  05FD  3400               	retlw	0
   433  05FE  3400               	retlw	0
   434  05FF  3400               	retlw	0
   435  0600  3400               	retlw	0
   436  0601  3400               	retlw	0
   437  0602  3400               	retlw	0
   438  0603  3400               	retlw	0
   439  0604  3400               	retlw	0
   440  0605  3400               	retlw	0
   441  0606  3400               	retlw	0
   442  0607  3400               	retlw	0
   443  0608  3400               	retlw	0
   444  0609  3400               	retlw	0
   445  060A  3400               	retlw	0
   446  060B  3400               	retlw	0
   447  060C  3400               	retlw	0
   448                           
   449                           	psect	stringtext
   450  0700                     __pstringtext:	
   451  0700                     _hexpowers:	
   452  0700  3401               	retlw	1
   453  0701  3400               	retlw	0
   454  0702  3410               	retlw	16
   455  0703  3400               	retlw	0
   456  0704  3400               	retlw	0
   457  0705  3401               	retlw	1
   458  0706  3400               	retlw	0
   459  0707  3410               	retlw	16
   460  0708                     __end_of_hexpowers:	
   461  0708                     __stringdata:	
   462  0708                     STR_2:	
   463  0708  3430               	retlw	48	;'0'
   464  0709  3431               	retlw	49	;'1'
   465  070A  3432               	retlw	50	;'2'
   466  070B  3433               	retlw	51	;'3'
   467  070C  3434               	retlw	52	;'4'
   468  070D  3435               	retlw	53	;'5'
   469  070E  3436               	retlw	54	;'6'
   470  070F  3437               	retlw	55	;'7'
   471  0710  3438               	retlw	56	;'8'
   472  0711  3439               	retlw	57	;'9'
   473  0712  3461               	retlw	97	;'a'
   474  0713  3462               	retlw	98	;'b'
   475  0714  3463               	retlw	99	;'c'
   476  0715  3464               	retlw	100	;'d'
   477  0716  3465               	retlw	101	;'e'
   478  0717  3466               	retlw	102	;'f'
   479  0718  3400               	retlw	0
   480  0719                     STR_1:	
   481  0719  3425               	retlw	37	;'%'
   482  071A  3478               	retlw	120	;'x'
   483  071B  3400               	retlw	0
   484  071C                     __end_of__stringdata:	
   485                           
   486                           ; #config settings
   487  0000                     
   488                           	psect	nvCOMMON
   489  007A                     __pnvCOMMON:	
   490  007A                     _TMain:	
   491  007A                     	ds	1
   492                           
   493                           	psect	nvBANK0
   494  0066                     __pnvBANK0:	
   495  0066                     _Product:	
   496  0066                     	ds	1
   497  000C                     _PORTA	set	12
   498  000D                     _PORTB	set	13
   499  000E                     _PORTC	set	14
   500  0018                     _T1CON	set	24
   501  0017                     _TMR1H	set	23
   502  0016                     _TMR1L	set	22
   503  005F                     _GIE	set	95
   504  005E                     _PEIE	set	94
   505  0061                     _RA1	set	97
   506  0062                     _RA2	set	98
   507  0064                     _RA4	set	100
   508  0065                     _RA5	set	101
   509  0066                     _RA6	set	102
   510  0067                     _RA7	set	103
   511  0070                     _RC0	set	112
   512  008D                     _RCIF	set	141
   513  008B                     _SSPIF	set	139
   514  0088                     _TMR1IF	set	136
   515  008C                     _TXIF	set	140
   516  0099                     _OSCCON	set	153
   517  008C                     _TRISA	set	140
   518  008D                     _TRISB	set	141
   519  008E                     _TRISC	set	142
   520  048D                     _RCIE	set	1165
   521  048B                     _SSPIE	set	1163
   522  0488                     _TMR1IE	set	1160
   523  0476                     _TRISC6	set	1142
   524  0477                     _TRISC7	set	1143
   525  048C                     _TXIE	set	1164
   526  010C                     _LATA	set	268
   527  010D                     _LATB	set	269
   528  010E                     _LATC	set	270
   529  018C                     _ANSELA	set	396
   530  018D                     _ANSELB	set	397
   531  018E                     _ANSELC	set	398
   532  0199                     _RCREG	set	409
   533  019D                     _RCSTA	set	413
   534  019B                     _SPBRG	set	411
   535  019C                     _SPBRGH	set	412
   536  019A                     _TXREG	set	410
   537  019E                     _TXSTA	set	414
   538  0CFB                     _BRG16	set	3323
   539  0CFE                     _RCIDL	set	3326
   540  0CEE                     _RX9	set	3310
   541  0CF1                     _TRMT	set	3313
   542  0CF6                     _TX9	set	3318
   543  0212                     _SSPADD	set	530
   544  0211                     _SSPBUF	set	529
   545  0215                     _SSPCON1	set	533
   546  0216                     _SSPCON2	set	534
   547  0214                     _SSPSTAT	set	532
   548  10B4                     _ACKEN	set	4276
   549  10B6                     _ACKSTAT	set	4278
   550  10A0                     _BF	set	4256
   551  10AC                     _CKP	set	4268
   552  10B2                     _PEN	set	4274
   553  10B3                     _RCEN	set	4275
   554  10A2                     _R_nW	set	4258
   555  10B0                     _SEN	set	4272
   556  10AE                     _SSPOV	set	4270
   557                           
   558                           	psect	cinit
   559  001B                     start_initialization:	
   560  001B                     __initialization:	
   561                           
   562                           ; Clear objects allocated to COMMON
   563  001B  01F8               	clrf	__pbssCOMMON& (0+127)
   564  001C  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   565                           
   566                           ; Clear objects allocated to BANK0
   567  001D  3052               	movlw	low __pbssBANK0
   568  001E  0084               	movwf	4
   569  001F  3000               	movlw	high __pbssBANK0
   570  0020  0085               	movwf	5
   571  0021  3014               	movlw	20
   572  0022  3187  27CA  3180   	fcall	clear_ram0
   573                           
   574                           ; Clear objects allocated to BANK2
   575  0025  3020               	movlw	low __pbssBANK2
   576  0026  0084               	movwf	4
   577  0027  3001               	movlw	high __pbssBANK2
   578  0028  0085               	movwf	5
   579  0029  3044               	movlw	68
   580  002A  3187  27CA  3180   	fcall	clear_ram0
   581                           
   582                           ; Clear objects allocated to BANK3
   583  002D  30A0               	movlw	low __pbssBANK3
   584  002E  0084               	movwf	4
   585  002F  3001               	movlw	high __pbssBANK3
   586  0030  0085               	movwf	5
   587  0031  3043               	movlw	67
   588  0032  3187  27CA  3180   	fcall	clear_ram0
   589                           
   590                           ; Initialize objects allocated to BANK0
   591  0035  301C               	movlw	low __pidataBANK0
   592  0036  0084               	movwf	4
   593  0037  3087               	movlw	(high __pidataBANK0)| (0+128)
   594  0038  0085               	movwf	5
   595  0039  3020               	movlw	low __pdataBANK0
   596  003A  0086               	movwf	6
   597  003B  3000               	movlw	high __pdataBANK0
   598  003C  0087               	movwf	7
   599  003D  301A               	movlw	26
   600  003E  3187  27D0  3180   	fcall	init_ram
   601                           
   602                           ; Initialize objects allocated to BANK1
   603  0041  30ED               	movlw	low __pidataBANK1
   604  0042  0084               	movwf	4
   605  0043  3085               	movlw	(high __pidataBANK1)| (0+128)
   606  0044  0085               	movwf	5
   607  0045  30A0               	movlw	low __pdataBANK1
   608  0046  0086               	movwf	6
   609  0047  3000               	movlw	high __pdataBANK1
   610  0048  0087               	movwf	7
   611  0049  3020               	movlw	32
   612  004A  3187  27D0         	fcall	init_ram
   613  004C                     end_of_initialization:	
   614                           ;End of C runtime variable initialization code
   615                           
   616  004C                     __end_of__initialization:	
   617  004C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   618  004D  0020               	movlb	0
   619  004E  3185  2D81         	ljmp	_main	;jump to C main() function
   620                           
   621                           	psect	bssCOMMON
   622  0078                     __pbssCOMMON:	
   623  0078                     _UART:	
   624  0078                     	ds	1
   625  0079                     _I2C:	
   626  0079                     	ds	1
   627                           
   628                           	psect	bssBANK0
   629  0052                     __pbssBANK0:	
   630  0052                     _Timer1:	
   631  0052                     	ds	1
   632  0053                     _VarTMain:	
   633  0053                     	ds	15
   634  0062                     _VarTimer1:	
   635  0062                     	ds	3
   636  0065                     _Segment:	
   637  0065                     	ds	1
   638                           
   639                           	psect	dataBANK0
   640  0020                     __pdataBANK0:	
   641  0020                     _VarSegment:	
   642  0020                     	ds	26
   643                           
   644                           	psect	dataBANK1
   645  00A0                     __pdataBANK1:	
   646  00A0                     _VarProduct:	
   647  00A0                     	ds	32
   648                           
   649                           	psect	bssBANK2
   650  0120                     __pbssBANK2:	
   651  0120                     _VarUart:	
   652  0120                     	ds	68
   653                           
   654                           	psect	bssBANK3
   655  01A0                     __pbssBANK3:	
   656  01A0                     _VarI2C:	
   657  01A0                     	ds	67
   658                           
   659                           	psect	clrtext
   660  07CA                     clear_ram0:	
   661                           ;	Called with FSR0 containing the base address, and
   662                           ;	WREG with the size to clear
   663                           
   664  07CA  0064               	clrwdt	;clear the watchdog before getting into this loop
   665  07CB                     clrloop0:	
   666  07CB  0180               	clrf	0	;clear RAM location pointed to by FSR
   667  07CC  3101               	addfsr 0,1
   668  07CD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   669  07CE  2FCB               	goto	clrloop0	;have we reached the end yet?
   670  07CF  3400               	retlw	0	;all done for this memory range, return
   671                           
   672                           	psect	inittext
   673  07D0                     init_ram:	
   674  07D0  00FE               	movwf	126
   675  07D1                     initloop:	
   676  07D1  0012               	moviw fsr0++
   677  07D2  001E               	movwi fsr1++
   678  07D3  0BFE               	decfsz	126,f
   679  07D4  2FD1               	goto	initloop
   680  07D5  3400               	retlw	0
   681                           
   682                           	psect	cstackCOMMON
   683  0070                     __pcstackCOMMON:	
   684  0070                     ?_IO_Set:	
   685  0070                     ?_TMR1_Set:	
   686                           ; 0 bytes @ 0x0
   687                           
   688  0070                     ?_I2C_Set:	
   689                           ; 0 bytes @ 0x0
   690                           
   691  0070                     ?_UART_Set:	
   692                           ; 0 bytes @ 0x0
   693                           
   694  0070                     ?_TMR1_ISR:	
   695                           ; 0 bytes @ 0x0
   696                           
   697  0070                     ??_TMR1_ISR:	
   698                           ; 0 bytes @ 0x0
   699                           
   700  0070                     ?_UART_ISR:	
   701                           ; 0 bytes @ 0x0
   702                           
   703  0070                     ??_UART_ISR:	
   704                           ; 0 bytes @ 0x0
   705                           
   706  0070                     ?_I2C_ISR:	
   707                           ; 0 bytes @ 0x0
   708                           
   709  0070                     ??_I2C_ISR:	
   710                           ; 0 bytes @ 0x0
   711                           
   712  0070                     ?_I2C_Master_Reception:	
   713                           ; 0 bytes @ 0x0
   714                           
   715  0070                     ?_I2C_Master_Transmission:	
   716                           ; 0 bytes @ 0x0
   717                           
   718  0070                     ?_UART_Receive:	
   719                           ; 0 bytes @ 0x0
   720                           
   721  0070                     ?_UART_Transmit:	
   722                           ; 0 bytes @ 0x0
   723                           
   724  0070                     ?_MainT_Initial:	
   725                           ; 0 bytes @ 0x0
   726                           
   727  0070                     ?_SegmentDisplay_Initial:	
   728                           ; 0 bytes @ 0x0
   729                           
   730  0070                     ?_MainT:	
   731                           ; 0 bytes @ 0x0
   732                           
   733  0070                     ?_SegmentDisplay_Main:	
   734                           ; 0 bytes @ 0x0
   735                           
   736  0070                     ?_Mcu_Initial:	
   737                           ; 0 bytes @ 0x0
   738                           
   739  0070                     ?_ISR:	
   740                           ; 0 bytes @ 0x0
   741                           
   742  0070                     ?_I2C_Main:	
   743                           ; 0 bytes @ 0x0
   744                           
   745  0070                     ?_UART_Main:	
   746                           ; 0 bytes @ 0x0
   747                           
   748  0070                     ?_putch:	
   749                           ; 0 bytes @ 0x0
   750                           
   751  0070                     ?_main:	
   752                           ; 0 bytes @ 0x0
   753                           
   754                           
   755                           ; 0 bytes @ 0x0
   756  0070                     	ds	2
   757  0072                     ??_ISR:	
   758                           
   759                           ; 0 bytes @ 0x2
   760  0072                     	ds	1
   761  0073                     ??_IO_Set:	
   762  0073                     ??_TMR1_Set:	
   763                           ; 0 bytes @ 0x3
   764                           
   765  0073                     ??_I2C_Set:	
   766                           ; 0 bytes @ 0x3
   767                           
   768  0073                     ??_UART_Set:	
   769                           ; 0 bytes @ 0x3
   770                           
   771  0073                     ??_I2C_Master_Reception:	
   772                           ; 0 bytes @ 0x3
   773                           
   774  0073                     ??_I2C_Master_Transmission:	
   775                           ; 0 bytes @ 0x3
   776                           
   777  0073                     ??_UART_Receive:	
   778                           ; 0 bytes @ 0x3
   779                           
   780  0073                     ??_MainT_Initial:	
   781                           ; 0 bytes @ 0x3
   782                           
   783  0073                     ??_SegmentDisplay_Initial:	
   784                           ; 0 bytes @ 0x3
   785                           
   786  0073                     ??_SegmentDisplay_Main:	
   787                           ; 0 bytes @ 0x3
   788                           
   789  0073                     ??_putch:	
   790                           ; 0 bytes @ 0x3
   791                           
   792  0073                     ?___awdiv:	
   793                           ; 0 bytes @ 0x3
   794                           
   795  0073                     ?___awmod:	
   796                           ; 2 bytes @ 0x3
   797                           
   798  0073                     ?___lwdiv:	
   799                           ; 2 bytes @ 0x3
   800                           
   801  0073                     putch@byte:	
   802                           ; 2 bytes @ 0x3
   803                           
   804  0073                     ___awdiv@divisor:	
   805                           ; 1 bytes @ 0x3
   806                           
   807  0073                     ___awmod@divisor:	
   808                           ; 2 bytes @ 0x3
   809                           
   810  0073                     ___lwdiv@divisor:	
   811                           ; 2 bytes @ 0x3
   812                           
   813                           
   814                           ; 2 bytes @ 0x3
   815  0073                     	ds	1
   816  0074                     ??_Mcu_Initial:	
   817  0074                     I2C_Master_Transmission@i:	
   818                           ; 0 bytes @ 0x4
   819                           
   820                           
   821                           ; 1 bytes @ 0x4
   822  0074                     	ds	1
   823  0075                     I2C_Master_Reception@i:	
   824  0075                     ___awdiv@dividend:	
   825                           ; 1 bytes @ 0x5
   826                           
   827  0075                     ___awmod@dividend:	
   828                           ; 2 bytes @ 0x5
   829                           
   830  0075                     ___lwdiv@dividend:	
   831                           ; 2 bytes @ 0x5
   832                           
   833                           
   834                           ; 2 bytes @ 0x5
   835  0075                     	ds	1
   836  0076                     I2C_Main@i:	
   837  0076                     UART_Receive@i:	
   838                           ; 1 bytes @ 0x6
   839                           
   840                           
   841                           ; 1 bytes @ 0x6
   842  0076                     	ds	1
   843  0077                     ??___awdiv:	
   844  0077                     ??___awmod:	
   845                           ; 0 bytes @ 0x7
   846                           
   847  0077                     ??___lwdiv:	
   848                           ; 0 bytes @ 0x7
   849                           
   850                           
   851                           ; 0 bytes @ 0x7
   852  0077                     	ds	1
   853  0078                     ??_UART_Main:	
   854  0078                     ??_main:	
   855                           ; 0 bytes @ 0x8
   856                           
   857                           
   858                           	psect	cstackBANK0
   859  003A                     __pcstackBANK0:	
   860                           ; 0 bytes @ 0x8
   861                           
   862  003A                     ??_I2C_Main:	
   863  003A                     ___awdiv@counter:	
   864                           ; 0 bytes @ 0x0
   865                           
   866  003A                     ___awmod@counter:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  003A                     ___lwdiv@counter:	
   870                           ; 1 bytes @ 0x0
   871                           
   872                           
   873                           ; 1 bytes @ 0x0
   874  003A                     	ds	1
   875  003B                     ___awdiv@sign:	
   876  003B                     ___awmod@sign:	
   877                           ; 1 bytes @ 0x1
   878                           
   879  003B                     ___lwdiv@quotient:	
   880                           ; 1 bytes @ 0x1
   881                           
   882                           
   883                           ; 2 bytes @ 0x1
   884  003B                     	ds	1
   885  003C                     ___awdiv@quotient:	
   886                           
   887                           ; 2 bytes @ 0x2
   888  003C                     	ds	1
   889  003D                     ?_printf:	
   890  003D                     printf@f:	
   891                           ; 2 bytes @ 0x3
   892                           
   893                           
   894                           ; 2 bytes @ 0x3
   895  003D                     	ds	1
   896  003E                     ?_setSegmentDisplayNumber:	
   897  003E                     setSegmentDisplayNumber@number:	
   898                           ; 0 bytes @ 0x4
   899                           
   900                           
   901                           ; 2 bytes @ 0x4
   902  003E                     	ds	2
   903  0040                     ??_setSegmentDisplayNumber:	
   904                           
   905                           ; 0 bytes @ 0x6
   906  0040                     	ds	1
   907  0041                     ??_printf:	
   908                           
   909                           ; 0 bytes @ 0x7
   910  0041                     	ds	3
   911  0044                     setSegmentDisplayNumber@i:	
   912                           
   913                           ; 1 bytes @ 0xA
   914  0044                     	ds	1
   915  0045                     ??_MainT:	
   916  0045                     printf@flag:	
   917                           ; 0 bytes @ 0xB
   918                           
   919                           
   920                           ; 1 bytes @ 0xB
   921  0045                     	ds	1
   922  0046                     printf@idx:	
   923                           
   924                           ; 1 bytes @ 0xC
   925  0046                     	ds	1
   926  0047                     printf@ap:	
   927                           
   928                           ; 1 bytes @ 0xD
   929  0047                     	ds	1
   930  0048                     printf@_val:	
   931                           
   932                           ; 4 bytes @ 0xE
   933  0048                     	ds	4
   934  004C                     printf@prec:	
   935                           
   936                           ; 1 bytes @ 0x12
   937  004C                     	ds	1
   938  004D                     printf@c:	
   939                           
   940                           ; 1 bytes @ 0x13
   941  004D                     	ds	1
   942  004E                     ??_UART_Transmit:	
   943                           
   944                           ; 0 bytes @ 0x14
   945  004E                     	ds	3
   946  0051                     UART_Transmit@i:	
   947                           
   948                           ; 1 bytes @ 0x17
   949  0051                     	ds	1
   950                           
   951                           	psect	maintext
   952  0581                     __pmaintext:	
   953 ;;
   954 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   955 ;;
   956 ;; *************** function _main *****************
   957 ;; Defined at:
   958 ;;		line 6 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;		None               void
   965 ;; Registers used:
   966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 17F/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   972 ;;      Params:         0       0       0       0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0       0
   975 ;;      Totals:         0       0       0       0       0       0       0       0
   976 ;;Total ram usage:        0 bytes
   977 ;; Hardware stack levels required when called:    6
   978 ;; This function calls:
   979 ;;		_I2C_Main
   980 ;;		_MainT
   981 ;;		_MainT_Initial
   982 ;;		_Mcu_Initial
   983 ;;		_SegmentDisplay_Initial
   984 ;;		_SegmentDisplay_Main
   985 ;;		_UART_Main
   986 ;; This function is called by:
   987 ;;		Startup code after reset
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           
   992                           ;psect for function _main
   993  0581                     _main:	
   994                           
   995                           ;myMain.c: 8: MainT_Initial();
   996                           
   997                           ;incstack = 0
   998                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   999  0581  3187  2797  3185   	fcall	_MainT_Initial
  1000                           
  1001                           ;myMain.c: 9: Mcu_Initial();
  1002  0584  3187  2764  3185   	fcall	_Mcu_Initial
  1003                           
  1004                           ;myMain.c: 10: SegmentDisplay_Initial();
  1005  0587  3187  2777  3185   	fcall	_SegmentDisplay_Initial
  1006                           
  1007                           ;myMain.c: 11: ;;
  1008                           ;myMain.c: 12: __nop();
  1009  058A  0000               	nop
  1010  058B                     l2355:	
  1011                           ;myMain.c: 13: while(1)
  1012                           
  1013                           
  1014                           ;myMain.c: 14: {
  1015                           ;myMain.c: 17: if(TMain->T1_Timerout)
  1016  058B  087A               	movf	_TMain,w
  1017  058C  0086               	movwf	6
  1018  058D  0187               	clrf	7
  1019  058E  1D01               	btfss	1,2
  1020  058F  2D8B               	goto	l2355
  1021                           
  1022                           ;myMain.c: 18: {
  1023                           ;myMain.c: 19: TMain->T1_Timerout = 0;
  1024  0590  087A               	movf	_TMain,w
  1025  0591  0086               	movwf	6
  1026  0592  0187               	clrf	7
  1027  0593  1101               	bcf	1,2
  1028                           
  1029                           ;myMain.c: 20: MainT();
  1030  0594  3182  2224  3185   	fcall	_MainT
  1031                           
  1032                           ;myMain.c: 21: if(TMain->PowerON)
  1033  0597  087A               	movf	_TMain,w
  1034  0598  0086               	movwf	6
  1035  0599  0187               	clrf	7
  1036  059A  1C01               	btfss	1,0
  1037  059B  2D8B               	goto	l2355
  1038                           
  1039                           ;myMain.c: 22: {
  1040                           ;myMain.c: 23: ;;
  1041                           ;myMain.c: 24: I2C_Main();
  1042  059C  3183  232D  3185   	fcall	_I2C_Main
  1043                           
  1044                           ;myMain.c: 25: UART_Main();
  1045  059F  3185  25CB  3185   	fcall	_UART_Main
  1046                           
  1047                           ;myMain.c: 26: SegmentDisplay_Main();
  1048  05A2  3182  22BA  3185   	fcall	_SegmentDisplay_Main
  1049  05A5  2D8B               	goto	l2355
  1050  05A6                     __end_of_main:	
  1051                           
  1052                           	psect	text1
  1053  05CB                     __ptext1:	
  1054 ;; *************** function _UART_Main *****************
  1055 ;; Defined at:
  1056 ;;		line 533 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;		None
  1061 ;; Return value:  Size  Location     Type
  1062 ;;		None               void
  1063 ;; Registers used:
  1064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1070 ;;      Params:         0       0       0       0       0       0       0       0
  1071 ;;      Locals:         0       0       0       0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0       0
  1073 ;;      Totals:         0       0       0       0       0       0       0       0
  1074 ;;Total ram usage:        0 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    5
  1077 ;; This function calls:
  1078 ;;		_UART_Receive
  1079 ;;		_UART_Transmit
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           
  1086                           ;psect for function _UART_Main
  1087  05CB                     _UART_Main:	
  1088                           
  1089                           ;MCU_16f1516_B1.c: 535: if(UART->RxGO)
  1090                           
  1091                           ;incstack = 0
  1092                           ; Regs used in _UART_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1093  05CB  0878               	movf	_UART,w
  1094  05CC  3E43               	addlw	67
  1095  05CD  0086               	movwf	6
  1096  05CE  3001               	movlw	1	; select bank2/3
  1097  05CF  0087               	movwf	7
  1098  05D0  1C81               	btfss	1,1
  1099  05D1  2DDD               	goto	l2307
  1100                           
  1101                           ;MCU_16f1516_B1.c: 536: {
  1102                           ;MCU_16f1516_B1.c: 537: UART->RxGO=0;
  1103  05D2  0878               	movf	_UART,w
  1104  05D3  3E43               	addlw	67
  1105  05D4  0086               	movwf	6
  1106  05D5  3001               	movlw	1	; select bank2/3
  1107  05D6  0087               	movwf	7
  1108  05D7  1081               	bcf	1,1
  1109                           
  1110                           ;MCU_16f1516_B1.c: 538: UART_Receive();
  1111  05D8  3185  252A         	fcall	_UART_Receive
  1112                           
  1113                           ;MCU_16f1516_B1.c: 539: RCIE=1;
  1114  05DA  0021               	movlb	1	; select bank1
  1115  05DB  1691               	bsf	17,5	;volatile
  1116                           
  1117                           ;MCU_16f1516_B1.c: 540: }
  1118  05DC  0008               	return
  1119  05DD                     l2307:	
  1120                           
  1121                           ;MCU_16f1516_B1.c: 541: else
  1122                           ;MCU_16f1516_B1.c: 542: {
  1123                           ;MCU_16f1516_B1.c: 543: if(UART->TxGO)
  1124  05DD  0878               	movf	_UART,w
  1125  05DE  3E43               	addlw	67
  1126  05DF  0086               	movwf	6
  1127  05E0  3001               	movlw	1	; select bank2/3
  1128  05E1  0087               	movwf	7
  1129  05E2  1C01               	btfss	1,0
  1130  05E3  0008               	return
  1131                           
  1132                           ;MCU_16f1516_B1.c: 544: {
  1133                           ;MCU_16f1516_B1.c: 545: UART->TxGO=0;
  1134  05E4  0878               	movf	_UART,w
  1135  05E5  3E43               	addlw	67
  1136  05E6  0086               	movwf	6
  1137  05E7  3001               	movlw	1	; select bank2/3
  1138  05E8  0087               	movwf	7
  1139  05E9  1001               	bcf	1,0
  1140                           
  1141                           ;MCU_16f1516_B1.c: 546: UART_Transmit();
  1142  05EA  3185  25A6         	fcall	_UART_Transmit
  1143  05EC  0008               	return
  1144  05ED                     __end_of_UART_Main:	
  1145                           
  1146                           	psect	text2
  1147  05A6                     __ptext2:	
  1148 ;; *************** function _UART_Transmit *****************
  1149 ;; Defined at:
  1150 ;;		line 550 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  i               1   23[BANK0 ] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;		None               void
  1157 ;; Registers used:
  1158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1164 ;;      Params:         0       0       0       0       0       0       0       0
  1165 ;;      Locals:         0       1       0       0       0       0       0       0
  1166 ;;      Temps:          0       3       0       0       0       0       0       0
  1167 ;;      Totals:         0       4       0       0       0       0       0       0
  1168 ;;Total ram usage:        4 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    4
  1171 ;; This function calls:
  1172 ;;		_printf
  1173 ;; This function is called by:
  1174 ;;		_UART_Main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           
  1179                           ;psect for function _UART_Transmit
  1180  05A6                     _UART_Transmit:	
  1181                           
  1182                           ;MCU_16f1516_B1.c: 552: char i;
  1183                           ;MCU_16f1516_B1.c: 553: for(i=0;i<32;i++)
  1184                           
  1185                           ;incstack = 0
  1186                           ; Regs used in _UART_Transmit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1187  05A6  0020               	movlb	0	; select bank0
  1188  05A7  01D1               	clrf	UART_Transmit@i
  1189  05A8                     L1:	
  1190  05A8  3020               	movlw	32
  1191  05A9  0251               	subwf	UART_Transmit@i,w
  1192  05AA  1803               	btfsc	3,0
  1193  05AB  0008               	return
  1194  05AC                     l333:	
  1195                           ;MCU_16f1516_B1.c: 554: {
  1196                           ;MCU_16f1516_B1.c: 555: while(!TRMT);
  1197                           
  1198  05AC  0023               	movlb	3	; select bank3
  1199  05AD  1C9E               	btfss	30,1	;volatile
  1200  05AE  2DAC               	goto	l333
  1201                           
  1202                           ;MCU_16f1516_B1.c: 556: printf("%x",UART->TxData[i]);
  1203  05AF  3019               	movlw	low (STR_1| (0+32768))
  1204  05B0  0020               	movlb	0	; select bank0
  1205  05B1  00BD               	movwf	printf@f
  1206  05B2  3087               	movlw	high (STR_1| (0+32768))
  1207  05B3  00BE               	movwf	printf@f+1
  1208  05B4  0851               	movf	UART_Transmit@i,w
  1209  05B5  0778               	addwf	_UART,w
  1210  05B6  00CE               	movwf	??_UART_Transmit
  1211  05B7  084E               	movf	??_UART_Transmit,w
  1212  05B8  0086               	movwf	6
  1213  05B9  3001               	movlw	1	; select bank2/3
  1214  05BA  0087               	movwf	7
  1215  05BB  0801               	movf	1,w
  1216  05BC  00CF               	movwf	??_UART_Transmit+1
  1217  05BD  01D0               	clrf	??_UART_Transmit+2
  1218  05BE  084F               	movf	??_UART_Transmit+1,w
  1219  05BF  00BF               	movwf	?_printf+2
  1220  05C0  0850               	movf	??_UART_Transmit+2,w
  1221  05C1  00C0               	movwf	?_printf+3
  1222  05C2  3181  2181  3185   	fcall	_printf
  1223  05C5  3001               	movlw	1
  1224  05C6  0020               	movlb	0	; select bank0
  1225  05C7  00CE               	movwf	??_UART_Transmit
  1226  05C8  084E               	movf	??_UART_Transmit,w
  1227  05C9  07D1               	addwf	UART_Transmit@i,f
  1228  05CA  2DA8               	goto	L1
  1229  05CB                     __end_of_UART_Transmit:	
  1230                           
  1231                           	psect	text3
  1232  0181                     __ptext3:	
  1233 ;; *************** function _printf *****************
  1234 ;; Defined at:
  1235 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  1238 ;;		 -> STR_1(3), 
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  idx             1   12[BANK0 ] unsigned char 
  1241 ;;  _val            4   14[BANK0 ] struct .
  1242 ;;  c               1   19[BANK0 ] char 
  1243 ;;  prec            1   18[BANK0 ] char 
  1244 ;;  ap              1   13[BANK0 ] PTR void [1]
  1245 ;;		 -> ?_printf(2), 
  1246 ;;  flag            1   11[BANK0 ] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  2    3[BANK0 ] int 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1256 ;;      Params:         0       4       0       0       0       0       0       0
  1257 ;;      Locals:         0       9       0       0       0       0       0       0
  1258 ;;      Temps:          0       4       0       0       0       0       0       0
  1259 ;;      Totals:         0      17       0       0       0       0       0       0
  1260 ;;Total ram usage:       17 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    3
  1263 ;; This function calls:
  1264 ;;		___lwdiv
  1265 ;;		_putch
  1266 ;; This function is called by:
  1267 ;;		_UART_Transmit
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           
  1272                           ;psect for function _printf
  1273  0181                     _printf:	
  1274                           
  1275                           ;doprnt.c: 466: va_list ap;
  1276                           ;doprnt.c: 499: signed char c;
  1277                           ;doprnt.c: 506: signed char prec;
  1278                           ;doprnt.c: 508: unsigned char flag;
  1279                           ;doprnt.c: 527: union {
  1280                           ;doprnt.c: 528: unsigned int _val;
  1281                           ;doprnt.c: 529: struct {
  1282                           ;doprnt.c: 530: const char * _cp;
  1283                           ;doprnt.c: 531: unsigned _len;
  1284                           ;doprnt.c: 532: } _str;
  1285                           ;doprnt.c: 533: } _val;
  1286                           ;doprnt.c: 542: *ap = __va_start();
  1287                           
  1288                           ;incstack = 0
  1289                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1290  0181  303F               	movlw	(?_printf+2)& (0+255)
  1291  0182  0020               	movlb	0	; select bank0
  1292  0183  00C1               	movwf	??_printf
  1293  0184  0841               	movf	??_printf,w
  1294  0185  00C7               	movwf	printf@ap
  1295  0186                     l2115:	
  1296                           ;doprnt.c: 545: while(c = *f++) {
  1297                           
  1298  0186  0020               	movlb	0	; select bank0
  1299  0187  083E               	movf	printf@f+1,w
  1300  0188  00C2               	movwf	??_printf+1
  1301  0189  083D               	movf	printf@f,w
  1302  018A  00C1               	movwf	??_printf
  1303  018B  0ABD               	incf	printf@f,f
  1304  018C  1903               	skipnz
  1305  018D  0ABE               	incf	printf@f+1,f
  1306  018E  0841               	movf	??_printf,w
  1307  018F  0084               	movwf	4
  1308  0190  0842               	movf	??_printf+1,w
  1309  0191  0085               	movwf	5
  1310  0192  0800               	movf	0,w	;code access
  1311  0193  00C3               	movwf	??_printf+2
  1312  0194  0843               	movf	??_printf+2,w
  1313  0195  00CD               	movwf	printf@c
  1314  0196  08CD               	movf	printf@c,f
  1315  0197  1903               	btfsc	3,2
  1316  0198  0008               	return
  1317                           
  1318                           ;doprnt.c: 547: if(c != '%')
  1319  0199  084D               	movf	printf@c,w
  1320  019A  3A25               	xorlw	37
  1321  019B  1903               	skipnz
  1322  019C  29A2               	goto	l2081
  1323                           
  1324                           ;doprnt.c: 549: {
  1325                           ;doprnt.c: 550: (putch(c) );
  1326  019D  084D               	movf	printf@c,w
  1327  019E  3187  27C2  3181   	fcall	_putch
  1328                           
  1329                           ;doprnt.c: 551: continue;
  1330  01A1  2986               	goto	l2115
  1331  01A2                     l2081:	
  1332                           
  1333                           ;doprnt.c: 552: }
  1334                           ;doprnt.c: 557: flag = 0;
  1335  01A2  0020               	movlb	0	; select bank0
  1336  01A3  01C5               	clrf	printf@flag
  1337                           
  1338                           ;doprnt.c: 831: }
  1339                           
  1340                           ;doprnt.c: 822: continue;
  1341                           
  1342                           ;doprnt.c: 811: default:
  1343                           
  1344                           ;doprnt.c: 732: break;
  1345                           
  1346                           ;doprnt.c: 727: case 'x':
  1347                           
  1348                           ;doprnt.c: 647: goto alldone;
  1349                           
  1350                           ;doprnt.c: 646: case 0:
  1351                           
  1352                           ;doprnt.c: 644: switch(c = *f++) {
  1353  01A4  083E               	movf	printf@f+1,w
  1354  01A5  00C2               	movwf	??_printf+1
  1355  01A6  083D               	movf	printf@f,w
  1356  01A7  00C1               	movwf	??_printf
  1357  01A8  0ABD               	incf	printf@f,f
  1358  01A9  1903               	skipnz
  1359  01AA  0ABE               	incf	printf@f+1,f
  1360  01AB  0841               	movf	??_printf,w
  1361  01AC  0084               	movwf	4
  1362  01AD  0842               	movf	??_printf+1,w
  1363  01AE  0085               	movwf	5
  1364  01AF  0800               	movf	0,w	;code access
  1365  01B0  00CD               	movwf	printf@c
  1366                           
  1367                           ; Switch size 1, requested type "space"
  1368                           ; Number of cases is 2, Range of values is 0 to 120
  1369                           ; switch strategies available:
  1370                           ; Name         Instructions Cycles
  1371                           ; simple_byte            7     4 (average)
  1372                           ; direct_byte          248     6 (fixed)
  1373                           ; jumptable            260     6 (fixed)
  1374                           ;	Chosen strategy is simple_byte
  1375  01B1  3A00               	xorlw	0	; case 0
  1376  01B2  1903               	skipnz
  1377  01B3  2A23               	goto	l522
  1378  01B4  3A78               	xorlw	120	; case 120
  1379  01B5  1903               	skipnz
  1380  01B6  29B8               	goto	l2087
  1381  01B7  2986               	goto	l2115
  1382  01B8                     l2087:	
  1383                           
  1384                           ;doprnt.c: 1282: {
  1385                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1386  01B8  0847               	movf	printf@ap,w
  1387  01B9  0086               	movwf	6
  1388  01BA  0187               	clrf	7
  1389  01BB  3F40               	moviw [0]fsr1
  1390  01BC  00C8               	movwf	printf@_val
  1391  01BD  3F41               	moviw [1]fsr1
  1392  01BE  00C9               	movwf	printf@_val+1
  1393  01BF  3002               	movlw	2
  1394  01C0  00C1               	movwf	??_printf
  1395  01C1  0841               	movf	??_printf,w
  1396  01C2  07C7               	addwf	printf@ap,f
  1397                           
  1398                           ;doprnt.c: 1296: }
  1399                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1400  01C3  01CD               	clrf	printf@c
  1401  01C4  0ACD               	incf	printf@c,f
  1402  01C5  084D               	movf	printf@c,w
  1403  01C6  3A04               	xorlw	4
  1404  01C7  1903               	btfsc	3,2
  1405  01C8  29E8               	goto	l2105
  1406  01C9                     l2097:	
  1407                           
  1408                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
  1409  01C9  084D               	movf	printf@c,w
  1410  01CA  00C1               	movwf	??_printf
  1411  01CB  01C2               	clrf	??_printf+1
  1412  01CC  35C1               	lslf	??_printf,f
  1413  01CD  0DC2               	rlf	??_printf+1,f
  1414  01CE  3000               	movlw	low (_hexpowers| (0+32768))
  1415  01CF  0741               	addwf	??_printf,w
  1416  01D0  0084               	movwf	4
  1417  01D1  3087               	movlw	high (_hexpowers| (0+32768))
  1418  01D2  3D42               	addwfc	??_printf+1,w
  1419  01D3  0085               	movwf	5
  1420  01D4  3F00               	moviw [0]fsr0
  1421  01D5  00C3               	movwf	??_printf+2
  1422  01D6  3F01               	moviw [1]fsr0
  1423  01D7  00C4               	movwf	??_printf+3
  1424  01D8  0844               	movf	??_printf+3,w
  1425  01D9  0249               	subwf	printf@_val+1,w
  1426  01DA  1D03               	skipz
  1427  01DB  29DE               	goto	u2555
  1428  01DC  0843               	movf	??_printf+2,w
  1429  01DD  0248               	subwf	printf@_val,w
  1430  01DE                     u2555:	
  1431  01DE  1C03               	btfss	3,0
  1432  01DF  29E8               	goto	l2105
  1433                           
  1434                           ;doprnt.c: 1327: break;
  1435  01E0  3001               	movlw	1
  1436  01E1  00C1               	movwf	??_printf
  1437  01E2  0841               	movf	??_printf,w
  1438  01E3  07CD               	addwf	printf@c,f
  1439  01E4  084D               	movf	printf@c,w
  1440  01E5  3A04               	xorlw	4
  1441  01E6  1D03               	skipz
  1442  01E7  29C9               	goto	l2097
  1443  01E8                     l2105:	
  1444                           
  1445                           ;doprnt.c: 1431: {
  1446                           ;doprnt.c: 1478: }
  1447                           ;doprnt.c: 1481: prec = c;
  1448  01E8  084D               	movf	printf@c,w
  1449  01E9  00C1               	movwf	??_printf
  1450  01EA  0841               	movf	??_printf,w
  1451  01EB  00CC               	movwf	printf@prec
  1452  01EC                     l2113:	
  1453                           ;doprnt.c: 1483: while(prec--) {
  1454                           
  1455  01EC  30FF               	movlw	-1
  1456  01ED  0020               	movlb	0	; select bank0
  1457  01EE  00C1               	movwf	??_printf
  1458  01EF  0841               	movf	??_printf,w
  1459  01F0  07CC               	addwf	printf@prec,f
  1460  01F1  084C               	movf	printf@prec,w
  1461  01F2  3AFF               	xorlw	255
  1462  01F3  1903               	btfsc	3,2
  1463  01F4  2986               	goto	l2115
  1464                           
  1465                           ;doprnt.c: 1487: {
  1466                           ;doprnt.c: 1508: {
  1467                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  1468  01F5  084C               	movf	printf@prec,w
  1469  01F6  00C1               	movwf	??_printf
  1470  01F7  01C2               	clrf	??_printf+1
  1471  01F8  35C1               	lslf	??_printf,f
  1472  01F9  0DC2               	rlf	??_printf+1,f
  1473  01FA  3000               	movlw	low (_hexpowers| (0+32768))
  1474  01FB  0741               	addwf	??_printf,w
  1475  01FC  0084               	movwf	4
  1476  01FD  3087               	movlw	high (_hexpowers| (0+32768))
  1477  01FE  3D42               	addwfc	??_printf+1,w
  1478  01FF  0085               	movwf	5
  1479  0200  3F00               	moviw [0]fsr0
  1480  0201  00F3               	movwf	___lwdiv@divisor
  1481  0202  3F01               	moviw [1]fsr0
  1482  0203  00F4               	movwf	___lwdiv@divisor+1
  1483  0204  0849               	movf	printf@_val+1,w
  1484  0205  01F6               	clrf	___lwdiv@dividend+1
  1485  0206  07F6               	addwf	___lwdiv@dividend+1,f
  1486  0207  0848               	movf	printf@_val,w
  1487  0208  01F5               	clrf	___lwdiv@dividend
  1488  0209  07F5               	addwf	___lwdiv@dividend,f
  1489  020A  3184  24C1  3181   	fcall	___lwdiv
  1490  020D  0873               	movf	?___lwdiv,w
  1491  020E  390F               	andlw	15
  1492  020F  0020               	movlb	0	; select bank0
  1493  0210  00C3               	movwf	??_printf+2
  1494  0211  0843               	movf	??_printf+2,w
  1495  0212  00C6               	movwf	printf@idx
  1496                           
  1497                           ;doprnt.c: 1515: c = "0123456789abcdef"[idx];
  1498  0213  0846               	movf	printf@idx,w
  1499  0214  3E08               	addlw	low (STR_2| (0+32768))
  1500  0215  0084               	movwf	4
  1501  0216  3087               	movlw	high (STR_2| (0+32768))
  1502  0217  1803               	skipnc
  1503  0218  3E01               	addlw	1
  1504  0219  0085               	movwf	5
  1505  021A  0800               	movf	0,w	;code access
  1506  021B  00C1               	movwf	??_printf
  1507  021C  0841               	movf	??_printf,w
  1508  021D  00CD               	movwf	printf@c
  1509                           
  1510                           ;doprnt.c: 1517: }
  1511                           ;doprnt.c: 1532: }
  1512                           ;doprnt.c: 1533: (putch(c) );
  1513  021E  084D               	movf	printf@c,w
  1514  021F  3187  27C2  3181   	fcall	_putch
  1515  0222  29EC               	goto	l2113
  1516  0223                     l522:	
  1517                           ;doprnt.c: 1549: return 0;
  1518                           ;	Return value of _printf is never used
  1519                           
  1520                           ;doprnt.c: 1534: }
  1521                           ;doprnt.c: 1542: }
  1522                           ;doprnt.c: 1544: alldone:
  1523                           
  1524  0223  0008               	return
  1525  0224                     __end_of_printf:	
  1526                           
  1527                           	psect	text4
  1528  07C2                     __ptext4:	
  1529 ;; *************** function _putch *****************
  1530 ;; Defined at:
  1531 ;;		line 599 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  byte            1    wreg     unsigned char 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  byte            1    3[COMMON] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;		None               void
  1538 ;; Registers used:
  1539 ;;		wreg
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1545 ;;      Params:         0       0       0       0       0       0       0       0
  1546 ;;      Locals:         1       0       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0       0
  1548 ;;      Totals:         1       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        1 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    2
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_printf
  1556 ;;		_getche
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           
  1561                           ;psect for function _putch
  1562  07C2                     _putch:	
  1563                           
  1564                           ;incstack = 0
  1565                           ; Regs used in _putch: [wreg]
  1566                           ;putch@byte stored from wreg
  1567  07C2  00F3               	movwf	putch@byte
  1568  07C3                     l347:	
  1569                           ;MCU_16f1516_B1.c: 603: continue;
  1570                           
  1571                           ;MCU_16f1516_B1.c: 602: while(!TXIF)
  1572                           
  1573  07C3  0020               	movlb	0	; select bank0
  1574  07C4  1E11               	btfss	17,4	;volatile
  1575  07C5  2FC3               	goto	l347
  1576                           
  1577                           ;MCU_16f1516_B1.c: 604: TXREG = byte;
  1578  07C6  0873               	movf	putch@byte,w
  1579  07C7  0023               	movlb	3	; select bank3
  1580  07C8  009A               	movwf	26	;volatile
  1581  07C9  0008               	return
  1582  07CA                     __end_of_putch:	
  1583                           
  1584                           	psect	text5
  1585  04C1                     __ptext5:	
  1586 ;; *************** function ___lwdiv *****************
  1587 ;; Defined at:
  1588 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  divisor         2    3[COMMON] unsigned int 
  1591 ;;  dividend        2    5[COMMON] unsigned int 
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  quotient        2    1[BANK0 ] unsigned int 
  1594 ;;  counter         1    0[BANK0 ] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  2    3[COMMON] unsigned int 
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, status,0
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1604 ;;      Params:         4       0       0       0       0       0       0       0
  1605 ;;      Locals:         0       3       0       0       0       0       0       0
  1606 ;;      Temps:          1       0       0       0       0       0       0       0
  1607 ;;      Totals:         5       3       0       0       0       0       0       0
  1608 ;;Total ram usage:        8 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    2
  1611 ;; This function calls:
  1612 ;;		Nothing
  1613 ;; This function is called by:
  1614 ;;		_printf
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           
  1619                           ;psect for function ___lwdiv
  1620  04C1                     ___lwdiv:	
  1621                           
  1622                           ;incstack = 0
  1623                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1624  04C1  0020               	movlb	0	; select bank0
  1625  04C2  01BB               	clrf	___lwdiv@quotient
  1626  04C3  01BC               	clrf	___lwdiv@quotient+1
  1627  04C4  0874               	movf	___lwdiv@divisor+1,w
  1628  04C5  0473               	iorwf	___lwdiv@divisor,w
  1629  04C6  1903               	skipnz
  1630  04C7  2CF1               	goto	l2071
  1631  04C8  01BA               	clrf	___lwdiv@counter
  1632  04C9  0ABA               	incf	___lwdiv@counter,f
  1633  04CA                     l2059:	
  1634  04CA  1BF4               	btfsc	___lwdiv@divisor+1,7
  1635  04CB  2CD6               	goto	l2061
  1636  04CC  3001               	movlw	1
  1637  04CD                     u2475:	
  1638  04CD  35F3               	lslf	___lwdiv@divisor,f
  1639  04CE  0DF4               	rlf	___lwdiv@divisor+1,f
  1640  04CF  0B89               	decfsz	9,f
  1641  04D0  2CCD               	goto	u2475
  1642  04D1  3001               	movlw	1
  1643  04D2  00F7               	movwf	??___lwdiv
  1644  04D3  0877               	movf	??___lwdiv,w
  1645  04D4  07BA               	addwf	___lwdiv@counter,f
  1646  04D5  2CCA               	goto	l2059
  1647  04D6                     l2061:	
  1648  04D6  3001               	movlw	1
  1649  04D7                     u2495:	
  1650  04D7  35BB               	lslf	___lwdiv@quotient,f
  1651  04D8  0DBC               	rlf	___lwdiv@quotient+1,f
  1652  04D9  0B89               	decfsz	9,f
  1653  04DA  2CD7               	goto	u2495
  1654  04DB  0874               	movf	___lwdiv@divisor+1,w
  1655  04DC  0276               	subwf	___lwdiv@dividend+1,w
  1656  04DD  1D03               	skipz
  1657  04DE  2CE1               	goto	u2505
  1658  04DF  0873               	movf	___lwdiv@divisor,w
  1659  04E0  0275               	subwf	___lwdiv@dividend,w
  1660  04E1                     u2505:	
  1661  04E1  1C03               	skipc
  1662  04E2  2CE8               	goto	l2067
  1663  04E3  0873               	movf	___lwdiv@divisor,w
  1664  04E4  02F5               	subwf	___lwdiv@dividend,f
  1665  04E5  0874               	movf	___lwdiv@divisor+1,w
  1666  04E6  3BF6               	subwfb	___lwdiv@dividend+1,f
  1667  04E7  143B               	bsf	___lwdiv@quotient,0
  1668  04E8                     l2067:	
  1669  04E8  3001               	movlw	1
  1670  04E9                     u2515:	
  1671  04E9  36F4               	lsrf	___lwdiv@divisor+1,f
  1672  04EA  0CF3               	rrf	___lwdiv@divisor,f
  1673  04EB  0B89               	decfsz	9,f
  1674  04EC  2CE9               	goto	u2515
  1675  04ED  3001               	movlw	1
  1676  04EE  02BA               	subwf	___lwdiv@counter,f
  1677  04EF  1D03               	btfss	3,2
  1678  04F0  2CD6               	goto	l2061
  1679  04F1                     l2071:	
  1680  04F1  083C               	movf	___lwdiv@quotient+1,w
  1681  04F2  01F4               	clrf	?___lwdiv+1
  1682  04F3  07F4               	addwf	?___lwdiv+1,f
  1683  04F4  083B               	movf	___lwdiv@quotient,w
  1684  04F5  01F3               	clrf	?___lwdiv
  1685  04F6  07F3               	addwf	?___lwdiv,f
  1686  04F7  0008               	return
  1687  04F8                     __end_of___lwdiv:	
  1688                           
  1689                           	psect	text6
  1690  052A                     __ptext6:	
  1691 ;; *************** function _UART_Receive *****************
  1692 ;; Defined at:
  1693 ;;		line 561 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;		None
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  i               1    6[COMMON] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;		None               void
  1700 ;; Registers used:
  1701 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1707 ;;      Params:         0       0       0       0       0       0       0       0
  1708 ;;      Locals:         1       0       0       0       0       0       0       0
  1709 ;;      Temps:          3       0       0       0       0       0       0       0
  1710 ;;      Totals:         4       0       0       0       0       0       0       0
  1711 ;;Total ram usage:        4 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:    2
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_UART_Main
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           
  1722                           ;psect for function _UART_Receive
  1723  052A                     _UART_Receive:	
  1724                           
  1725                           ;MCU_16f1516_B1.c: 563: char i;
  1726                           ;MCU_16f1516_B1.c: 565: TMain->Test=1;
  1727                           
  1728                           ;incstack = 0
  1729                           ; Regs used in _UART_Receive: [wreg+fsr1l+fsr1h+status,2+status,0]
  1730  052A  087A               	movf	_TMain,w
  1731  052B  3E0C               	addlw	12
  1732  052C  0086               	movwf	6
  1733  052D  0187               	clrf	7
  1734  052E  0181               	clrf	1
  1735  052F  0A81               	incf	1,f
  1736                           
  1737                           ;MCU_16f1516_B1.c: 567: for(i=0;i<32;i++)
  1738  0530  01F6               	clrf	UART_Receive@i
  1739  0531  3020               	movlw	32
  1740  0532  0276               	subwf	UART_Receive@i,w
  1741  0533  1803               	btfsc	3,0
  1742  0534  2D51               	goto	l1725
  1743  0535                     l1719:	
  1744                           
  1745                           ;MCU_16f1516_B1.c: 568: {
  1746                           ;MCU_16f1516_B1.c: 569: I2C->BufferWriter[i]=UART->RxData[i];
  1747  0535  0876               	movf	UART_Receive@i,w
  1748  0536  3E20               	addlw	32
  1749  0537  0778               	addwf	_UART,w
  1750  0538  00F3               	movwf	??_UART_Receive
  1751  0539  0873               	movf	??_UART_Receive,w
  1752  053A  0086               	movwf	6
  1753  053B  3001               	movlw	1	; select bank2/3
  1754  053C  0087               	movwf	7
  1755  053D  0801               	movf	1,w
  1756  053E  00F4               	movwf	??_UART_Receive+1
  1757  053F  0876               	movf	UART_Receive@i,w
  1758  0540  3E20               	addlw	32
  1759  0541  0779               	addwf	_I2C,w
  1760  0542  00F5               	movwf	??_UART_Receive+2
  1761  0543  0875               	movf	??_UART_Receive+2,w
  1762  0544  0086               	movwf	6
  1763  0545  3001               	movlw	1	; select bank2/3
  1764  0546  0087               	movwf	7
  1765  0547  0874               	movf	??_UART_Receive+1,w
  1766  0548  0081               	movwf	1
  1767  0549  3001               	movlw	1
  1768  054A  00F3               	movwf	??_UART_Receive
  1769  054B  0873               	movf	??_UART_Receive,w
  1770  054C  07F6               	addwf	UART_Receive@i,f
  1771  054D  3020               	movlw	32
  1772  054E  0276               	subwf	UART_Receive@i,w
  1773  054F  1C03               	skipc
  1774  0550  2D35               	goto	l1719
  1775  0551                     l1725:	
  1776                           
  1777                           ;MCU_16f1516_B1.c: 570: }
  1778                           ;MCU_16f1516_B1.c: 571: I2C->MasterTxGO=1;
  1779  0551  0879               	movf	_I2C,w
  1780  0552  3E42               	addlw	66
  1781  0553  0086               	movwf	6
  1782  0554  3001               	movlw	1	; select bank2/3
  1783  0555  0087               	movwf	7
  1784  0556  1581               	bsf	1,3
  1785  0557  0008               	return
  1786  0558                     __end_of_UART_Receive:	
  1787                           
  1788                           	psect	text7
  1789  02BA                     __ptext7:	
  1790 ;; *************** function _SegmentDisplay_Main *****************
  1791 ;; Defined at:
  1792 ;;		line 72 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;		None               void
  1799 ;; Registers used:
  1800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1806 ;;      Params:         0       0       0       0       0       0       0       0
  1807 ;;      Locals:         0       0       0       0       0       0       0       0
  1808 ;;      Temps:          2       0       0       0       0       0       0       0
  1809 ;;      Totals:         2       0       0       0       0       0       0       0
  1810 ;;Total ram usage:        2 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    2
  1813 ;; This function calls:
  1814 ;;		Nothing
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           
  1821                           ;psect for function _SegmentDisplay_Main
  1822  02BA                     _SegmentDisplay_Main:	
  1823                           
  1824                           ;SegmentDisplay_A2.c: 74: if(Segment->GO)
  1825                           
  1826                           ;incstack = 0
  1827                           ; Regs used in _SegmentDisplay_Main: [wreg-fsr1h+status,2+status,0]
  1828  02BA  0020               	movlb	0	; select bank0
  1829  02BB  0865               	movf	_Segment,w
  1830  02BC  3E15               	addlw	21
  1831  02BD  0086               	movwf	6
  1832  02BE  0187               	clrf	7
  1833  02BF  1C81               	btfss	1,1
  1834  02C0  0008               	return
  1835                           
  1836                           ;SegmentDisplay_A2.c: 75: {
  1837                           ;SegmentDisplay_A2.c: 76: Segment->Time++;
  1838  02C1  3001               	movlw	1
  1839  02C2  00F3               	movwf	??_SegmentDisplay_Main
  1840  02C3  0865               	movf	_Segment,w
  1841  02C4  3E19               	addlw	25
  1842  02C5  0086               	movwf	6
  1843  02C6  0187               	clrf	7
  1844  02C7  0873               	movf	??_SegmentDisplay_Main,w
  1845  02C8  0781               	addwf	1,f
  1846                           
  1847                           ;SegmentDisplay_A2.c: 77: if(Segment->Time == 5)
  1848  02C9  0865               	movf	_Segment,w
  1849  02CA  3E19               	addlw	25
  1850  02CB  0086               	movwf	6
  1851  02CC  0187               	clrf	7
  1852  02CD  0801               	movf	1,w
  1853  02CE  3A05               	xorlw	5
  1854  02CF  1D03               	skipz
  1855  02D0  0008               	return
  1856                           
  1857                           ;SegmentDisplay_A2.c: 78: {
  1858                           ;SegmentDisplay_A2.c: 79: Segment->Time=0;
  1859  02D1  0865               	movf	_Segment,w
  1860  02D2  3E19               	addlw	25
  1861  02D3  0086               	movwf	6
  1862  02D4  0187               	clrf	7
  1863  02D5  0181               	clrf	1
  1864                           
  1865                           ;SegmentDisplay_A2.c: 80: PORTA&=0x0f;
  1866  02D6  300F               	movlw	15
  1867  02D7  00F3               	movwf	??_SegmentDisplay_Main
  1868  02D8  0873               	movf	??_SegmentDisplay_Main,w
  1869  02D9  058C               	andwf	12,f	;volatile
  1870                           
  1871                           ;SegmentDisplay_A2.c: 81: if(Segment->ComCount == 0)
  1872  02DA  0865               	movf	_Segment,w
  1873  02DB  3E16               	addlw	22
  1874  02DC  0086               	movwf	6
  1875  02DD  0187               	clrf	7
  1876  02DE  0881               	movf	1,f
  1877  02DF  1D03               	skipz
  1878  02E0  2AE3               	goto	l1957
  1879                           
  1880                           ;SegmentDisplay_A2.c: 82: {
  1881                           ;SegmentDisplay_A2.c: 83: RA4=1;
  1882  02E1  160C               	bsf	12,4	;volatile
  1883                           
  1884                           ;SegmentDisplay_A2.c: 84: }
  1885  02E2  2AFF               	goto	l1969
  1886  02E3                     l1957:	
  1887                           
  1888                           ;SegmentDisplay_A2.c: 85: else if(Segment->ComCount == 1)
  1889  02E3  0865               	movf	_Segment,w
  1890  02E4  3E16               	addlw	22
  1891  02E5  0086               	movwf	6
  1892  02E6  0187               	clrf	7
  1893  02E7  0801               	movf	1,w
  1894  02E8  3A01               	xorlw	1
  1895  02E9  1D03               	skipz
  1896  02EA  2AED               	goto	l1961
  1897                           
  1898                           ;SegmentDisplay_A2.c: 86: {
  1899                           ;SegmentDisplay_A2.c: 87: RA5=1;
  1900  02EB  168C               	bsf	12,5	;volatile
  1901                           
  1902                           ;SegmentDisplay_A2.c: 88: }
  1903  02EC  2AFF               	goto	l1969
  1904  02ED                     l1961:	
  1905                           
  1906                           ;SegmentDisplay_A2.c: 89: else if(Segment->ComCount == 2)
  1907  02ED  0865               	movf	_Segment,w
  1908  02EE  3E16               	addlw	22
  1909  02EF  0086               	movwf	6
  1910  02F0  0187               	clrf	7
  1911  02F1  0801               	movf	1,w
  1912  02F2  3A02               	xorlw	2
  1913  02F3  1D03               	skipz
  1914  02F4  2AF7               	goto	l1965
  1915                           
  1916                           ;SegmentDisplay_A2.c: 90: {
  1917                           ;SegmentDisplay_A2.c: 91: RA6=1;
  1918  02F5  170C               	bsf	12,6	;volatile
  1919                           
  1920                           ;SegmentDisplay_A2.c: 92: }
  1921  02F6  2AFF               	goto	l1969
  1922  02F7                     l1965:	
  1923                           
  1924                           ;SegmentDisplay_A2.c: 93: else if(Segment->ComCount == 3)
  1925  02F7  0865               	movf	_Segment,w
  1926  02F8  3E16               	addlw	22
  1927  02F9  0086               	movwf	6
  1928  02FA  0187               	clrf	7
  1929  02FB  0801               	movf	1,w
  1930  02FC  3A03               	xorlw	3
  1931  02FD  1903               	btfsc	3,2
  1932                           
  1933                           ;SegmentDisplay_A2.c: 94: {
  1934                           ;SegmentDisplay_A2.c: 95: RA7=1;
  1935  02FE  178C               	bsf	12,7	;volatile
  1936  02FF                     l1969:	
  1937                           
  1938                           ;SegmentDisplay_A2.c: 96: }
  1939                           ;SegmentDisplay_A2.c: 97: PORTB=Segment->Display[Segment->Num[Segment->ComCount]];
  1940  02FF  0865               	movf	_Segment,w
  1941  0300  3E16               	addlw	22
  1942  0301  0086               	movwf	6
  1943  0302  0187               	clrf	7
  1944  0303  0801               	movf	1,w
  1945  0304  3E11               	addlw	17
  1946  0305  0765               	addwf	_Segment,w
  1947  0306  00F3               	movwf	??_SegmentDisplay_Main
  1948  0307  0873               	movf	??_SegmentDisplay_Main,w
  1949  0308  0086               	movwf	6
  1950  0309  0187               	clrf	7
  1951  030A  0801               	movf	1,w
  1952  030B  0765               	addwf	_Segment,w
  1953  030C  00F4               	movwf	??_SegmentDisplay_Main+1
  1954  030D  0874               	movf	??_SegmentDisplay_Main+1,w
  1955  030E  0086               	movwf	6
  1956  030F  0187               	clrf	7
  1957  0310  0801               	movf	1,w
  1958  0311  008D               	movwf	13	;volatile
  1959                           
  1960                           ;SegmentDisplay_A2.c: 98: if(Segment->ComCount < Segment->DisplayCount)
  1961  0312  0865               	movf	_Segment,w
  1962  0313  3E16               	addlw	22
  1963  0314  0086               	movwf	6
  1964  0315  0187               	clrf	7
  1965  0316  0865               	movf	_Segment,w
  1966  0317  3E17               	addlw	23
  1967  0318  0084               	movwf	4
  1968  0319  0185               	clrf	5
  1969  031A  0800               	movf	0,w
  1970  031B  0201               	subwf	1,w
  1971  031C  1803               	skipnc
  1972  031D  2B27               	goto	l1975
  1973                           
  1974                           ;SegmentDisplay_A2.c: 99: {
  1975                           ;SegmentDisplay_A2.c: 100: Segment->ComCount++;
  1976  031E  3001               	movlw	1
  1977  031F  00F3               	movwf	??_SegmentDisplay_Main
  1978  0320  0865               	movf	_Segment,w
  1979  0321  3E16               	addlw	22
  1980  0322  0086               	movwf	6
  1981  0323  0187               	clrf	7
  1982  0324  0873               	movf	??_SegmentDisplay_Main,w
  1983  0325  0781               	addwf	1,f
  1984                           
  1985                           ;SegmentDisplay_A2.c: 101: }
  1986  0326  0008               	return
  1987  0327                     l1975:	
  1988                           
  1989                           ;SegmentDisplay_A2.c: 102: else
  1990                           ;SegmentDisplay_A2.c: 103: {
  1991                           ;SegmentDisplay_A2.c: 104: Segment->ComCount=0;
  1992  0327  0865               	movf	_Segment,w
  1993  0328  3E16               	addlw	22
  1994  0329  0086               	movwf	6
  1995  032A  0187               	clrf	7
  1996  032B  0181               	clrf	1
  1997  032C  0008               	return
  1998  032D                     __end_of_SegmentDisplay_Main:	
  1999                           
  2000                           	psect	text8
  2001  0777                     __ptext8:	
  2002 ;; *************** function _SegmentDisplay_Initial *****************
  2003 ;; Defined at:
  2004 ;;		line 8 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;		None               void
  2011 ;; Registers used:
  2012 ;;		wreg, fsr1l, fsr1h
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2018 ;;      Params:         0       0       0       0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0       0       0       0
  2020 ;;      Temps:          1       0       0       0       0       0       0       0
  2021 ;;      Totals:         1       0       0       0       0       0       0       0
  2022 ;;Total ram usage:        1 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    2
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_main
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           
  2033                           ;psect for function _SegmentDisplay_Initial
  2034  0777                     _SegmentDisplay_Initial:	
  2035                           
  2036                           ;SegmentDisplay_A2.c: 10: Segment=&VarSegment;
  2037                           
  2038                           ;incstack = 0
  2039                           ; Regs used in _SegmentDisplay_Initial: [wregfsr1]
  2040  0777  3020               	movlw	_VarSegment& (0+255)
  2041  0778  00F3               	movwf	??_SegmentDisplay_Initial
  2042  0779  0873               	movf	??_SegmentDisplay_Initial,w
  2043  077A  0020               	movlb	0	; select bank0
  2044  077B  00E5               	movwf	_Segment
  2045                           
  2046                           ;SegmentDisplay_A2.c: 11: Segment->Enable=1;
  2047  077C  0865               	movf	_Segment,w
  2048  077D  3E15               	addlw	21
  2049  077E  0086               	movwf	6
  2050  077F  0187               	clrf	7
  2051  0780  1401               	bsf	1,0
  2052                           
  2053                           ;SegmentDisplay_A2.c: 13: Segment->Dec=1;
  2054  0781  0865               	movf	_Segment,w
  2055  0782  3E15               	addlw	21
  2056  0783  0086               	movwf	6
  2057  0784  0187               	clrf	7
  2058  0785  1581               	bsf	1,3
  2059  0786  0008               	return
  2060  0787                     __end_of_SegmentDisplay_Initial:	
  2061                           
  2062                           	psect	text9
  2063  0764                     __ptext9:	
  2064 ;; *************** function _Mcu_Initial *****************
  2065 ;; Defined at:
  2066 ;;		line 11 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;		None               void
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, status,0, pclath, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2080 ;;      Params:         0       0       0       0       0       0       0       0
  2081 ;;      Locals:         0       0       0       0       0       0       0       0
  2082 ;;      Temps:          0       0       0       0       0       0       0       0
  2083 ;;      Totals:         0       0       0       0       0       0       0       0
  2084 ;;Total ram usage:        0 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    3
  2087 ;; This function calls:
  2088 ;;		_I2C_Set
  2089 ;;		_IO_Set
  2090 ;;		_TMR1_Set
  2091 ;;		_UART_Set
  2092 ;; This function is called by:
  2093 ;;		_main
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           
  2098                           ;psect for function _Mcu_Initial
  2099  0764                     _Mcu_Initial:	
  2100                           
  2101                           ;MCU_16f1516_B1.c: 14: OSCCON=0x78; ;;
  2102                           
  2103                           ;incstack = 0
  2104                           ; Regs used in _Mcu_Initial: [wreg+status,2+status,0+pclath+cstack]
  2105  0764  3078               	movlw	120
  2106  0765  0021               	movlb	1	; select bank1
  2107  0766  0099               	movwf	25	;volatile
  2108                           
  2109                           ;MCU_16f1516_B1.c: 16: IO_Set();
  2110  0767  3187  274E  3187   	fcall	_IO_Set
  2111                           
  2112                           ;MCU_16f1516_B1.c: 18: __nop();
  2113  076A  0000               	nop
  2114                           
  2115                           ;MCU_16f1516_B1.c: 20: TMR1_Set();
  2116  076B  3187  2787  3187   	fcall	_TMR1_Set
  2117                           
  2118                           ;MCU_16f1516_B1.c: 22: __nop();
  2119  076E  0000               	nop
  2120                           
  2121                           ;MCU_16f1516_B1.c: 26: __nop();
  2122  076F  0000               	nop
  2123                           
  2124                           ;MCU_16f1516_B1.c: 28: __nop();
  2125  0770  0000               	nop
  2126                           
  2127                           ;MCU_16f1516_B1.c: 30: I2C_Set();
  2128  0771  3187  27B5  3187   	fcall	_I2C_Set
  2129                           
  2130                           ;MCU_16f1516_B1.c: 32: UART_Set();
  2131  0774  3187  2736         	fcall	_UART_Set
  2132  0776  0008               	return
  2133  0777                     __end_of_Mcu_Initial:	
  2134                           
  2135                           	psect	text10
  2136  0736                     __ptext10:	
  2137 ;; *************** function _UART_Set *****************
  2138 ;; Defined at:
  2139 ;;		line 498 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;		None
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;		None
  2144 ;; Return value:  Size  Location     Type
  2145 ;;		None               void
  2146 ;; Registers used:
  2147 ;;		wreg, status,2
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2153 ;;      Params:         0       0       0       0       0       0       0       0
  2154 ;;      Locals:         0       0       0       0       0       0       0       0
  2155 ;;      Temps:          1       0       0       0       0       0       0       0
  2156 ;;      Totals:         1       0       0       0       0       0       0       0
  2157 ;;Total ram usage:        1 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    2
  2160 ;; This function calls:
  2161 ;;		Nothing
  2162 ;; This function is called by:
  2163 ;;		_Mcu_Initial
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           
  2168                           ;psect for function _UART_Set
  2169  0736                     _UART_Set:	
  2170                           
  2171                           ;MCU_16f1516_B1.c: 500: UART=&VarUart;
  2172                           
  2173                           ;incstack = 0
  2174                           ; Regs used in _UART_Set: [wreg+status,2]
  2175  0736  3020               	movlw	_VarUart& (0+255)
  2176  0737  00F3               	movwf	??_UART_Set
  2177  0738  0873               	movf	??_UART_Set,w
  2178  0739  00F8               	movwf	_UART
  2179                           
  2180                           ;MCU_16f1516_B1.c: 501: TRISC7 = 1;
  2181  073A  0021               	movlb	1	; select bank1
  2182  073B  178E               	bsf	14,7	;volatile
  2183                           
  2184                           ;MCU_16f1516_B1.c: 502: TRISC6 = 1;
  2185  073C  170E               	bsf	14,6	;volatile
  2186                           
  2187                           ;MCU_16f1516_B1.c: 503: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  2188  073D  3033               	movlw	51
  2189  073E  0023               	movlb	3	; select bank3
  2190  073F  009B               	movwf	27	;volatile
  2191                           
  2192                           ;MCU_16f1516_B1.c: 504: SPBRGH = 0;
  2193  0740  019C               	clrf	28	;volatile
  2194                           
  2195                           ;MCU_16f1516_B1.c: 505: BRG16 = 0;
  2196  0741  119F               	bcf	31,3	;volatile
  2197                           
  2198                           ;MCU_16f1516_B1.c: 506: RCSTA = (0|0x90);
  2199  0742  3090               	movlw	144
  2200  0743  009D               	movwf	29	;volatile
  2201                           
  2202                           ;MCU_16f1516_B1.c: 507: TXSTA = (0x4|0|0x20);
  2203  0744  3024               	movlw	36
  2204  0745  009E               	movwf	30	;volatile
  2205                           
  2206                           ;MCU_16f1516_B1.c: 508: TX9=0;
  2207  0746  131E               	bcf	30,6	;volatile
  2208                           
  2209                           ;MCU_16f1516_B1.c: 509: RX9=0;
  2210  0747  131D               	bcf	29,6	;volatile
  2211                           
  2212                           ;MCU_16f1516_B1.c: 510: TXIE=0;
  2213  0748  0021               	movlb	1	; select bank1
  2214  0749  1211               	bcf	17,4	;volatile
  2215                           
  2216                           ;MCU_16f1516_B1.c: 511: RCIE=1;
  2217  074A  1691               	bsf	17,5	;volatile
  2218                           
  2219                           ;MCU_16f1516_B1.c: 512: PEIE=1;
  2220  074B  170B               	bsf	11,6	;volatile
  2221                           
  2222                           ;MCU_16f1516_B1.c: 513: GIE=1;
  2223  074C  178B               	bsf	11,7	;volatile
  2224  074D  0008               	return
  2225  074E                     __end_of_UART_Set:	
  2226                           
  2227                           	psect	text11
  2228  0787                     __ptext11:	
  2229 ;; *************** function _TMR1_Set *****************
  2230 ;; Defined at:
  2231 ;;		line 114 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;		None               void
  2238 ;; Registers used:
  2239 ;;		wreg
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2245 ;;      Params:         0       0       0       0       0       0       0       0
  2246 ;;      Locals:         0       0       0       0       0       0       0       0
  2247 ;;      Temps:          1       0       0       0       0       0       0       0
  2248 ;;      Totals:         1       0       0       0       0       0       0       0
  2249 ;;Total ram usage:        1 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    2
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_Mcu_Initial
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function _TMR1_Set
  2261  0787                     _TMR1_Set:	
  2262                           
  2263                           ;MCU_16f1516_B1.c: 116: Timer1=&VarTimer1;
  2264                           
  2265                           ;incstack = 0
  2266                           ; Regs used in _TMR1_Set: [wreg]
  2267  0787  3062               	movlw	_VarTimer1& (0+255)
  2268  0788  00F3               	movwf	??_TMR1_Set
  2269  0789  0873               	movf	??_TMR1_Set,w
  2270  078A  0020               	movlb	0	; select bank0
  2271  078B  00D2               	movwf	_Timer1
  2272                           
  2273                           ;MCU_16f1516_B1.c: 117: T1CON=(0x40 | 0x00 | 0x01);
  2274  078C  3041               	movlw	65
  2275  078D  0098               	movwf	24	;volatile
  2276                           
  2277                           ;MCU_16f1516_B1.c: 118: TMR1H=((65536-700)/256);
  2278  078E  30FD               	movlw	253
  2279  078F  0097               	movwf	23	;volatile
  2280                           
  2281                           ;MCU_16f1516_B1.c: 119: TMR1L=((65536-700)%256);
  2282  0790  3044               	movlw	68
  2283  0791  0096               	movwf	22	;volatile
  2284                           
  2285                           ;MCU_16f1516_B1.c: 120: TMR1IE=1;
  2286  0792  0021               	movlb	1	; select bank1
  2287  0793  1411               	bsf	17,0	;volatile
  2288                           
  2289                           ;MCU_16f1516_B1.c: 121: PEIE=1;
  2290  0794  170B               	bsf	11,6	;volatile
  2291                           
  2292                           ;MCU_16f1516_B1.c: 122: GIE=1;
  2293  0795  178B               	bsf	11,7	;volatile
  2294  0796  0008               	return
  2295  0797                     __end_of_TMR1_Set:	
  2296                           
  2297                           	psect	text12
  2298  074E                     __ptext12:	
  2299 ;; *************** function _IO_Set *****************
  2300 ;; Defined at:
  2301 ;;		line 37 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;		None               void
  2308 ;; Registers used:
  2309 ;;		wreg, status,2
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2315 ;;      Params:         0       0       0       0       0       0       0       0
  2316 ;;      Locals:         0       0       0       0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0       0
  2318 ;;      Totals:         0       0       0       0       0       0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    2
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_Mcu_Initial
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _IO_Set
  2331  074E                     _IO_Set:	
  2332                           
  2333                           ;MCU_16f1516_B1.c: 39: TRISA=0b00001001;;
  2334                           
  2335                           ;incstack = 0
  2336                           ; Regs used in _IO_Set: [wreg+status,2]
  2337  074E  3009               	movlw	9
  2338  074F  0021               	movlb	1	; select bank1
  2339  0750  008C               	movwf	12	;volatile
  2340                           
  2341                           ;MCU_16f1516_B1.c: 40: TRISB=0b00000000;;
  2342  0751  018D               	clrf	13	;volatile
  2343                           
  2344                           ;MCU_16f1516_B1.c: 41: TRISC=0b00011001;;
  2345  0752  3019               	movlw	25
  2346  0753  008E               	movwf	14	;volatile
  2347                           
  2348                           ;MCU_16f1516_B1.c: 42: LATA=0b00000000;;
  2349  0754  0022               	movlb	2	; select bank2
  2350  0755  018C               	clrf	12	;volatile
  2351                           
  2352                           ;MCU_16f1516_B1.c: 43: LATB=0b00000000;;
  2353  0756  018D               	clrf	13	;volatile
  2354                           
  2355                           ;MCU_16f1516_B1.c: 44: LATC=0b00000000;;
  2356  0757  018E               	clrf	14	;volatile
  2357                           
  2358                           ;MCU_16f1516_B1.c: 45: ANSELA=0b00000001;;
  2359  0758  3001               	movlw	1
  2360  0759  0023               	movlb	3	; select bank3
  2361  075A  008C               	movwf	12	;volatile
  2362                           
  2363                           ;MCU_16f1516_B1.c: 46: ANSELB=0b00000000;;
  2364  075B  018D               	clrf	13	;volatile
  2365                           
  2366                           ;MCU_16f1516_B1.c: 47: ANSELC=0b00000000;;
  2367  075C  018E               	clrf	14	;volatile
  2368                           
  2369                           ;MCU_16f1516_B1.c: 48: PORTA=0b00001001;;
  2370  075D  3009               	movlw	9
  2371  075E  0020               	movlb	0	; select bank0
  2372  075F  008C               	movwf	12	;volatile
  2373                           
  2374                           ;MCU_16f1516_B1.c: 49: PORTB=0b00000000;;
  2375  0760  018D               	clrf	13	;volatile
  2376                           
  2377                           ;MCU_16f1516_B1.c: 50: PORTC=0b00011001;;
  2378  0761  3019               	movlw	25
  2379  0762  008E               	movwf	14	;volatile
  2380  0763  0008               	return
  2381  0764                     __end_of_IO_Set:	
  2382                           
  2383                           	psect	text13
  2384  07B5                     __ptext13:	
  2385 ;; *************** function _I2C_Set *****************
  2386 ;; Defined at:
  2387 ;;		line 233 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;		None               void
  2394 ;; Registers used:
  2395 ;;		wreg, status,2
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2401 ;;      Params:         0       0       0       0       0       0       0       0
  2402 ;;      Locals:         0       0       0       0       0       0       0       0
  2403 ;;      Temps:          1       0       0       0       0       0       0       0
  2404 ;;      Totals:         1       0       0       0       0       0       0       0
  2405 ;;Total ram usage:        1 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    2
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_Mcu_Initial
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           
  2416                           ;psect for function _I2C_Set
  2417  07B5                     _I2C_Set:	
  2418                           
  2419                           ;MCU_16f1516_B1.c: 235: I2C=&VarI2C;
  2420                           
  2421                           ;incstack = 0
  2422                           ; Regs used in _I2C_Set: [wreg+status,2]
  2423  07B5  30A0               	movlw	_VarI2C& (0+255)
  2424  07B6  00F3               	movwf	??_I2C_Set
  2425  07B7  0873               	movf	??_I2C_Set,w
  2426  07B8  00F9               	movwf	_I2C
  2427                           
  2428                           ;MCU_16f1516_B1.c: 237: SSPADD = 0x09;
  2429  07B9  3009               	movlw	9
  2430  07BA  0024               	movlb	4	; select bank4
  2431  07BB  0092               	movwf	18	;volatile
  2432                           
  2433                           ;MCU_16f1516_B1.c: 238: SSPSTAT = 0x80;
  2434  07BC  3080               	movlw	128
  2435  07BD  0094               	movwf	20	;volatile
  2436                           
  2437                           ;MCU_16f1516_B1.c: 239: SSPCON2 = 0;
  2438  07BE  0196               	clrf	22	;volatile
  2439                           
  2440                           ;MCU_16f1516_B1.c: 241: SSPCON1=0b101000;
  2441  07BF  3028               	movlw	40
  2442  07C0  0095               	movwf	21	;volatile
  2443  07C1  0008               	return
  2444  07C2                     __end_of_I2C_Set:	
  2445                           
  2446                           	psect	text14
  2447  0797                     __ptext14:	
  2448 ;; *************** function _MainT_Initial *****************
  2449 ;; Defined at:
  2450 ;;		line 33 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;		None
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;		None
  2455 ;; Return value:  Size  Location     Type
  2456 ;;		None               void
  2457 ;; Registers used:
  2458 ;;		wreg, fsr1l, fsr1h
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2464 ;;      Params:         0       0       0       0       0       0       0       0
  2465 ;;      Locals:         0       0       0       0       0       0       0       0
  2466 ;;      Temps:          1       0       0       0       0       0       0       0
  2467 ;;      Totals:         1       0       0       0       0       0       0       0
  2468 ;;Total ram usage:        1 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    2
  2471 ;; This function calls:
  2472 ;;		Nothing
  2473 ;; This function is called by:
  2474 ;;		_main
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           
  2479                           ;psect for function _MainT_Initial
  2480  0797                     _MainT_Initial:	
  2481                           
  2482                           ;myMain.c: 35: TMain=&VarTMain;
  2483                           
  2484                           ;incstack = 0
  2485                           ; Regs used in _MainT_Initial: [wregfsr1]
  2486  0797  3053               	movlw	_VarTMain& (0+255)
  2487  0798  00F3               	movwf	??_MainT_Initial
  2488  0799  0873               	movf	??_MainT_Initial,w
  2489  079A  00FA               	movwf	_TMain
  2490                           
  2491                           ;myMain.c: 36: TMain->FirstOpen=1;
  2492  079B  087A               	movf	_TMain,w
  2493  079C  3E0D               	addlw	13
  2494  079D  0086               	movwf	6
  2495  079E  0187               	clrf	7
  2496  079F  1401               	bsf	1,0
  2497                           
  2498                           ;myMain.c: 37: Product=&VarProduct;
  2499  07A0  30A0               	movlw	_VarProduct& (0+255)
  2500  07A1  00F3               	movwf	??_MainT_Initial
  2501  07A2  0873               	movf	??_MainT_Initial,w
  2502  07A3  0020               	movlb	0	; select bank0
  2503  07A4  00E6               	movwf	_Product
  2504  07A5  0008               	return
  2505  07A6                     __end_of_MainT_Initial:	
  2506                           
  2507                           	psect	text15
  2508  0224                     __ptext15:	
  2509 ;; *************** function _MainT *****************
  2510 ;; Defined at:
  2511 ;;		line 41 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;		None
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  i               1    0        unsigned char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;		None               void
  2518 ;; Registers used:
  2519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2525 ;;      Params:         0       0       0       0       0       0       0       0
  2526 ;;      Locals:         0       0       0       0       0       0       0       0
  2527 ;;      Temps:          0       3       0       0       0       0       0       0
  2528 ;;      Totals:         0       3       0       0       0       0       0       0
  2529 ;;Total ram usage:        3 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    4
  2532 ;; This function calls:
  2533 ;;		_setSegmentDisplayNumber
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           
  2540                           ;psect for function _MainT
  2541  0224                     _MainT:	
  2542                           
  2543                           ;myMain.c: 43: char i;
  2544                           ;myMain.c: 45: if(!TMain->PowerON)
  2545                           
  2546                           ;incstack = 0
  2547                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2548  0224  087A               	movf	_TMain,w
  2549  0225  0086               	movwf	6
  2550  0226  0187               	clrf	7
  2551  0227  1801               	btfsc	1,0
  2552  0228  2A47               	goto	l2321
  2553                           
  2554                           ;myMain.c: 46: {
  2555                           ;myMain.c: 47: TMain->PowerCount++;
  2556  0229  0A7A               	incf	_TMain,w
  2557  022A  0086               	movwf	6
  2558  022B  0187               	clrf	7
  2559  022C  3001               	movlw	1
  2560  022D  0781               	addwf	1,f
  2561  022E  3141               	addfsr 1,1
  2562  022F  1803               	skipnc
  2563  0230  0A81               	incf	1,f
  2564                           
  2565                           ;myMain.c: 48: if(TMain->PowerCount == 1500)
  2566  0231  0A7A               	incf	_TMain,w
  2567  0232  0086               	movwf	6
  2568  0233  0187               	clrf	7
  2569  0234  3F40               	moviw [0]fsr1
  2570  0235  3ADC               	xorlw	220
  2571  0236  1D03               	skipz
  2572  0237  2A3A               	goto	u3025
  2573  0238  3F41               	moviw [1]fsr1
  2574  0239  3A05               	xorlw	5
  2575  023A                     u3025:	
  2576  023A  1D03               	skipz
  2577  023B  0008               	return
  2578                           
  2579                           ;myMain.c: 49: {
  2580                           ;myMain.c: 50: TMain->PowerCount=0;
  2581  023C  0A7A               	incf	_TMain,w
  2582  023D  0086               	movwf	6
  2583  023E  0187               	clrf	7
  2584  023F  3000               	movlw	0
  2585  0240  3FC0               	movwi [0]fsr1
  2586  0241  3FC1               	movwi [1]fsr1
  2587                           
  2588                           ;myMain.c: 51: TMain->PowerON=1;
  2589  0242  087A               	movf	_TMain,w
  2590  0243  0086               	movwf	6
  2591  0244  0187               	clrf	7
  2592  0245  1401               	bsf	1,0
  2593                           
  2594                           ;myMain.c: 56: }
  2595                           ;myMain.c: 57: }
  2596  0246  0008               	return
  2597  0247                     l2321:	
  2598                           
  2599                           ;myMain.c: 58: else
  2600                           ;myMain.c: 59: {
  2601                           ;myMain.c: 60: TMain->Count1++;
  2602  0247  087A               	movf	_TMain,w
  2603  0248  3E05               	addlw	5
  2604  0249  0086               	movwf	6
  2605  024A  0187               	clrf	7
  2606  024B  3001               	movlw	1
  2607  024C  0781               	addwf	1,f
  2608  024D  3141               	addfsr 1,1
  2609  024E  1803               	skipnc
  2610  024F  0A81               	incf	1,f
  2611                           
  2612                           ;myMain.c: 61: if(TMain->Count1 == 1000)
  2613  0250  087A               	movf	_TMain,w
  2614  0251  3E05               	addlw	5
  2615  0252  0086               	movwf	6
  2616  0253  0187               	clrf	7
  2617  0254  3F40               	moviw [0]fsr1
  2618  0255  3AE8               	xorlw	232
  2619  0256  1D03               	skipz
  2620  0257  2A5A               	goto	u3035
  2621  0258  3F41               	moviw [1]fsr1
  2622  0259  3A03               	xorlw	3
  2623  025A                     u3035:	
  2624  025A  1D03               	skipz
  2625  025B  2A9D               	goto	l2341
  2626                           
  2627                           ;myMain.c: 62: {
  2628                           ;myMain.c: 63: TMain->Count1=0;
  2629  025C  087A               	movf	_TMain,w
  2630  025D  3E05               	addlw	5
  2631  025E  0086               	movwf	6
  2632  025F  0187               	clrf	7
  2633  0260  3000               	movlw	0
  2634  0261  3FC0               	movwi [0]fsr1
  2635  0262  3FC1               	movwi [1]fsr1
  2636                           
  2637                           ;myMain.c: 64: RA2=~RA2;
  2638  0263  3004               	movlw	4
  2639  0264  0020               	movlb	0	; select bank0
  2640  0265  068C               	xorwf	12,f
  2641                           
  2642                           ;myMain.c: 82: }
  2643                           ;myMain.c: 84: if(TMain->Test)
  2644                           
  2645                           ;myMain.c: 79: {
  2646  0266  087A               	movf	_TMain,w
  2647  0267  3E0C               	addlw	12
  2648  0268  0086               	movwf	6
  2649  0269  0187               	clrf	7
  2650  026A  0801               	movf	1,w
  2651  026B  3A00               	xorlw	0
  2652  026C  1903               	skipnz
  2653  026D  2A9D               	goto	l2341
  2654                           
  2655                           ;myMain.c: 85: {
  2656                           ;myMain.c: 86: setSegmentDisplayNumber(I2C->BufferReader[I2C->Count]);
  2657  026E  0879               	movf	_I2C,w
  2658  026F  3E40               	addlw	64
  2659  0270  0086               	movwf	6
  2660  0271  3001               	movlw	1	; select bank2/3
  2661  0272  0087               	movwf	7
  2662  0273  0801               	movf	1,w
  2663  0274  0779               	addwf	_I2C,w
  2664  0275  00C5               	movwf	??_MainT
  2665  0276  0845               	movf	??_MainT,w
  2666  0277  0086               	movwf	6
  2667  0278  3001               	movlw	1	; select bank2/3
  2668  0279  0087               	movwf	7
  2669  027A  0801               	movf	1,w
  2670  027B  00C6               	movwf	??_MainT+1
  2671  027C  01C7               	clrf	??_MainT+2
  2672  027D  0846               	movf	??_MainT+1,w
  2673  027E  00BE               	movwf	setSegmentDisplayNumber@number
  2674  027F  0847               	movf	??_MainT+2,w
  2675  0280  00BF               	movwf	setSegmentDisplayNumber@number+1
  2676  0281  3180  2050  3182   	fcall	_setSegmentDisplayNumber
  2677                           
  2678                           ;myMain.c: 87: I2C->Count++;
  2679  0284  3001               	movlw	1
  2680  0285  0020               	movlb	0	; select bank0
  2681  0286  00C5               	movwf	??_MainT
  2682  0287  0879               	movf	_I2C,w
  2683  0288  3E40               	addlw	64
  2684  0289  0086               	movwf	6
  2685  028A  3001               	movlw	1	; select bank2/3
  2686  028B  0087               	movwf	7
  2687  028C  0845               	movf	??_MainT,w
  2688  028D  0781               	addwf	1,f
  2689                           
  2690                           ;myMain.c: 88: if(I2C->Count==32)
  2691  028E  0879               	movf	_I2C,w
  2692  028F  3E40               	addlw	64
  2693  0290  0086               	movwf	6
  2694  0291  3001               	movlw	1	; select bank2/3
  2695  0292  0087               	movwf	7
  2696  0293  0801               	movf	1,w
  2697  0294  3A20               	xorlw	32
  2698  0295  1D03               	skipz
  2699  0296  2A9D               	goto	l2341
  2700                           
  2701                           ;myMain.c: 89: {
  2702                           ;myMain.c: 90: I2C->Count=0;
  2703  0297  0879               	movf	_I2C,w
  2704  0298  3E40               	addlw	64
  2705  0299  0086               	movwf	6
  2706  029A  3001               	movlw	1	; select bank2/3
  2707  029B  0087               	movwf	7
  2708  029C  0181               	clrf	1
  2709  029D                     l2341:	
  2710                           
  2711                           ;myMain.c: 91: }
  2712                           ;myMain.c: 92: }
  2713                           ;myMain.c: 105: }
  2714                           ;myMain.c: 108: TMain->Count2++;
  2715  029D  087A               	movf	_TMain,w
  2716  029E  3E07               	addlw	7
  2717  029F  0086               	movwf	6
  2718  02A0  0187               	clrf	7
  2719  02A1  3001               	movlw	1
  2720  02A2  0781               	addwf	1,f
  2721  02A3  3141               	addfsr 1,1
  2722  02A4  1803               	skipnc
  2723  02A5  0A81               	incf	1,f
  2724                           
  2725                           ;myMain.c: 109: if(TMain->Count2 == 2000)
  2726  02A6  087A               	movf	_TMain,w
  2727  02A7  3E07               	addlw	7
  2728  02A8  0086               	movwf	6
  2729  02A9  0187               	clrf	7
  2730  02AA  3F40               	moviw [0]fsr1
  2731  02AB  3AD0               	xorlw	208
  2732  02AC  1D03               	skipz
  2733  02AD  2AB0               	goto	u3065
  2734  02AE  3F41               	moviw [1]fsr1
  2735  02AF  3A07               	xorlw	7
  2736  02B0                     u3065:	
  2737  02B0  1D03               	skipz
  2738  02B1  0008               	return
  2739                           
  2740                           ;myMain.c: 110: {
  2741                           ;myMain.c: 111: TMain->Count2=0;
  2742  02B2  087A               	movf	_TMain,w
  2743  02B3  3E07               	addlw	7
  2744  02B4  0086               	movwf	6
  2745  02B5  0187               	clrf	7
  2746  02B6  3000               	movlw	0
  2747  02B7  3FC0               	movwi [0]fsr1
  2748  02B8  3FC1               	movwi [1]fsr1
  2749  02B9  0008               	return
  2750  02BA                     __end_of_MainT:	
  2751                           
  2752                           	psect	text16
  2753  0050                     __ptext16:	
  2754 ;; *************** function _setSegmentDisplayNumber *****************
  2755 ;; Defined at:
  2756 ;;		line 20 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  number          2    4[BANK0 ] int 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  i               1   10[BANK0 ] unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;		None               void
  2763 ;; Registers used:
  2764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2770 ;;      Params:         0       2       0       0       0       0       0       0
  2771 ;;      Locals:         0       1       0       0       0       0       0       0
  2772 ;;      Temps:          0       4       0       0       0       0       0       0
  2773 ;;      Totals:         0       7       0       0       0       0       0       0
  2774 ;;Total ram usage:        7 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    3
  2777 ;; This function calls:
  2778 ;;		___awdiv
  2779 ;;		___awmod
  2780 ;; This function is called by:
  2781 ;;		_MainT
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           
  2786                           ;psect for function _setSegmentDisplayNumber
  2787  0050                     _setSegmentDisplayNumber:	
  2788                           
  2789                           ;SegmentDisplay_A2.c: 22: char i;
  2790                           ;SegmentDisplay_A2.c: 23: if(Segment->Enable)
  2791                           
  2792                           ;incstack = 0
  2793                           ; Regs used in _setSegmentDisplayNumber: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  2794  0050  0020               	movlb	0	; select bank0
  2795  0051  0865               	movf	_Segment,w
  2796  0052  3E15               	addlw	21
  2797  0053  0086               	movwf	6
  2798  0054  0187               	clrf	7
  2799  0055  1C01               	btfss	1,0
  2800  0056  0008               	return
  2801                           
  2802                           ;SegmentDisplay_A2.c: 24: {
  2803                           ;SegmentDisplay_A2.c: 25: Segment->GO=1;
  2804  0057  0865               	movf	_Segment,w
  2805  0058  3E15               	addlw	21
  2806  0059  0086               	movwf	6
  2807  005A  0187               	clrf	7
  2808  005B  1481               	bsf	1,1
  2809                           
  2810                           ;SegmentDisplay_A2.c: 26: if(Segment->Hex)
  2811  005C  0865               	movf	_Segment,w
  2812  005D  3E15               	addlw	21
  2813  005E  0086               	movwf	6
  2814  005F  0187               	clrf	7
  2815  0060  1D01               	btfss	1,2
  2816  0061  289C               	goto	l2221
  2817                           
  2818                           ;SegmentDisplay_A2.c: 27: {
  2819                           ;SegmentDisplay_A2.c: 28: Segment->Num[0]=(number & 0x000f);
  2820  0062  083E               	movf	setSegmentDisplayNumber@number,w
  2821  0063  390F               	andlw	15
  2822  0064  00C0               	movwf	??_setSegmentDisplayNumber
  2823  0065  0865               	movf	_Segment,w
  2824  0066  3E11               	addlw	17
  2825  0067  0086               	movwf	6
  2826  0068  0187               	clrf	7
  2827  0069  0840               	movf	??_setSegmentDisplayNumber,w
  2828  006A  0081               	movwf	1
  2829                           
  2830                           ;SegmentDisplay_A2.c: 29: Segment->Num[1]=((number>>4)&0x000f);
  2831  006B  083F               	movf	setSegmentDisplayNumber@number+1,w
  2832  006C  00C1               	movwf	??_setSegmentDisplayNumber+1
  2833  006D  083E               	movf	setSegmentDisplayNumber@number,w
  2834  006E  00C0               	movwf	??_setSegmentDisplayNumber
  2835  006F  3004               	movlw	4
  2836  0070  00C2               	movwf	??_setSegmentDisplayNumber+2
  2837  0071                     u2835:	
  2838  0071  0D41               	rlf	??_setSegmentDisplayNumber+1,w
  2839  0072  0CC1               	rrf	??_setSegmentDisplayNumber+1,f
  2840  0073  0CC0               	rrf	??_setSegmentDisplayNumber,f
  2841  0074  0BC2               	decfsz	??_setSegmentDisplayNumber+2,f
  2842  0075  2871               	goto	u2835
  2843  0076  0840               	movf	??_setSegmentDisplayNumber,w
  2844  0077  390F               	andlw	15
  2845  0078  00C3               	movwf	??_setSegmentDisplayNumber+3
  2846  0079  0865               	movf	_Segment,w
  2847  007A  3E12               	addlw	18
  2848  007B  0086               	movwf	6
  2849  007C  0187               	clrf	7
  2850  007D  0843               	movf	??_setSegmentDisplayNumber+3,w
  2851  007E  0081               	movwf	1
  2852                           
  2853                           ;SegmentDisplay_A2.c: 30: Segment->Num[2]=((number>>8)&0x000f);
  2854  007F  083F               	movf	setSegmentDisplayNumber@number+1,w
  2855  0080  390F               	andlw	15
  2856  0081  00C0               	movwf	??_setSegmentDisplayNumber
  2857  0082  0865               	movf	_Segment,w
  2858  0083  3E13               	addlw	19
  2859  0084  0086               	movwf	6
  2860  0085  0187               	clrf	7
  2861  0086  0840               	movf	??_setSegmentDisplayNumber,w
  2862  0087  0081               	movwf	1
  2863                           
  2864                           ;SegmentDisplay_A2.c: 31: Segment->Num[3]=((number>>12)&0x000f);
  2865  0088  083F               	movf	setSegmentDisplayNumber@number+1,w
  2866  0089  00C1               	movwf	??_setSegmentDisplayNumber+1
  2867  008A  083E               	movf	setSegmentDisplayNumber@number,w
  2868  008B  00C0               	movwf	??_setSegmentDisplayNumber
  2869  008C  300C               	movlw	12
  2870  008D  00C2               	movwf	??_setSegmentDisplayNumber+2
  2871  008E                     u2845:	
  2872  008E  0D41               	rlf	??_setSegmentDisplayNumber+1,w
  2873  008F  0CC1               	rrf	??_setSegmentDisplayNumber+1,f
  2874  0090  0CC0               	rrf	??_setSegmentDisplayNumber,f
  2875  0091  0BC2               	decfsz	??_setSegmentDisplayNumber+2,f
  2876  0092  288E               	goto	u2845
  2877  0093  0840               	movf	??_setSegmentDisplayNumber,w
  2878  0094  390F               	andlw	15
  2879  0095  00C3               	movwf	??_setSegmentDisplayNumber+3
  2880  0096  0865               	movf	_Segment,w
  2881  0097  3E14               	addlw	20
  2882  0098  0086               	movwf	6
  2883  0099  0187               	clrf	7
  2884  009A  0843               	movf	??_setSegmentDisplayNumber+3,w
  2885  009B  2949               	goto	L2
  2886  009C                     l2221:	
  2887                           ;SegmentDisplay_A2.c: 32: }
  2888                           
  2889                           
  2890                           ;SegmentDisplay_A2.c: 33: else if(Segment->Dec)
  2891  009C  0865               	movf	_Segment,w
  2892  009D  3E15               	addlw	21
  2893  009E  0086               	movwf	6
  2894  009F  0187               	clrf	7
  2895  00A0  1D81               	btfss	1,3
  2896  00A1  294A               	goto	l2249
  2897                           
  2898                           ;SegmentDisplay_A2.c: 34: {
  2899                           ;SegmentDisplay_A2.c: 35: if(number > 0x270f)
  2900  00A2  083F               	movf	setSegmentDisplayNumber@number+1,w
  2901  00A3  3A80               	xorlw	128
  2902  00A4  00C0               	movwf	??_setSegmentDisplayNumber
  2903  00A5  30A7               	movlw	167
  2904  00A6  0240               	subwf	??_setSegmentDisplayNumber,w
  2905  00A7  1D03               	skipz
  2906  00A8  28AB               	goto	u2865
  2907  00A9  3010               	movlw	16
  2908  00AA  023E               	subwf	setSegmentDisplayNumber@number,w
  2909  00AB                     u2865:	
  2910  00AB  1C03               	skipc
  2911  00AC  28C3               	goto	l2237
  2912                           
  2913                           ;SegmentDisplay_A2.c: 36: {
  2914                           ;SegmentDisplay_A2.c: 37: for(i=0 ; i<4; i++)
  2915  00AD  0020               	movlb	0	; select bank0
  2916  00AE  01C4               	clrf	setSegmentDisplayNumber@i
  2917  00AF                     L3:	
  2918  00AF  3004               	movlw	4
  2919  00B0  0244               	subwf	setSegmentDisplayNumber@i,w
  2920  00B1  1803               	btfsc	3,0
  2921  00B2  294A               	goto	l2249
  2922                           
  2923                           ;SegmentDisplay_A2.c: 38: {
  2924                           ;SegmentDisplay_A2.c: 39: Segment->Num[i]=16;
  2925  00B3  3010               	movlw	16
  2926  00B4  00C0               	movwf	??_setSegmentDisplayNumber
  2927  00B5  0844               	movf	setSegmentDisplayNumber@i,w
  2928  00B6  3E11               	addlw	17
  2929  00B7  0765               	addwf	_Segment,w
  2930  00B8  00C1               	movwf	??_setSegmentDisplayNumber+1
  2931  00B9  0841               	movf	??_setSegmentDisplayNumber+1,w
  2932  00BA  0086               	movwf	6
  2933  00BB  0187               	clrf	7
  2934  00BC  0840               	movf	??_setSegmentDisplayNumber,w
  2935  00BD  0081               	movwf	1
  2936  00BE  3001               	movlw	1
  2937  00BF  00C0               	movwf	??_setSegmentDisplayNumber
  2938  00C0  0840               	movf	??_setSegmentDisplayNumber,w
  2939  00C1  07C4               	addwf	setSegmentDisplayNumber@i,f
  2940  00C2  28AF               	goto	L3
  2941  00C3                     l2237:	
  2942                           ;SegmentDisplay_A2.c: 40: }
  2943                           ;SegmentDisplay_A2.c: 41: }
  2944                           
  2945                           
  2946                           ;SegmentDisplay_A2.c: 42: else
  2947                           ;SegmentDisplay_A2.c: 43: {
  2948                           ;SegmentDisplay_A2.c: 44: Segment->Num[3]=(number/1000);
  2949  00C3  30E8               	movlw	232
  2950  00C4  00F3               	movwf	___awdiv@divisor
  2951  00C5  3003               	movlw	3
  2952  00C6  00F4               	movwf	___awdiv@divisor+1
  2953  00C7  0020               	movlb	0	; select bank0
  2954  00C8  083F               	movf	setSegmentDisplayNumber@number+1,w
  2955  00C9  01F6               	clrf	___awdiv@dividend+1
  2956  00CA  07F6               	addwf	___awdiv@dividend+1,f
  2957  00CB  083E               	movf	setSegmentDisplayNumber@number,w
  2958  00CC  01F5               	clrf	___awdiv@dividend
  2959  00CD  07F5               	addwf	___awdiv@dividend,f
  2960  00CE  3183  23A0  3180   	fcall	___awdiv
  2961  00D1  0873               	movf	?___awdiv,w
  2962  00D2  0020               	movlb	0	; select bank0
  2963  00D3  00C0               	movwf	??_setSegmentDisplayNumber
  2964  00D4  0865               	movf	_Segment,w
  2965  00D5  3E14               	addlw	20
  2966  00D6  0086               	movwf	6
  2967  00D7  0187               	clrf	7
  2968  00D8  0840               	movf	??_setSegmentDisplayNumber,w
  2969  00D9  0081               	movwf	1
  2970                           
  2971                           ;SegmentDisplay_A2.c: 45: number%=1000;
  2972  00DA  30E8               	movlw	232
  2973  00DB  00F3               	movwf	___awmod@divisor
  2974  00DC  3003               	movlw	3
  2975  00DD  00F4               	movwf	___awmod@divisor+1
  2976  00DE  083F               	movf	setSegmentDisplayNumber@number+1,w
  2977  00DF  01F6               	clrf	___awmod@dividend+1
  2978  00E0  07F6               	addwf	___awmod@dividend+1,f
  2979  00E1  083E               	movf	setSegmentDisplayNumber@number,w
  2980  00E2  01F5               	clrf	___awmod@dividend
  2981  00E3  07F5               	addwf	___awmod@dividend,f
  2982  00E4  3184  243E  3180   	fcall	___awmod
  2983  00E7  0874               	movf	?___awmod+1,w
  2984  00E8  0020               	movlb	0	; select bank0
  2985  00E9  01BF               	clrf	setSegmentDisplayNumber@number+1
  2986  00EA  07BF               	addwf	setSegmentDisplayNumber@number+1,f
  2987  00EB  0873               	movf	?___awmod,w
  2988  00EC  01BE               	clrf	setSegmentDisplayNumber@number
  2989  00ED  07BE               	addwf	setSegmentDisplayNumber@number,f
  2990                           
  2991                           ;SegmentDisplay_A2.c: 46: Segment->Num[2]=(number/100);
  2992  00EE  3064               	movlw	100
  2993  00EF  00F3               	movwf	___awdiv@divisor
  2994  00F0  3000               	movlw	0
  2995  00F1  00F4               	movwf	___awdiv@divisor+1
  2996  00F2  083F               	movf	setSegmentDisplayNumber@number+1,w
  2997  00F3  01F6               	clrf	___awdiv@dividend+1
  2998  00F4  07F6               	addwf	___awdiv@dividend+1,f
  2999  00F5  083E               	movf	setSegmentDisplayNumber@number,w
  3000  00F6  01F5               	clrf	___awdiv@dividend
  3001  00F7  07F5               	addwf	___awdiv@dividend,f
  3002  00F8  3183  23A0  3180   	fcall	___awdiv
  3003  00FB  0873               	movf	?___awdiv,w
  3004  00FC  0020               	movlb	0	; select bank0
  3005  00FD  00C0               	movwf	??_setSegmentDisplayNumber
  3006  00FE  0865               	movf	_Segment,w
  3007  00FF  3E13               	addlw	19
  3008  0100  0086               	movwf	6
  3009  0101  0187               	clrf	7
  3010  0102  0840               	movf	??_setSegmentDisplayNumber,w
  3011  0103  0081               	movwf	1
  3012                           
  3013                           ;SegmentDisplay_A2.c: 47: number%=100;
  3014  0104  3064               	movlw	100
  3015  0105  00F3               	movwf	___awmod@divisor
  3016  0106  3000               	movlw	0
  3017  0107  00F4               	movwf	___awmod@divisor+1
  3018  0108  083F               	movf	setSegmentDisplayNumber@number+1,w
  3019  0109  01F6               	clrf	___awmod@dividend+1
  3020  010A  07F6               	addwf	___awmod@dividend+1,f
  3021  010B  083E               	movf	setSegmentDisplayNumber@number,w
  3022  010C  01F5               	clrf	___awmod@dividend
  3023  010D  07F5               	addwf	___awmod@dividend,f
  3024  010E  3184  243E  3180   	fcall	___awmod
  3025  0111  0874               	movf	?___awmod+1,w
  3026  0112  0020               	movlb	0	; select bank0
  3027  0113  01BF               	clrf	setSegmentDisplayNumber@number+1
  3028  0114  07BF               	addwf	setSegmentDisplayNumber@number+1,f
  3029  0115  0873               	movf	?___awmod,w
  3030  0116  01BE               	clrf	setSegmentDisplayNumber@number
  3031  0117  07BE               	addwf	setSegmentDisplayNumber@number,f
  3032                           
  3033                           ;SegmentDisplay_A2.c: 48: Segment->Num[1]=(number/10);
  3034  0118  300A               	movlw	10
  3035  0119  00F3               	movwf	___awdiv@divisor
  3036  011A  3000               	movlw	0
  3037  011B  00F4               	movwf	___awdiv@divisor+1
  3038  011C  083F               	movf	setSegmentDisplayNumber@number+1,w
  3039  011D  01F6               	clrf	___awdiv@dividend+1
  3040  011E  07F6               	addwf	___awdiv@dividend+1,f
  3041  011F  083E               	movf	setSegmentDisplayNumber@number,w
  3042  0120  01F5               	clrf	___awdiv@dividend
  3043  0121  07F5               	addwf	___awdiv@dividend,f
  3044  0122  3183  23A0  3180   	fcall	___awdiv
  3045  0125  0873               	movf	?___awdiv,w
  3046  0126  0020               	movlb	0	; select bank0
  3047  0127  00C0               	movwf	??_setSegmentDisplayNumber
  3048  0128  0865               	movf	_Segment,w
  3049  0129  3E12               	addlw	18
  3050  012A  0086               	movwf	6
  3051  012B  0187               	clrf	7
  3052  012C  0840               	movf	??_setSegmentDisplayNumber,w
  3053  012D  0081               	movwf	1
  3054                           
  3055                           ;SegmentDisplay_A2.c: 49: number%=10;
  3056  012E  300A               	movlw	10
  3057  012F  00F3               	movwf	___awmod@divisor
  3058  0130  3000               	movlw	0
  3059  0131  00F4               	movwf	___awmod@divisor+1
  3060  0132  083F               	movf	setSegmentDisplayNumber@number+1,w
  3061  0133  01F6               	clrf	___awmod@dividend+1
  3062  0134  07F6               	addwf	___awmod@dividend+1,f
  3063  0135  083E               	movf	setSegmentDisplayNumber@number,w
  3064  0136  01F5               	clrf	___awmod@dividend
  3065  0137  07F5               	addwf	___awmod@dividend,f
  3066  0138  3184  243E  3180   	fcall	___awmod
  3067  013B  0874               	movf	?___awmod+1,w
  3068  013C  0020               	movlb	0	; select bank0
  3069  013D  01BF               	clrf	setSegmentDisplayNumber@number+1
  3070  013E  07BF               	addwf	setSegmentDisplayNumber@number+1,f
  3071  013F  0873               	movf	?___awmod,w
  3072  0140  01BE               	clrf	setSegmentDisplayNumber@number
  3073  0141  07BE               	addwf	setSegmentDisplayNumber@number,f
  3074                           
  3075                           ;SegmentDisplay_A2.c: 50: Segment->Num[0]=number;
  3076  0142  083E               	movf	setSegmentDisplayNumber@number,w
  3077  0143  00C0               	movwf	??_setSegmentDisplayNumber
  3078  0144  0865               	movf	_Segment,w
  3079  0145  3E11               	addlw	17
  3080  0146  0086               	movwf	6
  3081  0147  0187               	clrf	7
  3082  0148  0840               	movf	??_setSegmentDisplayNumber,w
  3083  0149                     L2:	
  3084  0149  0081               	movwf	1
  3085  014A                     l2249:	
  3086                           
  3087                           ;SegmentDisplay_A2.c: 51: }
  3088                           ;SegmentDisplay_A2.c: 52: }
  3089                           ;SegmentDisplay_A2.c: 53: if(Segment->Num[3] > 0)
  3090  014A  0865               	movf	_Segment,w
  3091  014B  3E14               	addlw	20
  3092  014C  0086               	movwf	6
  3093  014D  0187               	clrf	7
  3094  014E  0801               	movf	1,w
  3095  014F  3A00               	xorlw	0
  3096  0150  1903               	skipnz
  3097  0151  295B               	goto	l2253
  3098                           
  3099                           ;SegmentDisplay_A2.c: 54: {
  3100                           ;SegmentDisplay_A2.c: 55: Segment->DisplayCount=3;
  3101  0152  3003               	movlw	3
  3102  0153  00C0               	movwf	??_setSegmentDisplayNumber
  3103  0154  0865               	movf	_Segment,w
  3104  0155  3E17               	addlw	23
  3105  0156  0086               	movwf	6
  3106  0157  0187               	clrf	7
  3107  0158  0840               	movf	??_setSegmentDisplayNumber,w
  3108  0159  0081               	movwf	1
  3109                           
  3110                           ;SegmentDisplay_A2.c: 56: }
  3111  015A  0008               	return
  3112  015B                     l2253:	
  3113                           
  3114                           ;SegmentDisplay_A2.c: 57: else if(Segment->Num[2] > 0)
  3115  015B  0865               	movf	_Segment,w
  3116  015C  3E13               	addlw	19
  3117  015D  0086               	movwf	6
  3118  015E  0187               	clrf	7
  3119  015F  0801               	movf	1,w
  3120  0160  3A00               	xorlw	0
  3121  0161  1903               	skipnz
  3122  0162  296C               	goto	l2257
  3123                           
  3124                           ;SegmentDisplay_A2.c: 58: {
  3125                           ;SegmentDisplay_A2.c: 59: Segment->DisplayCount=2;
  3126  0163  3002               	movlw	2
  3127  0164  00C0               	movwf	??_setSegmentDisplayNumber
  3128  0165  0865               	movf	_Segment,w
  3129  0166  3E17               	addlw	23
  3130  0167  0086               	movwf	6
  3131  0168  0187               	clrf	7
  3132  0169  0840               	movf	??_setSegmentDisplayNumber,w
  3133  016A  0081               	movwf	1
  3134                           
  3135                           ;SegmentDisplay_A2.c: 60: }
  3136  016B  0008               	return
  3137  016C                     l2257:	
  3138                           
  3139                           ;SegmentDisplay_A2.c: 61: else if(Segment->Num[1] > 0)
  3140  016C  0865               	movf	_Segment,w
  3141  016D  3E12               	addlw	18
  3142  016E  0086               	movwf	6
  3143  016F  0187               	clrf	7
  3144  0170  0801               	movf	1,w
  3145  0171  3A00               	xorlw	0
  3146  0172  1903               	skipnz
  3147  0173  297B               	goto	l2261
  3148                           
  3149                           ;SegmentDisplay_A2.c: 62: {
  3150                           ;SegmentDisplay_A2.c: 63: Segment->DisplayCount=1;
  3151  0174  0865               	movf	_Segment,w
  3152  0175  3E17               	addlw	23
  3153  0176  0086               	movwf	6
  3154  0177  0187               	clrf	7
  3155  0178  0181               	clrf	1
  3156  0179  0A81               	incf	1,f
  3157                           
  3158                           ;SegmentDisplay_A2.c: 64: }
  3159  017A  0008               	return
  3160  017B                     l2261:	
  3161                           
  3162                           ;SegmentDisplay_A2.c: 65: else
  3163                           ;SegmentDisplay_A2.c: 66: {
  3164                           ;SegmentDisplay_A2.c: 67: Segment->DisplayCount=0;
  3165  017B  0865               	movf	_Segment,w
  3166  017C  3E17               	addlw	23
  3167  017D  0086               	movwf	6
  3168  017E  0187               	clrf	7
  3169  017F  0181               	clrf	1
  3170  0180  0008               	return
  3171  0181                     __end_of_setSegmentDisplayNumber:	
  3172                           
  3173                           	psect	text17
  3174  043E                     __ptext17:	
  3175 ;; *************** function ___awmod *****************
  3176 ;; Defined at:
  3177 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  divisor         2    3[COMMON] int 
  3180 ;;  dividend        2    5[COMMON] int 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;  sign            1    1[BANK0 ] unsigned char 
  3183 ;;  counter         1    0[BANK0 ] unsigned char 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  2    3[COMMON] int 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3193 ;;      Params:         4       0       0       0       0       0       0       0
  3194 ;;      Locals:         0       2       0       0       0       0       0       0
  3195 ;;      Temps:          1       0       0       0       0       0       0       0
  3196 ;;      Totals:         5       2       0       0       0       0       0       0
  3197 ;;Total ram usage:        7 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    2
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_setSegmentDisplayNumber
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           
  3208                           ;psect for function ___awmod
  3209  043E                     ___awmod:	
  3210                           
  3211                           ;incstack = 0
  3212                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3213  043E  0020               	movlb	0	; select bank0
  3214  043F  01BB               	clrf	___awmod@sign
  3215  0440  1FF6               	btfss	___awmod@dividend+1,7
  3216  0441  2C49               	goto	l2169
  3217  0442  09F5               	comf	___awmod@dividend,f
  3218  0443  09F6               	comf	___awmod@dividend+1,f
  3219  0444  0AF5               	incf	___awmod@dividend,f
  3220  0445  1903               	skipnz
  3221  0446  0AF6               	incf	___awmod@dividend+1,f
  3222  0447  01BB               	clrf	___awmod@sign
  3223  0448  0ABB               	incf	___awmod@sign,f
  3224  0449                     l2169:	
  3225  0449  1FF4               	btfss	___awmod@divisor+1,7
  3226  044A  2C50               	goto	l2173
  3227  044B  09F3               	comf	___awmod@divisor,f
  3228  044C  09F4               	comf	___awmod@divisor+1,f
  3229  044D  0AF3               	incf	___awmod@divisor,f
  3230  044E  1903               	skipnz
  3231  044F  0AF4               	incf	___awmod@divisor+1,f
  3232  0450                     l2173:	
  3233  0450  0874               	movf	___awmod@divisor+1,w
  3234  0451  0473               	iorwf	___awmod@divisor,w
  3235  0452  1903               	skipnz
  3236  0453  2C77               	goto	l2191
  3237  0454  01BA               	clrf	___awmod@counter
  3238  0455  0ABA               	incf	___awmod@counter,f
  3239  0456                     l2181:	
  3240  0456  1BF4               	btfsc	___awmod@divisor+1,7
  3241  0457  2C62               	goto	l2183
  3242  0458  3001               	movlw	1
  3243  0459                     u2725:	
  3244  0459  35F3               	lslf	___awmod@divisor,f
  3245  045A  0DF4               	rlf	___awmod@divisor+1,f
  3246  045B  0B89               	decfsz	9,f
  3247  045C  2C59               	goto	u2725
  3248  045D  3001               	movlw	1
  3249  045E  00F7               	movwf	??___awmod
  3250  045F  0877               	movf	??___awmod,w
  3251  0460  07BA               	addwf	___awmod@counter,f
  3252  0461  2C56               	goto	l2181
  3253  0462                     l2183:	
  3254  0462  0874               	movf	___awmod@divisor+1,w
  3255  0463  0276               	subwf	___awmod@dividend+1,w
  3256  0464  1D03               	skipz
  3257  0465  2C68               	goto	u2745
  3258  0466  0873               	movf	___awmod@divisor,w
  3259  0467  0275               	subwf	___awmod@dividend,w
  3260  0468                     u2745:	
  3261  0468  1C03               	skipc
  3262  0469  2C6E               	goto	l2187
  3263  046A  0873               	movf	___awmod@divisor,w
  3264  046B  02F5               	subwf	___awmod@dividend,f
  3265  046C  0874               	movf	___awmod@divisor+1,w
  3266  046D  3BF6               	subwfb	___awmod@dividend+1,f
  3267  046E                     l2187:	
  3268  046E  3001               	movlw	1
  3269  046F                     u2755:	
  3270  046F  36F4               	lsrf	___awmod@divisor+1,f
  3271  0470  0CF3               	rrf	___awmod@divisor,f
  3272  0471  0B89               	decfsz	9,f
  3273  0472  2C6F               	goto	u2755
  3274  0473  3001               	movlw	1
  3275  0474  02BA               	subwf	___awmod@counter,f
  3276  0475  1D03               	btfss	3,2
  3277  0476  2C62               	goto	l2183
  3278  0477                     l2191:	
  3279  0477  083B               	movf	___awmod@sign,w
  3280  0478  1903               	btfsc	3,2
  3281  0479  2C7F               	goto	l2195
  3282  047A  09F5               	comf	___awmod@dividend,f
  3283  047B  09F6               	comf	___awmod@dividend+1,f
  3284  047C  0AF5               	incf	___awmod@dividend,f
  3285  047D  1903               	skipnz
  3286  047E  0AF6               	incf	___awmod@dividend+1,f
  3287  047F                     l2195:	
  3288  047F  0876               	movf	___awmod@dividend+1,w
  3289  0480  01F4               	clrf	?___awmod+1
  3290  0481  07F4               	addwf	?___awmod+1,f
  3291  0482  0875               	movf	___awmod@dividend,w
  3292  0483  01F3               	clrf	?___awmod
  3293  0484  07F3               	addwf	?___awmod,f
  3294  0485  0008               	return
  3295  0486                     __end_of___awmod:	
  3296                           
  3297                           	psect	text18
  3298  03A0                     __ptext18:	
  3299 ;; *************** function ___awdiv *****************
  3300 ;; Defined at:
  3301 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  divisor         2    3[COMMON] int 
  3304 ;;  dividend        2    5[COMMON] int 
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  quotient        2    2[BANK0 ] int 
  3307 ;;  sign            1    1[BANK0 ] unsigned char 
  3308 ;;  counter         1    0[BANK0 ] unsigned char 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  2    3[COMMON] int 
  3311 ;; Registers used:
  3312 ;;		wreg, status,2, status,0
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3318 ;;      Params:         4       0       0       0       0       0       0       0
  3319 ;;      Locals:         0       4       0       0       0       0       0       0
  3320 ;;      Temps:          1       0       0       0       0       0       0       0
  3321 ;;      Totals:         5       4       0       0       0       0       0       0
  3322 ;;Total ram usage:        9 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    2
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_setSegmentDisplayNumber
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function ___awdiv
  3334  03A0                     ___awdiv:	
  3335                           
  3336                           ;incstack = 0
  3337                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3338  03A0  0020               	movlb	0	; select bank0
  3339  03A1  01BB               	clrf	___awdiv@sign
  3340  03A2  1FF4               	btfss	___awdiv@divisor+1,7
  3341  03A3  2BAB               	goto	l2125
  3342  03A4  09F3               	comf	___awdiv@divisor,f
  3343  03A5  09F4               	comf	___awdiv@divisor+1,f
  3344  03A6  0AF3               	incf	___awdiv@divisor,f
  3345  03A7  1903               	skipnz
  3346  03A8  0AF4               	incf	___awdiv@divisor+1,f
  3347  03A9  01BB               	clrf	___awdiv@sign
  3348  03AA  0ABB               	incf	___awdiv@sign,f
  3349  03AB                     l2125:	
  3350  03AB  1FF6               	btfss	___awdiv@dividend+1,7
  3351  03AC  2BB6               	goto	l2131
  3352  03AD  09F5               	comf	___awdiv@dividend,f
  3353  03AE  09F6               	comf	___awdiv@dividend+1,f
  3354  03AF  0AF5               	incf	___awdiv@dividend,f
  3355  03B0  1903               	skipnz
  3356  03B1  0AF6               	incf	___awdiv@dividend+1,f
  3357  03B2  3001               	movlw	1
  3358  03B3  00F7               	movwf	??___awdiv
  3359  03B4  0877               	movf	??___awdiv,w
  3360  03B5  06BB               	xorwf	___awdiv@sign,f
  3361  03B6                     l2131:	
  3362  03B6  01BC               	clrf	___awdiv@quotient
  3363  03B7  01BD               	clrf	___awdiv@quotient+1
  3364  03B8  0874               	movf	___awdiv@divisor+1,w
  3365  03B9  0473               	iorwf	___awdiv@divisor,w
  3366  03BA  1903               	skipnz
  3367  03BB  2BE5               	goto	l2153
  3368  03BC  01BA               	clrf	___awdiv@counter
  3369  03BD  0ABA               	incf	___awdiv@counter,f
  3370  03BE                     l2141:	
  3371  03BE  1BF4               	btfsc	___awdiv@divisor+1,7
  3372  03BF  2BCA               	goto	l2143
  3373  03C0  3001               	movlw	1
  3374  03C1                     u2625:	
  3375  03C1  35F3               	lslf	___awdiv@divisor,f
  3376  03C2  0DF4               	rlf	___awdiv@divisor+1,f
  3377  03C3  0B89               	decfsz	9,f
  3378  03C4  2BC1               	goto	u2625
  3379  03C5  3001               	movlw	1
  3380  03C6  00F7               	movwf	??___awdiv
  3381  03C7  0877               	movf	??___awdiv,w
  3382  03C8  07BA               	addwf	___awdiv@counter,f
  3383  03C9  2BBE               	goto	l2141
  3384  03CA                     l2143:	
  3385  03CA  3001               	movlw	1
  3386  03CB                     u2645:	
  3387  03CB  35BC               	lslf	___awdiv@quotient,f
  3388  03CC  0DBD               	rlf	___awdiv@quotient+1,f
  3389  03CD  0B89               	decfsz	9,f
  3390  03CE  2BCB               	goto	u2645
  3391  03CF  0874               	movf	___awdiv@divisor+1,w
  3392  03D0  0276               	subwf	___awdiv@dividend+1,w
  3393  03D1  1D03               	skipz
  3394  03D2  2BD5               	goto	u2655
  3395  03D3  0873               	movf	___awdiv@divisor,w
  3396  03D4  0275               	subwf	___awdiv@dividend,w
  3397  03D5                     u2655:	
  3398  03D5  1C03               	skipc
  3399  03D6  2BDC               	goto	l2149
  3400  03D7  0873               	movf	___awdiv@divisor,w
  3401  03D8  02F5               	subwf	___awdiv@dividend,f
  3402  03D9  0874               	movf	___awdiv@divisor+1,w
  3403  03DA  3BF6               	subwfb	___awdiv@dividend+1,f
  3404  03DB  143C               	bsf	___awdiv@quotient,0
  3405  03DC                     l2149:	
  3406  03DC  3001               	movlw	1
  3407  03DD                     u2665:	
  3408  03DD  36F4               	lsrf	___awdiv@divisor+1,f
  3409  03DE  0CF3               	rrf	___awdiv@divisor,f
  3410  03DF  0B89               	decfsz	9,f
  3411  03E0  2BDD               	goto	u2665
  3412  03E1  3001               	movlw	1
  3413  03E2  02BA               	subwf	___awdiv@counter,f
  3414  03E3  1D03               	btfss	3,2
  3415  03E4  2BCA               	goto	l2143
  3416  03E5                     l2153:	
  3417  03E5  083B               	movf	___awdiv@sign,w
  3418  03E6  1903               	btfsc	3,2
  3419  03E7  2BED               	goto	l2157
  3420  03E8  09BC               	comf	___awdiv@quotient,f
  3421  03E9  09BD               	comf	___awdiv@quotient+1,f
  3422  03EA  0ABC               	incf	___awdiv@quotient,f
  3423  03EB  1903               	skipnz
  3424  03EC  0ABD               	incf	___awdiv@quotient+1,f
  3425  03ED                     l2157:	
  3426  03ED  083D               	movf	___awdiv@quotient+1,w
  3427  03EE  01F4               	clrf	?___awdiv+1
  3428  03EF  07F4               	addwf	?___awdiv+1,f
  3429  03F0  083C               	movf	___awdiv@quotient,w
  3430  03F1  01F3               	clrf	?___awdiv
  3431  03F2  07F3               	addwf	?___awdiv,f
  3432  03F3  0008               	return
  3433  03F4                     __end_of___awdiv:	
  3434                           
  3435                           	psect	text19
  3436  032D                     __ptext19:	
  3437 ;; *************** function _I2C_Main *****************
  3438 ;; Defined at:
  3439 ;;		line 275 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  i               1    6[COMMON] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;		None               void
  3446 ;; Registers used:
  3447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3453 ;;      Params:         0       0       0       0       0       0       0       0
  3454 ;;      Locals:         1       0       0       0       0       0       0       0
  3455 ;;      Temps:          0       3       0       0       0       0       0       0
  3456 ;;      Totals:         1       3       0       0       0       0       0       0
  3457 ;;Total ram usage:        4 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    3
  3460 ;; This function calls:
  3461 ;;		_I2C_Master_Reception
  3462 ;;		_I2C_Master_Transmission
  3463 ;; This function is called by:
  3464 ;;		_main
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _I2C_Main
  3470  032D                     _I2C_Main:	
  3471                           
  3472                           ;MCU_16f1516_B1.c: 277: char i;
  3473                           ;MCU_16f1516_B1.c: 302: if(I2C->MasterRxGO)
  3474                           
  3475                           ;incstack = 0
  3476                           ; Regs used in _I2C_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3477  032D  0879               	movf	_I2C,w
  3478  032E  3E42               	addlw	66
  3479  032F  0086               	movwf	6
  3480  0330  3001               	movlw	1	; select bank2/3
  3481  0331  0087               	movwf	7
  3482  0332  1E01               	btfss	1,4
  3483  0333  2B6C               	goto	l187
  3484                           
  3485                           ;MCU_16f1516_B1.c: 303: {
  3486                           ;MCU_16f1516_B1.c: 304: I2C->MasterRxGO=0;
  3487  0334  0879               	movf	_I2C,w
  3488  0335  3E42               	addlw	66
  3489  0336  0086               	movwf	6
  3490  0337  3001               	movlw	1	; select bank2/3
  3491  0338  0087               	movwf	7
  3492  0339  1201               	bcf	1,4
  3493                           
  3494                           ;MCU_16f1516_B1.c: 305: I2C_Master_Reception();
  3495  033A  3183  23F4  3183   	fcall	_I2C_Master_Reception
  3496                           
  3497                           ;MCU_16f1516_B1.c: 306: TMain->Test=1;
  3498  033D  087A               	movf	_TMain,w
  3499  033E  3E0C               	addlw	12
  3500  033F  0086               	movwf	6
  3501  0340  0187               	clrf	7
  3502  0341  0181               	clrf	1
  3503  0342  0A81               	incf	1,f
  3504                           
  3505                           ;MCU_16f1516_B1.c: 307: RA1=~RA1;
  3506  0343  3002               	movlw	2
  3507  0344  0020               	movlb	0	; select bank0
  3508  0345  068C               	xorwf	12,f
  3509                           
  3510                           ;MCU_16f1516_B1.c: 309: for(i=0;i<32;i++)
  3511  0346  01F6               	clrf	I2C_Main@i
  3512  0347  3020               	movlw	32
  3513  0348  0276               	subwf	I2C_Main@i,w
  3514  0349  1803               	btfsc	3,0
  3515  034A  2B65               	goto	l2285
  3516  034B                     l2279:	
  3517                           
  3518                           ;MCU_16f1516_B1.c: 310: {
  3519                           ;MCU_16f1516_B1.c: 311: UART->TxData[i]=I2C->BufferReader[i];
  3520  034B  0876               	movf	I2C_Main@i,w
  3521  034C  0779               	addwf	_I2C,w
  3522  034D  00BA               	movwf	??_I2C_Main
  3523  034E  083A               	movf	??_I2C_Main,w
  3524  034F  0086               	movwf	6
  3525  0350  3001               	movlw	1	; select bank2/3
  3526  0351  0087               	movwf	7
  3527  0352  0801               	movf	1,w
  3528  0353  00BB               	movwf	??_I2C_Main+1
  3529  0354  0876               	movf	I2C_Main@i,w
  3530  0355  0778               	addwf	_UART,w
  3531  0356  00BC               	movwf	??_I2C_Main+2
  3532  0357  083C               	movf	??_I2C_Main+2,w
  3533  0358  0086               	movwf	6
  3534  0359  3001               	movlw	1	; select bank2/3
  3535  035A  0087               	movwf	7
  3536  035B  083B               	movf	??_I2C_Main+1,w
  3537  035C  0081               	movwf	1
  3538  035D  3001               	movlw	1
  3539  035E  00BA               	movwf	??_I2C_Main
  3540  035F  083A               	movf	??_I2C_Main,w
  3541  0360  07F6               	addwf	I2C_Main@i,f
  3542  0361  3020               	movlw	32
  3543  0362  0276               	subwf	I2C_Main@i,w
  3544  0363  1C03               	skipc
  3545  0364  2B4B               	goto	l2279
  3546  0365                     l2285:	
  3547                           
  3548                           ;MCU_16f1516_B1.c: 312: }
  3549                           ;MCU_16f1516_B1.c: 313: UART->TxGO=1;
  3550  0365  0878               	movf	_UART,w
  3551  0366  3E43               	addlw	67
  3552  0367  0086               	movwf	6
  3553  0368  3001               	movlw	1	; select bank2/3
  3554  0369  0087               	movwf	7
  3555  036A  1401               	bsf	1,0
  3556                           
  3557                           ;MCU_16f1516_B1.c: 315: }
  3558  036B  0008               	return
  3559  036C                     l187:	
  3560                           
  3561                           ;MCU_16f1516_B1.c: 316: else
  3562                           ;MCU_16f1516_B1.c: 317: {
  3563                           ;MCU_16f1516_B1.c: 318: if(RC0)
  3564  036C  0020               	movlb	0	; select bank0
  3565  036D  1C0E               	btfss	14,0	;volatile
  3566  036E  2B83               	goto	l2291
  3567                           
  3568                           ;MCU_16f1516_B1.c: 319: {
  3569                           ;MCU_16f1516_B1.c: 320: if(!I2C->SS)
  3570  036F  0879               	movf	_I2C,w
  3571  0370  3E42               	addlw	66
  3572  0371  0086               	movwf	6
  3573  0372  3001               	movlw	1	; select bank2/3
  3574  0373  0087               	movwf	7
  3575  0374  1A81               	btfsc	1,5
  3576  0375  0008               	return
  3577                           
  3578                           ;MCU_16f1516_B1.c: 321: {
  3579                           ;MCU_16f1516_B1.c: 322: I2C->SS=1;
  3580  0376  0879               	movf	_I2C,w
  3581  0377  3E42               	addlw	66
  3582  0378  0086               	movwf	6
  3583  0379  3001               	movlw	1	; select bank2/3
  3584  037A  0087               	movwf	7
  3585  037B  1681               	bsf	1,5
  3586                           
  3587                           ;MCU_16f1516_B1.c: 323: I2C->MasterRxGO=1;
  3588  037C  0879               	movf	_I2C,w
  3589  037D  3E42               	addlw	66
  3590  037E  0086               	movwf	6
  3591  037F  3001               	movlw	1	; select bank2/3
  3592  0380  0087               	movwf	7
  3593  0381  1601               	bsf	1,4
  3594                           
  3595                           ;MCU_16f1516_B1.c: 324: }
  3596                           ;MCU_16f1516_B1.c: 325: }
  3597  0382  0008               	return
  3598  0383                     l2291:	
  3599                           
  3600                           ;MCU_16f1516_B1.c: 326: else
  3601                           ;MCU_16f1516_B1.c: 327: {
  3602                           ;MCU_16f1516_B1.c: 328: if(I2C->SS)
  3603  0383  0879               	movf	_I2C,w
  3604  0384  3E42               	addlw	66
  3605  0385  0086               	movwf	6
  3606  0386  3001               	movlw	1	; select bank2/3
  3607  0387  0087               	movwf	7
  3608  0388  1E81               	btfss	1,5
  3609  0389  2B90               	goto	l194
  3610                           
  3611                           ;MCU_16f1516_B1.c: 329: {
  3612                           ;MCU_16f1516_B1.c: 330: I2C->SS=0;
  3613  038A  0879               	movf	_I2C,w
  3614  038B  3E42               	addlw	66
  3615  038C  0086               	movwf	6
  3616  038D  3001               	movlw	1	; select bank2/3
  3617  038E  0087               	movwf	7
  3618  038F  1281               	bcf	1,5
  3619  0390                     l194:	
  3620                           
  3621                           ;MCU_16f1516_B1.c: 331: }
  3622                           ;MCU_16f1516_B1.c: 332: if(I2C->MasterTxGO)
  3623  0390  0879               	movf	_I2C,w
  3624  0391  3E42               	addlw	66
  3625  0392  0086               	movwf	6
  3626  0393  3001               	movlw	1	; select bank2/3
  3627  0394  0087               	movwf	7
  3628  0395  1D81               	btfss	1,3
  3629  0396  0008               	return
  3630                           
  3631                           ;MCU_16f1516_B1.c: 333: {
  3632                           ;MCU_16f1516_B1.c: 334: I2C->MasterTxGO=0;
  3633  0397  0879               	movf	_I2C,w
  3634  0398  3E42               	addlw	66
  3635  0399  0086               	movwf	6
  3636  039A  3001               	movlw	1	; select bank2/3
  3637  039B  0087               	movwf	7
  3638  039C  1181               	bcf	1,3
  3639                           
  3640                           ;MCU_16f1516_B1.c: 335: I2C_Master_Transmission();
  3641  039D  3184  24F8         	fcall	_I2C_Master_Transmission
  3642  039F  0008               	return
  3643  03A0                     __end_of_I2C_Main:	
  3644                           
  3645                           	psect	text20
  3646  04F8                     __ptext20:	
  3647 ;; *************** function _I2C_Master_Transmission *****************
  3648 ;; Defined at:
  3649 ;;		line 375 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  i               1    4[COMMON] unsigned char 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;		None               void
  3656 ;; Registers used:
  3657 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3663 ;;      Params:         0       0       0       0       0       0       0       0
  3664 ;;      Locals:         1       0       0       0       0       0       0       0
  3665 ;;      Temps:          1       0       0       0       0       0       0       0
  3666 ;;      Totals:         2       0       0       0       0       0       0       0
  3667 ;;Total ram usage:        2 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    2
  3670 ;; This function calls:
  3671 ;;		Nothing
  3672 ;; This function is called by:
  3673 ;;		_I2C_Main
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function _I2C_Master_Transmission
  3679  04F8                     _I2C_Master_Transmission:	
  3680  04F8                     l202:	
  3681                           ;MCU_16f1516_B1.c: 377: char i;
  3682                           ;MCU_16f1516_B1.c: 378: while(SEN);
  3683                           
  3684                           ;incstack = 0
  3685                           ; Regs used in _I2C_Master_Transmission: [wreg+fsr1l+fsr1h+status,2+status,0]
  3686                           
  3687  04F8  0024               	movlb	4	; select bank4
  3688  04F9  1816               	btfsc	22,0	;volatile
  3689  04FA  2CF8               	goto	l202
  3690                           
  3691                           ;MCU_16f1516_B1.c: 379: SEN=1;
  3692  04FB  1416               	bsf	22,0	;volatile
  3693  04FC                     l205:	
  3694                           ;MCU_16f1516_B1.c: 381: while(SEN);
  3695                           
  3696  04FC  1816               	btfsc	22,0	;volatile
  3697  04FD  2CFC               	goto	l205
  3698                           
  3699                           ;MCU_16f1516_B1.c: 384: SSPBUF=0x10;
  3700  04FE  3010               	movlw	16
  3701  04FF  0091               	movwf	17	;volatile
  3702  0500                     l208:	
  3703                           ;MCU_16f1516_B1.c: 385: while(BF);
  3704                           
  3705  0500  1814               	btfsc	20,0	;volatile
  3706  0501  2D00               	goto	l208
  3707  0502                     l211:	
  3708                           ;MCU_16f1516_B1.c: 388: while(ACKSTAT);
  3709                           
  3710  0502  1B16               	btfsc	22,6	;volatile
  3711  0503  2D02               	goto	l211
  3712                           
  3713                           ;MCU_16f1516_B1.c: 390: for(i=0;i<32;i++)
  3714  0504  01F4               	clrf	I2C_Master_Transmission@i
  3715  0505  3020               	movlw	32
  3716  0506  0274               	subwf	I2C_Master_Transmission@i,w
  3717  0507  1803               	btfsc	3,0
  3718  0508  2D21               	goto	l225
  3719  0509                     l216:	
  3720                           ;MCU_16f1516_B1.c: 391: {
  3721                           ;MCU_16f1516_B1.c: 392: while(SEN);
  3722                           
  3723  0509  1816               	btfsc	22,0	;volatile
  3724  050A  2D09               	goto	l216
  3725                           
  3726                           ;MCU_16f1516_B1.c: 393: SSPBUF=I2C->BufferWriter[i];
  3727  050B  0874               	movf	I2C_Master_Transmission@i,w
  3728  050C  3E20               	addlw	32
  3729  050D  0779               	addwf	_I2C,w
  3730  050E  00F3               	movwf	??_I2C_Master_Transmission
  3731  050F  0873               	movf	??_I2C_Master_Transmission,w
  3732  0510  0086               	movwf	6
  3733  0511  3001               	movlw	1	; select bank2/3
  3734  0512  0087               	movwf	7
  3735  0513  0801               	movf	1,w
  3736  0514  0091               	movwf	17	;volatile
  3737  0515                     l219:	
  3738                           ;MCU_16f1516_B1.c: 394: while(BF);
  3739                           
  3740  0515  1814               	btfsc	20,0	;volatile
  3741  0516  2D15               	goto	l219
  3742  0517                     l222:	
  3743                           ;MCU_16f1516_B1.c: 397: while(ACKSTAT);
  3744                           
  3745  0517  1B16               	btfsc	22,6	;volatile
  3746  0518  2D17               	goto	l222
  3747  0519  3001               	movlw	1
  3748  051A  00F3               	movwf	??_I2C_Master_Transmission
  3749  051B  0873               	movf	??_I2C_Master_Transmission,w
  3750  051C  07F4               	addwf	I2C_Master_Transmission@i,f
  3751  051D  3020               	movlw	32
  3752  051E  0274               	subwf	I2C_Master_Transmission@i,w
  3753  051F  1C03               	skipc
  3754  0520  2D09               	goto	l216
  3755  0521                     l225:	
  3756                           ;MCU_16f1516_B1.c: 398: }
  3757                           ;MCU_16f1516_B1.c: 400: while(SEN);
  3758                           
  3759  0521  1C16               	btfss	22,0	;volatile
  3760  0522  2D25               	goto	l228
  3761  0523  2D21               	goto	l225
  3762  0524                     l229:	
  3763                           ;MCU_16f1516_B1.c: 401: while(!PEN)
  3764                           
  3765                           
  3766                           ;MCU_16f1516_B1.c: 402: PEN=1;
  3767  0524  1516               	bsf	22,2	;volatile
  3768  0525                     l228:	
  3769  0525  1D16               	btfss	22,2	;volatile
  3770  0526  2D24               	goto	l229
  3771  0527                     l231:	
  3772                           ;MCU_16f1516_B1.c: 403: while(PEN);
  3773                           
  3774  0527  1D16               	btfss	22,2	;volatile
  3775  0528  0008               	return
  3776  0529  2D27               	goto	l231
  3777  052A                     __end_of_I2C_Master_Transmission:	
  3778                           
  3779                           	psect	text21
  3780  03F4                     __ptext21:	
  3781 ;; *************** function _I2C_Master_Reception *****************
  3782 ;; Defined at:
  3783 ;;		line 408 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;		None
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;  i               1    5[COMMON] unsigned char 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;		None               void
  3790 ;; Registers used:
  3791 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3797 ;;      Params:         0       0       0       0       0       0       0       0
  3798 ;;      Locals:         1       0       0       0       0       0       0       0
  3799 ;;      Temps:          2       0       0       0       0       0       0       0
  3800 ;;      Totals:         3       0       0       0       0       0       0       0
  3801 ;;Total ram usage:        3 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    2
  3804 ;; This function calls:
  3805 ;;		Nothing
  3806 ;; This function is called by:
  3807 ;;		_I2C_Main
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           
  3812                           ;psect for function _I2C_Master_Reception
  3813  03F4                     _I2C_Master_Reception:	
  3814  03F4                     l237:	
  3815                           ;MCU_16f1516_B1.c: 410: char i;
  3816                           ;MCU_16f1516_B1.c: 411: while(SEN);
  3817                           
  3818                           ;incstack = 0
  3819                           ; Regs used in _I2C_Master_Reception: [wreg+fsr1l+fsr1h+status,2+status,0]
  3820                           
  3821  03F4  0024               	movlb	4	; select bank4
  3822  03F5  1816               	btfsc	22,0	;volatile
  3823  03F6  2BF4               	goto	l237
  3824                           
  3825                           ;MCU_16f1516_B1.c: 412: SEN=1;
  3826  03F7  1416               	bsf	22,0	;volatile
  3827  03F8                     l240:	
  3828                           ;MCU_16f1516_B1.c: 413: while(SEN);
  3829                           
  3830  03F8  1816               	btfsc	22,0	;volatile
  3831  03F9  2BF8               	goto	l240
  3832                           
  3833                           ;MCU_16f1516_B1.c: 416: SSPBUF=0x11;
  3834  03FA  3011               	movlw	17
  3835  03FB  0091               	movwf	17	;volatile
  3836  03FC                     l243:	
  3837                           ;MCU_16f1516_B1.c: 419: while(BF);
  3838                           
  3839  03FC  1814               	btfsc	20,0	;volatile
  3840  03FD  2BFC               	goto	l243
  3841  03FE                     l246:	
  3842                           ;MCU_16f1516_B1.c: 420: while(ACKSTAT);
  3843                           
  3844  03FE  1B16               	btfsc	22,6	;volatile
  3845  03FF  2BFE               	goto	l246
  3846                           
  3847                           ;MCU_16f1516_B1.c: 423: for(i=0;i<32;i++)
  3848  0400  01F5               	clrf	I2C_Master_Reception@i
  3849  0401  3020               	movlw	32
  3850  0402  0275               	subwf	I2C_Master_Reception@i,w
  3851  0403  1803               	btfsc	3,0
  3852  0404  2C25               	goto	l266
  3853  0405                     l251:	
  3854                           ;MCU_16f1516_B1.c: 424: {
  3855                           ;MCU_16f1516_B1.c: 425: while(SEN);
  3856                           
  3857  0405  1816               	btfsc	22,0	;volatile
  3858  0406  2C05               	goto	l251
  3859  0407                     l254:	
  3860                           ;MCU_16f1516_B1.c: 426: while(RCEN);
  3861                           
  3862  0407  1996               	btfsc	22,3	;volatile
  3863  0408  2C07               	goto	l254
  3864                           
  3865                           ;MCU_16f1516_B1.c: 427: RCEN=1;
  3866  0409  1596               	bsf	22,3	;volatile
  3867  040A                     l257:	
  3868                           ;MCU_16f1516_B1.c: 428: while(RCEN);
  3869                           
  3870  040A  1996               	btfsc	22,3	;volatile
  3871  040B  2C0A               	goto	l257
  3872                           
  3873                           ;MCU_16f1516_B1.c: 429: I2C->BufferReader[i]=SSPBUF;
  3874  040C  0811               	movf	17,w	;volatile
  3875  040D  00F3               	movwf	??_I2C_Master_Reception
  3876  040E  0875               	movf	I2C_Master_Reception@i,w
  3877  040F  0779               	addwf	_I2C,w
  3878  0410  00F4               	movwf	??_I2C_Master_Reception+1
  3879  0411  0874               	movf	??_I2C_Master_Reception+1,w
  3880  0412  0086               	movwf	6
  3881  0413  3001               	movlw	1	; select bank2/3
  3882  0414  0087               	movwf	7
  3883  0415  0873               	movf	??_I2C_Master_Reception,w
  3884  0416  0081               	movwf	1
  3885  0417                     l260:	
  3886                           ;MCU_16f1516_B1.c: 430: while(!ACKEN)
  3887                           
  3888  0417  1A16               	btfsc	22,4	;volatile
  3889  0418  2C1B               	goto	l263
  3890                           
  3891                           ;MCU_16f1516_B1.c: 431: ACKEN=1;
  3892  0419  1616               	bsf	22,4	;volatile
  3893  041A  2C17               	goto	l260
  3894  041B                     l263:	
  3895                           ;MCU_16f1516_B1.c: 432: while(ACKEN);
  3896                           
  3897  041B  1A16               	btfsc	22,4	;volatile
  3898  041C  2C1B               	goto	l263
  3899  041D  3001               	movlw	1
  3900  041E  00F3               	movwf	??_I2C_Master_Reception
  3901  041F  0873               	movf	??_I2C_Master_Reception,w
  3902  0420  07F5               	addwf	I2C_Master_Reception@i,f
  3903  0421  3020               	movlw	32
  3904  0422  0275               	subwf	I2C_Master_Reception@i,w
  3905  0423  1C03               	skipc
  3906  0424  2C05               	goto	l251
  3907  0425                     l266:	
  3908                           ;MCU_16f1516_B1.c: 433: }
  3909                           ;MCU_16f1516_B1.c: 434: while(RCEN);
  3910                           
  3911  0425  1996               	btfsc	22,3	;volatile
  3912  0426  2C25               	goto	l266
  3913                           
  3914                           ;MCU_16f1516_B1.c: 435: RCEN=1;
  3915  0427  1596               	bsf	22,3	;volatile
  3916  0428                     l269:	
  3917                           ;MCU_16f1516_B1.c: 436: while(RCEN);
  3918                           
  3919  0428  1D96               	btfss	22,3	;volatile
  3920  0429  2C2C               	goto	l272
  3921  042A  2C28               	goto	l269
  3922  042B                     l273:	
  3923                           ;MCU_16f1516_B1.c: 437: while(!ACKEN)
  3924                           
  3925                           
  3926                           ;MCU_16f1516_B1.c: 438: ACKEN=1;
  3927  042B  1616               	bsf	22,4	;volatile
  3928  042C                     l272:	
  3929  042C  1E16               	btfss	22,4	;volatile
  3930  042D  2C2B               	goto	l273
  3931  042E                     l275:	
  3932                           ;MCU_16f1516_B1.c: 439: while(ACKEN);
  3933                           
  3934  042E  1A16               	btfsc	22,4	;volatile
  3935  042F  2C2E               	goto	l275
  3936  0430                     l278:	
  3937                           ;MCU_16f1516_B1.c: 440: while(RCEN);
  3938                           
  3939  0430  1996               	btfsc	22,3	;volatile
  3940  0431  2C30               	goto	l278
  3941                           
  3942                           ;MCU_16f1516_B1.c: 441: RCEN=1;
  3943  0432  1596               	bsf	22,3	;volatile
  3944  0433                     l281:	
  3945                           ;MCU_16f1516_B1.c: 442: while(RCEN);
  3946                           
  3947  0433  1996               	btfsc	22,3	;volatile
  3948  0434  2C33               	goto	l281
  3949  0435                     l284:	
  3950                           ;MCU_16f1516_B1.c: 444: while(SEN);
  3951                           
  3952  0435  1C16               	btfss	22,0	;volatile
  3953  0436  2C39               	goto	l287
  3954  0437  2C35               	goto	l284
  3955  0438                     l288:	
  3956                           ;MCU_16f1516_B1.c: 445: while(!PEN)
  3957                           
  3958                           
  3959                           ;MCU_16f1516_B1.c: 446: PEN=1;
  3960  0438  1516               	bsf	22,2	;volatile
  3961  0439                     l287:	
  3962  0439  1D16               	btfss	22,2	;volatile
  3963  043A  2C38               	goto	l288
  3964  043B                     l290:	
  3965                           ;MCU_16f1516_B1.c: 447: while(PEN);
  3966                           
  3967  043B  1D16               	btfss	22,2	;volatile
  3968  043C  0008               	return
  3969  043D  2C3B               	goto	l290
  3970  043E                     __end_of_I2C_Master_Reception:	
  3971                           
  3972                           	psect	intentry
  3973  0004                     __pintentry:	
  3974 ;; *************** function _ISR *****************
  3975 ;; Defined at:
  3976 ;;		line 56 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;		None
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;		None
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3990 ;;      Params:         0       0       0       0       0       0       0       0
  3991 ;;      Locals:         0       0       0       0       0       0       0       0
  3992 ;;      Temps:          1       0       0       0       0       0       0       0
  3993 ;;      Totals:         1       0       0       0       0       0       0       0
  3994 ;;Total ram usage:        1 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    1
  3997 ;; This function calls:
  3998 ;;		_I2C_ISR
  3999 ;;		_TMR1_ISR
  4000 ;;		_UART_ISR
  4001 ;; This function is called by:
  4002 ;;		Interrupt level 1
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006  0004                     _ISR:	
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4010  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4011  0005  3180               	pagesel	$
  4012  0006  0020               	movlb	0	; select bank0
  4013  0007  087F               	movf	127,w
  4014  0008  00F2               	movwf	??_ISR
  4015                           
  4016                           ;MCU_16f1516_B1.c: 58: __nop();
  4017  0009  0000               	nop
  4018                           
  4019                           ;MCU_16f1516_B1.c: 60: __nop();
  4020  000A  0000               	nop
  4021                           
  4022                           ;MCU_16f1516_B1.c: 62: TMR1_ISR();
  4023  000B  3185  2558  3180   	fcall	_TMR1_ISR
  4024                           
  4025                           ;MCU_16f1516_B1.c: 66: __nop();
  4026  000E  0000               	nop
  4027                           
  4028                           ;MCU_16f1516_B1.c: 68: UART_ISR();
  4029  000F  3184  2486  3180   	fcall	_UART_ISR
  4030                           
  4031                           ;MCU_16f1516_B1.c: 70: I2C_ISR();
  4032  0012  3187  27A6         	fcall	_I2C_ISR
  4033  0014  0872               	movf	??_ISR,w
  4034  0015  0020               	movlb	0	; select bank0
  4035  0016  00FF               	movwf	127
  4036  0017  107E               	bcf	126,0	;clear compiler interrupt flag
  4037  0018  0009               	retfie
  4038  0019                     __end_of_ISR:	
  4039                           
  4040                           	psect	text23
  4041  0486                     __ptext23:	
  4042 ;; *************** function _UART_ISR *****************
  4043 ;; Defined at:
  4044 ;;		line 516 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;		None
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  i               1    0        unsigned char 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;		None               void
  4051 ;; Registers used:
  4052 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4058 ;;      Params:         0       0       0       0       0       0       0       0
  4059 ;;      Locals:         0       0       0       0       0       0       0       0
  4060 ;;      Temps:          2       0       0       0       0       0       0       0
  4061 ;;      Totals:         2       0       0       0       0       0       0       0
  4062 ;;Total ram usage:        2 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; This function calls:
  4065 ;;		Nothing
  4066 ;; This function is called by:
  4067 ;;		_ISR
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           
  4072                           ;psect for function _UART_ISR
  4073  0486                     _UART_ISR:	
  4074                           
  4075                           ;MCU_16f1516_B1.c: 518: char i;
  4076                           ;MCU_16f1516_B1.c: 519: if(RCIE && RCIF)
  4077                           
  4078                           ;incstack = 0
  4079                           ; Regs used in _UART_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4080  0486  0021               	movlb	1	; select bank1
  4081  0487  1E91               	btfss	17,5	;volatile
  4082  0488  0008               	return
  4083  0489  0020               	movlb	0	; select bank0
  4084  048A  1E91               	btfss	17,5	;volatile
  4085  048B  0008               	return
  4086  048C                     i1l318:	
  4087                           ;MCU_16f1516_B1.c: 520: {
  4088                           ;MCU_16f1516_B1.c: 521: while(!RCIDL);
  4089                           
  4090  048C  0023               	movlb	3	; select bank3
  4091  048D  1F1F               	btfss	31,6	;volatile
  4092  048E  2C8C               	goto	i1l318
  4093                           
  4094                           ;MCU_16f1516_B1.c: 522: UART->RxData[UART->RxLength]=RCREG;
  4095  048F  0819               	movf	25,w	;volatile
  4096  0490  00F0               	movwf	??_UART_ISR
  4097  0491  0878               	movf	_UART,w
  4098  0492  3E42               	addlw	66
  4099  0493  0086               	movwf	6
  4100  0494  3001               	movlw	1	; select bank2/3
  4101  0495  0087               	movwf	7
  4102  0496  0801               	movf	1,w
  4103  0497  3E20               	addlw	32
  4104  0498  0778               	addwf	_UART,w
  4105  0499  00F1               	movwf	??_UART_ISR+1
  4106  049A  0871               	movf	??_UART_ISR+1,w
  4107  049B  0086               	movwf	6
  4108  049C  3001               	movlw	1	; select bank2/3
  4109  049D  0087               	movwf	7
  4110  049E  0870               	movf	??_UART_ISR,w
  4111  049F  0081               	movwf	1
  4112                           
  4113                           ;MCU_16f1516_B1.c: 524: UART->RxLength++;
  4114  04A0  3001               	movlw	1
  4115  04A1  00F0               	movwf	??_UART_ISR
  4116  04A2  0878               	movf	_UART,w
  4117  04A3  3E42               	addlw	66
  4118  04A4  0086               	movwf	6
  4119  04A5  3001               	movlw	1	; select bank2/3
  4120  04A6  0087               	movwf	7
  4121  04A7  0870               	movf	??_UART_ISR,w
  4122  04A8  0781               	addwf	1,f
  4123                           
  4124                           ;MCU_16f1516_B1.c: 525: if(UART->RxLength == 32)
  4125  04A9  0878               	movf	_UART,w
  4126  04AA  3E42               	addlw	66
  4127  04AB  0086               	movwf	6
  4128  04AC  3001               	movlw	1	; select bank2/3
  4129  04AD  0087               	movwf	7
  4130  04AE  0801               	movf	1,w
  4131  04AF  3A20               	xorlw	32
  4132  04B0  1D03               	skipz
  4133  04B1  0008               	return
  4134                           
  4135                           ;MCU_16f1516_B1.c: 526: {
  4136                           ;MCU_16f1516_B1.c: 527: UART->RxLength=0;
  4137  04B2  0878               	movf	_UART,w
  4138  04B3  3E42               	addlw	66
  4139  04B4  0086               	movwf	6
  4140  04B5  3001               	movlw	1	; select bank2/3
  4141  04B6  0087               	movwf	7
  4142  04B7  0181               	clrf	1
  4143                           
  4144                           ;MCU_16f1516_B1.c: 528: UART->RxGO=1;
  4145  04B8  0878               	movf	_UART,w
  4146  04B9  3E43               	addlw	67
  4147  04BA  0086               	movwf	6
  4148  04BB  3001               	movlw	1	; select bank2/3
  4149  04BC  0087               	movwf	7
  4150  04BD  1481               	bsf	1,1
  4151                           
  4152                           ;MCU_16f1516_B1.c: 529: RCIE=0;
  4153  04BE  0021               	movlb	1	; select bank1
  4154  04BF  1291               	bcf	17,5	;volatile
  4155  04C0  0008               	return
  4156  04C1                     __end_of_UART_ISR:	
  4157                           
  4158                           	psect	text24
  4159  0558                     __ptext24:	
  4160 ;; *************** function _TMR1_ISR *****************
  4161 ;; Defined at:
  4162 ;;		line 125 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;		None               void
  4169 ;; Registers used:
  4170 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4176 ;;      Params:         0       0       0       0       0       0       0       0
  4177 ;;      Locals:         0       0       0       0       0       0       0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0       0
  4179 ;;      Totals:         0       0       0       0       0       0       0       0
  4180 ;;Total ram usage:        0 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_ISR
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _TMR1_ISR
  4191  0558                     _TMR1_ISR:	
  4192                           
  4193                           ;MCU_16f1516_B1.c: 127: if(TMR1IE && TMR1IF)
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4197  0558  0021               	movlb	1	; select bank1
  4198  0559  1C11               	btfss	17,0	;volatile
  4199  055A  0008               	return
  4200  055B  0020               	movlb	0	; select bank0
  4201  055C  1C11               	btfss	17,0	;volatile
  4202  055D  0008               	return
  4203                           
  4204                           ;MCU_16f1516_B1.c: 128: {
  4205                           ;MCU_16f1516_B1.c: 129: TMR1H=((65536-700)/256);
  4206  055E  30FD               	movlw	253
  4207  055F  0097               	movwf	23	;volatile
  4208                           
  4209                           ;MCU_16f1516_B1.c: 130: TMR1L=((65536-700)%256);
  4210  0560  3044               	movlw	68
  4211  0561  0096               	movwf	22	;volatile
  4212                           
  4213                           ;MCU_16f1516_B1.c: 131: TMR1IF=0;
  4214  0562  1011               	bcf	17,0	;volatile
  4215                           
  4216                           ;MCU_16f1516_B1.c: 132: Timer1->Count++;
  4217  0563  0A52               	incf	_Timer1,w
  4218  0564  0086               	movwf	6
  4219  0565  0187               	clrf	7
  4220  0566  3001               	movlw	1
  4221  0567  0781               	addwf	1,f
  4222  0568  3141               	addfsr 1,1
  4223  0569  1803               	skipnc
  4224  056A  0A81               	incf	1,f
  4225                           
  4226                           ;MCU_16f1516_B1.c: 133: if(Timer1->Count == 20)
  4227  056B  0A52               	incf	_Timer1,w
  4228  056C  0086               	movwf	6
  4229  056D  0187               	clrf	7
  4230  056E  3F40               	moviw [0]fsr1
  4231  056F  3A14               	xorlw	20
  4232  0570  1D03               	skipz
  4233  0571  2D74               	goto	u207_25
  4234  0572  3F41               	moviw [1]fsr1
  4235  0573  3A00               	xorlw	0
  4236  0574                     u207_25:	
  4237  0574  1D03               	skipz
  4238  0575  0008               	return
  4239                           
  4240                           ;MCU_16f1516_B1.c: 134: {
  4241                           ;MCU_16f1516_B1.c: 135: Timer1->Count=0;
  4242  0576  0A52               	incf	_Timer1,w
  4243  0577  0086               	movwf	6
  4244  0578  0187               	clrf	7
  4245  0579  3000               	movlw	0
  4246  057A  3FC0               	movwi [0]fsr1
  4247  057B  3FC1               	movwi [1]fsr1
  4248                           
  4249                           ;MCU_16f1516_B1.c: 136: TMain->T1_Timerout=1;
  4250  057C  087A               	movf	_TMain,w
  4251  057D  0086               	movwf	6
  4252  057E  0187               	clrf	7
  4253  057F  1501               	bsf	1,2
  4254  0580  0008               	return
  4255  0581                     __end_of_TMR1_ISR:	
  4256                           
  4257                           	psect	text25
  4258  07A6                     __ptext25:	
  4259 ;; *************** function _I2C_ISR *****************
  4260 ;; Defined at:
  4261 ;;		line 260 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;		None
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;		None
  4266 ;; Return value:  Size  Location     Type
  4267 ;;		None               void
  4268 ;; Registers used:
  4269 ;;		wreg, fsr1l, fsr1h
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4275 ;;      Params:         0       0       0       0       0       0       0       0
  4276 ;;      Locals:         0       0       0       0       0       0       0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0       0
  4278 ;;      Totals:         0       0       0       0       0       0       0       0
  4279 ;;Total ram usage:        0 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_ISR
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _I2C_ISR
  4290  07A6                     _I2C_ISR:	
  4291                           
  4292                           ;MCU_16f1516_B1.c: 262: if(SSPIE && SSPIF)
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in _I2C_ISR: [wregfsr1]
  4296  07A6  0021               	movlb	1	; select bank1
  4297  07A7  1D91               	btfss	17,3	;volatile
  4298  07A8  0008               	return
  4299  07A9  0020               	movlb	0	; select bank0
  4300  07AA  1D91               	btfss	17,3	;volatile
  4301  07AB  0008               	return
  4302                           
  4303                           ;MCU_16f1516_B1.c: 263: {
  4304                           ;MCU_16f1516_B1.c: 264: SSPIE=0;
  4305  07AC  0021               	movlb	1	; select bank1
  4306  07AD  1191               	bcf	17,3	;volatile
  4307                           
  4308                           ;MCU_16f1516_B1.c: 265: I2C->SlaveGO=1;
  4309  07AE  0879               	movf	_I2C,w
  4310  07AF  3E42               	addlw	66
  4311  07B0  0086               	movwf	6
  4312  07B1  3001               	movlw	1	; select bank2/3
  4313  07B2  0087               	movwf	7
  4314  07B3  1401               	bsf	1,0
  4315  07B4  0008               	return
  4316  07B5                     __end_of_I2C_ISR:	
  4317  007E                     btemp	set	126	;btemp
  4318  007E                     pic14e$flags	set	126
  4319  007E                     wtemp	set	126
  4320  007E                     wtemp0	set	126
  4321  0080                     wtemp1	set	128
  4322  0082                     wtemp2	set	130
  4323  0084                     wtemp3	set	132
  4324  0086                     wtemp4	set	134
  4325  0088                     wtemp5	set	136
  4326  007F                     wtemp6	set	127
  4327  007E                     ttemp	set	126
  4328  007E                     ttemp0	set	126
  4329  0081                     ttemp1	set	129
  4330  0084                     ttemp2	set	132
  4331  0087                     ttemp3	set	135
  4332  007F                     ttemp4	set	127
  4333  007E                     ltemp	set	126
  4334  007E                     ltemp0	set	126
  4335  0082                     ltemp1	set	130
  4336  0086                     ltemp2	set	134
  4337  0080                     ltemp3	set	128


Data Sizes:
    Strings     20
    Constant    8
    Data        58
    BSS         157
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     24      71
    BANK1            80      0      32
    BANK2            80      0      68
    BANK3            80      0      67
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S543$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    Segment	PTR struct Segment size(1) Largest target is 26
		 -> NULL(NULL[0]), VarSegment(BANK0[26]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK1[32]), 

    UART	PTR struct UART size(1) Largest target is 68
		 -> NULL(NULL[0]), VarUart(BANK2[68]), 

    I2C	PTR struct I2C size(1) Largest target is 67
		 -> NULL(NULL[0]), VarI2C(BANK3[67]), 

    TMain	PTR struct TMain size(1) Largest target is 15
		 -> NULL(NULL[0]), VarTMain(BANK0[15]), 

    Timer1	PTR struct Timer1 size(1) Largest target is 3
		 -> NULL(NULL[0]), VarTimer1(BANK0[3]), 


Critical Paths under _main in COMMON

    _printf->___lwdiv
    _Mcu_Initial->_I2C_Set
    _Mcu_Initial->_TMR1_Set
    _Mcu_Initial->_UART_Set
    _setSegmentDisplayNumber->___awdiv
    _setSegmentDisplayNumber->___awmod
    _I2C_Main->_I2C_Master_Reception

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR

Critical Paths under _main in BANK0

    _UART_Main->_UART_Transmit
    _UART_Transmit->_printf
    _printf->___lwdiv
    _MainT->_setSegmentDisplayNumber
    _setSegmentDisplayNumber->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3614
                           _I2C_Main
                              _MainT
                      _MainT_Initial
                        _Mcu_Initial
             _SegmentDisplay_Initial
                _SegmentDisplay_Main
                          _UART_Main
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            0     0      0    1145
                       _UART_Receive
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        4     4      0    1055
                                             20 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              17    13      4     956
                                              3 BANK0     17    13      4
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     371
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         4     4      0      90
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SegmentDisplay_Main                                  2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SegmentDisplay_Initial                               1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initial                                          0     0      0       0
                            _I2C_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Set                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initial                                        1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                4     4      0    2203
                                             11 BANK0      3     3      0
            _setSegmentDisplayNumber
 ---------------------------------------------------------------------------------
 (2) _setSegmentDisplayNumber                              7     5      2    2203
                                              4 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     823
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     835
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Main                                             4     4      0     266
                                              6 COMMON     1     1      0
                                              0 BANK0      3     3      0
               _I2C_Master_Reception
            _I2C_Master_Transmission
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Transmission                              2     2      0      68
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Reception                                 3     3      0      68
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  1     1      0       0
                                              2 COMMON     1     1      0
                            _I2C_ISR
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (6) _UART_ISR                                             3     3      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Main
     _I2C_Master_Reception
     _I2C_Master_Transmission
   _MainT
     _setSegmentDisplayNumber
       ___awdiv
       ___awmod
   _MainT_Initial
   _Mcu_Initial
     _I2C_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
   _SegmentDisplay_Initial
   _SegmentDisplay_Main
   _UART_Main
     _UART_Receive
     _UART_Transmit
       _printf
         ___lwdiv
         _putch

 _ISR (ROOT)
   _I2C_ISR
   _TMR1_ISR
   _UART_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      F9       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     18      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      20       8       40.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      44      10       85.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      43      12       83.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      F9      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Sep 18 00:08:16 2014

                 ??_MainT_Initial 0073                                _BF 10A0                      ___awdiv@sign 003B  
       ??_setSegmentDisplayNumber 0040                               l202 04F8                               l211 0502  
                             l205 04FC                               l222 0517                               l231 0527  
                             l240 03F8                               l216 0509                               l208 0500  
                             l225 0521                               l251 0405                               l243 03FC  
                             l219 0515                               _I2C 0079                               l260 0417  
                             l228 0525                               l237 03F4                               l229 0524  
                             l333 05AC                               l254 0407                               l246 03FE  
                             l263 041B                               l272 042C                               l281 0433  
                             l273 042B                               l257 040A                               l290 043B  
                             l266 0425                               l194 0390                               l522 0223  
                             l275 042E                               l187 036C                               l347 07C3  
                             l284 0435                               l269 0428                               l278 0430  
                             l287 0439                               l288 0438                               _CKP 10AC  
                             _GIE 005F                               _RA1 0061                               _RA2 0062  
                             _RC0 0070                               _RA4 0064                               _RA5 0065  
                             _RA6 0066                               _RA7 0067                               _PEN 10B2  
                             _ISR 0004                               _SEN 10B0                               _RX9 0CEE  
                             _TX9 0CF6                   __end_of_I2C_ISR 07B5                   __end_of_I2C_Set 07C2  
                    ___awmod@sign 003B                               wreg 0009     __size_of_I2C_Master_Reception 004A  
                            ?_ISR 0070                              l2113 01EC                              l2105 01E8  
                            l2131 03B6                              l2115 0186                              l2141 03BE  
                            l2125 03AB                              l2221 009C                              l2061 04D6  
                            l2143 03CA                              l2071 04F1                              l2153 03E5  
                            l2321 0247                              l2081 01A2                              l2067 04E8  
                            l2059 04CA                              l2307 05DD                              l2157 03ED  
                            l2149 03DC                              l2181 0456                              l2173 0450  
                            l2261 017B                              l2253 015B                              l2237 00C3  
                            l2341 029D                              l2183 0462                              l2191 0477  
                            l2087 01B8                              l2169 0449                              l2257 016C  
                            l2249 014A                              l2097 01C9                              l2291 0383  
                            l2195 047F                              l2187 046E                              l2355 058B  
                            l2285 0365                              l1725 0551                              l2279 034B  
                            l1719 0535                              l1961 02ED                     ??_Mcu_Initial 0074  
                            l1965 02F7                              l1957 02E3                              l1975 0327  
                            l1969 02FF                              STR_1 0719                              STR_2 0708  
                            _LATA 010C                              _LATB 010D                              _LATC 010E  
                            u3025 023A                              u3035 025A                              u3065 02B0  
                            u2505 04E1                              u2515 04E9                              u2625 03C1  
                            u2475 04CD                              u2555 01DE                              u2645 03CB  
                            u2725 0459                              u2655 03D5                              u2495 04D7  
                            u2665 03DD                              u2745 0468                              u2755 046F  
                            u2835 0071                              _PEIE 005E                              u2845 008E  
                            u2865 00AB                              _RCIE 048D                              _RCEN 10B3  
                            _RCIF 008D                              _UART 0078                              _TRMT 0CF1  
                            _TXIE 048C                              _TXIF 008C                              _R_nW 10A2  
                            _main 0581                  __end_of_I2C_Main 03A0                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            indf1 0001                              fsr1l 0006                              btemp 007E  
                            ltemp 007E                              start 0019                              ttemp 007E  
                            wtemp 007E                             ??_ISR 0072                             ?_main 0070  
                           _ACKEN 10B4                   __end_of___awdiv 03F4                             _BRG16 0CFB  
                   __CFG_WDTE$OFF 0000                   __end_of___awmod 0486                   ___awdiv@divisor 0073  
                           _T1CON 0018                   __end_of___lwdiv 04F8                             i1l318 048C  
                           _RCIDL 0CFE                   ___awdiv@counter 003A                             _RCREG 0199  
                           _RCSTA 019D                             _TMR1H 0017                             _TMR1L 0016  
                           _SPBRG 019B                             _PORTA 000C                             _PORTB 000D  
                           _PORTC 000E                             _TRISA 008C                             _TRISB 008D  
                           _TRISC 008E                             _SSPIE 048B                             _SSPIF 008B  
                           _SSPOV 10AE                             _TXREG 019A                             _TXSTA 019E  
                           _TMain 007A                             _MainT 0224                     __CFG_WRT$BOOT 0000  
                __end_of_UART_ISR 04C1                __size_of_UART_Main 0022                  __end_of_TMR1_ISR 0581  
                __end_of_UART_Set 074E                  __end_of_TMR1_Set 0797                             _putch 07C2  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080   __end_of_setSegmentDisplayNumber 0181                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
             __end_of_Mcu_Initial 0777                   __initialization 001B                      __end_of_main 05A6  
__size_of_I2C_Master_Transmission 0032                         ??_I2C_ISR 0070                         ??_I2C_Set 0073  
                          ??_main 0078             I2C_Master_Reception@i 0075                            ?_MainT 0070  
                       I2C_Main@i 0076                  ___awdiv@dividend 0075                            _ANSELA 018C  
                          ?_putch 0070                            _ANSELB 018D                            _ANSELC 018E  
                          u207_25 0574                            _OSCCON 0099                        _VarSegment 0020  
                          _TMR1IE 0488                            _TMR1IF 0088                            _SPBRGH 019C  
                          _IO_Set 074E                            _SSPADD 0212                            _TRISC6 0476  
                          _TRISC7 0477                            _SSPBUF 0211                        _VarProduct 00A0  
                          _VarI2C 01A0                            _Timer1 0052                 __end_of_UART_Main 05ED  
                       ??___awdiv 0077                         ??___awmod 0077                         ??___lwdiv 0077  
                ___awdiv@quotient 003C                   ___awmod@divisor 0073                   ___awmod@counter 003A  
                          _printf 0181                         ?_I2C_Main 0070                       _Mcu_Initial 0764  
         __end_of__initialization 004C             __end_of_UART_Transmit 05CB                     __end_of_MainT 02BA  
                  __pcstackCOMMON 0070                      __pidataBANK0 071C                      __pidataBANK1 05ED  
                       ?_UART_ISR 0070                         ?_TMR1_ISR 0070                         ?_UART_Set 0070  
                       ?_TMR1_Set 0070                     __end_of_putch 07CA                        ??_I2C_Main 003A  
                         ??_MainT 0045                           ??_putch 0073                        __pbssBANK0 0052  
                      __pbssBANK2 0120                        __pbssBANK3 01A0                           ?_IO_Set 0070  
                      __pnvCOMMON 007A      __end_of_I2C_Master_Reception 043E                        __pmaintext 0581  
                      ??_UART_ISR 0070           _I2C_Master_Transmission 04F8                        ??_TMR1_ISR 0070  
                      ??_UART_Set 0073                        ??_TMR1_Set 0073                        __pintentry 0004  
                         _I2C_ISR 07A6                           _ACKSTAT 10B6      __size_of_SegmentDisplay_Main 0073  
                         _I2C_Set 07B5             __end_of_MainT_Initial 07A6                           ?_printf 003D  
                         _SSPCON1 0215                           _SSPCON2 0216                           _SSPSTAT 0214  
                   ?_UART_Receive 0070                   __size_of_IO_Set 0016                           _Segment 0065  
                         _VarUart 0120                           _Product 0066          ?_setSegmentDisplayNumber 003E  
                         ___awdiv 03A0                           ___awmod 043E                           ___lwdiv 04C1  
        ??_SegmentDisplay_Initial 0073                           __ptext1 05CB                           __ptext2 05A6  
                         __ptext3 0181                           __ptext4 07C2                           __ptext5 04C1  
                         __ptext6 052A                           __ptext7 02BA                           __ptext8 0777  
                         __ptext9 0764                   __size_of_printf 00A3                      __size_of_ISR 0015  
               __end_of_hexpowers 0708                  ___awmod@dividend 0075                           clrloop0 07CB  
            end_of_initialization 004C                    ??_UART_Receive 0073                           init_ram 07D0  
                         initloop 07D1                    UART_Transmit@i 0051         ??_I2C_Master_Transmission 0073  
                         printf@c 004D                           printf@f 003D                      __pstringtext 0700  
                       _UART_Main 05CB          I2C_Master_Transmission@i 0074                  __CFG_FOSC$INTOSC 0000  
               __size_of_I2C_Main 0073              _I2C_Master_Reception 03F4                      ?_Mcu_Initial 0070  
                  __end_of_IO_Set 0764     setSegmentDisplayNumber@number 003E                        ?_UART_Main 0070  
               __size_of_UART_ISR 003B                 __size_of_TMR1_ISR 0029                 __size_of_UART_Set 0018  
 __size_of_SegmentDisplay_Initial 0010                 __size_of_TMR1_Set 0010                    __end_of_printf 0224  
             start_initialization 001B                       __end_of_ISR 0019             ?_I2C_Master_Reception 0070  
             _SegmentDisplay_Main 02BA                          ??_IO_Set 0073                         _VarTimer1 0062  
                     __pdataBANK0 0020                       __pdataBANK1 00A0                          ?_I2C_ISR 0070  
            ?_SegmentDisplay_Main 0070                          ?_I2C_Set 0070                          ??_printf 0041  
            __end_of_UART_Receive 0558                       __pbssCOMMON 0078                         ___latbits 0002  
          __size_of_UART_Transmit 0025                     __pcstackBANK0 003A               __end_of__stringdata 071C  
          _SegmentDisplay_Initial 0777                         __pnvBANK0 0066                  ___lwdiv@dividend 0075  
                        ?___awdiv 0073                          ?___awmod 0073                          ?___lwdiv 0073  
           ??_SegmentDisplay_Main 0073                       ??_UART_Main 0078                     UART_Receive@i 0076  
                        _I2C_Main 032D            ??_I2C_Master_Reception 0073                    __size_of_MainT 0096  
__size_of_setSegmentDisplayNumber 0131                         _hexpowers 0700                  ___lwdiv@quotient 003B  
        setSegmentDisplayNumber@i 0044                    __size_of_putch 0008            __size_of_MainT_Initial 000F  
            __size_of_Mcu_Initial 0013                         clear_ram0 07CA                     _UART_Transmit 05A6  
                        _UART_ISR 0486                          _TMR1_ISR 0558                          _UART_Set 0736  
                        _TMR1_Set 0787                  __size_of_I2C_ISR 000F                  __size_of_I2C_Set 000D  
                     __stringdata 0708                        printf@_val 0048                        printf@flag 0045  
                      printf@prec 004C                          _VarTMain 0053                    ?_UART_Transmit 0070  
           __size_of_UART_Receive 002E                  __size_of___awdiv 0054                  __size_of___awmod 0048  
                __size_of___lwdiv 0037                     _MainT_Initial 0797                   ___lwdiv@divisor 0073  
                 ___lwdiv@counter 003A                          __ptext10 0736                          __ptext11 0787  
                        __ptext20 04F8                          __ptext12 074E                          __ptext21 03F4  
                        __ptext13 07B5                          __ptext14 0797                          __ptext23 0486  
                        __ptext15 0224                          __ptext24 0558                          __ptext16 0050  
                        __ptext25 07A6                          __ptext17 043E                          __ptext18 03A0  
                        __ptext19 032D          ?_I2C_Master_Transmission 0070                     __size_of_main 0025  
                    _UART_Receive 052A                         printf@idx 0046                    ?_MainT_Initial 0070  
                       putch@byte 0073           _setSegmentDisplayNumber 0050           ?_SegmentDisplay_Initial 0070  
                     pic14e$flags 007E                          intlevel1 0000                   ??_UART_Transmit 004E  
                        printf@ap 0047    __end_of_SegmentDisplay_Initial 0787   __end_of_I2C_Master_Transmission 052A  
     __end_of_SegmentDisplay_Main 032D  
