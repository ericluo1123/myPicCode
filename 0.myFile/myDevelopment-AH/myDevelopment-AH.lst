

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Sep 21 21:37:56 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  0010                     	;# 
    63  0011                     	;# 
    64  0012                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0016                     	;# 
    68  0017                     	;# 
    69  0018                     	;# 
    70  0019                     	;# 
    71  001A                     	;# 
    72  001B                     	;# 
    73  001C                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  0090                     	;# 
    78  0091                     	;# 
    79  0092                     	;# 
    80  0095                     	;# 
    81  0096                     	;# 
    82  0097                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009E                     	;# 
    90  010C                     	;# 
    91  010D                     	;# 
    92  010E                     	;# 
    93  0116                     	;# 
    94  0117                     	;# 
    95  011D                     	;# 
    96  018C                     	;# 
    97  018D                     	;# 
    98  018E                     	;# 
    99  0191                     	;# 
   100  0191                     	;# 
   101  0192                     	;# 
   102  0193                     	;# 
   103  0193                     	;# 
   104  0194                     	;# 
   105  0195                     	;# 
   106  0196                     	;# 
   107  0197                     	;# 
   108  0199                     	;# 
   109  019A                     	;# 
   110  019B                     	;# 
   111  019B                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019C                     	;# 
   115  019C                     	;# 
   116  019D                     	;# 
   117  019E                     	;# 
   118  019F                     	;# 
   119  020D                     	;# 
   120  0210                     	;# 
   121  0211                     	;# 
   122  0211                     	;# 
   123  0212                     	;# 
   124  0212                     	;# 
   125  0213                     	;# 
   126  0213                     	;# 
   127  0214                     	;# 
   128  0214                     	;# 
   129  0215                     	;# 
   130  0215                     	;# 
   131  0215                     	;# 
   132  0216                     	;# 
   133  0216                     	;# 
   134  0217                     	;# 
   135  0217                     	;# 
   136  0291                     	;# 
   137  0291                     	;# 
   138  0292                     	;# 
   139  0293                     	;# 
   140  0298                     	;# 
   141  0298                     	;# 
   142  0299                     	;# 
   143  029A                     	;# 
   144  0394                     	;# 
   145  0395                     	;# 
   146  0396                     	;# 
   147  0FE4                     	;# 
   148  0FE5                     	;# 
   149  0FE6                     	;# 
   150  0FE7                     	;# 
   151  0FE8                     	;# 
   152  0FE9                     	;# 
   153  0FEA                     	;# 
   154  0FEB                     	;# 
   155  0FED                     	;# 
   156  0FEE                     	;# 
   157  0FEF                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  0116                     	;# 
   205  0117                     	;# 
   206  011D                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0197                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019C                     	;# 
   226  019C                     	;# 
   227  019D                     	;# 
   228  019E                     	;# 
   229  019F                     	;# 
   230  020D                     	;# 
   231  0210                     	;# 
   232  0211                     	;# 
   233  0211                     	;# 
   234  0212                     	;# 
   235  0212                     	;# 
   236  0213                     	;# 
   237  0213                     	;# 
   238  0214                     	;# 
   239  0214                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0216                     	;# 
   245  0217                     	;# 
   246  0217                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0298                     	;# 
   252  0298                     	;# 
   253  0299                     	;# 
   254  029A                     	;# 
   255  0394                     	;# 
   256  0395                     	;# 
   257  0396                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0095                     	;# 
   303  0096                     	;# 
   304  0097                     	;# 
   305  0099                     	;# 
   306  009A                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  010C                     	;# 
   313  010D                     	;# 
   314  010E                     	;# 
   315  0116                     	;# 
   316  0117                     	;# 
   317  011D                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  018E                     	;# 
   321  0191                     	;# 
   322  0191                     	;# 
   323  0192                     	;# 
   324  0193                     	;# 
   325  0193                     	;# 
   326  0194                     	;# 
   327  0195                     	;# 
   328  0196                     	;# 
   329  0197                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019D                     	;# 
   339  019E                     	;# 
   340  019F                     	;# 
   341  020D                     	;# 
   342  0210                     	;# 
   343  0211                     	;# 
   344  0211                     	;# 
   345  0212                     	;# 
   346  0212                     	;# 
   347  0213                     	;# 
   348  0213                     	;# 
   349  0214                     	;# 
   350  0214                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0216                     	;# 
   355  0216                     	;# 
   356  0217                     	;# 
   357  0217                     	;# 
   358  0291                     	;# 
   359  0291                     	;# 
   360  0292                     	;# 
   361  0293                     	;# 
   362  0298                     	;# 
   363  0298                     	;# 
   364  0299                     	;# 
   365  029A                     	;# 
   366  0394                     	;# 
   367  0395                     	;# 
   368  0396                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380                           
   381                           	psect	idataBANK1
   382  062A                     __pidataBANK1:	
   383                           
   384                           ;initializer for _VarProduct
   385  062A  3463               	retlw	99
   386  062B  3402               	retlw	2
   387  062C  3400               	retlw	0
   388  062D  3400               	retlw	0
   389  062E  3400               	retlw	0
   390  062F  3400               	retlw	0
   391  0630  3400               	retlw	0
   392  0631  3400               	retlw	0
   393  0632  3400               	retlw	0
   394  0633  3400               	retlw	0
   395  0634  3400               	retlw	0
   396  0635  3400               	retlw	0
   397  0636  34FF               	retlw	255
   398  0637  34FF               	retlw	255
   399  0638  34FF               	retlw	255
   400  0639  3400               	retlw	0
   401  063A  3400               	retlw	0
   402  063B  3400               	retlw	0
   403  063C  3400               	retlw	0
   404  063D  3400               	retlw	0
   405  063E  3400               	retlw	0
   406  063F  3400               	retlw	0
   407  0640  3400               	retlw	0
   408  0641  3400               	retlw	0
   409  0642  3400               	retlw	0
   410  0643  3400               	retlw	0
   411  0644  3400               	retlw	0
   412  0645  3400               	retlw	0
   413  0646  3400               	retlw	0
   414  0647  3400               	retlw	0
   415  0648  3400               	retlw	0
   416  0649  3400               	retlw	0
   417                           
   418                           ;initializer for _VarSegment
   419  064A  34C0               	retlw	192
   420  064B  34F9               	retlw	249
   421  064C  34A4               	retlw	164
   422  064D  34B0               	retlw	176
   423  064E  3499               	retlw	153
   424  064F  3492               	retlw	146
   425  0650  3482               	retlw	130
   426  0651  34D8               	retlw	216
   427  0652  3480               	retlw	128
   428  0653  3490               	retlw	144
   429  0654  3488               	retlw	136
   430  0655  3483               	retlw	131
   431  0656  34A7               	retlw	167
   432  0657  34A1               	retlw	161
   433  0658  3486               	retlw	134
   434  0659  348E               	retlw	142
   435  065A  34BF               	retlw	191
   436  065B  3400               	retlw	0
   437  065C  3400               	retlw	0
   438  065D  3400               	retlw	0
   439  065E  3400               	retlw	0
   440  065F  3400               	retlw	0
   441  0660  3400               	retlw	0
   442  0661  3400               	retlw	0
   443  0662  3400               	retlw	0
   444  0663  3400               	retlw	0
   445                           
   446                           	psect	stringtext
   447  1000                     __pstringtext:	
   448  1000                     _dpowers:	
   449  1000  3401               	retlw	1
   450  1001  3400               	retlw	0
   451  1002  340A               	retlw	10
   452  1003  3400               	retlw	0
   453  1004  3464               	retlw	100
   454  1005  3400               	retlw	0
   455  1006  34E8               	retlw	232
   456  1007  3403               	retlw	3
   457  1008  3410               	retlw	16
   458  1009  3427               	retlw	39
   459  100A                     __end_of_dpowers:	
   460  100A                     __stringdata:	
   461  100A                     STR_1:	
   462  100A  3425               	retlw	37	;'%'
   463  100B  3464               	retlw	100	;'d'
   464  100C  3400               	retlw	0
   465  100D                     STR_2:	
   466  100D  342C               	retlw	44	;','
   467  100E  3400               	retlw	0
   468  100F                     __end_of__stringdata:	
   469                           
   470                           ; #config settings
   471  0000                     
   472                           	psect	nvBANK0
   473  005E                     __pnvBANK0:	
   474  005E                     _Product:	
   475  005E                     	ds	1
   476  005F                     _TMain:	
   477  005F                     	ds	1
   478  000C                     _PORTA	set	12
   479  000D                     _PORTB	set	13
   480  000E                     _PORTC	set	14
   481  0018                     _T1CON	set	24
   482  0017                     _TMR1H	set	23
   483  0016                     _TMR1L	set	22
   484  005F                     _GIE	set	95
   485  005E                     _PEIE	set	94
   486  0061                     _RA1	set	97
   487  0062                     _RA2	set	98
   488  0064                     _RA4	set	100
   489  0065                     _RA5	set	101
   490  0066                     _RA6	set	102
   491  0067                     _RA7	set	103
   492  0070                     _RC0	set	112
   493  008D                     _RCIF	set	141
   494  008B                     _SSPIF	set	139
   495  0088                     _TMR1IF	set	136
   496  008C                     _TXIF	set	140
   497  0099                     _OSCCON	set	153
   498  008C                     _TRISA	set	140
   499  008D                     _TRISB	set	141
   500  008E                     _TRISC	set	142
   501  048D                     _RCIE	set	1165
   502  048B                     _SSPIE	set	1163
   503  0488                     _TMR1IE	set	1160
   504  0476                     _TRISC6	set	1142
   505  0477                     _TRISC7	set	1143
   506  048C                     _TXIE	set	1164
   507  010C                     _LATA	set	268
   508  010D                     _LATB	set	269
   509  010E                     _LATC	set	270
   510  018C                     _ANSELA	set	396
   511  018D                     _ANSELB	set	397
   512  018E                     _ANSELC	set	398
   513  0199                     _RCREG	set	409
   514  019D                     _RCSTA	set	413
   515  019B                     _SPBRG	set	411
   516  019C                     _SPBRGH	set	412
   517  019A                     _TXREG	set	410
   518  019E                     _TXSTA	set	414
   519  0CFB                     _BRG16	set	3323
   520  0CFE                     _RCIDL	set	3326
   521  0CEE                     _RX9	set	3310
   522  0CF1                     _TRMT	set	3313
   523  0CF6                     _TX9	set	3318
   524  0212                     _SSPADD	set	530
   525  0211                     _SSPBUF	set	529
   526  0215                     _SSPCON1	set	533
   527  0216                     _SSPCON2	set	534
   528  0214                     _SSPSTAT	set	532
   529  10B4                     _ACKEN	set	4276
   530  10B6                     _ACKSTAT	set	4278
   531  10A0                     _BF	set	4256
   532  10AC                     _CKP	set	4268
   533  10B2                     _PEN	set	4274
   534  10B3                     _RCEN	set	4275
   535  10A2                     _R_nW	set	4258
   536  10B0                     _SEN	set	4272
   537  10AE                     _SSPOV	set	4270
   538                           
   539                           	psect	cinit
   540  001B                     start_initialization:	
   541  001B                     __initialization:	
   542                           
   543                           ; Clear objects allocated to BANK0
   544  001B  3048               	movlw	low __pbssBANK0
   545  001C  0084               	movwf	4
   546  001D  3000               	movlw	high __pbssBANK0
   547  001E  0085               	movwf	5
   548  001F  3016               	movlw	22
   549  0020  3187  27F9  3180   	fcall	clear_ram0
   550                           
   551                           ; Clear objects allocated to BANK2
   552  0023  3020               	movlw	low __pbssBANK2
   553  0024  0084               	movwf	4
   554  0025  3001               	movlw	high __pbssBANK2
   555  0026  0085               	movwf	5
   556  0027  3044               	movlw	68
   557  0028  3187  27F9  3180   	fcall	clear_ram0
   558                           
   559                           ; Clear objects allocated to BANK3
   560  002B  30A0               	movlw	low __pbssBANK3
   561  002C  0084               	movwf	4
   562  002D  3001               	movlw	high __pbssBANK3
   563  002E  0085               	movwf	5
   564  002F  3043               	movlw	67
   565  0030  3187  27F9  3180   	fcall	clear_ram0
   566                           
   567                           ; Initialize objects allocated to BANK1
   568  0033  302A               	movlw	low __pidataBANK1
   569  0034  0084               	movwf	4
   570  0035  3086               	movlw	(high __pidataBANK1)| (0+128)
   571  0036  0085               	movwf	5
   572  0037  30A0               	movlw	low __pdataBANK1
   573  0038  0086               	movwf	6
   574  0039  3000               	movlw	high __pdataBANK1
   575  003A  0087               	movwf	7
   576  003B  303A               	movlw	58
   577  003C  318F  2758         	fcall	init_ram
   578  003E                     end_of_initialization:	
   579                           ;End of C runtime variable initialization code
   580                           
   581  003E                     __end_of__initialization:	
   582  003E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   583  003F  0020               	movlb	0
   584  0040  3187  2FB9         	ljmp	_main	;jump to C main() function
   585                           
   586                           	psect	bssBANK0
   587  0048                     __pbssBANK0:	
   588  0048                     _Timer1:	
   589  0048                     	ds	1
   590  0049                     _UART:	
   591  0049                     	ds	1
   592  004A                     _VarTMain:	
   593  004A                     	ds	15
   594  0059                     _VarTimer1:	
   595  0059                     	ds	3
   596  005C                     _I2C:	
   597  005C                     	ds	1
   598  005D                     _Segment:	
   599  005D                     	ds	1
   600                           
   601                           	psect	dataBANK1
   602  00A0                     __pdataBANK1:	
   603  00A0                     _VarProduct:	
   604  00A0                     	ds	32
   605  00C0                     _VarSegment:	
   606  00C0                     	ds	26
   607                           
   608                           	psect	bssBANK2
   609  0120                     __pbssBANK2:	
   610  0120                     _VarUart:	
   611  0120                     	ds	68
   612                           
   613                           	psect	bssBANK3
   614  01A0                     __pbssBANK3:	
   615  01A0                     _VarI2C:	
   616  01A0                     	ds	67
   617                           
   618                           	psect	clrtext
   619  07F9                     clear_ram0:	
   620                           ;	Called with FSR0 containing the base address, and
   621                           ;	WREG with the size to clear
   622                           
   623  07F9  0064               	clrwdt	;clear the watchdog before getting into this loop
   624  07FA                     clrloop0:	
   625  07FA  0180               	clrf	0	;clear RAM location pointed to by FSR
   626  07FB  3101               	addfsr 0,1
   627  07FC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   628  07FD  2FFA               	goto	clrloop0	;have we reached the end yet?
   629  07FE  3400               	retlw	0	;all done for this memory range, return
   630                           
   631                           	psect	inittext
   632  0F58                     init_ram:	
   633  0F58  00FE               	movwf	126
   634  0F59                     initloop:	
   635  0F59  0012               	moviw fsr0++
   636  0F5A  001E               	movwi fsr1++
   637  0F5B  0BFE               	decfsz	126,f
   638  0F5C  2F59               	goto	initloop
   639  0F5D  3400               	retlw	0
   640                           
   641                           	psect	cstackCOMMON
   642  0070                     __pcstackCOMMON:	
   643  0070                     ?_IO_Set:	
   644  0070                     ?_TMR1_Set:	
   645                           ; 0 bytes @ 0x0
   646                           
   647  0070                     ?_I2C_Set:	
   648                           ; 0 bytes @ 0x0
   649                           
   650  0070                     ?_UART_Set:	
   651                           ; 0 bytes @ 0x0
   652                           
   653  0070                     ?_TMR1_ISR:	
   654                           ; 0 bytes @ 0x0
   655                           
   656  0070                     ??_TMR1_ISR:	
   657                           ; 0 bytes @ 0x0
   658                           
   659  0070                     ?_UART_ISR:	
   660                           ; 0 bytes @ 0x0
   661                           
   662  0070                     ?_I2C_ISR:	
   663                           ; 0 bytes @ 0x0
   664                           
   665  0070                     ??_I2C_ISR:	
   666                           ; 0 bytes @ 0x0
   667                           
   668  0070                     ?_I2C_Master_Reception:	
   669                           ; 0 bytes @ 0x0
   670                           
   671  0070                     ?_I2C_Master_Transmission:	
   672                           ; 0 bytes @ 0x0
   673                           
   674  0070                     ?_UART_Receive:	
   675                           ; 0 bytes @ 0x0
   676                           
   677  0070                     ?_UART_Transmit:	
   678                           ; 0 bytes @ 0x0
   679                           
   680  0070                     ?_MainT_Initial:	
   681                           ; 0 bytes @ 0x0
   682                           
   683  0070                     ?_SegmentDisplay_Initial:	
   684                           ; 0 bytes @ 0x0
   685                           
   686  0070                     ?_MainT:	
   687                           ; 0 bytes @ 0x0
   688                           
   689  0070                     ?_SegmentDisplay_Main:	
   690                           ; 0 bytes @ 0x0
   691                           
   692  0070                     ?_Mcu_Initial:	
   693                           ; 0 bytes @ 0x0
   694                           
   695  0070                     ?_ISR:	
   696                           ; 0 bytes @ 0x0
   697                           
   698  0070                     ?_I2C_Main:	
   699                           ; 0 bytes @ 0x0
   700                           
   701  0070                     ?_UART_Main:	
   702                           ; 0 bytes @ 0x0
   703                           
   704  0070                     ?_putch:	
   705                           ; 0 bytes @ 0x0
   706                           
   707  0070                     ?_main:	
   708                           ; 0 bytes @ 0x0
   709                           
   710  0070                     ?i1___awdiv:	
   711                           ; 0 bytes @ 0x0
   712                           
   713  0070                     ?i1___awmod:	
   714                           ; 2 bytes @ 0x0
   715                           
   716  0070                     i1___awdiv@divisor:	
   717                           ; 2 bytes @ 0x0
   718                           
   719  0070                     i1___awmod@divisor:	
   720                           ; 2 bytes @ 0x0
   721                           
   722                           
   723                           ; 2 bytes @ 0x0
   724  0070                     	ds	2
   725  0072                     i1___awdiv@dividend:	
   726  0072                     i1___awmod@dividend:	
   727                           ; 2 bytes @ 0x2
   728                           
   729                           
   730                           ; 2 bytes @ 0x2
   731  0072                     	ds	2
   732  0074                     ??i1___awdiv:	
   733  0074                     ??i1___awmod:	
   734                           ; 0 bytes @ 0x4
   735                           
   736                           
   737                           ; 0 bytes @ 0x4
   738  0074                     	ds	1
   739  0075                     i1___awdiv@counter:	
   740  0075                     i1___awmod@counter:	
   741                           ; 1 bytes @ 0x5
   742                           
   743                           
   744                           ; 1 bytes @ 0x5
   745  0075                     	ds	1
   746  0076                     i1___awdiv@sign:	
   747  0076                     i1___awmod@sign:	
   748                           ; 1 bytes @ 0x6
   749                           
   750                           
   751                           ; 1 bytes @ 0x6
   752  0076                     	ds	1
   753  0077                     i1___awdiv@quotient:	
   754                           
   755                           ; 2 bytes @ 0x7
   756  0077                     	ds	2
   757  0079                     ?i1_setSegmentDisplayNumber:	
   758  0079                     i1setSegmentDisplayNumber@number:	
   759                           ; 0 bytes @ 0x9
   760                           
   761                           
   762                           ; 2 bytes @ 0x9
   763  0079                     	ds	2
   764  007B                     i1setSegmentDisplayNumber@i:	
   765                           
   766                           ; 1 bytes @ 0xB
   767  007B                     	ds	1
   768  007C                     ??_UART_ISR:	
   769                           
   770                           ; 0 bytes @ 0xC
   771  007C                     	ds	2
   772                           
   773                           	psect	cstackBANK0
   774  0020                     __pcstackBANK0:	
   775  0020                     ??i1_setSegmentDisplayNumber:	
   776                           
   777                           ; 0 bytes @ 0x0
   778  0020                     	ds	4
   779  0024                     ??_ISR:	
   780                           
   781                           ; 0 bytes @ 0x4
   782  0024                     	ds	1
   783  0025                     ??_IO_Set:	
   784  0025                     ??_TMR1_Set:	
   785                           ; 0 bytes @ 0x5
   786                           
   787  0025                     ??_I2C_Set:	
   788                           ; 0 bytes @ 0x5
   789                           
   790  0025                     ??_UART_Set:	
   791                           ; 0 bytes @ 0x5
   792                           
   793  0025                     ??_I2C_Master_Reception:	
   794                           ; 0 bytes @ 0x5
   795                           
   796  0025                     ??_I2C_Master_Transmission:	
   797                           ; 0 bytes @ 0x5
   798                           
   799  0025                     ??_UART_Receive:	
   800                           ; 0 bytes @ 0x5
   801                           
   802  0025                     ??_MainT_Initial:	
   803                           ; 0 bytes @ 0x5
   804                           
   805  0025                     ??_SegmentDisplay_Initial:	
   806                           ; 0 bytes @ 0x5
   807                           
   808  0025                     ??_MainT:	
   809                           ; 0 bytes @ 0x5
   810                           
   811  0025                     ??_SegmentDisplay_Main:	
   812                           ; 0 bytes @ 0x5
   813                           
   814  0025                     ??_putch:	
   815                           ; 0 bytes @ 0x5
   816                           
   817  0025                     ?___awdiv:	
   818                           ; 0 bytes @ 0x5
   819                           
   820  0025                     ?___awmod:	
   821                           ; 2 bytes @ 0x5
   822                           
   823  0025                     ?___lwdiv:	
   824                           ; 2 bytes @ 0x5
   825                           
   826  0025                     putch@byte:	
   827                           ; 2 bytes @ 0x5
   828                           
   829  0025                     ___awdiv@divisor:	
   830                           ; 1 bytes @ 0x5
   831                           
   832  0025                     ___awmod@divisor:	
   833                           ; 2 bytes @ 0x5
   834                           
   835  0025                     ___lwdiv@divisor:	
   836                           ; 2 bytes @ 0x5
   837                           
   838                           
   839                           ; 2 bytes @ 0x5
   840  0025                     	ds	1
   841  0026                     ??_Mcu_Initial:	
   842  0026                     I2C_Master_Transmission@i:	
   843                           ; 0 bytes @ 0x6
   844                           
   845                           
   846                           ; 1 bytes @ 0x6
   847  0026                     	ds	1
   848  0027                     I2C_Master_Reception@i:	
   849  0027                     ___awdiv@dividend:	
   850                           ; 1 bytes @ 0x7
   851                           
   852  0027                     ___awmod@dividend:	
   853                           ; 2 bytes @ 0x7
   854                           
   855  0027                     ___lwdiv@dividend:	
   856                           ; 2 bytes @ 0x7
   857                           
   858                           
   859                           ; 2 bytes @ 0x7
   860  0027                     	ds	1
   861  0028                     ??_I2C_Main:	
   862  0028                     UART_Receive@i:	
   863                           ; 0 bytes @ 0x8
   864                           
   865                           
   866                           ; 1 bytes @ 0x8
   867  0028                     	ds	1
   868  0029                     ??___awdiv:	
   869  0029                     ??___awmod:	
   870                           ; 0 bytes @ 0x9
   871                           
   872  0029                     ??___lwdiv:	
   873                           ; 0 bytes @ 0x9
   874                           
   875                           
   876                           ; 0 bytes @ 0x9
   877  0029                     	ds	1
   878  002A                     ___awdiv@counter:	
   879  002A                     ___awmod@counter:	
   880                           ; 1 bytes @ 0xA
   881                           
   882  002A                     ___lwdiv@quotient:	
   883                           ; 1 bytes @ 0xA
   884                           
   885                           
   886                           ; 2 bytes @ 0xA
   887  002A                     	ds	1
   888  002B                     I2C_Main@i:	
   889  002B                     ___awdiv@sign:	
   890                           ; 1 bytes @ 0xB
   891                           
   892  002B                     ___awmod@sign:	
   893                           ; 1 bytes @ 0xB
   894                           
   895                           
   896                           ; 1 bytes @ 0xB
   897  002B                     	ds	1
   898  002C                     ___lwdiv@counter:	
   899  002C                     ___awdiv@quotient:	
   900                           ; 1 bytes @ 0xC
   901                           
   902                           
   903                           ; 2 bytes @ 0xC
   904  002C                     	ds	1
   905  002D                     ?___lwmod:	
   906  002D                     ___lwmod@divisor:	
   907                           ; 2 bytes @ 0xD
   908                           
   909                           
   910                           ; 2 bytes @ 0xD
   911  002D                     	ds	1
   912  002E                     ?_setSegmentDisplayNumber:	
   913  002E                     setSegmentDisplayNumber@number:	
   914                           ; 0 bytes @ 0xE
   915                           
   916                           
   917                           ; 2 bytes @ 0xE
   918  002E                     	ds	1
   919  002F                     ___lwmod@dividend:	
   920                           
   921                           ; 2 bytes @ 0xF
   922  002F                     	ds	1
   923  0030                     ??_setSegmentDisplayNumber:	
   924                           
   925                           ; 0 bytes @ 0x10
   926  0030                     	ds	1
   927  0031                     ??___lwmod:	
   928                           
   929                           ; 0 bytes @ 0x11
   930  0031                     	ds	1
   931  0032                     ___lwmod@counter:	
   932                           
   933                           ; 1 bytes @ 0x12
   934  0032                     	ds	1
   935  0033                     ?_printf:	
   936  0033                     printf@f:	
   937                           ; 2 bytes @ 0x13
   938                           
   939                           
   940                           ; 2 bytes @ 0x13
   941  0033                     	ds	1
   942  0034                     setSegmentDisplayNumber@i:	
   943                           
   944                           ; 1 bytes @ 0x14
   945  0034                     	ds	3
   946  0037                     ??_printf:	
   947                           
   948                           ; 0 bytes @ 0x17
   949  0037                     	ds	4
   950  003B                     printf@ap:	
   951                           
   952                           ; 1 bytes @ 0x1B
   953  003B                     	ds	1
   954  003C                     printf@flag:	
   955                           
   956                           ; 1 bytes @ 0x1C
   957  003C                     	ds	1
   958  003D                     printf@prec:	
   959                           
   960                           ; 1 bytes @ 0x1D
   961  003D                     	ds	1
   962  003E                     printf@_val:	
   963                           
   964                           ; 4 bytes @ 0x1E
   965  003E                     	ds	4
   966  0042                     printf@c:	
   967                           
   968                           ; 1 bytes @ 0x22
   969  0042                     	ds	1
   970  0043                     ??_UART_Transmit:	
   971                           
   972                           ; 0 bytes @ 0x23
   973  0043                     	ds	2
   974  0045                     UART_Transmit@i:	
   975                           
   976                           ; 1 bytes @ 0x25
   977  0045                     	ds	1
   978  0046                     ??_UART_Main:	
   979                           
   980                           ; 0 bytes @ 0x26
   981  0046                     	ds	2
   982  0048                     ??_main:	
   983                           
   984                           	psect	maintext
   985  07B9                     __pmaintext:	
   986                           ; 0 bytes @ 0x28
   987 ;;
   988 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   989 ;;
   990 ;; *************** function _main *****************
   991 ;; Defined at:
   992 ;;		line 6 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;		None
   995 ;; Auto vars:     Size  Location     Type
   996 ;;		None
   997 ;; Return value:  Size  Location     Type
   998 ;;		None               void
   999 ;; Registers used:
  1000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 17F/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1006 ;;      Params:         0       0       0       0       0       0       0       0
  1007 ;;      Locals:         0       0       0       0       0       0       0       0
  1008 ;;      Temps:          0       0       0       0       0       0       0       0
  1009 ;;      Totals:         0       0       0       0       0       0       0       0
  1010 ;;Total ram usage:        0 bytes
  1011 ;; Hardware stack levels required when called:    8
  1012 ;; This function calls:
  1013 ;;		_I2C_Main
  1014 ;;		_MainT
  1015 ;;		_MainT_Initial
  1016 ;;		_Mcu_Initial
  1017 ;;		_SegmentDisplay_Initial
  1018 ;;		_SegmentDisplay_Main
  1019 ;;		_UART_Main
  1020 ;; This function is called by:
  1021 ;;		Startup code after reset
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           
  1026                           ;psect for function _main
  1027  07B9                     _main:	
  1028                           
  1029                           ;myMain.c: 8: MainT_Initial();
  1030                           
  1031                           ;incstack = 0
  1032                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1033  07B9  318F  2774  3187   	fcall	_MainT_Initial
  1034                           
  1035                           ;myMain.c: 9: Mcu_Initial();
  1036  07BC  318F  27B3  3187   	fcall	_Mcu_Initial
  1037                           
  1038                           ;myMain.c: 10: SegmentDisplay_Initial();
  1039  07BF  318F  27A3  3187   	fcall	_SegmentDisplay_Initial
  1040                           
  1041                           ;myMain.c: 11: ;;
  1042                           ;myMain.c: 12: __nop();
  1043  07C2  0000               	nop
  1044  07C3                     l2362:	
  1045                           ;myMain.c: 13: while(1)
  1046                           
  1047                           
  1048                           ;myMain.c: 14: {
  1049                           ;myMain.c: 17: if(TMain->T1_Timerout)
  1050  07C3  0020               	movlb	0	; select bank0
  1051  07C4  085F               	movf	_TMain,w
  1052  07C5  0086               	movwf	6
  1053  07C6  0187               	clrf	7
  1054  07C7  1D01               	btfss	1,2
  1055  07C8  2FC3               	goto	l2362
  1056                           
  1057                           ;myMain.c: 18: {
  1058                           ;myMain.c: 19: TMain->T1_Timerout = 0;
  1059  07C9  085F               	movf	_TMain,w
  1060  07CA  0086               	movwf	6
  1061  07CB  0187               	clrf	7
  1062  07CC  1101               	bcf	1,2
  1063                           
  1064                           ;myMain.c: 20: MainT();
  1065  07CD  3184  2445  3187   	fcall	_MainT
  1066                           
  1067                           ;myMain.c: 21: if(TMain->PowerON)
  1068  07D0  0020               	movlb	0	; select bank0
  1069  07D1  085F               	movf	_TMain,w
  1070  07D2  0086               	movwf	6
  1071  07D3  0187               	clrf	7
  1072  07D4  1C01               	btfss	1,0
  1073  07D5  2FC3               	goto	l2362
  1074                           
  1075                           ;myMain.c: 22: {
  1076                           ;myMain.c: 23: ;;
  1077                           ;myMain.c: 24: I2C_Main();
  1078  07D6  3183  23D2  3187   	fcall	_I2C_Main
  1079                           
  1080                           ;myMain.c: 25: UART_Main();
  1081  07D9  3186  26D3  3187   	fcall	_UART_Main
  1082                           
  1083                           ;myMain.c: 26: SegmentDisplay_Main();
  1084  07DC  3183  235F  3187   	fcall	_SegmentDisplay_Main
  1085  07DF  2FC3               	goto	l2362
  1086  07E0                     __end_of_main:	
  1087                           
  1088                           	psect	text1
  1089  06D3                     __ptext1:	
  1090 ;; *************** function _UART_Main *****************
  1091 ;; Defined at:
  1092 ;;		line 536 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;		None
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;		None
  1097 ;; Return value:  Size  Location     Type
  1098 ;;		None               void
  1099 ;; Registers used:
  1100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1106 ;;      Params:         0       0       0       0       0       0       0       0
  1107 ;;      Locals:         0       0       0       0       0       0       0       0
  1108 ;;      Temps:          0       2       0       0       0       0       0       0
  1109 ;;      Totals:         0       2       0       0       0       0       0       0
  1110 ;;Total ram usage:        2 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; Hardware stack levels required when called:    7
  1113 ;; This function calls:
  1114 ;;		_UART_Receive
  1115 ;;		_UART_Transmit
  1116 ;;		_setSegmentDisplayNumber
  1117 ;; This function is called by:
  1118 ;;		_main
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           
  1123                           ;psect for function _UART_Main
  1124  06D3                     _UART_Main:	
  1125                           
  1126                           ;MCU_16f1516_B1.c: 538: if(UART->RxGO)
  1127                           
  1128                           ;incstack = 0
  1129                           ; Regs used in _UART_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1130  06D3  0020               	movlb	0	; select bank0
  1131  06D4  0849               	movf	_UART,w
  1132  06D5  3E43               	addlw	67
  1133  06D6  0086               	movwf	6
  1134  06D7  3001               	movlw	1	; select bank2/3
  1135  06D8  0087               	movwf	7
  1136  06D9  1C81               	btfss	1,1
  1137  06DA  2EF6               	goto	l2228
  1138                           
  1139                           ;MCU_16f1516_B1.c: 539: {
  1140                           ;MCU_16f1516_B1.c: 540: UART->RxGO=0;
  1141  06DB  0849               	movf	_UART,w
  1142  06DC  3E43               	addlw	67
  1143  06DD  0086               	movwf	6
  1144  06DE  3001               	movlw	1	; select bank2/3
  1145  06DF  0087               	movwf	7
  1146  06E0  1081               	bcf	1,1
  1147                           
  1148                           ;MCU_16f1516_B1.c: 541: UART_Receive();
  1149  06E1  3187  2707  3186   	fcall	_UART_Receive
  1150                           
  1151                           ;MCU_16f1516_B1.c: 542: RCIE=1;
  1152  06E4  0021               	movlb	1	; select bank1
  1153  06E5  1691               	bsf	17,5	;volatile
  1154                           
  1155                           ;MCU_16f1516_B1.c: 543: setSegmentDisplayNumber(UART->RxData[0]);
  1156  06E6  0020               	movlb	0	; select bank0
  1157  06E7  0849               	movf	_UART,w
  1158  06E8  3E20               	addlw	32
  1159  06E9  0086               	movwf	6
  1160  06EA  3001               	movlw	1	; select bank2/3
  1161  06EB  0087               	movwf	7
  1162  06EC  0801               	movf	1,w
  1163  06ED  00C6               	movwf	??_UART_Main
  1164  06EE  01C7               	clrf	??_UART_Main+1
  1165  06EF  0846               	movf	??_UART_Main,w
  1166  06F0  00AE               	movwf	setSegmentDisplayNumber@number
  1167  06F1  0847               	movf	??_UART_Main+1,w
  1168  06F2  00AF               	movwf	setSegmentDisplayNumber@number+1
  1169  06F3  3180  2042         	fcall	_setSegmentDisplayNumber
  1170                           
  1171                           ;MCU_16f1516_B1.c: 544: }
  1172  06F5  0008               	return
  1173  06F6                     l2228:	
  1174                           
  1175                           ;MCU_16f1516_B1.c: 545: else
  1176                           ;MCU_16f1516_B1.c: 546: {
  1177                           ;MCU_16f1516_B1.c: 547: if(UART->TxGO)
  1178  06F6  0020               	movlb	0	; select bank0
  1179  06F7  0849               	movf	_UART,w
  1180  06F8  3E43               	addlw	67
  1181  06F9  0086               	movwf	6
  1182  06FA  3001               	movlw	1	; select bank2/3
  1183  06FB  0087               	movwf	7
  1184  06FC  1C01               	btfss	1,0
  1185  06FD  0008               	return
  1186                           
  1187                           ;MCU_16f1516_B1.c: 548: {
  1188                           ;MCU_16f1516_B1.c: 549: UART->TxGO=0;
  1189  06FE  0849               	movf	_UART,w
  1190  06FF  3E43               	addlw	67
  1191  0700  0086               	movwf	6
  1192  0701  3001               	movlw	1	; select bank2/3
  1193  0702  0087               	movwf	7
  1194  0703  1001               	bcf	1,0
  1195                           
  1196                           ;MCU_16f1516_B1.c: 550: UART_Transmit();
  1197  0704  3187  2767         	fcall	_UART_Transmit
  1198  0706  0008               	return
  1199  0707                     __end_of_UART_Main:	
  1200                           
  1201                           	psect	text2
  1202  0042                     __ptext2:	
  1203 ;; *************** function _setSegmentDisplayNumber *****************
  1204 ;; Defined at:
  1205 ;;		line 20 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;  number          2   14[BANK0 ] int 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  i               1   20[BANK0 ] unsigned char 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;		None               void
  1212 ;; Registers used:
  1213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1219 ;;      Params:         0       2       0       0       0       0       0       0
  1220 ;;      Locals:         0       1       0       0       0       0       0       0
  1221 ;;      Temps:          0       4       0       0       0       0       0       0
  1222 ;;      Totals:         0       7       0       0       0       0       0       0
  1223 ;;Total ram usage:        7 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; Hardware stack levels required when called:    5
  1226 ;; This function calls:
  1227 ;;		___awdiv
  1228 ;;		___awmod
  1229 ;; This function is called by:
  1230 ;;		_UART_Main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           
  1235                           ;psect for function _setSegmentDisplayNumber
  1236  0042                     _setSegmentDisplayNumber:	
  1237                           
  1238                           ;SegmentDisplay_A2.c: 22: char i;
  1239                           ;SegmentDisplay_A2.c: 23: if(Segment->Enable)
  1240                           
  1241                           ;incstack = 0
  1242                           ; Regs used in _setSegmentDisplayNumber: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  1243  0042  0020               	movlb	0	; select bank0
  1244  0043  085D               	movf	_Segment,w
  1245  0044  3E15               	addlw	21
  1246  0045  0086               	movwf	6
  1247  0046  0187               	clrf	7
  1248  0047  1C01               	btfss	1,0
  1249  0048  0008               	return
  1250                           
  1251                           ;SegmentDisplay_A2.c: 24: {
  1252                           ;SegmentDisplay_A2.c: 25: Segment->GO=1;
  1253  0049  085D               	movf	_Segment,w
  1254  004A  3E15               	addlw	21
  1255  004B  0086               	movwf	6
  1256  004C  0187               	clrf	7
  1257  004D  1481               	bsf	1,1
  1258                           
  1259                           ;SegmentDisplay_A2.c: 26: if(Segment->Hex)
  1260  004E  085D               	movf	_Segment,w
  1261  004F  3E15               	addlw	21
  1262  0050  0086               	movwf	6
  1263  0051  0187               	clrf	7
  1264  0052  1D01               	btfss	1,2
  1265  0053  288E               	goto	l2004
  1266                           
  1267                           ;SegmentDisplay_A2.c: 27: {
  1268                           ;SegmentDisplay_A2.c: 28: Segment->Num[0]=(number & 0x000f);
  1269  0054  082E               	movf	setSegmentDisplayNumber@number,w
  1270  0055  390F               	andlw	15
  1271  0056  00B0               	movwf	??_setSegmentDisplayNumber
  1272  0057  085D               	movf	_Segment,w
  1273  0058  3E11               	addlw	17
  1274  0059  0086               	movwf	6
  1275  005A  0187               	clrf	7
  1276  005B  0830               	movf	??_setSegmentDisplayNumber,w
  1277  005C  0081               	movwf	1
  1278                           
  1279                           ;SegmentDisplay_A2.c: 29: Segment->Num[1]=((number>>4)&0x000f);
  1280  005D  082F               	movf	setSegmentDisplayNumber@number+1,w
  1281  005E  00B1               	movwf	??_setSegmentDisplayNumber+1
  1282  005F  082E               	movf	setSegmentDisplayNumber@number,w
  1283  0060  00B0               	movwf	??_setSegmentDisplayNumber
  1284  0061  3004               	movlw	4
  1285  0062  00B2               	movwf	??_setSegmentDisplayNumber+2
  1286  0063                     u2545:	
  1287  0063  0D31               	rlf	??_setSegmentDisplayNumber+1,w
  1288  0064  0CB1               	rrf	??_setSegmentDisplayNumber+1,f
  1289  0065  0CB0               	rrf	??_setSegmentDisplayNumber,f
  1290  0066  0BB2               	decfsz	??_setSegmentDisplayNumber+2,f
  1291  0067  2863               	goto	u2545
  1292  0068  0830               	movf	??_setSegmentDisplayNumber,w
  1293  0069  390F               	andlw	15
  1294  006A  00B3               	movwf	??_setSegmentDisplayNumber+3
  1295  006B  085D               	movf	_Segment,w
  1296  006C  3E12               	addlw	18
  1297  006D  0086               	movwf	6
  1298  006E  0187               	clrf	7
  1299  006F  0833               	movf	??_setSegmentDisplayNumber+3,w
  1300  0070  0081               	movwf	1
  1301                           
  1302                           ;SegmentDisplay_A2.c: 30: Segment->Num[2]=((number>>8)&0x000f);
  1303  0071  082F               	movf	setSegmentDisplayNumber@number+1,w
  1304  0072  390F               	andlw	15
  1305  0073  00B0               	movwf	??_setSegmentDisplayNumber
  1306  0074  085D               	movf	_Segment,w
  1307  0075  3E13               	addlw	19
  1308  0076  0086               	movwf	6
  1309  0077  0187               	clrf	7
  1310  0078  0830               	movf	??_setSegmentDisplayNumber,w
  1311  0079  0081               	movwf	1
  1312                           
  1313                           ;SegmentDisplay_A2.c: 31: Segment->Num[3]=((number>>12)&0x000f);
  1314  007A  082F               	movf	setSegmentDisplayNumber@number+1,w
  1315  007B  00B1               	movwf	??_setSegmentDisplayNumber+1
  1316  007C  082E               	movf	setSegmentDisplayNumber@number,w
  1317  007D  00B0               	movwf	??_setSegmentDisplayNumber
  1318  007E  300C               	movlw	12
  1319  007F  00B2               	movwf	??_setSegmentDisplayNumber+2
  1320  0080                     u2555:	
  1321  0080  0D31               	rlf	??_setSegmentDisplayNumber+1,w
  1322  0081  0CB1               	rrf	??_setSegmentDisplayNumber+1,f
  1323  0082  0CB0               	rrf	??_setSegmentDisplayNumber,f
  1324  0083  0BB2               	decfsz	??_setSegmentDisplayNumber+2,f
  1325  0084  2880               	goto	u2555
  1326  0085  0830               	movf	??_setSegmentDisplayNumber,w
  1327  0086  390F               	andlw	15
  1328  0087  00B3               	movwf	??_setSegmentDisplayNumber+3
  1329  0088  085D               	movf	_Segment,w
  1330  0089  3E14               	addlw	20
  1331  008A  0086               	movwf	6
  1332  008B  0187               	clrf	7
  1333  008C  0833               	movf	??_setSegmentDisplayNumber+3,w
  1334  008D  293B               	goto	L1
  1335  008E                     l2004:	
  1336                           ;SegmentDisplay_A2.c: 32: }
  1337                           
  1338                           
  1339                           ;SegmentDisplay_A2.c: 33: else if(Segment->Dec)
  1340  008E  085D               	movf	_Segment,w
  1341  008F  3E15               	addlw	21
  1342  0090  0086               	movwf	6
  1343  0091  0187               	clrf	7
  1344  0092  1D81               	btfss	1,3
  1345  0093  293C               	goto	l2032
  1346                           
  1347                           ;SegmentDisplay_A2.c: 34: {
  1348                           ;SegmentDisplay_A2.c: 35: if(number > 0x270f)
  1349  0094  082F               	movf	setSegmentDisplayNumber@number+1,w
  1350  0095  3A80               	xorlw	128
  1351  0096  00B0               	movwf	??_setSegmentDisplayNumber
  1352  0097  30A7               	movlw	167
  1353  0098  0230               	subwf	??_setSegmentDisplayNumber,w
  1354  0099  1D03               	skipz
  1355  009A  289D               	goto	u2575
  1356  009B  3010               	movlw	16
  1357  009C  022E               	subwf	setSegmentDisplayNumber@number,w
  1358  009D                     u2575:	
  1359  009D  1C03               	skipc
  1360  009E  28B5               	goto	l2020
  1361                           
  1362                           ;SegmentDisplay_A2.c: 36: {
  1363                           ;SegmentDisplay_A2.c: 37: for(i=0 ; i<4; i++)
  1364  009F  0020               	movlb	0	; select bank0
  1365  00A0  01B4               	clrf	setSegmentDisplayNumber@i
  1366  00A1                     L2:	
  1367  00A1  3004               	movlw	4
  1368  00A2  0234               	subwf	setSegmentDisplayNumber@i,w
  1369  00A3  1803               	btfsc	3,0
  1370  00A4  293C               	goto	l2032
  1371                           
  1372                           ;SegmentDisplay_A2.c: 38: {
  1373                           ;SegmentDisplay_A2.c: 39: Segment->Num[i]=16;
  1374  00A5  3010               	movlw	16
  1375  00A6  00B0               	movwf	??_setSegmentDisplayNumber
  1376  00A7  0834               	movf	setSegmentDisplayNumber@i,w
  1377  00A8  3E11               	addlw	17
  1378  00A9  075D               	addwf	_Segment,w
  1379  00AA  00B1               	movwf	??_setSegmentDisplayNumber+1
  1380  00AB  0831               	movf	??_setSegmentDisplayNumber+1,w
  1381  00AC  0086               	movwf	6
  1382  00AD  0187               	clrf	7
  1383  00AE  0830               	movf	??_setSegmentDisplayNumber,w
  1384  00AF  0081               	movwf	1
  1385  00B0  3001               	movlw	1
  1386  00B1  00B0               	movwf	??_setSegmentDisplayNumber
  1387  00B2  0830               	movf	??_setSegmentDisplayNumber,w
  1388  00B3  07B4               	addwf	setSegmentDisplayNumber@i,f
  1389  00B4  28A1               	goto	L2
  1390  00B5                     l2020:	
  1391                           ;SegmentDisplay_A2.c: 40: }
  1392                           ;SegmentDisplay_A2.c: 41: }
  1393                           
  1394                           
  1395                           ;SegmentDisplay_A2.c: 42: else
  1396                           ;SegmentDisplay_A2.c: 43: {
  1397                           ;SegmentDisplay_A2.c: 44: Segment->Num[3]=(number/1000);
  1398  00B5  30E8               	movlw	232
  1399  00B6  0020               	movlb	0	; select bank0
  1400  00B7  00A5               	movwf	___awdiv@divisor
  1401  00B8  3003               	movlw	3
  1402  00B9  00A6               	movwf	___awdiv@divisor+1
  1403  00BA  082F               	movf	setSegmentDisplayNumber@number+1,w
  1404  00BB  01A8               	clrf	___awdiv@dividend+1
  1405  00BC  07A8               	addwf	___awdiv@dividend+1,f
  1406  00BD  082E               	movf	setSegmentDisplayNumber@number,w
  1407  00BE  01A7               	clrf	___awdiv@dividend
  1408  00BF  07A7               	addwf	___awdiv@dividend,f
  1409  00C0  3184  24A4  3180   	fcall	___awdiv
  1410  00C3  0020               	movlb	0	; select bank0
  1411  00C4  0825               	movf	?___awdiv,w
  1412  00C5  00B0               	movwf	??_setSegmentDisplayNumber
  1413  00C6  085D               	movf	_Segment,w
  1414  00C7  3E14               	addlw	20
  1415  00C8  0086               	movwf	6
  1416  00C9  0187               	clrf	7
  1417  00CA  0830               	movf	??_setSegmentDisplayNumber,w
  1418  00CB  0081               	movwf	1
  1419                           
  1420                           ;SegmentDisplay_A2.c: 45: number%=1000;
  1421  00CC  30E8               	movlw	232
  1422  00CD  00A5               	movwf	___awmod@divisor
  1423  00CE  3003               	movlw	3
  1424  00CF  00A6               	movwf	___awmod@divisor+1
  1425  00D0  082F               	movf	setSegmentDisplayNumber@number+1,w
  1426  00D1  01A8               	clrf	___awmod@dividend+1
  1427  00D2  07A8               	addwf	___awmod@dividend+1,f
  1428  00D3  082E               	movf	setSegmentDisplayNumber@number,w
  1429  00D4  01A7               	clrf	___awmod@dividend
  1430  00D5  07A7               	addwf	___awmod@dividend,f
  1431  00D6  3185  259B  3180   	fcall	___awmod
  1432  00D9  0020               	movlb	0	; select bank0
  1433  00DA  0826               	movf	?___awmod+1,w
  1434  00DB  01AF               	clrf	setSegmentDisplayNumber@number+1
  1435  00DC  07AF               	addwf	setSegmentDisplayNumber@number+1,f
  1436  00DD  0825               	movf	?___awmod,w
  1437  00DE  01AE               	clrf	setSegmentDisplayNumber@number
  1438  00DF  07AE               	addwf	setSegmentDisplayNumber@number,f
  1439                           
  1440                           ;SegmentDisplay_A2.c: 46: Segment->Num[2]=(number/100);
  1441  00E0  3064               	movlw	100
  1442  00E1  00A5               	movwf	___awdiv@divisor
  1443  00E2  3000               	movlw	0
  1444  00E3  00A6               	movwf	___awdiv@divisor+1
  1445  00E4  082F               	movf	setSegmentDisplayNumber@number+1,w
  1446  00E5  01A8               	clrf	___awdiv@dividend+1
  1447  00E6  07A8               	addwf	___awdiv@dividend+1,f
  1448  00E7  082E               	movf	setSegmentDisplayNumber@number,w
  1449  00E8  01A7               	clrf	___awdiv@dividend
  1450  00E9  07A7               	addwf	___awdiv@dividend,f
  1451  00EA  3184  24A4  3180   	fcall	___awdiv
  1452  00ED  0020               	movlb	0	; select bank0
  1453  00EE  0825               	movf	?___awdiv,w
  1454  00EF  00B0               	movwf	??_setSegmentDisplayNumber
  1455  00F0  085D               	movf	_Segment,w
  1456  00F1  3E13               	addlw	19
  1457  00F2  0086               	movwf	6
  1458  00F3  0187               	clrf	7
  1459  00F4  0830               	movf	??_setSegmentDisplayNumber,w
  1460  00F5  0081               	movwf	1
  1461                           
  1462                           ;SegmentDisplay_A2.c: 47: number%=100;
  1463  00F6  3064               	movlw	100
  1464  00F7  00A5               	movwf	___awmod@divisor
  1465  00F8  3000               	movlw	0
  1466  00F9  00A6               	movwf	___awmod@divisor+1
  1467  00FA  082F               	movf	setSegmentDisplayNumber@number+1,w
  1468  00FB  01A8               	clrf	___awmod@dividend+1
  1469  00FC  07A8               	addwf	___awmod@dividend+1,f
  1470  00FD  082E               	movf	setSegmentDisplayNumber@number,w
  1471  00FE  01A7               	clrf	___awmod@dividend
  1472  00FF  07A7               	addwf	___awmod@dividend,f
  1473  0100  3185  259B  3180   	fcall	___awmod
  1474  0103  0020               	movlb	0	; select bank0
  1475  0104  0826               	movf	?___awmod+1,w
  1476  0105  01AF               	clrf	setSegmentDisplayNumber@number+1
  1477  0106  07AF               	addwf	setSegmentDisplayNumber@number+1,f
  1478  0107  0825               	movf	?___awmod,w
  1479  0108  01AE               	clrf	setSegmentDisplayNumber@number
  1480  0109  07AE               	addwf	setSegmentDisplayNumber@number,f
  1481                           
  1482                           ;SegmentDisplay_A2.c: 48: Segment->Num[1]=(number/10);
  1483  010A  300A               	movlw	10
  1484  010B  00A5               	movwf	___awdiv@divisor
  1485  010C  3000               	movlw	0
  1486  010D  00A6               	movwf	___awdiv@divisor+1
  1487  010E  082F               	movf	setSegmentDisplayNumber@number+1,w
  1488  010F  01A8               	clrf	___awdiv@dividend+1
  1489  0110  07A8               	addwf	___awdiv@dividend+1,f
  1490  0111  082E               	movf	setSegmentDisplayNumber@number,w
  1491  0112  01A7               	clrf	___awdiv@dividend
  1492  0113  07A7               	addwf	___awdiv@dividend,f
  1493  0114  3184  24A4  3180   	fcall	___awdiv
  1494  0117  0020               	movlb	0	; select bank0
  1495  0118  0825               	movf	?___awdiv,w
  1496  0119  00B0               	movwf	??_setSegmentDisplayNumber
  1497  011A  085D               	movf	_Segment,w
  1498  011B  3E12               	addlw	18
  1499  011C  0086               	movwf	6
  1500  011D  0187               	clrf	7
  1501  011E  0830               	movf	??_setSegmentDisplayNumber,w
  1502  011F  0081               	movwf	1
  1503                           
  1504                           ;SegmentDisplay_A2.c: 49: number%=10;
  1505  0120  300A               	movlw	10
  1506  0121  00A5               	movwf	___awmod@divisor
  1507  0122  3000               	movlw	0
  1508  0123  00A6               	movwf	___awmod@divisor+1
  1509  0124  082F               	movf	setSegmentDisplayNumber@number+1,w
  1510  0125  01A8               	clrf	___awmod@dividend+1
  1511  0126  07A8               	addwf	___awmod@dividend+1,f
  1512  0127  082E               	movf	setSegmentDisplayNumber@number,w
  1513  0128  01A7               	clrf	___awmod@dividend
  1514  0129  07A7               	addwf	___awmod@dividend,f
  1515  012A  3185  259B  3180   	fcall	___awmod
  1516  012D  0020               	movlb	0	; select bank0
  1517  012E  0826               	movf	?___awmod+1,w
  1518  012F  01AF               	clrf	setSegmentDisplayNumber@number+1
  1519  0130  07AF               	addwf	setSegmentDisplayNumber@number+1,f
  1520  0131  0825               	movf	?___awmod,w
  1521  0132  01AE               	clrf	setSegmentDisplayNumber@number
  1522  0133  07AE               	addwf	setSegmentDisplayNumber@number,f
  1523                           
  1524                           ;SegmentDisplay_A2.c: 50: Segment->Num[0]=number;
  1525  0134  082E               	movf	setSegmentDisplayNumber@number,w
  1526  0135  00B0               	movwf	??_setSegmentDisplayNumber
  1527  0136  085D               	movf	_Segment,w
  1528  0137  3E11               	addlw	17
  1529  0138  0086               	movwf	6
  1530  0139  0187               	clrf	7
  1531  013A  0830               	movf	??_setSegmentDisplayNumber,w
  1532  013B                     L1:	
  1533  013B  0081               	movwf	1
  1534  013C                     l2032:	
  1535                           
  1536                           ;SegmentDisplay_A2.c: 51: }
  1537                           ;SegmentDisplay_A2.c: 52: }
  1538                           ;SegmentDisplay_A2.c: 53: if(Segment->Num[3] > 0)
  1539  013C  085D               	movf	_Segment,w
  1540  013D  3E14               	addlw	20
  1541  013E  0086               	movwf	6
  1542  013F  0187               	clrf	7
  1543  0140  0801               	movf	1,w
  1544  0141  3A00               	xorlw	0
  1545  0142  1903               	skipnz
  1546  0143  294D               	goto	l2036
  1547                           
  1548                           ;SegmentDisplay_A2.c: 54: {
  1549                           ;SegmentDisplay_A2.c: 55: Segment->DisplayCount=3;
  1550  0144  3003               	movlw	3
  1551  0145  00B0               	movwf	??_setSegmentDisplayNumber
  1552  0146  085D               	movf	_Segment,w
  1553  0147  3E17               	addlw	23
  1554  0148  0086               	movwf	6
  1555  0149  0187               	clrf	7
  1556  014A  0830               	movf	??_setSegmentDisplayNumber,w
  1557  014B  0081               	movwf	1
  1558                           
  1559                           ;SegmentDisplay_A2.c: 56: }
  1560  014C  0008               	return
  1561  014D                     l2036:	
  1562                           
  1563                           ;SegmentDisplay_A2.c: 57: else if(Segment->Num[2] > 0)
  1564  014D  085D               	movf	_Segment,w
  1565  014E  3E13               	addlw	19
  1566  014F  0086               	movwf	6
  1567  0150  0187               	clrf	7
  1568  0151  0801               	movf	1,w
  1569  0152  3A00               	xorlw	0
  1570  0153  1903               	skipnz
  1571  0154  295E               	goto	l2040
  1572                           
  1573                           ;SegmentDisplay_A2.c: 58: {
  1574                           ;SegmentDisplay_A2.c: 59: Segment->DisplayCount=2;
  1575  0155  3002               	movlw	2
  1576  0156  00B0               	movwf	??_setSegmentDisplayNumber
  1577  0157  085D               	movf	_Segment,w
  1578  0158  3E17               	addlw	23
  1579  0159  0086               	movwf	6
  1580  015A  0187               	clrf	7
  1581  015B  0830               	movf	??_setSegmentDisplayNumber,w
  1582  015C  0081               	movwf	1
  1583                           
  1584                           ;SegmentDisplay_A2.c: 60: }
  1585  015D  0008               	return
  1586  015E                     l2040:	
  1587                           
  1588                           ;SegmentDisplay_A2.c: 61: else if(Segment->Num[1] > 0)
  1589  015E  085D               	movf	_Segment,w
  1590  015F  3E12               	addlw	18
  1591  0160  0086               	movwf	6
  1592  0161  0187               	clrf	7
  1593  0162  0801               	movf	1,w
  1594  0163  3A00               	xorlw	0
  1595  0164  1903               	skipnz
  1596  0165  296D               	goto	l2044
  1597                           
  1598                           ;SegmentDisplay_A2.c: 62: {
  1599                           ;SegmentDisplay_A2.c: 63: Segment->DisplayCount=1;
  1600  0166  085D               	movf	_Segment,w
  1601  0167  3E17               	addlw	23
  1602  0168  0086               	movwf	6
  1603  0169  0187               	clrf	7
  1604  016A  0181               	clrf	1
  1605  016B  0A81               	incf	1,f
  1606                           
  1607                           ;SegmentDisplay_A2.c: 64: }
  1608  016C  0008               	return
  1609  016D                     l2044:	
  1610                           
  1611                           ;SegmentDisplay_A2.c: 65: else
  1612                           ;SegmentDisplay_A2.c: 66: {
  1613                           ;SegmentDisplay_A2.c: 67: Segment->DisplayCount=0;
  1614  016D  085D               	movf	_Segment,w
  1615  016E  3E17               	addlw	23
  1616  016F  0086               	movwf	6
  1617  0170  0187               	clrf	7
  1618  0171  0181               	clrf	1
  1619  0172  0008               	return
  1620  0173                     __end_of_setSegmentDisplayNumber:	
  1621                           
  1622                           	psect	text3
  1623  059B                     __ptext3:	
  1624 ;; *************** function ___awmod *****************
  1625 ;; Defined at:
  1626 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  divisor         2    5[BANK0 ] int 
  1629 ;;  dividend        2    7[BANK0 ] int 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;  sign            1   11[BANK0 ] unsigned char 
  1632 ;;  counter         1   10[BANK0 ] unsigned char 
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  2    5[BANK0 ] int 
  1635 ;; Registers used:
  1636 ;;		wreg, status,2, status,0
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1642 ;;      Params:         0       4       0       0       0       0       0       0
  1643 ;;      Locals:         0       2       0       0       0       0       0       0
  1644 ;;      Temps:          0       1       0       0       0       0       0       0
  1645 ;;      Totals:         0       7       0       0       0       0       0       0
  1646 ;;Total ram usage:        7 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    4
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_setSegmentDisplayNumber
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           
  1657                           ;psect for function ___awmod
  1658  059B                     ___awmod:	
  1659                           
  1660                           ;incstack = 0
  1661                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1662  059B  0020               	movlb	0	; select bank0
  1663  059C  01AB               	clrf	___awmod@sign
  1664  059D  1FA8               	btfss	___awmod@dividend+1,7
  1665  059E  2DA6               	goto	l1794
  1666  059F  09A7               	comf	___awmod@dividend,f
  1667  05A0  09A8               	comf	___awmod@dividend+1,f
  1668  05A1  0AA7               	incf	___awmod@dividend,f
  1669  05A2  1903               	skipnz
  1670  05A3  0AA8               	incf	___awmod@dividend+1,f
  1671  05A4  01AB               	clrf	___awmod@sign
  1672  05A5  0AAB               	incf	___awmod@sign,f
  1673  05A6                     l1794:	
  1674  05A6  1FA6               	btfss	___awmod@divisor+1,7
  1675  05A7  2DAD               	goto	l1798
  1676  05A8  09A5               	comf	___awmod@divisor,f
  1677  05A9  09A6               	comf	___awmod@divisor+1,f
  1678  05AA  0AA5               	incf	___awmod@divisor,f
  1679  05AB  1903               	skipnz
  1680  05AC  0AA6               	incf	___awmod@divisor+1,f
  1681  05AD                     l1798:	
  1682  05AD  0826               	movf	___awmod@divisor+1,w
  1683  05AE  0425               	iorwf	___awmod@divisor,w
  1684  05AF  1903               	skipnz
  1685  05B0  2DD4               	goto	l1816
  1686  05B1  01AA               	clrf	___awmod@counter
  1687  05B2  0AAA               	incf	___awmod@counter,f
  1688  05B3                     l1806:	
  1689  05B3  1BA6               	btfsc	___awmod@divisor+1,7
  1690  05B4  2DBF               	goto	l1808
  1691  05B5  3001               	movlw	1
  1692  05B6                     u1955:	
  1693  05B6  35A5               	lslf	___awmod@divisor,f
  1694  05B7  0DA6               	rlf	___awmod@divisor+1,f
  1695  05B8  0B89               	decfsz	9,f
  1696  05B9  2DB6               	goto	u1955
  1697  05BA  3001               	movlw	1
  1698  05BB  00A9               	movwf	??___awmod
  1699  05BC  0829               	movf	??___awmod,w
  1700  05BD  07AA               	addwf	___awmod@counter,f
  1701  05BE  2DB3               	goto	l1806
  1702  05BF                     l1808:	
  1703  05BF  0826               	movf	___awmod@divisor+1,w
  1704  05C0  0228               	subwf	___awmod@dividend+1,w
  1705  05C1  1D03               	skipz
  1706  05C2  2DC5               	goto	u1975
  1707  05C3  0825               	movf	___awmod@divisor,w
  1708  05C4  0227               	subwf	___awmod@dividend,w
  1709  05C5                     u1975:	
  1710  05C5  1C03               	skipc
  1711  05C6  2DCB               	goto	l1812
  1712  05C7  0825               	movf	___awmod@divisor,w
  1713  05C8  02A7               	subwf	___awmod@dividend,f
  1714  05C9  0826               	movf	___awmod@divisor+1,w
  1715  05CA  3BA8               	subwfb	___awmod@dividend+1,f
  1716  05CB                     l1812:	
  1717  05CB  3001               	movlw	1
  1718  05CC                     u1985:	
  1719  05CC  36A6               	lsrf	___awmod@divisor+1,f
  1720  05CD  0CA5               	rrf	___awmod@divisor,f
  1721  05CE  0B89               	decfsz	9,f
  1722  05CF  2DCC               	goto	u1985
  1723  05D0  3001               	movlw	1
  1724  05D1  02AA               	subwf	___awmod@counter,f
  1725  05D2  1D03               	btfss	3,2
  1726  05D3  2DBF               	goto	l1808
  1727  05D4                     l1816:	
  1728  05D4  082B               	movf	___awmod@sign,w
  1729  05D5  1903               	btfsc	3,2
  1730  05D6  2DDC               	goto	l1820
  1731  05D7  09A7               	comf	___awmod@dividend,f
  1732  05D8  09A8               	comf	___awmod@dividend+1,f
  1733  05D9  0AA7               	incf	___awmod@dividend,f
  1734  05DA  1903               	skipnz
  1735  05DB  0AA8               	incf	___awmod@dividend+1,f
  1736  05DC                     l1820:	
  1737  05DC  0828               	movf	___awmod@dividend+1,w
  1738  05DD  01A6               	clrf	?___awmod+1
  1739  05DE  07A6               	addwf	?___awmod+1,f
  1740  05DF  0827               	movf	___awmod@dividend,w
  1741  05E0  01A5               	clrf	?___awmod
  1742  05E1  07A5               	addwf	?___awmod,f
  1743  05E2  0008               	return
  1744  05E3                     __end_of___awmod:	
  1745                           
  1746                           	psect	text4
  1747  04A4                     __ptext4:	
  1748 ;; *************** function ___awdiv *****************
  1749 ;; Defined at:
  1750 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;  divisor         2    5[BANK0 ] int 
  1753 ;;  dividend        2    7[BANK0 ] int 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  quotient        2   12[BANK0 ] int 
  1756 ;;  sign            1   11[BANK0 ] unsigned char 
  1757 ;;  counter         1   10[BANK0 ] unsigned char 
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  2    5[BANK0 ] int 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1767 ;;      Params:         0       4       0       0       0       0       0       0
  1768 ;;      Locals:         0       4       0       0       0       0       0       0
  1769 ;;      Temps:          0       1       0       0       0       0       0       0
  1770 ;;      Totals:         0       9       0       0       0       0       0       0
  1771 ;;Total ram usage:        9 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    4
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_setSegmentDisplayNumber
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           
  1782                           ;psect for function ___awdiv
  1783  04A4                     ___awdiv:	
  1784                           
  1785                           ;incstack = 0
  1786                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1787  04A4  0020               	movlb	0	; select bank0
  1788  04A5  01AB               	clrf	___awdiv@sign
  1789  04A6  1FA6               	btfss	___awdiv@divisor+1,7
  1790  04A7  2CAF               	goto	l1750
  1791  04A8  09A5               	comf	___awdiv@divisor,f
  1792  04A9  09A6               	comf	___awdiv@divisor+1,f
  1793  04AA  0AA5               	incf	___awdiv@divisor,f
  1794  04AB  1903               	skipnz
  1795  04AC  0AA6               	incf	___awdiv@divisor+1,f
  1796  04AD  01AB               	clrf	___awdiv@sign
  1797  04AE  0AAB               	incf	___awdiv@sign,f
  1798  04AF                     l1750:	
  1799  04AF  1FA8               	btfss	___awdiv@dividend+1,7
  1800  04B0  2CBA               	goto	l1756
  1801  04B1  09A7               	comf	___awdiv@dividend,f
  1802  04B2  09A8               	comf	___awdiv@dividend+1,f
  1803  04B3  0AA7               	incf	___awdiv@dividend,f
  1804  04B4  1903               	skipnz
  1805  04B5  0AA8               	incf	___awdiv@dividend+1,f
  1806  04B6  3001               	movlw	1
  1807  04B7  00A9               	movwf	??___awdiv
  1808  04B8  0829               	movf	??___awdiv,w
  1809  04B9  06AB               	xorwf	___awdiv@sign,f
  1810  04BA                     l1756:	
  1811  04BA  01AC               	clrf	___awdiv@quotient
  1812  04BB  01AD               	clrf	___awdiv@quotient+1
  1813  04BC  0826               	movf	___awdiv@divisor+1,w
  1814  04BD  0425               	iorwf	___awdiv@divisor,w
  1815  04BE  1903               	skipnz
  1816  04BF  2CE9               	goto	l1778
  1817  04C0  01AA               	clrf	___awdiv@counter
  1818  04C1  0AAA               	incf	___awdiv@counter,f
  1819  04C2                     l1766:	
  1820  04C2  1BA6               	btfsc	___awdiv@divisor+1,7
  1821  04C3  2CCE               	goto	l1768
  1822  04C4  3001               	movlw	1
  1823  04C5                     u1855:	
  1824  04C5  35A5               	lslf	___awdiv@divisor,f
  1825  04C6  0DA6               	rlf	___awdiv@divisor+1,f
  1826  04C7  0B89               	decfsz	9,f
  1827  04C8  2CC5               	goto	u1855
  1828  04C9  3001               	movlw	1
  1829  04CA  00A9               	movwf	??___awdiv
  1830  04CB  0829               	movf	??___awdiv,w
  1831  04CC  07AA               	addwf	___awdiv@counter,f
  1832  04CD  2CC2               	goto	l1766
  1833  04CE                     l1768:	
  1834  04CE  3001               	movlw	1
  1835  04CF                     u1875:	
  1836  04CF  35AC               	lslf	___awdiv@quotient,f
  1837  04D0  0DAD               	rlf	___awdiv@quotient+1,f
  1838  04D1  0B89               	decfsz	9,f
  1839  04D2  2CCF               	goto	u1875
  1840  04D3  0826               	movf	___awdiv@divisor+1,w
  1841  04D4  0228               	subwf	___awdiv@dividend+1,w
  1842  04D5  1D03               	skipz
  1843  04D6  2CD9               	goto	u1885
  1844  04D7  0825               	movf	___awdiv@divisor,w
  1845  04D8  0227               	subwf	___awdiv@dividend,w
  1846  04D9                     u1885:	
  1847  04D9  1C03               	skipc
  1848  04DA  2CE0               	goto	l1774
  1849  04DB  0825               	movf	___awdiv@divisor,w
  1850  04DC  02A7               	subwf	___awdiv@dividend,f
  1851  04DD  0826               	movf	___awdiv@divisor+1,w
  1852  04DE  3BA8               	subwfb	___awdiv@dividend+1,f
  1853  04DF  142C               	bsf	___awdiv@quotient,0
  1854  04E0                     l1774:	
  1855  04E0  3001               	movlw	1
  1856  04E1                     u1895:	
  1857  04E1  36A6               	lsrf	___awdiv@divisor+1,f
  1858  04E2  0CA5               	rrf	___awdiv@divisor,f
  1859  04E3  0B89               	decfsz	9,f
  1860  04E4  2CE1               	goto	u1895
  1861  04E5  3001               	movlw	1
  1862  04E6  02AA               	subwf	___awdiv@counter,f
  1863  04E7  1D03               	btfss	3,2
  1864  04E8  2CCE               	goto	l1768
  1865  04E9                     l1778:	
  1866  04E9  082B               	movf	___awdiv@sign,w
  1867  04EA  1903               	btfsc	3,2
  1868  04EB  2CF1               	goto	l1782
  1869  04EC  09AC               	comf	___awdiv@quotient,f
  1870  04ED  09AD               	comf	___awdiv@quotient+1,f
  1871  04EE  0AAC               	incf	___awdiv@quotient,f
  1872  04EF  1903               	skipnz
  1873  04F0  0AAD               	incf	___awdiv@quotient+1,f
  1874  04F1                     l1782:	
  1875  04F1  082D               	movf	___awdiv@quotient+1,w
  1876  04F2  01A6               	clrf	?___awdiv+1
  1877  04F3  07A6               	addwf	?___awdiv+1,f
  1878  04F4  082C               	movf	___awdiv@quotient,w
  1879  04F5  01A5               	clrf	?___awdiv
  1880  04F6  07A5               	addwf	?___awdiv,f
  1881  04F7  0008               	return
  1882  04F8                     __end_of___awdiv:	
  1883                           
  1884                           	psect	text5
  1885  0767                     __ptext5:	
  1886 ;; *************** function _UART_Transmit *****************
  1887 ;; Defined at:
  1888 ;;		line 554 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  i               1   37[BANK0 ] unsigned char 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;		None               void
  1895 ;; Registers used:
  1896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1902 ;;      Params:         0       0       0       0       0       0       0       0
  1903 ;;      Locals:         0       1       0       0       0       0       0       0
  1904 ;;      Temps:          0       2       0       0       0       0       0       0
  1905 ;;      Totals:         0       3       0       0       0       0       0       0
  1906 ;;Total ram usage:        3 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    6
  1909 ;; This function calls:
  1910 ;;		_printf
  1911 ;; This function is called by:
  1912 ;;		_UART_Main
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           
  1917                           ;psect for function _UART_Transmit
  1918  0767                     _UART_Transmit:	
  1919                           
  1920                           ;MCU_16f1516_B1.c: 556: char i;
  1921                           ;MCU_16f1516_B1.c: 557: for(i=0;i<32;i++)
  1922                           
  1923                           ;incstack = 0
  1924                           ; Regs used in _UART_Transmit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1925  0767  0020               	movlb	0	; select bank0
  1926  0768  01C5               	clrf	UART_Transmit@i
  1927  0769                     L3:	
  1928  0769  3020               	movlw	32
  1929  076A  0245               	subwf	UART_Transmit@i,w
  1930  076B  1803               	btfsc	3,0
  1931  076C  0008               	return
  1932  076D                     l334:	
  1933                           ;MCU_16f1516_B1.c: 558: {
  1934                           ;MCU_16f1516_B1.c: 559: while(!TRMT);
  1935                           
  1936  076D  0023               	movlb	3	; select bank3
  1937  076E  1C9E               	btfss	30,1	;volatile
  1938  076F  2F6D               	goto	l334
  1939                           
  1940                           ;MCU_16f1516_B1.c: 561: printf("%d",i);
  1941  0770  300A               	movlw	low (STR_1| (0+32768))
  1942  0771  0020               	movlb	0	; select bank0
  1943  0772  00B3               	movwf	printf@f
  1944  0773  3090               	movlw	high (STR_1| (0+32768))
  1945  0774  00B4               	movwf	printf@f+1
  1946  0775  0845               	movf	UART_Transmit@i,w
  1947  0776  00C3               	movwf	??_UART_Transmit
  1948  0777  01C4               	clrf	??_UART_Transmit+1
  1949  0778  0843               	movf	??_UART_Transmit,w
  1950  0779  00B5               	movwf	?_printf+2
  1951  077A  0844               	movf	??_UART_Transmit+1,w
  1952  077B  00B6               	movwf	?_printf+3
  1953  077C  3182  22A2  3187   	fcall	_printf
  1954  077F                     l337:	
  1955                           ;MCU_16f1516_B1.c: 562: while(!TRMT);
  1956                           
  1957  077F  0023               	movlb	3	; select bank3
  1958  0780  1C9E               	btfss	30,1	;volatile
  1959  0781  2F7F               	goto	l337
  1960                           
  1961                           ;MCU_16f1516_B1.c: 563: printf(",");
  1962  0782  300D               	movlw	low (STR_2| (0+32768))
  1963  0783  0020               	movlb	0	; select bank0
  1964  0784  00B3               	movwf	printf@f
  1965  0785  3090               	movlw	high (STR_2| (0+32768))
  1966  0786  00B4               	movwf	printf@f+1
  1967  0787  3182  22A2  3187   	fcall	_printf
  1968  078A  3001               	movlw	1
  1969  078B  0020               	movlb	0	; select bank0
  1970  078C  00C3               	movwf	??_UART_Transmit
  1971  078D  0843               	movf	??_UART_Transmit,w
  1972  078E  07C5               	addwf	UART_Transmit@i,f
  1973  078F  2F69               	goto	L3
  1974  0790                     __end_of_UART_Transmit:	
  1975                           
  1976                           	psect	text6
  1977  02A2                     __ptext6:	
  1978 ;; *************** function _printf *****************
  1979 ;; Defined at:
  1980 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  f               2   19[BANK0 ] PTR const unsigned char 
  1983 ;;		 -> STR_2(2), STR_1(3), 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  _val            4   30[BANK0 ] struct .
  1986 ;;  c               1   34[BANK0 ] char 
  1987 ;;  prec            1   29[BANK0 ] char 
  1988 ;;  flag            1   28[BANK0 ] unsigned char 
  1989 ;;  ap              1   27[BANK0 ] PTR void [1]
  1990 ;;		 -> ?_printf(2), 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  2   19[BANK0 ] int 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2000 ;;      Params:         0       4       0       0       0       0       0       0
  2001 ;;      Locals:         0       8       0       0       0       0       0       0
  2002 ;;      Temps:          0       4       0       0       0       0       0       0
  2003 ;;      Totals:         0      16       0       0       0       0       0       0
  2004 ;;Total ram usage:       16 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    5
  2007 ;; This function calls:
  2008 ;;		___lwdiv
  2009 ;;		___lwmod
  2010 ;;		_putch
  2011 ;; This function is called by:
  2012 ;;		_UART_Transmit
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           
  2017                           ;psect for function _printf
  2018  02A2                     _printf:	
  2019                           
  2020                           ;doprnt.c: 466: va_list ap;
  2021                           ;doprnt.c: 499: signed char c;
  2022                           ;doprnt.c: 506: signed char prec;
  2023                           ;doprnt.c: 508: unsigned char flag;
  2024                           ;doprnt.c: 527: union {
  2025                           ;doprnt.c: 528: unsigned int _val;
  2026                           ;doprnt.c: 529: struct {
  2027                           ;doprnt.c: 530: const char * _cp;
  2028                           ;doprnt.c: 531: unsigned _len;
  2029                           ;doprnt.c: 532: } _str;
  2030                           ;doprnt.c: 533: } _val;
  2031                           ;doprnt.c: 542: *ap = __va_start();
  2032                           
  2033                           ;incstack = 0
  2034                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2035  02A2  3035               	movlw	(?_printf+2)& (0+255)
  2036  02A3  0020               	movlb	0	; select bank0
  2037  02A4  00B7               	movwf	??_printf
  2038  02A5  0837               	movf	??_printf,w
  2039  02A6  00BB               	movwf	printf@ap
  2040  02A7                     l1740:	
  2041                           ;doprnt.c: 545: while(c = *f++) {
  2042                           
  2043  02A7  0020               	movlb	0	; select bank0
  2044  02A8  0834               	movf	printf@f+1,w
  2045  02A9  00B8               	movwf	??_printf+1
  2046  02AA  0833               	movf	printf@f,w
  2047  02AB  00B7               	movwf	??_printf
  2048  02AC  0AB3               	incf	printf@f,f
  2049  02AD  1903               	skipnz
  2050  02AE  0AB4               	incf	printf@f+1,f
  2051  02AF  0837               	movf	??_printf,w
  2052  02B0  0084               	movwf	4
  2053  02B1  0838               	movf	??_printf+1,w
  2054  02B2  0085               	movwf	5
  2055  02B3  0800               	movf	0,w	;code access
  2056  02B4  00B9               	movwf	??_printf+2
  2057  02B5  0839               	movf	??_printf+2,w
  2058  02B6  00C2               	movwf	printf@c
  2059  02B7  08C2               	movf	printf@c,f
  2060  02B8  1903               	btfsc	3,2
  2061  02B9  0008               	return
  2062                           
  2063                           ;doprnt.c: 547: if(c != '%')
  2064  02BA  0842               	movf	printf@c,w
  2065  02BB  3A25               	xorlw	37
  2066  02BC  1903               	skipnz
  2067  02BD  2AC3               	goto	l1700
  2068                           
  2069                           ;doprnt.c: 549: {
  2070                           ;doprnt.c: 550: (putch(c) );
  2071  02BE  0842               	movf	printf@c,w
  2072  02BF  318F  275E  3182   	fcall	_putch
  2073                           
  2074                           ;doprnt.c: 551: continue;
  2075  02C2  2AA7               	goto	l1740
  2076  02C3                     l1700:	
  2077                           
  2078                           ;doprnt.c: 552: }
  2079                           ;doprnt.c: 557: flag = 0;
  2080  02C3  0020               	movlb	0	; select bank0
  2081  02C4  01BC               	clrf	printf@flag
  2082                           
  2083                           ;doprnt.c: 831: }
  2084                           
  2085                           ;doprnt.c: 822: continue;
  2086                           
  2087                           ;doprnt.c: 811: default:
  2088                           
  2089                           ;doprnt.c: 707: case 'i':
  2090                           ;doprnt.c: 708: break;
  2091                           
  2092                           ;doprnt.c: 706: case 'd':
  2093                           
  2094                           ;doprnt.c: 647: goto alldone;
  2095                           
  2096                           ;doprnt.c: 646: case 0:
  2097                           
  2098                           ;doprnt.c: 644: switch(c = *f++) {
  2099  02C5  0834               	movf	printf@f+1,w
  2100  02C6  00B8               	movwf	??_printf+1
  2101  02C7  0833               	movf	printf@f,w
  2102  02C8  00B7               	movwf	??_printf
  2103  02C9  0AB3               	incf	printf@f,f
  2104  02CA  1903               	skipnz
  2105  02CB  0AB4               	incf	printf@f+1,f
  2106  02CC  0837               	movf	??_printf,w
  2107  02CD  0084               	movwf	4
  2108  02CE  0838               	movf	??_printf+1,w
  2109  02CF  0085               	movwf	5
  2110  02D0  0800               	movf	0,w	;code access
  2111  02D1  00C2               	movwf	printf@c
  2112                           
  2113                           ; Switch size 1, requested type "space"
  2114                           ; Number of cases is 3, Range of values is 0 to 105
  2115                           ; switch strategies available:
  2116                           ; Name         Instructions Cycles
  2117                           ; simple_byte           10     6 (average)
  2118                           ; direct_byte          218     6 (fixed)
  2119                           ; jumptable            260     6 (fixed)
  2120                           ;	Chosen strategy is simple_byte
  2121  02D2  3A00               	xorlw	0	; case 0
  2122  02D3  1903               	skipnz
  2123  02D4  2B5E               	goto	l525
  2124  02D5  3A64               	xorlw	100	; case 100
  2125  02D6  1903               	skipnz
  2126  02D7  2ADC               	goto	l1706
  2127  02D8  3A0D               	xorlw	13	; case 105
  2128  02D9  1903               	skipnz
  2129  02DA  2ADC               	goto	l1706
  2130  02DB  2AA7               	goto	l1740
  2131  02DC                     l1706:	
  2132                           
  2133                           ;doprnt.c: 1262: {
  2134                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2135  02DC  083B               	movf	printf@ap,w
  2136  02DD  0086               	movwf	6
  2137  02DE  0187               	clrf	7
  2138  02DF  3F40               	moviw [0]fsr1
  2139  02E0  00BE               	movwf	printf@_val
  2140  02E1  3F41               	moviw [1]fsr1
  2141  02E2  00BF               	movwf	printf@_val+1
  2142  02E3  3002               	movlw	2
  2143  02E4  00B7               	movwf	??_printf
  2144  02E5  0837               	movf	??_printf,w
  2145  02E6  07BB               	addwf	printf@ap,f
  2146                           
  2147                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2148  02E7  1FBF               	btfss	printf@_val+1,7
  2149  02E8  2AF2               	goto	l1716
  2150                           
  2151                           ;doprnt.c: 1271: flag |= 0x03;
  2152  02E9  3003               	movlw	3
  2153  02EA  00B7               	movwf	??_printf
  2154  02EB  0837               	movf	??_printf,w
  2155  02EC  04BC               	iorwf	printf@flag,f
  2156                           
  2157                           ;doprnt.c: 1272: _val._val = -_val._val;
  2158  02ED  09BE               	comf	printf@_val,f
  2159  02EE  09BF               	comf	printf@_val+1,f
  2160  02EF  0ABE               	incf	printf@_val,f
  2161  02F0  1903               	skipnz
  2162  02F1  0ABF               	incf	printf@_val+1,f
  2163  02F2                     l1716:	
  2164                           
  2165                           ;doprnt.c: 1273: }
  2166                           ;doprnt.c: 1275: }
  2167                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2168  02F2  01C2               	clrf	printf@c
  2169  02F3  0AC2               	incf	printf@c,f
  2170  02F4  0842               	movf	printf@c,w
  2171  02F5  3A05               	xorlw	5
  2172  02F6  1903               	btfsc	3,2
  2173  02F7  2B17               	goto	l1728
  2174  02F8                     l1720:	
  2175                           
  2176                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2177  02F8  0842               	movf	printf@c,w
  2178  02F9  00B7               	movwf	??_printf
  2179  02FA  01B8               	clrf	??_printf+1
  2180  02FB  35B7               	lslf	??_printf,f
  2181  02FC  0DB8               	rlf	??_printf+1,f
  2182  02FD  3000               	movlw	low (_dpowers| (0+32768))
  2183  02FE  0737               	addwf	??_printf,w
  2184  02FF  0084               	movwf	4
  2185  0300  3090               	movlw	high (_dpowers| (0+32768))
  2186  0301  3D38               	addwfc	??_printf+1,w
  2187  0302  0085               	movwf	5
  2188  0303  3F00               	moviw [0]fsr0
  2189  0304  00B9               	movwf	??_printf+2
  2190  0305  3F01               	moviw [1]fsr0
  2191  0306  00BA               	movwf	??_printf+3
  2192  0307  083A               	movf	??_printf+3,w
  2193  0308  023F               	subwf	printf@_val+1,w
  2194  0309  1D03               	skipz
  2195  030A  2B0D               	goto	u1775
  2196  030B  0839               	movf	??_printf+2,w
  2197  030C  023E               	subwf	printf@_val,w
  2198  030D                     u1775:	
  2199  030D  1C03               	btfss	3,0
  2200  030E  2B17               	goto	l1728
  2201                           
  2202                           ;doprnt.c: 1316: break;
  2203  030F  3001               	movlw	1
  2204  0310  00B7               	movwf	??_printf
  2205  0311  0837               	movf	??_printf,w
  2206  0312  07C2               	addwf	printf@c,f
  2207  0313  0842               	movf	printf@c,w
  2208  0314  3A05               	xorlw	5
  2209  0315  1D03               	skipz
  2210  0316  2AF8               	goto	l1720
  2211  0317                     l1728:	
  2212                           
  2213                           ;doprnt.c: 1431: {
  2214                           ;doprnt.c: 1447: if(flag & 0x03)
  2215  0317  083C               	movf	printf@flag,w
  2216  0318  3903               	andlw	3
  2217  0319  1903               	btfsc	3,2
  2218  031A  2B1F               	goto	l1732
  2219                           
  2220                           ;doprnt.c: 1448: (putch('-') );
  2221  031B  302D               	movlw	45
  2222  031C  318F  275E  3182   	fcall	_putch
  2223  031F                     l1732:	
  2224                           
  2225                           ;doprnt.c: 1478: }
  2226                           ;doprnt.c: 1481: prec = c;
  2227  031F  0020               	movlb	0	; select bank0
  2228  0320  0842               	movf	printf@c,w
  2229  0321  00B7               	movwf	??_printf
  2230  0322  0837               	movf	??_printf,w
  2231  0323  00BD               	movwf	printf@prec
  2232  0324                     l1738:	
  2233                           ;doprnt.c: 1483: while(prec--) {
  2234                           
  2235  0324  30FF               	movlw	-1
  2236  0325  0020               	movlb	0	; select bank0
  2237  0326  00B7               	movwf	??_printf
  2238  0327  0837               	movf	??_printf,w
  2239  0328  07BD               	addwf	printf@prec,f
  2240  0329  083D               	movf	printf@prec,w
  2241  032A  3AFF               	xorlw	255
  2242  032B  1903               	btfsc	3,2
  2243  032C  2AA7               	goto	l1740
  2244                           
  2245                           ;doprnt.c: 1487: {
  2246                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2247  032D  300A               	movlw	10
  2248  032E  00AD               	movwf	___lwmod@divisor
  2249  032F  3000               	movlw	0
  2250  0330  00AE               	movwf	___lwmod@divisor+1
  2251  0331  083D               	movf	printf@prec,w
  2252  0332  00B7               	movwf	??_printf
  2253  0333  01B8               	clrf	??_printf+1
  2254  0334  35B7               	lslf	??_printf,f
  2255  0335  0DB8               	rlf	??_printf+1,f
  2256  0336  3000               	movlw	low (_dpowers| (0+32768))
  2257  0337  0737               	addwf	??_printf,w
  2258  0338  0084               	movwf	4
  2259  0339  3090               	movlw	high (_dpowers| (0+32768))
  2260  033A  3D38               	addwfc	??_printf+1,w
  2261  033B  0085               	movwf	5
  2262  033C  3F00               	moviw [0]fsr0
  2263  033D  00A5               	movwf	___lwdiv@divisor
  2264  033E  3F01               	moviw [1]fsr0
  2265  033F  00A6               	movwf	___lwdiv@divisor+1
  2266  0340  083F               	movf	printf@_val+1,w
  2267  0341  01A8               	clrf	___lwdiv@dividend+1
  2268  0342  07A8               	addwf	___lwdiv@dividend+1,f
  2269  0343  083E               	movf	printf@_val,w
  2270  0344  01A7               	clrf	___lwdiv@dividend
  2271  0345  07A7               	addwf	___lwdiv@dividend,f
  2272  0346  3186  269C  3182   	fcall	___lwdiv
  2273  0349  0020               	movlb	0	; select bank0
  2274  034A  0826               	movf	?___lwdiv+1,w
  2275  034B  01B0               	clrf	___lwmod@dividend+1
  2276  034C  07B0               	addwf	___lwmod@dividend+1,f
  2277  034D  0825               	movf	?___lwdiv,w
  2278  034E  01AF               	clrf	___lwmod@dividend
  2279  034F  07AF               	addwf	___lwmod@dividend,f
  2280  0350  3187  2738  3182   	fcall	___lwmod
  2281  0353  0020               	movlb	0	; select bank0
  2282  0354  082D               	movf	?___lwmod,w
  2283  0355  3E30               	addlw	48
  2284  0356  00B9               	movwf	??_printf+2
  2285  0357  0839               	movf	??_printf+2,w
  2286  0358  00C2               	movwf	printf@c
  2287                           
  2288                           ;doprnt.c: 1532: }
  2289                           ;doprnt.c: 1533: (putch(c) );
  2290  0359  0842               	movf	printf@c,w
  2291  035A  318F  275E  3182   	fcall	_putch
  2292  035D  2B24               	goto	l1738
  2293  035E                     l525:	
  2294                           ;doprnt.c: 1549: return 0;
  2295                           ;	Return value of _printf is never used
  2296                           
  2297                           ;doprnt.c: 1534: }
  2298                           ;doprnt.c: 1542: }
  2299                           ;doprnt.c: 1544: alldone:
  2300                           
  2301  035E  0008               	return
  2302  035F                     __end_of_printf:	
  2303                           
  2304                           	psect	text7
  2305  0F5E                     __ptext7:	
  2306 ;; *************** function _putch *****************
  2307 ;; Defined at:
  2308 ;;		line 608 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  byte            1    wreg     unsigned char 
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;  byte            1    5[BANK0 ] unsigned char 
  2313 ;; Return value:  Size  Location     Type
  2314 ;;		None               void
  2315 ;; Registers used:
  2316 ;;		wreg
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2322 ;;      Params:         0       0       0       0       0       0       0       0
  2323 ;;      Locals:         0       1       0       0       0       0       0       0
  2324 ;;      Temps:          0       0       0       0       0       0       0       0
  2325 ;;      Totals:         0       1       0       0       0       0       0       0
  2326 ;;Total ram usage:        1 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    4
  2329 ;; This function calls:
  2330 ;;		Nothing
  2331 ;; This function is called by:
  2332 ;;		_printf
  2333 ;;		_getche
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function _putch
  2339  0F5E                     _putch:	
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in _putch: [wreg]
  2343                           ;putch@byte stored from wreg
  2344  0F5E  0020               	movlb	0	; select bank0
  2345  0F5F  00A5               	movwf	putch@byte
  2346  0F60                     l351:	
  2347                           ;MCU_16f1516_B1.c: 612: continue;
  2348                           
  2349                           ;MCU_16f1516_B1.c: 611: while(!TXIF)
  2350                           
  2351  0F60  1E11               	btfss	17,4	;volatile
  2352  0F61  2F60               	goto	l351
  2353                           
  2354                           ;MCU_16f1516_B1.c: 613: TXREG = byte;
  2355  0F62  0825               	movf	putch@byte,w
  2356  0F63  0023               	movlb	3	; select bank3
  2357  0F64  009A               	movwf	26	;volatile
  2358  0F65  0008               	return
  2359  0F66                     __end_of_putch:	
  2360                           
  2361                           	psect	text8
  2362  0738                     __ptext8:	
  2363 ;; *************** function ___lwmod *****************
  2364 ;; Defined at:
  2365 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;  divisor         2   13[BANK0 ] unsigned int 
  2368 ;;  dividend        2   15[BANK0 ] unsigned int 
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  counter         1   18[BANK0 ] unsigned char 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  2   13[BANK0 ] unsigned int 
  2373 ;; Registers used:
  2374 ;;		wreg, status,2, status,0
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2380 ;;      Params:         0       4       0       0       0       0       0       0
  2381 ;;      Locals:         0       1       0       0       0       0       0       0
  2382 ;;      Temps:          0       1       0       0       0       0       0       0
  2383 ;;      Totals:         0       6       0       0       0       0       0       0
  2384 ;;Total ram usage:        6 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    4
  2387 ;; This function calls:
  2388 ;;		Nothing
  2389 ;; This function is called by:
  2390 ;;		_printf
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           
  2395                           ;psect for function ___lwmod
  2396  0738                     ___lwmod:	
  2397                           
  2398                           ;incstack = 0
  2399                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2400  0738  0020               	movlb	0	; select bank0
  2401  0739  082E               	movf	___lwmod@divisor+1,w
  2402  073A  042D               	iorwf	___lwmod@divisor,w
  2403  073B  1903               	skipnz
  2404  073C  2F60               	goto	l1690
  2405  073D  01B2               	clrf	___lwmod@counter
  2406  073E  0AB2               	incf	___lwmod@counter,f
  2407  073F                     l1680:	
  2408  073F  1BAE               	btfsc	___lwmod@divisor+1,7
  2409  0740  2F4B               	goto	l1682
  2410  0741  3001               	movlw	1
  2411  0742                     u1695:	
  2412  0742  35AD               	lslf	___lwmod@divisor,f
  2413  0743  0DAE               	rlf	___lwmod@divisor+1,f
  2414  0744  0B89               	decfsz	9,f
  2415  0745  2F42               	goto	u1695
  2416  0746  3001               	movlw	1
  2417  0747  00B1               	movwf	??___lwmod
  2418  0748  0831               	movf	??___lwmod,w
  2419  0749  07B2               	addwf	___lwmod@counter,f
  2420  074A  2F3F               	goto	l1680
  2421  074B                     l1682:	
  2422  074B  082E               	movf	___lwmod@divisor+1,w
  2423  074C  0230               	subwf	___lwmod@dividend+1,w
  2424  074D  1D03               	skipz
  2425  074E  2F51               	goto	u1715
  2426  074F  082D               	movf	___lwmod@divisor,w
  2427  0750  022F               	subwf	___lwmod@dividend,w
  2428  0751                     u1715:	
  2429  0751  1C03               	skipc
  2430  0752  2F57               	goto	l1686
  2431  0753  082D               	movf	___lwmod@divisor,w
  2432  0754  02AF               	subwf	___lwmod@dividend,f
  2433  0755  082E               	movf	___lwmod@divisor+1,w
  2434  0756  3BB0               	subwfb	___lwmod@dividend+1,f
  2435  0757                     l1686:	
  2436  0757  3001               	movlw	1
  2437  0758                     u1725:	
  2438  0758  36AE               	lsrf	___lwmod@divisor+1,f
  2439  0759  0CAD               	rrf	___lwmod@divisor,f
  2440  075A  0B89               	decfsz	9,f
  2441  075B  2F58               	goto	u1725
  2442  075C  3001               	movlw	1
  2443  075D  02B2               	subwf	___lwmod@counter,f
  2444  075E  1D03               	btfss	3,2
  2445  075F  2F4B               	goto	l1682
  2446  0760                     l1690:	
  2447  0760  0830               	movf	___lwmod@dividend+1,w
  2448  0761  01AE               	clrf	?___lwmod+1
  2449  0762  07AE               	addwf	?___lwmod+1,f
  2450  0763  082F               	movf	___lwmod@dividend,w
  2451  0764  01AD               	clrf	?___lwmod
  2452  0765  07AD               	addwf	?___lwmod,f
  2453  0766  0008               	return
  2454  0767                     __end_of___lwmod:	
  2455                           
  2456                           	psect	text9
  2457  069C                     __ptext9:	
  2458 ;; *************** function ___lwdiv *****************
  2459 ;; Defined at:
  2460 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;  divisor         2    5[BANK0 ] unsigned int 
  2463 ;;  dividend        2    7[BANK0 ] unsigned int 
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  quotient        2   10[BANK0 ] unsigned int 
  2466 ;;  counter         1   12[BANK0 ] unsigned char 
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  2    5[BANK0 ] unsigned int 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2476 ;;      Params:         0       4       0       0       0       0       0       0
  2477 ;;      Locals:         0       3       0       0       0       0       0       0
  2478 ;;      Temps:          0       1       0       0       0       0       0       0
  2479 ;;      Totals:         0       8       0       0       0       0       0       0
  2480 ;;Total ram usage:        8 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    4
  2483 ;; This function calls:
  2484 ;;		Nothing
  2485 ;; This function is called by:
  2486 ;;		_printf
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           
  2491                           ;psect for function ___lwdiv
  2492  069C                     ___lwdiv:	
  2493                           
  2494                           ;incstack = 0
  2495                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2496  069C  0020               	movlb	0	; select bank0
  2497  069D  01AA               	clrf	___lwdiv@quotient
  2498  069E  01AB               	clrf	___lwdiv@quotient+1
  2499  069F  0826               	movf	___lwdiv@divisor+1,w
  2500  06A0  0425               	iorwf	___lwdiv@divisor,w
  2501  06A1  1903               	skipnz
  2502  06A2  2ECC               	goto	l1668
  2503  06A3  01AC               	clrf	___lwdiv@counter
  2504  06A4  0AAC               	incf	___lwdiv@counter,f
  2505  06A5                     l1656:	
  2506  06A5  1BA6               	btfsc	___lwdiv@divisor+1,7
  2507  06A6  2EB1               	goto	l1658
  2508  06A7  3001               	movlw	1
  2509  06A8                     u1625:	
  2510  06A8  35A5               	lslf	___lwdiv@divisor,f
  2511  06A9  0DA6               	rlf	___lwdiv@divisor+1,f
  2512  06AA  0B89               	decfsz	9,f
  2513  06AB  2EA8               	goto	u1625
  2514  06AC  3001               	movlw	1
  2515  06AD  00A9               	movwf	??___lwdiv
  2516  06AE  0829               	movf	??___lwdiv,w
  2517  06AF  07AC               	addwf	___lwdiv@counter,f
  2518  06B0  2EA5               	goto	l1656
  2519  06B1                     l1658:	
  2520  06B1  3001               	movlw	1
  2521  06B2                     u1645:	
  2522  06B2  35AA               	lslf	___lwdiv@quotient,f
  2523  06B3  0DAB               	rlf	___lwdiv@quotient+1,f
  2524  06B4  0B89               	decfsz	9,f
  2525  06B5  2EB2               	goto	u1645
  2526  06B6  0826               	movf	___lwdiv@divisor+1,w
  2527  06B7  0228               	subwf	___lwdiv@dividend+1,w
  2528  06B8  1D03               	skipz
  2529  06B9  2EBC               	goto	u1655
  2530  06BA  0825               	movf	___lwdiv@divisor,w
  2531  06BB  0227               	subwf	___lwdiv@dividend,w
  2532  06BC                     u1655:	
  2533  06BC  1C03               	skipc
  2534  06BD  2EC3               	goto	l1664
  2535  06BE  0825               	movf	___lwdiv@divisor,w
  2536  06BF  02A7               	subwf	___lwdiv@dividend,f
  2537  06C0  0826               	movf	___lwdiv@divisor+1,w
  2538  06C1  3BA8               	subwfb	___lwdiv@dividend+1,f
  2539  06C2  142A               	bsf	___lwdiv@quotient,0
  2540  06C3                     l1664:	
  2541  06C3  3001               	movlw	1
  2542  06C4                     u1665:	
  2543  06C4  36A6               	lsrf	___lwdiv@divisor+1,f
  2544  06C5  0CA5               	rrf	___lwdiv@divisor,f
  2545  06C6  0B89               	decfsz	9,f
  2546  06C7  2EC4               	goto	u1665
  2547  06C8  3001               	movlw	1
  2548  06C9  02AC               	subwf	___lwdiv@counter,f
  2549  06CA  1D03               	btfss	3,2
  2550  06CB  2EB1               	goto	l1658
  2551  06CC                     l1668:	
  2552  06CC  082B               	movf	___lwdiv@quotient+1,w
  2553  06CD  01A6               	clrf	?___lwdiv+1
  2554  06CE  07A6               	addwf	?___lwdiv+1,f
  2555  06CF  082A               	movf	___lwdiv@quotient,w
  2556  06D0  01A5               	clrf	?___lwdiv
  2557  06D1  07A5               	addwf	?___lwdiv,f
  2558  06D2  0008               	return
  2559  06D3                     __end_of___lwdiv:	
  2560                           
  2561                           	psect	text10
  2562  0707                     __ptext10:	
  2563 ;; *************** function _UART_Receive *****************
  2564 ;; Defined at:
  2565 ;;		line 569 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;		None
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  i               1    8[BANK0 ] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;		None               void
  2572 ;; Registers used:
  2573 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2579 ;;      Params:         0       0       0       0       0       0       0       0
  2580 ;;      Locals:         0       1       0       0       0       0       0       0
  2581 ;;      Temps:          0       3       0       0       0       0       0       0
  2582 ;;      Totals:         0       4       0       0       0       0       0       0
  2583 ;;Total ram usage:        4 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    4
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_UART_Main
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           
  2594                           ;psect for function _UART_Receive
  2595  0707                     _UART_Receive:	
  2596                           
  2597                           ;MCU_16f1516_B1.c: 571: char i;
  2598                           ;MCU_16f1516_B1.c: 572: RA1=~RA1;
  2599                           
  2600                           ;incstack = 0
  2601                           ; Regs used in _UART_Receive: [wreg+fsr1l+fsr1h+status,2+status,0]
  2602  0707  3002               	movlw	2
  2603  0708  0020               	movlb	0	; select bank0
  2604  0709  068C               	xorwf	12,f
  2605                           
  2606                           ;MCU_16f1516_B1.c: 574: TMain->Test=1;
  2607  070A  085F               	movf	_TMain,w
  2608  070B  3E0C               	addlw	12
  2609  070C  0086               	movwf	6
  2610  070D  0187               	clrf	7
  2611  070E  0181               	clrf	1
  2612  070F  0A81               	incf	1,f
  2613                           
  2614                           ;MCU_16f1516_B1.c: 576: for(i=0;i<32;i++)
  2615  0710  01A8               	clrf	UART_Receive@i
  2616  0711  3020               	movlw	32
  2617  0712  0228               	subwf	UART_Receive@i,w
  2618  0713  1803               	btfsc	3,0
  2619  0714  2F31               	goto	l2062
  2620  0715                     l2056:	
  2621                           
  2622                           ;MCU_16f1516_B1.c: 577: {
  2623                           ;MCU_16f1516_B1.c: 578: I2C->BufferWriter[i]=UART->RxData[i];
  2624  0715  0828               	movf	UART_Receive@i,w
  2625  0716  3E20               	addlw	32
  2626  0717  0749               	addwf	_UART,w
  2627  0718  00A5               	movwf	??_UART_Receive
  2628  0719  0825               	movf	??_UART_Receive,w
  2629  071A  0086               	movwf	6
  2630  071B  3001               	movlw	1	; select bank2/3
  2631  071C  0087               	movwf	7
  2632  071D  0801               	movf	1,w
  2633  071E  00A6               	movwf	??_UART_Receive+1
  2634  071F  0828               	movf	UART_Receive@i,w
  2635  0720  3E20               	addlw	32
  2636  0721  075C               	addwf	_I2C,w
  2637  0722  00A7               	movwf	??_UART_Receive+2
  2638  0723  0827               	movf	??_UART_Receive+2,w
  2639  0724  0086               	movwf	6
  2640  0725  3001               	movlw	1	; select bank2/3
  2641  0726  0087               	movwf	7
  2642  0727  0826               	movf	??_UART_Receive+1,w
  2643  0728  0081               	movwf	1
  2644  0729  3001               	movlw	1
  2645  072A  00A5               	movwf	??_UART_Receive
  2646  072B  0825               	movf	??_UART_Receive,w
  2647  072C  07A8               	addwf	UART_Receive@i,f
  2648  072D  3020               	movlw	32
  2649  072E  0228               	subwf	UART_Receive@i,w
  2650  072F  1C03               	skipc
  2651  0730  2F15               	goto	l2056
  2652  0731                     l2062:	
  2653                           
  2654                           ;MCU_16f1516_B1.c: 579: }
  2655                           ;MCU_16f1516_B1.c: 580: I2C->MasterTxGO=1;
  2656  0731  085C               	movf	_I2C,w
  2657  0732  3E42               	addlw	66
  2658  0733  0086               	movwf	6
  2659  0734  3001               	movlw	1	; select bank2/3
  2660  0735  0087               	movwf	7
  2661  0736  1581               	bsf	1,3
  2662  0737  0008               	return
  2663  0738                     __end_of_UART_Receive:	
  2664                           
  2665                           	psect	text11
  2666  035F                     __ptext11:	
  2667 ;; *************** function _SegmentDisplay_Main *****************
  2668 ;; Defined at:
  2669 ;;		line 72 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;		None
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;		None               void
  2676 ;; Registers used:
  2677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2683 ;;      Params:         0       0       0       0       0       0       0       0
  2684 ;;      Locals:         0       0       0       0       0       0       0       0
  2685 ;;      Temps:          0       2       0       0       0       0       0       0
  2686 ;;      Totals:         0       2       0       0       0       0       0       0
  2687 ;;Total ram usage:        2 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    4
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_main
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           
  2698                           ;psect for function _SegmentDisplay_Main
  2699  035F                     _SegmentDisplay_Main:	
  2700                           
  2701                           ;SegmentDisplay_A2.c: 74: if(Segment->GO)
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in _SegmentDisplay_Main: [wreg-fsr1h+status,2+status,0]
  2705  035F  0020               	movlb	0	; select bank0
  2706  0360  085D               	movf	_Segment,w
  2707  0361  3E15               	addlw	21
  2708  0362  0086               	movwf	6
  2709  0363  0187               	clrf	7
  2710  0364  1C81               	btfss	1,1
  2711  0365  0008               	return
  2712                           
  2713                           ;SegmentDisplay_A2.c: 75: {
  2714                           ;SegmentDisplay_A2.c: 76: Segment->Time++;
  2715  0366  3001               	movlw	1
  2716  0367  00A5               	movwf	??_SegmentDisplay_Main
  2717  0368  085D               	movf	_Segment,w
  2718  0369  3E19               	addlw	25
  2719  036A  0086               	movwf	6
  2720  036B  0187               	clrf	7
  2721  036C  0825               	movf	??_SegmentDisplay_Main,w
  2722  036D  0781               	addwf	1,f
  2723                           
  2724                           ;SegmentDisplay_A2.c: 77: if(Segment->Time == 5)
  2725  036E  085D               	movf	_Segment,w
  2726  036F  3E19               	addlw	25
  2727  0370  0086               	movwf	6
  2728  0371  0187               	clrf	7
  2729  0372  0801               	movf	1,w
  2730  0373  3A05               	xorlw	5
  2731  0374  1D03               	skipz
  2732  0375  0008               	return
  2733                           
  2734                           ;SegmentDisplay_A2.c: 78: {
  2735                           ;SegmentDisplay_A2.c: 79: Segment->Time=0;
  2736  0376  085D               	movf	_Segment,w
  2737  0377  3E19               	addlw	25
  2738  0378  0086               	movwf	6
  2739  0379  0187               	clrf	7
  2740  037A  0181               	clrf	1
  2741                           
  2742                           ;SegmentDisplay_A2.c: 80: PORTA&=0x0f;
  2743  037B  300F               	movlw	15
  2744  037C  00A5               	movwf	??_SegmentDisplay_Main
  2745  037D  0825               	movf	??_SegmentDisplay_Main,w
  2746  037E  058C               	andwf	12,f	;volatile
  2747                           
  2748                           ;SegmentDisplay_A2.c: 81: if(Segment->ComCount == 0)
  2749  037F  085D               	movf	_Segment,w
  2750  0380  3E16               	addlw	22
  2751  0381  0086               	movwf	6
  2752  0382  0187               	clrf	7
  2753  0383  0881               	movf	1,f
  2754  0384  1D03               	skipz
  2755  0385  2B88               	goto	l2284
  2756                           
  2757                           ;SegmentDisplay_A2.c: 82: {
  2758                           ;SegmentDisplay_A2.c: 83: RA4=1;
  2759  0386  160C               	bsf	12,4	;volatile
  2760                           
  2761                           ;SegmentDisplay_A2.c: 84: }
  2762  0387  2BA4               	goto	l2296
  2763  0388                     l2284:	
  2764                           
  2765                           ;SegmentDisplay_A2.c: 85: else if(Segment->ComCount == 1)
  2766  0388  085D               	movf	_Segment,w
  2767  0389  3E16               	addlw	22
  2768  038A  0086               	movwf	6
  2769  038B  0187               	clrf	7
  2770  038C  0801               	movf	1,w
  2771  038D  3A01               	xorlw	1
  2772  038E  1D03               	skipz
  2773  038F  2B92               	goto	l2288
  2774                           
  2775                           ;SegmentDisplay_A2.c: 86: {
  2776                           ;SegmentDisplay_A2.c: 87: RA5=1;
  2777  0390  168C               	bsf	12,5	;volatile
  2778                           
  2779                           ;SegmentDisplay_A2.c: 88: }
  2780  0391  2BA4               	goto	l2296
  2781  0392                     l2288:	
  2782                           
  2783                           ;SegmentDisplay_A2.c: 89: else if(Segment->ComCount == 2)
  2784  0392  085D               	movf	_Segment,w
  2785  0393  3E16               	addlw	22
  2786  0394  0086               	movwf	6
  2787  0395  0187               	clrf	7
  2788  0396  0801               	movf	1,w
  2789  0397  3A02               	xorlw	2
  2790  0398  1D03               	skipz
  2791  0399  2B9C               	goto	l2292
  2792                           
  2793                           ;SegmentDisplay_A2.c: 90: {
  2794                           ;SegmentDisplay_A2.c: 91: RA6=1;
  2795  039A  170C               	bsf	12,6	;volatile
  2796                           
  2797                           ;SegmentDisplay_A2.c: 92: }
  2798  039B  2BA4               	goto	l2296
  2799  039C                     l2292:	
  2800                           
  2801                           ;SegmentDisplay_A2.c: 93: else if(Segment->ComCount == 3)
  2802  039C  085D               	movf	_Segment,w
  2803  039D  3E16               	addlw	22
  2804  039E  0086               	movwf	6
  2805  039F  0187               	clrf	7
  2806  03A0  0801               	movf	1,w
  2807  03A1  3A03               	xorlw	3
  2808  03A2  1903               	btfsc	3,2
  2809                           
  2810                           ;SegmentDisplay_A2.c: 94: {
  2811                           ;SegmentDisplay_A2.c: 95: RA7=1;
  2812  03A3  178C               	bsf	12,7	;volatile
  2813  03A4                     l2296:	
  2814                           
  2815                           ;SegmentDisplay_A2.c: 96: }
  2816                           ;SegmentDisplay_A2.c: 97: PORTB=Segment->Display[Segment->Num[Segment->ComCount]];
  2817  03A4  085D               	movf	_Segment,w
  2818  03A5  3E16               	addlw	22
  2819  03A6  0086               	movwf	6
  2820  03A7  0187               	clrf	7
  2821  03A8  0801               	movf	1,w
  2822  03A9  3E11               	addlw	17
  2823  03AA  075D               	addwf	_Segment,w
  2824  03AB  00A5               	movwf	??_SegmentDisplay_Main
  2825  03AC  0825               	movf	??_SegmentDisplay_Main,w
  2826  03AD  0086               	movwf	6
  2827  03AE  0187               	clrf	7
  2828  03AF  0801               	movf	1,w
  2829  03B0  075D               	addwf	_Segment,w
  2830  03B1  00A6               	movwf	??_SegmentDisplay_Main+1
  2831  03B2  0826               	movf	??_SegmentDisplay_Main+1,w
  2832  03B3  0086               	movwf	6
  2833  03B4  0187               	clrf	7
  2834  03B5  0801               	movf	1,w
  2835  03B6  008D               	movwf	13	;volatile
  2836                           
  2837                           ;SegmentDisplay_A2.c: 98: if(Segment->ComCount < Segment->DisplayCount)
  2838  03B7  085D               	movf	_Segment,w
  2839  03B8  3E16               	addlw	22
  2840  03B9  0086               	movwf	6
  2841  03BA  0187               	clrf	7
  2842  03BB  085D               	movf	_Segment,w
  2843  03BC  3E17               	addlw	23
  2844  03BD  0084               	movwf	4
  2845  03BE  0185               	clrf	5
  2846  03BF  0800               	movf	0,w
  2847  03C0  0201               	subwf	1,w
  2848  03C1  1803               	skipnc
  2849  03C2  2BCC               	goto	l2302
  2850                           
  2851                           ;SegmentDisplay_A2.c: 99: {
  2852                           ;SegmentDisplay_A2.c: 100: Segment->ComCount++;
  2853  03C3  3001               	movlw	1
  2854  03C4  00A5               	movwf	??_SegmentDisplay_Main
  2855  03C5  085D               	movf	_Segment,w
  2856  03C6  3E16               	addlw	22
  2857  03C7  0086               	movwf	6
  2858  03C8  0187               	clrf	7
  2859  03C9  0825               	movf	??_SegmentDisplay_Main,w
  2860  03CA  0781               	addwf	1,f
  2861                           
  2862                           ;SegmentDisplay_A2.c: 101: }
  2863  03CB  0008               	return
  2864  03CC                     l2302:	
  2865                           
  2866                           ;SegmentDisplay_A2.c: 102: else
  2867                           ;SegmentDisplay_A2.c: 103: {
  2868                           ;SegmentDisplay_A2.c: 104: Segment->ComCount=0;
  2869  03CC  085D               	movf	_Segment,w
  2870  03CD  3E16               	addlw	22
  2871  03CE  0086               	movwf	6
  2872  03CF  0187               	clrf	7
  2873  03D0  0181               	clrf	1
  2874  03D1  0008               	return
  2875  03D2                     __end_of_SegmentDisplay_Main:	
  2876                           
  2877                           	psect	text12
  2878  0FA3                     __ptext12:	
  2879 ;; *************** function _SegmentDisplay_Initial *****************
  2880 ;; Defined at:
  2881 ;;		line 8 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;		None
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;		None
  2886 ;; Return value:  Size  Location     Type
  2887 ;;		None               void
  2888 ;; Registers used:
  2889 ;;		wreg, fsr1l, fsr1h
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2895 ;;      Params:         0       0       0       0       0       0       0       0
  2896 ;;      Locals:         0       0       0       0       0       0       0       0
  2897 ;;      Temps:          0       1       0       0       0       0       0       0
  2898 ;;      Totals:         0       1       0       0       0       0       0       0
  2899 ;;Total ram usage:        1 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    4
  2902 ;; This function calls:
  2903 ;;		Nothing
  2904 ;; This function is called by:
  2905 ;;		_main
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           
  2910                           ;psect for function _SegmentDisplay_Initial
  2911  0FA3                     _SegmentDisplay_Initial:	
  2912                           
  2913                           ;SegmentDisplay_A2.c: 10: Segment=&VarSegment;
  2914                           
  2915                           ;incstack = 0
  2916                           ; Regs used in _SegmentDisplay_Initial: [wregfsr1]
  2917  0FA3  30C0               	movlw	_VarSegment& (0+255)
  2918  0FA4  0020               	movlb	0	; select bank0
  2919  0FA5  00A5               	movwf	??_SegmentDisplay_Initial
  2920  0FA6  0825               	movf	??_SegmentDisplay_Initial,w
  2921  0FA7  00DD               	movwf	_Segment
  2922                           
  2923                           ;SegmentDisplay_A2.c: 11: Segment->Enable=1;
  2924  0FA8  085D               	movf	_Segment,w
  2925  0FA9  3E15               	addlw	21
  2926  0FAA  0086               	movwf	6
  2927  0FAB  0187               	clrf	7
  2928  0FAC  1401               	bsf	1,0
  2929                           
  2930                           ;SegmentDisplay_A2.c: 13: Segment->Dec=1;
  2931  0FAD  085D               	movf	_Segment,w
  2932  0FAE  3E15               	addlw	21
  2933  0FAF  0086               	movwf	6
  2934  0FB0  0187               	clrf	7
  2935  0FB1  1581               	bsf	1,3
  2936  0FB2  0008               	return
  2937  0FB3                     __end_of_SegmentDisplay_Initial:	
  2938                           
  2939                           	psect	text13
  2940  0FB3                     __ptext13:	
  2941 ;; *************** function _Mcu_Initial *****************
  2942 ;; Defined at:
  2943 ;;		line 11 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;		None               void
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0, pclath, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2957 ;;      Params:         0       0       0       0       0       0       0       0
  2958 ;;      Locals:         0       0       0       0       0       0       0       0
  2959 ;;      Temps:          0       0       0       0       0       0       0       0
  2960 ;;      Totals:         0       0       0       0       0       0       0       0
  2961 ;;Total ram usage:        0 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:    5
  2964 ;; This function calls:
  2965 ;;		_I2C_Set
  2966 ;;		_IO_Set
  2967 ;;		_TMR1_Set
  2968 ;;		_UART_Set
  2969 ;; This function is called by:
  2970 ;;		_main
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function _Mcu_Initial
  2976  0FB3                     _Mcu_Initial:	
  2977                           
  2978                           ;MCU_16f1516_B1.c: 14: OSCCON=0x78; ;;
  2979                           
  2980                           ;incstack = 0
  2981                           ; Regs used in _Mcu_Initial: [wreg+status,2+status,0+pclath+cstack]
  2982  0FB3  3078               	movlw	120
  2983  0FB4  0021               	movlb	1	; select bank1
  2984  0FB5  0099               	movwf	25	;volatile
  2985                           
  2986                           ;MCU_16f1516_B1.c: 16: IO_Set();
  2987  0FB6  318F  27C6  318F   	fcall	_IO_Set
  2988                           
  2989                           ;MCU_16f1516_B1.c: 18: __nop();
  2990  0FB9  0000               	nop
  2991                           
  2992                           ;MCU_16f1516_B1.c: 20: TMR1_Set();
  2993  0FBA  318F  2793  318F   	fcall	_TMR1_Set
  2994                           
  2995                           ;MCU_16f1516_B1.c: 22: __nop();
  2996  0FBD  0000               	nop
  2997                           
  2998                           ;MCU_16f1516_B1.c: 26: __nop();
  2999  0FBE  0000               	nop
  3000                           
  3001                           ;MCU_16f1516_B1.c: 28: __nop();
  3002  0FBF  0000               	nop
  3003                           
  3004                           ;MCU_16f1516_B1.c: 30: I2C_Set();
  3005  0FC0  318F  2766  318F   	fcall	_I2C_Set
  3006                           
  3007                           ;MCU_16f1516_B1.c: 32: UART_Set();
  3008  0FC3  3187  27E0         	fcall	_UART_Set
  3009  0FC5  0008               	return
  3010  0FC6                     __end_of_Mcu_Initial:	
  3011                           
  3012                           	psect	text14
  3013  07E0                     __ptext14:	
  3014 ;; *************** function _UART_Set *****************
  3015 ;; Defined at:
  3016 ;;		line 498 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;		None               void
  3023 ;; Registers used:
  3024 ;;		wreg, status,2
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3030 ;;      Params:         0       0       0       0       0       0       0       0
  3031 ;;      Locals:         0       0       0       0       0       0       0       0
  3032 ;;      Temps:          0       1       0       0       0       0       0       0
  3033 ;;      Totals:         0       1       0       0       0       0       0       0
  3034 ;;Total ram usage:        1 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    4
  3037 ;; This function calls:
  3038 ;;		Nothing
  3039 ;; This function is called by:
  3040 ;;		_Mcu_Initial
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           
  3045                           ;psect for function _UART_Set
  3046  07E0                     _UART_Set:	
  3047                           
  3048                           ;MCU_16f1516_B1.c: 500: UART=&VarUart;
  3049                           
  3050                           ;incstack = 0
  3051                           ; Regs used in _UART_Set: [wreg+status,2]
  3052  07E0  3020               	movlw	_VarUart& (0+255)
  3053  07E1  0020               	movlb	0	; select bank0
  3054  07E2  00A5               	movwf	??_UART_Set
  3055  07E3  0825               	movf	??_UART_Set,w
  3056  07E4  00C9               	movwf	_UART
  3057                           
  3058                           ;MCU_16f1516_B1.c: 501: TRISC7 = 1;
  3059  07E5  0021               	movlb	1	; select bank1
  3060  07E6  178E               	bsf	14,7	;volatile
  3061                           
  3062                           ;MCU_16f1516_B1.c: 502: TRISC6 = 1;
  3063  07E7  170E               	bsf	14,6	;volatile
  3064                           
  3065                           ;MCU_16f1516_B1.c: 503: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  3066  07E8  3033               	movlw	51
  3067  07E9  0023               	movlb	3	; select bank3
  3068  07EA  009B               	movwf	27	;volatile
  3069                           
  3070                           ;MCU_16f1516_B1.c: 504: SPBRGH = 0;
  3071  07EB  019C               	clrf	28	;volatile
  3072                           
  3073                           ;MCU_16f1516_B1.c: 505: BRG16 = 0;
  3074  07EC  119F               	bcf	31,3	;volatile
  3075                           
  3076                           ;MCU_16f1516_B1.c: 506: RCSTA = (0|0x90);
  3077  07ED  3090               	movlw	144
  3078  07EE  009D               	movwf	29	;volatile
  3079                           
  3080                           ;MCU_16f1516_B1.c: 507: TXSTA = (0x4|0|0x20);
  3081  07EF  3024               	movlw	36
  3082  07F0  009E               	movwf	30	;volatile
  3083                           
  3084                           ;MCU_16f1516_B1.c: 508: TX9=0;
  3085  07F1  131E               	bcf	30,6	;volatile
  3086                           
  3087                           ;MCU_16f1516_B1.c: 509: RX9=0;
  3088  07F2  131D               	bcf	29,6	;volatile
  3089                           
  3090                           ;MCU_16f1516_B1.c: 510: TXIE=0;
  3091  07F3  0021               	movlb	1	; select bank1
  3092  07F4  1211               	bcf	17,4	;volatile
  3093                           
  3094                           ;MCU_16f1516_B1.c: 511: RCIE=1;
  3095  07F5  1691               	bsf	17,5	;volatile
  3096                           
  3097                           ;MCU_16f1516_B1.c: 512: PEIE=1;
  3098  07F6  170B               	bsf	11,6	;volatile
  3099                           
  3100                           ;MCU_16f1516_B1.c: 513: GIE=1;
  3101  07F7  178B               	bsf	11,7	;volatile
  3102  07F8  0008               	return
  3103  07F9                     __end_of_UART_Set:	
  3104                           
  3105                           	psect	text15
  3106  0F93                     __ptext15:	
  3107 ;; *************** function _TMR1_Set *****************
  3108 ;; Defined at:
  3109 ;;		line 114 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;		None
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;		None
  3114 ;; Return value:  Size  Location     Type
  3115 ;;		None               void
  3116 ;; Registers used:
  3117 ;;		wreg
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3123 ;;      Params:         0       0       0       0       0       0       0       0
  3124 ;;      Locals:         0       0       0       0       0       0       0       0
  3125 ;;      Temps:          0       1       0       0       0       0       0       0
  3126 ;;      Totals:         0       1       0       0       0       0       0       0
  3127 ;;Total ram usage:        1 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    4
  3130 ;; This function calls:
  3131 ;;		Nothing
  3132 ;; This function is called by:
  3133 ;;		_Mcu_Initial
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           
  3138                           ;psect for function _TMR1_Set
  3139  0F93                     _TMR1_Set:	
  3140                           
  3141                           ;MCU_16f1516_B1.c: 116: Timer1=&VarTimer1;
  3142                           
  3143                           ;incstack = 0
  3144                           ; Regs used in _TMR1_Set: [wreg]
  3145  0F93  3059               	movlw	_VarTimer1& (0+255)
  3146  0F94  0020               	movlb	0	; select bank0
  3147  0F95  00A5               	movwf	??_TMR1_Set
  3148  0F96  0825               	movf	??_TMR1_Set,w
  3149  0F97  00C8               	movwf	_Timer1
  3150                           
  3151                           ;MCU_16f1516_B1.c: 117: T1CON=(0x40 | 0x00 | 0x01);
  3152  0F98  3041               	movlw	65
  3153  0F99  0098               	movwf	24	;volatile
  3154                           
  3155                           ;MCU_16f1516_B1.c: 118: TMR1H=((65536-700)/256);
  3156  0F9A  30FD               	movlw	253
  3157  0F9B  0097               	movwf	23	;volatile
  3158                           
  3159                           ;MCU_16f1516_B1.c: 119: TMR1L=((65536-700)%256);
  3160  0F9C  3044               	movlw	68
  3161  0F9D  0096               	movwf	22	;volatile
  3162                           
  3163                           ;MCU_16f1516_B1.c: 120: TMR1IE=1;
  3164  0F9E  0021               	movlb	1	; select bank1
  3165  0F9F  1411               	bsf	17,0	;volatile
  3166                           
  3167                           ;MCU_16f1516_B1.c: 121: PEIE=1;
  3168  0FA0  170B               	bsf	11,6	;volatile
  3169                           
  3170                           ;MCU_16f1516_B1.c: 122: GIE=1;
  3171  0FA1  178B               	bsf	11,7	;volatile
  3172  0FA2  0008               	return
  3173  0FA3                     __end_of_TMR1_Set:	
  3174                           
  3175                           	psect	text16
  3176  0FC6                     __ptext16:	
  3177 ;; *************** function _IO_Set *****************
  3178 ;; Defined at:
  3179 ;;		line 37 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;		None               void
  3186 ;; Registers used:
  3187 ;;		wreg, status,2
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3193 ;;      Params:         0       0       0       0       0       0       0       0
  3194 ;;      Locals:         0       0       0       0       0       0       0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0       0
  3196 ;;      Totals:         0       0       0       0       0       0       0       0
  3197 ;;Total ram usage:        0 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    4
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_Mcu_Initial
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           
  3208                           ;psect for function _IO_Set
  3209  0FC6                     _IO_Set:	
  3210                           
  3211                           ;MCU_16f1516_B1.c: 39: TRISA=0b00001001;;
  3212                           
  3213                           ;incstack = 0
  3214                           ; Regs used in _IO_Set: [wreg+status,2]
  3215  0FC6  3009               	movlw	9
  3216  0FC7  0021               	movlb	1	; select bank1
  3217  0FC8  008C               	movwf	12	;volatile
  3218                           
  3219                           ;MCU_16f1516_B1.c: 40: TRISB=0b00000000;;
  3220  0FC9  018D               	clrf	13	;volatile
  3221                           
  3222                           ;MCU_16f1516_B1.c: 41: TRISC=0b00011001;;
  3223  0FCA  3019               	movlw	25
  3224  0FCB  008E               	movwf	14	;volatile
  3225                           
  3226                           ;MCU_16f1516_B1.c: 42: LATA=0b00000000;;
  3227  0FCC  0022               	movlb	2	; select bank2
  3228  0FCD  018C               	clrf	12	;volatile
  3229                           
  3230                           ;MCU_16f1516_B1.c: 43: LATB=0b00000000;;
  3231  0FCE  018D               	clrf	13	;volatile
  3232                           
  3233                           ;MCU_16f1516_B1.c: 44: LATC=0b00000000;;
  3234  0FCF  018E               	clrf	14	;volatile
  3235                           
  3236                           ;MCU_16f1516_B1.c: 45: ANSELA=0b00000001;;
  3237  0FD0  3001               	movlw	1
  3238  0FD1  0023               	movlb	3	; select bank3
  3239  0FD2  008C               	movwf	12	;volatile
  3240                           
  3241                           ;MCU_16f1516_B1.c: 46: ANSELB=0b00000000;;
  3242  0FD3  018D               	clrf	13	;volatile
  3243                           
  3244                           ;MCU_16f1516_B1.c: 47: ANSELC=0b00000000;;
  3245  0FD4  018E               	clrf	14	;volatile
  3246                           
  3247                           ;MCU_16f1516_B1.c: 48: PORTA=0b00001001;;
  3248  0FD5  3009               	movlw	9
  3249  0FD6  0020               	movlb	0	; select bank0
  3250  0FD7  008C               	movwf	12	;volatile
  3251                           
  3252                           ;MCU_16f1516_B1.c: 49: PORTB=0b00000000;;
  3253  0FD8  018D               	clrf	13	;volatile
  3254                           
  3255                           ;MCU_16f1516_B1.c: 50: PORTC=0b00011001;;
  3256  0FD9  3019               	movlw	25
  3257  0FDA  008E               	movwf	14	;volatile
  3258  0FDB  0008               	return
  3259  0FDC                     __end_of_IO_Set:	
  3260                           
  3261                           	psect	text17
  3262  0F66                     __ptext17:	
  3263 ;; *************** function _I2C_Set *****************
  3264 ;; Defined at:
  3265 ;;		line 233 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;		None
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;		None
  3270 ;; Return value:  Size  Location     Type
  3271 ;;		None               void
  3272 ;; Registers used:
  3273 ;;		wreg, status,2
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3279 ;;      Params:         0       0       0       0       0       0       0       0
  3280 ;;      Locals:         0       0       0       0       0       0       0       0
  3281 ;;      Temps:          0       1       0       0       0       0       0       0
  3282 ;;      Totals:         0       1       0       0       0       0       0       0
  3283 ;;Total ram usage:        1 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    4
  3286 ;; This function calls:
  3287 ;;		Nothing
  3288 ;; This function is called by:
  3289 ;;		_Mcu_Initial
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           
  3294                           ;psect for function _I2C_Set
  3295  0F66                     _I2C_Set:	
  3296                           
  3297                           ;MCU_16f1516_B1.c: 235: I2C=&VarI2C;
  3298                           
  3299                           ;incstack = 0
  3300                           ; Regs used in _I2C_Set: [wreg+status,2]
  3301  0F66  30A0               	movlw	_VarI2C& (0+255)
  3302  0F67  0020               	movlb	0	; select bank0
  3303  0F68  00A5               	movwf	??_I2C_Set
  3304  0F69  0825               	movf	??_I2C_Set,w
  3305  0F6A  00DC               	movwf	_I2C
  3306                           
  3307                           ;MCU_16f1516_B1.c: 237: SSPADD = 0x09;
  3308  0F6B  3009               	movlw	9
  3309  0F6C  0024               	movlb	4	; select bank4
  3310  0F6D  0092               	movwf	18	;volatile
  3311                           
  3312                           ;MCU_16f1516_B1.c: 238: SSPSTAT = 0x80;
  3313  0F6E  3080               	movlw	128
  3314  0F6F  0094               	movwf	20	;volatile
  3315                           
  3316                           ;MCU_16f1516_B1.c: 239: SSPCON2 = 0;
  3317  0F70  0196               	clrf	22	;volatile
  3318                           
  3319                           ;MCU_16f1516_B1.c: 241: SSPCON1=0b101000;
  3320  0F71  3028               	movlw	40
  3321  0F72  0095               	movwf	21	;volatile
  3322  0F73  0008               	return
  3323  0F74                     __end_of_I2C_Set:	
  3324                           
  3325                           	psect	text18
  3326  0F74                     __ptext18:	
  3327 ;; *************** function _MainT_Initial *****************
  3328 ;; Defined at:
  3329 ;;		line 33 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;		None               void
  3336 ;; Registers used:
  3337 ;;		wreg, fsr1l, fsr1h
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3343 ;;      Params:         0       0       0       0       0       0       0       0
  3344 ;;      Locals:         0       0       0       0       0       0       0       0
  3345 ;;      Temps:          0       1       0       0       0       0       0       0
  3346 ;;      Totals:         0       1       0       0       0       0       0       0
  3347 ;;Total ram usage:        1 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    4
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_main
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           
  3358                           ;psect for function _MainT_Initial
  3359  0F74                     _MainT_Initial:	
  3360                           
  3361                           ;myMain.c: 35: TMain=&VarTMain;
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in _MainT_Initial: [wregfsr1]
  3365  0F74  304A               	movlw	_VarTMain& (0+255)
  3366  0F75  0020               	movlb	0	; select bank0
  3367  0F76  00A5               	movwf	??_MainT_Initial
  3368  0F77  0825               	movf	??_MainT_Initial,w
  3369  0F78  00DF               	movwf	_TMain
  3370                           
  3371                           ;myMain.c: 36: TMain->FirstOpen=1;
  3372  0F79  085F               	movf	_TMain,w
  3373  0F7A  3E0D               	addlw	13
  3374  0F7B  0086               	movwf	6
  3375  0F7C  0187               	clrf	7
  3376  0F7D  1401               	bsf	1,0
  3377                           
  3378                           ;myMain.c: 37: Product=&VarProduct;
  3379  0F7E  30A0               	movlw	_VarProduct& (0+255)
  3380  0F7F  00A5               	movwf	??_MainT_Initial
  3381  0F80  0825               	movf	??_MainT_Initial,w
  3382  0F81  00DE               	movwf	_Product
  3383  0F82  0008               	return
  3384  0F83                     __end_of_MainT_Initial:	
  3385                           
  3386                           	psect	text19
  3387  0445                     __ptext19:	
  3388 ;; *************** function _MainT *****************
  3389 ;; Defined at:
  3390 ;;		line 41 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;		None
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  i               1    0        unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;		None               void
  3397 ;; Registers used:
  3398 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3404 ;;      Params:         0       0       0       0       0       0       0       0
  3405 ;;      Locals:         0       0       0       0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0
  3407 ;;      Totals:         0       0       0       0       0       0       0       0
  3408 ;;Total ram usage:        0 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    4
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_main
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           
  3419                           ;psect for function _MainT
  3420  0445                     _MainT:	
  3421                           
  3422                           ;myMain.c: 43: char i;
  3423                           ;myMain.c: 45: if(!TMain->PowerON)
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0]
  3427  0445  0020               	movlb	0	; select bank0
  3428  0446  085F               	movf	_TMain,w
  3429  0447  0086               	movwf	6
  3430  0448  0187               	clrf	7
  3431  0449  1801               	btfsc	1,0
  3432  044A  2C69               	goto	l2254
  3433                           
  3434                           ;myMain.c: 46: {
  3435                           ;myMain.c: 47: TMain->PowerCount++;
  3436  044B  0A5F               	incf	_TMain,w
  3437  044C  0086               	movwf	6
  3438  044D  0187               	clrf	7
  3439  044E  3001               	movlw	1
  3440  044F  0781               	addwf	1,f
  3441  0450  3141               	addfsr 1,1
  3442  0451  1803               	skipnc
  3443  0452  0A81               	incf	1,f
  3444                           
  3445                           ;myMain.c: 48: if(TMain->PowerCount == 1500)
  3446  0453  0A5F               	incf	_TMain,w
  3447  0454  0086               	movwf	6
  3448  0455  0187               	clrf	7
  3449  0456  3F40               	moviw [0]fsr1
  3450  0457  3ADC               	xorlw	220
  3451  0458  1D03               	skipz
  3452  0459  2C5C               	goto	u2985
  3453  045A  3F41               	moviw [1]fsr1
  3454  045B  3A05               	xorlw	5
  3455  045C                     u2985:	
  3456  045C  1D03               	skipz
  3457  045D  0008               	return
  3458                           
  3459                           ;myMain.c: 49: {
  3460                           ;myMain.c: 50: TMain->PowerCount=0;
  3461  045E  0A5F               	incf	_TMain,w
  3462  045F  0086               	movwf	6
  3463  0460  0187               	clrf	7
  3464  0461  3000               	movlw	0
  3465  0462  3FC0               	movwi [0]fsr1
  3466  0463  3FC1               	movwi [1]fsr1
  3467                           
  3468                           ;myMain.c: 51: TMain->PowerON=1;
  3469  0464  085F               	movf	_TMain,w
  3470  0465  0086               	movwf	6
  3471  0466  0187               	clrf	7
  3472  0467  1401               	bsf	1,0
  3473                           
  3474                           ;myMain.c: 56: }
  3475                           ;myMain.c: 57: }
  3476  0468  0008               	return
  3477  0469                     l2254:	
  3478                           
  3479                           ;myMain.c: 58: else
  3480                           ;myMain.c: 59: {
  3481                           ;myMain.c: 60: TMain->Count1++;
  3482  0469  085F               	movf	_TMain,w
  3483  046A  3E05               	addlw	5
  3484  046B  0086               	movwf	6
  3485  046C  0187               	clrf	7
  3486  046D  3001               	movlw	1
  3487  046E  0781               	addwf	1,f
  3488  046F  3141               	addfsr 1,1
  3489  0470  1803               	skipnc
  3490  0471  0A81               	incf	1,f
  3491                           
  3492                           ;myMain.c: 61: if(TMain->Count1 == 1000)
  3493  0472  085F               	movf	_TMain,w
  3494  0473  3E05               	addlw	5
  3495  0474  0086               	movwf	6
  3496  0475  0187               	clrf	7
  3497  0476  3F40               	moviw [0]fsr1
  3498  0477  3AE8               	xorlw	232
  3499  0478  1D03               	skipz
  3500  0479  2C7C               	goto	u2995
  3501  047A  3F41               	moviw [1]fsr1
  3502  047B  3A03               	xorlw	3
  3503  047C                     u2995:	
  3504  047C  1D03               	skipz
  3505  047D  2C87               	goto	l2264
  3506                           
  3507                           ;myMain.c: 62: {
  3508                           ;myMain.c: 63: TMain->Count1=0;
  3509  047E  085F               	movf	_TMain,w
  3510  047F  3E05               	addlw	5
  3511  0480  0086               	movwf	6
  3512  0481  0187               	clrf	7
  3513  0482  3000               	movlw	0
  3514  0483  3FC0               	movwi [0]fsr1
  3515  0484  3FC1               	movwi [1]fsr1
  3516                           
  3517                           ;myMain.c: 64: RA2=~RA2;
  3518  0485  3004               	movlw	4
  3519  0486  068C               	xorwf	12,f
  3520  0487                     l2264:	
  3521                           ;myMain.c: 79: {
  3522                           
  3523                           
  3524                           ;myMain.c: 82: }
  3525                           ;myMain.c: 105: }
  3526                           ;myMain.c: 108: TMain->Count2++;
  3527  0487  085F               	movf	_TMain,w
  3528  0488  3E07               	addlw	7
  3529  0489  0086               	movwf	6
  3530  048A  0187               	clrf	7
  3531  048B  3001               	movlw	1
  3532  048C  0781               	addwf	1,f
  3533  048D  3141               	addfsr 1,1
  3534  048E  1803               	skipnc
  3535  048F  0A81               	incf	1,f
  3536                           
  3537                           ;myMain.c: 109: if(TMain->Count2 == 2000)
  3538  0490  085F               	movf	_TMain,w
  3539  0491  3E07               	addlw	7
  3540  0492  0086               	movwf	6
  3541  0493  0187               	clrf	7
  3542  0494  3F40               	moviw [0]fsr1
  3543  0495  3AD0               	xorlw	208
  3544  0496  1D03               	skipz
  3545  0497  2C9A               	goto	u3005
  3546  0498  3F41               	moviw [1]fsr1
  3547  0499  3A07               	xorlw	7
  3548  049A                     u3005:	
  3549  049A  1D03               	skipz
  3550  049B  0008               	return
  3551                           
  3552                           ;myMain.c: 110: {
  3553                           ;myMain.c: 111: TMain->Count2=0;
  3554  049C  085F               	movf	_TMain,w
  3555  049D  3E07               	addlw	7
  3556  049E  0086               	movwf	6
  3557  049F  0187               	clrf	7
  3558  04A0  3000               	movlw	0
  3559  04A1  3FC0               	movwi [0]fsr1
  3560  04A2  3FC1               	movwi [1]fsr1
  3561  04A3  0008               	return
  3562  04A4                     __end_of_MainT:	
  3563                           
  3564                           	psect	text20
  3565  03D2                     __ptext20:	
  3566 ;; *************** function _I2C_Main *****************
  3567 ;; Defined at:
  3568 ;;		line 275 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  i               1   11[BANK0 ] unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;		None               void
  3575 ;; Registers used:
  3576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3582 ;;      Params:         0       0       0       0       0       0       0       0
  3583 ;;      Locals:         0       1       0       0       0       0       0       0
  3584 ;;      Temps:          0       3       0       0       0       0       0       0
  3585 ;;      Totals:         0       4       0       0       0       0       0       0
  3586 ;;Total ram usage:        4 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    5
  3589 ;; This function calls:
  3590 ;;		_I2C_Master_Reception
  3591 ;;		_I2C_Master_Transmission
  3592 ;; This function is called by:
  3593 ;;		_main
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           
  3598                           ;psect for function _I2C_Main
  3599  03D2                     _I2C_Main:	
  3600                           
  3601                           ;MCU_16f1516_B1.c: 277: char i;
  3602                           ;MCU_16f1516_B1.c: 302: if(I2C->MasterRxGO)
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in _I2C_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3606  03D2  0020               	movlb	0	; select bank0
  3607  03D3  085C               	movf	_I2C,w
  3608  03D4  3E42               	addlw	66
  3609  03D5  0086               	movwf	6
  3610  03D6  3001               	movlw	1	; select bank2/3
  3611  03D7  0087               	movwf	7
  3612  03D8  1E01               	btfss	1,4
  3613  03D9  2C12               	goto	l189
  3614                           
  3615                           ;MCU_16f1516_B1.c: 303: {
  3616                           ;MCU_16f1516_B1.c: 304: I2C->MasterRxGO=0;
  3617  03DA  085C               	movf	_I2C,w
  3618  03DB  3E42               	addlw	66
  3619  03DC  0086               	movwf	6
  3620  03DD  3001               	movlw	1	; select bank2/3
  3621  03DE  0087               	movwf	7
  3622  03DF  1201               	bcf	1,4
  3623                           
  3624                           ;MCU_16f1516_B1.c: 305: I2C_Master_Reception();
  3625  03E0  3185  254B  3183   	fcall	_I2C_Master_Reception
  3626                           
  3627                           ;MCU_16f1516_B1.c: 306: TMain->Test=1;
  3628  03E3  0020               	movlb	0	; select bank0
  3629  03E4  085F               	movf	_TMain,w
  3630  03E5  3E0C               	addlw	12
  3631  03E6  0086               	movwf	6
  3632  03E7  0187               	clrf	7
  3633  03E8  0181               	clrf	1
  3634  03E9  0A81               	incf	1,f
  3635                           
  3636                           ;MCU_16f1516_B1.c: 307: RA1=~RA1;
  3637  03EA  3002               	movlw	2
  3638  03EB  068C               	xorwf	12,f
  3639                           
  3640                           ;MCU_16f1516_B1.c: 309: for(i=0;i<32;i++)
  3641  03EC  01AB               	clrf	I2C_Main@i
  3642  03ED  3020               	movlw	32
  3643  03EE  022B               	subwf	I2C_Main@i,w
  3644  03EF  1803               	btfsc	3,0
  3645  03F0  2C0B               	goto	l2204
  3646  03F1                     l2198:	
  3647                           
  3648                           ;MCU_16f1516_B1.c: 310: {
  3649                           ;MCU_16f1516_B1.c: 311: UART->TxData[i]=I2C->BufferReader[i];
  3650  03F1  082B               	movf	I2C_Main@i,w
  3651  03F2  075C               	addwf	_I2C,w
  3652  03F3  00A8               	movwf	??_I2C_Main
  3653  03F4  0828               	movf	??_I2C_Main,w
  3654  03F5  0086               	movwf	6
  3655  03F6  3001               	movlw	1	; select bank2/3
  3656  03F7  0087               	movwf	7
  3657  03F8  0801               	movf	1,w
  3658  03F9  00A9               	movwf	??_I2C_Main+1
  3659  03FA  082B               	movf	I2C_Main@i,w
  3660  03FB  0749               	addwf	_UART,w
  3661  03FC  00AA               	movwf	??_I2C_Main+2
  3662  03FD  082A               	movf	??_I2C_Main+2,w
  3663  03FE  0086               	movwf	6
  3664  03FF  3001               	movlw	1	; select bank2/3
  3665  0400  0087               	movwf	7
  3666  0401  0829               	movf	??_I2C_Main+1,w
  3667  0402  0081               	movwf	1
  3668  0403  3001               	movlw	1
  3669  0404  00A8               	movwf	??_I2C_Main
  3670  0405  0828               	movf	??_I2C_Main,w
  3671  0406  07AB               	addwf	I2C_Main@i,f
  3672  0407  3020               	movlw	32
  3673  0408  022B               	subwf	I2C_Main@i,w
  3674  0409  1C03               	skipc
  3675  040A  2BF1               	goto	l2198
  3676  040B                     l2204:	
  3677                           
  3678                           ;MCU_16f1516_B1.c: 312: }
  3679                           ;MCU_16f1516_B1.c: 313: UART->TxGO=1;
  3680  040B  0849               	movf	_UART,w
  3681  040C  3E43               	addlw	67
  3682  040D  0086               	movwf	6
  3683  040E  3001               	movlw	1	; select bank2/3
  3684  040F  0087               	movwf	7
  3685  0410  1401               	bsf	1,0
  3686                           
  3687                           ;MCU_16f1516_B1.c: 315: }
  3688  0411  0008               	return
  3689  0412                     l189:	
  3690                           
  3691                           ;MCU_16f1516_B1.c: 316: else
  3692                           ;MCU_16f1516_B1.c: 317: {
  3693                           ;MCU_16f1516_B1.c: 318: if(RC0)
  3694  0412  1C0E               	btfss	14,0	;volatile
  3695  0413  2C28               	goto	l2210
  3696                           
  3697                           ;MCU_16f1516_B1.c: 319: {
  3698                           ;MCU_16f1516_B1.c: 320: if(!I2C->SS)
  3699  0414  085C               	movf	_I2C,w
  3700  0415  3E42               	addlw	66
  3701  0416  0086               	movwf	6
  3702  0417  3001               	movlw	1	; select bank2/3
  3703  0418  0087               	movwf	7
  3704  0419  1A81               	btfsc	1,5
  3705  041A  0008               	return
  3706                           
  3707                           ;MCU_16f1516_B1.c: 321: {
  3708                           ;MCU_16f1516_B1.c: 322: I2C->SS=1;
  3709  041B  085C               	movf	_I2C,w
  3710  041C  3E42               	addlw	66
  3711  041D  0086               	movwf	6
  3712  041E  3001               	movlw	1	; select bank2/3
  3713  041F  0087               	movwf	7
  3714  0420  1681               	bsf	1,5
  3715                           
  3716                           ;MCU_16f1516_B1.c: 323: I2C->MasterRxGO=1;
  3717  0421  085C               	movf	_I2C,w
  3718  0422  3E42               	addlw	66
  3719  0423  0086               	movwf	6
  3720  0424  3001               	movlw	1	; select bank2/3
  3721  0425  0087               	movwf	7
  3722  0426  1601               	bsf	1,4
  3723                           
  3724                           ;MCU_16f1516_B1.c: 324: }
  3725                           ;MCU_16f1516_B1.c: 325: }
  3726  0427  0008               	return
  3727  0428                     l2210:	
  3728                           
  3729                           ;MCU_16f1516_B1.c: 326: else
  3730                           ;MCU_16f1516_B1.c: 327: {
  3731                           ;MCU_16f1516_B1.c: 328: if(I2C->SS)
  3732  0428  085C               	movf	_I2C,w
  3733  0429  3E42               	addlw	66
  3734  042A  0086               	movwf	6
  3735  042B  3001               	movlw	1	; select bank2/3
  3736  042C  0087               	movwf	7
  3737  042D  1E81               	btfss	1,5
  3738  042E  2C35               	goto	l196
  3739                           
  3740                           ;MCU_16f1516_B1.c: 329: {
  3741                           ;MCU_16f1516_B1.c: 330: I2C->SS=0;
  3742  042F  085C               	movf	_I2C,w
  3743  0430  3E42               	addlw	66
  3744  0431  0086               	movwf	6
  3745  0432  3001               	movlw	1	; select bank2/3
  3746  0433  0087               	movwf	7
  3747  0434  1281               	bcf	1,5
  3748  0435                     l196:	
  3749                           
  3750                           ;MCU_16f1516_B1.c: 331: }
  3751                           ;MCU_16f1516_B1.c: 332: if(I2C->MasterTxGO)
  3752  0435  085C               	movf	_I2C,w
  3753  0436  3E42               	addlw	66
  3754  0437  0086               	movwf	6
  3755  0438  3001               	movlw	1	; select bank2/3
  3756  0439  0087               	movwf	7
  3757  043A  1D81               	btfss	1,3
  3758  043B  0008               	return
  3759                           
  3760                           ;MCU_16f1516_B1.c: 333: {
  3761                           ;MCU_16f1516_B1.c: 334: I2C->MasterTxGO=0;
  3762  043C  085C               	movf	_I2C,w
  3763  043D  3E42               	addlw	66
  3764  043E  0086               	movwf	6
  3765  043F  3001               	movlw	1	; select bank2/3
  3766  0440  0087               	movwf	7
  3767  0441  1181               	bcf	1,3
  3768                           
  3769                           ;MCU_16f1516_B1.c: 335: I2C_Master_Transmission();
  3770  0442  3186  2664         	fcall	_I2C_Master_Transmission
  3771  0444  0008               	return
  3772  0445                     __end_of_I2C_Main:	
  3773                           
  3774                           	psect	text21
  3775  0664                     __ptext21:	
  3776 ;; *************** function _I2C_Master_Transmission *****************
  3777 ;; Defined at:
  3778 ;;		line 375 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  i               1    6[BANK0 ] unsigned char 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;		None               void
  3785 ;; Registers used:
  3786 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3792 ;;      Params:         0       0       0       0       0       0       0       0
  3793 ;;      Locals:         0       1       0       0       0       0       0       0
  3794 ;;      Temps:          0       1       0       0       0       0       0       0
  3795 ;;      Totals:         0       2       0       0       0       0       0       0
  3796 ;;Total ram usage:        2 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    4
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_I2C_Main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           
  3807                           ;psect for function _I2C_Master_Transmission
  3808  0664                     _I2C_Master_Transmission:	
  3809  0664                     l204:	
  3810                           ;MCU_16f1516_B1.c: 377: char i;
  3811                           ;MCU_16f1516_B1.c: 378: while(SEN);
  3812                           
  3813                           ;incstack = 0
  3814                           ; Regs used in _I2C_Master_Transmission: [wreg+fsr1l+fsr1h+status,2+status,0]
  3815                           
  3816  0664  0024               	movlb	4	; select bank4
  3817  0665  1816               	btfsc	22,0	;volatile
  3818  0666  2E64               	goto	l204
  3819                           
  3820                           ;MCU_16f1516_B1.c: 379: SEN=1;
  3821  0667  1416               	bsf	22,0	;volatile
  3822  0668                     l207:	
  3823                           ;MCU_16f1516_B1.c: 381: while(SEN);
  3824                           
  3825  0668  1816               	btfsc	22,0	;volatile
  3826  0669  2E68               	goto	l207
  3827                           
  3828                           ;MCU_16f1516_B1.c: 384: SSPBUF=0x10;
  3829  066A  3010               	movlw	16
  3830  066B  0091               	movwf	17	;volatile
  3831  066C                     l210:	
  3832                           ;MCU_16f1516_B1.c: 385: while(BF);
  3833                           
  3834  066C  1814               	btfsc	20,0	;volatile
  3835  066D  2E6C               	goto	l210
  3836  066E                     l213:	
  3837                           ;MCU_16f1516_B1.c: 388: while(ACKSTAT);
  3838                           
  3839  066E  1B16               	btfsc	22,6	;volatile
  3840  066F  2E6E               	goto	l213
  3841                           
  3842                           ;MCU_16f1516_B1.c: 390: for(i=0;i<32;i++)
  3843  0670  0020               	movlb	0	; select bank0
  3844  0671  01A6               	clrf	I2C_Master_Transmission@i
  3845  0672  3020               	movlw	32
  3846  0673  0226               	subwf	I2C_Master_Transmission@i,w
  3847  0674  1803               	btfsc	3,0
  3848  0675  2E92               	goto	l227
  3849  0676                     l218:	
  3850                           ;MCU_16f1516_B1.c: 391: {
  3851                           ;MCU_16f1516_B1.c: 392: while(SEN);
  3852                           
  3853  0676  0024               	movlb	4	; select bank4
  3854  0677  1816               	btfsc	22,0	;volatile
  3855  0678  2E76               	goto	l218
  3856                           
  3857                           ;MCU_16f1516_B1.c: 393: SSPBUF=I2C->BufferWriter[i];
  3858  0679  0020               	movlb	0	; select bank0
  3859  067A  0826               	movf	I2C_Master_Transmission@i,w
  3860  067B  3E20               	addlw	32
  3861  067C  075C               	addwf	_I2C,w
  3862  067D  00A5               	movwf	??_I2C_Master_Transmission
  3863  067E  0825               	movf	??_I2C_Master_Transmission,w
  3864  067F  0086               	movwf	6
  3865  0680  3001               	movlw	1	; select bank2/3
  3866  0681  0087               	movwf	7
  3867  0682  0801               	movf	1,w
  3868  0683  0024               	movlb	4	; select bank4
  3869  0684  0091               	movwf	17	;volatile
  3870  0685                     l221:	
  3871                           ;MCU_16f1516_B1.c: 394: while(BF);
  3872                           
  3873  0685  1814               	btfsc	20,0	;volatile
  3874  0686  2E85               	goto	l221
  3875  0687                     l224:	
  3876                           ;MCU_16f1516_B1.c: 397: while(ACKSTAT);
  3877                           
  3878  0687  1B16               	btfsc	22,6	;volatile
  3879  0688  2E87               	goto	l224
  3880  0689  3001               	movlw	1
  3881  068A  0020               	movlb	0	; select bank0
  3882  068B  00A5               	movwf	??_I2C_Master_Transmission
  3883  068C  0825               	movf	??_I2C_Master_Transmission,w
  3884  068D  07A6               	addwf	I2C_Master_Transmission@i,f
  3885  068E  3020               	movlw	32
  3886  068F  0226               	subwf	I2C_Master_Transmission@i,w
  3887  0690  1C03               	skipc
  3888  0691  2E76               	goto	l218
  3889  0692                     l227:	
  3890                           ;MCU_16f1516_B1.c: 398: }
  3891                           ;MCU_16f1516_B1.c: 400: while(SEN);
  3892                           
  3893  0692  0024               	movlb	4	; select bank4
  3894  0693  1C16               	btfss	22,0	;volatile
  3895  0694  2E97               	goto	l230
  3896  0695  2E92               	goto	l227
  3897  0696                     l231:	
  3898                           ;MCU_16f1516_B1.c: 401: while(!PEN)
  3899                           
  3900                           
  3901                           ;MCU_16f1516_B1.c: 402: PEN=1;
  3902  0696  1516               	bsf	22,2	;volatile
  3903  0697                     l230:	
  3904  0697  1D16               	btfss	22,2	;volatile
  3905  0698  2E96               	goto	l231
  3906  0699                     l233:	
  3907                           ;MCU_16f1516_B1.c: 403: while(PEN);
  3908                           
  3909  0699  1D16               	btfss	22,2	;volatile
  3910  069A  0008               	return
  3911  069B  2E99               	goto	l233
  3912  069C                     __end_of_I2C_Master_Transmission:	
  3913                           
  3914                           	psect	text22
  3915  054B                     __ptext22:	
  3916 ;; *************** function _I2C_Master_Reception *****************
  3917 ;; Defined at:
  3918 ;;		line 408 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  i               1    7[BANK0 ] unsigned char 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;		None               void
  3925 ;; Registers used:
  3926 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3932 ;;      Params:         0       0       0       0       0       0       0       0
  3933 ;;      Locals:         0       1       0       0       0       0       0       0
  3934 ;;      Temps:          0       2       0       0       0       0       0       0
  3935 ;;      Totals:         0       3       0       0       0       0       0       0
  3936 ;;Total ram usage:        3 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    4
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_I2C_Main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _I2C_Master_Reception
  3948  054B                     _I2C_Master_Reception:	
  3949  054B                     l239:	
  3950                           ;MCU_16f1516_B1.c: 410: char i;
  3951                           ;MCU_16f1516_B1.c: 411: while(SEN);
  3952                           
  3953                           ;incstack = 0
  3954                           ; Regs used in _I2C_Master_Reception: [wreg+fsr1l+fsr1h+status,2+status,0]
  3955                           
  3956  054B  0024               	movlb	4	; select bank4
  3957  054C  1816               	btfsc	22,0	;volatile
  3958  054D  2D4B               	goto	l239
  3959                           
  3960                           ;MCU_16f1516_B1.c: 412: SEN=1;
  3961  054E  1416               	bsf	22,0	;volatile
  3962  054F                     l242:	
  3963                           ;MCU_16f1516_B1.c: 413: while(SEN);
  3964                           
  3965  054F  1816               	btfsc	22,0	;volatile
  3966  0550  2D4F               	goto	l242
  3967                           
  3968                           ;MCU_16f1516_B1.c: 416: SSPBUF=0x11;
  3969  0551  3011               	movlw	17
  3970  0552  0091               	movwf	17	;volatile
  3971  0553                     l245:	
  3972                           ;MCU_16f1516_B1.c: 419: while(BF);
  3973                           
  3974  0553  1814               	btfsc	20,0	;volatile
  3975  0554  2D53               	goto	l245
  3976  0555                     l248:	
  3977                           ;MCU_16f1516_B1.c: 420: while(ACKSTAT);
  3978                           
  3979  0555  1B16               	btfsc	22,6	;volatile
  3980  0556  2D55               	goto	l248
  3981                           
  3982                           ;MCU_16f1516_B1.c: 423: for(i=0;i<32;i++)
  3983  0557  0020               	movlb	0	; select bank0
  3984  0558  01A7               	clrf	I2C_Master_Reception@i
  3985  0559  3020               	movlw	32
  3986  055A  0227               	subwf	I2C_Master_Reception@i,w
  3987  055B  1803               	btfsc	3,0
  3988  055C  2D81               	goto	l268
  3989  055D                     l253:	
  3990                           ;MCU_16f1516_B1.c: 424: {
  3991                           ;MCU_16f1516_B1.c: 425: while(SEN);
  3992                           
  3993  055D  0024               	movlb	4	; select bank4
  3994  055E  1816               	btfsc	22,0	;volatile
  3995  055F  2D5D               	goto	l253
  3996  0560                     l256:	
  3997                           ;MCU_16f1516_B1.c: 426: while(RCEN);
  3998                           
  3999  0560  1996               	btfsc	22,3	;volatile
  4000  0561  2D60               	goto	l256
  4001                           
  4002                           ;MCU_16f1516_B1.c: 427: RCEN=1;
  4003  0562  1596               	bsf	22,3	;volatile
  4004  0563                     l259:	
  4005                           ;MCU_16f1516_B1.c: 428: while(RCEN);
  4006                           
  4007  0563  1996               	btfsc	22,3	;volatile
  4008  0564  2D63               	goto	l259
  4009                           
  4010                           ;MCU_16f1516_B1.c: 429: I2C->BufferReader[i]=SSPBUF;
  4011  0565  0811               	movf	17,w	;volatile
  4012  0566  0020               	movlb	0	; select bank0
  4013  0567  00A5               	movwf	??_I2C_Master_Reception
  4014  0568  0827               	movf	I2C_Master_Reception@i,w
  4015  0569  075C               	addwf	_I2C,w
  4016  056A  00A6               	movwf	??_I2C_Master_Reception+1
  4017  056B  0826               	movf	??_I2C_Master_Reception+1,w
  4018  056C  0086               	movwf	6
  4019  056D  3001               	movlw	1	; select bank2/3
  4020  056E  0087               	movwf	7
  4021  056F  0825               	movf	??_I2C_Master_Reception,w
  4022  0570  0081               	movwf	1
  4023  0571                     l262:	
  4024                           ;MCU_16f1516_B1.c: 430: while(!ACKEN)
  4025                           
  4026  0571  0024               	movlb	4	; select bank4
  4027  0572  1A16               	btfsc	22,4	;volatile
  4028  0573  2D76               	goto	l265
  4029                           
  4030                           ;MCU_16f1516_B1.c: 431: ACKEN=1;
  4031  0574  1616               	bsf	22,4	;volatile
  4032  0575  2D71               	goto	l262
  4033  0576                     l265:	
  4034                           ;MCU_16f1516_B1.c: 432: while(ACKEN);
  4035                           
  4036  0576  1A16               	btfsc	22,4	;volatile
  4037  0577  2D76               	goto	l265
  4038  0578  3001               	movlw	1
  4039  0579  0020               	movlb	0	; select bank0
  4040  057A  00A5               	movwf	??_I2C_Master_Reception
  4041  057B  0825               	movf	??_I2C_Master_Reception,w
  4042  057C  07A7               	addwf	I2C_Master_Reception@i,f
  4043  057D  3020               	movlw	32
  4044  057E  0227               	subwf	I2C_Master_Reception@i,w
  4045  057F  1C03               	skipc
  4046  0580  2D5D               	goto	l253
  4047  0581                     l268:	
  4048                           ;MCU_16f1516_B1.c: 433: }
  4049                           ;MCU_16f1516_B1.c: 434: while(RCEN);
  4050                           
  4051  0581  0024               	movlb	4	; select bank4
  4052  0582  1996               	btfsc	22,3	;volatile
  4053  0583  2D81               	goto	l268
  4054                           
  4055                           ;MCU_16f1516_B1.c: 435: RCEN=1;
  4056  0584  1596               	bsf	22,3	;volatile
  4057  0585                     l271:	
  4058                           ;MCU_16f1516_B1.c: 436: while(RCEN);
  4059                           
  4060  0585  1D96               	btfss	22,3	;volatile
  4061  0586  2D89               	goto	l274
  4062  0587  2D85               	goto	l271
  4063  0588                     l275:	
  4064                           ;MCU_16f1516_B1.c: 437: while(!ACKEN)
  4065                           
  4066                           
  4067                           ;MCU_16f1516_B1.c: 438: ACKEN=1;
  4068  0588  1616               	bsf	22,4	;volatile
  4069  0589                     l274:	
  4070  0589  1E16               	btfss	22,4	;volatile
  4071  058A  2D88               	goto	l275
  4072  058B                     l277:	
  4073                           ;MCU_16f1516_B1.c: 439: while(ACKEN);
  4074                           
  4075  058B  1A16               	btfsc	22,4	;volatile
  4076  058C  2D8B               	goto	l277
  4077  058D                     l280:	
  4078                           ;MCU_16f1516_B1.c: 440: while(RCEN);
  4079                           
  4080  058D  1996               	btfsc	22,3	;volatile
  4081  058E  2D8D               	goto	l280
  4082                           
  4083                           ;MCU_16f1516_B1.c: 441: RCEN=1;
  4084  058F  1596               	bsf	22,3	;volatile
  4085  0590                     l283:	
  4086                           ;MCU_16f1516_B1.c: 442: while(RCEN);
  4087                           
  4088  0590  1996               	btfsc	22,3	;volatile
  4089  0591  2D90               	goto	l283
  4090  0592                     l286:	
  4091                           ;MCU_16f1516_B1.c: 444: while(SEN);
  4092                           
  4093  0592  1C16               	btfss	22,0	;volatile
  4094  0593  2D96               	goto	l289
  4095  0594  2D92               	goto	l286
  4096  0595                     l290:	
  4097                           ;MCU_16f1516_B1.c: 445: while(!PEN)
  4098                           
  4099                           
  4100                           ;MCU_16f1516_B1.c: 446: PEN=1;
  4101  0595  1516               	bsf	22,2	;volatile
  4102  0596                     l289:	
  4103  0596  1D16               	btfss	22,2	;volatile
  4104  0597  2D95               	goto	l290
  4105  0598                     l292:	
  4106                           ;MCU_16f1516_B1.c: 447: while(PEN);
  4107                           
  4108  0598  1D16               	btfss	22,2	;volatile
  4109  0599  0008               	return
  4110  059A  2D98               	goto	l292
  4111  059B                     __end_of_I2C_Master_Reception:	
  4112                           
  4113                           	psect	intentry
  4114  0004                     __pintentry:	
  4115 ;; *************** function _ISR *****************
  4116 ;; Defined at:
  4117 ;;		line 56 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;		None               void
  4124 ;; Registers used:
  4125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4131 ;;      Params:         0       0       0       0       0       0       0       0
  4132 ;;      Locals:         0       0       0       0       0       0       0       0
  4133 ;;      Temps:          0       1       0       0       0       0       0       0
  4134 ;;      Totals:         0       1       0       0       0       0       0       0
  4135 ;;Total ram usage:        1 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    3
  4138 ;; This function calls:
  4139 ;;		_I2C_ISR
  4140 ;;		_TMR1_ISR
  4141 ;;		_UART_ISR
  4142 ;; This function is called by:
  4143 ;;		Interrupt level 1
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147  0004                     _ISR:	
  4148                           
  4149                           ;incstack = 0
  4150                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4151  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4152  0005  3180               	pagesel	$
  4153  0006  0020               	movlb	0	; select bank0
  4154  0007  087F               	movf	127,w
  4155  0008  00A4               	movwf	??_ISR
  4156                           
  4157                           ;MCU_16f1516_B1.c: 58: __nop();
  4158  0009  0000               	nop
  4159                           
  4160                           ;MCU_16f1516_B1.c: 60: __nop();
  4161  000A  0000               	nop
  4162                           
  4163                           ;MCU_16f1516_B1.c: 62: TMR1_ISR();
  4164  000B  3187  2790  3180   	fcall	_TMR1_ISR
  4165                           
  4166                           ;MCU_16f1516_B1.c: 66: __nop();
  4167  000E  0000               	nop
  4168                           
  4169                           ;MCU_16f1516_B1.c: 68: UART_ISR();
  4170  000F  318F  27DC  3180   	fcall	_UART_ISR
  4171                           
  4172                           ;MCU_16f1516_B1.c: 70: I2C_ISR();
  4173  0012  318F  2783         	fcall	_I2C_ISR
  4174  0014  0020               	movlb	0	; select bank0
  4175  0015  0824               	movf	??_ISR,w
  4176  0016  00FF               	movwf	127
  4177  0017  107E               	bcf	126,0	;clear compiler interrupt flag
  4178  0018  0009               	retfie
  4179  0019                     __end_of_ISR:	
  4180                           
  4181                           	psect	text24
  4182  0FDC                     __ptext24:	
  4183 ;; *************** function _UART_ISR *****************
  4184 ;; Defined at:
  4185 ;;		line 516 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  i               1    0        unsigned char 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;		None               void
  4192 ;; Registers used:
  4193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4199 ;;      Params:         0       0       0       0       0       0       0       0
  4200 ;;      Locals:         0       0       0       0       0       0       0       0
  4201 ;;      Temps:          2       0       0       0       0       0       0       0
  4202 ;;      Totals:         2       0       0       0       0       0       0       0
  4203 ;;Total ram usage:        2 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    2
  4206 ;; This function calls:
  4207 ;;		i1_setSegmentDisplayNumber
  4208 ;; This function is called by:
  4209 ;;		_ISR
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function _UART_ISR
  4215  0FDC                     _UART_ISR:	
  4216                           
  4217                           ;MCU_16f1516_B1.c: 518: char i;
  4218                           ;MCU_16f1516_B1.c: 519: if(RCIE && RCIF)
  4219                           
  4220                           ;incstack = 0
  4221                           ; Regs used in _UART_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4222  0FDC  0021               	movlb	1	; select bank1
  4223  0FDD  1E91               	btfss	17,5	;volatile
  4224  0FDE  0008               	return
  4225  0FDF  0020               	movlb	0	; select bank0
  4226  0FE0  1E91               	btfss	17,5	;volatile
  4227  0FE1  0008               	return
  4228  0FE2                     i1l320:	
  4229                           ;MCU_16f1516_B1.c: 520: {
  4230                           ;MCU_16f1516_B1.c: 521: while(!RCIDL);
  4231                           
  4232  0FE2  0023               	movlb	3	; select bank3
  4233  0FE3  1F1F               	btfss	31,6	;volatile
  4234  0FE4  2FE2               	goto	i1l320
  4235                           
  4236                           ;MCU_16f1516_B1.c: 523: UART->RxData[0]=RCREG;
  4237  0FE5  0819               	movf	25,w	;volatile
  4238  0FE6  00FC               	movwf	??_UART_ISR
  4239  0FE7  0020               	movlb	0	; select bank0
  4240  0FE8  0849               	movf	_UART,w
  4241  0FE9  3E20               	addlw	32
  4242  0FEA  0086               	movwf	6
  4243  0FEB  3001               	movlw	1	; select bank2/3
  4244  0FEC  0087               	movwf	7
  4245  0FED  087C               	movf	??_UART_ISR,w
  4246  0FEE  0081               	movwf	1
  4247                           
  4248                           ;MCU_16f1516_B1.c: 532: RA1=~RA1;
  4249  0FEF  3002               	movlw	2
  4250  0FF0  068C               	xorwf	12,f
  4251                           
  4252                           ;MCU_16f1516_B1.c: 533: setSegmentDisplayNumber(UART->RxData[0]);
  4253  0FF1  0849               	movf	_UART,w
  4254  0FF2  3E20               	addlw	32
  4255  0FF3  0086               	movwf	6
  4256  0FF4  3001               	movlw	1	; select bank2/3
  4257  0FF5  0087               	movwf	7
  4258  0FF6  0801               	movf	1,w
  4259  0FF7  00FC               	movwf	??_UART_ISR
  4260  0FF8  01FD               	clrf	??_UART_ISR+1
  4261  0FF9  087C               	movf	??_UART_ISR,w
  4262  0FFA  00F9               	movwf	i1setSegmentDisplayNumber@number
  4263  0FFB  087D               	movf	??_UART_ISR+1,w
  4264  0FFC  00FA               	movwf	i1setSegmentDisplayNumber@number+1
  4265  0FFD  3181  2173         	fcall	i1_setSegmentDisplayNumber
  4266  0FFF  0008               	return
  4267  1000                     __end_of_UART_ISR:	
  4268                           
  4269                           	psect	text25
  4270  0173                     __ptext25:	
  4271 ;; *************** function i1_setSegmentDisplayNumber *****************
  4272 ;; Defined at:
  4273 ;;		line 20 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  number          2    9[COMMON] int 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  setSegmentDi    1   11[COMMON] unsigned char 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;		None               void
  4280 ;; Registers used:
  4281 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4287 ;;      Params:         2       0       0       0       0       0       0       0
  4288 ;;      Locals:         1       0       0       0       0       0       0       0
  4289 ;;      Temps:          0       4       0       0       0       0       0       0
  4290 ;;      Totals:         3       4       0       0       0       0       0       0
  4291 ;;Total ram usage:        7 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    1
  4294 ;; This function calls:
  4295 ;;		i1___awdiv
  4296 ;;		i1___awmod
  4297 ;; This function is called by:
  4298 ;;		_UART_ISR
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           
  4303                           ;psect for function i1_setSegmentDisplayNumber
  4304  0173                     i1_setSegmentDisplayNumber:	
  4305                           
  4306                           ;SegmentDisplay_A2.c: 22: char i;
  4307                           ;SegmentDisplay_A2.c: 23: if(Segment->Enable)
  4308                           
  4309                           ;incstack = 0
  4310                           ; Regs used in i1_setSegmentDisplayNumber: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  4311  0173  0020               	movlb	0	; select bank0
  4312  0174  085D               	movf	_Segment,w
  4313  0175  3E15               	addlw	21
  4314  0176  0086               	movwf	6
  4315  0177  0187               	clrf	7
  4316  0178  1C01               	btfss	1,0
  4317  0179  0008               	return
  4318                           
  4319                           ;SegmentDisplay_A2.c: 24: {
  4320                           ;SegmentDisplay_A2.c: 25: Segment->GO=1;
  4321  017A  085D               	movf	_Segment,w
  4322  017B  3E15               	addlw	21
  4323  017C  0086               	movwf	6
  4324  017D  0187               	clrf	7
  4325  017E  1481               	bsf	1,1
  4326                           
  4327                           ;SegmentDisplay_A2.c: 26: if(Segment->Hex)
  4328  017F  085D               	movf	_Segment,w
  4329  0180  3E15               	addlw	21
  4330  0181  0086               	movwf	6
  4331  0182  0187               	clrf	7
  4332  0183  1D01               	btfss	1,2
  4333  0184  29BF               	goto	i1l2088
  4334                           
  4335                           ;SegmentDisplay_A2.c: 27: {
  4336                           ;SegmentDisplay_A2.c: 28: Segment->Num[0]=(number & 0x000f);
  4337  0185  0879               	movf	i1setSegmentDisplayNumber@number,w
  4338  0186  390F               	andlw	15
  4339  0187  00A0               	movwf	??i1_setSegmentDisplayNumber
  4340  0188  085D               	movf	_Segment,w
  4341  0189  3E11               	addlw	17
  4342  018A  0086               	movwf	6
  4343  018B  0187               	clrf	7
  4344  018C  0820               	movf	??i1_setSegmentDisplayNumber,w
  4345  018D  0081               	movwf	1
  4346                           
  4347                           ;SegmentDisplay_A2.c: 29: Segment->Num[1]=((number>>4)&0x000f);
  4348  018E  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4349  018F  00A1               	movwf	??i1_setSegmentDisplayNumber+1
  4350  0190  0879               	movf	i1setSegmentDisplayNumber@number,w
  4351  0191  00A0               	movwf	??i1_setSegmentDisplayNumber
  4352  0192  3004               	movlw	4
  4353  0193  00A2               	movwf	??i1_setSegmentDisplayNumber+2
  4354  0194                     u271_25:	
  4355  0194  0D21               	rlf	??i1_setSegmentDisplayNumber+1,w
  4356  0195  0CA1               	rrf	??i1_setSegmentDisplayNumber+1,f
  4357  0196  0CA0               	rrf	??i1_setSegmentDisplayNumber,f
  4358  0197  0BA2               	decfsz	??i1_setSegmentDisplayNumber+2,f
  4359  0198  2994               	goto	u271_25
  4360  0199  0820               	movf	??i1_setSegmentDisplayNumber,w
  4361  019A  390F               	andlw	15
  4362  019B  00A3               	movwf	??i1_setSegmentDisplayNumber+3
  4363  019C  085D               	movf	_Segment,w
  4364  019D  3E12               	addlw	18
  4365  019E  0086               	movwf	6
  4366  019F  0187               	clrf	7
  4367  01A0  0823               	movf	??i1_setSegmentDisplayNumber+3,w
  4368  01A1  0081               	movwf	1
  4369                           
  4370                           ;SegmentDisplay_A2.c: 30: Segment->Num[2]=((number>>8)&0x000f);
  4371  01A2  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4372  01A3  390F               	andlw	15
  4373  01A4  00A0               	movwf	??i1_setSegmentDisplayNumber
  4374  01A5  085D               	movf	_Segment,w
  4375  01A6  3E13               	addlw	19
  4376  01A7  0086               	movwf	6
  4377  01A8  0187               	clrf	7
  4378  01A9  0820               	movf	??i1_setSegmentDisplayNumber,w
  4379  01AA  0081               	movwf	1
  4380                           
  4381                           ;SegmentDisplay_A2.c: 31: Segment->Num[3]=((number>>12)&0x000f);
  4382  01AB  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4383  01AC  00A1               	movwf	??i1_setSegmentDisplayNumber+1
  4384  01AD  0879               	movf	i1setSegmentDisplayNumber@number,w
  4385  01AE  00A0               	movwf	??i1_setSegmentDisplayNumber
  4386  01AF  300C               	movlw	12
  4387  01B0  00A2               	movwf	??i1_setSegmentDisplayNumber+2
  4388  01B1                     u272_25:	
  4389  01B1  0D21               	rlf	??i1_setSegmentDisplayNumber+1,w
  4390  01B2  0CA1               	rrf	??i1_setSegmentDisplayNumber+1,f
  4391  01B3  0CA0               	rrf	??i1_setSegmentDisplayNumber,f
  4392  01B4  0BA2               	decfsz	??i1_setSegmentDisplayNumber+2,f
  4393  01B5  29B1               	goto	u272_25
  4394  01B6  0820               	movf	??i1_setSegmentDisplayNumber,w
  4395  01B7  390F               	andlw	15
  4396  01B8  00A3               	movwf	??i1_setSegmentDisplayNumber+3
  4397  01B9  085D               	movf	_Segment,w
  4398  01BA  3E14               	addlw	20
  4399  01BB  0086               	movwf	6
  4400  01BC  0187               	clrf	7
  4401  01BD  0823               	movf	??i1_setSegmentDisplayNumber+3,w
  4402  01BE  2A69               	goto	L4
  4403  01BF                     i1l2088:	
  4404                           ;SegmentDisplay_A2.c: 32: }
  4405                           
  4406                           
  4407                           ;SegmentDisplay_A2.c: 33: else if(Segment->Dec)
  4408  01BF  085D               	movf	_Segment,w
  4409  01C0  3E15               	addlw	21
  4410  01C1  0086               	movwf	6
  4411  01C2  0187               	clrf	7
  4412  01C3  1D81               	btfss	1,3
  4413  01C4  2A6A               	goto	i1l2116
  4414                           
  4415                           ;SegmentDisplay_A2.c: 34: {
  4416                           ;SegmentDisplay_A2.c: 35: if(number > 0x270f)
  4417  01C5  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4418  01C6  3A80               	xorlw	128
  4419  01C7  00A0               	movwf	??i1_setSegmentDisplayNumber
  4420  01C8  30A7               	movlw	167
  4421  01C9  0220               	subwf	??i1_setSegmentDisplayNumber,w
  4422  01CA  1D03               	skipz
  4423  01CB  29CE               	goto	u274_25
  4424  01CC  3010               	movlw	16
  4425  01CD  0279               	subwf	i1setSegmentDisplayNumber@number,w
  4426  01CE                     u274_25:	
  4427  01CE  1C03               	skipc
  4428  01CF  29E6               	goto	i1l2104
  4429                           
  4430                           ;SegmentDisplay_A2.c: 36: {
  4431                           ;SegmentDisplay_A2.c: 37: for(i=0 ; i<4; i++)
  4432  01D0  01FB               	clrf	i1setSegmentDisplayNumber@i
  4433  01D1                     L5:	
  4434  01D1  3004               	movlw	4
  4435  01D2  027B               	subwf	i1setSegmentDisplayNumber@i,w
  4436  01D3  1803               	btfsc	3,0
  4437  01D4  2A6A               	goto	i1l2116
  4438                           
  4439                           ;SegmentDisplay_A2.c: 38: {
  4440                           ;SegmentDisplay_A2.c: 39: Segment->Num[i]=16;
  4441  01D5  3010               	movlw	16
  4442  01D6  0020               	movlb	0	; select bank0
  4443  01D7  00A0               	movwf	??i1_setSegmentDisplayNumber
  4444  01D8  087B               	movf	i1setSegmentDisplayNumber@i,w
  4445  01D9  3E11               	addlw	17
  4446  01DA  075D               	addwf	_Segment,w
  4447  01DB  00A1               	movwf	??i1_setSegmentDisplayNumber+1
  4448  01DC  0821               	movf	??i1_setSegmentDisplayNumber+1,w
  4449  01DD  0086               	movwf	6
  4450  01DE  0187               	clrf	7
  4451  01DF  0820               	movf	??i1_setSegmentDisplayNumber,w
  4452  01E0  0081               	movwf	1
  4453  01E1  3001               	movlw	1
  4454  01E2  00A0               	movwf	??i1_setSegmentDisplayNumber
  4455  01E3  0820               	movf	??i1_setSegmentDisplayNumber,w
  4456  01E4  07FB               	addwf	i1setSegmentDisplayNumber@i,f
  4457  01E5  29D1               	goto	L5
  4458  01E6                     i1l2104:	
  4459                           ;SegmentDisplay_A2.c: 40: }
  4460                           ;SegmentDisplay_A2.c: 41: }
  4461                           
  4462                           
  4463                           ;SegmentDisplay_A2.c: 42: else
  4464                           ;SegmentDisplay_A2.c: 43: {
  4465                           ;SegmentDisplay_A2.c: 44: Segment->Num[3]=(number/1000);
  4466  01E6  30E8               	movlw	232
  4467  01E7  00F0               	movwf	i1___awdiv@divisor
  4468  01E8  3003               	movlw	3
  4469  01E9  00F1               	movwf	i1___awdiv@divisor+1
  4470  01EA  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4471  01EB  01F3               	clrf	i1___awdiv@dividend+1
  4472  01EC  07F3               	addwf	i1___awdiv@dividend+1,f
  4473  01ED  0879               	movf	i1setSegmentDisplayNumber@number,w
  4474  01EE  01F2               	clrf	i1___awdiv@dividend
  4475  01EF  07F2               	addwf	i1___awdiv@dividend,f
  4476  01F0  3184  24F8  3181   	fcall	i1___awdiv
  4477  01F3  0870               	movf	?i1___awdiv,w
  4478  01F4  0020               	movlb	0	; select bank0
  4479  01F5  00A0               	movwf	??i1_setSegmentDisplayNumber
  4480  01F6  085D               	movf	_Segment,w
  4481  01F7  3E14               	addlw	20
  4482  01F8  0086               	movwf	6
  4483  01F9  0187               	clrf	7
  4484  01FA  0820               	movf	??i1_setSegmentDisplayNumber,w
  4485  01FB  0081               	movwf	1
  4486                           
  4487                           ;SegmentDisplay_A2.c: 45: number%=1000;
  4488  01FC  30E8               	movlw	232
  4489  01FD  00F0               	movwf	i1___awmod@divisor
  4490  01FE  3003               	movlw	3
  4491  01FF  00F1               	movwf	i1___awmod@divisor+1
  4492  0200  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4493  0201  01F3               	clrf	i1___awmod@dividend+1
  4494  0202  07F3               	addwf	i1___awmod@dividend+1,f
  4495  0203  0879               	movf	i1setSegmentDisplayNumber@number,w
  4496  0204  01F2               	clrf	i1___awmod@dividend
  4497  0205  07F2               	addwf	i1___awmod@dividend,f
  4498  0206  3185  25E3  3181   	fcall	i1___awmod
  4499  0209  0871               	movf	?i1___awmod+1,w
  4500  020A  01FA               	clrf	i1setSegmentDisplayNumber@number+1
  4501  020B  07FA               	addwf	i1setSegmentDisplayNumber@number+1,f
  4502  020C  0870               	movf	?i1___awmod,w
  4503  020D  01F9               	clrf	i1setSegmentDisplayNumber@number
  4504  020E  07F9               	addwf	i1setSegmentDisplayNumber@number,f
  4505                           
  4506                           ;SegmentDisplay_A2.c: 46: Segment->Num[2]=(number/100);
  4507  020F  3064               	movlw	100
  4508  0210  00F0               	movwf	i1___awdiv@divisor
  4509  0211  3000               	movlw	0
  4510  0212  00F1               	movwf	i1___awdiv@divisor+1
  4511  0213  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4512  0214  01F3               	clrf	i1___awdiv@dividend+1
  4513  0215  07F3               	addwf	i1___awdiv@dividend+1,f
  4514  0216  0879               	movf	i1setSegmentDisplayNumber@number,w
  4515  0217  01F2               	clrf	i1___awdiv@dividend
  4516  0218  07F2               	addwf	i1___awdiv@dividend,f
  4517  0219  3184  24F8  3181   	fcall	i1___awdiv
  4518  021C  0870               	movf	?i1___awdiv,w
  4519  021D  0020               	movlb	0	; select bank0
  4520  021E  00A0               	movwf	??i1_setSegmentDisplayNumber
  4521  021F  085D               	movf	_Segment,w
  4522  0220  3E13               	addlw	19
  4523  0221  0086               	movwf	6
  4524  0222  0187               	clrf	7
  4525  0223  0820               	movf	??i1_setSegmentDisplayNumber,w
  4526  0224  0081               	movwf	1
  4527                           
  4528                           ;SegmentDisplay_A2.c: 47: number%=100;
  4529  0225  3064               	movlw	100
  4530  0226  00F0               	movwf	i1___awmod@divisor
  4531  0227  3000               	movlw	0
  4532  0228  00F1               	movwf	i1___awmod@divisor+1
  4533  0229  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4534  022A  01F3               	clrf	i1___awmod@dividend+1
  4535  022B  07F3               	addwf	i1___awmod@dividend+1,f
  4536  022C  0879               	movf	i1setSegmentDisplayNumber@number,w
  4537  022D  01F2               	clrf	i1___awmod@dividend
  4538  022E  07F2               	addwf	i1___awmod@dividend,f
  4539  022F  3185  25E3  3181   	fcall	i1___awmod
  4540  0232  0871               	movf	?i1___awmod+1,w
  4541  0233  01FA               	clrf	i1setSegmentDisplayNumber@number+1
  4542  0234  07FA               	addwf	i1setSegmentDisplayNumber@number+1,f
  4543  0235  0870               	movf	?i1___awmod,w
  4544  0236  01F9               	clrf	i1setSegmentDisplayNumber@number
  4545  0237  07F9               	addwf	i1setSegmentDisplayNumber@number,f
  4546                           
  4547                           ;SegmentDisplay_A2.c: 48: Segment->Num[1]=(number/10);
  4548  0238  300A               	movlw	10
  4549  0239  00F0               	movwf	i1___awdiv@divisor
  4550  023A  3000               	movlw	0
  4551  023B  00F1               	movwf	i1___awdiv@divisor+1
  4552  023C  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4553  023D  01F3               	clrf	i1___awdiv@dividend+1
  4554  023E  07F3               	addwf	i1___awdiv@dividend+1,f
  4555  023F  0879               	movf	i1setSegmentDisplayNumber@number,w
  4556  0240  01F2               	clrf	i1___awdiv@dividend
  4557  0241  07F2               	addwf	i1___awdiv@dividend,f
  4558  0242  3184  24F8  3181   	fcall	i1___awdiv
  4559  0245  0870               	movf	?i1___awdiv,w
  4560  0246  0020               	movlb	0	; select bank0
  4561  0247  00A0               	movwf	??i1_setSegmentDisplayNumber
  4562  0248  085D               	movf	_Segment,w
  4563  0249  3E12               	addlw	18
  4564  024A  0086               	movwf	6
  4565  024B  0187               	clrf	7
  4566  024C  0820               	movf	??i1_setSegmentDisplayNumber,w
  4567  024D  0081               	movwf	1
  4568                           
  4569                           ;SegmentDisplay_A2.c: 49: number%=10;
  4570  024E  300A               	movlw	10
  4571  024F  00F0               	movwf	i1___awmod@divisor
  4572  0250  3000               	movlw	0
  4573  0251  00F1               	movwf	i1___awmod@divisor+1
  4574  0252  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4575  0253  01F3               	clrf	i1___awmod@dividend+1
  4576  0254  07F3               	addwf	i1___awmod@dividend+1,f
  4577  0255  0879               	movf	i1setSegmentDisplayNumber@number,w
  4578  0256  01F2               	clrf	i1___awmod@dividend
  4579  0257  07F2               	addwf	i1___awmod@dividend,f
  4580  0258  3185  25E3  3181   	fcall	i1___awmod
  4581  025B  0871               	movf	?i1___awmod+1,w
  4582  025C  01FA               	clrf	i1setSegmentDisplayNumber@number+1
  4583  025D  07FA               	addwf	i1setSegmentDisplayNumber@number+1,f
  4584  025E  0870               	movf	?i1___awmod,w
  4585  025F  01F9               	clrf	i1setSegmentDisplayNumber@number
  4586  0260  07F9               	addwf	i1setSegmentDisplayNumber@number,f
  4587                           
  4588                           ;SegmentDisplay_A2.c: 50: Segment->Num[0]=number;
  4589  0261  0879               	movf	i1setSegmentDisplayNumber@number,w
  4590  0262  0020               	movlb	0	; select bank0
  4591  0263  00A0               	movwf	??i1_setSegmentDisplayNumber
  4592  0264  085D               	movf	_Segment,w
  4593  0265  3E11               	addlw	17
  4594  0266  0086               	movwf	6
  4595  0267  0187               	clrf	7
  4596  0268  0820               	movf	??i1_setSegmentDisplayNumber,w
  4597  0269                     L4:	
  4598  0269  0081               	movwf	1
  4599  026A                     i1l2116:	
  4600                           
  4601                           ;SegmentDisplay_A2.c: 51: }
  4602                           ;SegmentDisplay_A2.c: 52: }
  4603                           ;SegmentDisplay_A2.c: 53: if(Segment->Num[3] > 0)
  4604  026A  0020               	movlb	0	; select bank0
  4605  026B  085D               	movf	_Segment,w
  4606  026C  3E14               	addlw	20
  4607  026D  0086               	movwf	6
  4608  026E  0187               	clrf	7
  4609  026F  0801               	movf	1,w
  4610  0270  3A00               	xorlw	0
  4611  0271  1903               	skipnz
  4612  0272  2A7C               	goto	i1l2120
  4613                           
  4614                           ;SegmentDisplay_A2.c: 54: {
  4615                           ;SegmentDisplay_A2.c: 55: Segment->DisplayCount=3;
  4616  0273  3003               	movlw	3
  4617  0274  00A0               	movwf	??i1_setSegmentDisplayNumber
  4618  0275  085D               	movf	_Segment,w
  4619  0276  3E17               	addlw	23
  4620  0277  0086               	movwf	6
  4621  0278  0187               	clrf	7
  4622  0279  0820               	movf	??i1_setSegmentDisplayNumber,w
  4623  027A  0081               	movwf	1
  4624                           
  4625                           ;SegmentDisplay_A2.c: 56: }
  4626  027B  0008               	return
  4627  027C                     i1l2120:	
  4628                           
  4629                           ;SegmentDisplay_A2.c: 57: else if(Segment->Num[2] > 0)
  4630  027C  085D               	movf	_Segment,w
  4631  027D  3E13               	addlw	19
  4632  027E  0086               	movwf	6
  4633  027F  0187               	clrf	7
  4634  0280  0801               	movf	1,w
  4635  0281  3A00               	xorlw	0
  4636  0282  1903               	skipnz
  4637  0283  2A8D               	goto	i1l2124
  4638                           
  4639                           ;SegmentDisplay_A2.c: 58: {
  4640                           ;SegmentDisplay_A2.c: 59: Segment->DisplayCount=2;
  4641  0284  3002               	movlw	2
  4642  0285  00A0               	movwf	??i1_setSegmentDisplayNumber
  4643  0286  085D               	movf	_Segment,w
  4644  0287  3E17               	addlw	23
  4645  0288  0086               	movwf	6
  4646  0289  0187               	clrf	7
  4647  028A  0820               	movf	??i1_setSegmentDisplayNumber,w
  4648  028B  0081               	movwf	1
  4649                           
  4650                           ;SegmentDisplay_A2.c: 60: }
  4651  028C  0008               	return
  4652  028D                     i1l2124:	
  4653                           
  4654                           ;SegmentDisplay_A2.c: 61: else if(Segment->Num[1] > 0)
  4655  028D  085D               	movf	_Segment,w
  4656  028E  3E12               	addlw	18
  4657  028F  0086               	movwf	6
  4658  0290  0187               	clrf	7
  4659  0291  0801               	movf	1,w
  4660  0292  3A00               	xorlw	0
  4661  0293  1903               	skipnz
  4662  0294  2A9C               	goto	i1l2128
  4663                           
  4664                           ;SegmentDisplay_A2.c: 62: {
  4665                           ;SegmentDisplay_A2.c: 63: Segment->DisplayCount=1;
  4666  0295  085D               	movf	_Segment,w
  4667  0296  3E17               	addlw	23
  4668  0297  0086               	movwf	6
  4669  0298  0187               	clrf	7
  4670  0299  0181               	clrf	1
  4671  029A  0A81               	incf	1,f
  4672                           
  4673                           ;SegmentDisplay_A2.c: 64: }
  4674  029B  0008               	return
  4675  029C                     i1l2128:	
  4676                           
  4677                           ;SegmentDisplay_A2.c: 65: else
  4678                           ;SegmentDisplay_A2.c: 66: {
  4679                           ;SegmentDisplay_A2.c: 67: Segment->DisplayCount=0;
  4680  029C  085D               	movf	_Segment,w
  4681  029D  3E17               	addlw	23
  4682  029E  0086               	movwf	6
  4683  029F  0187               	clrf	7
  4684  02A0  0181               	clrf	1
  4685  02A1  0008               	return
  4686  02A2                     __end_ofi1_setSegmentDisplayNumber:	
  4687                           
  4688                           	psect	text26
  4689  05E3                     __ptext26:	
  4690 ;; *************** function i1___awmod *****************
  4691 ;; Defined at:
  4692 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  divisor         2    0[COMMON] int 
  4695 ;;  dividend        2    2[COMMON] int 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  __awmod         1    6[COMMON] unsigned char 
  4698 ;;  __awmod         1    5[COMMON] unsigned char 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  2    0[COMMON] int 
  4701 ;; Registers used:
  4702 ;;		wreg, status,2, status,0
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4708 ;;      Params:         4       0       0       0       0       0       0       0
  4709 ;;      Locals:         2       0       0       0       0       0       0       0
  4710 ;;      Temps:          1       0       0       0       0       0       0       0
  4711 ;;      Totals:         7       0       0       0       0       0       0       0
  4712 ;;Total ram usage:        7 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		i1_setSegmentDisplayNumber
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           
  4722                           ;psect for function i1___awmod
  4723  05E3                     i1___awmod:	
  4724                           
  4725                           ;incstack = 0
  4726                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  4727  05E3  01F6               	clrf	i1___awmod@sign
  4728  05E4  1FF3               	btfss	i1___awmod@dividend+1,7
  4729  05E5  2DED               	goto	i1l1876
  4730  05E6  09F2               	comf	i1___awmod@dividend,f
  4731  05E7  09F3               	comf	i1___awmod@dividend+1,f
  4732  05E8  0AF2               	incf	i1___awmod@dividend,f
  4733  05E9  1903               	skipnz
  4734  05EA  0AF3               	incf	i1___awmod@dividend+1,f
  4735  05EB  01F6               	clrf	i1___awmod@sign
  4736  05EC  0AF6               	incf	i1___awmod@sign,f
  4737  05ED                     i1l1876:	
  4738  05ED  1FF1               	btfss	i1___awmod@divisor+1,7
  4739  05EE  2DF4               	goto	i1l1880
  4740  05EF  09F0               	comf	i1___awmod@divisor,f
  4741  05F0  09F1               	comf	i1___awmod@divisor+1,f
  4742  05F1  0AF0               	incf	i1___awmod@divisor,f
  4743  05F2  1903               	skipnz
  4744  05F3  0AF1               	incf	i1___awmod@divisor+1,f
  4745  05F4                     i1l1880:	
  4746  05F4  0871               	movf	i1___awmod@divisor+1,w
  4747  05F5  0470               	iorwf	i1___awmod@divisor,w
  4748  05F6  1903               	skipnz
  4749  05F7  2E1B               	goto	i1l1898
  4750  05F8  01F5               	clrf	i1___awmod@counter
  4751  05F9  0AF5               	incf	i1___awmod@counter,f
  4752  05FA                     i1l1888:	
  4753  05FA  1BF1               	btfsc	i1___awmod@divisor+1,7
  4754  05FB  2E06               	goto	i1l1890
  4755  05FC  3001               	movlw	1
  4756  05FD                     u214_25:	
  4757  05FD  35F0               	lslf	i1___awmod@divisor,f
  4758  05FE  0DF1               	rlf	i1___awmod@divisor+1,f
  4759  05FF  0B89               	decfsz	9,f
  4760  0600  2DFD               	goto	u214_25
  4761  0601  3001               	movlw	1
  4762  0602  00F4               	movwf	??i1___awmod
  4763  0603  0874               	movf	??i1___awmod,w
  4764  0604  07F5               	addwf	i1___awmod@counter,f
  4765  0605  2DFA               	goto	i1l1888
  4766  0606                     i1l1890:	
  4767  0606  0871               	movf	i1___awmod@divisor+1,w
  4768  0607  0273               	subwf	i1___awmod@dividend+1,w
  4769  0608  1D03               	skipz
  4770  0609  2E0C               	goto	u216_25
  4771  060A  0870               	movf	i1___awmod@divisor,w
  4772  060B  0272               	subwf	i1___awmod@dividend,w
  4773  060C                     u216_25:	
  4774  060C  1C03               	skipc
  4775  060D  2E12               	goto	i1l1894
  4776  060E  0870               	movf	i1___awmod@divisor,w
  4777  060F  02F2               	subwf	i1___awmod@dividend,f
  4778  0610  0871               	movf	i1___awmod@divisor+1,w
  4779  0611  3BF3               	subwfb	i1___awmod@dividend+1,f
  4780  0612                     i1l1894:	
  4781  0612  3001               	movlw	1
  4782  0613                     u217_25:	
  4783  0613  36F1               	lsrf	i1___awmod@divisor+1,f
  4784  0614  0CF0               	rrf	i1___awmod@divisor,f
  4785  0615  0B89               	decfsz	9,f
  4786  0616  2E13               	goto	u217_25
  4787  0617  3001               	movlw	1
  4788  0618  02F5               	subwf	i1___awmod@counter,f
  4789  0619  1D03               	btfss	3,2
  4790  061A  2E06               	goto	i1l1890
  4791  061B                     i1l1898:	
  4792  061B  0876               	movf	i1___awmod@sign,w
  4793  061C  1903               	btfsc	3,2
  4794  061D  2E23               	goto	i1l1902
  4795  061E  09F2               	comf	i1___awmod@dividend,f
  4796  061F  09F3               	comf	i1___awmod@dividend+1,f
  4797  0620  0AF2               	incf	i1___awmod@dividend,f
  4798  0621  1903               	skipnz
  4799  0622  0AF3               	incf	i1___awmod@dividend+1,f
  4800  0623                     i1l1902:	
  4801  0623  0873               	movf	i1___awmod@dividend+1,w
  4802  0624  01F1               	clrf	?i1___awmod+1
  4803  0625  07F1               	addwf	?i1___awmod+1,f
  4804  0626  0872               	movf	i1___awmod@dividend,w
  4805  0627  01F0               	clrf	?i1___awmod
  4806  0628  07F0               	addwf	?i1___awmod,f
  4807  0629  0008               	return
  4808  062A                     __end_ofi1___awmod:	
  4809                           
  4810                           	psect	text27
  4811  04F8                     __ptext27:	
  4812 ;; *************** function i1___awdiv *****************
  4813 ;; Defined at:
  4814 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  divisor         2    0[COMMON] int 
  4817 ;;  dividend        2    2[COMMON] int 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  __awdiv         2    7[COMMON] int 
  4820 ;;  __awdiv         1    6[COMMON] unsigned char 
  4821 ;;  __awdiv         1    5[COMMON] unsigned char 
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  2    0[COMMON] int 
  4824 ;; Registers used:
  4825 ;;		wreg, status,2, status,0
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4831 ;;      Params:         4       0       0       0       0       0       0       0
  4832 ;;      Locals:         4       0       0       0       0       0       0       0
  4833 ;;      Temps:          1       0       0       0       0       0       0       0
  4834 ;;      Totals:         9       0       0       0       0       0       0       0
  4835 ;;Total ram usage:        9 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		i1_setSegmentDisplayNumber
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function i1___awdiv
  4846  04F8                     i1___awdiv:	
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  4850  04F8  01F6               	clrf	i1___awdiv@sign
  4851  04F9  1FF1               	btfss	i1___awdiv@divisor+1,7
  4852  04FA  2D02               	goto	i1l1832
  4853  04FB  09F0               	comf	i1___awdiv@divisor,f
  4854  04FC  09F1               	comf	i1___awdiv@divisor+1,f
  4855  04FD  0AF0               	incf	i1___awdiv@divisor,f
  4856  04FE  1903               	skipnz
  4857  04FF  0AF1               	incf	i1___awdiv@divisor+1,f
  4858  0500  01F6               	clrf	i1___awdiv@sign
  4859  0501  0AF6               	incf	i1___awdiv@sign,f
  4860  0502                     i1l1832:	
  4861  0502  1FF3               	btfss	i1___awdiv@dividend+1,7
  4862  0503  2D0D               	goto	i1l1838
  4863  0504  09F2               	comf	i1___awdiv@dividend,f
  4864  0505  09F3               	comf	i1___awdiv@dividend+1,f
  4865  0506  0AF2               	incf	i1___awdiv@dividend,f
  4866  0507  1903               	skipnz
  4867  0508  0AF3               	incf	i1___awdiv@dividend+1,f
  4868  0509  3001               	movlw	1
  4869  050A  00F4               	movwf	??i1___awdiv
  4870  050B  0874               	movf	??i1___awdiv,w
  4871  050C  06F6               	xorwf	i1___awdiv@sign,f
  4872  050D                     i1l1838:	
  4873  050D  01F7               	clrf	i1___awdiv@quotient
  4874  050E  01F8               	clrf	i1___awdiv@quotient+1
  4875  050F  0871               	movf	i1___awdiv@divisor+1,w
  4876  0510  0470               	iorwf	i1___awdiv@divisor,w
  4877  0511  1903               	skipnz
  4878  0512  2D3C               	goto	i1l1860
  4879  0513  01F5               	clrf	i1___awdiv@counter
  4880  0514  0AF5               	incf	i1___awdiv@counter,f
  4881  0515                     i1l1848:	
  4882  0515  1BF1               	btfsc	i1___awdiv@divisor+1,7
  4883  0516  2D21               	goto	i1l1850
  4884  0517  3001               	movlw	1
  4885  0518                     u204_25:	
  4886  0518  35F0               	lslf	i1___awdiv@divisor,f
  4887  0519  0DF1               	rlf	i1___awdiv@divisor+1,f
  4888  051A  0B89               	decfsz	9,f
  4889  051B  2D18               	goto	u204_25
  4890  051C  3001               	movlw	1
  4891  051D  00F4               	movwf	??i1___awdiv
  4892  051E  0874               	movf	??i1___awdiv,w
  4893  051F  07F5               	addwf	i1___awdiv@counter,f
  4894  0520  2D15               	goto	i1l1848
  4895  0521                     i1l1850:	
  4896  0521  3001               	movlw	1
  4897  0522                     u206_25:	
  4898  0522  35F7               	lslf	i1___awdiv@quotient,f
  4899  0523  0DF8               	rlf	i1___awdiv@quotient+1,f
  4900  0524  0B89               	decfsz	9,f
  4901  0525  2D22               	goto	u206_25
  4902  0526  0871               	movf	i1___awdiv@divisor+1,w
  4903  0527  0273               	subwf	i1___awdiv@dividend+1,w
  4904  0528  1D03               	skipz
  4905  0529  2D2C               	goto	u207_25
  4906  052A  0870               	movf	i1___awdiv@divisor,w
  4907  052B  0272               	subwf	i1___awdiv@dividend,w
  4908  052C                     u207_25:	
  4909  052C  1C03               	skipc
  4910  052D  2D33               	goto	i1l1856
  4911  052E  0870               	movf	i1___awdiv@divisor,w
  4912  052F  02F2               	subwf	i1___awdiv@dividend,f
  4913  0530  0871               	movf	i1___awdiv@divisor+1,w
  4914  0531  3BF3               	subwfb	i1___awdiv@dividend+1,f
  4915  0532  1477               	bsf	i1___awdiv@quotient,0
  4916  0533                     i1l1856:	
  4917  0533  3001               	movlw	1
  4918  0534                     u208_25:	
  4919  0534  36F1               	lsrf	i1___awdiv@divisor+1,f
  4920  0535  0CF0               	rrf	i1___awdiv@divisor,f
  4921  0536  0B89               	decfsz	9,f
  4922  0537  2D34               	goto	u208_25
  4923  0538  3001               	movlw	1
  4924  0539  02F5               	subwf	i1___awdiv@counter,f
  4925  053A  1D03               	btfss	3,2
  4926  053B  2D21               	goto	i1l1850
  4927  053C                     i1l1860:	
  4928  053C  0876               	movf	i1___awdiv@sign,w
  4929  053D  1903               	btfsc	3,2
  4930  053E  2D44               	goto	i1l1864
  4931  053F  09F7               	comf	i1___awdiv@quotient,f
  4932  0540  09F8               	comf	i1___awdiv@quotient+1,f
  4933  0541  0AF7               	incf	i1___awdiv@quotient,f
  4934  0542  1903               	skipnz
  4935  0543  0AF8               	incf	i1___awdiv@quotient+1,f
  4936  0544                     i1l1864:	
  4937  0544  0878               	movf	i1___awdiv@quotient+1,w
  4938  0545  01F1               	clrf	?i1___awdiv+1
  4939  0546  07F1               	addwf	?i1___awdiv+1,f
  4940  0547  0877               	movf	i1___awdiv@quotient,w
  4941  0548  01F0               	clrf	?i1___awdiv
  4942  0549  07F0               	addwf	?i1___awdiv,f
  4943  054A  0008               	return
  4944  054B                     __end_ofi1___awdiv:	
  4945                           
  4946                           	psect	text28
  4947  0790                     __ptext28:	
  4948 ;; *************** function _TMR1_ISR *****************
  4949 ;; Defined at:
  4950 ;;		line 125 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;		None
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;		None
  4955 ;; Return value:  Size  Location     Type
  4956 ;;		None               void
  4957 ;; Registers used:
  4958 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4964 ;;      Params:         0       0       0       0       0       0       0       0
  4965 ;;      Locals:         0       0       0       0       0       0       0       0
  4966 ;;      Temps:          0       0       0       0       0       0       0       0
  4967 ;;      Totals:         0       0       0       0       0       0       0       0
  4968 ;;Total ram usage:        0 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; This function calls:
  4971 ;;		Nothing
  4972 ;; This function is called by:
  4973 ;;		_ISR
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           
  4978                           ;psect for function _TMR1_ISR
  4979  0790                     _TMR1_ISR:	
  4980                           
  4981                           ;MCU_16f1516_B1.c: 127: if(TMR1IE && TMR1IF)
  4982                           
  4983                           ;incstack = 0
  4984                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4985  0790  0021               	movlb	1	; select bank1
  4986  0791  1C11               	btfss	17,0	;volatile
  4987  0792  0008               	return
  4988  0793  0020               	movlb	0	; select bank0
  4989  0794  1C11               	btfss	17,0	;volatile
  4990  0795  0008               	return
  4991                           
  4992                           ;MCU_16f1516_B1.c: 128: {
  4993                           ;MCU_16f1516_B1.c: 129: TMR1H=((65536-700)/256);
  4994  0796  30FD               	movlw	253
  4995  0797  0097               	movwf	23	;volatile
  4996                           
  4997                           ;MCU_16f1516_B1.c: 130: TMR1L=((65536-700)%256);
  4998  0798  3044               	movlw	68
  4999  0799  0096               	movwf	22	;volatile
  5000                           
  5001                           ;MCU_16f1516_B1.c: 131: TMR1IF=0;
  5002  079A  1011               	bcf	17,0	;volatile
  5003                           
  5004                           ;MCU_16f1516_B1.c: 132: Timer1->Count++;
  5005  079B  0A48               	incf	_Timer1,w
  5006  079C  0086               	movwf	6
  5007  079D  0187               	clrf	7
  5008  079E  3001               	movlw	1
  5009  079F  0781               	addwf	1,f
  5010  07A0  3141               	addfsr 1,1
  5011  07A1  1803               	skipnc
  5012  07A2  0A81               	incf	1,f
  5013                           
  5014                           ;MCU_16f1516_B1.c: 133: if(Timer1->Count == 20)
  5015  07A3  0A48               	incf	_Timer1,w
  5016  07A4  0086               	movwf	6
  5017  07A5  0187               	clrf	7
  5018  07A6  3F40               	moviw [0]fsr1
  5019  07A7  3A14               	xorlw	20
  5020  07A8  1D03               	skipz
  5021  07A9  2FAC               	goto	u282_25
  5022  07AA  3F41               	moviw [1]fsr1
  5023  07AB  3A00               	xorlw	0
  5024  07AC                     u282_25:	
  5025  07AC  1D03               	skipz
  5026  07AD  0008               	return
  5027                           
  5028                           ;MCU_16f1516_B1.c: 134: {
  5029                           ;MCU_16f1516_B1.c: 135: Timer1->Count=0;
  5030  07AE  0A48               	incf	_Timer1,w
  5031  07AF  0086               	movwf	6
  5032  07B0  0187               	clrf	7
  5033  07B1  3000               	movlw	0
  5034  07B2  3FC0               	movwi [0]fsr1
  5035  07B3  3FC1               	movwi [1]fsr1
  5036                           
  5037                           ;MCU_16f1516_B1.c: 136: TMain->T1_Timerout=1;
  5038  07B4  085F               	movf	_TMain,w
  5039  07B5  0086               	movwf	6
  5040  07B6  0187               	clrf	7
  5041  07B7  1501               	bsf	1,2
  5042  07B8  0008               	return
  5043  07B9                     __end_of_TMR1_ISR:	
  5044                           
  5045                           	psect	text29
  5046  0F83                     __ptext29:	
  5047 ;; *************** function _I2C_ISR *****************
  5048 ;; Defined at:
  5049 ;;		line 260 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_16f1516_B1.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;		None
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;		None
  5054 ;; Return value:  Size  Location     Type
  5055 ;;		None               void
  5056 ;; Registers used:
  5057 ;;		wreg, fsr1l, fsr1h
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5063 ;;      Params:         0       0       0       0       0       0       0       0
  5064 ;;      Locals:         0       0       0       0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0
  5066 ;;      Totals:         0       0       0       0       0       0       0       0
  5067 ;;Total ram usage:        0 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_ISR
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _I2C_ISR
  5078  0F83                     _I2C_ISR:	
  5079                           
  5080                           ;MCU_16f1516_B1.c: 262: if(SSPIE && SSPIF)
  5081                           
  5082                           ;incstack = 0
  5083                           ; Regs used in _I2C_ISR: [wregfsr1]
  5084  0F83  0021               	movlb	1	; select bank1
  5085  0F84  1D91               	btfss	17,3	;volatile
  5086  0F85  0008               	return
  5087  0F86  0020               	movlb	0	; select bank0
  5088  0F87  1D91               	btfss	17,3	;volatile
  5089  0F88  0008               	return
  5090                           
  5091                           ;MCU_16f1516_B1.c: 263: {
  5092                           ;MCU_16f1516_B1.c: 264: SSPIE=0;
  5093  0F89  0021               	movlb	1	; select bank1
  5094  0F8A  1191               	bcf	17,3	;volatile
  5095                           
  5096                           ;MCU_16f1516_B1.c: 265: I2C->SlaveGO=1;
  5097  0F8B  0020               	movlb	0	; select bank0
  5098  0F8C  085C               	movf	_I2C,w
  5099  0F8D  3E42               	addlw	66
  5100  0F8E  0086               	movwf	6
  5101  0F8F  3001               	movlw	1	; select bank2/3
  5102  0F90  0087               	movwf	7
  5103  0F91  1401               	bsf	1,0
  5104  0F92  0008               	return
  5105  0F93                     __end_of_I2C_ISR:	
  5106  007E                     btemp	set	126	;btemp
  5107  007E                     pic14e$flags	set	126
  5108  007E                     wtemp	set	126
  5109  007E                     wtemp0	set	126
  5110  0080                     wtemp1	set	128
  5111  0082                     wtemp2	set	130
  5112  0084                     wtemp3	set	132
  5113  0086                     wtemp4	set	134
  5114  0088                     wtemp5	set	136
  5115  007F                     wtemp6	set	127
  5116  007E                     ttemp	set	126
  5117  007E                     ttemp0	set	126
  5118  0081                     ttemp1	set	129
  5119  0084                     ttemp2	set	132
  5120  0087                     ttemp3	set	135
  5121  007F                     ttemp4	set	127
  5122  007E                     ltemp	set	126
  5123  007E                     ltemp0	set	126
  5124  0082                     ltemp1	set	130
  5125  0086                     ltemp2	set	134
  5126  0080                     ltemp3	set	128


Data Sizes:
    Strings     5
    Constant    10
    Data        58
    BSS         157
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      64
    BANK1            80      0      58
    BANK2            80      0      68
    BANK3            80      0      67
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[2]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S544$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    Segment	PTR struct Segment size(1) Largest target is 26
		 -> NULL(NULL[0]), VarSegment(BANK1[26]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK1[32]), 

    UART	PTR struct UART size(1) Largest target is 68
		 -> NULL(NULL[0]), VarUart(BANK2[68]), 

    I2C	PTR struct I2C size(1) Largest target is 67
		 -> NULL(NULL[0]), VarI2C(BANK3[67]), 

    TMain	PTR struct TMain size(1) Largest target is 15
		 -> NULL(NULL[0]), VarTMain(BANK0[15]), 

    Timer1	PTR struct Timer1 size(1) Largest target is 3
		 -> NULL(NULL[0]), VarTimer1(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR
    _UART_ISR->i1_setSegmentDisplayNumber
    i1_setSegmentDisplayNumber->i1___awdiv

Critical Paths under _main in BANK0

    _main->_UART_Main
    _UART_Main->_UART_Transmit
    _setSegmentDisplayNumber->___awdiv
    _UART_Transmit->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _Mcu_Initial->_I2C_Set
    _Mcu_Initial->_TMR1_Set
    _Mcu_Initial->_UART_Set
    _I2C_Main->_I2C_Master_Reception

Critical Paths under _ISR in BANK0

    _UART_ISR->i1_setSegmentDisplayNumber

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3078
                           _I2C_Main
                              _MainT
                      _MainT_Initial
                        _Mcu_Initial
             _SegmentDisplay_Initial
                _SegmentDisplay_Main
                          _UART_Main
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            2     2      0    2852
                                             38 BANK0      2     2      0
                       _UART_Receive
                      _UART_Transmit
            _setSegmentDisplayNumber
 ---------------------------------------------------------------------------------
 (2) _setSegmentDisplayNumber                              7     5      2    1647
                                             14 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     614
                                              5 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     618
                                              5 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        3     3      0    1115
                                             35 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              16    12      4    1047
                                             19 BANK0     16    12      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                             13 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     268
                                              5 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         4     4      0      90
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SegmentDisplay_Main                                  2     2      0       0
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SegmentDisplay_Initial                               1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initial                                          0     0      0       0
                            _I2C_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Set                                              1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initial                                        1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Main                                             4     4      0     226
                                              8 BANK0      4     4      0
               _I2C_Master_Reception
            _I2C_Master_Transmission
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Transmission                              2     2      0      68
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Reception                                 3     3      0      68
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  1     1      0    1269
                                              4 BANK0      1     1      0
                            _I2C_ISR
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (6) _UART_ISR                                             3     3      0    1269
                                             12 COMMON     2     2      0
          i1_setSegmentDisplayNumber
 ---------------------------------------------------------------------------------
 (7) i1_setSegmentDisplayNumber                            7     5      2    1269
                                              9 COMMON     3     1      2
                                              0 BANK0      4     4      0
                          i1___awdiv
                          i1___awmod
 ---------------------------------------------------------------------------------
 (8) i1___awmod                                            7     3      4     452
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     456
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Main
     _I2C_Master_Reception
     _I2C_Master_Transmission
   _MainT
   _MainT_Initial
   _Mcu_Initial
     _I2C_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
   _SegmentDisplay_Initial
   _SegmentDisplay_Main
   _UART_Main
     _UART_Receive
     _UART_Transmit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _setSegmentDisplayNumber
       ___awdiv
       ___awmod

 _ISR (ROOT)
   _I2C_ISR
   _TMR1_ISR
   _UART_ISR
     i1_setSegmentDisplayNumber
       i1___awdiv
       i1___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     10F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     28      40       6       80.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      3A       8       72.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      44      10       85.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      43      12       83.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     10F      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Sep 21 21:37:56 2014

                   ??_MainT_Initial 0025                                  _BF 10A0  
                      ___awdiv@sign 002B           ??_setSegmentDisplayNumber 0030  
                               l210 066C                                 l204 0664  
                               l221 0685                                 l213 066E  
                               l230 0697                                 l231 0696  
                               l207 0668                                 l224 0687  
                               l233 0699                                 l242 054F  
                               l218 0676                                 l227 0692  
                               _I2C 005C                                 l253 055D  
                               l245 0553                                 l262 0571  
                               l334 076D                                 l271 0585  
                               l239 054B                                 l351 0F60  
                               l280 058D                                 l256 0560  
                               l248 0555                                 l265 0576  
                               l337 077F                                 l290 0595  
                               l274 0589                                 l283 0590  
                               l275 0588                                 l259 0563  
                               l292 0598                                 l268 0581  
                               l196 0435                                 l277 058B  
                               l189 0412                                 l525 035E  
                               l286 0592                                 l289 0596  
                               _CKP 10AC                                 _GIE 005F  
                               _RA1 0061                                 _RA2 0062  
                               _RC0 0070                                 _RA4 0064  
                               _RA5 0065                                 _RA6 0066  
                               _RA7 0067                                 _PEN 10B2  
                               _ISR 0004                                 _SEN 10B0  
                               _RX9 0CEE                                 _TX9 0CF6  
                   __end_of_I2C_ISR 0F93                     __end_of_I2C_Set 0F74  
                      ___awmod@sign 002B                                 wreg 0009  
     __size_of_I2C_Master_Reception 0050                                ?_ISR 0070  
                              l2020 00B5                                l2004 008E  
                              l2040 015E                                l2032 013C  
                              l2210 0428                                l2204 040B  
                              l2044 016D                                l2036 014D  
                              l2302 03CC                                l2062 0731  
                              l2056 0715                                l1700 02C3  
                              l2228 06F6                                l2254 0469  
                              l2264 0487                                l1720 02F8  
                              l1706 02DC                                l2362 07C3  
                              l2292 039C                                l2284 0388  
                              l1732 031F                                l1716 02F2  
                              l1740 02A7                                l1820 05DC  
                              l1812 05CB                                l2198 03F1  
                              l1750 04AF                                l1806 05B3  
                              l2288 0392                                l2296 03A4  
                              l1664 06C3                                l1656 06A5  
                              l1680 073F                                l1728 0317  
                              l1808 05BF                                l1816 05D4  
                              l1658 06B1                                l1682 074B  
                              l1690 0760                                l1738 0324  
                              l1668 06CC                                l1756 04BA  
                              l1686 0757                                l1782 04F1  
                              l1774 04E0                                l1766 04C2  
                              l1768 04CE                                l1778 04E9  
                              l1794 05A6                       ??_Mcu_Initial 0026  
                              l1798 05AD                                STR_1 100A  
                              STR_2 100D                                u3005 049A  
                              _LATA 010C                                _LATB 010D  
                              _LATC 010E                                u1625 06A8  
                              u1715 0751                                u1645 06B2  
                              u1725 0758                                u1655 06BC  
                              u1665 06C4                                u2545 0063  
                              u2555 0080                                u1695 0742  
                              u1775 030D                                u1855 04C5  
                              u2575 009D                                u1875 04CF  
                              u1955 05B6                                _PEIE 005E  
                              u1885 04D9                                u1895 04E1  
                              u1975 05C5                                u1985 05CC  
                              _RCIE 048D                                _RCEN 10B3  
                              _RCIF 008D                                u2985 045C  
                              u2995 047C                                _UART 0049  
                              _TRMT 0CF1                                _TXIE 048C  
                              _TXIF 008C                                _R_nW 10A2  
                              _main 07B9                    __end_of_I2C_Main 0445  
                              fsr0h 0005                                fsr1h 0007  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                                ltemp 007E  
                              start 0019                                ttemp 007E  
                              wtemp 007E                               ??_ISR 0024  
                             ?_main 0070                      i1___awdiv@sign 0076  
                             _ACKEN 10B4                     __end_of___awdiv 04F8  
                             _BRG16 0CFB                       __CFG_WDTE$OFF 0000  
                   __end_of___awmod 05E3                     ___awdiv@divisor 0025  
                             _T1CON 0018                     __end_of___lwdiv 06D3  
                             i1l320 0FE2                     __end_of___lwmod 0767  
                             _RCIDL 0CFE                     ___awdiv@counter 002A  
                             _RCREG 0199                               _RCSTA 019D  
                             _TMR1H 0017                               _TMR1L 0016  
                             _SPBRG 019B                               _PORTA 000C  
                             _PORTB 000D                               _PORTC 000E  
                             _TRISA 008C                               _TRISB 008D  
                             _TRISC 008E                               _SSPIE 048B  
                             _SSPIF 008B                               _SSPOV 10AE  
                             _TXREG 019A                               _TXSTA 019E  
                             _TMain 005F                               _MainT 0445  
                     __CFG_WRT$BOOT 0000     i1setSegmentDisplayNumber@number 0079  
                  __end_of_UART_ISR 1000                  __size_of_UART_Main 0034  
                  __end_of_TMR1_ISR 07B9                    __end_of_UART_Set 07F9  
                    i1___awmod@sign 0076                    __end_of_TMR1_Set 0FA3  
                   __end_of_dpowers 100A                               _putch 0F5E  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
   __end_of_setSegmentDisplayNumber 0173                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                __size_ofi1___awdiv 0053                  __size_ofi1___awmod 0047  
               __end_of_Mcu_Initial 0FC6                     __initialization 001B  
                      __end_of_main 07E0  __size_ofi1_setSegmentDisplayNumber 012F  
  __size_of_I2C_Master_Transmission 0038                           ??_I2C_ISR 0070  
                         ??_I2C_Set 0025                              ??_main 0048  
             I2C_Master_Reception@i 0027                              ?_MainT 0070  
                         I2C_Main@i 002B                    ___awdiv@dividend 0027  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELB 018D                              _ANSELC 018E  
                            i1l2120 027C                              i1l2104 01E6  
                            i1l2124 028D                              i1l2116 026A  
                            i1l2128 029C                              i1l2088 01BF  
                            i1l1902 0623                              i1l1832 0502  
                            i1l1850 0521                              i1l1860 053C  
                            i1l1838 050D                              i1l1864 0544  
                            i1l1856 0533                              i1l1848 0515  
                            i1l1880 05F4                              i1l1890 0606  
                            i1l1876 05ED                              i1l1894 0612  
                            i1l1888 05FA                              i1l1898 061B  
                            u204_25 0518                              u206_25 0522  
                            u214_25 05FD                              u207_25 052C  
                            u208_25 0534                              u216_25 060C  
                            u217_25 0613                              u271_25 0194  
                            u272_25 01B1                              u282_25 07AC  
                            u274_25 01CE                              _OSCCON 0099  
                        _VarSegment 00C0                              _TMR1IE 0488  
                            _TMR1IF 0088                              _SPBRGH 019C  
                            _IO_Set 0FC6                              _SSPADD 0212  
                            _TRISC6 0476                              _TRISC7 0477  
                            _SSPBUF 0211                          _VarProduct 00A0  
                            _VarI2C 01A0                              _Timer1 0048  
                 __end_of_UART_Main 0707                           ??___awdiv 0029  
                         ??___awmod 0029                           ??___lwdiv 0029  
                         ??___lwmod 0031                    ___awdiv@quotient 002C  
                   ___awmod@divisor 0025                     ___awmod@counter 002A  
                            _printf 02A2                   __end_ofi1___awdiv 054B  
                 __end_ofi1___awmod 062A                           ?_I2C_Main 0070  
                       _Mcu_Initial 0FB3             __end_of__initialization 003E  
             __end_of_UART_Transmit 0790                       __end_of_MainT 04A4  
                    __pcstackCOMMON 0070                        __pidataBANK1 062A  
                         ?_UART_ISR 0070                           ?_TMR1_ISR 0070  
                         ?_UART_Set 0070                           ?_TMR1_Set 0070  
                     __end_of_putch 0F66                          ??_I2C_Main 0028  
                           ??_MainT 0025                             ??_putch 0025  
                        __pbssBANK0 0048                          __pbssBANK2 0120  
                        __pbssBANK3 01A0                             ?_IO_Set 0070  
      __end_of_I2C_Master_Reception 059B                          __pmaintext 07B9  
                        ??_UART_ISR 007C             _I2C_Master_Transmission 0664  
                        ??_TMR1_ISR 0070                          ??_UART_Set 0025  
                        ??_TMR1_Set 0025                          __pintentry 0004  
                           _I2C_ISR 0F83                             _ACKSTAT 10B6  
      __size_of_SegmentDisplay_Main 0073                             _I2C_Set 0F66  
             __end_of_MainT_Initial 0F83                             ?_printf 0033  
                i1___awdiv@dividend 0072                             _SSPCON1 0215  
                           _SSPCON2 0216                             _SSPSTAT 0214  
                     ?_UART_Receive 0070                     __size_of_IO_Set 0016  
                           _Segment 005D                  i1___awdiv@quotient 0077  
                           _VarUart 0120                             _Product 005E  
          ?_setSegmentDisplayNumber 002E                             ___awdiv 04A4  
                           ___awmod 059B                             ___lwdiv 069C  
                           ___lwmod 0738            ??_SegmentDisplay_Initial 0025  
                           __ptext1 06D3                             __ptext2 0042  
                           __ptext3 059B                             __ptext4 04A4  
                           __ptext5 0767                             __ptext6 02A2  
                           __ptext7 0F5E                             __ptext8 0738  
                           __ptext9 069C                     __size_of_printf 00BD  
                      __size_of_ISR 0015                             _dpowers 1000  
                  ___awmod@dividend 0027                             clrloop0 07FA  
              end_of_initialization 003E                      ??_UART_Receive 0025  
                           init_ram 0F58                             initloop 0F59  
                    UART_Transmit@i 0045           ??_I2C_Master_Transmission 0025  
                           printf@c 0042                             printf@f 0033  
                      __pstringtext 1000                           _UART_Main 06D3  
          I2C_Master_Transmission@i 0026                    __CFG_FOSC$INTOSC 0000  
                 __size_of_I2C_Main 0073                           i1___awdiv 04F8  
                         i1___awmod 05E3                _I2C_Master_Reception 054B  
                      ?_Mcu_Initial 0070                      __end_of_IO_Set 0FDC  
     setSegmentDisplayNumber@number 002E                          ?_UART_Main 0070  
                 __size_of_UART_ISR 0024                   __size_of_TMR1_ISR 0029  
                 __size_of_UART_Set 0019     __size_of_SegmentDisplay_Initial 0010  
                 __size_of_TMR1_Set 0010          ?i1_setSegmentDisplayNumber 0079  
                    __end_of_printf 035F                 start_initialization 001B  
                       __end_of_ISR 0019               ?_I2C_Master_Reception 0070  
                        ?i1___awdiv 0070                          ?i1___awmod 0070  
               _SegmentDisplay_Main 035F                            ??_IO_Set 0025  
                         _VarTimer1 0059                         __pdataBANK1 00A0  
                i1___awmod@dividend 0072                            ?_I2C_ISR 0070  
              ?_SegmentDisplay_Main 0070                            ?_I2C_Set 0070  
                          ??_printf 0037                __end_of_UART_Receive 0738  
 __end_ofi1_setSegmentDisplayNumber 02A2                           ___latbits 0002  
            __size_of_UART_Transmit 0029                       __pcstackBANK0 0020  
               __end_of__stringdata 100F              _SegmentDisplay_Initial 0FA3  
                         __pnvBANK0 005E                    ___lwdiv@dividend 0027  
                          ?___awdiv 0025                            ?___awmod 0025  
                          ?___lwdiv 0025               ??_SegmentDisplay_Main 0025  
                          ?___lwmod 002D                   i1___awdiv@divisor 0070  
                       ??_UART_Main 0046                   i1___awdiv@counter 0075  
                     UART_Receive@i 0028                            _I2C_Main 03D2  
            ??_I2C_Master_Reception 0025                      __size_of_MainT 005F  
  __size_of_setSegmentDisplayNumber 0131                         ??i1___awdiv 0074  
                       ??i1___awmod 0074                    ___lwdiv@quotient 002A  
          setSegmentDisplayNumber@i 0034                      __size_of_putch 0008  
            __size_of_MainT_Initial 000F                __size_of_Mcu_Initial 0013  
                         clear_ram0 07F9                       _UART_Transmit 0767  
                          _UART_ISR 0FDC                            _TMR1_ISR 0790  
                          _UART_Set 07E0                            _TMR1_Set 0F93  
                  __size_of_I2C_ISR 0010                    __size_of_I2C_Set 000E  
                       __stringdata 100A          i1setSegmentDisplayNumber@i 007B  
                        printf@_val 003E                          printf@flag 003C  
                        printf@prec 003D                            _VarTMain 004A  
                    ?_UART_Transmit 0070               __size_of_UART_Receive 0031  
                 i1___awmod@divisor 0070                   i1___awmod@counter 0075  
                  __size_of___awdiv 0054                    __size_of___awmod 0048  
                  __size_of___lwdiv 0037                    __size_of___lwmod 002F  
                     _MainT_Initial 0F74         ??i1_setSegmentDisplayNumber 0020  
                   ___lwdiv@divisor 0025                     ___lwdiv@counter 002C  
                          __ptext10 0707                            __ptext11 035F  
                          __ptext20 03D2                            __ptext12 0FA3  
                          __ptext21 0664                            __ptext13 0FB3  
                          __ptext22 054B                            __ptext14 07E0  
                          __ptext15 0F93                            __ptext24 0FDC  
                          __ptext16 0FC6                            __ptext25 0173  
                          __ptext17 0F66                            __ptext26 05E3  
                          __ptext18 0F74                            __ptext27 04F8  
                          __ptext19 0445                            __ptext28 0790  
                          __ptext29 0F83            ?_I2C_Master_Transmission 0070  
                     __size_of_main 0027                        _UART_Receive 0707  
                    ?_MainT_Initial 0070                           putch@byte 0025  
           _setSegmentDisplayNumber 0042             ?_SegmentDisplay_Initial 0070  
                       pic14e$flags 007E                            intlevel1 0000  
                  ___lwmod@dividend 002F                     ??_UART_Transmit 0043  
         i1_setSegmentDisplayNumber 0173                            printf@ap 003B  
                   ___lwmod@divisor 002D                     ___lwmod@counter 0032  
    __end_of_SegmentDisplay_Initial 0FB3     __end_of_I2C_Master_Transmission 069C  
       __end_of_SegmentDisplay_Main 03D2  
