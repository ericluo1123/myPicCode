

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Sep 24 23:12:51 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     	;# 
    46  0001                     	;# 
    47  0002                     	;# 
    48  0003                     	;# 
    49  0004                     	;# 
    50  0005                     	;# 
    51  0006                     	;# 
    52  0007                     	;# 
    53  0008                     	;# 
    54  0009                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000D                     	;# 
    59  000E                     	;# 
    60  0010                     	;# 
    61  0011                     	;# 
    62  0012                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0016                     	;# 
    66  0017                     	;# 
    67  0018                     	;# 
    68  0019                     	;# 
    69  001A                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  008E                     	;# 
    75  0090                     	;# 
    76  0091                     	;# 
    77  0092                     	;# 
    78  0095                     	;# 
    79  0096                     	;# 
    80  0097                     	;# 
    81  0099                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009E                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  010E                     	;# 
    91  0116                     	;# 
    92  0117                     	;# 
    93  011D                     	;# 
    94  018C                     	;# 
    95  018D                     	;# 
    96  018E                     	;# 
    97  0191                     	;# 
    98  0191                     	;# 
    99  0192                     	;# 
   100  0193                     	;# 
   101  0193                     	;# 
   102  0194                     	;# 
   103  0195                     	;# 
   104  0196                     	;# 
   105  0197                     	;# 
   106  0199                     	;# 
   107  019A                     	;# 
   108  019B                     	;# 
   109  019B                     	;# 
   110  019B                     	;# 
   111  019B                     	;# 
   112  019C                     	;# 
   113  019C                     	;# 
   114  019D                     	;# 
   115  019E                     	;# 
   116  019F                     	;# 
   117  020D                     	;# 
   118  0210                     	;# 
   119  0211                     	;# 
   120  0211                     	;# 
   121  0212                     	;# 
   122  0212                     	;# 
   123  0213                     	;# 
   124  0213                     	;# 
   125  0214                     	;# 
   126  0214                     	;# 
   127  0215                     	;# 
   128  0215                     	;# 
   129  0215                     	;# 
   130  0216                     	;# 
   131  0216                     	;# 
   132  0217                     	;# 
   133  0217                     	;# 
   134  0291                     	;# 
   135  0291                     	;# 
   136  0292                     	;# 
   137  0293                     	;# 
   138  0298                     	;# 
   139  0298                     	;# 
   140  0299                     	;# 
   141  029A                     	;# 
   142  0394                     	;# 
   143  0395                     	;# 
   144  0396                     	;# 
   145  0FE4                     	;# 
   146  0FE5                     	;# 
   147  0FE6                     	;# 
   148  0FE7                     	;# 
   149  0FE8                     	;# 
   150  0FE9                     	;# 
   151  0FEA                     	;# 
   152  0FEB                     	;# 
   153  0FED                     	;# 
   154  0FEE                     	;# 
   155  0FEF                     	;# 
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378                           
   379                           	psect	idataBANK1
   380  060A                     __pidataBANK1:	
   381                           
   382                           ;initializer for _VarProduct
   383  060A  3463               	retlw	99
   384  060B  3402               	retlw	2
   385  060C  3400               	retlw	0
   386  060D  3400               	retlw	0
   387  060E  3400               	retlw	0
   388  060F  3400               	retlw	0
   389  0610  3400               	retlw	0
   390  0611  3400               	retlw	0
   391  0612  3400               	retlw	0
   392  0613  3400               	retlw	0
   393  0614  3400               	retlw	0
   394  0615  3400               	retlw	0
   395  0616  34FF               	retlw	255
   396  0617  34FF               	retlw	255
   397  0618  34FF               	retlw	255
   398  0619  3400               	retlw	0
   399  061A  3400               	retlw	0
   400  061B  3400               	retlw	0
   401  061C  3400               	retlw	0
   402  061D  3400               	retlw	0
   403  061E  3400               	retlw	0
   404  061F  3400               	retlw	0
   405  0620  3400               	retlw	0
   406  0621  3400               	retlw	0
   407  0622  3400               	retlw	0
   408  0623  3400               	retlw	0
   409  0624  3400               	retlw	0
   410  0625  3400               	retlw	0
   411  0626  3400               	retlw	0
   412  0627  3400               	retlw	0
   413  0628  3400               	retlw	0
   414  0629  3400               	retlw	0
   415                           
   416                           ;initializer for _VarSegment
   417  062A  34C0               	retlw	192
   418  062B  34F9               	retlw	249
   419  062C  34A4               	retlw	164
   420  062D  34B0               	retlw	176
   421  062E  3499               	retlw	153
   422  062F  3492               	retlw	146
   423  0630  3482               	retlw	130
   424  0631  34D8               	retlw	216
   425  0632  3480               	retlw	128
   426  0633  3490               	retlw	144
   427  0634  3488               	retlw	136
   428  0635  3483               	retlw	131
   429  0636  34A7               	retlw	167
   430  0637  34A1               	retlw	161
   431  0638  3486               	retlw	134
   432  0639  348E               	retlw	142
   433  063A  34BF               	retlw	191
   434  063B  3400               	retlw	0
   435  063C  3400               	retlw	0
   436  063D  3400               	retlw	0
   437  063E  3400               	retlw	0
   438  063F  3400               	retlw	0
   439  0640  3400               	retlw	0
   440  0641  3400               	retlw	0
   441  0642  3400               	retlw	0
   442  0643  3400               	retlw	0
   443                           
   444                           	psect	stringtext
   445  0800                     __pstringtext:	
   446  0800                     _hexpowers:	
   447  0800  3401               	retlw	1
   448  0801  3400               	retlw	0
   449  0802  3410               	retlw	16
   450  0803  3400               	retlw	0
   451  0804  3400               	retlw	0
   452  0805  3401               	retlw	1
   453  0806  3400               	retlw	0
   454  0807  3410               	retlw	16
   455  0808                     __end_of_hexpowers:	
   456  0808                     __stringdata:	
   457  0808                     STR_2:	
   458  0808  3430               	retlw	48	;'0'
   459  0809  3431               	retlw	49	;'1'
   460  080A  3432               	retlw	50	;'2'
   461  080B  3433               	retlw	51	;'3'
   462  080C  3434               	retlw	52	;'4'
   463  080D  3435               	retlw	53	;'5'
   464  080E  3436               	retlw	54	;'6'
   465  080F  3437               	retlw	55	;'7'
   466  0810  3438               	retlw	56	;'8'
   467  0811  3439               	retlw	57	;'9'
   468  0812  3461               	retlw	97	;'a'
   469  0813  3462               	retlw	98	;'b'
   470  0814  3463               	retlw	99	;'c'
   471  0815  3464               	retlw	100	;'d'
   472  0816  3465               	retlw	101	;'e'
   473  0817  3466               	retlw	102	;'f'
   474  0818  3400               	retlw	0
   475  0819                     STR_1:	
   476  0819  3425               	retlw	37	;'%'
   477  081A  3478               	retlw	120	;'x'
   478  081B  342C               	retlw	44	;','
   479  081C  3400               	retlw	0
   480  081D                     __end_of__stringdata:	
   481                           
   482                           ; #config settings
   483  0000                     
   484                           	psect	nvBANK0
   485  0056                     __pnvBANK0:	
   486  0056                     _Product:	
   487  0056                     	ds	1
   488  0057                     _TMain:	
   489  0057                     	ds	1
   490  0058                     _Timer1:	
   491  0058                     	ds	1
   492  0059                     _UART:	
   493  0059                     	ds	1
   494  005A                     _I2C:	
   495  005A                     	ds	1
   496  005B                     _Segment:	
   497  005B                     	ds	1
   498  000C                     _PORTA	set	12
   499  000D                     _PORTB	set	13
   500  000E                     _PORTC	set	14
   501  0018                     _T1CON	set	24
   502  0017                     _TMR1H	set	23
   503  0016                     _TMR1L	set	22
   504  005F                     _GIE	set	95
   505  005E                     _PEIE	set	94
   506  0061                     _RA1	set	97
   507  0062                     _RA2	set	98
   508  0064                     _RA4	set	100
   509  0065                     _RA5	set	101
   510  0066                     _RA6	set	102
   511  0067                     _RA7	set	103
   512  0070                     _RC0	set	112
   513  008D                     _RCIF	set	141
   514  008B                     _SSPIF	set	139
   515  0088                     _TMR1IF	set	136
   516  008C                     _TXIF	set	140
   517  0099                     _OSCCON	set	153
   518  008C                     _TRISA	set	140
   519  008D                     _TRISB	set	141
   520  008E                     _TRISC	set	142
   521  048D                     _RCIE	set	1165
   522  048B                     _SSPIE	set	1163
   523  0488                     _TMR1IE	set	1160
   524  0476                     _TRISC6	set	1142
   525  0477                     _TRISC7	set	1143
   526  048C                     _TXIE	set	1164
   527  010C                     _LATA	set	268
   528  010D                     _LATB	set	269
   529  010E                     _LATC	set	270
   530  018C                     _ANSELA	set	396
   531  018D                     _ANSELB	set	397
   532  018E                     _ANSELC	set	398
   533  0199                     _RCREG	set	409
   534  019D                     _RCSTA	set	413
   535  019B                     _SPBRG	set	411
   536  019C                     _SPBRGH	set	412
   537  019A                     _TXREG	set	410
   538  019E                     _TXSTA	set	414
   539  0CFB                     _BRG16	set	3323
   540  0CFE                     _RCIDL	set	3326
   541  0CEE                     _RX9	set	3310
   542  0CF6                     _TX9	set	3318
   543  0212                     _SSPADD	set	530
   544  0211                     _SSPBUF	set	529
   545  0215                     _SSPCON1	set	533
   546  0216                     _SSPCON2	set	534
   547  0214                     _SSPSTAT	set	532
   548  10B4                     _ACKEN	set	4276
   549  10B6                     _ACKSTAT	set	4278
   550  10A0                     _BF	set	4256
   551  10AC                     _CKP	set	4268
   552  10B2                     _PEN	set	4274
   553  10B3                     _RCEN	set	4275
   554  10A2                     _R_nW	set	4258
   555  10B0                     _SEN	set	4272
   556  10AE                     _SSPOV	set	4270
   557                           
   558                           	psect	cinit
   559  0015                     start_initialization:	
   560  0015                     __initialization:	
   561                           
   562                           ; Clear objects allocated to BANK0
   563  0015  3044               	movlw	low __pbssBANK0
   564  0016  0084               	movwf	4
   565  0017  3000               	movlw	high __pbssBANK0
   566  0018  0085               	movwf	5
   567  0019  3012               	movlw	18
   568  001A  318F  27C6  3180   	fcall	clear_ram0
   569                           
   570                           ; Clear objects allocated to BANK2
   571  001D  3020               	movlw	low __pbssBANK2
   572  001E  0084               	movwf	4
   573  001F  3001               	movlw	high __pbssBANK2
   574  0020  0085               	movwf	5
   575  0021  3043               	movlw	67
   576  0022  318F  27C6  3180   	fcall	clear_ram0
   577                           
   578                           ; Clear objects allocated to BANK3
   579  0025  30A0               	movlw	low __pbssBANK3
   580  0026  0084               	movwf	4
   581  0027  3001               	movlw	high __pbssBANK3
   582  0028  0085               	movwf	5
   583  0029  3044               	movlw	68
   584  002A  318F  27C6  3180   	fcall	clear_ram0
   585                           
   586                           ; Initialize objects allocated to BANK1
   587  002D  300A               	movlw	low __pidataBANK1
   588  002E  0084               	movwf	4
   589  002F  3086               	movlw	(high __pidataBANK1)| (0+128)
   590  0030  0085               	movwf	5
   591  0031  30A0               	movlw	low __pdataBANK1
   592  0032  0086               	movwf	6
   593  0033  3000               	movlw	high __pdataBANK1
   594  0034  0087               	movwf	7
   595  0035  303A               	movlw	58
   596  0036  318F  27C0         	fcall	init_ram
   597  0038                     end_of_initialization:	
   598                           ;End of C runtime variable initialization code
   599                           
   600  0038                     __end_of__initialization:	
   601  0038  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   602  0039  0020               	movlb	0
   603  003A  3187  2F41         	ljmp	_main	;jump to C main() function
   604                           
   605                           	psect	bssBANK0
   606  0044                     __pbssBANK0:	
   607  0044                     _VarTMain:	
   608  0044                     	ds	15
   609  0053                     _VarTimer1:	
   610  0053                     	ds	3
   611                           
   612                           	psect	dataBANK1
   613  00A0                     __pdataBANK1:	
   614  00A0                     _VarProduct:	
   615  00A0                     	ds	32
   616  00C0                     _VarSegment:	
   617  00C0                     	ds	26
   618                           
   619                           	psect	bssBANK2
   620  0120                     __pbssBANK2:	
   621  0120                     _VarI2C:	
   622  0120                     	ds	67
   623                           
   624                           	psect	bssBANK3
   625  01A0                     __pbssBANK3:	
   626  01A0                     _VarUart:	
   627  01A0                     	ds	68
   628                           
   629                           	psect	clrtext
   630  0FC6                     clear_ram0:	
   631                           ;	Called with FSR0 containing the base address, and
   632                           ;	WREG with the size to clear
   633                           
   634  0FC6  0064               	clrwdt	;clear the watchdog before getting into this loop
   635  0FC7                     clrloop0:	
   636  0FC7  0180               	clrf	0	;clear RAM location pointed to by FSR
   637  0FC8  3101               	addfsr 0,1
   638  0FC9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   639  0FCA  2FC7               	goto	clrloop0	;have we reached the end yet?
   640  0FCB  3400               	retlw	0	;all done for this memory range, return
   641                           
   642                           	psect	inittext
   643  0FC0                     init_ram:	
   644  0FC0  00FE               	movwf	126
   645  0FC1                     initloop:	
   646  0FC1  0012               	moviw fsr0++
   647  0FC2  001E               	movwi fsr1++
   648  0FC3  0BFE               	decfsz	126,f
   649  0FC4  2FC1               	goto	initloop
   650  0FC5  3400               	retlw	0
   651                           
   652                           	psect	cstackCOMMON
   653  0070                     __pcstackCOMMON:	
   654  0070                     ?_MainT_Initial:	
   655  0070                     ?_Mcu_Initialization:	
   656                           ; 0 bytes @ 0x0
   657                           
   658  0070                     ?_SegmentDisplay_Initial:	
   659                           ; 0 bytes @ 0x0
   660                           
   661  0070                     ?_MainT:	
   662                           ; 0 bytes @ 0x0
   663                           
   664  0070                     ?_I2C_Main:	
   665                           ; 0 bytes @ 0x0
   666                           
   667  0070                     ?_UART_Main:	
   668                           ; 0 bytes @ 0x0
   669                           
   670  0070                     ?_SegmentDisplay_Main:	
   671                           ; 0 bytes @ 0x0
   672                           
   673  0070                     ?_IO_Set:	
   674                           ; 0 bytes @ 0x0
   675                           
   676  0070                     ?_TMR1_Set:	
   677                           ; 0 bytes @ 0x0
   678                           
   679  0070                     ?_I2C_Set:	
   680                           ; 0 bytes @ 0x0
   681                           
   682  0070                     ?_UART_Set:	
   683                           ; 0 bytes @ 0x0
   684                           
   685  0070                     ?_TMR1_ISR:	
   686                           ; 0 bytes @ 0x0
   687                           
   688  0070                     ??_TMR1_ISR:	
   689                           ; 0 bytes @ 0x0
   690                           
   691  0070                     ?_UART_ISR:	
   692                           ; 0 bytes @ 0x0
   693                           
   694  0070                     ?_I2C_Master_Reception:	
   695                           ; 0 bytes @ 0x0
   696                           
   697  0070                     ?_I2C_Master_Transmission:	
   698                           ; 0 bytes @ 0x0
   699                           
   700  0070                     ?_UART_Receive:	
   701                           ; 0 bytes @ 0x0
   702                           
   703  0070                     ?_UART_Transmit:	
   704                           ; 0 bytes @ 0x0
   705                           
   706  0070                     ?_main:	
   707                           ; 0 bytes @ 0x0
   708                           
   709  0070                     ?_ISR:	
   710                           ; 0 bytes @ 0x0
   711                           
   712  0070                     ?_putch:	
   713                           ; 0 bytes @ 0x0
   714                           
   715  0070                     ?i1___awdiv:	
   716                           ; 0 bytes @ 0x0
   717                           
   718  0070                     ?i1___awmod:	
   719                           ; 2 bytes @ 0x0
   720                           
   721  0070                     i1___awdiv@divisor:	
   722                           ; 2 bytes @ 0x0
   723                           
   724  0070                     i1___awmod@divisor:	
   725                           ; 2 bytes @ 0x0
   726                           
   727                           
   728                           ; 2 bytes @ 0x0
   729  0070                     	ds	2
   730  0072                     i1___awdiv@dividend:	
   731  0072                     i1___awmod@dividend:	
   732                           ; 2 bytes @ 0x2
   733                           
   734                           
   735                           ; 2 bytes @ 0x2
   736  0072                     	ds	2
   737  0074                     ??i1___awdiv:	
   738  0074                     ??i1___awmod:	
   739                           ; 0 bytes @ 0x4
   740                           
   741                           
   742                           ; 0 bytes @ 0x4
   743  0074                     	ds	1
   744  0075                     i1___awdiv@counter:	
   745  0075                     i1___awmod@counter:	
   746                           ; 1 bytes @ 0x5
   747                           
   748                           
   749                           ; 1 bytes @ 0x5
   750  0075                     	ds	1
   751  0076                     i1___awdiv@sign:	
   752  0076                     i1___awmod@sign:	
   753                           ; 1 bytes @ 0x6
   754                           
   755                           
   756                           ; 1 bytes @ 0x6
   757  0076                     	ds	1
   758  0077                     i1___awdiv@quotient:	
   759                           
   760                           ; 2 bytes @ 0x7
   761  0077                     	ds	2
   762  0079                     ?i1_setSegmentDisplayNumber:	
   763  0079                     i1setSegmentDisplayNumber@number:	
   764                           ; 0 bytes @ 0x9
   765                           
   766                           
   767                           ; 2 bytes @ 0x9
   768  0079                     	ds	2
   769  007B                     i1setSegmentDisplayNumber@i:	
   770                           
   771                           ; 1 bytes @ 0xB
   772  007B                     	ds	1
   773  007C                     ??_UART_ISR:	
   774                           
   775                           ; 0 bytes @ 0xC
   776  007C                     	ds	2
   777                           
   778                           	psect	cstackBANK0
   779  0020                     __pcstackBANK0:	
   780  0020                     ??i1_setSegmentDisplayNumber:	
   781                           
   782                           ; 0 bytes @ 0x0
   783  0020                     	ds	4
   784  0024                     ??_ISR:	
   785                           
   786                           ; 0 bytes @ 0x4
   787  0024                     	ds	1
   788  0025                     ??_MainT_Initial:	
   789  0025                     ??_SegmentDisplay_Initial:	
   790                           ; 0 bytes @ 0x5
   791                           
   792  0025                     ??_MainT:	
   793                           ; 0 bytes @ 0x5
   794                           
   795  0025                     ??_SegmentDisplay_Main:	
   796                           ; 0 bytes @ 0x5
   797                           
   798  0025                     ??_IO_Set:	
   799                           ; 0 bytes @ 0x5
   800                           
   801  0025                     ??_TMR1_Set:	
   802                           ; 0 bytes @ 0x5
   803                           
   804  0025                     ??_I2C_Set:	
   805                           ; 0 bytes @ 0x5
   806                           
   807  0025                     ??_UART_Set:	
   808                           ; 0 bytes @ 0x5
   809                           
   810  0025                     ??_I2C_Master_Reception:	
   811                           ; 0 bytes @ 0x5
   812                           
   813  0025                     ??_I2C_Master_Transmission:	
   814                           ; 0 bytes @ 0x5
   815                           
   816  0025                     ??_UART_Receive:	
   817                           ; 0 bytes @ 0x5
   818                           
   819  0025                     ??_putch:	
   820                           ; 0 bytes @ 0x5
   821                           
   822  0025                     ?___awdiv:	
   823                           ; 0 bytes @ 0x5
   824                           
   825  0025                     ?___awmod:	
   826                           ; 2 bytes @ 0x5
   827                           
   828  0025                     ?___lwdiv:	
   829                           ; 2 bytes @ 0x5
   830                           
   831  0025                     putch@byte:	
   832                           ; 2 bytes @ 0x5
   833                           
   834  0025                     ___awdiv@divisor:	
   835                           ; 1 bytes @ 0x5
   836                           
   837  0025                     ___awmod@divisor:	
   838                           ; 2 bytes @ 0x5
   839                           
   840  0025                     ___lwdiv@divisor:	
   841                           ; 2 bytes @ 0x5
   842                           
   843                           
   844                           ; 2 bytes @ 0x5
   845  0025                     	ds	1
   846  0026                     ??_Mcu_Initialization:	
   847  0026                     I2C_Master_Transmission@i:	
   848                           ; 0 bytes @ 0x6
   849                           
   850                           
   851                           ; 1 bytes @ 0x6
   852  0026                     	ds	1
   853  0027                     I2C_Master_Reception@i:	
   854  0027                     ___awdiv@dividend:	
   855                           ; 1 bytes @ 0x7
   856                           
   857  0027                     ___awmod@dividend:	
   858                           ; 2 bytes @ 0x7
   859                           
   860  0027                     ___lwdiv@dividend:	
   861                           ; 2 bytes @ 0x7
   862                           
   863                           
   864                           ; 2 bytes @ 0x7
   865  0027                     	ds	1
   866  0028                     ??_I2C_Main:	
   867  0028                     UART_Receive@i:	
   868                           ; 0 bytes @ 0x8
   869                           
   870                           
   871                           ; 1 bytes @ 0x8
   872  0028                     	ds	1
   873  0029                     ??___awdiv:	
   874  0029                     ??___awmod:	
   875                           ; 0 bytes @ 0x9
   876                           
   877  0029                     ??___lwdiv:	
   878                           ; 0 bytes @ 0x9
   879                           
   880                           
   881                           ; 0 bytes @ 0x9
   882  0029                     	ds	1
   883  002A                     ___awdiv@counter:	
   884  002A                     ___awmod@counter:	
   885                           ; 1 bytes @ 0xA
   886                           
   887  002A                     ___lwdiv@quotient:	
   888                           ; 1 bytes @ 0xA
   889                           
   890                           
   891                           ; 2 bytes @ 0xA
   892  002A                     	ds	1
   893  002B                     I2C_Main@i:	
   894  002B                     ___awdiv@sign:	
   895                           ; 1 bytes @ 0xB
   896                           
   897  002B                     ___awmod@sign:	
   898                           ; 1 bytes @ 0xB
   899                           
   900                           
   901                           ; 1 bytes @ 0xB
   902  002B                     	ds	1
   903  002C                     ___lwdiv@counter:	
   904  002C                     ___awdiv@quotient:	
   905                           ; 1 bytes @ 0xC
   906                           
   907                           
   908                           ; 2 bytes @ 0xC
   909  002C                     	ds	1
   910  002D                     ?_printf:	
   911  002D                     printf@f:	
   912                           ; 2 bytes @ 0xD
   913                           
   914                           
   915                           ; 2 bytes @ 0xD
   916  002D                     	ds	1
   917  002E                     ?_setSegmentDisplayNumber:	
   918  002E                     setSegmentDisplayNumber@number:	
   919                           ; 0 bytes @ 0xE
   920                           
   921                           
   922                           ; 2 bytes @ 0xE
   923  002E                     	ds	2
   924  0030                     ??_setSegmentDisplayNumber:	
   925                           
   926                           ; 0 bytes @ 0x10
   927  0030                     	ds	1
   928  0031                     ??_printf:	
   929                           
   930                           ; 0 bytes @ 0x11
   931  0031                     	ds	3
   932  0034                     setSegmentDisplayNumber@i:	
   933                           
   934                           ; 1 bytes @ 0x14
   935  0034                     	ds	1
   936  0035                     printf@flag:	
   937                           
   938                           ; 1 bytes @ 0x15
   939  0035                     	ds	1
   940  0036                     printf@idx:	
   941                           
   942                           ; 1 bytes @ 0x16
   943  0036                     	ds	1
   944  0037                     printf@ap:	
   945                           
   946                           ; 1 bytes @ 0x17
   947  0037                     	ds	1
   948  0038                     printf@_val:	
   949                           
   950                           ; 4 bytes @ 0x18
   951  0038                     	ds	4
   952  003C                     printf@prec:	
   953                           
   954                           ; 1 bytes @ 0x1C
   955  003C                     	ds	1
   956  003D                     printf@c:	
   957                           
   958                           ; 1 bytes @ 0x1D
   959  003D                     	ds	1
   960  003E                     ??_UART_Transmit:	
   961                           
   962                           ; 0 bytes @ 0x1E
   963  003E                     	ds	3
   964  0041                     UART_Transmit@i:	
   965                           
   966                           ; 1 bytes @ 0x21
   967  0041                     	ds	1
   968  0042                     ??_UART_Main:	
   969                           
   970                           ; 0 bytes @ 0x22
   971  0042                     	ds	2
   972  0044                     ??_main:	
   973                           
   974                           	psect	maintext
   975  0741                     __pmaintext:	
   976                           ; 0 bytes @ 0x24
   977 ;;
   978 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   979 ;;
   980 ;; *************** function _main *****************
   981 ;; Defined at:
   982 ;;		line 6 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;		None
   987 ;; Return value:  Size  Location     Type
   988 ;;		None               void
   989 ;; Registers used:
   990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 17F/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   996 ;;      Params:         0       0       0       0       0       0       0       0
   997 ;;      Locals:         0       0       0       0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0       0
   999 ;;      Totals:         0       0       0       0       0       0       0       0
  1000 ;;Total ram usage:        0 bytes
  1001 ;; Hardware stack levels required when called:    8
  1002 ;; This function calls:
  1003 ;;		_I2C_Main
  1004 ;;		_MainT
  1005 ;;		_MainT_Initial
  1006 ;;		_Mcu_Initialization
  1007 ;;		_SegmentDisplay_Initial
  1008 ;;		_SegmentDisplay_Main
  1009 ;;		_UART_Main
  1010 ;; This function is called by:
  1011 ;;		Startup code after reset
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           
  1016                           ;psect for function _main
  1017  0741                     _main:	
  1018                           
  1019                           ;myMain.c: 8: MainT_Initial();
  1020                           
  1021                           ;incstack = 0
  1022                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1023  0741  318F  27E2  3187   	fcall	_MainT_Initial
  1024                           
  1025                           ;myMain.c: 9: Mcu_Initialization();
  1026  0744  318F  27F1  3187   	fcall	_Mcu_Initialization
  1027                           
  1028                           ;myMain.c: 10: SegmentDisplay_Initial();
  1029  0747  3187  27DC  3187   	fcall	_SegmentDisplay_Initial
  1030                           
  1031                           ;myMain.c: 11: ;;
  1032                           ;myMain.c: 12: __nop();
  1033  074A  0000               	nop
  1034  074B                     l2209:	
  1035                           ;myMain.c: 13: while(1)
  1036                           
  1037                           
  1038                           ;myMain.c: 14: {
  1039                           ;myMain.c: 17: if(TMain->T1_Timerout)
  1040  074B  0020               	movlb	0	; select bank0
  1041  074C  0857               	movf	_TMain,w
  1042  074D  0086               	movwf	6
  1043  074E  0187               	clrf	7
  1044  074F  1D01               	btfss	1,2
  1045  0750  2F4B               	goto	l2209
  1046                           
  1047                           ;myMain.c: 18: {
  1048                           ;myMain.c: 19: TMain->T1_Timerout = 0;
  1049  0751  0857               	movf	_TMain,w
  1050  0752  0086               	movwf	6
  1051  0753  0187               	clrf	7
  1052  0754  1101               	bcf	1,2
  1053                           
  1054                           ;myMain.c: 20: MainT();
  1055  0755  3184  2425  3187   	fcall	_MainT
  1056                           
  1057                           ;myMain.c: 21: if(TMain->PowerON)
  1058  0758  0020               	movlb	0	; select bank0
  1059  0759  0857               	movf	_TMain,w
  1060  075A  0086               	movwf	6
  1061  075B  0187               	clrf	7
  1062  075C  1C01               	btfss	1,0
  1063  075D  2F4B               	goto	l2209
  1064                           
  1065                           ;myMain.c: 22: {
  1066                           ;myMain.c: 23: ;;
  1067                           ;myMain.c: 24: I2C_Main();
  1068  075E  3183  23B2  3187   	fcall	_I2C_Main
  1069                           
  1070                           ;myMain.c: 25: UART_Main();
  1071  0761  3186  26B3  3187   	fcall	_UART_Main
  1072                           
  1073                           ;myMain.c: 26: SegmentDisplay_Main();
  1074  0764  3183  233F  3187   	fcall	_SegmentDisplay_Main
  1075  0767  2F4B               	goto	l2209
  1076  0768                     __end_of_main:	
  1077                           
  1078                           	psect	text1
  1079  06B3                     __ptext1:	
  1080 ;; *************** function _UART_Main *****************
  1081 ;; Defined at:
  1082 ;;		line 703 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;		None               void
  1089 ;; Registers used:
  1090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1096 ;;      Params:         0       0       0       0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0       0
  1098 ;;      Temps:          0       2       0       0       0       0       0       0
  1099 ;;      Totals:         0       2       0       0       0       0       0       0
  1100 ;;Total ram usage:        2 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; Hardware stack levels required when called:    7
  1103 ;; This function calls:
  1104 ;;		_UART_Receive
  1105 ;;		_UART_Transmit
  1106 ;;		_setSegmentDisplayNumber
  1107 ;; This function is called by:
  1108 ;;		_main
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           
  1113                           ;psect for function _UART_Main
  1114  06B3                     _UART_Main:	
  1115                           
  1116                           ;MCU_B1.c: 705: if(UART->RxGO)
  1117                           
  1118                           ;incstack = 0
  1119                           ; Regs used in _UART_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1120  06B3  0020               	movlb	0	; select bank0
  1121  06B4  0859               	movf	_UART,w
  1122  06B5  3E43               	addlw	67
  1123  06B6  0086               	movwf	6
  1124  06B7  3001               	movlw	1	; select bank2/3
  1125  06B8  0087               	movwf	7
  1126  06B9  1C81               	btfss	1,1
  1127  06BA  2ED6               	goto	l2135
  1128                           
  1129                           ;MCU_B1.c: 706: {
  1130                           ;MCU_B1.c: 707: UART->RxGO=0;
  1131  06BB  0859               	movf	_UART,w
  1132  06BC  3E43               	addlw	67
  1133  06BD  0086               	movwf	6
  1134  06BE  3001               	movlw	1	; select bank2/3
  1135  06BF  0087               	movwf	7
  1136  06C0  1081               	bcf	1,1
  1137                           
  1138                           ;MCU_B1.c: 708: UART_Receive();
  1139  06C1  3186  26E7  3186   	fcall	_UART_Receive
  1140                           
  1141                           ;MCU_B1.c: 709: RCIE=1;
  1142  06C4  0021               	movlb	1	; select bank1
  1143  06C5  1691               	bsf	17,5	;volatile
  1144                           
  1145                           ;MCU_B1.c: 710: setSegmentDisplayNumber(UART->RxData[0]);
  1146  06C6  0020               	movlb	0	; select bank0
  1147  06C7  0859               	movf	_UART,w
  1148  06C8  3E20               	addlw	32
  1149  06C9  0086               	movwf	6
  1150  06CA  3001               	movlw	1	; select bank2/3
  1151  06CB  0087               	movwf	7
  1152  06CC  0801               	movf	1,w
  1153  06CD  00C2               	movwf	??_UART_Main
  1154  06CE  01C3               	clrf	??_UART_Main+1
  1155  06CF  0842               	movf	??_UART_Main,w
  1156  06D0  00AE               	movwf	setSegmentDisplayNumber@number
  1157  06D1  0843               	movf	??_UART_Main+1,w
  1158  06D2  00AF               	movwf	setSegmentDisplayNumber@number+1
  1159  06D3  3180  203C         	fcall	_setSegmentDisplayNumber
  1160                           
  1161                           ;MCU_B1.c: 711: }
  1162  06D5  0008               	return
  1163  06D6                     l2135:	
  1164                           
  1165                           ;MCU_B1.c: 712: else
  1166                           ;MCU_B1.c: 713: {
  1167                           ;MCU_B1.c: 714: if(UART->TxGO)
  1168  06D6  0020               	movlb	0	; select bank0
  1169  06D7  0859               	movf	_UART,w
  1170  06D8  3E43               	addlw	67
  1171  06D9  0086               	movwf	6
  1172  06DA  3001               	movlw	1	; select bank2/3
  1173  06DB  0087               	movwf	7
  1174  06DC  1C01               	btfss	1,0
  1175  06DD  0008               	return
  1176                           
  1177                           ;MCU_B1.c: 715: {
  1178                           ;MCU_B1.c: 716: UART->TxGO=0;
  1179  06DE  0859               	movf	_UART,w
  1180  06DF  3E43               	addlw	67
  1181  06E0  0086               	movwf	6
  1182  06E1  3001               	movlw	1	; select bank2/3
  1183  06E2  0087               	movwf	7
  1184  06E3  1001               	bcf	1,0
  1185                           
  1186                           ;MCU_B1.c: 717: UART_Transmit();
  1187  06E4  3187  278C         	fcall	_UART_Transmit
  1188  06E6  0008               	return
  1189  06E7                     __end_of_UART_Main:	
  1190                           
  1191                           	psect	text2
  1192  003C                     __ptext2:	
  1193 ;; *************** function _setSegmentDisplayNumber *****************
  1194 ;; Defined at:
  1195 ;;		line 20 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  number          2   14[BANK0 ] int 
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;  i               1   20[BANK0 ] unsigned char 
  1200 ;; Return value:  Size  Location     Type
  1201 ;;		None               void
  1202 ;; Registers used:
  1203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1209 ;;      Params:         0       2       0       0       0       0       0       0
  1210 ;;      Locals:         0       1       0       0       0       0       0       0
  1211 ;;      Temps:          0       4       0       0       0       0       0       0
  1212 ;;      Totals:         0       7       0       0       0       0       0       0
  1213 ;;Total ram usage:        7 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    5
  1216 ;; This function calls:
  1217 ;;		___awdiv
  1218 ;;		___awmod
  1219 ;; This function is called by:
  1220 ;;		_UART_Main
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224                           
  1225                           ;psect for function _setSegmentDisplayNumber
  1226  003C                     _setSegmentDisplayNumber:	
  1227                           
  1228                           ;SegmentDisplay_A2.c: 22: char i;
  1229                           ;SegmentDisplay_A2.c: 23: if(Segment->Enable)
  1230                           
  1231                           ;incstack = 0
  1232                           ; Regs used in _setSegmentDisplayNumber: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  1233  003C  0020               	movlb	0	; select bank0
  1234  003D  085B               	movf	_Segment,w
  1235  003E  3E15               	addlw	21
  1236  003F  0086               	movwf	6
  1237  0040  0187               	clrf	7
  1238  0041  1C01               	btfss	1,0
  1239  0042  0008               	return
  1240                           
  1241                           ;SegmentDisplay_A2.c: 24: {
  1242                           ;SegmentDisplay_A2.c: 25: Segment->GO=1;
  1243  0043  085B               	movf	_Segment,w
  1244  0044  3E15               	addlw	21
  1245  0045  0086               	movwf	6
  1246  0046  0187               	clrf	7
  1247  0047  1481               	bsf	1,1
  1248                           
  1249                           ;SegmentDisplay_A2.c: 26: if(Segment->Hex)
  1250  0048  085B               	movf	_Segment,w
  1251  0049  3E15               	addlw	21
  1252  004A  0086               	movwf	6
  1253  004B  0187               	clrf	7
  1254  004C  1D01               	btfss	1,2
  1255  004D  2888               	goto	l1831
  1256                           
  1257                           ;SegmentDisplay_A2.c: 27: {
  1258                           ;SegmentDisplay_A2.c: 28: Segment->Num[0]=(number & 0x000f);
  1259  004E  082E               	movf	setSegmentDisplayNumber@number,w
  1260  004F  390F               	andlw	15
  1261  0050  00B0               	movwf	??_setSegmentDisplayNumber
  1262  0051  085B               	movf	_Segment,w
  1263  0052  3E11               	addlw	17
  1264  0053  0086               	movwf	6
  1265  0054  0187               	clrf	7
  1266  0055  0830               	movf	??_setSegmentDisplayNumber,w
  1267  0056  0081               	movwf	1
  1268                           
  1269                           ;SegmentDisplay_A2.c: 29: Segment->Num[1]=((number>>4)&0x000f);
  1270  0057  082F               	movf	setSegmentDisplayNumber@number+1,w
  1271  0058  00B1               	movwf	??_setSegmentDisplayNumber+1
  1272  0059  082E               	movf	setSegmentDisplayNumber@number,w
  1273  005A  00B0               	movwf	??_setSegmentDisplayNumber
  1274  005B  3004               	movlw	4
  1275  005C  00B2               	movwf	??_setSegmentDisplayNumber+2
  1276  005D                     u2045:	
  1277  005D  0D31               	rlf	??_setSegmentDisplayNumber+1,w
  1278  005E  0CB1               	rrf	??_setSegmentDisplayNumber+1,f
  1279  005F  0CB0               	rrf	??_setSegmentDisplayNumber,f
  1280  0060  0BB2               	decfsz	??_setSegmentDisplayNumber+2,f
  1281  0061  285D               	goto	u2045
  1282  0062  0830               	movf	??_setSegmentDisplayNumber,w
  1283  0063  390F               	andlw	15
  1284  0064  00B3               	movwf	??_setSegmentDisplayNumber+3
  1285  0065  085B               	movf	_Segment,w
  1286  0066  3E12               	addlw	18
  1287  0067  0086               	movwf	6
  1288  0068  0187               	clrf	7
  1289  0069  0833               	movf	??_setSegmentDisplayNumber+3,w
  1290  006A  0081               	movwf	1
  1291                           
  1292                           ;SegmentDisplay_A2.c: 30: Segment->Num[2]=((number>>8)&0x000f);
  1293  006B  082F               	movf	setSegmentDisplayNumber@number+1,w
  1294  006C  390F               	andlw	15
  1295  006D  00B0               	movwf	??_setSegmentDisplayNumber
  1296  006E  085B               	movf	_Segment,w
  1297  006F  3E13               	addlw	19
  1298  0070  0086               	movwf	6
  1299  0071  0187               	clrf	7
  1300  0072  0830               	movf	??_setSegmentDisplayNumber,w
  1301  0073  0081               	movwf	1
  1302                           
  1303                           ;SegmentDisplay_A2.c: 31: Segment->Num[3]=((number>>12)&0x000f);
  1304  0074  082F               	movf	setSegmentDisplayNumber@number+1,w
  1305  0075  00B1               	movwf	??_setSegmentDisplayNumber+1
  1306  0076  082E               	movf	setSegmentDisplayNumber@number,w
  1307  0077  00B0               	movwf	??_setSegmentDisplayNumber
  1308  0078  300C               	movlw	12
  1309  0079  00B2               	movwf	??_setSegmentDisplayNumber+2
  1310  007A                     u2055:	
  1311  007A  0D31               	rlf	??_setSegmentDisplayNumber+1,w
  1312  007B  0CB1               	rrf	??_setSegmentDisplayNumber+1,f
  1313  007C  0CB0               	rrf	??_setSegmentDisplayNumber,f
  1314  007D  0BB2               	decfsz	??_setSegmentDisplayNumber+2,f
  1315  007E  287A               	goto	u2055
  1316  007F  0830               	movf	??_setSegmentDisplayNumber,w
  1317  0080  390F               	andlw	15
  1318  0081  00B3               	movwf	??_setSegmentDisplayNumber+3
  1319  0082  085B               	movf	_Segment,w
  1320  0083  3E14               	addlw	20
  1321  0084  0086               	movwf	6
  1322  0085  0187               	clrf	7
  1323  0086  0833               	movf	??_setSegmentDisplayNumber+3,w
  1324  0087  2935               	goto	L1
  1325  0088                     l1831:	
  1326                           ;SegmentDisplay_A2.c: 32: }
  1327                           
  1328                           
  1329                           ;SegmentDisplay_A2.c: 33: else if(Segment->Dec)
  1330  0088  085B               	movf	_Segment,w
  1331  0089  3E15               	addlw	21
  1332  008A  0086               	movwf	6
  1333  008B  0187               	clrf	7
  1334  008C  1D81               	btfss	1,3
  1335  008D  2936               	goto	l1859
  1336                           
  1337                           ;SegmentDisplay_A2.c: 34: {
  1338                           ;SegmentDisplay_A2.c: 35: if(number > 0x270f)
  1339  008E  082F               	movf	setSegmentDisplayNumber@number+1,w
  1340  008F  3A80               	xorlw	128
  1341  0090  00B0               	movwf	??_setSegmentDisplayNumber
  1342  0091  30A7               	movlw	167
  1343  0092  0230               	subwf	??_setSegmentDisplayNumber,w
  1344  0093  1D03               	skipz
  1345  0094  2897               	goto	u2075
  1346  0095  3010               	movlw	16
  1347  0096  022E               	subwf	setSegmentDisplayNumber@number,w
  1348  0097                     u2075:	
  1349  0097  1C03               	skipc
  1350  0098  28AF               	goto	l1847
  1351                           
  1352                           ;SegmentDisplay_A2.c: 36: {
  1353                           ;SegmentDisplay_A2.c: 37: for(i=0 ; i<4; i++)
  1354  0099  0020               	movlb	0	; select bank0
  1355  009A  01B4               	clrf	setSegmentDisplayNumber@i
  1356  009B                     L2:	
  1357  009B  3004               	movlw	4
  1358  009C  0234               	subwf	setSegmentDisplayNumber@i,w
  1359  009D  1803               	btfsc	3,0
  1360  009E  2936               	goto	l1859
  1361                           
  1362                           ;SegmentDisplay_A2.c: 38: {
  1363                           ;SegmentDisplay_A2.c: 39: Segment->Num[i]=16;
  1364  009F  3010               	movlw	16
  1365  00A0  00B0               	movwf	??_setSegmentDisplayNumber
  1366  00A1  0834               	movf	setSegmentDisplayNumber@i,w
  1367  00A2  3E11               	addlw	17
  1368  00A3  075B               	addwf	_Segment,w
  1369  00A4  00B1               	movwf	??_setSegmentDisplayNumber+1
  1370  00A5  0831               	movf	??_setSegmentDisplayNumber+1,w
  1371  00A6  0086               	movwf	6
  1372  00A7  0187               	clrf	7
  1373  00A8  0830               	movf	??_setSegmentDisplayNumber,w
  1374  00A9  0081               	movwf	1
  1375  00AA  3001               	movlw	1
  1376  00AB  00B0               	movwf	??_setSegmentDisplayNumber
  1377  00AC  0830               	movf	??_setSegmentDisplayNumber,w
  1378  00AD  07B4               	addwf	setSegmentDisplayNumber@i,f
  1379  00AE  289B               	goto	L2
  1380  00AF                     l1847:	
  1381                           ;SegmentDisplay_A2.c: 40: }
  1382                           ;SegmentDisplay_A2.c: 41: }
  1383                           
  1384                           
  1385                           ;SegmentDisplay_A2.c: 42: else
  1386                           ;SegmentDisplay_A2.c: 43: {
  1387                           ;SegmentDisplay_A2.c: 44: Segment->Num[3]=(number/1000);
  1388  00AF  30E8               	movlw	232
  1389  00B0  0020               	movlb	0	; select bank0
  1390  00B1  00A5               	movwf	___awdiv@divisor
  1391  00B2  3003               	movlw	3
  1392  00B3  00A6               	movwf	___awdiv@divisor+1
  1393  00B4  082F               	movf	setSegmentDisplayNumber@number+1,w
  1394  00B5  01A8               	clrf	___awdiv@dividend+1
  1395  00B6  07A8               	addwf	___awdiv@dividend+1,f
  1396  00B7  082E               	movf	setSegmentDisplayNumber@number,w
  1397  00B8  01A7               	clrf	___awdiv@dividend
  1398  00B9  07A7               	addwf	___awdiv@dividend,f
  1399  00BA  3184  2484  3180   	fcall	___awdiv
  1400  00BD  0020               	movlb	0	; select bank0
  1401  00BE  0825               	movf	?___awdiv,w
  1402  00BF  00B0               	movwf	??_setSegmentDisplayNumber
  1403  00C0  085B               	movf	_Segment,w
  1404  00C1  3E14               	addlw	20
  1405  00C2  0086               	movwf	6
  1406  00C3  0187               	clrf	7
  1407  00C4  0830               	movf	??_setSegmentDisplayNumber,w
  1408  00C5  0081               	movwf	1
  1409                           
  1410                           ;SegmentDisplay_A2.c: 45: number%=1000;
  1411  00C6  30E8               	movlw	232
  1412  00C7  00A5               	movwf	___awmod@divisor
  1413  00C8  3003               	movlw	3
  1414  00C9  00A6               	movwf	___awmod@divisor+1
  1415  00CA  082F               	movf	setSegmentDisplayNumber@number+1,w
  1416  00CB  01A8               	clrf	___awmod@dividend+1
  1417  00CC  07A8               	addwf	___awmod@dividend+1,f
  1418  00CD  082E               	movf	setSegmentDisplayNumber@number,w
  1419  00CE  01A7               	clrf	___awmod@dividend
  1420  00CF  07A7               	addwf	___awmod@dividend,f
  1421  00D0  3185  257B  3180   	fcall	___awmod
  1422  00D3  0020               	movlb	0	; select bank0
  1423  00D4  0826               	movf	?___awmod+1,w
  1424  00D5  01AF               	clrf	setSegmentDisplayNumber@number+1
  1425  00D6  07AF               	addwf	setSegmentDisplayNumber@number+1,f
  1426  00D7  0825               	movf	?___awmod,w
  1427  00D8  01AE               	clrf	setSegmentDisplayNumber@number
  1428  00D9  07AE               	addwf	setSegmentDisplayNumber@number,f
  1429                           
  1430                           ;SegmentDisplay_A2.c: 46: Segment->Num[2]=(number/100);
  1431  00DA  3064               	movlw	100
  1432  00DB  00A5               	movwf	___awdiv@divisor
  1433  00DC  3000               	movlw	0
  1434  00DD  00A6               	movwf	___awdiv@divisor+1
  1435  00DE  082F               	movf	setSegmentDisplayNumber@number+1,w
  1436  00DF  01A8               	clrf	___awdiv@dividend+1
  1437  00E0  07A8               	addwf	___awdiv@dividend+1,f
  1438  00E1  082E               	movf	setSegmentDisplayNumber@number,w
  1439  00E2  01A7               	clrf	___awdiv@dividend
  1440  00E3  07A7               	addwf	___awdiv@dividend,f
  1441  00E4  3184  2484  3180   	fcall	___awdiv
  1442  00E7  0020               	movlb	0	; select bank0
  1443  00E8  0825               	movf	?___awdiv,w
  1444  00E9  00B0               	movwf	??_setSegmentDisplayNumber
  1445  00EA  085B               	movf	_Segment,w
  1446  00EB  3E13               	addlw	19
  1447  00EC  0086               	movwf	6
  1448  00ED  0187               	clrf	7
  1449  00EE  0830               	movf	??_setSegmentDisplayNumber,w
  1450  00EF  0081               	movwf	1
  1451                           
  1452                           ;SegmentDisplay_A2.c: 47: number%=100;
  1453  00F0  3064               	movlw	100
  1454  00F1  00A5               	movwf	___awmod@divisor
  1455  00F2  3000               	movlw	0
  1456  00F3  00A6               	movwf	___awmod@divisor+1
  1457  00F4  082F               	movf	setSegmentDisplayNumber@number+1,w
  1458  00F5  01A8               	clrf	___awmod@dividend+1
  1459  00F6  07A8               	addwf	___awmod@dividend+1,f
  1460  00F7  082E               	movf	setSegmentDisplayNumber@number,w
  1461  00F8  01A7               	clrf	___awmod@dividend
  1462  00F9  07A7               	addwf	___awmod@dividend,f
  1463  00FA  3185  257B  3180   	fcall	___awmod
  1464  00FD  0020               	movlb	0	; select bank0
  1465  00FE  0826               	movf	?___awmod+1,w
  1466  00FF  01AF               	clrf	setSegmentDisplayNumber@number+1
  1467  0100  07AF               	addwf	setSegmentDisplayNumber@number+1,f
  1468  0101  0825               	movf	?___awmod,w
  1469  0102  01AE               	clrf	setSegmentDisplayNumber@number
  1470  0103  07AE               	addwf	setSegmentDisplayNumber@number,f
  1471                           
  1472                           ;SegmentDisplay_A2.c: 48: Segment->Num[1]=(number/10);
  1473  0104  300A               	movlw	10
  1474  0105  00A5               	movwf	___awdiv@divisor
  1475  0106  3000               	movlw	0
  1476  0107  00A6               	movwf	___awdiv@divisor+1
  1477  0108  082F               	movf	setSegmentDisplayNumber@number+1,w
  1478  0109  01A8               	clrf	___awdiv@dividend+1
  1479  010A  07A8               	addwf	___awdiv@dividend+1,f
  1480  010B  082E               	movf	setSegmentDisplayNumber@number,w
  1481  010C  01A7               	clrf	___awdiv@dividend
  1482  010D  07A7               	addwf	___awdiv@dividend,f
  1483  010E  3184  2484  3180   	fcall	___awdiv
  1484  0111  0020               	movlb	0	; select bank0
  1485  0112  0825               	movf	?___awdiv,w
  1486  0113  00B0               	movwf	??_setSegmentDisplayNumber
  1487  0114  085B               	movf	_Segment,w
  1488  0115  3E12               	addlw	18
  1489  0116  0086               	movwf	6
  1490  0117  0187               	clrf	7
  1491  0118  0830               	movf	??_setSegmentDisplayNumber,w
  1492  0119  0081               	movwf	1
  1493                           
  1494                           ;SegmentDisplay_A2.c: 49: number%=10;
  1495  011A  300A               	movlw	10
  1496  011B  00A5               	movwf	___awmod@divisor
  1497  011C  3000               	movlw	0
  1498  011D  00A6               	movwf	___awmod@divisor+1
  1499  011E  082F               	movf	setSegmentDisplayNumber@number+1,w
  1500  011F  01A8               	clrf	___awmod@dividend+1
  1501  0120  07A8               	addwf	___awmod@dividend+1,f
  1502  0121  082E               	movf	setSegmentDisplayNumber@number,w
  1503  0122  01A7               	clrf	___awmod@dividend
  1504  0123  07A7               	addwf	___awmod@dividend,f
  1505  0124  3185  257B  3180   	fcall	___awmod
  1506  0127  0020               	movlb	0	; select bank0
  1507  0128  0826               	movf	?___awmod+1,w
  1508  0129  01AF               	clrf	setSegmentDisplayNumber@number+1
  1509  012A  07AF               	addwf	setSegmentDisplayNumber@number+1,f
  1510  012B  0825               	movf	?___awmod,w
  1511  012C  01AE               	clrf	setSegmentDisplayNumber@number
  1512  012D  07AE               	addwf	setSegmentDisplayNumber@number,f
  1513                           
  1514                           ;SegmentDisplay_A2.c: 50: Segment->Num[0]=number;
  1515  012E  082E               	movf	setSegmentDisplayNumber@number,w
  1516  012F  00B0               	movwf	??_setSegmentDisplayNumber
  1517  0130  085B               	movf	_Segment,w
  1518  0131  3E11               	addlw	17
  1519  0132  0086               	movwf	6
  1520  0133  0187               	clrf	7
  1521  0134  0830               	movf	??_setSegmentDisplayNumber,w
  1522  0135                     L1:	
  1523  0135  0081               	movwf	1
  1524  0136                     l1859:	
  1525                           
  1526                           ;SegmentDisplay_A2.c: 51: }
  1527                           ;SegmentDisplay_A2.c: 52: }
  1528                           ;SegmentDisplay_A2.c: 53: if(Segment->Num[3] > 0)
  1529  0136  085B               	movf	_Segment,w
  1530  0137  3E14               	addlw	20
  1531  0138  0086               	movwf	6
  1532  0139  0187               	clrf	7
  1533  013A  0801               	movf	1,w
  1534  013B  3A00               	xorlw	0
  1535  013C  1903               	skipnz
  1536  013D  2947               	goto	l1863
  1537                           
  1538                           ;SegmentDisplay_A2.c: 54: {
  1539                           ;SegmentDisplay_A2.c: 55: Segment->DisplayCount=3;
  1540  013E  3003               	movlw	3
  1541  013F  00B0               	movwf	??_setSegmentDisplayNumber
  1542  0140  085B               	movf	_Segment,w
  1543  0141  3E17               	addlw	23
  1544  0142  0086               	movwf	6
  1545  0143  0187               	clrf	7
  1546  0144  0830               	movf	??_setSegmentDisplayNumber,w
  1547  0145  0081               	movwf	1
  1548                           
  1549                           ;SegmentDisplay_A2.c: 56: }
  1550  0146  0008               	return
  1551  0147                     l1863:	
  1552                           
  1553                           ;SegmentDisplay_A2.c: 57: else if(Segment->Num[2] > 0)
  1554  0147  085B               	movf	_Segment,w
  1555  0148  3E13               	addlw	19
  1556  0149  0086               	movwf	6
  1557  014A  0187               	clrf	7
  1558  014B  0801               	movf	1,w
  1559  014C  3A00               	xorlw	0
  1560  014D  1903               	skipnz
  1561  014E  2958               	goto	l1867
  1562                           
  1563                           ;SegmentDisplay_A2.c: 58: {
  1564                           ;SegmentDisplay_A2.c: 59: Segment->DisplayCount=2;
  1565  014F  3002               	movlw	2
  1566  0150  00B0               	movwf	??_setSegmentDisplayNumber
  1567  0151  085B               	movf	_Segment,w
  1568  0152  3E17               	addlw	23
  1569  0153  0086               	movwf	6
  1570  0154  0187               	clrf	7
  1571  0155  0830               	movf	??_setSegmentDisplayNumber,w
  1572  0156  0081               	movwf	1
  1573                           
  1574                           ;SegmentDisplay_A2.c: 60: }
  1575  0157  0008               	return
  1576  0158                     l1867:	
  1577                           
  1578                           ;SegmentDisplay_A2.c: 61: else if(Segment->Num[1] > 0)
  1579  0158  085B               	movf	_Segment,w
  1580  0159  3E12               	addlw	18
  1581  015A  0086               	movwf	6
  1582  015B  0187               	clrf	7
  1583  015C  0801               	movf	1,w
  1584  015D  3A00               	xorlw	0
  1585  015E  1903               	skipnz
  1586  015F  2967               	goto	l1871
  1587                           
  1588                           ;SegmentDisplay_A2.c: 62: {
  1589                           ;SegmentDisplay_A2.c: 63: Segment->DisplayCount=1;
  1590  0160  085B               	movf	_Segment,w
  1591  0161  3E17               	addlw	23
  1592  0162  0086               	movwf	6
  1593  0163  0187               	clrf	7
  1594  0164  0181               	clrf	1
  1595  0165  0A81               	incf	1,f
  1596                           
  1597                           ;SegmentDisplay_A2.c: 64: }
  1598  0166  0008               	return
  1599  0167                     l1871:	
  1600                           
  1601                           ;SegmentDisplay_A2.c: 65: else
  1602                           ;SegmentDisplay_A2.c: 66: {
  1603                           ;SegmentDisplay_A2.c: 67: Segment->DisplayCount=0;
  1604  0167  085B               	movf	_Segment,w
  1605  0168  3E17               	addlw	23
  1606  0169  0086               	movwf	6
  1607  016A  0187               	clrf	7
  1608  016B  0181               	clrf	1
  1609  016C  0008               	return
  1610  016D                     __end_of_setSegmentDisplayNumber:	
  1611                           
  1612                           	psect	text3
  1613  057B                     __ptext3:	
  1614 ;; *************** function ___awmod *****************
  1615 ;; Defined at:
  1616 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  divisor         2    5[BANK0 ] int 
  1619 ;;  dividend        2    7[BANK0 ] int 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  sign            1   11[BANK0 ] unsigned char 
  1622 ;;  counter         1   10[BANK0 ] unsigned char 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  2    5[BANK0 ] int 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2, status,0
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1632 ;;      Params:         0       4       0       0       0       0       0       0
  1633 ;;      Locals:         0       2       0       0       0       0       0       0
  1634 ;;      Temps:          0       1       0       0       0       0       0       0
  1635 ;;      Totals:         0       7       0       0       0       0       0       0
  1636 ;;Total ram usage:        7 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    4
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_setSegmentDisplayNumber
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function ___awmod
  1648  057B                     ___awmod:	
  1649                           
  1650                           ;incstack = 0
  1651                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1652  057B  0020               	movlb	0	; select bank0
  1653  057C  01AB               	clrf	___awmod@sign
  1654  057D  1FA8               	btfss	___awmod@dividend+1,7
  1655  057E  2D86               	goto	l1709
  1656  057F  09A7               	comf	___awmod@dividend,f
  1657  0580  09A8               	comf	___awmod@dividend+1,f
  1658  0581  0AA7               	incf	___awmod@dividend,f
  1659  0582  1903               	skipnz
  1660  0583  0AA8               	incf	___awmod@dividend+1,f
  1661  0584  01AB               	clrf	___awmod@sign
  1662  0585  0AAB               	incf	___awmod@sign,f
  1663  0586                     l1709:	
  1664  0586  1FA6               	btfss	___awmod@divisor+1,7
  1665  0587  2D8D               	goto	l1713
  1666  0588  09A5               	comf	___awmod@divisor,f
  1667  0589  09A6               	comf	___awmod@divisor+1,f
  1668  058A  0AA5               	incf	___awmod@divisor,f
  1669  058B  1903               	skipnz
  1670  058C  0AA6               	incf	___awmod@divisor+1,f
  1671  058D                     l1713:	
  1672  058D  0826               	movf	___awmod@divisor+1,w
  1673  058E  0425               	iorwf	___awmod@divisor,w
  1674  058F  1903               	skipnz
  1675  0590  2DB4               	goto	l1731
  1676  0591  01AA               	clrf	___awmod@counter
  1677  0592  0AAA               	incf	___awmod@counter,f
  1678  0593                     l1721:	
  1679  0593  1BA6               	btfsc	___awmod@divisor+1,7
  1680  0594  2D9F               	goto	l1723
  1681  0595  3001               	movlw	1
  1682  0596                     u1775:	
  1683  0596  35A5               	lslf	___awmod@divisor,f
  1684  0597  0DA6               	rlf	___awmod@divisor+1,f
  1685  0598  0B89               	decfsz	9,f
  1686  0599  2D96               	goto	u1775
  1687  059A  3001               	movlw	1
  1688  059B  00A9               	movwf	??___awmod
  1689  059C  0829               	movf	??___awmod,w
  1690  059D  07AA               	addwf	___awmod@counter,f
  1691  059E  2D93               	goto	l1721
  1692  059F                     l1723:	
  1693  059F  0826               	movf	___awmod@divisor+1,w
  1694  05A0  0228               	subwf	___awmod@dividend+1,w
  1695  05A1  1D03               	skipz
  1696  05A2  2DA5               	goto	u1795
  1697  05A3  0825               	movf	___awmod@divisor,w
  1698  05A4  0227               	subwf	___awmod@dividend,w
  1699  05A5                     u1795:	
  1700  05A5  1C03               	skipc
  1701  05A6  2DAB               	goto	l1727
  1702  05A7  0825               	movf	___awmod@divisor,w
  1703  05A8  02A7               	subwf	___awmod@dividend,f
  1704  05A9  0826               	movf	___awmod@divisor+1,w
  1705  05AA  3BA8               	subwfb	___awmod@dividend+1,f
  1706  05AB                     l1727:	
  1707  05AB  3001               	movlw	1
  1708  05AC                     u1805:	
  1709  05AC  36A6               	lsrf	___awmod@divisor+1,f
  1710  05AD  0CA5               	rrf	___awmod@divisor,f
  1711  05AE  0B89               	decfsz	9,f
  1712  05AF  2DAC               	goto	u1805
  1713  05B0  3001               	movlw	1
  1714  05B1  02AA               	subwf	___awmod@counter,f
  1715  05B2  1D03               	btfss	3,2
  1716  05B3  2D9F               	goto	l1723
  1717  05B4                     l1731:	
  1718  05B4  082B               	movf	___awmod@sign,w
  1719  05B5  1903               	btfsc	3,2
  1720  05B6  2DBC               	goto	l1735
  1721  05B7  09A7               	comf	___awmod@dividend,f
  1722  05B8  09A8               	comf	___awmod@dividend+1,f
  1723  05B9  0AA7               	incf	___awmod@dividend,f
  1724  05BA  1903               	skipnz
  1725  05BB  0AA8               	incf	___awmod@dividend+1,f
  1726  05BC                     l1735:	
  1727  05BC  0828               	movf	___awmod@dividend+1,w
  1728  05BD  01A6               	clrf	?___awmod+1
  1729  05BE  07A6               	addwf	?___awmod+1,f
  1730  05BF  0827               	movf	___awmod@dividend,w
  1731  05C0  01A5               	clrf	?___awmod
  1732  05C1  07A5               	addwf	?___awmod,f
  1733  05C2  0008               	return
  1734  05C3                     __end_of___awmod:	
  1735                           
  1736                           	psect	text4
  1737  0484                     __ptext4:	
  1738 ;; *************** function ___awdiv *****************
  1739 ;; Defined at:
  1740 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  divisor         2    5[BANK0 ] int 
  1743 ;;  dividend        2    7[BANK0 ] int 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  quotient        2   12[BANK0 ] int 
  1746 ;;  sign            1   11[BANK0 ] unsigned char 
  1747 ;;  counter         1   10[BANK0 ] unsigned char 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  2    5[BANK0 ] int 
  1750 ;; Registers used:
  1751 ;;		wreg, status,2, status,0
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1757 ;;      Params:         0       4       0       0       0       0       0       0
  1758 ;;      Locals:         0       4       0       0       0       0       0       0
  1759 ;;      Temps:          0       1       0       0       0       0       0       0
  1760 ;;      Totals:         0       9       0       0       0       0       0       0
  1761 ;;Total ram usage:        9 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    4
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_setSegmentDisplayNumber
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           
  1772                           ;psect for function ___awdiv
  1773  0484                     ___awdiv:	
  1774                           
  1775                           ;incstack = 0
  1776                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1777  0484  0020               	movlb	0	; select bank0
  1778  0485  01AB               	clrf	___awdiv@sign
  1779  0486  1FA6               	btfss	___awdiv@divisor+1,7
  1780  0487  2C8F               	goto	l1665
  1781  0488  09A5               	comf	___awdiv@divisor,f
  1782  0489  09A6               	comf	___awdiv@divisor+1,f
  1783  048A  0AA5               	incf	___awdiv@divisor,f
  1784  048B  1903               	skipnz
  1785  048C  0AA6               	incf	___awdiv@divisor+1,f
  1786  048D  01AB               	clrf	___awdiv@sign
  1787  048E  0AAB               	incf	___awdiv@sign,f
  1788  048F                     l1665:	
  1789  048F  1FA8               	btfss	___awdiv@dividend+1,7
  1790  0490  2C9A               	goto	l1671
  1791  0491  09A7               	comf	___awdiv@dividend,f
  1792  0492  09A8               	comf	___awdiv@dividend+1,f
  1793  0493  0AA7               	incf	___awdiv@dividend,f
  1794  0494  1903               	skipnz
  1795  0495  0AA8               	incf	___awdiv@dividend+1,f
  1796  0496  3001               	movlw	1
  1797  0497  00A9               	movwf	??___awdiv
  1798  0498  0829               	movf	??___awdiv,w
  1799  0499  06AB               	xorwf	___awdiv@sign,f
  1800  049A                     l1671:	
  1801  049A  01AC               	clrf	___awdiv@quotient
  1802  049B  01AD               	clrf	___awdiv@quotient+1
  1803  049C  0826               	movf	___awdiv@divisor+1,w
  1804  049D  0425               	iorwf	___awdiv@divisor,w
  1805  049E  1903               	skipnz
  1806  049F  2CC9               	goto	l1693
  1807  04A0  01AA               	clrf	___awdiv@counter
  1808  04A1  0AAA               	incf	___awdiv@counter,f
  1809  04A2                     l1681:	
  1810  04A2  1BA6               	btfsc	___awdiv@divisor+1,7
  1811  04A3  2CAE               	goto	l1683
  1812  04A4  3001               	movlw	1
  1813  04A5                     u1675:	
  1814  04A5  35A5               	lslf	___awdiv@divisor,f
  1815  04A6  0DA6               	rlf	___awdiv@divisor+1,f
  1816  04A7  0B89               	decfsz	9,f
  1817  04A8  2CA5               	goto	u1675
  1818  04A9  3001               	movlw	1
  1819  04AA  00A9               	movwf	??___awdiv
  1820  04AB  0829               	movf	??___awdiv,w
  1821  04AC  07AA               	addwf	___awdiv@counter,f
  1822  04AD  2CA2               	goto	l1681
  1823  04AE                     l1683:	
  1824  04AE  3001               	movlw	1
  1825  04AF                     u1695:	
  1826  04AF  35AC               	lslf	___awdiv@quotient,f
  1827  04B0  0DAD               	rlf	___awdiv@quotient+1,f
  1828  04B1  0B89               	decfsz	9,f
  1829  04B2  2CAF               	goto	u1695
  1830  04B3  0826               	movf	___awdiv@divisor+1,w
  1831  04B4  0228               	subwf	___awdiv@dividend+1,w
  1832  04B5  1D03               	skipz
  1833  04B6  2CB9               	goto	u1705
  1834  04B7  0825               	movf	___awdiv@divisor,w
  1835  04B8  0227               	subwf	___awdiv@dividend,w
  1836  04B9                     u1705:	
  1837  04B9  1C03               	skipc
  1838  04BA  2CC0               	goto	l1689
  1839  04BB  0825               	movf	___awdiv@divisor,w
  1840  04BC  02A7               	subwf	___awdiv@dividend,f
  1841  04BD  0826               	movf	___awdiv@divisor+1,w
  1842  04BE  3BA8               	subwfb	___awdiv@dividend+1,f
  1843  04BF  142C               	bsf	___awdiv@quotient,0
  1844  04C0                     l1689:	
  1845  04C0  3001               	movlw	1
  1846  04C1                     u1715:	
  1847  04C1  36A6               	lsrf	___awdiv@divisor+1,f
  1848  04C2  0CA5               	rrf	___awdiv@divisor,f
  1849  04C3  0B89               	decfsz	9,f
  1850  04C4  2CC1               	goto	u1715
  1851  04C5  3001               	movlw	1
  1852  04C6  02AA               	subwf	___awdiv@counter,f
  1853  04C7  1D03               	btfss	3,2
  1854  04C8  2CAE               	goto	l1683
  1855  04C9                     l1693:	
  1856  04C9  082B               	movf	___awdiv@sign,w
  1857  04CA  1903               	btfsc	3,2
  1858  04CB  2CD1               	goto	l1697
  1859  04CC  09AC               	comf	___awdiv@quotient,f
  1860  04CD  09AD               	comf	___awdiv@quotient+1,f
  1861  04CE  0AAC               	incf	___awdiv@quotient,f
  1862  04CF  1903               	skipnz
  1863  04D0  0AAD               	incf	___awdiv@quotient+1,f
  1864  04D1                     l1697:	
  1865  04D1  082D               	movf	___awdiv@quotient+1,w
  1866  04D2  01A6               	clrf	?___awdiv+1
  1867  04D3  07A6               	addwf	?___awdiv+1,f
  1868  04D4  082C               	movf	___awdiv@quotient,w
  1869  04D5  01A5               	clrf	?___awdiv
  1870  04D6  07A5               	addwf	?___awdiv,f
  1871  04D7  0008               	return
  1872  04D8                     __end_of___awdiv:	
  1873                           
  1874                           	psect	text5
  1875  078C                     __ptext5:	
  1876 ;; *************** function _UART_Transmit *****************
  1877 ;; Defined at:
  1878 ;;		line 721 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;  i               1   33[BANK0 ] unsigned char 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;		None               void
  1885 ;; Registers used:
  1886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1892 ;;      Params:         0       0       0       0       0       0       0       0
  1893 ;;      Locals:         0       1       0       0       0       0       0       0
  1894 ;;      Temps:          0       3       0       0       0       0       0       0
  1895 ;;      Totals:         0       4       0       0       0       0       0       0
  1896 ;;Total ram usage:        4 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    6
  1899 ;; This function calls:
  1900 ;;		_printf
  1901 ;; This function is called by:
  1902 ;;		_UART_Main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           
  1907                           ;psect for function _UART_Transmit
  1908  078C                     _UART_Transmit:	
  1909                           
  1910                           ;MCU_B1.c: 723: char i;
  1911                           ;MCU_B1.c: 725: for(i=0;i<32;i++)
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _UART_Transmit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1915  078C  0020               	movlb	0	; select bank0
  1916  078D  01C1               	clrf	UART_Transmit@i
  1917  078E                     L3:	
  1918  078E  3020               	movlw	32
  1919  078F  0241               	subwf	UART_Transmit@i,w
  1920  0790  1803               	btfsc	3,0
  1921  0791  0008               	return
  1922                           
  1923                           ;MCU_B1.c: 726: {
  1924                           ;MCU_B1.c: 728: printf("%x,",UART->TxData[i]);
  1925  0792  3019               	movlw	low (STR_1| (0+32768))
  1926  0793  00AD               	movwf	printf@f
  1927  0794  3088               	movlw	high (STR_1| (0+32768))
  1928  0795  00AE               	movwf	printf@f+1
  1929  0796  0841               	movf	UART_Transmit@i,w
  1930  0797  0759               	addwf	_UART,w
  1931  0798  00BE               	movwf	??_UART_Transmit
  1932  0799  083E               	movf	??_UART_Transmit,w
  1933  079A  0086               	movwf	6
  1934  079B  3001               	movlw	1	; select bank2/3
  1935  079C  0087               	movwf	7
  1936  079D  0801               	movf	1,w
  1937  079E  00BF               	movwf	??_UART_Transmit+1
  1938  079F  01C0               	clrf	??_UART_Transmit+2
  1939  07A0  083F               	movf	??_UART_Transmit+1,w
  1940  07A1  00AF               	movwf	?_printf+2
  1941  07A2  0840               	movf	??_UART_Transmit+2,w
  1942  07A3  00B0               	movwf	?_printf+3
  1943  07A4  3182  229C  3187   	fcall	_printf
  1944  07A7  3001               	movlw	1
  1945  07A8  0020               	movlb	0	; select bank0
  1946  07A9  00BE               	movwf	??_UART_Transmit
  1947  07AA  083E               	movf	??_UART_Transmit,w
  1948  07AB  07C1               	addwf	UART_Transmit@i,f
  1949  07AC  2F8E               	goto	L3
  1950  07AD                     __end_of_UART_Transmit:	
  1951                           
  1952                           	psect	text6
  1953  029C                     __ptext6:	
  1954 ;; *************** function _printf *****************
  1955 ;; Defined at:
  1956 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;  f               2   13[BANK0 ] PTR const unsigned char 
  1959 ;;		 -> STR_1(4), 
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  idx             1   22[BANK0 ] unsigned char 
  1962 ;;  _val            4   24[BANK0 ] struct .
  1963 ;;  c               1   29[BANK0 ] char 
  1964 ;;  prec            1   28[BANK0 ] char 
  1965 ;;  ap              1   23[BANK0 ] PTR void [1]
  1966 ;;		 -> ?_printf(2), 
  1967 ;;  flag            1   21[BANK0 ] unsigned char 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  2   13[BANK0 ] int 
  1970 ;; Registers used:
  1971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1977 ;;      Params:         0       4       0       0       0       0       0       0
  1978 ;;      Locals:         0       9       0       0       0       0       0       0
  1979 ;;      Temps:          0       4       0       0       0       0       0       0
  1980 ;;      Totals:         0      17       0       0       0       0       0       0
  1981 ;;Total ram usage:       17 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    5
  1984 ;; This function calls:
  1985 ;;		___lwdiv
  1986 ;;		_putch
  1987 ;; This function is called by:
  1988 ;;		_UART_Transmit
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           
  1993                           ;psect for function _printf
  1994  029C                     _printf:	
  1995                           
  1996                           ;doprnt.c: 466: va_list ap;
  1997                           ;doprnt.c: 499: signed char c;
  1998                           ;doprnt.c: 506: signed char prec;
  1999                           ;doprnt.c: 508: unsigned char flag;
  2000                           ;doprnt.c: 527: union {
  2001                           ;doprnt.c: 528: unsigned int _val;
  2002                           ;doprnt.c: 529: struct {
  2003                           ;doprnt.c: 530: const char * _cp;
  2004                           ;doprnt.c: 531: unsigned _len;
  2005                           ;doprnt.c: 532: } _str;
  2006                           ;doprnt.c: 533: } _val;
  2007                           ;doprnt.c: 542: *ap = __va_start();
  2008                           
  2009                           ;incstack = 0
  2010                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2011  029C  302F               	movlw	(?_printf+2)& (0+255)
  2012  029D  0020               	movlb	0	; select bank0
  2013  029E  00B1               	movwf	??_printf
  2014  029F  0831               	movf	??_printf,w
  2015  02A0  00B7               	movwf	printf@ap
  2016  02A1                     l1655:	
  2017                           ;doprnt.c: 545: while(c = *f++) {
  2018                           
  2019  02A1  0020               	movlb	0	; select bank0
  2020  02A2  082E               	movf	printf@f+1,w
  2021  02A3  00B2               	movwf	??_printf+1
  2022  02A4  082D               	movf	printf@f,w
  2023  02A5  00B1               	movwf	??_printf
  2024  02A6  0AAD               	incf	printf@f,f
  2025  02A7  1903               	skipnz
  2026  02A8  0AAE               	incf	printf@f+1,f
  2027  02A9  0831               	movf	??_printf,w
  2028  02AA  0084               	movwf	4
  2029  02AB  0832               	movf	??_printf+1,w
  2030  02AC  0085               	movwf	5
  2031  02AD  0800               	movf	0,w	;code access
  2032  02AE  00B3               	movwf	??_printf+2
  2033  02AF  0833               	movf	??_printf+2,w
  2034  02B0  00BD               	movwf	printf@c
  2035  02B1  08BD               	movf	printf@c,f
  2036  02B2  1903               	btfsc	3,2
  2037  02B3  0008               	return
  2038                           
  2039                           ;doprnt.c: 547: if(c != '%')
  2040  02B4  083D               	movf	printf@c,w
  2041  02B5  3A25               	xorlw	37
  2042  02B6  1903               	skipnz
  2043  02B7  2ABD               	goto	l1621
  2044                           
  2045                           ;doprnt.c: 549: {
  2046                           ;doprnt.c: 550: (putch(c) );
  2047  02B8  083D               	movf	printf@c,w
  2048  02B9  318F  27CC  3182   	fcall	_putch
  2049                           
  2050                           ;doprnt.c: 551: continue;
  2051  02BC  2AA1               	goto	l1655
  2052  02BD                     l1621:	
  2053                           
  2054                           ;doprnt.c: 552: }
  2055                           ;doprnt.c: 557: flag = 0;
  2056  02BD  0020               	movlb	0	; select bank0
  2057  02BE  01B5               	clrf	printf@flag
  2058                           
  2059                           ;doprnt.c: 831: }
  2060                           
  2061                           ;doprnt.c: 822: continue;
  2062                           
  2063                           ;doprnt.c: 811: default:
  2064                           
  2065                           ;doprnt.c: 732: break;
  2066                           
  2067                           ;doprnt.c: 727: case 'x':
  2068                           
  2069                           ;doprnt.c: 647: goto alldone;
  2070                           
  2071                           ;doprnt.c: 646: case 0:
  2072                           
  2073                           ;doprnt.c: 644: switch(c = *f++) {
  2074  02BF  082E               	movf	printf@f+1,w
  2075  02C0  00B2               	movwf	??_printf+1
  2076  02C1  082D               	movf	printf@f,w
  2077  02C2  00B1               	movwf	??_printf
  2078  02C3  0AAD               	incf	printf@f,f
  2079  02C4  1903               	skipnz
  2080  02C5  0AAE               	incf	printf@f+1,f
  2081  02C6  0831               	movf	??_printf,w
  2082  02C7  0084               	movwf	4
  2083  02C8  0832               	movf	??_printf+1,w
  2084  02C9  0085               	movwf	5
  2085  02CA  0800               	movf	0,w	;code access
  2086  02CB  00BD               	movwf	printf@c
  2087                           
  2088                           ; Switch size 1, requested type "space"
  2089                           ; Number of cases is 2, Range of values is 0 to 120
  2090                           ; switch strategies available:
  2091                           ; Name         Instructions Cycles
  2092                           ; simple_byte            7     4 (average)
  2093                           ; direct_byte          248     6 (fixed)
  2094                           ; jumptable            260     6 (fixed)
  2095                           ;	Chosen strategy is simple_byte
  2096  02CC  3A00               	xorlw	0	; case 0
  2097  02CD  1903               	skipnz
  2098  02CE  2B3E               	goto	l510
  2099  02CF  3A78               	xorlw	120	; case 120
  2100  02D0  1903               	skipnz
  2101  02D1  2AD3               	goto	l1627
  2102  02D2  2AA1               	goto	l1655
  2103  02D3                     l1627:	
  2104                           
  2105                           ;doprnt.c: 1282: {
  2106                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2107  02D3  0837               	movf	printf@ap,w
  2108  02D4  0086               	movwf	6
  2109  02D5  0187               	clrf	7
  2110  02D6  3F40               	moviw [0]fsr1
  2111  02D7  00B8               	movwf	printf@_val
  2112  02D8  3F41               	moviw [1]fsr1
  2113  02D9  00B9               	movwf	printf@_val+1
  2114  02DA  3002               	movlw	2
  2115  02DB  00B1               	movwf	??_printf
  2116  02DC  0831               	movf	??_printf,w
  2117  02DD  07B7               	addwf	printf@ap,f
  2118                           
  2119                           ;doprnt.c: 1296: }
  2120                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2121  02DE  01BD               	clrf	printf@c
  2122  02DF  0ABD               	incf	printf@c,f
  2123  02E0  083D               	movf	printf@c,w
  2124  02E1  3A04               	xorlw	4
  2125  02E2  1903               	btfsc	3,2
  2126  02E3  2B03               	goto	l1645
  2127  02E4                     l1637:	
  2128                           
  2129                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
  2130  02E4  083D               	movf	printf@c,w
  2131  02E5  00B1               	movwf	??_printf
  2132  02E6  01B2               	clrf	??_printf+1
  2133  02E7  35B1               	lslf	??_printf,f
  2134  02E8  0DB2               	rlf	??_printf+1,f
  2135  02E9  3000               	movlw	low (_hexpowers| (0+32768))
  2136  02EA  0731               	addwf	??_printf,w
  2137  02EB  0084               	movwf	4
  2138  02EC  3088               	movlw	high (_hexpowers| (0+32768))
  2139  02ED  3D32               	addwfc	??_printf+1,w
  2140  02EE  0085               	movwf	5
  2141  02EF  3F00               	moviw [0]fsr0
  2142  02F0  00B3               	movwf	??_printf+2
  2143  02F1  3F01               	moviw [1]fsr0
  2144  02F2  00B4               	movwf	??_printf+3
  2145  02F3  0834               	movf	??_printf+3,w
  2146  02F4  0239               	subwf	printf@_val+1,w
  2147  02F5  1D03               	skipz
  2148  02F6  2AF9               	goto	u1605
  2149  02F7  0833               	movf	??_printf+2,w
  2150  02F8  0238               	subwf	printf@_val,w
  2151  02F9                     u1605:	
  2152  02F9  1C03               	btfss	3,0
  2153  02FA  2B03               	goto	l1645
  2154                           
  2155                           ;doprnt.c: 1327: break;
  2156  02FB  3001               	movlw	1
  2157  02FC  00B1               	movwf	??_printf
  2158  02FD  0831               	movf	??_printf,w
  2159  02FE  07BD               	addwf	printf@c,f
  2160  02FF  083D               	movf	printf@c,w
  2161  0300  3A04               	xorlw	4
  2162  0301  1D03               	skipz
  2163  0302  2AE4               	goto	l1637
  2164  0303                     l1645:	
  2165                           
  2166                           ;doprnt.c: 1431: {
  2167                           ;doprnt.c: 1478: }
  2168                           ;doprnt.c: 1481: prec = c;
  2169  0303  083D               	movf	printf@c,w
  2170  0304  00B1               	movwf	??_printf
  2171  0305  0831               	movf	??_printf,w
  2172  0306  00BC               	movwf	printf@prec
  2173  0307                     l1653:	
  2174                           ;doprnt.c: 1483: while(prec--) {
  2175                           
  2176  0307  30FF               	movlw	-1
  2177  0308  0020               	movlb	0	; select bank0
  2178  0309  00B1               	movwf	??_printf
  2179  030A  0831               	movf	??_printf,w
  2180  030B  07BC               	addwf	printf@prec,f
  2181  030C  083C               	movf	printf@prec,w
  2182  030D  3AFF               	xorlw	255
  2183  030E  1903               	btfsc	3,2
  2184  030F  2AA1               	goto	l1655
  2185                           
  2186                           ;doprnt.c: 1487: {
  2187                           ;doprnt.c: 1508: {
  2188                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  2189  0310  083C               	movf	printf@prec,w
  2190  0311  00B1               	movwf	??_printf
  2191  0312  01B2               	clrf	??_printf+1
  2192  0313  35B1               	lslf	??_printf,f
  2193  0314  0DB2               	rlf	??_printf+1,f
  2194  0315  3000               	movlw	low (_hexpowers| (0+32768))
  2195  0316  0731               	addwf	??_printf,w
  2196  0317  0084               	movwf	4
  2197  0318  3088               	movlw	high (_hexpowers| (0+32768))
  2198  0319  3D32               	addwfc	??_printf+1,w
  2199  031A  0085               	movwf	5
  2200  031B  3F00               	moviw [0]fsr0
  2201  031C  00A5               	movwf	___lwdiv@divisor
  2202  031D  3F01               	moviw [1]fsr0
  2203  031E  00A6               	movwf	___lwdiv@divisor+1
  2204  031F  0839               	movf	printf@_val+1,w
  2205  0320  01A8               	clrf	___lwdiv@dividend+1
  2206  0321  07A8               	addwf	___lwdiv@dividend+1,f
  2207  0322  0838               	movf	printf@_val,w
  2208  0323  01A7               	clrf	___lwdiv@dividend
  2209  0324  07A7               	addwf	___lwdiv@dividend,f
  2210  0325  3186  267C  3182   	fcall	___lwdiv
  2211  0328  0020               	movlb	0	; select bank0
  2212  0329  0825               	movf	?___lwdiv,w
  2213  032A  390F               	andlw	15
  2214  032B  00B3               	movwf	??_printf+2
  2215  032C  0833               	movf	??_printf+2,w
  2216  032D  00B6               	movwf	printf@idx
  2217                           
  2218                           ;doprnt.c: 1515: c = "0123456789abcdef"[idx];
  2219  032E  0836               	movf	printf@idx,w
  2220  032F  3E08               	addlw	low (STR_2| (0+32768))
  2221  0330  0084               	movwf	4
  2222  0331  3088               	movlw	high (STR_2| (0+32768))
  2223  0332  1803               	skipnc
  2224  0333  3E01               	addlw	1
  2225  0334  0085               	movwf	5
  2226  0335  0800               	movf	0,w	;code access
  2227  0336  00B1               	movwf	??_printf
  2228  0337  0831               	movf	??_printf,w
  2229  0338  00BD               	movwf	printf@c
  2230                           
  2231                           ;doprnt.c: 1517: }
  2232                           ;doprnt.c: 1532: }
  2233                           ;doprnt.c: 1533: (putch(c) );
  2234  0339  083D               	movf	printf@c,w
  2235  033A  318F  27CC  3182   	fcall	_putch
  2236  033D  2B07               	goto	l1653
  2237  033E                     l510:	
  2238                           ;doprnt.c: 1549: return 0;
  2239                           ;	Return value of _printf is never used
  2240                           
  2241                           ;doprnt.c: 1534: }
  2242                           ;doprnt.c: 1542: }
  2243                           ;doprnt.c: 1544: alldone:
  2244                           
  2245  033E  0008               	return
  2246  033F                     __end_of_printf:	
  2247                           
  2248                           	psect	text7
  2249  0FCC                     __ptext7:	
  2250 ;; *************** function _putch *****************
  2251 ;; Defined at:
  2252 ;;		line 777 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  byte            1    wreg     unsigned char 
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;  byte            1    5[BANK0 ] unsigned char 
  2257 ;; Return value:  Size  Location     Type
  2258 ;;		None               void
  2259 ;; Registers used:
  2260 ;;		wreg
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2266 ;;      Params:         0       0       0       0       0       0       0       0
  2267 ;;      Locals:         0       1       0       0       0       0       0       0
  2268 ;;      Temps:          0       0       0       0       0       0       0       0
  2269 ;;      Totals:         0       1       0       0       0       0       0       0
  2270 ;;Total ram usage:        1 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; Hardware stack levels required when called:    4
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_printf
  2277 ;;		_getche
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           
  2282                           ;psect for function _putch
  2283  0FCC                     _putch:	
  2284                           
  2285                           ;incstack = 0
  2286                           ; Regs used in _putch: [wreg]
  2287                           ;putch@byte stored from wreg
  2288  0FCC  0020               	movlb	0	; select bank0
  2289  0FCD  00A5               	movwf	putch@byte
  2290  0FCE                     l471:	
  2291                           ;MCU_B1.c: 781: continue;
  2292                           
  2293                           ;MCU_B1.c: 780: while(!TXIF)
  2294                           
  2295  0FCE  1E11               	btfss	17,4	;volatile
  2296  0FCF  2FCE               	goto	l471
  2297                           
  2298                           ;MCU_B1.c: 782: TXREG = byte;
  2299  0FD0  0825               	movf	putch@byte,w
  2300  0FD1  0023               	movlb	3	; select bank3
  2301  0FD2  009A               	movwf	26	;volatile
  2302  0FD3  0008               	return
  2303  0FD4                     __end_of_putch:	
  2304                           
  2305                           	psect	text8
  2306  067C                     __ptext8:	
  2307 ;; *************** function ___lwdiv *****************
  2308 ;; Defined at:
  2309 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  divisor         2    5[BANK0 ] unsigned int 
  2312 ;;  dividend        2    7[BANK0 ] unsigned int 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  quotient        2   10[BANK0 ] unsigned int 
  2315 ;;  counter         1   12[BANK0 ] unsigned char 
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  2    5[BANK0 ] unsigned int 
  2318 ;; Registers used:
  2319 ;;		wreg, status,2, status,0
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2325 ;;      Params:         0       4       0       0       0       0       0       0
  2326 ;;      Locals:         0       3       0       0       0       0       0       0
  2327 ;;      Temps:          0       1       0       0       0       0       0       0
  2328 ;;      Totals:         0       8       0       0       0       0       0       0
  2329 ;;Total ram usage:        8 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    4
  2332 ;; This function calls:
  2333 ;;		Nothing
  2334 ;; This function is called by:
  2335 ;;		_printf
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           
  2340                           ;psect for function ___lwdiv
  2341  067C                     ___lwdiv:	
  2342                           
  2343                           ;incstack = 0
  2344                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2345  067C  0020               	movlb	0	; select bank0
  2346  067D  01AA               	clrf	___lwdiv@quotient
  2347  067E  01AB               	clrf	___lwdiv@quotient+1
  2348  067F  0826               	movf	___lwdiv@divisor+1,w
  2349  0680  0425               	iorwf	___lwdiv@divisor,w
  2350  0681  1903               	skipnz
  2351  0682  2EAC               	goto	l1611
  2352  0683  01AC               	clrf	___lwdiv@counter
  2353  0684  0AAC               	incf	___lwdiv@counter,f
  2354  0685                     l1599:	
  2355  0685  1BA6               	btfsc	___lwdiv@divisor+1,7
  2356  0686  2E91               	goto	l1601
  2357  0687  3001               	movlw	1
  2358  0688                     u1525:	
  2359  0688  35A5               	lslf	___lwdiv@divisor,f
  2360  0689  0DA6               	rlf	___lwdiv@divisor+1,f
  2361  068A  0B89               	decfsz	9,f
  2362  068B  2E88               	goto	u1525
  2363  068C  3001               	movlw	1
  2364  068D  00A9               	movwf	??___lwdiv
  2365  068E  0829               	movf	??___lwdiv,w
  2366  068F  07AC               	addwf	___lwdiv@counter,f
  2367  0690  2E85               	goto	l1599
  2368  0691                     l1601:	
  2369  0691  3001               	movlw	1
  2370  0692                     u1545:	
  2371  0692  35AA               	lslf	___lwdiv@quotient,f
  2372  0693  0DAB               	rlf	___lwdiv@quotient+1,f
  2373  0694  0B89               	decfsz	9,f
  2374  0695  2E92               	goto	u1545
  2375  0696  0826               	movf	___lwdiv@divisor+1,w
  2376  0697  0228               	subwf	___lwdiv@dividend+1,w
  2377  0698  1D03               	skipz
  2378  0699  2E9C               	goto	u1555
  2379  069A  0825               	movf	___lwdiv@divisor,w
  2380  069B  0227               	subwf	___lwdiv@dividend,w
  2381  069C                     u1555:	
  2382  069C  1C03               	skipc
  2383  069D  2EA3               	goto	l1607
  2384  069E  0825               	movf	___lwdiv@divisor,w
  2385  069F  02A7               	subwf	___lwdiv@dividend,f
  2386  06A0  0826               	movf	___lwdiv@divisor+1,w
  2387  06A1  3BA8               	subwfb	___lwdiv@dividend+1,f
  2388  06A2  142A               	bsf	___lwdiv@quotient,0
  2389  06A3                     l1607:	
  2390  06A3  3001               	movlw	1
  2391  06A4                     u1565:	
  2392  06A4  36A6               	lsrf	___lwdiv@divisor+1,f
  2393  06A5  0CA5               	rrf	___lwdiv@divisor,f
  2394  06A6  0B89               	decfsz	9,f
  2395  06A7  2EA4               	goto	u1565
  2396  06A8  3001               	movlw	1
  2397  06A9  02AC               	subwf	___lwdiv@counter,f
  2398  06AA  1D03               	btfss	3,2
  2399  06AB  2E91               	goto	l1601
  2400  06AC                     l1611:	
  2401  06AC  082B               	movf	___lwdiv@quotient+1,w
  2402  06AD  01A6               	clrf	?___lwdiv+1
  2403  06AE  07A6               	addwf	?___lwdiv+1,f
  2404  06AF  082A               	movf	___lwdiv@quotient,w
  2405  06B0  01A5               	clrf	?___lwdiv
  2406  06B1  07A5               	addwf	?___lwdiv,f
  2407  06B2  0008               	return
  2408  06B3                     __end_of___lwdiv:	
  2409                           
  2410                           	psect	text9
  2411  06E7                     __ptext9:	
  2412 ;; *************** function _UART_Receive *****************
  2413 ;; Defined at:
  2414 ;;		line 738 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  i               1    8[BANK0 ] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;		None               void
  2421 ;; Registers used:
  2422 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2428 ;;      Params:         0       0       0       0       0       0       0       0
  2429 ;;      Locals:         0       1       0       0       0       0       0       0
  2430 ;;      Temps:          0       3       0       0       0       0       0       0
  2431 ;;      Totals:         0       4       0       0       0       0       0       0
  2432 ;;Total ram usage:        4 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    4
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_UART_Main
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _UART_Receive
  2444  06E7                     _UART_Receive:	
  2445                           
  2446                           ;MCU_B1.c: 740: char i;
  2447                           ;MCU_B1.c: 741: RA1=~RA1;
  2448                           
  2449                           ;incstack = 0
  2450                           ; Regs used in _UART_Receive: [wreg+fsr1l+fsr1h+status,2+status,0]
  2451  06E7  3002               	movlw	2
  2452  06E8  0020               	movlb	0	; select bank0
  2453  06E9  068C               	xorwf	12,f
  2454                           
  2455                           ;MCU_B1.c: 743: TMain->Test=1;
  2456  06EA  0857               	movf	_TMain,w
  2457  06EB  3E0C               	addlw	12
  2458  06EC  0086               	movwf	6
  2459  06ED  0187               	clrf	7
  2460  06EE  0181               	clrf	1
  2461  06EF  0A81               	incf	1,f
  2462                           
  2463                           ;MCU_B1.c: 745: for(i=0;i<32;i++)
  2464  06F0  01A8               	clrf	UART_Receive@i
  2465  06F1  3020               	movlw	32
  2466  06F2  0228               	subwf	UART_Receive@i,w
  2467  06F3  1803               	btfsc	3,0
  2468  06F4  2F11               	goto	l1977
  2469  06F5                     l1971:	
  2470                           
  2471                           ;MCU_B1.c: 746: {
  2472                           ;MCU_B1.c: 747: I2C->BufferWriter[i]=UART->RxData[i];
  2473  06F5  0828               	movf	UART_Receive@i,w
  2474  06F6  3E20               	addlw	32
  2475  06F7  0759               	addwf	_UART,w
  2476  06F8  00A5               	movwf	??_UART_Receive
  2477  06F9  0825               	movf	??_UART_Receive,w
  2478  06FA  0086               	movwf	6
  2479  06FB  3001               	movlw	1	; select bank2/3
  2480  06FC  0087               	movwf	7
  2481  06FD  0801               	movf	1,w
  2482  06FE  00A6               	movwf	??_UART_Receive+1
  2483  06FF  0828               	movf	UART_Receive@i,w
  2484  0700  3E20               	addlw	32
  2485  0701  075A               	addwf	_I2C,w
  2486  0702  00A7               	movwf	??_UART_Receive+2
  2487  0703  0827               	movf	??_UART_Receive+2,w
  2488  0704  0086               	movwf	6
  2489  0705  3001               	movlw	1	; select bank2/3
  2490  0706  0087               	movwf	7
  2491  0707  0826               	movf	??_UART_Receive+1,w
  2492  0708  0081               	movwf	1
  2493  0709  3001               	movlw	1
  2494  070A  00A5               	movwf	??_UART_Receive
  2495  070B  0825               	movf	??_UART_Receive,w
  2496  070C  07A8               	addwf	UART_Receive@i,f
  2497  070D  3020               	movlw	32
  2498  070E  0228               	subwf	UART_Receive@i,w
  2499  070F  1C03               	skipc
  2500  0710  2EF5               	goto	l1971
  2501  0711                     l1977:	
  2502                           
  2503                           ;MCU_B1.c: 748: }
  2504                           ;MCU_B1.c: 749: I2C->MasterTxGO=1;
  2505  0711  085A               	movf	_I2C,w
  2506  0712  3E42               	addlw	66
  2507  0713  0086               	movwf	6
  2508  0714  3001               	movlw	1	; select bank2/3
  2509  0715  0087               	movwf	7
  2510  0716  1581               	bsf	1,3
  2511  0717  0008               	return
  2512  0718                     __end_of_UART_Receive:	
  2513                           
  2514                           	psect	text10
  2515  033F                     __ptext10:	
  2516 ;; *************** function _SegmentDisplay_Main *****************
  2517 ;; Defined at:
  2518 ;;		line 72 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;		None
  2523 ;; Return value:  Size  Location     Type
  2524 ;;		None               void
  2525 ;; Registers used:
  2526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2532 ;;      Params:         0       0       0       0       0       0       0       0
  2533 ;;      Locals:         0       0       0       0       0       0       0       0
  2534 ;;      Temps:          0       2       0       0       0       0       0       0
  2535 ;;      Totals:         0       2       0       0       0       0       0       0
  2536 ;;Total ram usage:        2 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    4
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_main
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           
  2547                           ;psect for function _SegmentDisplay_Main
  2548  033F                     _SegmentDisplay_Main:	
  2549                           
  2550                           ;SegmentDisplay_A2.c: 74: if(Segment->GO)
  2551                           
  2552                           ;incstack = 0
  2553                           ; Regs used in _SegmentDisplay_Main: [wreg-fsr1h+status,2+status,0]
  2554  033F  0020               	movlb	0	; select bank0
  2555  0340  085B               	movf	_Segment,w
  2556  0341  3E15               	addlw	21
  2557  0342  0086               	movwf	6
  2558  0343  0187               	clrf	7
  2559  0344  1C81               	btfss	1,1
  2560  0345  0008               	return
  2561                           
  2562                           ;SegmentDisplay_A2.c: 75: {
  2563                           ;SegmentDisplay_A2.c: 76: Segment->Time++;
  2564  0346  3001               	movlw	1
  2565  0347  00A5               	movwf	??_SegmentDisplay_Main
  2566  0348  085B               	movf	_Segment,w
  2567  0349  3E19               	addlw	25
  2568  034A  0086               	movwf	6
  2569  034B  0187               	clrf	7
  2570  034C  0825               	movf	??_SegmentDisplay_Main,w
  2571  034D  0781               	addwf	1,f
  2572                           
  2573                           ;SegmentDisplay_A2.c: 77: if(Segment->Time == 5)
  2574  034E  085B               	movf	_Segment,w
  2575  034F  3E19               	addlw	25
  2576  0350  0086               	movwf	6
  2577  0351  0187               	clrf	7
  2578  0352  0801               	movf	1,w
  2579  0353  3A05               	xorlw	5
  2580  0354  1D03               	skipz
  2581  0355  0008               	return
  2582                           
  2583                           ;SegmentDisplay_A2.c: 78: {
  2584                           ;SegmentDisplay_A2.c: 79: Segment->Time=0;
  2585  0356  085B               	movf	_Segment,w
  2586  0357  3E19               	addlw	25
  2587  0358  0086               	movwf	6
  2588  0359  0187               	clrf	7
  2589  035A  0181               	clrf	1
  2590                           
  2591                           ;SegmentDisplay_A2.c: 80: PORTA&=0x0f;
  2592  035B  300F               	movlw	15
  2593  035C  00A5               	movwf	??_SegmentDisplay_Main
  2594  035D  0825               	movf	??_SegmentDisplay_Main,w
  2595  035E  058C               	andwf	12,f	;volatile
  2596                           
  2597                           ;SegmentDisplay_A2.c: 81: if(Segment->ComCount == 0)
  2598  035F  085B               	movf	_Segment,w
  2599  0360  3E16               	addlw	22
  2600  0361  0086               	movwf	6
  2601  0362  0187               	clrf	7
  2602  0363  0881               	movf	1,f
  2603  0364  1D03               	skipz
  2604  0365  2B68               	goto	l2155
  2605                           
  2606                           ;SegmentDisplay_A2.c: 82: {
  2607                           ;SegmentDisplay_A2.c: 83: RA4=1;
  2608  0366  160C               	bsf	12,4	;volatile
  2609                           
  2610                           ;SegmentDisplay_A2.c: 84: }
  2611  0367  2B84               	goto	l2167
  2612  0368                     l2155:	
  2613                           
  2614                           ;SegmentDisplay_A2.c: 85: else if(Segment->ComCount == 1)
  2615  0368  085B               	movf	_Segment,w
  2616  0369  3E16               	addlw	22
  2617  036A  0086               	movwf	6
  2618  036B  0187               	clrf	7
  2619  036C  0801               	movf	1,w
  2620  036D  3A01               	xorlw	1
  2621  036E  1D03               	skipz
  2622  036F  2B72               	goto	l2159
  2623                           
  2624                           ;SegmentDisplay_A2.c: 86: {
  2625                           ;SegmentDisplay_A2.c: 87: RA5=1;
  2626  0370  168C               	bsf	12,5	;volatile
  2627                           
  2628                           ;SegmentDisplay_A2.c: 88: }
  2629  0371  2B84               	goto	l2167
  2630  0372                     l2159:	
  2631                           
  2632                           ;SegmentDisplay_A2.c: 89: else if(Segment->ComCount == 2)
  2633  0372  085B               	movf	_Segment,w
  2634  0373  3E16               	addlw	22
  2635  0374  0086               	movwf	6
  2636  0375  0187               	clrf	7
  2637  0376  0801               	movf	1,w
  2638  0377  3A02               	xorlw	2
  2639  0378  1D03               	skipz
  2640  0379  2B7C               	goto	l2163
  2641                           
  2642                           ;SegmentDisplay_A2.c: 90: {
  2643                           ;SegmentDisplay_A2.c: 91: RA6=1;
  2644  037A  170C               	bsf	12,6	;volatile
  2645                           
  2646                           ;SegmentDisplay_A2.c: 92: }
  2647  037B  2B84               	goto	l2167
  2648  037C                     l2163:	
  2649                           
  2650                           ;SegmentDisplay_A2.c: 93: else if(Segment->ComCount == 3)
  2651  037C  085B               	movf	_Segment,w
  2652  037D  3E16               	addlw	22
  2653  037E  0086               	movwf	6
  2654  037F  0187               	clrf	7
  2655  0380  0801               	movf	1,w
  2656  0381  3A03               	xorlw	3
  2657  0382  1903               	btfsc	3,2
  2658                           
  2659                           ;SegmentDisplay_A2.c: 94: {
  2660                           ;SegmentDisplay_A2.c: 95: RA7=1;
  2661  0383  178C               	bsf	12,7	;volatile
  2662  0384                     l2167:	
  2663                           
  2664                           ;SegmentDisplay_A2.c: 96: }
  2665                           ;SegmentDisplay_A2.c: 97: PORTB=Segment->Display[Segment->Num[Segment->ComCount]];
  2666  0384  085B               	movf	_Segment,w
  2667  0385  3E16               	addlw	22
  2668  0386  0086               	movwf	6
  2669  0387  0187               	clrf	7
  2670  0388  0801               	movf	1,w
  2671  0389  3E11               	addlw	17
  2672  038A  075B               	addwf	_Segment,w
  2673  038B  00A5               	movwf	??_SegmentDisplay_Main
  2674  038C  0825               	movf	??_SegmentDisplay_Main,w
  2675  038D  0086               	movwf	6
  2676  038E  0187               	clrf	7
  2677  038F  0801               	movf	1,w
  2678  0390  075B               	addwf	_Segment,w
  2679  0391  00A6               	movwf	??_SegmentDisplay_Main+1
  2680  0392  0826               	movf	??_SegmentDisplay_Main+1,w
  2681  0393  0086               	movwf	6
  2682  0394  0187               	clrf	7
  2683  0395  0801               	movf	1,w
  2684  0396  008D               	movwf	13	;volatile
  2685                           
  2686                           ;SegmentDisplay_A2.c: 98: if(Segment->ComCount < Segment->DisplayCount)
  2687  0397  085B               	movf	_Segment,w
  2688  0398  3E16               	addlw	22
  2689  0399  0086               	movwf	6
  2690  039A  0187               	clrf	7
  2691  039B  085B               	movf	_Segment,w
  2692  039C  3E17               	addlw	23
  2693  039D  0084               	movwf	4
  2694  039E  0185               	clrf	5
  2695  039F  0800               	movf	0,w
  2696  03A0  0201               	subwf	1,w
  2697  03A1  1803               	skipnc
  2698  03A2  2BAC               	goto	l2173
  2699                           
  2700                           ;SegmentDisplay_A2.c: 99: {
  2701                           ;SegmentDisplay_A2.c: 100: Segment->ComCount++;
  2702  03A3  3001               	movlw	1
  2703  03A4  00A5               	movwf	??_SegmentDisplay_Main
  2704  03A5  085B               	movf	_Segment,w
  2705  03A6  3E16               	addlw	22
  2706  03A7  0086               	movwf	6
  2707  03A8  0187               	clrf	7
  2708  03A9  0825               	movf	??_SegmentDisplay_Main,w
  2709  03AA  0781               	addwf	1,f
  2710                           
  2711                           ;SegmentDisplay_A2.c: 101: }
  2712  03AB  0008               	return
  2713  03AC                     l2173:	
  2714                           
  2715                           ;SegmentDisplay_A2.c: 102: else
  2716                           ;SegmentDisplay_A2.c: 103: {
  2717                           ;SegmentDisplay_A2.c: 104: Segment->ComCount=0;
  2718  03AC  085B               	movf	_Segment,w
  2719  03AD  3E16               	addlw	22
  2720  03AE  0086               	movwf	6
  2721  03AF  0187               	clrf	7
  2722  03B0  0181               	clrf	1
  2723  03B1  0008               	return
  2724  03B2                     __end_of_SegmentDisplay_Main:	
  2725                           
  2726                           	psect	text11
  2727  07DC                     __ptext11:	
  2728 ;; *************** function _SegmentDisplay_Initial *****************
  2729 ;; Defined at:
  2730 ;;		line 8 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;		None               void
  2737 ;; Registers used:
  2738 ;;		wreg, fsr1l, fsr1h
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2744 ;;      Params:         0       0       0       0       0       0       0       0
  2745 ;;      Locals:         0       0       0       0       0       0       0       0
  2746 ;;      Temps:          0       1       0       0       0       0       0       0
  2747 ;;      Totals:         0       1       0       0       0       0       0       0
  2748 ;;Total ram usage:        1 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; Hardware stack levels required when called:    4
  2751 ;; This function calls:
  2752 ;;		Nothing
  2753 ;; This function is called by:
  2754 ;;		_main
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           
  2759                           ;psect for function _SegmentDisplay_Initial
  2760  07DC                     _SegmentDisplay_Initial:	
  2761                           
  2762                           ;SegmentDisplay_A2.c: 10: Segment=&VarSegment;
  2763                           
  2764                           ;incstack = 0
  2765                           ; Regs used in _SegmentDisplay_Initial: [wregfsr1]
  2766  07DC  30C0               	movlw	_VarSegment& (0+255)
  2767  07DD  0020               	movlb	0	; select bank0
  2768  07DE  00A5               	movwf	??_SegmentDisplay_Initial
  2769  07DF  0825               	movf	??_SegmentDisplay_Initial,w
  2770  07E0  00DB               	movwf	_Segment
  2771                           
  2772                           ;SegmentDisplay_A2.c: 11: Segment->Enable=1;
  2773  07E1  085B               	movf	_Segment,w
  2774  07E2  3E15               	addlw	21
  2775  07E3  0086               	movwf	6
  2776  07E4  0187               	clrf	7
  2777  07E5  1401               	bsf	1,0
  2778                           
  2779                           ;SegmentDisplay_A2.c: 13: Segment->Dec=1;
  2780  07E6  085B               	movf	_Segment,w
  2781  07E7  3E15               	addlw	21
  2782  07E8  0086               	movwf	6
  2783  07E9  0187               	clrf	7
  2784  07EA  1581               	bsf	1,3
  2785  07EB  0008               	return
  2786  07EC                     __end_of_SegmentDisplay_Initial:	
  2787                           
  2788                           	psect	text12
  2789  0FF1                     __ptext12:	
  2790 ;; *************** function _Mcu_Initialization *****************
  2791 ;; Defined at:
  2792 ;;		line 24 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;		None               void
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0, pclath, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2806 ;;      Params:         0       0       0       0       0       0       0       0
  2807 ;;      Locals:         0       0       0       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0
  2809 ;;      Totals:         0       0       0       0       0       0       0       0
  2810 ;;Total ram usage:        0 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    5
  2813 ;; This function calls:
  2814 ;;		_I2C_Set
  2815 ;;		_IO_Set
  2816 ;;		_TMR1_Set
  2817 ;;		_UART_Set
  2818 ;; This function is called by:
  2819 ;;		_main
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           
  2824                           ;psect for function _Mcu_Initialization
  2825  0FF1                     _Mcu_Initialization:	
  2826                           
  2827                           ;MCU_B1.c: 27: OSCCON=0x78; ;;
  2828                           
  2829                           ;incstack = 0
  2830                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  2831  0FF1  3078               	movlw	120
  2832  0FF2  0021               	movlb	1	; select bank1
  2833  0FF3  0099               	movwf	25	;volatile
  2834                           
  2835                           ;MCU_B1.c: 29: IO_Set();
  2836  0FF4  3187  27C6  318F   	fcall	_IO_Set
  2837                           
  2838                           ;MCU_B1.c: 31: ;;
  2839                           ;MCU_B1.c: 33: TMR1_Set();
  2840  0FF7  3187  27EC  318F   	fcall	_TMR1_Set
  2841                           
  2842                           ;MCU_B1.c: 35: ;;
  2843                           ;MCU_B1.c: 39: ;;
  2844                           ;MCU_B1.c: 41: ;;
  2845                           ;MCU_B1.c: 43: I2C_Set();
  2846  0FFA  318F  27D4  318F   	fcall	_I2C_Set
  2847                           
  2848                           ;MCU_B1.c: 45: UART_Set();
  2849  0FFD  3187  27AD         	fcall	_UART_Set
  2850  0FFF  0008               	return
  2851  1000                     __end_of_Mcu_Initialization:	
  2852                           
  2853                           	psect	text13
  2854  07AD                     __ptext13:	
  2855 ;; *************** function _UART_Set *****************
  2856 ;; Defined at:
  2857 ;;		line 665 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;		None
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;		None
  2862 ;; Return value:  Size  Location     Type
  2863 ;;		None               void
  2864 ;; Registers used:
  2865 ;;		wreg, status,2
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2871 ;;      Params:         0       0       0       0       0       0       0       0
  2872 ;;      Locals:         0       0       0       0       0       0       0       0
  2873 ;;      Temps:          0       1       0       0       0       0       0       0
  2874 ;;      Totals:         0       1       0       0       0       0       0       0
  2875 ;;Total ram usage:        1 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    4
  2878 ;; This function calls:
  2879 ;;		Nothing
  2880 ;; This function is called by:
  2881 ;;		_Mcu_Initialization
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           
  2886                           ;psect for function _UART_Set
  2887  07AD                     _UART_Set:	
  2888                           
  2889                           ;MCU_B1.c: 667: UART=&VarUart;
  2890                           
  2891                           ;incstack = 0
  2892                           ; Regs used in _UART_Set: [wreg+status,2]
  2893  07AD  30A0               	movlw	_VarUart& (0+255)
  2894  07AE  0020               	movlb	0	; select bank0
  2895  07AF  00A5               	movwf	??_UART_Set
  2896  07B0  0825               	movf	??_UART_Set,w
  2897  07B1  00D9               	movwf	_UART
  2898                           
  2899                           ;MCU_B1.c: 668: TRISC7 = 1;
  2900  07B2  0021               	movlb	1	; select bank1
  2901  07B3  178E               	bsf	14,7	;volatile
  2902                           
  2903                           ;MCU_B1.c: 669: TRISC6 = 1;
  2904  07B4  170E               	bsf	14,6	;volatile
  2905                           
  2906                           ;MCU_B1.c: 670: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  2907  07B5  3033               	movlw	51
  2908  07B6  0023               	movlb	3	; select bank3
  2909  07B7  009B               	movwf	27	;volatile
  2910                           
  2911                           ;MCU_B1.c: 671: SPBRGH = 0;
  2912  07B8  019C               	clrf	28	;volatile
  2913                           
  2914                           ;MCU_B1.c: 672: BRG16 = 0;
  2915  07B9  119F               	bcf	31,3	;volatile
  2916                           
  2917                           ;MCU_B1.c: 673: RCSTA = (0|0x90);
  2918  07BA  3090               	movlw	144
  2919  07BB  009D               	movwf	29	;volatile
  2920                           
  2921                           ;MCU_B1.c: 674: TXSTA = (0x4|0|0x20);
  2922  07BC  3024               	movlw	36
  2923  07BD  009E               	movwf	30	;volatile
  2924                           
  2925                           ;MCU_B1.c: 675: TX9=0;
  2926  07BE  131E               	bcf	30,6	;volatile
  2927                           
  2928                           ;MCU_B1.c: 676: RX9=0;
  2929  07BF  131D               	bcf	29,6	;volatile
  2930                           
  2931                           ;MCU_B1.c: 677: TXIE=0;
  2932  07C0  0021               	movlb	1	; select bank1
  2933  07C1  1211               	bcf	17,4	;volatile
  2934                           
  2935                           ;MCU_B1.c: 678: RCIE=1;
  2936  07C2  1691               	bsf	17,5	;volatile
  2937                           
  2938                           ;MCU_B1.c: 679: PEIE=1;
  2939  07C3  170B               	bsf	11,6	;volatile
  2940                           
  2941                           ;MCU_B1.c: 680: GIE=1;
  2942  07C4  178B               	bsf	11,7	;volatile
  2943  07C5  0008               	return
  2944  07C6                     __end_of_UART_Set:	
  2945                           
  2946                           	psect	text14
  2947  07EC                     __ptext14:	
  2948 ;; *************** function _TMR1_Set *****************
  2949 ;; Defined at:
  2950 ;;		line 238 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;		None
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;		None
  2955 ;; Return value:  Size  Location     Type
  2956 ;;		None               void
  2957 ;; Registers used:
  2958 ;;		wreg
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2964 ;;      Params:         0       0       0       0       0       0       0       0
  2965 ;;      Locals:         0       0       0       0       0       0       0       0
  2966 ;;      Temps:          0       1       0       0       0       0       0       0
  2967 ;;      Totals:         0       1       0       0       0       0       0       0
  2968 ;;Total ram usage:        1 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    4
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_Mcu_Initialization
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           
  2979                           ;psect for function _TMR1_Set
  2980  07EC                     _TMR1_Set:	
  2981                           
  2982                           ;MCU_B1.c: 240: Timer1=&VarTimer1;
  2983                           
  2984                           ;incstack = 0
  2985                           ; Regs used in _TMR1_Set: [wreg]
  2986  07EC  3053               	movlw	_VarTimer1& (0+255)
  2987  07ED  0020               	movlb	0	; select bank0
  2988  07EE  00A5               	movwf	??_TMR1_Set
  2989  07EF  0825               	movf	??_TMR1_Set,w
  2990  07F0  00D8               	movwf	_Timer1
  2991                           
  2992                           ;MCU_B1.c: 241: T1CON=(0x40 | 0x00 | 0x01);
  2993  07F1  3041               	movlw	65
  2994  07F2  0098               	movwf	24	;volatile
  2995                           
  2996                           ;MCU_B1.c: 242: TMR1H=((65536-700)/256);
  2997  07F3  30FD               	movlw	253
  2998  07F4  0097               	movwf	23	;volatile
  2999                           
  3000                           ;MCU_B1.c: 243: TMR1L=((65536-700)%256);
  3001  07F5  3044               	movlw	68
  3002  07F6  0096               	movwf	22	;volatile
  3003                           
  3004                           ;MCU_B1.c: 244: TMR1IE=1;
  3005  07F7  0021               	movlb	1	; select bank1
  3006  07F8  1411               	bsf	17,0	;volatile
  3007                           
  3008                           ;MCU_B1.c: 245: PEIE=1;
  3009  07F9  170B               	bsf	11,6	;volatile
  3010                           
  3011                           ;MCU_B1.c: 246: GIE=1;
  3012  07FA  178B               	bsf	11,7	;volatile
  3013  07FB  0008               	return
  3014  07FC                     __end_of_TMR1_Set:	
  3015                           
  3016                           	psect	text15
  3017  07C6                     __ptext15:	
  3018 ;; *************** function _IO_Set *****************
  3019 ;; Defined at:
  3020 ;;		line 50 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;		None               void
  3027 ;; Registers used:
  3028 ;;		wreg, status,2
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3034 ;;      Params:         0       0       0       0       0       0       0       0
  3035 ;;      Locals:         0       0       0       0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0       0
  3037 ;;      Totals:         0       0       0       0       0       0       0       0
  3038 ;;Total ram usage:        0 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    4
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		_Mcu_Initialization
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           
  3049                           ;psect for function _IO_Set
  3050  07C6                     _IO_Set:	
  3051                           
  3052                           ;MCU_B1.c: 64: TRISA=0b00001001;;
  3053                           
  3054                           ;incstack = 0
  3055                           ; Regs used in _IO_Set: [wreg+status,2]
  3056  07C6  3009               	movlw	9
  3057  07C7  0021               	movlb	1	; select bank1
  3058  07C8  008C               	movwf	12	;volatile
  3059                           
  3060                           ;MCU_B1.c: 65: TRISB=0b00000000;;
  3061  07C9  018D               	clrf	13	;volatile
  3062                           
  3063                           ;MCU_B1.c: 66: TRISC=0b00011001;;
  3064  07CA  3019               	movlw	25
  3065  07CB  008E               	movwf	14	;volatile
  3066                           
  3067                           ;MCU_B1.c: 67: LATA=0b00000000;;
  3068  07CC  0022               	movlb	2	; select bank2
  3069  07CD  018C               	clrf	12	;volatile
  3070                           
  3071                           ;MCU_B1.c: 68: LATB=0b00000000;;
  3072  07CE  018D               	clrf	13	;volatile
  3073                           
  3074                           ;MCU_B1.c: 69: LATC=0b00000000;;
  3075  07CF  018E               	clrf	14	;volatile
  3076                           
  3077                           ;MCU_B1.c: 70: ANSELA=0b00000001;;
  3078  07D0  3001               	movlw	1
  3079  07D1  0023               	movlb	3	; select bank3
  3080  07D2  008C               	movwf	12	;volatile
  3081                           
  3082                           ;MCU_B1.c: 71: ANSELB=0b00000000;;
  3083  07D3  018D               	clrf	13	;volatile
  3084                           
  3085                           ;MCU_B1.c: 72: ANSELC=0b00000000;;
  3086  07D4  018E               	clrf	14	;volatile
  3087                           
  3088                           ;MCU_B1.c: 73: PORTA=0b00001001;;
  3089  07D5  3009               	movlw	9
  3090  07D6  0020               	movlb	0	; select bank0
  3091  07D7  008C               	movwf	12	;volatile
  3092                           
  3093                           ;MCU_B1.c: 74: PORTB=0b00000000;;
  3094  07D8  018D               	clrf	13	;volatile
  3095                           
  3096                           ;MCU_B1.c: 75: PORTC=0b00011001;;
  3097  07D9  3019               	movlw	25
  3098  07DA  008E               	movwf	14	;volatile
  3099  07DB  0008               	return
  3100  07DC                     __end_of_IO_Set:	
  3101                           
  3102                           	psect	text16
  3103  0FD4                     __ptext16:	
  3104 ;; *************** function _I2C_Set *****************
  3105 ;; Defined at:
  3106 ;;		line 399 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;		None
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;		None               void
  3113 ;; Registers used:
  3114 ;;		wreg, status,2
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3120 ;;      Params:         0       0       0       0       0       0       0       0
  3121 ;;      Locals:         0       0       0       0       0       0       0       0
  3122 ;;      Temps:          0       1       0       0       0       0       0       0
  3123 ;;      Totals:         0       1       0       0       0       0       0       0
  3124 ;;Total ram usage:        1 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    4
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_Mcu_Initialization
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _I2C_Set
  3136  0FD4                     _I2C_Set:	
  3137                           
  3138                           ;MCU_B1.c: 401: I2C=&VarI2C;
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _I2C_Set: [wreg+status,2]
  3142  0FD4  3020               	movlw	_VarI2C& (0+255)
  3143  0FD5  0020               	movlb	0	; select bank0
  3144  0FD6  00A5               	movwf	??_I2C_Set
  3145  0FD7  0825               	movf	??_I2C_Set,w
  3146  0FD8  00DA               	movwf	_I2C
  3147                           
  3148                           ;MCU_B1.c: 403: SSPADD = 0x09;
  3149  0FD9  3009               	movlw	9
  3150  0FDA  0024               	movlb	4	; select bank4
  3151  0FDB  0092               	movwf	18	;volatile
  3152                           
  3153                           ;MCU_B1.c: 404: SSPSTAT = 0x80;
  3154  0FDC  3080               	movlw	128
  3155  0FDD  0094               	movwf	20	;volatile
  3156                           
  3157                           ;MCU_B1.c: 405: SSPCON2 = 0;
  3158  0FDE  0196               	clrf	22	;volatile
  3159                           
  3160                           ;MCU_B1.c: 407: SSPCON1=0b101000;
  3161  0FDF  3028               	movlw	40
  3162  0FE0  0095               	movwf	21	;volatile
  3163  0FE1  0008               	return
  3164  0FE2                     __end_of_I2C_Set:	
  3165                           
  3166                           	psect	text17
  3167  0FE2                     __ptext17:	
  3168 ;; *************** function _MainT_Initial *****************
  3169 ;; Defined at:
  3170 ;;		line 33 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;		None
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;		None
  3175 ;; Return value:  Size  Location     Type
  3176 ;;		None               void
  3177 ;; Registers used:
  3178 ;;		wreg, fsr1l, fsr1h
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3184 ;;      Params:         0       0       0       0       0       0       0       0
  3185 ;;      Locals:         0       0       0       0       0       0       0       0
  3186 ;;      Temps:          0       1       0       0       0       0       0       0
  3187 ;;      Totals:         0       1       0       0       0       0       0       0
  3188 ;;Total ram usage:        1 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:    4
  3191 ;; This function calls:
  3192 ;;		Nothing
  3193 ;; This function is called by:
  3194 ;;		_main
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           
  3199                           ;psect for function _MainT_Initial
  3200  0FE2                     _MainT_Initial:	
  3201                           
  3202                           ;myMain.c: 35: TMain=&VarTMain;
  3203                           
  3204                           ;incstack = 0
  3205                           ; Regs used in _MainT_Initial: [wregfsr1]
  3206  0FE2  3044               	movlw	_VarTMain& (0+255)
  3207  0FE3  0020               	movlb	0	; select bank0
  3208  0FE4  00A5               	movwf	??_MainT_Initial
  3209  0FE5  0825               	movf	??_MainT_Initial,w
  3210  0FE6  00D7               	movwf	_TMain
  3211                           
  3212                           ;myMain.c: 36: TMain->FirstOpen=1;
  3213  0FE7  0857               	movf	_TMain,w
  3214  0FE8  3E0D               	addlw	13
  3215  0FE9  0086               	movwf	6
  3216  0FEA  0187               	clrf	7
  3217  0FEB  1401               	bsf	1,0
  3218                           
  3219                           ;myMain.c: 37: Product=&VarProduct;
  3220  0FEC  30A0               	movlw	_VarProduct& (0+255)
  3221  0FED  00A5               	movwf	??_MainT_Initial
  3222  0FEE  0825               	movf	??_MainT_Initial,w
  3223  0FEF  00D6               	movwf	_Product
  3224  0FF0  0008               	return
  3225  0FF1                     __end_of_MainT_Initial:	
  3226                           
  3227                           	psect	text18
  3228  0425                     __ptext18:	
  3229 ;; *************** function _MainT *****************
  3230 ;; Defined at:
  3231 ;;		line 41 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\myMain.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;		None
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  i               1    0        unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;		None               void
  3238 ;; Registers used:
  3239 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3245 ;;      Params:         0       0       0       0       0       0       0       0
  3246 ;;      Locals:         0       0       0       0       0       0       0       0
  3247 ;;      Temps:          0       0       0       0       0       0       0       0
  3248 ;;      Totals:         0       0       0       0       0       0       0       0
  3249 ;;Total ram usage:        0 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    4
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_main
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           
  3260                           ;psect for function _MainT
  3261  0425                     _MainT:	
  3262                           
  3263                           ;myMain.c: 43: char i;
  3264                           ;myMain.c: 45: if(!TMain->PowerON)
  3265                           
  3266                           ;incstack = 0
  3267                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0]
  3268  0425  0020               	movlb	0	; select bank0
  3269  0426  0857               	movf	_TMain,w
  3270  0427  0086               	movwf	6
  3271  0428  0187               	clrf	7
  3272  0429  1801               	btfsc	1,0
  3273  042A  2C49               	goto	l2073
  3274                           
  3275                           ;myMain.c: 46: {
  3276                           ;myMain.c: 47: TMain->PowerCount++;
  3277  042B  0A57               	incf	_TMain,w
  3278  042C  0086               	movwf	6
  3279  042D  0187               	clrf	7
  3280  042E  3001               	movlw	1
  3281  042F  0781               	addwf	1,f
  3282  0430  3141               	addfsr 1,1
  3283  0431  1803               	skipnc
  3284  0432  0A81               	incf	1,f
  3285                           
  3286                           ;myMain.c: 48: if(TMain->PowerCount == 1500)
  3287  0433  0A57               	incf	_TMain,w
  3288  0434  0086               	movwf	6
  3289  0435  0187               	clrf	7
  3290  0436  3F40               	moviw [0]fsr1
  3291  0437  3ADC               	xorlw	220
  3292  0438  1D03               	skipz
  3293  0439  2C3C               	goto	u2615
  3294  043A  3F41               	moviw [1]fsr1
  3295  043B  3A05               	xorlw	5
  3296  043C                     u2615:	
  3297  043C  1D03               	skipz
  3298  043D  0008               	return
  3299                           
  3300                           ;myMain.c: 49: {
  3301                           ;myMain.c: 50: TMain->PowerCount=0;
  3302  043E  0A57               	incf	_TMain,w
  3303  043F  0086               	movwf	6
  3304  0440  0187               	clrf	7
  3305  0441  3000               	movlw	0
  3306  0442  3FC0               	movwi [0]fsr1
  3307  0443  3FC1               	movwi [1]fsr1
  3308                           
  3309                           ;myMain.c: 51: TMain->PowerON=1;
  3310  0444  0857               	movf	_TMain,w
  3311  0445  0086               	movwf	6
  3312  0446  0187               	clrf	7
  3313  0447  1401               	bsf	1,0
  3314                           
  3315                           ;myMain.c: 56: }
  3316                           ;myMain.c: 57: }
  3317  0448  0008               	return
  3318  0449                     l2073:	
  3319                           
  3320                           ;myMain.c: 58: else
  3321                           ;myMain.c: 59: {
  3322                           ;myMain.c: 60: TMain->Count1++;
  3323  0449  0857               	movf	_TMain,w
  3324  044A  3E05               	addlw	5
  3325  044B  0086               	movwf	6
  3326  044C  0187               	clrf	7
  3327  044D  3001               	movlw	1
  3328  044E  0781               	addwf	1,f
  3329  044F  3141               	addfsr 1,1
  3330  0450  1803               	skipnc
  3331  0451  0A81               	incf	1,f
  3332                           
  3333                           ;myMain.c: 61: if(TMain->Count1 == 1000)
  3334  0452  0857               	movf	_TMain,w
  3335  0453  3E05               	addlw	5
  3336  0454  0086               	movwf	6
  3337  0455  0187               	clrf	7
  3338  0456  3F40               	moviw [0]fsr1
  3339  0457  3AE8               	xorlw	232
  3340  0458  1D03               	skipz
  3341  0459  2C5C               	goto	u2625
  3342  045A  3F41               	moviw [1]fsr1
  3343  045B  3A03               	xorlw	3
  3344  045C                     u2625:	
  3345  045C  1D03               	skipz
  3346  045D  2C67               	goto	l2083
  3347                           
  3348                           ;myMain.c: 62: {
  3349                           ;myMain.c: 63: TMain->Count1=0;
  3350  045E  0857               	movf	_TMain,w
  3351  045F  3E05               	addlw	5
  3352  0460  0086               	movwf	6
  3353  0461  0187               	clrf	7
  3354  0462  3000               	movlw	0
  3355  0463  3FC0               	movwi [0]fsr1
  3356  0464  3FC1               	movwi [1]fsr1
  3357                           
  3358                           ;myMain.c: 64: RA2=~RA2;
  3359  0465  3004               	movlw	4
  3360  0466  068C               	xorwf	12,f
  3361  0467                     l2083:	
  3362                           ;myMain.c: 79: {
  3363                           
  3364                           
  3365                           ;myMain.c: 82: }
  3366                           ;myMain.c: 105: }
  3367                           ;myMain.c: 108: TMain->Count2++;
  3368  0467  0857               	movf	_TMain,w
  3369  0468  3E07               	addlw	7
  3370  0469  0086               	movwf	6
  3371  046A  0187               	clrf	7
  3372  046B  3001               	movlw	1
  3373  046C  0781               	addwf	1,f
  3374  046D  3141               	addfsr 1,1
  3375  046E  1803               	skipnc
  3376  046F  0A81               	incf	1,f
  3377                           
  3378                           ;myMain.c: 109: if(TMain->Count2 == 2000)
  3379  0470  0857               	movf	_TMain,w
  3380  0471  3E07               	addlw	7
  3381  0472  0086               	movwf	6
  3382  0473  0187               	clrf	7
  3383  0474  3F40               	moviw [0]fsr1
  3384  0475  3AD0               	xorlw	208
  3385  0476  1D03               	skipz
  3386  0477  2C7A               	goto	u2635
  3387  0478  3F41               	moviw [1]fsr1
  3388  0479  3A07               	xorlw	7
  3389  047A                     u2635:	
  3390  047A  1D03               	skipz
  3391  047B  0008               	return
  3392                           
  3393                           ;myMain.c: 110: {
  3394                           ;myMain.c: 111: TMain->Count2=0;
  3395  047C  0857               	movf	_TMain,w
  3396  047D  3E07               	addlw	7
  3397  047E  0086               	movwf	6
  3398  047F  0187               	clrf	7
  3399  0480  3000               	movlw	0
  3400  0481  3FC0               	movwi [0]fsr1
  3401  0482  3FC1               	movwi [1]fsr1
  3402  0483  0008               	return
  3403  0484                     __end_of_MainT:	
  3404                           
  3405                           	psect	text19
  3406  03B2                     __ptext19:	
  3407 ;; *************** function _I2C_Main *****************
  3408 ;; Defined at:
  3409 ;;		line 441 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  i               1   11[BANK0 ] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;		None               void
  3416 ;; Registers used:
  3417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3423 ;;      Params:         0       0       0       0       0       0       0       0
  3424 ;;      Locals:         0       1       0       0       0       0       0       0
  3425 ;;      Temps:          0       3       0       0       0       0       0       0
  3426 ;;      Totals:         0       4       0       0       0       0       0       0
  3427 ;;Total ram usage:        4 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    5
  3430 ;; This function calls:
  3431 ;;		_I2C_Master_Reception
  3432 ;;		_I2C_Master_Transmission
  3433 ;; This function is called by:
  3434 ;;		_main
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           
  3439                           ;psect for function _I2C_Main
  3440  03B2                     _I2C_Main:	
  3441                           
  3442                           ;MCU_B1.c: 443: char i;
  3443                           ;MCU_B1.c: 468: if(I2C->MasterRxGO)
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _I2C_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3447  03B2  0020               	movlb	0	; select bank0
  3448  03B3  085A               	movf	_I2C,w
  3449  03B4  3E42               	addlw	66
  3450  03B5  0086               	movwf	6
  3451  03B6  3001               	movlw	1	; select bank2/3
  3452  03B7  0087               	movwf	7
  3453  03B8  1E01               	btfss	1,4
  3454  03B9  2BF2               	goto	l315
  3455                           
  3456                           ;MCU_B1.c: 469: {
  3457                           ;MCU_B1.c: 470: I2C->MasterRxGO=0;
  3458  03BA  085A               	movf	_I2C,w
  3459  03BB  3E42               	addlw	66
  3460  03BC  0086               	movwf	6
  3461  03BD  3001               	movlw	1	; select bank2/3
  3462  03BE  0087               	movwf	7
  3463  03BF  1201               	bcf	1,4
  3464                           
  3465                           ;MCU_B1.c: 471: I2C_Master_Reception();
  3466  03C0  3185  252B  3183   	fcall	_I2C_Master_Reception
  3467                           
  3468                           ;MCU_B1.c: 472: TMain->Test=1;
  3469  03C3  0020               	movlb	0	; select bank0
  3470  03C4  0857               	movf	_TMain,w
  3471  03C5  3E0C               	addlw	12
  3472  03C6  0086               	movwf	6
  3473  03C7  0187               	clrf	7
  3474  03C8  0181               	clrf	1
  3475  03C9  0A81               	incf	1,f
  3476                           
  3477                           ;MCU_B1.c: 473: RA1=~RA1;
  3478  03CA  3002               	movlw	2
  3479  03CB  068C               	xorwf	12,f
  3480                           
  3481                           ;MCU_B1.c: 475: for(i=0;i<32;i++)
  3482  03CC  01AB               	clrf	I2C_Main@i
  3483  03CD  3020               	movlw	32
  3484  03CE  022B               	subwf	I2C_Main@i,w
  3485  03CF  1803               	btfsc	3,0
  3486  03D0  2BEB               	goto	l2111
  3487  03D1                     l2105:	
  3488                           
  3489                           ;MCU_B1.c: 476: {
  3490                           ;MCU_B1.c: 477: UART->TxData[i]=I2C->BufferReader[i];
  3491  03D1  082B               	movf	I2C_Main@i,w
  3492  03D2  075A               	addwf	_I2C,w
  3493  03D3  00A8               	movwf	??_I2C_Main
  3494  03D4  0828               	movf	??_I2C_Main,w
  3495  03D5  0086               	movwf	6
  3496  03D6  3001               	movlw	1	; select bank2/3
  3497  03D7  0087               	movwf	7
  3498  03D8  0801               	movf	1,w
  3499  03D9  00A9               	movwf	??_I2C_Main+1
  3500  03DA  082B               	movf	I2C_Main@i,w
  3501  03DB  0759               	addwf	_UART,w
  3502  03DC  00AA               	movwf	??_I2C_Main+2
  3503  03DD  082A               	movf	??_I2C_Main+2,w
  3504  03DE  0086               	movwf	6
  3505  03DF  3001               	movlw	1	; select bank2/3
  3506  03E0  0087               	movwf	7
  3507  03E1  0829               	movf	??_I2C_Main+1,w
  3508  03E2  0081               	movwf	1
  3509  03E3  3001               	movlw	1
  3510  03E4  00A8               	movwf	??_I2C_Main
  3511  03E5  0828               	movf	??_I2C_Main,w
  3512  03E6  07AB               	addwf	I2C_Main@i,f
  3513  03E7  3020               	movlw	32
  3514  03E8  022B               	subwf	I2C_Main@i,w
  3515  03E9  1C03               	skipc
  3516  03EA  2BD1               	goto	l2105
  3517  03EB                     l2111:	
  3518                           
  3519                           ;MCU_B1.c: 478: }
  3520                           ;MCU_B1.c: 479: UART->TxGO=1;
  3521  03EB  0859               	movf	_UART,w
  3522  03EC  3E43               	addlw	67
  3523  03ED  0086               	movwf	6
  3524  03EE  3001               	movlw	1	; select bank2/3
  3525  03EF  0087               	movwf	7
  3526  03F0  1401               	bsf	1,0
  3527                           
  3528                           ;MCU_B1.c: 481: }
  3529  03F1  0008               	return
  3530  03F2                     l315:	
  3531                           
  3532                           ;MCU_B1.c: 482: else
  3533                           ;MCU_B1.c: 483: {
  3534                           ;MCU_B1.c: 484: if(RC0)
  3535  03F2  1C0E               	btfss	14,0	;volatile
  3536  03F3  2C08               	goto	l2117
  3537                           
  3538                           ;MCU_B1.c: 485: {
  3539                           ;MCU_B1.c: 486: if(!I2C->SS)
  3540  03F4  085A               	movf	_I2C,w
  3541  03F5  3E42               	addlw	66
  3542  03F6  0086               	movwf	6
  3543  03F7  3001               	movlw	1	; select bank2/3
  3544  03F8  0087               	movwf	7
  3545  03F9  1A81               	btfsc	1,5
  3546  03FA  0008               	return
  3547                           
  3548                           ;MCU_B1.c: 487: {
  3549                           ;MCU_B1.c: 488: I2C->SS=1;
  3550  03FB  085A               	movf	_I2C,w
  3551  03FC  3E42               	addlw	66
  3552  03FD  0086               	movwf	6
  3553  03FE  3001               	movlw	1	; select bank2/3
  3554  03FF  0087               	movwf	7
  3555  0400  1681               	bsf	1,5
  3556                           
  3557                           ;MCU_B1.c: 489: I2C->MasterRxGO=1;
  3558  0401  085A               	movf	_I2C,w
  3559  0402  3E42               	addlw	66
  3560  0403  0086               	movwf	6
  3561  0404  3001               	movlw	1	; select bank2/3
  3562  0405  0087               	movwf	7
  3563  0406  1601               	bsf	1,4
  3564                           
  3565                           ;MCU_B1.c: 490: }
  3566                           ;MCU_B1.c: 491: }
  3567  0407  0008               	return
  3568  0408                     l2117:	
  3569                           
  3570                           ;MCU_B1.c: 492: else
  3571                           ;MCU_B1.c: 493: {
  3572                           ;MCU_B1.c: 494: if(I2C->SS)
  3573  0408  085A               	movf	_I2C,w
  3574  0409  3E42               	addlw	66
  3575  040A  0086               	movwf	6
  3576  040B  3001               	movlw	1	; select bank2/3
  3577  040C  0087               	movwf	7
  3578  040D  1E81               	btfss	1,5
  3579  040E  2C15               	goto	l322
  3580                           
  3581                           ;MCU_B1.c: 495: {
  3582                           ;MCU_B1.c: 496: I2C->SS=0;
  3583  040F  085A               	movf	_I2C,w
  3584  0410  3E42               	addlw	66
  3585  0411  0086               	movwf	6
  3586  0412  3001               	movlw	1	; select bank2/3
  3587  0413  0087               	movwf	7
  3588  0414  1281               	bcf	1,5
  3589  0415                     l322:	
  3590                           
  3591                           ;MCU_B1.c: 497: }
  3592                           ;MCU_B1.c: 498: if(I2C->MasterTxGO)
  3593  0415  085A               	movf	_I2C,w
  3594  0416  3E42               	addlw	66
  3595  0417  0086               	movwf	6
  3596  0418  3001               	movlw	1	; select bank2/3
  3597  0419  0087               	movwf	7
  3598  041A  1D81               	btfss	1,3
  3599  041B  0008               	return
  3600                           
  3601                           ;MCU_B1.c: 499: {
  3602                           ;MCU_B1.c: 500: I2C->MasterTxGO=0;
  3603  041C  085A               	movf	_I2C,w
  3604  041D  3E42               	addlw	66
  3605  041E  0086               	movwf	6
  3606  041F  3001               	movlw	1	; select bank2/3
  3607  0420  0087               	movwf	7
  3608  0421  1181               	bcf	1,3
  3609                           
  3610                           ;MCU_B1.c: 501: I2C_Master_Transmission();
  3611  0422  3186  2644         	fcall	_I2C_Master_Transmission
  3612  0424  0008               	return
  3613  0425                     __end_of_I2C_Main:	
  3614                           
  3615                           	psect	text20
  3616  0644                     __ptext20:	
  3617 ;; *************** function _I2C_Master_Transmission *****************
  3618 ;; Defined at:
  3619 ;;		line 541 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;		None
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;  i               1    6[BANK0 ] unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;		None               void
  3626 ;; Registers used:
  3627 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3633 ;;      Params:         0       0       0       0       0       0       0       0
  3634 ;;      Locals:         0       1       0       0       0       0       0       0
  3635 ;;      Temps:          0       1       0       0       0       0       0       0
  3636 ;;      Totals:         0       2       0       0       0       0       0       0
  3637 ;;Total ram usage:        2 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    4
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_I2C_Main
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           
  3648                           ;psect for function _I2C_Master_Transmission
  3649  0644                     _I2C_Master_Transmission:	
  3650  0644                     l330:	
  3651                           ;MCU_B1.c: 543: char i;
  3652                           ;MCU_B1.c: 544: while(SEN);
  3653                           
  3654                           ;incstack = 0
  3655                           ; Regs used in _I2C_Master_Transmission: [wreg+fsr1l+fsr1h+status,2+status,0]
  3656                           
  3657  0644  0024               	movlb	4	; select bank4
  3658  0645  1816               	btfsc	22,0	;volatile
  3659  0646  2E44               	goto	l330
  3660                           
  3661                           ;MCU_B1.c: 545: SEN=1;
  3662  0647  1416               	bsf	22,0	;volatile
  3663  0648                     l333:	
  3664                           ;MCU_B1.c: 547: while(SEN);
  3665                           
  3666  0648  1816               	btfsc	22,0	;volatile
  3667  0649  2E48               	goto	l333
  3668                           
  3669                           ;MCU_B1.c: 550: SSPBUF=0x10;
  3670  064A  3010               	movlw	16
  3671  064B  0091               	movwf	17	;volatile
  3672  064C                     l336:	
  3673                           ;MCU_B1.c: 551: while(BF);
  3674                           
  3675  064C  1814               	btfsc	20,0	;volatile
  3676  064D  2E4C               	goto	l336
  3677  064E                     l339:	
  3678                           ;MCU_B1.c: 554: while(ACKSTAT);
  3679                           
  3680  064E  1B16               	btfsc	22,6	;volatile
  3681  064F  2E4E               	goto	l339
  3682                           
  3683                           ;MCU_B1.c: 556: for(i=0;i<32;i++)
  3684  0650  0020               	movlb	0	; select bank0
  3685  0651  01A6               	clrf	I2C_Master_Transmission@i
  3686  0652  3020               	movlw	32
  3687  0653  0226               	subwf	I2C_Master_Transmission@i,w
  3688  0654  1803               	btfsc	3,0
  3689  0655  2E72               	goto	l353
  3690  0656                     l344:	
  3691                           ;MCU_B1.c: 557: {
  3692                           ;MCU_B1.c: 558: while(SEN);
  3693                           
  3694  0656  0024               	movlb	4	; select bank4
  3695  0657  1816               	btfsc	22,0	;volatile
  3696  0658  2E56               	goto	l344
  3697                           
  3698                           ;MCU_B1.c: 559: SSPBUF=I2C->BufferWriter[i];
  3699  0659  0020               	movlb	0	; select bank0
  3700  065A  0826               	movf	I2C_Master_Transmission@i,w
  3701  065B  3E20               	addlw	32
  3702  065C  075A               	addwf	_I2C,w
  3703  065D  00A5               	movwf	??_I2C_Master_Transmission
  3704  065E  0825               	movf	??_I2C_Master_Transmission,w
  3705  065F  0086               	movwf	6
  3706  0660  3001               	movlw	1	; select bank2/3
  3707  0661  0087               	movwf	7
  3708  0662  0801               	movf	1,w
  3709  0663  0024               	movlb	4	; select bank4
  3710  0664  0091               	movwf	17	;volatile
  3711  0665                     l347:	
  3712                           ;MCU_B1.c: 560: while(BF);
  3713                           
  3714  0665  1814               	btfsc	20,0	;volatile
  3715  0666  2E65               	goto	l347
  3716  0667                     l350:	
  3717                           ;MCU_B1.c: 563: while(ACKSTAT);
  3718                           
  3719  0667  1B16               	btfsc	22,6	;volatile
  3720  0668  2E67               	goto	l350
  3721  0669  3001               	movlw	1
  3722  066A  0020               	movlb	0	; select bank0
  3723  066B  00A5               	movwf	??_I2C_Master_Transmission
  3724  066C  0825               	movf	??_I2C_Master_Transmission,w
  3725  066D  07A6               	addwf	I2C_Master_Transmission@i,f
  3726  066E  3020               	movlw	32
  3727  066F  0226               	subwf	I2C_Master_Transmission@i,w
  3728  0670  1C03               	skipc
  3729  0671  2E56               	goto	l344
  3730  0672                     l353:	
  3731                           ;MCU_B1.c: 564: }
  3732                           ;MCU_B1.c: 566: while(SEN);
  3733                           
  3734  0672  0024               	movlb	4	; select bank4
  3735  0673  1C16               	btfss	22,0	;volatile
  3736  0674  2E77               	goto	l356
  3737  0675  2E72               	goto	l353
  3738  0676                     l357:	
  3739                           ;MCU_B1.c: 567: while(!PEN)
  3740                           
  3741                           
  3742                           ;MCU_B1.c: 568: PEN=1;
  3743  0676  1516               	bsf	22,2	;volatile
  3744  0677                     l356:	
  3745  0677  1D16               	btfss	22,2	;volatile
  3746  0678  2E76               	goto	l357
  3747  0679                     l359:	
  3748                           ;MCU_B1.c: 569: while(PEN);
  3749                           
  3750  0679  1D16               	btfss	22,2	;volatile
  3751  067A  0008               	return
  3752  067B  2E79               	goto	l359
  3753  067C                     __end_of_I2C_Master_Transmission:	
  3754                           
  3755                           	psect	text21
  3756  052B                     __ptext21:	
  3757 ;; *************** function _I2C_Master_Reception *****************
  3758 ;; Defined at:
  3759 ;;		line 574 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;		None
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  i               1    7[BANK0 ] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;		None               void
  3766 ;; Registers used:
  3767 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3773 ;;      Params:         0       0       0       0       0       0       0       0
  3774 ;;      Locals:         0       1       0       0       0       0       0       0
  3775 ;;      Temps:          0       2       0       0       0       0       0       0
  3776 ;;      Totals:         0       3       0       0       0       0       0       0
  3777 ;;Total ram usage:        3 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    4
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_I2C_Main
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           
  3788                           ;psect for function _I2C_Master_Reception
  3789  052B                     _I2C_Master_Reception:	
  3790  052B                     l365:	
  3791                           ;MCU_B1.c: 576: char i;
  3792                           ;MCU_B1.c: 577: while(SEN);
  3793                           
  3794                           ;incstack = 0
  3795                           ; Regs used in _I2C_Master_Reception: [wreg+fsr1l+fsr1h+status,2+status,0]
  3796                           
  3797  052B  0024               	movlb	4	; select bank4
  3798  052C  1816               	btfsc	22,0	;volatile
  3799  052D  2D2B               	goto	l365
  3800                           
  3801                           ;MCU_B1.c: 578: SEN=1;
  3802  052E  1416               	bsf	22,0	;volatile
  3803  052F                     l368:	
  3804                           ;MCU_B1.c: 579: while(SEN);
  3805                           
  3806  052F  1816               	btfsc	22,0	;volatile
  3807  0530  2D2F               	goto	l368
  3808                           
  3809                           ;MCU_B1.c: 582: SSPBUF=0x11;
  3810  0531  3011               	movlw	17
  3811  0532  0091               	movwf	17	;volatile
  3812  0533                     l371:	
  3813                           ;MCU_B1.c: 585: while(BF);
  3814                           
  3815  0533  1814               	btfsc	20,0	;volatile
  3816  0534  2D33               	goto	l371
  3817  0535                     l374:	
  3818                           ;MCU_B1.c: 586: while(ACKSTAT);
  3819                           
  3820  0535  1B16               	btfsc	22,6	;volatile
  3821  0536  2D35               	goto	l374
  3822                           
  3823                           ;MCU_B1.c: 589: for(i=0;i<32;i++)
  3824  0537  0020               	movlb	0	; select bank0
  3825  0538  01A7               	clrf	I2C_Master_Reception@i
  3826  0539  3020               	movlw	32
  3827  053A  0227               	subwf	I2C_Master_Reception@i,w
  3828  053B  1803               	btfsc	3,0
  3829  053C  2D61               	goto	l394
  3830  053D                     l379:	
  3831                           ;MCU_B1.c: 590: {
  3832                           ;MCU_B1.c: 591: while(SEN);
  3833                           
  3834  053D  0024               	movlb	4	; select bank4
  3835  053E  1816               	btfsc	22,0	;volatile
  3836  053F  2D3D               	goto	l379
  3837  0540                     l382:	
  3838                           ;MCU_B1.c: 592: while(RCEN);
  3839                           
  3840  0540  1996               	btfsc	22,3	;volatile
  3841  0541  2D40               	goto	l382
  3842                           
  3843                           ;MCU_B1.c: 593: RCEN=1;
  3844  0542  1596               	bsf	22,3	;volatile
  3845  0543                     l385:	
  3846                           ;MCU_B1.c: 594: while(RCEN);
  3847                           
  3848  0543  1996               	btfsc	22,3	;volatile
  3849  0544  2D43               	goto	l385
  3850                           
  3851                           ;MCU_B1.c: 595: I2C->BufferReader[i]=SSPBUF;
  3852  0545  0811               	movf	17,w	;volatile
  3853  0546  0020               	movlb	0	; select bank0
  3854  0547  00A5               	movwf	??_I2C_Master_Reception
  3855  0548  0827               	movf	I2C_Master_Reception@i,w
  3856  0549  075A               	addwf	_I2C,w
  3857  054A  00A6               	movwf	??_I2C_Master_Reception+1
  3858  054B  0826               	movf	??_I2C_Master_Reception+1,w
  3859  054C  0086               	movwf	6
  3860  054D  3001               	movlw	1	; select bank2/3
  3861  054E  0087               	movwf	7
  3862  054F  0825               	movf	??_I2C_Master_Reception,w
  3863  0550  0081               	movwf	1
  3864  0551                     l388:	
  3865                           ;MCU_B1.c: 596: while(!ACKEN)
  3866                           
  3867  0551  0024               	movlb	4	; select bank4
  3868  0552  1A16               	btfsc	22,4	;volatile
  3869  0553  2D56               	goto	l391
  3870                           
  3871                           ;MCU_B1.c: 597: ACKEN=1;
  3872  0554  1616               	bsf	22,4	;volatile
  3873  0555  2D51               	goto	l388
  3874  0556                     l391:	
  3875                           ;MCU_B1.c: 598: while(ACKEN);
  3876                           
  3877  0556  1A16               	btfsc	22,4	;volatile
  3878  0557  2D56               	goto	l391
  3879  0558  3001               	movlw	1
  3880  0559  0020               	movlb	0	; select bank0
  3881  055A  00A5               	movwf	??_I2C_Master_Reception
  3882  055B  0825               	movf	??_I2C_Master_Reception,w
  3883  055C  07A7               	addwf	I2C_Master_Reception@i,f
  3884  055D  3020               	movlw	32
  3885  055E  0227               	subwf	I2C_Master_Reception@i,w
  3886  055F  1C03               	skipc
  3887  0560  2D3D               	goto	l379
  3888  0561                     l394:	
  3889                           ;MCU_B1.c: 599: }
  3890                           ;MCU_B1.c: 600: while(RCEN);
  3891                           
  3892  0561  0024               	movlb	4	; select bank4
  3893  0562  1996               	btfsc	22,3	;volatile
  3894  0563  2D61               	goto	l394
  3895                           
  3896                           ;MCU_B1.c: 601: RCEN=1;
  3897  0564  1596               	bsf	22,3	;volatile
  3898  0565                     l397:	
  3899                           ;MCU_B1.c: 602: while(RCEN);
  3900                           
  3901  0565  1D96               	btfss	22,3	;volatile
  3902  0566  2D69               	goto	l400
  3903  0567  2D65               	goto	l397
  3904  0568                     l401:	
  3905                           ;MCU_B1.c: 603: while(!ACKEN)
  3906                           
  3907                           
  3908                           ;MCU_B1.c: 604: ACKEN=1;
  3909  0568  1616               	bsf	22,4	;volatile
  3910  0569                     l400:	
  3911  0569  1E16               	btfss	22,4	;volatile
  3912  056A  2D68               	goto	l401
  3913  056B                     l403:	
  3914                           ;MCU_B1.c: 605: while(ACKEN);
  3915                           
  3916  056B  1A16               	btfsc	22,4	;volatile
  3917  056C  2D6B               	goto	l403
  3918  056D                     l406:	
  3919                           ;MCU_B1.c: 606: while(RCEN);
  3920                           
  3921  056D  1996               	btfsc	22,3	;volatile
  3922  056E  2D6D               	goto	l406
  3923                           
  3924                           ;MCU_B1.c: 607: RCEN=1;
  3925  056F  1596               	bsf	22,3	;volatile
  3926  0570                     l409:	
  3927                           ;MCU_B1.c: 608: while(RCEN);
  3928                           
  3929  0570  1996               	btfsc	22,3	;volatile
  3930  0571  2D70               	goto	l409
  3931  0572                     l412:	
  3932                           ;MCU_B1.c: 610: while(SEN);
  3933                           
  3934  0572  1C16               	btfss	22,0	;volatile
  3935  0573  2D76               	goto	l415
  3936  0574  2D72               	goto	l412
  3937  0575                     l416:	
  3938                           ;MCU_B1.c: 611: while(!PEN)
  3939                           
  3940                           
  3941                           ;MCU_B1.c: 612: PEN=1;
  3942  0575  1516               	bsf	22,2	;volatile
  3943  0576                     l415:	
  3944  0576  1D16               	btfss	22,2	;volatile
  3945  0577  2D75               	goto	l416
  3946  0578                     l418:	
  3947                           ;MCU_B1.c: 613: while(PEN);
  3948                           
  3949  0578  1D16               	btfss	22,2	;volatile
  3950  0579  0008               	return
  3951  057A  2D78               	goto	l418
  3952  057B                     __end_of_I2C_Master_Reception:	
  3953                           
  3954                           	psect	intentry
  3955  0004                     __pintentry:	
  3956 ;; *************** function _ISR *****************
  3957 ;; Defined at:
  3958 ;;		line 97 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;		None
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;		None
  3963 ;; Return value:  Size  Location     Type
  3964 ;;		None               void
  3965 ;; Registers used:
  3966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3972 ;;      Params:         0       0       0       0       0       0       0       0
  3973 ;;      Locals:         0       0       0       0       0       0       0       0
  3974 ;;      Temps:          0       1       0       0       0       0       0       0
  3975 ;;      Totals:         0       1       0       0       0       0       0       0
  3976 ;;Total ram usage:        1 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    3
  3979 ;; This function calls:
  3980 ;;		_TMR1_ISR
  3981 ;;		_UART_ISR
  3982 ;; This function is called by:
  3983 ;;		Interrupt level 1
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987  0004                     _ISR:	
  3988                           
  3989                           ;incstack = 0
  3990                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3991  0004  147E               	bsf	126,0	;set compiler interrupt flag
  3992  0005  3180               	pagesel	$
  3993  0006  0020               	movlb	0	; select bank0
  3994  0007  087F               	movf	127,w
  3995  0008  00A4               	movwf	??_ISR
  3996                           
  3997                           ;MCU_B1.c: 99: ;;
  3998                           ;MCU_B1.c: 101: ;;
  3999                           ;MCU_B1.c: 103: TMR1_ISR();
  4000  0009  3187  2718  3180   	fcall	_TMR1_ISR
  4001                           
  4002                           ;MCU_B1.c: 107: ;;
  4003                           ;MCU_B1.c: 109: UART_ISR();
  4004  000C  3187  2768         	fcall	_UART_ISR
  4005  000E  0020               	movlb	0	; select bank0
  4006  000F  0824               	movf	??_ISR,w
  4007  0010  00FF               	movwf	127
  4008  0011  107E               	bcf	126,0	;clear compiler interrupt flag
  4009  0012  0009               	retfie
  4010  0013                     __end_of_ISR:	
  4011                           
  4012                           	psect	text23
  4013  0768                     __ptext23:	
  4014 ;; *************** function _UART_ISR *****************
  4015 ;; Defined at:
  4016 ;;		line 683 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  i               1    0        unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;		None               void
  4023 ;; Registers used:
  4024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4030 ;;      Params:         0       0       0       0       0       0       0       0
  4031 ;;      Locals:         0       0       0       0       0       0       0       0
  4032 ;;      Temps:          2       0       0       0       0       0       0       0
  4033 ;;      Totals:         2       0       0       0       0       0       0       0
  4034 ;;Total ram usage:        2 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    2
  4037 ;; This function calls:
  4038 ;;		i1_setSegmentDisplayNumber
  4039 ;; This function is called by:
  4040 ;;		_ISR
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function _UART_ISR
  4046  0768                     _UART_ISR:	
  4047                           
  4048                           ;MCU_B1.c: 685: char i;
  4049                           ;MCU_B1.c: 686: if(RCIE && RCIF)
  4050                           
  4051                           ;incstack = 0
  4052                           ; Regs used in _UART_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4053  0768  0021               	movlb	1	; select bank1
  4054  0769  1E91               	btfss	17,5	;volatile
  4055  076A  0008               	return
  4056  076B  0020               	movlb	0	; select bank0
  4057  076C  1E91               	btfss	17,5	;volatile
  4058  076D  0008               	return
  4059  076E                     i1l446:	
  4060                           ;MCU_B1.c: 687: {
  4061                           ;MCU_B1.c: 688: while(!RCIDL);
  4062                           
  4063  076E  0023               	movlb	3	; select bank3
  4064  076F  1F1F               	btfss	31,6	;volatile
  4065  0770  2F6E               	goto	i1l446
  4066                           
  4067                           ;MCU_B1.c: 690: UART->RxData[0]=RCREG;
  4068  0771  0819               	movf	25,w	;volatile
  4069  0772  00FC               	movwf	??_UART_ISR
  4070  0773  0020               	movlb	0	; select bank0
  4071  0774  0859               	movf	_UART,w
  4072  0775  3E20               	addlw	32
  4073  0776  0086               	movwf	6
  4074  0777  3001               	movlw	1	; select bank2/3
  4075  0778  0087               	movwf	7
  4076  0779  087C               	movf	??_UART_ISR,w
  4077  077A  0081               	movwf	1
  4078                           
  4079                           ;MCU_B1.c: 699: RA1=~RA1;
  4080  077B  3002               	movlw	2
  4081  077C  068C               	xorwf	12,f
  4082                           
  4083                           ;MCU_B1.c: 700: setSegmentDisplayNumber(UART->RxData[0]);
  4084  077D  0859               	movf	_UART,w
  4085  077E  3E20               	addlw	32
  4086  077F  0086               	movwf	6
  4087  0780  3001               	movlw	1	; select bank2/3
  4088  0781  0087               	movwf	7
  4089  0782  0801               	movf	1,w
  4090  0783  00FC               	movwf	??_UART_ISR
  4091  0784  01FD               	clrf	??_UART_ISR+1
  4092  0785  087C               	movf	??_UART_ISR,w
  4093  0786  00F9               	movwf	i1setSegmentDisplayNumber@number
  4094  0787  087D               	movf	??_UART_ISR+1,w
  4095  0788  00FA               	movwf	i1setSegmentDisplayNumber@number+1
  4096  0789  3181  216D         	fcall	i1_setSegmentDisplayNumber
  4097  078B  0008               	return
  4098  078C                     __end_of_UART_ISR:	
  4099                           
  4100                           	psect	text24
  4101  016D                     __ptext24:	
  4102 ;; *************** function i1_setSegmentDisplayNumber *****************
  4103 ;; Defined at:
  4104 ;;		line 20 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\SegmentDisplay_A2.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  number          2    9[COMMON] int 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  setSegmentDi    1   11[COMMON] unsigned char 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;		None               void
  4111 ;; Registers used:
  4112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4118 ;;      Params:         2       0       0       0       0       0       0       0
  4119 ;;      Locals:         1       0       0       0       0       0       0       0
  4120 ;;      Temps:          0       4       0       0       0       0       0       0
  4121 ;;      Totals:         3       4       0       0       0       0       0       0
  4122 ;;Total ram usage:        7 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    1
  4125 ;; This function calls:
  4126 ;;		i1___awdiv
  4127 ;;		i1___awmod
  4128 ;; This function is called by:
  4129 ;;		_UART_ISR
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function i1_setSegmentDisplayNumber
  4135  016D                     i1_setSegmentDisplayNumber:	
  4136                           
  4137                           ;SegmentDisplay_A2.c: 22: char i;
  4138                           ;SegmentDisplay_A2.c: 23: if(Segment->Enable)
  4139                           
  4140                           ;incstack = 0
  4141                           ; Regs used in i1_setSegmentDisplayNumber: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  4142  016D  0020               	movlb	0	; select bank0
  4143  016E  085B               	movf	_Segment,w
  4144  016F  3E15               	addlw	21
  4145  0170  0086               	movwf	6
  4146  0171  0187               	clrf	7
  4147  0172  1C01               	btfss	1,0
  4148  0173  0008               	return
  4149                           
  4150                           ;SegmentDisplay_A2.c: 24: {
  4151                           ;SegmentDisplay_A2.c: 25: Segment->GO=1;
  4152  0174  085B               	movf	_Segment,w
  4153  0175  3E15               	addlw	21
  4154  0176  0086               	movwf	6
  4155  0177  0187               	clrf	7
  4156  0178  1481               	bsf	1,1
  4157                           
  4158                           ;SegmentDisplay_A2.c: 26: if(Segment->Hex)
  4159  0179  085B               	movf	_Segment,w
  4160  017A  3E15               	addlw	21
  4161  017B  0086               	movwf	6
  4162  017C  0187               	clrf	7
  4163  017D  1D01               	btfss	1,2
  4164  017E  29B9               	goto	i1l2001
  4165                           
  4166                           ;SegmentDisplay_A2.c: 27: {
  4167                           ;SegmentDisplay_A2.c: 28: Segment->Num[0]=(number & 0x000f);
  4168  017F  0879               	movf	i1setSegmentDisplayNumber@number,w
  4169  0180  390F               	andlw	15
  4170  0181  00A0               	movwf	??i1_setSegmentDisplayNumber
  4171  0182  085B               	movf	_Segment,w
  4172  0183  3E11               	addlw	17
  4173  0184  0086               	movwf	6
  4174  0185  0187               	clrf	7
  4175  0186  0820               	movf	??i1_setSegmentDisplayNumber,w
  4176  0187  0081               	movwf	1
  4177                           
  4178                           ;SegmentDisplay_A2.c: 29: Segment->Num[1]=((number>>4)&0x000f);
  4179  0188  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4180  0189  00A1               	movwf	??i1_setSegmentDisplayNumber+1
  4181  018A  0879               	movf	i1setSegmentDisplayNumber@number,w
  4182  018B  00A0               	movwf	??i1_setSegmentDisplayNumber
  4183  018C  3004               	movlw	4
  4184  018D  00A2               	movwf	??i1_setSegmentDisplayNumber+2
  4185  018E                     u251_25:	
  4186  018E  0D21               	rlf	??i1_setSegmentDisplayNumber+1,w
  4187  018F  0CA1               	rrf	??i1_setSegmentDisplayNumber+1,f
  4188  0190  0CA0               	rrf	??i1_setSegmentDisplayNumber,f
  4189  0191  0BA2               	decfsz	??i1_setSegmentDisplayNumber+2,f
  4190  0192  298E               	goto	u251_25
  4191  0193  0820               	movf	??i1_setSegmentDisplayNumber,w
  4192  0194  390F               	andlw	15
  4193  0195  00A3               	movwf	??i1_setSegmentDisplayNumber+3
  4194  0196  085B               	movf	_Segment,w
  4195  0197  3E12               	addlw	18
  4196  0198  0086               	movwf	6
  4197  0199  0187               	clrf	7
  4198  019A  0823               	movf	??i1_setSegmentDisplayNumber+3,w
  4199  019B  0081               	movwf	1
  4200                           
  4201                           ;SegmentDisplay_A2.c: 30: Segment->Num[2]=((number>>8)&0x000f);
  4202  019C  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4203  019D  390F               	andlw	15
  4204  019E  00A0               	movwf	??i1_setSegmentDisplayNumber
  4205  019F  085B               	movf	_Segment,w
  4206  01A0  3E13               	addlw	19
  4207  01A1  0086               	movwf	6
  4208  01A2  0187               	clrf	7
  4209  01A3  0820               	movf	??i1_setSegmentDisplayNumber,w
  4210  01A4  0081               	movwf	1
  4211                           
  4212                           ;SegmentDisplay_A2.c: 31: Segment->Num[3]=((number>>12)&0x000f);
  4213  01A5  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4214  01A6  00A1               	movwf	??i1_setSegmentDisplayNumber+1
  4215  01A7  0879               	movf	i1setSegmentDisplayNumber@number,w
  4216  01A8  00A0               	movwf	??i1_setSegmentDisplayNumber
  4217  01A9  300C               	movlw	12
  4218  01AA  00A2               	movwf	??i1_setSegmentDisplayNumber+2
  4219  01AB                     u252_25:	
  4220  01AB  0D21               	rlf	??i1_setSegmentDisplayNumber+1,w
  4221  01AC  0CA1               	rrf	??i1_setSegmentDisplayNumber+1,f
  4222  01AD  0CA0               	rrf	??i1_setSegmentDisplayNumber,f
  4223  01AE  0BA2               	decfsz	??i1_setSegmentDisplayNumber+2,f
  4224  01AF  29AB               	goto	u252_25
  4225  01B0  0820               	movf	??i1_setSegmentDisplayNumber,w
  4226  01B1  390F               	andlw	15
  4227  01B2  00A3               	movwf	??i1_setSegmentDisplayNumber+3
  4228  01B3  085B               	movf	_Segment,w
  4229  01B4  3E14               	addlw	20
  4230  01B5  0086               	movwf	6
  4231  01B6  0187               	clrf	7
  4232  01B7  0823               	movf	??i1_setSegmentDisplayNumber+3,w
  4233  01B8  2A63               	goto	L4
  4234  01B9                     i1l2001:	
  4235                           ;SegmentDisplay_A2.c: 32: }
  4236                           
  4237                           
  4238                           ;SegmentDisplay_A2.c: 33: else if(Segment->Dec)
  4239  01B9  085B               	movf	_Segment,w
  4240  01BA  3E15               	addlw	21
  4241  01BB  0086               	movwf	6
  4242  01BC  0187               	clrf	7
  4243  01BD  1D81               	btfss	1,3
  4244  01BE  2A64               	goto	i1l2029
  4245                           
  4246                           ;SegmentDisplay_A2.c: 34: {
  4247                           ;SegmentDisplay_A2.c: 35: if(number > 0x270f)
  4248  01BF  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4249  01C0  3A80               	xorlw	128
  4250  01C1  00A0               	movwf	??i1_setSegmentDisplayNumber
  4251  01C2  30A7               	movlw	167
  4252  01C3  0220               	subwf	??i1_setSegmentDisplayNumber,w
  4253  01C4  1D03               	skipz
  4254  01C5  29C8               	goto	u254_25
  4255  01C6  3010               	movlw	16
  4256  01C7  0279               	subwf	i1setSegmentDisplayNumber@number,w
  4257  01C8                     u254_25:	
  4258  01C8  1C03               	skipc
  4259  01C9  29E0               	goto	i1l2017
  4260                           
  4261                           ;SegmentDisplay_A2.c: 36: {
  4262                           ;SegmentDisplay_A2.c: 37: for(i=0 ; i<4; i++)
  4263  01CA  01FB               	clrf	i1setSegmentDisplayNumber@i
  4264  01CB                     L5:	
  4265  01CB  3004               	movlw	4
  4266  01CC  027B               	subwf	i1setSegmentDisplayNumber@i,w
  4267  01CD  1803               	btfsc	3,0
  4268  01CE  2A64               	goto	i1l2029
  4269                           
  4270                           ;SegmentDisplay_A2.c: 38: {
  4271                           ;SegmentDisplay_A2.c: 39: Segment->Num[i]=16;
  4272  01CF  3010               	movlw	16
  4273  01D0  0020               	movlb	0	; select bank0
  4274  01D1  00A0               	movwf	??i1_setSegmentDisplayNumber
  4275  01D2  087B               	movf	i1setSegmentDisplayNumber@i,w
  4276  01D3  3E11               	addlw	17
  4277  01D4  075B               	addwf	_Segment,w
  4278  01D5  00A1               	movwf	??i1_setSegmentDisplayNumber+1
  4279  01D6  0821               	movf	??i1_setSegmentDisplayNumber+1,w
  4280  01D7  0086               	movwf	6
  4281  01D8  0187               	clrf	7
  4282  01D9  0820               	movf	??i1_setSegmentDisplayNumber,w
  4283  01DA  0081               	movwf	1
  4284  01DB  3001               	movlw	1
  4285  01DC  00A0               	movwf	??i1_setSegmentDisplayNumber
  4286  01DD  0820               	movf	??i1_setSegmentDisplayNumber,w
  4287  01DE  07FB               	addwf	i1setSegmentDisplayNumber@i,f
  4288  01DF  29CB               	goto	L5
  4289  01E0                     i1l2017:	
  4290                           ;SegmentDisplay_A2.c: 40: }
  4291                           ;SegmentDisplay_A2.c: 41: }
  4292                           
  4293                           
  4294                           ;SegmentDisplay_A2.c: 42: else
  4295                           ;SegmentDisplay_A2.c: 43: {
  4296                           ;SegmentDisplay_A2.c: 44: Segment->Num[3]=(number/1000);
  4297  01E0  30E8               	movlw	232
  4298  01E1  00F0               	movwf	i1___awdiv@divisor
  4299  01E2  3003               	movlw	3
  4300  01E3  00F1               	movwf	i1___awdiv@divisor+1
  4301  01E4  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4302  01E5  01F3               	clrf	i1___awdiv@dividend+1
  4303  01E6  07F3               	addwf	i1___awdiv@dividend+1,f
  4304  01E7  0879               	movf	i1setSegmentDisplayNumber@number,w
  4305  01E8  01F2               	clrf	i1___awdiv@dividend
  4306  01E9  07F2               	addwf	i1___awdiv@dividend,f
  4307  01EA  3184  24D8  3181   	fcall	i1___awdiv
  4308  01ED  0870               	movf	?i1___awdiv,w
  4309  01EE  0020               	movlb	0	; select bank0
  4310  01EF  00A0               	movwf	??i1_setSegmentDisplayNumber
  4311  01F0  085B               	movf	_Segment,w
  4312  01F1  3E14               	addlw	20
  4313  01F2  0086               	movwf	6
  4314  01F3  0187               	clrf	7
  4315  01F4  0820               	movf	??i1_setSegmentDisplayNumber,w
  4316  01F5  0081               	movwf	1
  4317                           
  4318                           ;SegmentDisplay_A2.c: 45: number%=1000;
  4319  01F6  30E8               	movlw	232
  4320  01F7  00F0               	movwf	i1___awmod@divisor
  4321  01F8  3003               	movlw	3
  4322  01F9  00F1               	movwf	i1___awmod@divisor+1
  4323  01FA  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4324  01FB  01F3               	clrf	i1___awmod@dividend+1
  4325  01FC  07F3               	addwf	i1___awmod@dividend+1,f
  4326  01FD  0879               	movf	i1setSegmentDisplayNumber@number,w
  4327  01FE  01F2               	clrf	i1___awmod@dividend
  4328  01FF  07F2               	addwf	i1___awmod@dividend,f
  4329  0200  3185  25C3  3181   	fcall	i1___awmod
  4330  0203  0871               	movf	?i1___awmod+1,w
  4331  0204  01FA               	clrf	i1setSegmentDisplayNumber@number+1
  4332  0205  07FA               	addwf	i1setSegmentDisplayNumber@number+1,f
  4333  0206  0870               	movf	?i1___awmod,w
  4334  0207  01F9               	clrf	i1setSegmentDisplayNumber@number
  4335  0208  07F9               	addwf	i1setSegmentDisplayNumber@number,f
  4336                           
  4337                           ;SegmentDisplay_A2.c: 46: Segment->Num[2]=(number/100);
  4338  0209  3064               	movlw	100
  4339  020A  00F0               	movwf	i1___awdiv@divisor
  4340  020B  3000               	movlw	0
  4341  020C  00F1               	movwf	i1___awdiv@divisor+1
  4342  020D  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4343  020E  01F3               	clrf	i1___awdiv@dividend+1
  4344  020F  07F3               	addwf	i1___awdiv@dividend+1,f
  4345  0210  0879               	movf	i1setSegmentDisplayNumber@number,w
  4346  0211  01F2               	clrf	i1___awdiv@dividend
  4347  0212  07F2               	addwf	i1___awdiv@dividend,f
  4348  0213  3184  24D8  3181   	fcall	i1___awdiv
  4349  0216  0870               	movf	?i1___awdiv,w
  4350  0217  0020               	movlb	0	; select bank0
  4351  0218  00A0               	movwf	??i1_setSegmentDisplayNumber
  4352  0219  085B               	movf	_Segment,w
  4353  021A  3E13               	addlw	19
  4354  021B  0086               	movwf	6
  4355  021C  0187               	clrf	7
  4356  021D  0820               	movf	??i1_setSegmentDisplayNumber,w
  4357  021E  0081               	movwf	1
  4358                           
  4359                           ;SegmentDisplay_A2.c: 47: number%=100;
  4360  021F  3064               	movlw	100
  4361  0220  00F0               	movwf	i1___awmod@divisor
  4362  0221  3000               	movlw	0
  4363  0222  00F1               	movwf	i1___awmod@divisor+1
  4364  0223  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4365  0224  01F3               	clrf	i1___awmod@dividend+1
  4366  0225  07F3               	addwf	i1___awmod@dividend+1,f
  4367  0226  0879               	movf	i1setSegmentDisplayNumber@number,w
  4368  0227  01F2               	clrf	i1___awmod@dividend
  4369  0228  07F2               	addwf	i1___awmod@dividend,f
  4370  0229  3185  25C3  3181   	fcall	i1___awmod
  4371  022C  0871               	movf	?i1___awmod+1,w
  4372  022D  01FA               	clrf	i1setSegmentDisplayNumber@number+1
  4373  022E  07FA               	addwf	i1setSegmentDisplayNumber@number+1,f
  4374  022F  0870               	movf	?i1___awmod,w
  4375  0230  01F9               	clrf	i1setSegmentDisplayNumber@number
  4376  0231  07F9               	addwf	i1setSegmentDisplayNumber@number,f
  4377                           
  4378                           ;SegmentDisplay_A2.c: 48: Segment->Num[1]=(number/10);
  4379  0232  300A               	movlw	10
  4380  0233  00F0               	movwf	i1___awdiv@divisor
  4381  0234  3000               	movlw	0
  4382  0235  00F1               	movwf	i1___awdiv@divisor+1
  4383  0236  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4384  0237  01F3               	clrf	i1___awdiv@dividend+1
  4385  0238  07F3               	addwf	i1___awdiv@dividend+1,f
  4386  0239  0879               	movf	i1setSegmentDisplayNumber@number,w
  4387  023A  01F2               	clrf	i1___awdiv@dividend
  4388  023B  07F2               	addwf	i1___awdiv@dividend,f
  4389  023C  3184  24D8  3181   	fcall	i1___awdiv
  4390  023F  0870               	movf	?i1___awdiv,w
  4391  0240  0020               	movlb	0	; select bank0
  4392  0241  00A0               	movwf	??i1_setSegmentDisplayNumber
  4393  0242  085B               	movf	_Segment,w
  4394  0243  3E12               	addlw	18
  4395  0244  0086               	movwf	6
  4396  0245  0187               	clrf	7
  4397  0246  0820               	movf	??i1_setSegmentDisplayNumber,w
  4398  0247  0081               	movwf	1
  4399                           
  4400                           ;SegmentDisplay_A2.c: 49: number%=10;
  4401  0248  300A               	movlw	10
  4402  0249  00F0               	movwf	i1___awmod@divisor
  4403  024A  3000               	movlw	0
  4404  024B  00F1               	movwf	i1___awmod@divisor+1
  4405  024C  087A               	movf	i1setSegmentDisplayNumber@number+1,w
  4406  024D  01F3               	clrf	i1___awmod@dividend+1
  4407  024E  07F3               	addwf	i1___awmod@dividend+1,f
  4408  024F  0879               	movf	i1setSegmentDisplayNumber@number,w
  4409  0250  01F2               	clrf	i1___awmod@dividend
  4410  0251  07F2               	addwf	i1___awmod@dividend,f
  4411  0252  3185  25C3  3181   	fcall	i1___awmod
  4412  0255  0871               	movf	?i1___awmod+1,w
  4413  0256  01FA               	clrf	i1setSegmentDisplayNumber@number+1
  4414  0257  07FA               	addwf	i1setSegmentDisplayNumber@number+1,f
  4415  0258  0870               	movf	?i1___awmod,w
  4416  0259  01F9               	clrf	i1setSegmentDisplayNumber@number
  4417  025A  07F9               	addwf	i1setSegmentDisplayNumber@number,f
  4418                           
  4419                           ;SegmentDisplay_A2.c: 50: Segment->Num[0]=number;
  4420  025B  0879               	movf	i1setSegmentDisplayNumber@number,w
  4421  025C  0020               	movlb	0	; select bank0
  4422  025D  00A0               	movwf	??i1_setSegmentDisplayNumber
  4423  025E  085B               	movf	_Segment,w
  4424  025F  3E11               	addlw	17
  4425  0260  0086               	movwf	6
  4426  0261  0187               	clrf	7
  4427  0262  0820               	movf	??i1_setSegmentDisplayNumber,w
  4428  0263                     L4:	
  4429  0263  0081               	movwf	1
  4430  0264                     i1l2029:	
  4431                           
  4432                           ;SegmentDisplay_A2.c: 51: }
  4433                           ;SegmentDisplay_A2.c: 52: }
  4434                           ;SegmentDisplay_A2.c: 53: if(Segment->Num[3] > 0)
  4435  0264  0020               	movlb	0	; select bank0
  4436  0265  085B               	movf	_Segment,w
  4437  0266  3E14               	addlw	20
  4438  0267  0086               	movwf	6
  4439  0268  0187               	clrf	7
  4440  0269  0801               	movf	1,w
  4441  026A  3A00               	xorlw	0
  4442  026B  1903               	skipnz
  4443  026C  2A76               	goto	i1l2033
  4444                           
  4445                           ;SegmentDisplay_A2.c: 54: {
  4446                           ;SegmentDisplay_A2.c: 55: Segment->DisplayCount=3;
  4447  026D  3003               	movlw	3
  4448  026E  00A0               	movwf	??i1_setSegmentDisplayNumber
  4449  026F  085B               	movf	_Segment,w
  4450  0270  3E17               	addlw	23
  4451  0271  0086               	movwf	6
  4452  0272  0187               	clrf	7
  4453  0273  0820               	movf	??i1_setSegmentDisplayNumber,w
  4454  0274  0081               	movwf	1
  4455                           
  4456                           ;SegmentDisplay_A2.c: 56: }
  4457  0275  0008               	return
  4458  0276                     i1l2033:	
  4459                           
  4460                           ;SegmentDisplay_A2.c: 57: else if(Segment->Num[2] > 0)
  4461  0276  085B               	movf	_Segment,w
  4462  0277  3E13               	addlw	19
  4463  0278  0086               	movwf	6
  4464  0279  0187               	clrf	7
  4465  027A  0801               	movf	1,w
  4466  027B  3A00               	xorlw	0
  4467  027C  1903               	skipnz
  4468  027D  2A87               	goto	i1l2037
  4469                           
  4470                           ;SegmentDisplay_A2.c: 58: {
  4471                           ;SegmentDisplay_A2.c: 59: Segment->DisplayCount=2;
  4472  027E  3002               	movlw	2
  4473  027F  00A0               	movwf	??i1_setSegmentDisplayNumber
  4474  0280  085B               	movf	_Segment,w
  4475  0281  3E17               	addlw	23
  4476  0282  0086               	movwf	6
  4477  0283  0187               	clrf	7
  4478  0284  0820               	movf	??i1_setSegmentDisplayNumber,w
  4479  0285  0081               	movwf	1
  4480                           
  4481                           ;SegmentDisplay_A2.c: 60: }
  4482  0286  0008               	return
  4483  0287                     i1l2037:	
  4484                           
  4485                           ;SegmentDisplay_A2.c: 61: else if(Segment->Num[1] > 0)
  4486  0287  085B               	movf	_Segment,w
  4487  0288  3E12               	addlw	18
  4488  0289  0086               	movwf	6
  4489  028A  0187               	clrf	7
  4490  028B  0801               	movf	1,w
  4491  028C  3A00               	xorlw	0
  4492  028D  1903               	skipnz
  4493  028E  2A96               	goto	i1l2041
  4494                           
  4495                           ;SegmentDisplay_A2.c: 62: {
  4496                           ;SegmentDisplay_A2.c: 63: Segment->DisplayCount=1;
  4497  028F  085B               	movf	_Segment,w
  4498  0290  3E17               	addlw	23
  4499  0291  0086               	movwf	6
  4500  0292  0187               	clrf	7
  4501  0293  0181               	clrf	1
  4502  0294  0A81               	incf	1,f
  4503                           
  4504                           ;SegmentDisplay_A2.c: 64: }
  4505  0295  0008               	return
  4506  0296                     i1l2041:	
  4507                           
  4508                           ;SegmentDisplay_A2.c: 65: else
  4509                           ;SegmentDisplay_A2.c: 66: {
  4510                           ;SegmentDisplay_A2.c: 67: Segment->DisplayCount=0;
  4511  0296  085B               	movf	_Segment,w
  4512  0297  3E17               	addlw	23
  4513  0298  0086               	movwf	6
  4514  0299  0187               	clrf	7
  4515  029A  0181               	clrf	1
  4516  029B  0008               	return
  4517  029C                     __end_ofi1_setSegmentDisplayNumber:	
  4518                           
  4519                           	psect	text25
  4520  05C3                     __ptext25:	
  4521 ;; *************** function i1___awmod *****************
  4522 ;; Defined at:
  4523 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  divisor         2    0[COMMON] int 
  4526 ;;  dividend        2    2[COMMON] int 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  __awmod         1    6[COMMON] unsigned char 
  4529 ;;  __awmod         1    5[COMMON] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  2    0[COMMON] int 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4539 ;;      Params:         4       0       0       0       0       0       0       0
  4540 ;;      Locals:         2       0       0       0       0       0       0       0
  4541 ;;      Temps:          1       0       0       0       0       0       0       0
  4542 ;;      Totals:         7       0       0       0       0       0       0       0
  4543 ;;Total ram usage:        7 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		i1_setSegmentDisplayNumber
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           
  4553                           ;psect for function i1___awmod
  4554  05C3                     i1___awmod:	
  4555                           
  4556                           ;incstack = 0
  4557                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  4558  05C3  01F6               	clrf	i1___awmod@sign
  4559  05C4  1FF3               	btfss	i1___awmod@dividend+1,7
  4560  05C5  2DCD               	goto	i1l1791
  4561  05C6  09F2               	comf	i1___awmod@dividend,f
  4562  05C7  09F3               	comf	i1___awmod@dividend+1,f
  4563  05C8  0AF2               	incf	i1___awmod@dividend,f
  4564  05C9  1903               	skipnz
  4565  05CA  0AF3               	incf	i1___awmod@dividend+1,f
  4566  05CB  01F6               	clrf	i1___awmod@sign
  4567  05CC  0AF6               	incf	i1___awmod@sign,f
  4568  05CD                     i1l1791:	
  4569  05CD  1FF1               	btfss	i1___awmod@divisor+1,7
  4570  05CE  2DD4               	goto	i1l1795
  4571  05CF  09F0               	comf	i1___awmod@divisor,f
  4572  05D0  09F1               	comf	i1___awmod@divisor+1,f
  4573  05D1  0AF0               	incf	i1___awmod@divisor,f
  4574  05D2  1903               	skipnz
  4575  05D3  0AF1               	incf	i1___awmod@divisor+1,f
  4576  05D4                     i1l1795:	
  4577  05D4  0871               	movf	i1___awmod@divisor+1,w
  4578  05D5  0470               	iorwf	i1___awmod@divisor,w
  4579  05D6  1903               	skipnz
  4580  05D7  2DFB               	goto	i1l1813
  4581  05D8  01F5               	clrf	i1___awmod@counter
  4582  05D9  0AF5               	incf	i1___awmod@counter,f
  4583  05DA                     i1l1803:	
  4584  05DA  1BF1               	btfsc	i1___awmod@divisor+1,7
  4585  05DB  2DE6               	goto	i1l1805
  4586  05DC  3001               	movlw	1
  4587  05DD                     u196_25:	
  4588  05DD  35F0               	lslf	i1___awmod@divisor,f
  4589  05DE  0DF1               	rlf	i1___awmod@divisor+1,f
  4590  05DF  0B89               	decfsz	9,f
  4591  05E0  2DDD               	goto	u196_25
  4592  05E1  3001               	movlw	1
  4593  05E2  00F4               	movwf	??i1___awmod
  4594  05E3  0874               	movf	??i1___awmod,w
  4595  05E4  07F5               	addwf	i1___awmod@counter,f
  4596  05E5  2DDA               	goto	i1l1803
  4597  05E6                     i1l1805:	
  4598  05E6  0871               	movf	i1___awmod@divisor+1,w
  4599  05E7  0273               	subwf	i1___awmod@dividend+1,w
  4600  05E8  1D03               	skipz
  4601  05E9  2DEC               	goto	u198_25
  4602  05EA  0870               	movf	i1___awmod@divisor,w
  4603  05EB  0272               	subwf	i1___awmod@dividend,w
  4604  05EC                     u198_25:	
  4605  05EC  1C03               	skipc
  4606  05ED  2DF2               	goto	i1l1809
  4607  05EE  0870               	movf	i1___awmod@divisor,w
  4608  05EF  02F2               	subwf	i1___awmod@dividend,f
  4609  05F0  0871               	movf	i1___awmod@divisor+1,w
  4610  05F1  3BF3               	subwfb	i1___awmod@dividend+1,f
  4611  05F2                     i1l1809:	
  4612  05F2  3001               	movlw	1
  4613  05F3                     u199_25:	
  4614  05F3  36F1               	lsrf	i1___awmod@divisor+1,f
  4615  05F4  0CF0               	rrf	i1___awmod@divisor,f
  4616  05F5  0B89               	decfsz	9,f
  4617  05F6  2DF3               	goto	u199_25
  4618  05F7  3001               	movlw	1
  4619  05F8  02F5               	subwf	i1___awmod@counter,f
  4620  05F9  1D03               	btfss	3,2
  4621  05FA  2DE6               	goto	i1l1805
  4622  05FB                     i1l1813:	
  4623  05FB  0876               	movf	i1___awmod@sign,w
  4624  05FC  1903               	btfsc	3,2
  4625  05FD  2E03               	goto	i1l1817
  4626  05FE  09F2               	comf	i1___awmod@dividend,f
  4627  05FF  09F3               	comf	i1___awmod@dividend+1,f
  4628  0600  0AF2               	incf	i1___awmod@dividend,f
  4629  0601  1903               	skipnz
  4630  0602  0AF3               	incf	i1___awmod@dividend+1,f
  4631  0603                     i1l1817:	
  4632  0603  0873               	movf	i1___awmod@dividend+1,w
  4633  0604  01F1               	clrf	?i1___awmod+1
  4634  0605  07F1               	addwf	?i1___awmod+1,f
  4635  0606  0872               	movf	i1___awmod@dividend,w
  4636  0607  01F0               	clrf	?i1___awmod
  4637  0608  07F0               	addwf	?i1___awmod,f
  4638  0609  0008               	return
  4639  060A                     __end_ofi1___awmod:	
  4640                           
  4641                           	psect	text26
  4642  04D8                     __ptext26:	
  4643 ;; *************** function i1___awdiv *****************
  4644 ;; Defined at:
  4645 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  divisor         2    0[COMMON] int 
  4648 ;;  dividend        2    2[COMMON] int 
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;  __awdiv         2    7[COMMON] int 
  4651 ;;  __awdiv         1    6[COMMON] unsigned char 
  4652 ;;  __awdiv         1    5[COMMON] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  2    0[COMMON] int 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4662 ;;      Params:         4       0       0       0       0       0       0       0
  4663 ;;      Locals:         4       0       0       0       0       0       0       0
  4664 ;;      Temps:          1       0       0       0       0       0       0       0
  4665 ;;      Totals:         9       0       0       0       0       0       0       0
  4666 ;;Total ram usage:        9 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; This function calls:
  4669 ;;		Nothing
  4670 ;; This function is called by:
  4671 ;;		i1_setSegmentDisplayNumber
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           
  4676                           ;psect for function i1___awdiv
  4677  04D8                     i1___awdiv:	
  4678                           
  4679                           ;incstack = 0
  4680                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  4681  04D8  01F6               	clrf	i1___awdiv@sign
  4682  04D9  1FF1               	btfss	i1___awdiv@divisor+1,7
  4683  04DA  2CE2               	goto	i1l1747
  4684  04DB  09F0               	comf	i1___awdiv@divisor,f
  4685  04DC  09F1               	comf	i1___awdiv@divisor+1,f
  4686  04DD  0AF0               	incf	i1___awdiv@divisor,f
  4687  04DE  1903               	skipnz
  4688  04DF  0AF1               	incf	i1___awdiv@divisor+1,f
  4689  04E0  01F6               	clrf	i1___awdiv@sign
  4690  04E1  0AF6               	incf	i1___awdiv@sign,f
  4691  04E2                     i1l1747:	
  4692  04E2  1FF3               	btfss	i1___awdiv@dividend+1,7
  4693  04E3  2CED               	goto	i1l1753
  4694  04E4  09F2               	comf	i1___awdiv@dividend,f
  4695  04E5  09F3               	comf	i1___awdiv@dividend+1,f
  4696  04E6  0AF2               	incf	i1___awdiv@dividend,f
  4697  04E7  1903               	skipnz
  4698  04E8  0AF3               	incf	i1___awdiv@dividend+1,f
  4699  04E9  3001               	movlw	1
  4700  04EA  00F4               	movwf	??i1___awdiv
  4701  04EB  0874               	movf	??i1___awdiv,w
  4702  04EC  06F6               	xorwf	i1___awdiv@sign,f
  4703  04ED                     i1l1753:	
  4704  04ED  01F7               	clrf	i1___awdiv@quotient
  4705  04EE  01F8               	clrf	i1___awdiv@quotient+1
  4706  04EF  0871               	movf	i1___awdiv@divisor+1,w
  4707  04F0  0470               	iorwf	i1___awdiv@divisor,w
  4708  04F1  1903               	skipnz
  4709  04F2  2D1C               	goto	i1l1775
  4710  04F3  01F5               	clrf	i1___awdiv@counter
  4711  04F4  0AF5               	incf	i1___awdiv@counter,f
  4712  04F5                     i1l1763:	
  4713  04F5  1BF1               	btfsc	i1___awdiv@divisor+1,7
  4714  04F6  2D01               	goto	i1l1765
  4715  04F7  3001               	movlw	1
  4716  04F8                     u186_25:	
  4717  04F8  35F0               	lslf	i1___awdiv@divisor,f
  4718  04F9  0DF1               	rlf	i1___awdiv@divisor+1,f
  4719  04FA  0B89               	decfsz	9,f
  4720  04FB  2CF8               	goto	u186_25
  4721  04FC  3001               	movlw	1
  4722  04FD  00F4               	movwf	??i1___awdiv
  4723  04FE  0874               	movf	??i1___awdiv,w
  4724  04FF  07F5               	addwf	i1___awdiv@counter,f
  4725  0500  2CF5               	goto	i1l1763
  4726  0501                     i1l1765:	
  4727  0501  3001               	movlw	1
  4728  0502                     u188_25:	
  4729  0502  35F7               	lslf	i1___awdiv@quotient,f
  4730  0503  0DF8               	rlf	i1___awdiv@quotient+1,f
  4731  0504  0B89               	decfsz	9,f
  4732  0505  2D02               	goto	u188_25
  4733  0506  0871               	movf	i1___awdiv@divisor+1,w
  4734  0507  0273               	subwf	i1___awdiv@dividend+1,w
  4735  0508  1D03               	skipz
  4736  0509  2D0C               	goto	u189_25
  4737  050A  0870               	movf	i1___awdiv@divisor,w
  4738  050B  0272               	subwf	i1___awdiv@dividend,w
  4739  050C                     u189_25:	
  4740  050C  1C03               	skipc
  4741  050D  2D13               	goto	i1l1771
  4742  050E  0870               	movf	i1___awdiv@divisor,w
  4743  050F  02F2               	subwf	i1___awdiv@dividend,f
  4744  0510  0871               	movf	i1___awdiv@divisor+1,w
  4745  0511  3BF3               	subwfb	i1___awdiv@dividend+1,f
  4746  0512  1477               	bsf	i1___awdiv@quotient,0
  4747  0513                     i1l1771:	
  4748  0513  3001               	movlw	1
  4749  0514                     u190_25:	
  4750  0514  36F1               	lsrf	i1___awdiv@divisor+1,f
  4751  0515  0CF0               	rrf	i1___awdiv@divisor,f
  4752  0516  0B89               	decfsz	9,f
  4753  0517  2D14               	goto	u190_25
  4754  0518  3001               	movlw	1
  4755  0519  02F5               	subwf	i1___awdiv@counter,f
  4756  051A  1D03               	btfss	3,2
  4757  051B  2D01               	goto	i1l1765
  4758  051C                     i1l1775:	
  4759  051C  0876               	movf	i1___awdiv@sign,w
  4760  051D  1903               	btfsc	3,2
  4761  051E  2D24               	goto	i1l1779
  4762  051F  09F7               	comf	i1___awdiv@quotient,f
  4763  0520  09F8               	comf	i1___awdiv@quotient+1,f
  4764  0521  0AF7               	incf	i1___awdiv@quotient,f
  4765  0522  1903               	skipnz
  4766  0523  0AF8               	incf	i1___awdiv@quotient+1,f
  4767  0524                     i1l1779:	
  4768  0524  0878               	movf	i1___awdiv@quotient+1,w
  4769  0525  01F1               	clrf	?i1___awdiv+1
  4770  0526  07F1               	addwf	?i1___awdiv+1,f
  4771  0527  0877               	movf	i1___awdiv@quotient,w
  4772  0528  01F0               	clrf	?i1___awdiv
  4773  0529  07F0               	addwf	?i1___awdiv,f
  4774  052A  0008               	return
  4775  052B                     __end_ofi1___awdiv:	
  4776                           
  4777                           	psect	text27
  4778  0718                     __ptext27:	
  4779 ;; *************** function _TMR1_ISR *****************
  4780 ;; Defined at:
  4781 ;;		line 249 in file "C:\Users\Eric\Documents\GitHub\myPicCode\Source_File\MCU_B1.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;		None               void
  4788 ;; Registers used:
  4789 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4795 ;;      Params:         0       0       0       0       0       0       0       0
  4796 ;;      Locals:         0       0       0       0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0       0
  4798 ;;      Totals:         0       0       0       0       0       0       0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_ISR
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           
  4809                           ;psect for function _TMR1_ISR
  4810  0718                     _TMR1_ISR:	
  4811                           
  4812                           ;MCU_B1.c: 251: if(TMR1IE && TMR1IF)
  4813                           
  4814                           ;incstack = 0
  4815                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4816  0718  0021               	movlb	1	; select bank1
  4817  0719  1C11               	btfss	17,0	;volatile
  4818  071A  0008               	return
  4819  071B  0020               	movlb	0	; select bank0
  4820  071C  1C11               	btfss	17,0	;volatile
  4821  071D  0008               	return
  4822                           
  4823                           ;MCU_B1.c: 252: {
  4824                           ;MCU_B1.c: 253: TMR1H=((65536-700)/256);
  4825  071E  30FD               	movlw	253
  4826  071F  0097               	movwf	23	;volatile
  4827                           
  4828                           ;MCU_B1.c: 254: TMR1L=((65536-700)%256);
  4829  0720  3044               	movlw	68
  4830  0721  0096               	movwf	22	;volatile
  4831                           
  4832                           ;MCU_B1.c: 255: TMR1IF=0;
  4833  0722  1011               	bcf	17,0	;volatile
  4834                           
  4835                           ;MCU_B1.c: 256: Timer1->Count++;
  4836  0723  0A58               	incf	_Timer1,w
  4837  0724  0086               	movwf	6
  4838  0725  0187               	clrf	7
  4839  0726  3001               	movlw	1
  4840  0727  0781               	addwf	1,f
  4841  0728  3141               	addfsr 1,1
  4842  0729  1803               	skipnc
  4843  072A  0A81               	incf	1,f
  4844                           
  4845                           ;MCU_B1.c: 257: if(Timer1->Count == 20)
  4846  072B  0A58               	incf	_Timer1,w
  4847  072C  0086               	movwf	6
  4848  072D  0187               	clrf	7
  4849  072E  3F40               	moviw [0]fsr1
  4850  072F  3A14               	xorlw	20
  4851  0730  1D03               	skipz
  4852  0731  2F34               	goto	u282_25
  4853  0732  3F41               	moviw [1]fsr1
  4854  0733  3A00               	xorlw	0
  4855  0734                     u282_25:	
  4856  0734  1D03               	skipz
  4857  0735  0008               	return
  4858                           
  4859                           ;MCU_B1.c: 258: {
  4860                           ;MCU_B1.c: 259: Timer1->Count=0;
  4861  0736  0A58               	incf	_Timer1,w
  4862  0737  0086               	movwf	6
  4863  0738  0187               	clrf	7
  4864  0739  3000               	movlw	0
  4865  073A  3FC0               	movwi [0]fsr1
  4866  073B  3FC1               	movwi [1]fsr1
  4867                           
  4868                           ;MCU_B1.c: 260: TMain->T1_Timerout=1;
  4869  073C  0857               	movf	_TMain,w
  4870  073D  0086               	movwf	6
  4871  073E  0187               	clrf	7
  4872  073F  1501               	bsf	1,2
  4873  0740  0008               	return
  4874  0741                     __end_of_TMR1_ISR:	
  4875  007E                     btemp	set	126	;btemp
  4876  007E                     pic14e$flags	set	126
  4877  007E                     wtemp	set	126
  4878  007E                     wtemp0	set	126
  4879  0080                     wtemp1	set	128
  4880  0082                     wtemp2	set	130
  4881  0084                     wtemp3	set	132
  4882  0086                     wtemp4	set	134
  4883  0088                     wtemp5	set	136
  4884  007F                     wtemp6	set	127
  4885  007E                     ttemp	set	126
  4886  007E                     ttemp0	set	126
  4887  0081                     ttemp1	set	129
  4888  0084                     ttemp2	set	132
  4889  0087                     ttemp3	set	135
  4890  007F                     ttemp4	set	127
  4891  007E                     ltemp	set	126
  4892  007E                     ltemp0	set	126
  4893  0082                     ltemp1	set	130
  4894  0086                     ltemp2	set	134
  4895  0080                     ltemp3	set	128


Data Sizes:
    Strings     21
    Constant    8
    Data        58
    BSS         153
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      60
    BANK1            80      0      58
    BANK2            80      0      67
    BANK3            80      0      68
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S540$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    UART	PTR struct UART size(1) Largest target is 68
		 -> NULL(NULL[0]), VarUart(BANK3[68]), 

    I2C	PTR struct I2C size(1) Largest target is 67
		 -> NULL(NULL[0]), VarI2C(BANK2[67]), 

    Timer1	PTR struct Timer1 size(1) Largest target is 3
		 -> NULL(NULL[0]), VarTimer1(BANK0[3]), 

    Segment	PTR struct Segment size(1) Largest target is 26
		 -> NULL(NULL[0]), VarSegment(BANK1[26]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK1[32]), 

    TMain	PTR struct TMain size(1) Largest target is 15
		 -> NULL(NULL[0]), VarTMain(BANK0[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR
    _UART_ISR->i1_setSegmentDisplayNumber
    i1_setSegmentDisplayNumber->i1___awdiv

Critical Paths under _main in BANK0

    _main->_UART_Main
    _UART_Main->_UART_Transmit
    _setSegmentDisplayNumber->___awdiv
    _UART_Transmit->_printf
    _printf->___lwdiv
    _Mcu_Initialization->_I2C_Set
    _Mcu_Initialization->_TMR1_Set
    _Mcu_Initialization->_UART_Set
    _I2C_Main->_I2C_Master_Reception

Critical Paths under _ISR in BANK0

    _UART_ISR->i1_setSegmentDisplayNumber

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2715
                           _I2C_Main
                              _MainT
                      _MainT_Initial
                 _Mcu_Initialization
             _SegmentDisplay_Initial
                _SegmentDisplay_Main
                          _UART_Main
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            2     2      0    2489
                                             34 BANK0      2     2      0
                       _UART_Receive
                      _UART_Transmit
            _setSegmentDisplayNumber
 ---------------------------------------------------------------------------------
 (2) _setSegmentDisplayNumber                              7     5      2    1647
                                             14 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     614
                                              5 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     618
                                              5 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        4     4      0     752
                                             30 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              17    13      4     684
                                             13 BANK0     17    13      4
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     268
                                              5 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         4     4      0      90
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SegmentDisplay_Main                                  2     2      0       0
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SegmentDisplay_Initial                               1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _I2C_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Set                                              1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initial                                        1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Main                                             4     4      0     226
                                              8 BANK0      4     4      0
               _I2C_Master_Reception
            _I2C_Master_Transmission
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Transmission                              2     2      0      68
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Reception                                 3     3      0      68
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  1     1      0    1269
                                              4 BANK0      1     1      0
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (6) _UART_ISR                                             3     3      0    1269
                                             12 COMMON     2     2      0
          i1_setSegmentDisplayNumber
 ---------------------------------------------------------------------------------
 (7) i1_setSegmentDisplayNumber                            7     5      2    1269
                                              9 COMMON     3     1      2
                                              0 BANK0      4     4      0
                          i1___awdiv
                          i1___awmod
 ---------------------------------------------------------------------------------
 (8) i1___awmod                                            7     3      4     452
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) i1___awdiv                                            9     5      4     456
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Main
     _I2C_Master_Reception
     _I2C_Master_Transmission
   _MainT
   _MainT_Initial
   _Mcu_Initialization
     _I2C_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
   _SegmentDisplay_Initial
   _SegmentDisplay_Main
   _UART_Main
     _UART_Receive
     _UART_Transmit
       _printf
         ___lwdiv
         _putch
     _setSegmentDisplayNumber
       ___awdiv
       ___awmod

 _ISR (ROOT)
   _TMR1_ISR
   _UART_ISR
     i1_setSegmentDisplayNumber
       i1___awdiv
       i1___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     10B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     24      3C       6       75.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      3A       8       72.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      43      10       83.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      44      12       85.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     10B      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Sep 24 23:12:51 2014

                   ??_MainT_Initial 0025                                  _BF 10A0  
                      ___awdiv@sign 002B           ??_setSegmentDisplayNumber 0030  
                               l400 0569                                 l401 0568  
                               l330 0644                                 l322 0415  
                               l403 056B                                 l315 03F2  
                               _I2C 005A                                 l412 0572  
                               l333 0648                                 l406 056D  
                               l350 0667                                 l510 033E  
                               l415 0576                                 l416 0575  
                               l344 0656                                 l336 064C  
                               l409 0570                                 l353 0672  
                               l418 0578                                 l371 0533  
                               l347 0665                                 l339 064E  
                               l356 0677                                 l365 052B  
                               l357 0676                                 l382 0540  
                               l374 0535                                 l391 0556  
                               l359 0679                                 l471 0FCE  
                               l368 052F                                 l385 0543  
                               l394 0561                                 l379 053D  
                               l388 0551                                 l397 0565  
                               _CKP 10AC                                 _GIE 005F  
                               _RA1 0061                                 _RA2 0062  
                               _RC0 0070                                 _RA4 0064  
                               _RA5 0065                                 _RA6 0066  
                               _RA7 0067                                 _PEN 10B2  
                               _ISR 0004                                 _SEN 10B0  
                               _RX9 0CEE                                 _TX9 0CF6  
                   __end_of_I2C_Set 0FE2                        ___awmod@sign 002B  
                               wreg 0009       __size_of_I2C_Master_Reception 0050  
                              ?_ISR 0070                                l2111 03EB  
                              l2105 03D1                                l2117 0408  
                              l2135 06D6                                l2073 0449  
                              l1601 0691                                l2209 074B  
                              l2083 0467                                l2163 037C  
                              l2155 0368                                l1611 06AC  
                              l2173 03AC                                l1621 02BD  
                              l2159 0372                                l2167 0384  
                              l1607 06A3                                l1721 0593  
                              l1713 058D                                l1627 02D3  
                              l1723 059F                                l1731 05B4  
                              l1653 0307                                l1645 0303  
                              l1637 02E4                                l1709 0586  
                              l1655 02A1                                l1671 049A  
                              l1735 05BC                                l1727 05AB  
                              l1831 0088                                l1681 04A2  
                              l1665 048F                                l1683 04AE  
                              l1693 04C9                                l1599 0685  
                              l1871 0167                                l1863 0147  
                              l1847 00AF                                l1697 04D1  
                              l1689 04C0                                l1971 06F5  
                              l1867 0158                                l1859 0136  
                              l1977 0711                                STR_1 0819  
                              STR_2 0808                                u2045 005D  
                              _LATA 010C                                _LATB 010D  
                              u2055 007A                                _LATC 010E  
                              u2075 0097                                u1525 0688  
                              u1605 02F9                                u1545 0692  
                              u1705 04B9                                u1555 069C  
                              u1715 04C1                                u1565 06A4  
                              u1805 05AC                                u2615 043C  
                              u2625 045C                                u2635 047A  
                              u1675 04A5                                u1695 04AF  
                              u1775 0596                                u1795 05A5  
                              _PEIE 005E                                _RCIE 048D  
                              _RCEN 10B3                                _RCIF 008D  
                              _UART 0059                                _TXIE 048C  
                              _TXIF 008C                                _R_nW 10A2  
                              _main 0741                    __end_of_I2C_Main 0425  
                              fsr0h 0005                                fsr1h 0007  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                                ltemp 007E  
                              start 0013                                ttemp 007E  
                              wtemp 007E                               ??_ISR 0024  
                             ?_main 0070                      i1___awdiv@sign 0076  
                             _ACKEN 10B4                     __end_of___awdiv 04D8  
                             _BRG16 0CFB                       __CFG_WDTE$OFF 0000  
                   __end_of___awmod 05C3                     ___awdiv@divisor 0025  
                             _T1CON 0018                     __end_of___lwdiv 06B3  
                             i1l446 076E                               _RCIDL 0CFE  
                   ___awdiv@counter 002A                               _RCREG 0199  
                             _RCSTA 019D                               _TMR1H 0017  
                             _TMR1L 0016                               _SPBRG 019B  
                             _PORTA 000C                               _PORTB 000D  
                             _PORTC 000E                               _TRISA 008C  
                             _TRISB 008D                               _TRISC 008E  
                             _SSPIE 048B                               _SSPIF 008B  
                             _SSPOV 10AE                               _TXREG 019A  
                             _TXSTA 019E                               _TMain 0057  
                             _MainT 0425                       __CFG_WRT$BOOT 0000  
   i1setSegmentDisplayNumber@number 0079                    __end_of_UART_ISR 078C  
                __size_of_UART_Main 0034                    __end_of_TMR1_ISR 0741  
                  __end_of_UART_Set 07C6                      i1___awmod@sign 0076  
                  __end_of_TMR1_Set 07FC                               _putch 0FCC  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
   __end_of_setSegmentDisplayNumber 016D                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                __size_ofi1___awdiv 0053                  __size_ofi1___awmod 0047  
                   __initialization 0015                        __end_of_main 0768  
__size_ofi1_setSegmentDisplayNumber 012F    __size_of_I2C_Master_Transmission 0038  
                         ??_I2C_Set 0025                              ??_main 0044  
             I2C_Master_Reception@i 0027                              ?_MainT 0070  
                         I2C_Main@i 002B                    ___awdiv@dividend 0027  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELB 018D                              _ANSELC 018E  
                            i1l2001 01B9                              i1l2041 0296  
                            i1l2033 0276                              i1l2017 01E0  
                            i1l2037 0287                              i1l2029 0264  
                            i1l1803 05DA                              i1l1805 05E6  
                            i1l1813 05FB                              i1l1753 04ED  
                            i1l1817 0603                              i1l1809 05F2  
                            i1l1771 0513                              i1l1763 04F5  
                            i1l1747 04E2                              i1l1765 0501  
                            i1l1775 051C                              i1l1791 05CD  
                            i1l1779 0524                              i1l1795 05D4  
                            u251_25 018E                              u252_25 01AB  
                            u190_25 0514                              u254_25 01C8  
                            u282_25 0734                              u186_25 04F8  
                            u188_25 0502                              u196_25 05DD  
                            u189_25 050C                              u198_25 05EC  
                            u199_25 05F3                              _OSCCON 0099  
                        _VarSegment 00C0                              _TMR1IE 0488  
                            _TMR1IF 0088                              _SPBRGH 019C  
                            _IO_Set 07C6                              _SSPADD 0212  
                            _TRISC6 0476                              _TRISC7 0477  
                            _SSPBUF 0211                          _VarProduct 00A0  
        __end_of_Mcu_Initialization 1000                              _VarI2C 0120  
                            _Timer1 0058                   __end_of_UART_Main 06E7  
                         ??___awdiv 0029                           ??___awmod 0029  
                         ??___lwdiv 0029                    ___awdiv@quotient 002C  
                   ___awmod@divisor 0025                     ___awmod@counter 002A  
                            _printf 029C                   __end_ofi1___awdiv 052B  
                 __end_ofi1___awmod 060A                           ?_I2C_Main 0070  
           __end_of__initialization 0038               __end_of_UART_Transmit 07AD  
                     __end_of_MainT 0484                      __pcstackCOMMON 0070  
                      __pidataBANK1 060A                           ?_UART_ISR 0070  
                         ?_TMR1_ISR 0070                           ?_UART_Set 0070  
                         ?_TMR1_Set 0070                       __end_of_putch 0FD4  
                        ??_I2C_Main 0028                             ??_MainT 0025  
                           ??_putch 0025                          __pbssBANK0 0044  
                        __pbssBANK2 0120                          __pbssBANK3 01A0  
                           ?_IO_Set 0070        __end_of_I2C_Master_Reception 057B  
                        __pmaintext 0741                          ??_UART_ISR 007C  
           _I2C_Master_Transmission 0644                          ??_TMR1_ISR 0070  
                        ??_UART_Set 0025                          ??_TMR1_Set 0025  
                        __pintentry 0004                             _ACKSTAT 10B6  
      __size_of_SegmentDisplay_Main 0073                             _I2C_Set 0FD4  
             __end_of_MainT_Initial 0FF1                             ?_printf 002D  
                i1___awdiv@dividend 0072                             _SSPCON1 0215  
                           _SSPCON2 0216                             _SSPSTAT 0214  
                     ?_UART_Receive 0070                     __size_of_IO_Set 0016  
                           _Segment 005B                  i1___awdiv@quotient 0077  
                           _VarUart 01A0                             _Product 0056  
          ?_setSegmentDisplayNumber 002E                             ___awdiv 0484  
                           ___awmod 057B                             ___lwdiv 067C  
          ??_SegmentDisplay_Initial 0025                             __ptext1 06B3  
                           __ptext2 003C                             __ptext3 057B  
                           __ptext4 0484                             __ptext5 078C  
                           __ptext6 029C                             __ptext7 0FCC  
                           __ptext8 067C                             __ptext9 06E7  
                   __size_of_printf 00A3                        __size_of_ISR 000F  
                 __end_of_hexpowers 0808                    ___awmod@dividend 0027  
                           clrloop0 0FC7                end_of_initialization 0038  
                    ??_UART_Receive 0025                             init_ram 0FC0  
                           initloop 0FC1                      UART_Transmit@i 0041  
         ??_I2C_Master_Transmission 0025                             printf@c 003D  
                           printf@f 002D                        __pstringtext 0800  
                         _UART_Main 06B3            I2C_Master_Transmission@i 0026  
                _Mcu_Initialization 0FF1                    __CFG_FOSC$INTOSC 0000  
                 __size_of_I2C_Main 0073                           i1___awdiv 04D8  
                         i1___awmod 05C3                 ?_Mcu_Initialization 0070  
              _I2C_Master_Reception 052B                      __end_of_IO_Set 07DC  
              ??_Mcu_Initialization 0026       setSegmentDisplayNumber@number 002E  
                        ?_UART_Main 0070                   __size_of_UART_ISR 0024  
                 __size_of_TMR1_ISR 0029                   __size_of_UART_Set 0019  
   __size_of_SegmentDisplay_Initial 0010                   __size_of_TMR1_Set 0010  
        ?i1_setSegmentDisplayNumber 0079                      __end_of_printf 033F  
               start_initialization 0015                         __end_of_ISR 0013  
             ?_I2C_Master_Reception 0070                          ?i1___awdiv 0070  
                        ?i1___awmod 0070                 _SegmentDisplay_Main 033F  
                          ??_IO_Set 0025                           _VarTimer1 0053  
                       __pdataBANK1 00A0                  i1___awmod@dividend 0072  
              ?_SegmentDisplay_Main 0070                            ?_I2C_Set 0070  
                          ??_printf 0031                __end_of_UART_Receive 0718  
 __end_ofi1_setSegmentDisplayNumber 029C                           ___latbits 0002  
            __size_of_UART_Transmit 0021                       __pcstackBANK0 0020  
               __end_of__stringdata 081D              _SegmentDisplay_Initial 07DC  
                         __pnvBANK0 0056                    ___lwdiv@dividend 0027  
                          ?___awdiv 0025                            ?___awmod 0025  
                          ?___lwdiv 0025               ??_SegmentDisplay_Main 0025  
                 i1___awdiv@divisor 0070                         ??_UART_Main 0042  
                 i1___awdiv@counter 0075                       UART_Receive@i 0028  
                          _I2C_Main 03B2              ??_I2C_Master_Reception 0025  
                    __size_of_MainT 005F    __size_of_setSegmentDisplayNumber 0131  
                       ??i1___awdiv 0074                         ??i1___awmod 0074  
                         _hexpowers 0800                    ___lwdiv@quotient 002A  
          setSegmentDisplayNumber@i 0034                      __size_of_putch 0008  
            __size_of_MainT_Initial 000F                           clear_ram0 0FC6  
                     _UART_Transmit 078C                            _UART_ISR 0768  
                          _TMR1_ISR 0718                            _UART_Set 07AD  
                          _TMR1_Set 07EC                    __size_of_I2C_Set 000E  
                       __stringdata 0808          i1setSegmentDisplayNumber@i 007B  
                        printf@_val 0038                          printf@flag 0035  
                        printf@prec 003C                            _VarTMain 0044  
                    ?_UART_Transmit 0070               __size_of_UART_Receive 0031  
                 i1___awmod@divisor 0070                   i1___awmod@counter 0075  
                  __size_of___awdiv 0054                    __size_of___awmod 0048  
                  __size_of___lwdiv 0037                       _MainT_Initial 0FE2  
       ??i1_setSegmentDisplayNumber 0020                     ___lwdiv@divisor 0025  
                   ___lwdiv@counter 002C                            __ptext10 033F  
                          __ptext11 07DC                            __ptext20 0644  
                          __ptext12 0FF1                            __ptext21 052B  
                          __ptext13 07AD                            __ptext14 07EC  
                          __ptext23 0768                            __ptext15 07C6  
                          __ptext24 016D                            __ptext16 0FD4  
                          __ptext25 05C3                            __ptext17 0FE2  
                          __ptext26 04D8                            __ptext18 0425  
                          __ptext27 0718                            __ptext19 03B2  
          ?_I2C_Master_Transmission 0070                       __size_of_main 0027  
                      _UART_Receive 06E7         __size_of_Mcu_Initialization 000F  
                         printf@idx 0036                      ?_MainT_Initial 0070  
                         putch@byte 0025             _setSegmentDisplayNumber 003C  
           ?_SegmentDisplay_Initial 0070                         pic14e$flags 007E  
                          intlevel1 0000                     ??_UART_Transmit 003E  
         i1_setSegmentDisplayNumber 016D                            printf@ap 0037  
    __end_of_SegmentDisplay_Initial 07EC     __end_of_I2C_Master_Transmission 067C  
       __end_of_SegmentDisplay_Main 03B2  
