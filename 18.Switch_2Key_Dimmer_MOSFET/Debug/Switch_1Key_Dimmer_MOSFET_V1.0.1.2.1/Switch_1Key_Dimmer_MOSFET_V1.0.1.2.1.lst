

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Sep 23 16:21:51 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	intentry,global,class=CODE,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	dabs	1,0x7E,2
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001C                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  0116                     	;# 
   197  0117                     	;# 
   198  011D                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  018E                     	;# 
   202  0191                     	;# 
   203  0191                     	;# 
   204  0192                     	;# 
   205  0193                     	;# 
   206  0193                     	;# 
   207  0194                     	;# 
   208  0195                     	;# 
   209  0196                     	;# 
   210  0197                     	;# 
   211  0199                     	;# 
   212  019A                     	;# 
   213  019B                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019C                     	;# 
   218  019C                     	;# 
   219  019D                     	;# 
   220  019E                     	;# 
   221  019F                     	;# 
   222  020D                     	;# 
   223  0210                     	;# 
   224  0211                     	;# 
   225  0211                     	;# 
   226  0212                     	;# 
   227  0212                     	;# 
   228  0213                     	;# 
   229  0213                     	;# 
   230  0214                     	;# 
   231  0214                     	;# 
   232  0215                     	;# 
   233  0215                     	;# 
   234  0215                     	;# 
   235  0216                     	;# 
   236  0216                     	;# 
   237  0217                     	;# 
   238  0217                     	;# 
   239  0291                     	;# 
   240  0291                     	;# 
   241  0292                     	;# 
   242  0293                     	;# 
   243  0298                     	;# 
   244  0298                     	;# 
   245  0299                     	;# 
   246  029A                     	;# 
   247  0394                     	;# 
   248  0395                     	;# 
   249  0396                     	;# 
   250  0FE4                     	;# 
   251  0FE5                     	;# 
   252  0FE6                     	;# 
   253  0FE7                     	;# 
   254  0FE8                     	;# 
   255  0FE9                     	;# 
   256  0FEA                     	;# 
   257  0FEB                     	;# 
   258  0FED                     	;# 
   259  0FEE                     	;# 
   260  0FEF                     	;# 
   261  0000                     	;# 
   262  0001                     	;# 
   263  0002                     	;# 
   264  0003                     	;# 
   265  0004                     	;# 
   266  0005                     	;# 
   267  0006                     	;# 
   268  0007                     	;# 
   269  0008                     	;# 
   270  0009                     	;# 
   271  000A                     	;# 
   272  000B                     	;# 
   273  000C                     	;# 
   274  000D                     	;# 
   275  000E                     	;# 
   276  0010                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0016                     	;# 
   282  0017                     	;# 
   283  0018                     	;# 
   284  0019                     	;# 
   285  001A                     	;# 
   286  001B                     	;# 
   287  001C                     	;# 
   288  008C                     	;# 
   289  008D                     	;# 
   290  008E                     	;# 
   291  0090                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0095                     	;# 
   295  0096                     	;# 
   296  0097                     	;# 
   297  0099                     	;# 
   298  009A                     	;# 
   299  009B                     	;# 
   300  009B                     	;# 
   301  009C                     	;# 
   302  009D                     	;# 
   303  009E                     	;# 
   304  010C                     	;# 
   305  010D                     	;# 
   306  010E                     	;# 
   307  0116                     	;# 
   308  0117                     	;# 
   309  011D                     	;# 
   310  018C                     	;# 
   311  018D                     	;# 
   312  018E                     	;# 
   313  0191                     	;# 
   314  0191                     	;# 
   315  0192                     	;# 
   316  0193                     	;# 
   317  0193                     	;# 
   318  0194                     	;# 
   319  0195                     	;# 
   320  0196                     	;# 
   321  0197                     	;# 
   322  0199                     	;# 
   323  019A                     	;# 
   324  019B                     	;# 
   325  019B                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019C                     	;# 
   329  019C                     	;# 
   330  019D                     	;# 
   331  019E                     	;# 
   332  019F                     	;# 
   333  020D                     	;# 
   334  0210                     	;# 
   335  0211                     	;# 
   336  0211                     	;# 
   337  0212                     	;# 
   338  0212                     	;# 
   339  0213                     	;# 
   340  0213                     	;# 
   341  0214                     	;# 
   342  0214                     	;# 
   343  0215                     	;# 
   344  0215                     	;# 
   345  0215                     	;# 
   346  0216                     	;# 
   347  0216                     	;# 
   348  0217                     	;# 
   349  0217                     	;# 
   350  0291                     	;# 
   351  0291                     	;# 
   352  0292                     	;# 
   353  0293                     	;# 
   354  0298                     	;# 
   355  0298                     	;# 
   356  0299                     	;# 
   357  029A                     	;# 
   358  0394                     	;# 
   359  0395                     	;# 
   360  0396                     	;# 
   361  0FE4                     	;# 
   362  0FE5                     	;# 
   363  0FE6                     	;# 
   364  0FE7                     	;# 
   365  0FE8                     	;# 
   366  0FE9                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEF                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  0008                     	;# 
   381  0009                     	;# 
   382  000A                     	;# 
   383  000B                     	;# 
   384  000C                     	;# 
   385  000D                     	;# 
   386  000E                     	;# 
   387  0010                     	;# 
   388  0011                     	;# 
   389  0012                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0016                     	;# 
   393  0017                     	;# 
   394  0018                     	;# 
   395  0019                     	;# 
   396  001A                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  008C                     	;# 
   400  008D                     	;# 
   401  008E                     	;# 
   402  0090                     	;# 
   403  0091                     	;# 
   404  0092                     	;# 
   405  0095                     	;# 
   406  0096                     	;# 
   407  0097                     	;# 
   408  0099                     	;# 
   409  009A                     	;# 
   410  009B                     	;# 
   411  009B                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009E                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010E                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  011D                     	;# 
   421  018C                     	;# 
   422  018D                     	;# 
   423  018E                     	;# 
   424  0191                     	;# 
   425  0191                     	;# 
   426  0192                     	;# 
   427  0193                     	;# 
   428  0193                     	;# 
   429  0194                     	;# 
   430  0195                     	;# 
   431  0196                     	;# 
   432  0197                     	;# 
   433  0199                     	;# 
   434  019A                     	;# 
   435  019B                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019C                     	;# 
   440  019C                     	;# 
   441  019D                     	;# 
   442  019E                     	;# 
   443  019F                     	;# 
   444  020D                     	;# 
   445  0210                     	;# 
   446  0211                     	;# 
   447  0211                     	;# 
   448  0212                     	;# 
   449  0212                     	;# 
   450  0213                     	;# 
   451  0213                     	;# 
   452  0214                     	;# 
   453  0214                     	;# 
   454  0215                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0216                     	;# 
   458  0216                     	;# 
   459  0217                     	;# 
   460  0217                     	;# 
   461  0291                     	;# 
   462  0291                     	;# 
   463  0292                     	;# 
   464  0293                     	;# 
   465  0298                     	;# 
   466  0298                     	;# 
   467  0299                     	;# 
   468  029A                     	;# 
   469  0394                     	;# 
   470  0395                     	;# 
   471  0396                     	;# 
   472  0FE4                     	;# 
   473  0FE5                     	;# 
   474  0FE6                     	;# 
   475  0FE7                     	;# 
   476  0FE8                     	;# 
   477  0FE9                     	;# 
   478  0FEA                     	;# 
   479  0FEB                     	;# 
   480  0FED                     	;# 
   481  0FEE                     	;# 
   482  0FEF                     	;# 
   483  0000                     	;# 
   484  0001                     	;# 
   485  0002                     	;# 
   486  0003                     	;# 
   487  0004                     	;# 
   488  0005                     	;# 
   489  0006                     	;# 
   490  0007                     	;# 
   491  0008                     	;# 
   492  0009                     	;# 
   493  000A                     	;# 
   494  000B                     	;# 
   495  000C                     	;# 
   496  000D                     	;# 
   497  000E                     	;# 
   498  0010                     	;# 
   499  0011                     	;# 
   500  0012                     	;# 
   501  0015                     	;# 
   502  0016                     	;# 
   503  0016                     	;# 
   504  0017                     	;# 
   505  0018                     	;# 
   506  0019                     	;# 
   507  001A                     	;# 
   508  001B                     	;# 
   509  001C                     	;# 
   510  008C                     	;# 
   511  008D                     	;# 
   512  008E                     	;# 
   513  0090                     	;# 
   514  0091                     	;# 
   515  0092                     	;# 
   516  0095                     	;# 
   517  0096                     	;# 
   518  0097                     	;# 
   519  0099                     	;# 
   520  009A                     	;# 
   521  009B                     	;# 
   522  009B                     	;# 
   523  009C                     	;# 
   524  009D                     	;# 
   525  009E                     	;# 
   526  010C                     	;# 
   527  010D                     	;# 
   528  010E                     	;# 
   529  0116                     	;# 
   530  0117                     	;# 
   531  011D                     	;# 
   532  018C                     	;# 
   533  018D                     	;# 
   534  018E                     	;# 
   535  0191                     	;# 
   536  0191                     	;# 
   537  0192                     	;# 
   538  0193                     	;# 
   539  0193                     	;# 
   540  0194                     	;# 
   541  0195                     	;# 
   542  0196                     	;# 
   543  0197                     	;# 
   544  0199                     	;# 
   545  019A                     	;# 
   546  019B                     	;# 
   547  019B                     	;# 
   548  019B                     	;# 
   549  019B                     	;# 
   550  019C                     	;# 
   551  019C                     	;# 
   552  019D                     	;# 
   553  019E                     	;# 
   554  019F                     	;# 
   555  020D                     	;# 
   556  0210                     	;# 
   557  0211                     	;# 
   558  0211                     	;# 
   559  0212                     	;# 
   560  0212                     	;# 
   561  0213                     	;# 
   562  0213                     	;# 
   563  0214                     	;# 
   564  0214                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0215                     	;# 
   568  0216                     	;# 
   569  0216                     	;# 
   570  0217                     	;# 
   571  0217                     	;# 
   572  0291                     	;# 
   573  0291                     	;# 
   574  0292                     	;# 
   575  0293                     	;# 
   576  0298                     	;# 
   577  0298                     	;# 
   578  0299                     	;# 
   579  029A                     	;# 
   580  0394                     	;# 
   581  0395                     	;# 
   582  0396                     	;# 
   583  0FE4                     	;# 
   584  0FE5                     	;# 
   585  0FE6                     	;# 
   586  0FE7                     	;# 
   587  0FE8                     	;# 
   588  0FE9                     	;# 
   589  0FEA                     	;# 
   590  0FEB                     	;# 
   591  0FED                     	;# 
   592  0FEE                     	;# 
   593  0FEF                     	;# 
   594  0000                     	;# 
   595  0001                     	;# 
   596  0002                     	;# 
   597  0003                     	;# 
   598  0004                     	;# 
   599  0005                     	;# 
   600  0006                     	;# 
   601  0007                     	;# 
   602  0008                     	;# 
   603  0009                     	;# 
   604  000A                     	;# 
   605  000B                     	;# 
   606  000C                     	;# 
   607  000D                     	;# 
   608  000E                     	;# 
   609  0010                     	;# 
   610  0011                     	;# 
   611  0012                     	;# 
   612  0015                     	;# 
   613  0016                     	;# 
   614  0016                     	;# 
   615  0017                     	;# 
   616  0018                     	;# 
   617  0019                     	;# 
   618  001A                     	;# 
   619  001B                     	;# 
   620  001C                     	;# 
   621  008C                     	;# 
   622  008D                     	;# 
   623  008E                     	;# 
   624  0090                     	;# 
   625  0091                     	;# 
   626  0092                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0097                     	;# 
   630  0099                     	;# 
   631  009A                     	;# 
   632  009B                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  010C                     	;# 
   638  010D                     	;# 
   639  010E                     	;# 
   640  0116                     	;# 
   641  0117                     	;# 
   642  011D                     	;# 
   643  018C                     	;# 
   644  018D                     	;# 
   645  018E                     	;# 
   646  0191                     	;# 
   647  0191                     	;# 
   648  0192                     	;# 
   649  0193                     	;# 
   650  0193                     	;# 
   651  0194                     	;# 
   652  0195                     	;# 
   653  0196                     	;# 
   654  0197                     	;# 
   655  0199                     	;# 
   656  019A                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019C                     	;# 
   662  019C                     	;# 
   663  019D                     	;# 
   664  019E                     	;# 
   665  019F                     	;# 
   666  020D                     	;# 
   667  0210                     	;# 
   668  0211                     	;# 
   669  0211                     	;# 
   670  0212                     	;# 
   671  0212                     	;# 
   672  0213                     	;# 
   673  0213                     	;# 
   674  0214                     	;# 
   675  0214                     	;# 
   676  0215                     	;# 
   677  0215                     	;# 
   678  0215                     	;# 
   679  0216                     	;# 
   680  0216                     	;# 
   681  0217                     	;# 
   682  0217                     	;# 
   683  0291                     	;# 
   684  0291                     	;# 
   685  0292                     	;# 
   686  0293                     	;# 
   687  0298                     	;# 
   688  0298                     	;# 
   689  0299                     	;# 
   690  029A                     	;# 
   691  0394                     	;# 
   692  0395                     	;# 
   693  0396                     	;# 
   694  0FE4                     	;# 
   695  0FE5                     	;# 
   696  0FE6                     	;# 
   697  0FE7                     	;# 
   698  0FE8                     	;# 
   699  0FE9                     	;# 
   700  0FEA                     	;# 
   701  0FEB                     	;# 
   702  0FED                     	;# 
   703  0FEE                     	;# 
   704  0FEF                     	;# 
   705  0000                     	;# 
   706  0001                     	;# 
   707  0002                     	;# 
   708  0003                     	;# 
   709  0004                     	;# 
   710  0005                     	;# 
   711  0006                     	;# 
   712  0007                     	;# 
   713  0008                     	;# 
   714  0009                     	;# 
   715  000A                     	;# 
   716  000B                     	;# 
   717  000C                     	;# 
   718  000D                     	;# 
   719  000E                     	;# 
   720  0010                     	;# 
   721  0011                     	;# 
   722  0012                     	;# 
   723  0015                     	;# 
   724  0016                     	;# 
   725  0016                     	;# 
   726  0017                     	;# 
   727  0018                     	;# 
   728  0019                     	;# 
   729  001A                     	;# 
   730  001B                     	;# 
   731  001C                     	;# 
   732  008C                     	;# 
   733  008D                     	;# 
   734  008E                     	;# 
   735  0090                     	;# 
   736  0091                     	;# 
   737  0092                     	;# 
   738  0095                     	;# 
   739  0096                     	;# 
   740  0097                     	;# 
   741  0099                     	;# 
   742  009A                     	;# 
   743  009B                     	;# 
   744  009B                     	;# 
   745  009C                     	;# 
   746  009D                     	;# 
   747  009E                     	;# 
   748  010C                     	;# 
   749  010D                     	;# 
   750  010E                     	;# 
   751  0116                     	;# 
   752  0117                     	;# 
   753  011D                     	;# 
   754  018C                     	;# 
   755  018D                     	;# 
   756  018E                     	;# 
   757  0191                     	;# 
   758  0191                     	;# 
   759  0192                     	;# 
   760  0193                     	;# 
   761  0193                     	;# 
   762  0194                     	;# 
   763  0195                     	;# 
   764  0196                     	;# 
   765  0197                     	;# 
   766  0199                     	;# 
   767  019A                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019C                     	;# 
   773  019C                     	;# 
   774  019D                     	;# 
   775  019E                     	;# 
   776  019F                     	;# 
   777  020D                     	;# 
   778  0210                     	;# 
   779  0211                     	;# 
   780  0211                     	;# 
   781  0212                     	;# 
   782  0212                     	;# 
   783  0213                     	;# 
   784  0213                     	;# 
   785  0214                     	;# 
   786  0214                     	;# 
   787  0215                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0216                     	;# 
   791  0216                     	;# 
   792  0217                     	;# 
   793  0217                     	;# 
   794  0291                     	;# 
   795  0291                     	;# 
   796  0292                     	;# 
   797  0293                     	;# 
   798  0298                     	;# 
   799  0298                     	;# 
   800  0299                     	;# 
   801  029A                     	;# 
   802  0394                     	;# 
   803  0395                     	;# 
   804  0396                     	;# 
   805  0FE4                     	;# 
   806  0FE5                     	;# 
   807  0FE6                     	;# 
   808  0FE7                     	;# 
   809  0FE8                     	;# 
   810  0FE9                     	;# 
   811  0FEA                     	;# 
   812  0FEB                     	;# 
   813  0FED                     	;# 
   814  0FEE                     	;# 
   815  0FEF                     	;# 
   816  0000                     	;# 
   817  0001                     	;# 
   818  0002                     	;# 
   819  0003                     	;# 
   820  0004                     	;# 
   821  0005                     	;# 
   822  0006                     	;# 
   823  0007                     	;# 
   824  0008                     	;# 
   825  0009                     	;# 
   826  000A                     	;# 
   827  000B                     	;# 
   828  000C                     	;# 
   829  000D                     	;# 
   830  000E                     	;# 
   831  0010                     	;# 
   832  0011                     	;# 
   833  0012                     	;# 
   834  0015                     	;# 
   835  0016                     	;# 
   836  0016                     	;# 
   837  0017                     	;# 
   838  0018                     	;# 
   839  0019                     	;# 
   840  001A                     	;# 
   841  001B                     	;# 
   842  001C                     	;# 
   843  008C                     	;# 
   844  008D                     	;# 
   845  008E                     	;# 
   846  0090                     	;# 
   847  0091                     	;# 
   848  0092                     	;# 
   849  0095                     	;# 
   850  0096                     	;# 
   851  0097                     	;# 
   852  0099                     	;# 
   853  009A                     	;# 
   854  009B                     	;# 
   855  009B                     	;# 
   856  009C                     	;# 
   857  009D                     	;# 
   858  009E                     	;# 
   859  010C                     	;# 
   860  010D                     	;# 
   861  010E                     	;# 
   862  0116                     	;# 
   863  0117                     	;# 
   864  011D                     	;# 
   865  018C                     	;# 
   866  018D                     	;# 
   867  018E                     	;# 
   868  0191                     	;# 
   869  0191                     	;# 
   870  0192                     	;# 
   871  0193                     	;# 
   872  0193                     	;# 
   873  0194                     	;# 
   874  0195                     	;# 
   875  0196                     	;# 
   876  0197                     	;# 
   877  0199                     	;# 
   878  019A                     	;# 
   879  019B                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019C                     	;# 
   884  019C                     	;# 
   885  019D                     	;# 
   886  019E                     	;# 
   887  019F                     	;# 
   888  020D                     	;# 
   889  0210                     	;# 
   890  0211                     	;# 
   891  0211                     	;# 
   892  0212                     	;# 
   893  0212                     	;# 
   894  0213                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0214                     	;# 
   898  0215                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0216                     	;# 
   902  0216                     	;# 
   903  0217                     	;# 
   904  0217                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0298                     	;# 
   910  0298                     	;# 
   911  0299                     	;# 
   912  029A                     	;# 
   913  0394                     	;# 
   914  0395                     	;# 
   915  0396                     	;# 
   916  0FE4                     	;# 
   917  0FE5                     	;# 
   918  0FE6                     	;# 
   919  0FE7                     	;# 
   920  0FE8                     	;# 
   921  0FE9                     	;# 
   922  0FEA                     	;# 
   923  0FEB                     	;# 
   924  0FED                     	;# 
   925  0FEE                     	;# 
   926  0FEF                     	;# 
   927  0000                     	;# 
   928  0001                     	;# 
   929  0002                     	;# 
   930  0003                     	;# 
   931  0004                     	;# 
   932  0005                     	;# 
   933  0006                     	;# 
   934  0007                     	;# 
   935  0008                     	;# 
   936  0009                     	;# 
   937  000A                     	;# 
   938  000B                     	;# 
   939  000C                     	;# 
   940  000D                     	;# 
   941  000E                     	;# 
   942  0010                     	;# 
   943  0011                     	;# 
   944  0012                     	;# 
   945  0015                     	;# 
   946  0016                     	;# 
   947  0016                     	;# 
   948  0017                     	;# 
   949  0018                     	;# 
   950  0019                     	;# 
   951  001A                     	;# 
   952  001B                     	;# 
   953  001C                     	;# 
   954  008C                     	;# 
   955  008D                     	;# 
   956  008E                     	;# 
   957  0090                     	;# 
   958  0091                     	;# 
   959  0092                     	;# 
   960  0095                     	;# 
   961  0096                     	;# 
   962  0097                     	;# 
   963  0099                     	;# 
   964  009A                     	;# 
   965  009B                     	;# 
   966  009B                     	;# 
   967  009C                     	;# 
   968  009D                     	;# 
   969  009E                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010E                     	;# 
   973  0116                     	;# 
   974  0117                     	;# 
   975  011D                     	;# 
   976  018C                     	;# 
   977  018D                     	;# 
   978  018E                     	;# 
   979  0191                     	;# 
   980  0191                     	;# 
   981  0192                     	;# 
   982  0193                     	;# 
   983  0193                     	;# 
   984  0194                     	;# 
   985  0195                     	;# 
   986  0196                     	;# 
   987  0197                     	;# 
   988  0199                     	;# 
   989  019A                     	;# 
   990  019B                     	;# 
   991  019B                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019C                     	;# 
   995  019C                     	;# 
   996  019D                     	;# 
   997  019E                     	;# 
   998  019F                     	;# 
   999  020D                     	;# 
  1000  0210                     	;# 
  1001  0211                     	;# 
  1002  0211                     	;# 
  1003  0212                     	;# 
  1004  0212                     	;# 
  1005  0213                     	;# 
  1006  0213                     	;# 
  1007  0214                     	;# 
  1008  0214                     	;# 
  1009  0215                     	;# 
  1010  0215                     	;# 
  1011  0215                     	;# 
  1012  0216                     	;# 
  1013  0216                     	;# 
  1014  0217                     	;# 
  1015  0217                     	;# 
  1016  0291                     	;# 
  1017  0291                     	;# 
  1018  0292                     	;# 
  1019  0293                     	;# 
  1020  0298                     	;# 
  1021  0298                     	;# 
  1022  0299                     	;# 
  1023  029A                     	;# 
  1024  0394                     	;# 
  1025  0395                     	;# 
  1026  0396                     	;# 
  1027  0FE4                     	;# 
  1028  0FE5                     	;# 
  1029  0FE6                     	;# 
  1030  0FE7                     	;# 
  1031  0FE8                     	;# 
  1032  0FE9                     	;# 
  1033  0FEA                     	;# 
  1034  0FEB                     	;# 
  1035  0FED                     	;# 
  1036  0FEE                     	;# 
  1037  0FEF                     	;# 
  1038  0000                     	;# 
  1039  0001                     	;# 
  1040  0002                     	;# 
  1041  0003                     	;# 
  1042  0004                     	;# 
  1043  0005                     	;# 
  1044  0006                     	;# 
  1045  0007                     	;# 
  1046  0008                     	;# 
  1047  0009                     	;# 
  1048  000A                     	;# 
  1049  000B                     	;# 
  1050  000C                     	;# 
  1051  000D                     	;# 
  1052  000E                     	;# 
  1053  0010                     	;# 
  1054  0011                     	;# 
  1055  0012                     	;# 
  1056  0015                     	;# 
  1057  0016                     	;# 
  1058  0016                     	;# 
  1059  0017                     	;# 
  1060  0018                     	;# 
  1061  0019                     	;# 
  1062  001A                     	;# 
  1063  001B                     	;# 
  1064  001C                     	;# 
  1065  008C                     	;# 
  1066  008D                     	;# 
  1067  008E                     	;# 
  1068  0090                     	;# 
  1069  0091                     	;# 
  1070  0092                     	;# 
  1071  0095                     	;# 
  1072  0096                     	;# 
  1073  0097                     	;# 
  1074  0099                     	;# 
  1075  009A                     	;# 
  1076  009B                     	;# 
  1077  009B                     	;# 
  1078  009C                     	;# 
  1079  009D                     	;# 
  1080  009E                     	;# 
  1081  010C                     	;# 
  1082  010D                     	;# 
  1083  010E                     	;# 
  1084  0116                     	;# 
  1085  0117                     	;# 
  1086  011D                     	;# 
  1087  018C                     	;# 
  1088  018D                     	;# 
  1089  018E                     	;# 
  1090  0191                     	;# 
  1091  0191                     	;# 
  1092  0192                     	;# 
  1093  0193                     	;# 
  1094  0193                     	;# 
  1095  0194                     	;# 
  1096  0195                     	;# 
  1097  0196                     	;# 
  1098  0197                     	;# 
  1099  0199                     	;# 
  1100  019A                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019C                     	;# 
  1106  019C                     	;# 
  1107  019D                     	;# 
  1108  019E                     	;# 
  1109  019F                     	;# 
  1110  020D                     	;# 
  1111  0210                     	;# 
  1112  0211                     	;# 
  1113  0211                     	;# 
  1114  0212                     	;# 
  1115  0212                     	;# 
  1116  0213                     	;# 
  1117  0213                     	;# 
  1118  0214                     	;# 
  1119  0214                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0216                     	;# 
  1124  0216                     	;# 
  1125  0217                     	;# 
  1126  0217                     	;# 
  1127  0291                     	;# 
  1128  0291                     	;# 
  1129  0292                     	;# 
  1130  0293                     	;# 
  1131  0298                     	;# 
  1132  0298                     	;# 
  1133  0299                     	;# 
  1134  029A                     	;# 
  1135  0394                     	;# 
  1136  0395                     	;# 
  1137  0396                     	;# 
  1138  0FE4                     	;# 
  1139  0FE5                     	;# 
  1140  0FE6                     	;# 
  1141  0FE7                     	;# 
  1142  0FE8                     	;# 
  1143  0FE9                     	;# 
  1144  0FEA                     	;# 
  1145  0FEB                     	;# 
  1146  0FED                     	;# 
  1147  0FEE                     	;# 
  1148  0FEF                     	;# 
  1149  0000                     	;# 
  1150  0001                     	;# 
  1151  0002                     	;# 
  1152  0003                     	;# 
  1153  0004                     	;# 
  1154  0005                     	;# 
  1155  0006                     	;# 
  1156  0007                     	;# 
  1157  0008                     	;# 
  1158  0009                     	;# 
  1159  000A                     	;# 
  1160  000B                     	;# 
  1161  000C                     	;# 
  1162  000D                     	;# 
  1163  000E                     	;# 
  1164  0010                     	;# 
  1165  0011                     	;# 
  1166  0012                     	;# 
  1167  0015                     	;# 
  1168  0016                     	;# 
  1169  0016                     	;# 
  1170  0017                     	;# 
  1171  0018                     	;# 
  1172  0019                     	;# 
  1173  001A                     	;# 
  1174  001B                     	;# 
  1175  001C                     	;# 
  1176  008C                     	;# 
  1177  008D                     	;# 
  1178  008E                     	;# 
  1179  0090                     	;# 
  1180  0091                     	;# 
  1181  0092                     	;# 
  1182  0095                     	;# 
  1183  0096                     	;# 
  1184  0097                     	;# 
  1185  0099                     	;# 
  1186  009A                     	;# 
  1187  009B                     	;# 
  1188  009B                     	;# 
  1189  009C                     	;# 
  1190  009D                     	;# 
  1191  009E                     	;# 
  1192  010C                     	;# 
  1193  010D                     	;# 
  1194  010E                     	;# 
  1195  0116                     	;# 
  1196  0117                     	;# 
  1197  011D                     	;# 
  1198  018C                     	;# 
  1199  018D                     	;# 
  1200  018E                     	;# 
  1201  0191                     	;# 
  1202  0191                     	;# 
  1203  0192                     	;# 
  1204  0193                     	;# 
  1205  0193                     	;# 
  1206  0194                     	;# 
  1207  0195                     	;# 
  1208  0196                     	;# 
  1209  0197                     	;# 
  1210  0199                     	;# 
  1211  019A                     	;# 
  1212  019B                     	;# 
  1213  019B                     	;# 
  1214  019B                     	;# 
  1215  019B                     	;# 
  1216  019C                     	;# 
  1217  019C                     	;# 
  1218  019D                     	;# 
  1219  019E                     	;# 
  1220  019F                     	;# 
  1221  020D                     	;# 
  1222  0210                     	;# 
  1223  0211                     	;# 
  1224  0211                     	;# 
  1225  0212                     	;# 
  1226  0212                     	;# 
  1227  0213                     	;# 
  1228  0213                     	;# 
  1229  0214                     	;# 
  1230  0214                     	;# 
  1231  0215                     	;# 
  1232  0215                     	;# 
  1233  0215                     	;# 
  1234  0216                     	;# 
  1235  0216                     	;# 
  1236  0217                     	;# 
  1237  0217                     	;# 
  1238  0291                     	;# 
  1239  0291                     	;# 
  1240  0292                     	;# 
  1241  0293                     	;# 
  1242  0298                     	;# 
  1243  0298                     	;# 
  1244  0299                     	;# 
  1245  029A                     	;# 
  1246  0394                     	;# 
  1247  0395                     	;# 
  1248  0396                     	;# 
  1249  0FE4                     	;# 
  1250  0FE5                     	;# 
  1251  0FE6                     	;# 
  1252  0FE7                     	;# 
  1253  0FE8                     	;# 
  1254  0FE9                     	;# 
  1255  0FEA                     	;# 
  1256  0FEB                     	;# 
  1257  0FED                     	;# 
  1258  0FEE                     	;# 
  1259  0FEF                     	;# 
  1260  0000                     	;# 
  1261  0001                     	;# 
  1262  0002                     	;# 
  1263  0003                     	;# 
  1264  0004                     	;# 
  1265  0005                     	;# 
  1266  0006                     	;# 
  1267  0007                     	;# 
  1268  0008                     	;# 
  1269  0009                     	;# 
  1270  000A                     	;# 
  1271  000B                     	;# 
  1272  000C                     	;# 
  1273  000D                     	;# 
  1274  000E                     	;# 
  1275  0010                     	;# 
  1276  0011                     	;# 
  1277  0012                     	;# 
  1278  0015                     	;# 
  1279  0016                     	;# 
  1280  0016                     	;# 
  1281  0017                     	;# 
  1282  0018                     	;# 
  1283  0019                     	;# 
  1284  001A                     	;# 
  1285  001B                     	;# 
  1286  001C                     	;# 
  1287  008C                     	;# 
  1288  008D                     	;# 
  1289  008E                     	;# 
  1290  0090                     	;# 
  1291  0091                     	;# 
  1292  0092                     	;# 
  1293  0095                     	;# 
  1294  0096                     	;# 
  1295  0097                     	;# 
  1296  0099                     	;# 
  1297  009A                     	;# 
  1298  009B                     	;# 
  1299  009B                     	;# 
  1300  009C                     	;# 
  1301  009D                     	;# 
  1302  009E                     	;# 
  1303  010C                     	;# 
  1304  010D                     	;# 
  1305  010E                     	;# 
  1306  0116                     	;# 
  1307  0117                     	;# 
  1308  011D                     	;# 
  1309  018C                     	;# 
  1310  018D                     	;# 
  1311  018E                     	;# 
  1312  0191                     	;# 
  1313  0191                     	;# 
  1314  0192                     	;# 
  1315  0193                     	;# 
  1316  0193                     	;# 
  1317  0194                     	;# 
  1318  0195                     	;# 
  1319  0196                     	;# 
  1320  0197                     	;# 
  1321  0199                     	;# 
  1322  019A                     	;# 
  1323  019B                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019C                     	;# 
  1328  019C                     	;# 
  1329  019D                     	;# 
  1330  019E                     	;# 
  1331  019F                     	;# 
  1332  020D                     	;# 
  1333  0210                     	;# 
  1334  0211                     	;# 
  1335  0211                     	;# 
  1336  0212                     	;# 
  1337  0212                     	;# 
  1338  0213                     	;# 
  1339  0213                     	;# 
  1340  0214                     	;# 
  1341  0214                     	;# 
  1342  0215                     	;# 
  1343  0215                     	;# 
  1344  0215                     	;# 
  1345  0216                     	;# 
  1346  0216                     	;# 
  1347  0217                     	;# 
  1348  0217                     	;# 
  1349  0291                     	;# 
  1350  0291                     	;# 
  1351  0292                     	;# 
  1352  0293                     	;# 
  1353  0298                     	;# 
  1354  0298                     	;# 
  1355  0299                     	;# 
  1356  029A                     	;# 
  1357  0394                     	;# 
  1358  0395                     	;# 
  1359  0396                     	;# 
  1360  0FE4                     	;# 
  1361  0FE5                     	;# 
  1362  0FE6                     	;# 
  1363  0FE7                     	;# 
  1364  0FE8                     	;# 
  1365  0FE9                     	;# 
  1366  0FEA                     	;# 
  1367  0FEB                     	;# 
  1368  0FED                     	;# 
  1369  0FEE                     	;# 
  1370  0FEF                     	;# 
  1371  0000                     	;# 
  1372  0001                     	;# 
  1373  0002                     	;# 
  1374  0003                     	;# 
  1375  0004                     	;# 
  1376  0005                     	;# 
  1377  0006                     	;# 
  1378  0007                     	;# 
  1379  0008                     	;# 
  1380  0009                     	;# 
  1381  000A                     	;# 
  1382  000B                     	;# 
  1383  000C                     	;# 
  1384  000D                     	;# 
  1385  000E                     	;# 
  1386  0010                     	;# 
  1387  0011                     	;# 
  1388  0012                     	;# 
  1389  0015                     	;# 
  1390  0016                     	;# 
  1391  0016                     	;# 
  1392  0017                     	;# 
  1393  0018                     	;# 
  1394  0019                     	;# 
  1395  001A                     	;# 
  1396  001B                     	;# 
  1397  001C                     	;# 
  1398  008C                     	;# 
  1399  008D                     	;# 
  1400  008E                     	;# 
  1401  0090                     	;# 
  1402  0091                     	;# 
  1403  0092                     	;# 
  1404  0095                     	;# 
  1405  0096                     	;# 
  1406  0097                     	;# 
  1407  0099                     	;# 
  1408  009A                     	;# 
  1409  009B                     	;# 
  1410  009B                     	;# 
  1411  009C                     	;# 
  1412  009D                     	;# 
  1413  009E                     	;# 
  1414  010C                     	;# 
  1415  010D                     	;# 
  1416  010E                     	;# 
  1417  0116                     	;# 
  1418  0117                     	;# 
  1419  011D                     	;# 
  1420  018C                     	;# 
  1421  018D                     	;# 
  1422  018E                     	;# 
  1423  0191                     	;# 
  1424  0191                     	;# 
  1425  0192                     	;# 
  1426  0193                     	;# 
  1427  0193                     	;# 
  1428  0194                     	;# 
  1429  0195                     	;# 
  1430  0196                     	;# 
  1431  0197                     	;# 
  1432  0199                     	;# 
  1433  019A                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019C                     	;# 
  1439  019C                     	;# 
  1440  019D                     	;# 
  1441  019E                     	;# 
  1442  019F                     	;# 
  1443  020D                     	;# 
  1444  0210                     	;# 
  1445  0211                     	;# 
  1446  0211                     	;# 
  1447  0212                     	;# 
  1448  0212                     	;# 
  1449  0213                     	;# 
  1450  0213                     	;# 
  1451  0214                     	;# 
  1452  0214                     	;# 
  1453  0215                     	;# 
  1454  0215                     	;# 
  1455  0215                     	;# 
  1456  0216                     	;# 
  1457  0216                     	;# 
  1458  0217                     	;# 
  1459  0217                     	;# 
  1460  0291                     	;# 
  1461  0291                     	;# 
  1462  0292                     	;# 
  1463  0293                     	;# 
  1464  0298                     	;# 
  1465  0298                     	;# 
  1466  0299                     	;# 
  1467  029A                     	;# 
  1468  0394                     	;# 
  1469  0395                     	;# 
  1470  0396                     	;# 
  1471  0FE4                     	;# 
  1472  0FE5                     	;# 
  1473  0FE6                     	;# 
  1474  0FE7                     	;# 
  1475  0FE8                     	;# 
  1476  0FE9                     	;# 
  1477  0FEA                     	;# 
  1478  0FEB                     	;# 
  1479  0FED                     	;# 
  1480  0FEE                     	;# 
  1481  0FEF                     	;# 
  1482  0000                     	;# 
  1483  0001                     	;# 
  1484  0002                     	;# 
  1485  0003                     	;# 
  1486  0004                     	;# 
  1487  0005                     	;# 
  1488  0006                     	;# 
  1489  0007                     	;# 
  1490  0008                     	;# 
  1491  0009                     	;# 
  1492  000A                     	;# 
  1493  000B                     	;# 
  1494  000C                     	;# 
  1495  000D                     	;# 
  1496  000E                     	;# 
  1497  0010                     	;# 
  1498  0011                     	;# 
  1499  0012                     	;# 
  1500  0015                     	;# 
  1501  0016                     	;# 
  1502  0016                     	;# 
  1503  0017                     	;# 
  1504  0018                     	;# 
  1505  0019                     	;# 
  1506  001A                     	;# 
  1507  001B                     	;# 
  1508  001C                     	;# 
  1509  008C                     	;# 
  1510  008D                     	;# 
  1511  008E                     	;# 
  1512  0090                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0095                     	;# 
  1516  0096                     	;# 
  1517  0097                     	;# 
  1518  0099                     	;# 
  1519  009A                     	;# 
  1520  009B                     	;# 
  1521  009B                     	;# 
  1522  009C                     	;# 
  1523  009D                     	;# 
  1524  009E                     	;# 
  1525  010C                     	;# 
  1526  010D                     	;# 
  1527  010E                     	;# 
  1528  0116                     	;# 
  1529  0117                     	;# 
  1530  011D                     	;# 
  1531  018C                     	;# 
  1532  018D                     	;# 
  1533  018E                     	;# 
  1534  0191                     	;# 
  1535  0191                     	;# 
  1536  0192                     	;# 
  1537  0193                     	;# 
  1538  0193                     	;# 
  1539  0194                     	;# 
  1540  0195                     	;# 
  1541  0196                     	;# 
  1542  0197                     	;# 
  1543  0199                     	;# 
  1544  019A                     	;# 
  1545  019B                     	;# 
  1546  019B                     	;# 
  1547  019B                     	;# 
  1548  019B                     	;# 
  1549  019C                     	;# 
  1550  019C                     	;# 
  1551  019D                     	;# 
  1552  019E                     	;# 
  1553  019F                     	;# 
  1554  020D                     	;# 
  1555  0210                     	;# 
  1556  0211                     	;# 
  1557  0211                     	;# 
  1558  0212                     	;# 
  1559  0212                     	;# 
  1560  0213                     	;# 
  1561  0213                     	;# 
  1562  0214                     	;# 
  1563  0214                     	;# 
  1564  0215                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0216                     	;# 
  1568  0216                     	;# 
  1569  0217                     	;# 
  1570  0217                     	;# 
  1571  0291                     	;# 
  1572  0291                     	;# 
  1573  0292                     	;# 
  1574  0293                     	;# 
  1575  0298                     	;# 
  1576  0298                     	;# 
  1577  0299                     	;# 
  1578  029A                     	;# 
  1579  0394                     	;# 
  1580  0395                     	;# 
  1581  0396                     	;# 
  1582  0FE4                     	;# 
  1583  0FE5                     	;# 
  1584  0FE6                     	;# 
  1585  0FE7                     	;# 
  1586  0FE8                     	;# 
  1587  0FE9                     	;# 
  1588  0FEA                     	;# 
  1589  0FEB                     	;# 
  1590  0FED                     	;# 
  1591  0FEE                     	;# 
  1592  0FEF                     	;# 
  1593  0000                     	;# 
  1594  0001                     	;# 
  1595  0002                     	;# 
  1596  0003                     	;# 
  1597  0004                     	;# 
  1598  0005                     	;# 
  1599  0006                     	;# 
  1600  0007                     	;# 
  1601  0008                     	;# 
  1602  0009                     	;# 
  1603  000A                     	;# 
  1604  000B                     	;# 
  1605  000C                     	;# 
  1606  000D                     	;# 
  1607  000E                     	;# 
  1608  0010                     	;# 
  1609  0011                     	;# 
  1610  0012                     	;# 
  1611  0015                     	;# 
  1612  0016                     	;# 
  1613  0016                     	;# 
  1614  0017                     	;# 
  1615  0018                     	;# 
  1616  0019                     	;# 
  1617  001A                     	;# 
  1618  001B                     	;# 
  1619  001C                     	;# 
  1620  008C                     	;# 
  1621  008D                     	;# 
  1622  008E                     	;# 
  1623  0090                     	;# 
  1624  0091                     	;# 
  1625  0092                     	;# 
  1626  0095                     	;# 
  1627  0096                     	;# 
  1628  0097                     	;# 
  1629  0099                     	;# 
  1630  009A                     	;# 
  1631  009B                     	;# 
  1632  009B                     	;# 
  1633  009C                     	;# 
  1634  009D                     	;# 
  1635  009E                     	;# 
  1636  010C                     	;# 
  1637  010D                     	;# 
  1638  010E                     	;# 
  1639  0116                     	;# 
  1640  0117                     	;# 
  1641  011D                     	;# 
  1642  018C                     	;# 
  1643  018D                     	;# 
  1644  018E                     	;# 
  1645  0191                     	;# 
  1646  0191                     	;# 
  1647  0192                     	;# 
  1648  0193                     	;# 
  1649  0193                     	;# 
  1650  0194                     	;# 
  1651  0195                     	;# 
  1652  0196                     	;# 
  1653  0197                     	;# 
  1654  0199                     	;# 
  1655  019A                     	;# 
  1656  019B                     	;# 
  1657  019B                     	;# 
  1658  019B                     	;# 
  1659  019B                     	;# 
  1660  019C                     	;# 
  1661  019C                     	;# 
  1662  019D                     	;# 
  1663  019E                     	;# 
  1664  019F                     	;# 
  1665  020D                     	;# 
  1666  0210                     	;# 
  1667  0211                     	;# 
  1668  0211                     	;# 
  1669  0212                     	;# 
  1670  0212                     	;# 
  1671  0213                     	;# 
  1672  0213                     	;# 
  1673  0214                     	;# 
  1674  0214                     	;# 
  1675  0215                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0216                     	;# 
  1679  0216                     	;# 
  1680  0217                     	;# 
  1681  0217                     	;# 
  1682  0291                     	;# 
  1683  0291                     	;# 
  1684  0292                     	;# 
  1685  0293                     	;# 
  1686  0298                     	;# 
  1687  0298                     	;# 
  1688  0299                     	;# 
  1689  029A                     	;# 
  1690  0394                     	;# 
  1691  0395                     	;# 
  1692  0396                     	;# 
  1693  0FE4                     	;# 
  1694  0FE5                     	;# 
  1695  0FE6                     	;# 
  1696  0FE7                     	;# 
  1697  0FE8                     	;# 
  1698  0FE9                     	;# 
  1699  0FEA                     	;# 
  1700  0FEB                     	;# 
  1701  0FED                     	;# 
  1702  0FEE                     	;# 
  1703  0FEF                     	;# 
  1704  0000                     	;# 
  1705  0001                     	;# 
  1706  0002                     	;# 
  1707  0003                     	;# 
  1708  0004                     	;# 
  1709  0005                     	;# 
  1710  0006                     	;# 
  1711  0007                     	;# 
  1712  0008                     	;# 
  1713  0009                     	;# 
  1714  000A                     	;# 
  1715  000B                     	;# 
  1716  000C                     	;# 
  1717  000D                     	;# 
  1718  000E                     	;# 
  1719  0010                     	;# 
  1720  0011                     	;# 
  1721  0012                     	;# 
  1722  0015                     	;# 
  1723  0016                     	;# 
  1724  0016                     	;# 
  1725  0017                     	;# 
  1726  0018                     	;# 
  1727  0019                     	;# 
  1728  001A                     	;# 
  1729  001B                     	;# 
  1730  001C                     	;# 
  1731  008C                     	;# 
  1732  008D                     	;# 
  1733  008E                     	;# 
  1734  0090                     	;# 
  1735  0091                     	;# 
  1736  0092                     	;# 
  1737  0095                     	;# 
  1738  0096                     	;# 
  1739  0097                     	;# 
  1740  0099                     	;# 
  1741  009A                     	;# 
  1742  009B                     	;# 
  1743  009B                     	;# 
  1744  009C                     	;# 
  1745  009D                     	;# 
  1746  009E                     	;# 
  1747  010C                     	;# 
  1748  010D                     	;# 
  1749  010E                     	;# 
  1750  0116                     	;# 
  1751  0117                     	;# 
  1752  011D                     	;# 
  1753  018C                     	;# 
  1754  018D                     	;# 
  1755  018E                     	;# 
  1756  0191                     	;# 
  1757  0191                     	;# 
  1758  0192                     	;# 
  1759  0193                     	;# 
  1760  0193                     	;# 
  1761  0194                     	;# 
  1762  0195                     	;# 
  1763  0196                     	;# 
  1764  0197                     	;# 
  1765  0199                     	;# 
  1766  019A                     	;# 
  1767  019B                     	;# 
  1768  019B                     	;# 
  1769  019B                     	;# 
  1770  019B                     	;# 
  1771  019C                     	;# 
  1772  019C                     	;# 
  1773  019D                     	;# 
  1774  019E                     	;# 
  1775  019F                     	;# 
  1776  020D                     	;# 
  1777  0210                     	;# 
  1778  0211                     	;# 
  1779  0211                     	;# 
  1780  0212                     	;# 
  1781  0212                     	;# 
  1782  0213                     	;# 
  1783  0213                     	;# 
  1784  0214                     	;# 
  1785  0214                     	;# 
  1786  0215                     	;# 
  1787  0215                     	;# 
  1788  0215                     	;# 
  1789  0216                     	;# 
  1790  0216                     	;# 
  1791  0217                     	;# 
  1792  0217                     	;# 
  1793  0291                     	;# 
  1794  0291                     	;# 
  1795  0292                     	;# 
  1796  0293                     	;# 
  1797  0298                     	;# 
  1798  0298                     	;# 
  1799  0299                     	;# 
  1800  029A                     	;# 
  1801  0394                     	;# 
  1802  0395                     	;# 
  1803  0396                     	;# 
  1804  0FE4                     	;# 
  1805  0FE5                     	;# 
  1806  0FE6                     	;# 
  1807  0FE7                     	;# 
  1808  0FE8                     	;# 
  1809  0FE9                     	;# 
  1810  0FEA                     	;# 
  1811  0FEB                     	;# 
  1812  0FED                     	;# 
  1813  0FEE                     	;# 
  1814  0FEF                     	;# 
  1815  0000                     	;# 
  1816  0001                     	;# 
  1817  0002                     	;# 
  1818  0003                     	;# 
  1819  0004                     	;# 
  1820  0005                     	;# 
  1821  0006                     	;# 
  1822  0007                     	;# 
  1823  0008                     	;# 
  1824  0009                     	;# 
  1825  000A                     	;# 
  1826  000B                     	;# 
  1827  000C                     	;# 
  1828  000D                     	;# 
  1829  000E                     	;# 
  1830  0010                     	;# 
  1831  0011                     	;# 
  1832  0012                     	;# 
  1833  0015                     	;# 
  1834  0016                     	;# 
  1835  0016                     	;# 
  1836  0017                     	;# 
  1837  0018                     	;# 
  1838  0019                     	;# 
  1839  001A                     	;# 
  1840  001B                     	;# 
  1841  001C                     	;# 
  1842  008C                     	;# 
  1843  008D                     	;# 
  1844  008E                     	;# 
  1845  0090                     	;# 
  1846  0091                     	;# 
  1847  0092                     	;# 
  1848  0095                     	;# 
  1849  0096                     	;# 
  1850  0097                     	;# 
  1851  0099                     	;# 
  1852  009A                     	;# 
  1853  009B                     	;# 
  1854  009B                     	;# 
  1855  009C                     	;# 
  1856  009D                     	;# 
  1857  009E                     	;# 
  1858  010C                     	;# 
  1859  010D                     	;# 
  1860  010E                     	;# 
  1861  0116                     	;# 
  1862  0117                     	;# 
  1863  011D                     	;# 
  1864  018C                     	;# 
  1865  018D                     	;# 
  1866  018E                     	;# 
  1867  0191                     	;# 
  1868  0191                     	;# 
  1869  0192                     	;# 
  1870  0193                     	;# 
  1871  0193                     	;# 
  1872  0194                     	;# 
  1873  0195                     	;# 
  1874  0196                     	;# 
  1875  0197                     	;# 
  1876  0199                     	;# 
  1877  019A                     	;# 
  1878  019B                     	;# 
  1879  019B                     	;# 
  1880  019B                     	;# 
  1881  019B                     	;# 
  1882  019C                     	;# 
  1883  019C                     	;# 
  1884  019D                     	;# 
  1885  019E                     	;# 
  1886  019F                     	;# 
  1887  020D                     	;# 
  1888  0210                     	;# 
  1889  0211                     	;# 
  1890  0211                     	;# 
  1891  0212                     	;# 
  1892  0212                     	;# 
  1893  0213                     	;# 
  1894  0213                     	;# 
  1895  0214                     	;# 
  1896  0214                     	;# 
  1897  0215                     	;# 
  1898  0215                     	;# 
  1899  0215                     	;# 
  1900  0216                     	;# 
  1901  0216                     	;# 
  1902  0217                     	;# 
  1903  0217                     	;# 
  1904  0291                     	;# 
  1905  0291                     	;# 
  1906  0292                     	;# 
  1907  0293                     	;# 
  1908  0298                     	;# 
  1909  0298                     	;# 
  1910  0299                     	;# 
  1911  029A                     	;# 
  1912  0394                     	;# 
  1913  0395                     	;# 
  1914  0396                     	;# 
  1915  0FE4                     	;# 
  1916  0FE5                     	;# 
  1917  0FE6                     	;# 
  1918  0FE7                     	;# 
  1919  0FE8                     	;# 
  1920  0FE9                     	;# 
  1921  0FEA                     	;# 
  1922  0FEB                     	;# 
  1923  0FED                     	;# 
  1924  0FEE                     	;# 
  1925  0FEF                     	;# 
  1926                           
  1927                           	psect	idataBANK3
  1928  1AE8                     __pidataBANK3:	
  1929                           
  1930                           ;initializer for _VarProduct
  1931  1AE8  3463               	retlw	99
  1932  1AE9  3402               	retlw	2
  1933  1AEA  3400               	retlw	0
  1934  1AEB  3400               	retlw	0
  1935  1AEC  3400               	retlw	0
  1936  1AED  3400               	retlw	0
  1937  1AEE  3400               	retlw	0
  1938  1AEF  3400               	retlw	0
  1939  1AF0  3400               	retlw	0
  1940  1AF1  3400               	retlw	0
  1941  1AF2  3400               	retlw	0
  1942  1AF3  3400               	retlw	0
  1943  1AF4  34FF               	retlw	255
  1944  1AF5  34FF               	retlw	255
  1945  1AF6  34FF               	retlw	255
  1946  1AF7  3400               	retlw	0
  1947  1AF8  3400               	retlw	0
  1948  1AF9  3400               	retlw	0
  1949  1AFA  3400               	retlw	0
  1950  1AFB  3400               	retlw	0
  1951  1AFC  3400               	retlw	0
  1952  1AFD  3400               	retlw	0
  1953  1AFE  3400               	retlw	0
  1954  1AFF  3400               	retlw	0
  1955  1B00  3400               	retlw	0
  1956  1B01  3400               	retlw	0
  1957  1B02  3400               	retlw	0
  1958  1B03  3400               	retlw	0
  1959  1B04  3400               	retlw	0
  1960  1B05  3400               	retlw	0
  1961  1B06  3400               	retlw	0
  1962  1B07  3400               	retlw	0
  1963                           
  1964                           	psect	stringtext
  1965  1800                     __pstringtext:	
  1966  1800                     _CC2500_registers_address:	
  1967  1800  3403               	retlw	3
  1968  1801  3416               	retlw	22
  1969  1802  3417               	retlw	23
  1970  1803  341E               	retlw	30
  1971  1804  341F               	retlw	31
  1972  1805  3420               	retlw	32
  1973  1806  342A               	retlw	42
  1974  1807  342B               	retlw	43
  1975  1808  340B               	retlw	11
  1976  1809  340C               	retlw	12
  1977  180A  340D               	retlw	13
  1978  180B  340E               	retlw	14
  1979  180C  340F               	retlw	15
  1980  180D  3410               	retlw	16
  1981  180E  3411               	retlw	17
  1982  180F  3412               	retlw	18
  1983  1810  3413               	retlw	19
  1984  1811  3414               	retlw	20
  1985  1812  340A               	retlw	10
  1986  1813  3415               	retlw	21
  1987  1814  3421               	retlw	33
  1988  1815  3422               	retlw	34
  1989  1816  3418               	retlw	24
  1990  1817  3419               	retlw	25
  1991  1818  341A               	retlw	26
  1992  1819  341B               	retlw	27
  1993  181A  341C               	retlw	28
  1994  181B  341D               	retlw	29
  1995  181C  3423               	retlw	35
  1996  181D  3424               	retlw	36
  1997  181E  3425               	retlw	37
  1998  181F  3426               	retlw	38
  1999  1820  3429               	retlw	41
  2000  1821  342C               	retlw	44
  2001  1822  342D               	retlw	45
  2002  1823  342E               	retlw	46
  2003  1824  3400               	retlw	0
  2004  1825  3401               	retlw	1
  2005  1826  3402               	retlw	2
  2006  1827  3407               	retlw	7
  2007  1828  3408               	retlw	8
  2008  1829  3409               	retlw	9
  2009  182A  3406               	retlw	6
  2010  182B  3404               	retlw	4
  2011  182C  3405               	retlw	5
  2012  182D  3427               	retlw	39
  2013  182E  3428               	retlw	40
  2014  182F                     __end_of_CC2500_registers_address:	
  2015  182F                     _CC2500_rfSettings:	
  2016  182F  3407               	retlw	7
  2017  1830  3407               	retlw	7
  2018  1831  3430               	retlw	48
  2019  1832  3487               	retlw	135
  2020  1833  346B               	retlw	107
  2021  1834  34F8               	retlw	248
  2022  1835  347F               	retlw	127
  2023  1836  343F               	retlw	63
  2024  1837  3409               	retlw	9
  2025  1838  3400               	retlw	0
  2026  1839  345C               	retlw	92
  2027  183A  34A7               	retlw	167
  2028  183B  3462               	retlw	98
  2029  183C  3486               	retlw	134
  2030  183D  3483               	retlw	131
  2031  183E  3403               	retlw	3
  2032  183F  3422               	retlw	34
  2033  1840  34F8               	retlw	248
  2034  1841  3400               	retlw	0
  2035  1842  3444               	retlw	68
  2036  1843  34B6               	retlw	182
  2037  1844  3410               	retlw	16
  2038  1845  3418               	retlw	24
  2039  1846  341D               	retlw	29
  2040  1847  341C               	retlw	28
  2041  1848  34C7               	retlw	199
  2042  1849  3400               	retlw	0
  2043  184A  34B2               	retlw	178
  2044  184B  34EA               	retlw	234
  2045  184C  340A               	retlw	10
  2046  184D  3400               	retlw	0
  2047  184E  3411               	retlw	17
  2048  184F  3459               	retlw	89
  2049  1850  3488               	retlw	136
  2050  1851  3431               	retlw	49
  2051  1852  340B               	retlw	11
  2052  1853  342F               	retlw	47
  2053  1854  342E               	retlw	46
  2054  1855  3406               	retlw	6
  2055  1856  3404               	retlw	4
  2056  1857  3405               	retlw	5
  2057  1858  3400               	retlw	0
  2058  1859  3430               	retlw	48
  2059  185A  34D3               	retlw	211
  2060  185B  3491               	retlw	145
  2061  185C  3441               	retlw	65
  2062  185D  3400               	retlw	0
  2063  185E                     __end_of_CC2500_rfSettings:	
  2064  185E                     _CC2500_patable_vaule:	
  2065  185E  34FE               	retlw	254
  2066  185F  34FE               	retlw	254
  2067  1860  34FE               	retlw	254
  2068  1861  34FE               	retlw	254
  2069  1862  34FE               	retlw	254
  2070  1863  34FE               	retlw	254
  2071  1864  34FE               	retlw	254
  2072  1865  34FE               	retlw	254
  2073  1866                     __end_of_CC2500_patable_vaule:	
  2074                           
  2075                           	psect	nvCOMMON
  2076  007C                     __pnvCOMMON:	
  2077  007C                     _Memory:	
  2078  007C                     	ds	1
  2079  007D                     _TMain:	
  2080  007D                     	ds	1
  2081                           
  2082                           	psect	nvBANK0
  2083  006F                     __pnvBANK0:	
  2084  006F                     _Product:	
  2085  006F                     	ds	1
  2086                           
  2087                           	psect	nvBANK1
  2088  00E9                     __pnvBANK1:	
  2089  00E9                     _Timer0:	
  2090  00E9                     	ds	1
  2091  000C                     _PORTA	set	12
  2092  000D                     _PORTB	set	13
  2093  000E                     _PORTC	set	14
  2094  0015                     _TMR0	set	21
  2095  005F                     _GIE	set	95
  2096  005C                     _INTE	set	92
  2097  0059                     _INTF	set	89
  2098  005B                     _IOCIE	set	91
  2099  0058                     _IOCIF	set	88
  2100  005E                     _PEIE	set	94
  2101  0060                     _RA0	set	96
  2102  0063                     _RA3	set	99
  2103  0064                     _RA4	set	100
  2104  0066                     _RA6	set	102
  2105  0067                     _RA7	set	103
  2106  0068                     _RB0	set	104
  2107  0069                     _RB1	set	105
  2108  006B                     _RB3	set	107
  2109  006C                     _RB4	set	108
  2110  006D                     _RB5	set	109
  2111  0070                     _RC0	set	112
  2112  0071                     _RC1	set	113
  2113  0072                     _RC2	set	114
  2114  0074                     _RC4	set	116
  2115  0075                     _RC5	set	117
  2116  0077                     _RC7	set	119
  2117  005D                     _TMR0IE	set	93
  2118  005A                     _TMR0IF	set	90
  2119  009D                     _ADCON0	set	157
  2120  009E                     _ADCON1	set	158
  2121  009C                     _ADRESH	set	156
  2122  009B                     _ADRESL	set	155
  2123  0095                     _OPTION_REG	set	149
  2124  0099                     _OSCCON	set	153
  2125  008C                     _TRISA	set	140
  2126  008D                     _TRISB	set	141
  2127  008E                     _TRISC	set	142
  2128  04E9                     _GO_nDONE	set	1257
  2129  0117                     _FVRCON	set	279
  2130  010C                     _LATA	set	268
  2131  010D                     _LATB	set	269
  2132  010E                     _LATC	set	270
  2133  018C                     _ANSELA	set	396
  2134  018D                     _ANSELB	set	397
  2135  018E                     _ANSELC	set	398
  2136  0192                     _PMADRH	set	402
  2137  0191                     _PMADRL	set	401
  2138  0196                     _PMCON2	set	406
  2139  0194                     _PMDATH	set	404
  2140  0193                     _PMDATL	set	403
  2141  0CAE                     _CFGS	set	3246
  2142  0CAC                     _FREE	set	3244
  2143  0CAD                     _LWLO	set	3245
  2144  0CA8                     _RD	set	3240
  2145  0CA9                     _WR	set	3241
  2146  0CAA                     _WREN	set	3242
  2147  1068                     _WPUB0	set	4200
  2148  1069                     _WPUB1	set	4201
  2149  106A                     _WPUB2	set	4202
  2150  0396                     _IOCBF	set	918
  2151  0395                     _IOCBN	set	917
  2152  0394                     _IOCBP	set	916
  2153  1CB2                     _IOCBF2	set	7346
  2154                           
  2155                           ; #config settings
  2156  0000                     
  2157                           	psect	cinit
  2158  0018                     start_initialization:	
  2159  0018                     __initialization:	
  2160                           
  2161                           ; Clear objects allocated to BITCOMMON
  2162  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2163                           
  2164                           ; Clear objects allocated to COMMON
  2165  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2166  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2167  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2168  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2169                           
  2170                           ; Clear objects allocated to BANK0
  2171  001D  01EC               	clrf	__pbssBANK0& (0+127)
  2172  001E  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2173  001F  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2174                           
  2175                           ; Clear objects allocated to BANK1
  2176  0020  30A0               	movlw	low __pbssBANK1
  2177  0021  0084               	movwf	4
  2178  0022  3000               	movlw	high __pbssBANK1
  2179  0023  0085               	movwf	5
  2180  0024  3049               	movlw	73
  2181  0025  31A6  26E4  3180   	fcall	clear_ram0
  2182                           
  2183                           ; Clear objects allocated to BANK2
  2184  0028  3020               	movlw	low __pbssBANK2
  2185  0029  0084               	movwf	4
  2186  002A  3001               	movlw	high __pbssBANK2
  2187  002B  0085               	movwf	5
  2188  002C  304C               	movlw	76
  2189  002D  31A6  26E4  3180   	fcall	clear_ram0
  2190                           
  2191                           ; Clear objects allocated to BANK3
  2192  0030  30A0               	movlw	low __pbssBANK3
  2193  0031  0084               	movwf	4
  2194  0032  3001               	movlw	high __pbssBANK3
  2195  0033  0085               	movwf	5
  2196  0034  3025               	movlw	37
  2197  0035  31A6  26E4  3180   	fcall	clear_ram0
  2198                           
  2199                           ; Clear objects allocated to BANK4
  2200  0038  3020               	movlw	low __pbssBANK4
  2201  0039  0084               	movwf	4
  2202  003A  3002               	movlw	high __pbssBANK4
  2203  003B  0085               	movwf	5
  2204  003C  3047               	movlw	71
  2205  003D  31A6  26E4  3180   	fcall	clear_ram0
  2206                           
  2207                           ; Initialize objects allocated to BANK3
  2208  0040  30E8               	movlw	low __pidataBANK3
  2209  0041  0084               	movwf	4
  2210  0042  309A               	movlw	(high __pidataBANK3)| (0+128)
  2211  0043  0085               	movwf	5
  2212  0044  30C5               	movlw	low __pdataBANK3
  2213  0045  0086               	movwf	6
  2214  0046  3001               	movlw	high __pdataBANK3
  2215  0047  0087               	movwf	7
  2216  0048  3020               	movlw	32
  2217  0049  31A6  26DE         	fcall	init_ram
  2218  004B                     end_of_initialization:	
  2219                           ;End of C runtime variable initialization code
  2220                           
  2221  004B                     __end_of__initialization:	
  2222  004B  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2223  004C  0020               	movlb	0
  2224  004D  3191  294E         	ljmp	_main	;jump to C main() function
  2225                           
  2226                           	psect	bitbssCOMMON
  2227  0380                     __pbitbssCOMMON:	
  2228  0380                     _CC2500_Enable:	
  2229  0380                     	ds	1
  2230  0381                     _Receive_GO:	
  2231  0381                     	ds	1
  2232  0382                     _Receive_OK:	
  2233  0382                     	ds	1
  2234  0383                     _RxStatus:	
  2235  0383                     	ds	1
  2236  0384                     _Transceive_GO:	
  2237  0384                     	ds	1
  2238  0385                     _Transceive_OK:	
  2239  0385                     	ds	1
  2240  0386                     _TxStatus:	
  2241  0386                     	ds	1
  2242                           
  2243                           	psect	bssCOMMON
  2244  0078                     __pbssCOMMON:	
  2245  0078                     _Buz:	
  2246  0078                     	ds	1
  2247  0079                     _DimmerLights11:	
  2248  0079                     	ds	1
  2249  007A                     _DimmerLights22:	
  2250  007A                     	ds	1
  2251  007B                     _RF:	
  2252  007B                     	ds	1
  2253                           
  2254                           	psect	bssBANK0
  2255  006C                     __pbssBANK0:	
  2256  006C                     _DimmerLights:	
  2257  006C                     	ds	1
  2258  006D                     _Sw:	
  2259  006D                     	ds	1
  2260  006E                     _Load:	
  2261  006E                     	ds	1
  2262                           
  2263                           	psect	bssBANK1
  2264  00A0                     __pbssBANK1:	
  2265  00A0                     _RF_Data:	
  2266  00A0                     	ds	21
  2267  00B5                     _RF_Count:	
  2268  00B5                     	ds	2
  2269  00B7                     _CRC:	
  2270  00B7                     	ds	1
  2271  00B8                     _DelayOff:	
  2272  00B8                     	ds	1
  2273  00B9                     _Dimmer:	
  2274  00B9                     	ds	1
  2275  00BA                     _DimmerLightsIntr:	
  2276  00BA                     	ds	1
  2277  00BB                     _LED:	
  2278  00BB                     	ds	1
  2279  00BC                     _RFSW:	
  2280  00BC                     	ds	1
  2281  00BD                     _RSSI:	
  2282  00BD                     	ds	1
  2283  00BE                     _Rx_Length:	
  2284  00BE                     	ds	1
  2285  00BF                     _SPI0Buffer:	
  2286  00BF                     	ds	1
  2287  00C0                     _Tx_Length:	
  2288  00C0                     	ds	1
  2289  00C1                     _r_address:	
  2290  00C1                     	ds	1
  2291  00C2                     _r_data:	
  2292  00C2                     	ds	1
  2293  00C3                     _s_data:	
  2294  00C3                     	ds	1
  2295  00C4                     _VarTimer0:	
  2296  00C4                     	ds	7
  2297  00CB                     _DlySw1:	
  2298  00CB                     	ds	5
  2299  00D0                     _DlySw2:	
  2300  00D0                     	ds	5
  2301  00D5                     _VarErrLED:	
  2302  00D5                     	ds	4
  2303  00D9                     _VarLED1:	
  2304  00D9                     	ds	4
  2305  00DD                     _VarLED2:	
  2306  00DD                     	ds	4
  2307  00E1                     _Dimmer1:	
  2308  00E1                     	ds	3
  2309  00E4                     _RF1:	
  2310  00E4                     	ds	3
  2311  00E7                     _RFSW1:	
  2312  00E7                     	ds	1
  2313  00E8                     _RFSW2:	
  2314  00E8                     	ds	1
  2315                           
  2316                           	psect	bssBANK2
  2317  0120                     __pbssBANK2:	
  2318  0120                     _VarTMain:	
  2319  0120                     	ds	16
  2320  0130                     _DimmerLights1:	
  2321  0130                     	ds	15
  2322  013F                     _DimmerLights2:	
  2323  013F                     	ds	15
  2324  014E                     _Buz1:	
  2325  014E                     	ds	12
  2326  015A                     _Sw1:	
  2327  015A                     	ds	9
  2328  0163                     _Sw2:	
  2329  0163                     	ds	9
  2330                           
  2331                           	psect	bssBANK3
  2332  01A0                     __pbssBANK3:	
  2333  01A0                     _VarMemory:	
  2334  01A0                     	ds	37
  2335                           
  2336                           	psect	dataBANK3
  2337  01C5                     __pdataBANK3:	
  2338  01C5                     _VarProduct:	
  2339  01C5                     	ds	32
  2340                           
  2341                           	psect	bssBANK4
  2342  0220                     __pbssBANK4:	
  2343  0220                     _Load1:	
  2344  0220                     	ds	71
  2345                           
  2346                           	psect	clrtext
  2347  26E4                     clear_ram0:	
  2348                           ;	Called with FSR0 containing the base address, and
  2349                           ;	WREG with the size to clear
  2350                           
  2351  26E4  0064               	clrwdt	;clear the watchdog before getting into this loop
  2352  26E5                     clrloop0:	
  2353  26E5  0180               	clrf	0	;clear RAM location pointed to by FSR
  2354  26E6  3101               	addfsr 0,1
  2355  26E7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2356  26E8  2EE5               	goto	clrloop0	;have we reached the end yet?
  2357  26E9  3400               	retlw	0	;all done for this memory range, return
  2358                           
  2359                           	psect	inittext
  2360  26DE                     init_ram:	
  2361  26DE  00FE               	movwf	126
  2362  26DF                     initloop:	
  2363  26DF  0012               	moviw fsr0++
  2364  26E0  001E               	movwi fsr1++
  2365  26E1  0BFE               	decfsz	126,f
  2366  26E2  2EDF               	goto	initloop
  2367  26E3  3400               	retlw	0
  2368                           
  2369                           	psect	cstackCOMMON
  2370  0071                     __pcstackCOMMON:	
  2371  0071                     ?_CC2500_WriteByte:	
  2372  0071                     ?_CC2500_WriteCommand:	
  2373                           ; 0 bytes @ 0x0
  2374                           
  2375  0071                     ?_CC2500_ReadStatus:	
  2376                           ; 0 bytes @ 0x0
  2377                           
  2378  0071                     ?_CC2500_ReadByte:	
  2379                           ; 0 bytes @ 0x0
  2380                           
  2381  0071                     ?_CC2500_PowerRST:	
  2382                           ; 0 bytes @ 0x0
  2383                           
  2384  0071                     ?_CC2500_InitSetREG:	
  2385                           ; 0 bytes @ 0x0
  2386                           
  2387  0071                     ?_CC2500_InitPATable:	
  2388                           ; 0 bytes @ 0x0
  2389                           
  2390  0071                     ?_CC2500_ClearTXFIFO:	
  2391                           ; 0 bytes @ 0x0
  2392                           
  2393  0071                     ?_CC2500_ClearRXFIFO:	
  2394                           ; 0 bytes @ 0x0
  2395                           
  2396  0071                     ?_CC2500_FrequencyCabr:	
  2397                           ; 0 bytes @ 0x0
  2398                           
  2399  0071                     ?_CC2500_SIDLEMode:	
  2400                           ; 0 bytes @ 0x0
  2401                           
  2402  0071                     ?_DlyOff_Initialization:	
  2403                           ; 0 bytes @ 0x0
  2404                           
  2405  0071                     ?_DlyOff_Main:	
  2406                           ; 0 bytes @ 0x0
  2407                           
  2408  0071                     ?_setTxData:	
  2409                           ; 0 bytes @ 0x0
  2410                           
  2411  0071                     ?_setDimmerLights_Initialization:	
  2412                           ; 0 bytes @ 0x0
  2413                           
  2414  0071                     ?_Dimmer_Initialization:	
  2415                           ; 0 bytes @ 0x0
  2416                           
  2417  0071                     ?_setLoad_GO:	
  2418                           ; 0 bytes @ 0x0
  2419                           
  2420  0071                     ?_setDimmerLights_Main:	
  2421                           ; 0 bytes @ 0x0
  2422                           
  2423  0071                     ?_setDimmerLights_ERROR:	
  2424                           ; 0 bytes @ 0x0
  2425                           
  2426  0071                     ?_setLoad_Count:	
  2427                           ; 0 bytes @ 0x0
  2428                           
  2429  0071                     ?_setLED_Initialization:	
  2430                           ; 0 bytes @ 0x0
  2431                           
  2432  0071                     ?_setLED_Main:	
  2433                           ; 0 bytes @ 0x0
  2434                           
  2435  0071                     ?_MainT_Initialization:	
  2436                           ; 0 bytes @ 0x0
  2437                           
  2438  0071                     ?_Mcu_Initialization:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0071                     ?_Flash_Memory_Initialization:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0071                     ?_Load_Initialization:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0071                     ?_Switch_Initialization:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0071                     ?_RF_Initialization:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0071                     ?_getLoad_AD:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0071                     ?_MainT:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0071                     ?_Flash_Memory_Main:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0071                     ?_Load_Main:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0071                     ?_Switch_Main:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0071                     ?_RF_Main:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0071                     ?_setLoad_Enable:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0071                     ?_setSw_Enable:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0071                     ?_IO_Set:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0071                     ?_TMR0_Set:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0071                     ?_ADC_Set:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0071                     ?_INT_Set:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0071                     ?_IOC_Set:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0071                     ?_IOC_ISR:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0071                     ??_IOC_ISR:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0071                     ?_TMR0_ISR:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0071                     ?_INT_ISR:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0071                     ?_Flash_Memory_Write:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0071                     ?_Flash_Memory_Modify:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0071                     ?_setLoad_AH_AL_Restore:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0071                     ?_setLoad_Exceptions:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0071                     ?_setRF_Initialization:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0071                     ?_setRF_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0071                     ?_getRxData:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0071                     ?_RF_RxDisable:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0071                     ?_setLog_Code:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0071                     ?_setControl_Lights_Table:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0071                     ?_setRFSW_Control:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0071                     ?_setRFSW_AdjControl:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0071                     ?_setRF_DimmerValue:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0071                     ?_setSw_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0071                     ?_setSw_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0071                     ?_Sw_DimmerOnFunc:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0071                     ?_Sw_DimmerAdjFunc:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0071                     ?_Sw_DimmerOffFunc:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0071                     ?_Buzzer_Initialization:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0071                     ?_Buzzer_Main:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0071                     ?_CC2500_TxData:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0071                     ?_CC2500_RxData:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0071                     ?_CC2500_PowerOnInitial:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0071                     ?_DelayOffPointSelect:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0071                     ?_DelayOff_Initialization:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0071                     ?_DelayOff_Main:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0071                     ?_DimmerLightsPointSelect:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0071                     ?_DimmerLights_Initialization:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0071                     ?_DimmerLights_Close:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0071                     ?_DimmerLights_Main:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0071                     ?_DimmerLights_Exceptions:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0071                     ?_setDimmerLights_AdjRF:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0071                     ?_LedPointSelect:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0071                     ?_LED_Initialization:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0071                     ?_LED_Main:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0071                     ?_main:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0071                     ?_ISR:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0071                     ?_setDimmerReClock:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0071                     ??_setDimmerReClock:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0071                     ?_setINT_GO:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0071                     ?_Flash_Memory_Unlock:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0071                     ?_Flash_Memory_Erasing:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0071                     ?_RfPointSelect:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0071                     ?_RfSWPointSelect:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0071                     ?_TouchPower:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0071                     ?_SwPointSelect:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0071                     ?i1_setLoad_StatusOff:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0071                     ?i1_RfPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0071                     ??i1_RfPointSelect:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0071                     ?_DelayTimejudge:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0071                     ?_getDimmerLights_StatusFlag:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0071                     ?_getPercentValue:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0071                     ?_Flash_Memory_Read:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0071                     ?_setPercentValue:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0071                     setRF_Initialization@rf:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0071                     i1setLoad_StatusOff@command:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672                           
  2673                           ; 1 bytes @ 0x0
  2674  0071                     	ds	1
  2675  0072                     ??i1_setLoad_StatusOff:	
  2676  0072                     i1setLoad_StatusOff@lights:	
  2677                           ; 0 bytes @ 0x1
  2678                           
  2679  0072                     i1RfPointSelect@rf:	
  2680                           ; 1 bytes @ 0x1
  2681                           
  2682                           
  2683                           ; 1 bytes @ 0x1
  2684  0072                     	ds	1
  2685  0073                     ??_TMR0_ISR:	
  2686  0073                     ?_setRF_ReceiveGO:	
  2687                           ; 0 bytes @ 0x2
  2688                           
  2689  0073                     setRF_ReceiveGO@command:	
  2690                           ; 0 bytes @ 0x2
  2691                           
  2692                           
  2693                           ; 1 bytes @ 0x2
  2694  0073                     	ds	1
  2695  0074                     ??_setRF_ReceiveGO:	
  2696  0074                     setRF_ReceiveGO@rf:	
  2697                           ; 0 bytes @ 0x3
  2698                           
  2699                           
  2700                           ; 1 bytes @ 0x3
  2701  0074                     	ds	1
  2702  0075                     ??_INT_ISR:	
  2703                           
  2704                           ; 0 bytes @ 0x4
  2705  0075                     	ds	2
  2706  0077                     ??_ISR:	
  2707                           
  2708                           ; 0 bytes @ 0x6
  2709  0077                     	ds	1
  2710                           
  2711                           	psect	cstackBANK0
  2712  0020                     __pcstackBANK0:	
  2713  0020                     ??_CC2500_WriteByte:	
  2714  0020                     ??_CC2500_ReadByte:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0020                     ?_DelayTime_1us:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0020                     ??_DelayTimejudge:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0020                     ??_Dimmer_Initialization:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0020                     ??_getDimmerLights_StatusFlag:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0020                     ??_setLoad_GO:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0020                     ?_setLoad_StatusOff:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0020                     ??_setLoad_Count:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0020                     ?_setLoad_StatusOn:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0020                     ??_MainT_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0020                     ??_setLoad_Enable:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0020                     ??_IO_Set:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0020                     ??_TMR0_Set:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0020                     ??_ADC_Set:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0020                     ??_INT_Set:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0020                     ??_IOC_Set:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0020                     ??_Flash_Memory_Read:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0020                     ??_Flash_Memory_Write:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0020                     ??_setLoad_AH_AL_Restore:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0020                     ??_setRF_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0020                     ??_Buzzer_Initialization:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0020                     ??_Buzzer_Main:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0020                     ??_DelayOffPointSelect:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0020                     ??_DimmerLightsPointSelect:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0020                     ??_LedPointSelect:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0020                     ??_setINT_GO:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0020                     ??_Flash_Memory_Unlock:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0020                     ??_Flash_Memory_Erasing:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0020                     ??_RfPointSelect:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0020                     ??_RfSWPointSelect:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ??_TouchPower:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_SwPointSelect:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ?_getAD:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ?___wmul:	
  2814                           ; 2 bytes @ 0x0
  2815                           
  2816  0020                     ?___lwdiv:	
  2817                           ; 2 bytes @ 0x0
  2818                           
  2819  0020                     ?___ftpack:	
  2820                           ; 2 bytes @ 0x0
  2821                           
  2822  0020                     setINT_GO@command:	
  2823                           ; 3 bytes @ 0x0
  2824                           
  2825  0020                     getAD@adcon1:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0020                     setLoad_Enable@command:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0020                     setLoad_GO@command:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0020                     setLoad_StatusOn@command:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0020                     setLoad_StatusOff@command:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0020                     DelayTime_1us@count:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0020                     ___wmul@multiplier:	
  2844                           ; 2 bytes @ 0x0
  2845                           
  2846  0020                     ___lwdiv@divisor:	
  2847                           ; 2 bytes @ 0x0
  2848                           
  2849  0020                     ___ftpack@arg:	
  2850                           ; 2 bytes @ 0x0
  2851                           
  2852                           
  2853                           ; 3 bytes @ 0x0
  2854  0020                     	ds	1
  2855  0021                     ??_setLoad_StatusOff:	
  2856  0021                     ??_setLoad_StatusOn:	
  2857                           ; 0 bytes @ 0x1
  2858                           
  2859  0021                     ??_Mcu_Initialization:	
  2860                           ; 0 bytes @ 0x1
  2861                           
  2862  0021                     ??_RF_Initialization:	
  2863                           ; 0 bytes @ 0x1
  2864                           
  2865  0021                     CC2500_WriteByte@loop_a:	
  2866                           ; 0 bytes @ 0x1
  2867                           
  2868  0021                     CC2500_ReadByte@loop_b:	
  2869                           ; 1 bytes @ 0x1
  2870                           
  2871  0021                     DelayOffPointSelect@sw:	
  2872                           ; 1 bytes @ 0x1
  2873                           
  2874  0021                     DelayTimejudge@i:	
  2875                           ; 1 bytes @ 0x1
  2876                           
  2877  0021                     DimmerLightsPointSelect@lights:	
  2878                           ; 1 bytes @ 0x1
  2879                           
  2880  0021                     getDimmerLights_StatusFlag@Status:	
  2881                           ; 1 bytes @ 0x1
  2882                           
  2883  0021                     LedPointSelect@led:	
  2884                           ; 1 bytes @ 0x1
  2885                           
  2886  0021                     Flash_Memory_Read@i:	
  2887                           ; 1 bytes @ 0x1
  2888                           
  2889  0021                     Flash_Memory_Write@i:	
  2890                           ; 1 bytes @ 0x1
  2891                           
  2892  0021                     setLoad_Count@command:	
  2893                           ; 1 bytes @ 0x1
  2894                           
  2895  0021                     setLoad_StatusOn@lights:	
  2896                           ; 1 bytes @ 0x1
  2897                           
  2898  0021                     setLoad_StatusOff@lights:	
  2899                           ; 1 bytes @ 0x1
  2900                           
  2901  0021                     setLoad_AH_AL_Restore@i:	
  2902                           ; 1 bytes @ 0x1
  2903                           
  2904  0021                     RfPointSelect@rf:	
  2905                           ; 1 bytes @ 0x1
  2906                           
  2907  0021                     RfSWPointSelect@sw:	
  2908                           ; 1 bytes @ 0x1
  2909                           
  2910  0021                     SwPointSelect@sw:	
  2911                           ; 1 bytes @ 0x1
  2912                           
  2913                           
  2914                           ; 1 bytes @ 0x1
  2915  0021                     	ds	1
  2916  0022                     ??_CC2500_WriteCommand:	
  2917  0022                     ??_CC2500_ReadStatus:	
  2918                           ; 0 bytes @ 0x2
  2919                           
  2920  0022                     ?_setRF_RxStatus:	
  2921                           ; 0 bytes @ 0x2
  2922                           
  2923  0022                     ??_DelayTime_1us:	
  2924                           ; 0 bytes @ 0x2
  2925                           
  2926  0022                     ?_CC2500_WriteREG:	
  2927                           ; 0 bytes @ 0x2
  2928                           
  2929  0022                     ??_DlyOff_Initialization:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0022                     ?_setSw_Status:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935  0022                     ?_setRFSW_Status:	
  2936                           ; 0 bytes @ 0x2
  2937                           
  2938  0022                     ?_setDimmerLights_Trigger:	
  2939                           ; 0 bytes @ 0x2
  2940                           
  2941  0022                     ?_setDimmerLights_Switch:	
  2942                           ; 0 bytes @ 0x2
  2943                           
  2944  0022                     ??_setTxData:	
  2945                           ; 0 bytes @ 0x2
  2946                           
  2947  0022                     ??_setDimmerLights_Initialization:	
  2948                           ; 0 bytes @ 0x2
  2949                           
  2950  0022                     ?_setDimmerLights_TriggerERROR:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953  0022                     ?_setLED:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0022                     ??_setLED_Main:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0022                     ??_Load_Initialization:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0022                     ??_setSw_Enable:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0022                     ?_setRF_Enable:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0022                     ?_setDimmerLights_AdjGo:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0022                     ?_setDimmerLights_TriggerAdj:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0022                     ?_setDimmerLights_Clear:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0022                     ?_setRF_Learn:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0022                     CC2500_WriteREG@value:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0022                     DlyOff_Initialization@sw:	
  2984                           ; 1 bytes @ 0x2
  2985                           
  2986  0022                     DelayTimejudge@value:	
  2987                           ; 1 bytes @ 0x2
  2988                           
  2989  0022                     _getDimmerLights_StatusFlag$1710:	
  2990                           ; 1 bytes @ 0x2
  2991                           
  2992  0022                     setDimmerLights_TriggerERROR@command:	
  2993                           ; 1 bytes @ 0x2
  2994                           
  2995  0022                     setDimmerLights_Switch@command:	
  2996                           ; 1 bytes @ 0x2
  2997                           
  2998  0022                     setDimmerLights_AdjGo@command:	
  2999                           ; 1 bytes @ 0x2
  3000                           
  3001  0022                     setDimmerLights_Trigger@command:	
  3002                           ; 1 bytes @ 0x2
  3003                           
  3004  0022                     setDimmerLights_TriggerAdj@command:	
  3005                           ; 1 bytes @ 0x2
  3006                           
  3007  0022                     setDimmerLights_Clear@command:	
  3008                           ; 1 bytes @ 0x2
  3009                           
  3010  0022                     setLED@command:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0022                     Flash_Memory_Read@address:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0022                     setRF_Learn@command:	
  3017                           ; 1 bytes @ 0x2
  3018                           
  3019  0022                     setRF_RxStatus@command:	
  3020                           ; 1 bytes @ 0x2
  3021                           
  3022  0022                     setRF_Enable@command:	
  3023                           ; 1 bytes @ 0x2
  3024                           
  3025  0022                     setRFSW_Status@command:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0022                     setSw_Enable@command:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0022                     setSw_Status@command:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0022                     DelayTime_1us@i:	
  3035                           ; 1 bytes @ 0x2
  3036                           
  3037  0022                     ___wmul@multiplicand:	
  3038                           ; 2 bytes @ 0x2
  3039                           
  3040  0022                     ___lwdiv@dividend:	
  3041                           ; 2 bytes @ 0x2
  3042                           
  3043                           
  3044                           ; 2 bytes @ 0x2
  3045  0022                     	ds	1
  3046  0023                     ??_setRF_RxStatus:	
  3047  0023                     ??_CC2500_WriteREG:	
  3048                           ; 0 bytes @ 0x3
  3049                           
  3050  0023                     ??_setSw_Status:	
  3051                           ; 0 bytes @ 0x3
  3052                           
  3053  0023                     ??_setRFSW_Status:	
  3054                           ; 0 bytes @ 0x3
  3055                           
  3056  0023                     ??_setDimmerLights_Trigger:	
  3057                           ; 0 bytes @ 0x3
  3058                           
  3059  0023                     ??_setDimmerLights_Switch:	
  3060                           ; 0 bytes @ 0x3
  3061                           
  3062  0023                     ??_setDimmerLights_TriggerERROR:	
  3063                           ; 0 bytes @ 0x3
  3064                           
  3065  0023                     ??_setLED:	
  3066                           ; 0 bytes @ 0x3
  3067                           
  3068  0023                     ??_setRF_Enable:	
  3069                           ; 0 bytes @ 0x3
  3070                           
  3071  0023                     ??_DelayOff_Initialization:	
  3072                           ; 0 bytes @ 0x3
  3073                           
  3074  0023                     ?_setDelayOff_GO:	
  3075                           ; 0 bytes @ 0x3
  3076                           
  3077  0023                     ??_DimmerLights_Close:	
  3078                           ; 0 bytes @ 0x3
  3079                           
  3080  0023                     ??_setDimmerLights_AdjGo:	
  3081                           ; 0 bytes @ 0x3
  3082                           
  3083  0023                     ??_setDimmerLights_TriggerAdj:	
  3084                           ; 0 bytes @ 0x3
  3085                           
  3086  0023                     ??_setDimmerLights_Clear:	
  3087                           ; 0 bytes @ 0x3
  3088                           
  3089  0023                     ??_getAD:	
  3090                           ; 0 bytes @ 0x3
  3091                           
  3092  0023                     ??_setRF_Learn:	
  3093                           ; 0 bytes @ 0x3
  3094                           
  3095  0023                     CC2500_WriteCommand@command:	
  3096                           ; 0 bytes @ 0x3
  3097                           
  3098  0023                     CC2500_ReadStatus@status_addr:	
  3099                           ; 1 bytes @ 0x3
  3100                           
  3101  0023                     setDelayOff_GO@command:	
  3102                           ; 1 bytes @ 0x3
  3103                           
  3104  0023                     setDimmerLights_Initialization@lights:	
  3105                           ; 1 bytes @ 0x3
  3106                           
  3107  0023                     setDimmerLights_TriggerERROR@lights:	
  3108                           ; 1 bytes @ 0x3
  3109                           
  3110  0023                     setDimmerLights_Switch@lights:	
  3111                           ; 1 bytes @ 0x3
  3112                           
  3113  0023                     setDimmerLights_AdjGo@lights:	
  3114                           ; 1 bytes @ 0x3
  3115                           
  3116  0023                     setDimmerLights_Trigger@lights:	
  3117                           ; 1 bytes @ 0x3
  3118                           
  3119  0023                     setDimmerLights_TriggerAdj@lights:	
  3120                           ; 1 bytes @ 0x3
  3121                           
  3122  0023                     setDimmerLights_Clear@lights:	
  3123                           ; 1 bytes @ 0x3
  3124                           
  3125  0023                     setLED@led:	
  3126                           ; 1 bytes @ 0x3
  3127                           
  3128  0023                     getAD@adcon0:	
  3129                           ; 1 bytes @ 0x3
  3130                           
  3131  0023                     Flash_Memory_Read@ret:	
  3132                           ; 1 bytes @ 0x3
  3133                           
  3134  0023                     setRF_Learn@rf:	
  3135                           ; 1 bytes @ 0x3
  3136                           
  3137  0023                     setRF_RxStatus@rf:	
  3138                           ; 1 bytes @ 0x3
  3139                           
  3140  0023                     setTxData@rf:	
  3141                           ; 1 bytes @ 0x3
  3142                           
  3143  0023                     setRF_Enable@rf:	
  3144                           ; 1 bytes @ 0x3
  3145                           
  3146  0023                     setRFSW_Status@sw:	
  3147                           ; 1 bytes @ 0x3
  3148                           
  3149  0023                     setSw_Status@sw:	
  3150                           ; 1 bytes @ 0x3
  3151                           
  3152  0023                     ___ftpack@exp:	
  3153                           ; 1 bytes @ 0x3
  3154                           
  3155                           
  3156                           ; 1 bytes @ 0x3
  3157  0023                     	ds	1
  3158  0024                     ??_CC2500_ClearTXFIFO:	
  3159  0024                     ??_CC2500_ClearRXFIFO:	
  3160                           ; 0 bytes @ 0x4
  3161                           
  3162  0024                     ??_CC2500_SIDLEMode:	
  3163                           ; 0 bytes @ 0x4
  3164                           
  3165  0024                     ?_setDimmerLights:	
  3166                           ; 0 bytes @ 0x4
  3167                           
  3168  0024                     ??_setDimmerLights_ERROR:	
  3169                           ; 0 bytes @ 0x4
  3170                           
  3171  0024                     ??_setLED_Initialization:	
  3172                           ; 0 bytes @ 0x4
  3173                           
  3174  0024                     ??_getLoad_AD:	
  3175                           ; 0 bytes @ 0x4
  3176                           
  3177  0024                     ??_Flash_Memory_Modify:	
  3178                           ; 0 bytes @ 0x4
  3179                           
  3180  0024                     ??_RF_RxDisable:	
  3181                           ; 0 bytes @ 0x4
  3182                           
  3183  0024                     ??_setSw_Initialization:	
  3184                           ; 0 bytes @ 0x4
  3185                           
  3186  0024                     ??_Sw_DimmerAdjFunc:	
  3187                           ; 0 bytes @ 0x4
  3188                           
  3189  0024                     ??_CC2500_TxData:	
  3190                           ; 0 bytes @ 0x4
  3191                           
  3192  0024                     ??_CC2500_RxData:	
  3193                           ; 0 bytes @ 0x4
  3194                           
  3195  0024                     ??_DimmerLights_Initialization:	
  3196                           ; 0 bytes @ 0x4
  3197                           
  3198  0024                     ??___wmul:	
  3199                           ; 0 bytes @ 0x4
  3200                           
  3201  0024                     ??___lwdiv:	
  3202                           ; 0 bytes @ 0x4
  3203                           
  3204  0024                     CC2500_WriteREG@w_addr:	
  3205                           ; 0 bytes @ 0x4
  3206                           
  3207  0024                     setDelayOff_GO@value:	
  3208                           ; 1 bytes @ 0x4
  3209                           
  3210  0024                     setDimmerLights@status:	
  3211                           ; 1 bytes @ 0x4
  3212                           
  3213  0024                     setLED_Initialization@led:	
  3214                           ; 1 bytes @ 0x4
  3215                           
  3216  0024                     setLED_Main@led:	
  3217                           ; 1 bytes @ 0x4
  3218                           
  3219  0024                     RF_RxDisable@rf:	
  3220                           ; 1 bytes @ 0x4
  3221                           
  3222  0024                     setSw_Initialization@sw:	
  3223                           ; 1 bytes @ 0x4
  3224                           
  3225  0024                     Sw_DimmerAdjFunc@sw:	
  3226                           ; 1 bytes @ 0x4
  3227                           
  3228  0024                     ___ftpack@sign:	
  3229                           ; 1 bytes @ 0x4
  3230                           
  3231  0024                     DelayTime_1us@j:	
  3232                           ; 1 bytes @ 0x4
  3233                           
  3234  0024                     ___wmul@product:	
  3235                           ; 2 bytes @ 0x4
  3236                           
  3237                           
  3238                           ; 2 bytes @ 0x4
  3239  0024                     	ds	1
  3240  0025                     ??_CC2500_InitSetREG:	
  3241  0025                     ??_CC2500_InitPATable:	
  3242                           ; 0 bytes @ 0x5
  3243                           
  3244  0025                     ??_setDimmerLights:	
  3245                           ; 0 bytes @ 0x5
  3246                           
  3247  0025                     ??_Switch_Initialization:	
  3248                           ; 0 bytes @ 0x5
  3249                           
  3250  0025                     ??___ftpack:	
  3251                           ; 0 bytes @ 0x5
  3252                           
  3253  0025                     ??_setDelayOff_GO:	
  3254                           ; 0 bytes @ 0x5
  3255                           
  3256  0025                     ??_LED_Initialization:	
  3257                           ; 0 bytes @ 0x5
  3258                           
  3259  0025                     ??_LED_Main:	
  3260                           ; 0 bytes @ 0x5
  3261                           
  3262  0025                     CC2500_TxData@loop_e:	
  3263                           ; 0 bytes @ 0x5
  3264                           
  3265  0025                     CC2500_RxData@loop_f:	
  3266                           ; 1 bytes @ 0x5
  3267                           
  3268  0025                     setDimmerLights_ERROR@lights:	
  3269                           ; 1 bytes @ 0x5
  3270                           
  3271  0025                     ___lwdiv@quotient:	
  3272                           ; 1 bytes @ 0x5
  3273                           
  3274                           
  3275                           ; 2 bytes @ 0x5
  3276  0025                     	ds	1
  3277  0026                     ??_CC2500_PowerRST:	
  3278  0026                     ??_CC2500_FrequencyCabr:	
  3279                           ; 0 bytes @ 0x6
  3280                           
  3281  0026                     ?_setBuz:	
  3282                           ; 0 bytes @ 0x6
  3283                           
  3284  0026                     CC2500_InitSetREG@temp1:	
  3285                           ; 0 bytes @ 0x6
  3286                           
  3287  0026                     CC2500_InitPATable@temp:	
  3288                           ; 1 bytes @ 0x6
  3289                           
  3290  0026                     setDimmerLights@lights:	
  3291                           ; 1 bytes @ 0x6
  3292                           
  3293  0026                     Flash_Memory_Modify@i:	
  3294                           ; 1 bytes @ 0x6
  3295                           
  3296  0026                     setBuz@time:	
  3297                           ; 1 bytes @ 0x6
  3298                           
  3299                           
  3300                           ; 2 bytes @ 0x6
  3301  0026                     	ds	1
  3302  0027                     ??_Flash_Memory_Main:	
  3303  0027                     CC2500_InitSetREG@temp2:	
  3304                           ; 0 bytes @ 0x7
  3305                           
  3306  0027                     CC2500_InitPATable@loop_d:	
  3307                           ; 1 bytes @ 0x7
  3308                           
  3309  0027                     setDelayOff_GO@sw:	
  3310                           ; 1 bytes @ 0x7
  3311                           
  3312  0027                     ___lwdiv@counter:	
  3313                           ; 1 bytes @ 0x7
  3314                           
  3315                           
  3316                           ; 1 bytes @ 0x7
  3317  0027                     	ds	1
  3318  0028                     ??_setBuz:	
  3319  0028                     ?___awtoft:	
  3320                           ; 0 bytes @ 0x8
  3321                           
  3322  0028                     CC2500_InitSetREG@loop_c:	
  3323                           ; 3 bytes @ 0x8
  3324                           
  3325  0028                     ___awtoft@c:	
  3326                           ; 1 bytes @ 0x8
  3327                           
  3328                           
  3329                           ; 2 bytes @ 0x8
  3330  0028                     	ds	1
  3331  0029                     ??_CC2500_PowerOnInitial:	
  3332  0029                     setBuz@count:	
  3333                           ; 0 bytes @ 0x9
  3334                           
  3335  0029                     getLoad_AD@channel:	
  3336                           ; 1 bytes @ 0x9
  3337                           
  3338                           
  3339                           ; 1 bytes @ 0x9
  3340  0029                     	ds	1
  3341  002A                     ??_MainT:	
  3342  002A                     ??_setLog_Code:	
  3343                           ; 0 bytes @ 0xA
  3344                           
  3345  002A                     ??_DimmerLights_Exceptions:	
  3346                           ; 0 bytes @ 0xA
  3347                           
  3348  002A                     DimmerLights_Exceptions@status:	
  3349                           ; 0 bytes @ 0xA
  3350                           
  3351  002A                     getLoad_AD@j:	
  3352                           ; 1 bytes @ 0xA
  3353                           
  3354                           
  3355                           ; 1 bytes @ 0xA
  3356  002A                     	ds	1
  3357  002B                     ??_setLoad_Exceptions:	
  3358  002B                     ??___awtoft:	
  3359                           ; 0 bytes @ 0xB
  3360                           
  3361  002B                     getLoad_AD@i:	
  3362                           ; 0 bytes @ 0xB
  3363                           
  3364  002B                     setLog_Code@rf:	
  3365                           ; 1 bytes @ 0xB
  3366                           
  3367                           
  3368                           ; 1 bytes @ 0xB
  3369  002B                     	ds	1
  3370  002C                     setLoad_Exceptions@command:	
  3371                           
  3372                           ; 1 bytes @ 0xC
  3373  002C                     	ds	1
  3374  002D                     ??_Load_Main:	
  3375  002D                     ___awtoft@sign:	
  3376                           ; 0 bytes @ 0xD
  3377                           
  3378                           
  3379                           ; 1 bytes @ 0xD
  3380  002D                     	ds	1
  3381  002E                     ?___ftdiv:	
  3382  002E                     ?___ftmul:	
  3383                           ; 3 bytes @ 0xE
  3384                           
  3385  002E                     ___ftdiv@f2:	
  3386                           ; 3 bytes @ 0xE
  3387                           
  3388  002E                     ___ftmul@f1:	
  3389                           ; 3 bytes @ 0xE
  3390                           
  3391                           
  3392                           ; 3 bytes @ 0xE
  3393  002E                     	ds	3
  3394  0031                     Load_Main@i:	
  3395  0031                     ___ftdiv@f1:	
  3396                           ; 1 bytes @ 0x11
  3397                           
  3398  0031                     ___ftmul@f2:	
  3399                           ; 3 bytes @ 0x11
  3400                           
  3401                           
  3402                           ; 3 bytes @ 0x11
  3403  0031                     	ds	3
  3404  0034                     ??___ftdiv:	
  3405  0034                     ??___ftmul:	
  3406                           ; 0 bytes @ 0x14
  3407                           
  3408                           
  3409                           ; 0 bytes @ 0x14
  3410  0034                     	ds	4
  3411  0038                     ___ftdiv@cntr:	
  3412  0038                     ___ftmul@exp:	
  3413                           ; 1 bytes @ 0x18
  3414                           
  3415                           
  3416                           ; 1 bytes @ 0x18
  3417  0038                     	ds	1
  3418  0039                     ___ftdiv@f3:	
  3419  0039                     ___ftmul@f3_as_product:	
  3420                           ; 3 bytes @ 0x19
  3421                           
  3422                           
  3423                           ; 3 bytes @ 0x19
  3424  0039                     	ds	3
  3425  003C                     ___ftdiv@exp:	
  3426  003C                     ___ftmul@cntr:	
  3427                           ; 1 bytes @ 0x1C
  3428                           
  3429                           
  3430                           ; 1 bytes @ 0x1C
  3431  003C                     	ds	1
  3432  003D                     ___ftdiv@sign:	
  3433  003D                     ___ftmul@sign:	
  3434                           ; 1 bytes @ 0x1D
  3435                           
  3436                           
  3437                           ; 1 bytes @ 0x1D
  3438  003D                     	ds	1
  3439  003E                     ?___ftadd:	
  3440  003E                     ___ftadd@f1:	
  3441                           ; 3 bytes @ 0x1E
  3442                           
  3443                           
  3444                           ; 3 bytes @ 0x1E
  3445  003E                     	ds	3
  3446  0041                     ___ftadd@f2:	
  3447                           
  3448                           ; 3 bytes @ 0x21
  3449  0041                     	ds	3
  3450  0044                     ??___ftadd:	
  3451                           
  3452                           ; 0 bytes @ 0x24
  3453  0044                     	ds	4
  3454  0048                     ___ftadd@sign:	
  3455                           
  3456                           ; 1 bytes @ 0x28
  3457  0048                     	ds	1
  3458  0049                     ___ftadd@exp2:	
  3459                           
  3460                           ; 1 bytes @ 0x29
  3461  0049                     	ds	1
  3462  004A                     ___ftadd@exp1:	
  3463                           
  3464                           ; 1 bytes @ 0x2A
  3465  004A                     	ds	1
  3466  004B                     ?___fttol:	
  3467  004B                     ___fttol@f1:	
  3468                           ; 4 bytes @ 0x2B
  3469                           
  3470                           
  3471                           ; 3 bytes @ 0x2B
  3472  004B                     	ds	4
  3473  004F                     ??___fttol:	
  3474                           
  3475                           ; 0 bytes @ 0x2F
  3476  004F                     	ds	4
  3477  0053                     ___fttol@sign1:	
  3478                           
  3479                           ; 1 bytes @ 0x33
  3480  0053                     	ds	1
  3481  0054                     ___fttol@lval:	
  3482                           
  3483                           ; 4 bytes @ 0x34
  3484  0054                     	ds	4
  3485  0058                     ___fttol@exp1:	
  3486                           
  3487                           ; 1 bytes @ 0x38
  3488  0058                     	ds	1
  3489  0059                     ??_getPercentValue:	
  3490  0059                     ??_setPercentValue:	
  3491                           ; 0 bytes @ 0x39
  3492                           
  3493  0059                     setPercentValue@value:	
  3494                           ; 0 bytes @ 0x39
  3495                           
  3496                           
  3497                           ; 1 bytes @ 0x39
  3498  0059                     	ds	1
  3499  005A                     setPercentValue@i:	
  3500                           
  3501                           ; 3 bytes @ 0x3A
  3502  005A                     	ds	1
  3503  005B                     getPercentValue@value:	
  3504                           
  3505                           ; 1 bytes @ 0x3B
  3506  005B                     	ds	1
  3507  005C                     getPercentValue@i:	
  3508                           
  3509                           ; 3 bytes @ 0x3C
  3510  005C                     	ds	1
  3511  005D                     ?_setRF_DimmerLights:	
  3512  005D                     ??_Flash_Memory_Initialization:	
  3513                           ; 0 bytes @ 0x3D
  3514                           
  3515  005D                     setRF_DimmerLights@on:	
  3516                           ; 0 bytes @ 0x3D
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0x3D
  3520  005D                     	ds	1
  3521  005E                     ??_setRF_DimmerLights:	
  3522  005E                     Flash_Memory_Initialization@i:	
  3523                           ; 0 bytes @ 0x3E
  3524                           
  3525                           
  3526                           ; 1 bytes @ 0x3E
  3527  005E                     	ds	1
  3528  005F                     ??_setDimmerLights_AdjRF:	
  3529                           
  3530                           ; 0 bytes @ 0x3F
  3531  005F                     	ds	1
  3532  0060                     setDimmerLights_AdjRF@lights:	
  3533  0060                     setRF_DimmerLights@status:	
  3534                           ; 1 bytes @ 0x40
  3535                           
  3536                           
  3537                           ; 1 bytes @ 0x40
  3538  0060                     	ds	1
  3539  0061                     ??_setRF_DimmerValue:	
  3540  0061                     setRF_DimmerLights@lights:	
  3541                           ; 0 bytes @ 0x41
  3542                           
  3543                           
  3544                           ; 1 bytes @ 0x41
  3545  0061                     	ds	1
  3546  0062                     ??_DlyOff_Main:	
  3547  0062                     ?_setDimmerLights_Adj:	
  3548                           ; 0 bytes @ 0x42
  3549                           
  3550  0062                     ??_setRFSW_Control:	
  3551                           ; 0 bytes @ 0x42
  3552                           
  3553  0062                     ??_Sw_DimmerOnFunc:	
  3554                           ; 0 bytes @ 0x42
  3555                           
  3556  0062                     ??_Sw_DimmerOffFunc:	
  3557                           ; 0 bytes @ 0x42
  3558                           
  3559  0062                     setDimmerLights_Adj@status:	
  3560                           ; 0 bytes @ 0x42
  3561                           
  3562  0062                     Sw_DimmerOnFunc@Idle:	
  3563                           ; 1 bytes @ 0x42
  3564                           
  3565                           
  3566                           ; 1 bytes @ 0x42
  3567  0062                     	ds	1
  3568  0063                     ??_setDimmerLights_Adj:	
  3569  0063                     setRFSW_Control@sw:	
  3570                           ; 0 bytes @ 0x43
  3571                           
  3572  0063                     setRF_DimmerValue@lights:	
  3573                           ; 1 bytes @ 0x43
  3574                           
  3575  0063                     Sw_DimmerOnFunc@sw:	
  3576                           ; 1 bytes @ 0x43
  3577                           
  3578                           
  3579                           ; 1 bytes @ 0x43
  3580  0063                     	ds	1
  3581  0064                     ??_setRFSW_AdjControl:	
  3582  0064                     DlyOff_Main@sw:	
  3583                           ; 0 bytes @ 0x44
  3584                           
  3585  0064                     setDimmerLights_Adj@lights:	
  3586                           ; 1 bytes @ 0x44
  3587                           
  3588  0064                     Sw_DimmerOffFunc@sw:	
  3589                           ; 1 bytes @ 0x44
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x44
  3593  0064                     	ds	1
  3594  0065                     ??_setDimmerLights_Main:	
  3595  0065                     ??_setSw_Main:	
  3596                           ; 0 bytes @ 0x45
  3597                           
  3598  0065                     ??_DelayOff_Main:	
  3599                           ; 0 bytes @ 0x45
  3600                           
  3601  0065                     setDimmerLights_Main@clear:	
  3602                           ; 0 bytes @ 0x45
  3603                           
  3604                           
  3605                           ; 1 bytes @ 0x45
  3606  0065                     	ds	1
  3607  0066                     setDimmerLights_Main@lights:	
  3608  0066                     setRFSW_AdjControl@sw:	
  3609                           ; 1 bytes @ 0x46
  3610                           
  3611                           
  3612                           ; 1 bytes @ 0x46
  3613  0066                     	ds	1
  3614  0067                     ??_setControl_Lights_Table:	
  3615  0067                     ??_DimmerLights_Main:	
  3616                           ; 0 bytes @ 0x47
  3617                           
  3618  0067                     setControl_Lights_Table@rf:	
  3619                           ; 0 bytes @ 0x47
  3620                           
  3621  0067                     _setSw_Main$4284:	
  3622                           ; 1 bytes @ 0x47
  3623                           
  3624                           
  3625                           ; 1 bytes @ 0x47
  3626  0067                     	ds	1
  3627  0068                     ??_getRxData:	
  3628  0068                     getRxData@rf:	
  3629                           ; 0 bytes @ 0x48
  3630                           
  3631  0068                     _setSw_Main$4285:	
  3632                           ; 1 bytes @ 0x48
  3633                           
  3634                           
  3635                           ; 1 bytes @ 0x48
  3636  0068                     	ds	1
  3637  0069                     ??_setRF_Main:	
  3638  0069                     setSw_Main@sw:	
  3639                           ; 0 bytes @ 0x49
  3640                           
  3641                           
  3642                           ; 1 bytes @ 0x49
  3643  0069                     	ds	1
  3644  006A                     ??_Switch_Main:	
  3645  006A                     setRF_Main@rf:	
  3646                           ; 0 bytes @ 0x4A
  3647                           
  3648                           
  3649                           ; 1 bytes @ 0x4A
  3650  006A                     	ds	1
  3651  006B                     _setRF_Main$3956:	
  3652                           
  3653                           ; 1 bytes @ 0x4B
  3654  006B                     	ds	1
  3655  006C                     ??_RF_Main:	
  3656  006C                     ??_main:	
  3657                           ; 0 bytes @ 0x4C
  3658                           
  3659                           
  3660                           	psect	maintext
  3661  114E                     __pmaintext:	
  3662                           ; 0 bytes @ 0x4C
  3663 ;;
  3664 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3665 ;;
  3666 ;; *************** function _main *****************
  3667 ;; Defined at:
  3668 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;		None               void
  3675 ;; Registers used:
  3676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : 17F/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3686 ;;Total ram usage:        0 bytes
  3687 ;; Hardware stack levels required when called:   14
  3688 ;; This function calls:
  3689 ;;		_Buzzer_Initialization
  3690 ;;		_Buzzer_Main
  3691 ;;		_CC2500_PowerOnInitial
  3692 ;;		_DelayOff_Initialization
  3693 ;;		_DelayOff_Main
  3694 ;;		_DimmerLights_Initialization
  3695 ;;		_DimmerLights_Main
  3696 ;;		_Flash_Memory_Initialization
  3697 ;;		_Flash_Memory_Main
  3698 ;;		_LED_Initialization
  3699 ;;		_LED_Main
  3700 ;;		_Load_Initialization
  3701 ;;		_Load_Main
  3702 ;;		_MainT
  3703 ;;		_MainT_Initialization
  3704 ;;		_Mcu_Initialization
  3705 ;;		_RF_Initialization
  3706 ;;		_RF_Main
  3707 ;;		_Switch_Initialization
  3708 ;;		_Switch_Main
  3709 ;;		_getLoad_AD
  3710 ;; This function is called by:
  3711 ;;		Startup code after reset
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           
  3716                           ;psect for function _main
  3717  114E                     _main:	
  3718                           
  3719                           ;main.c: 9: MainT_Initialization();
  3720                           
  3721                           ;incstack = 0
  3722                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3723  114E  3199  211A  3191   	fcall	_MainT_Initialization
  3724                           
  3725                           ;main.c: 10: Mcu_Initialization();
  3726  1151  3190  2001  3191   	fcall	_Mcu_Initialization
  3727                           
  3728                           ;main.c: 11: Flash_Memory_Initialization();
  3729  1154  318D  25BE  3191   	fcall	_Flash_Memory_Initialization
  3730                           
  3731                           ;main.c: 12: LED_Initialization();
  3732  1157  31A7  2798  3191   	fcall	_LED_Initialization
  3733                           
  3734                           ;main.c: 13: Buzzer_Initialization();
  3735  115A  31A7  2731  3191   	fcall	_Buzzer_Initialization
  3736                           
  3737                           ;main.c: 15: ;;
  3738                           ;main.c: 16: ;;
  3739                           ;main.c: 17: Load_Initialization();
  3740  115D  31A7  27B0  3191   	fcall	_Load_Initialization
  3741                           
  3742                           ;main.c: 18: ;;
  3743                           ;main.c: 19: DelayOff_Initialization();
  3744  1160  31A6  26FF  3191   	fcall	_DelayOff_Initialization
  3745                           
  3746                           ;main.c: 21: DimmerLights_Initialization();
  3747  1163  3199  2156  3191   	fcall	_DimmerLights_Initialization
  3748                           
  3749                           ;main.c: 22: ;;
  3750                           ;main.c: 23: ;;
  3751                           ;main.c: 24: ;;
  3752                           ;main.c: 26: Switch_Initialization();
  3753  1166  31A7  27D7  3191   	fcall	_Switch_Initialization
  3754                           
  3755                           ;main.c: 27: RF_Initialization();
  3756  1169  31A6  26CB  3191   	fcall	_RF_Initialization
  3757                           
  3758                           ;main.c: 28: CC2500_PowerOnInitial();
  3759  116C  3199  2141  3191   	fcall	_CC2500_PowerOnInitial
  3760  116F                     l9289:	
  3761                           ;main.c: 30: while(1)
  3762                           
  3763                           
  3764                           ;main.c: 31: {
  3765                           ;main.c: 32: if(TMain->PowerON)
  3766  116F  087D               	movf	_TMain,w
  3767  1170  0086               	movwf	6
  3768  1171  3001               	movlw	1	; select bank2/3
  3769  1172  0087               	movwf	7
  3770  1173  1C01               	btfss	1,0
  3771  1174  297C               	goto	l9293
  3772                           
  3773                           ;main.c: 33: {
  3774                           ;main.c: 35: ;;
  3775                           ;main.c: 39: getLoad_AD(0x05);
  3776  1175  3005               	movlw	5
  3777  1176  3189  21C1  3191   	fcall	_getLoad_AD
  3778                           
  3779                           ;main.c: 43: ;;
  3780                           ;main.c: 47: ;;
  3781                           ;main.c: 59: Buzzer_Main();
  3782  1179  318A  22F0  3191   	fcall	_Buzzer_Main
  3783  117C                     l9293:	
  3784                           
  3785                           ;main.c: 61: }
  3786                           ;main.c: 63: if(TMain->T0_Timerout)
  3787  117C  087D               	movf	_TMain,w
  3788  117D  0086               	movwf	6
  3789  117E  3001               	movlw	1	; select bank2/3
  3790  117F  0087               	movwf	7
  3791  1180  1C81               	btfss	1,1
  3792  1181  296F               	goto	l9289
  3793                           
  3794                           ;main.c: 64: {
  3795                           ;main.c: 65: TMain->T0_Timerout = 0;
  3796  1182  087D               	movf	_TMain,w
  3797  1183  0086               	movwf	6
  3798  1184  3001               	movlw	1	; select bank2/3
  3799  1185  0087               	movwf	7
  3800  1186  1081               	bcf	1,1
  3801                           
  3802                           ;main.c: 66: MainT();
  3803  1187  3195  2523  3191   	fcall	_MainT
  3804                           
  3805                           ;main.c: 67: if(TMain->PowerON)
  3806  118A  087D               	movf	_TMain,w
  3807  118B  0086               	movwf	6
  3808  118C  3001               	movlw	1	; select bank2/3
  3809  118D  0087               	movwf	7
  3810  118E  1C01               	btfss	1,0
  3811  118F  296F               	goto	l9289
  3812                           
  3813                           ;main.c: 68: {
  3814                           ;main.c: 69: Flash_Memory_Main();
  3815  1190  319E  26F2  3191   	fcall	_Flash_Memory_Main
  3816                           
  3817                           ;main.c: 71: LED_Main();
  3818  1193  31A7  27A4  3191   	fcall	_LED_Main
  3819                           
  3820                           ;main.c: 73: ;;
  3821                           ;main.c: 74: ;;
  3822                           ;main.c: 75: Load_Main();
  3823  1196  3180  204F  3191   	fcall	_Load_Main
  3824                           
  3825                           ;main.c: 76: ;;
  3826                           ;main.c: 78: ;;
  3827                           ;main.c: 79: DimmerLights_Main();
  3828  1199  31A7  275D  3191   	fcall	_DimmerLights_Main
  3829                           
  3830                           ;main.c: 80: Switch_Main();
  3831  119C  31A7  2717  3191   	fcall	_Switch_Main
  3832                           
  3833                           ;main.c: 81: ;;
  3834                           ;main.c: 82: ;;
  3835                           ;main.c: 84: RF_Main();
  3836  119F  31A6  26CF  3191   	fcall	_RF_Main
  3837                           
  3838                           ;main.c: 85: DelayOff_Main();
  3839  11A2  31A7  2707  3191   	fcall	_DelayOff_Main
  3840  11A5  296F               	goto	l9289
  3841  11A6                     __end_of_main:	
  3842                           
  3843                           	psect	text1
  3844  09C1                     __ptext1:	
  3845 ;; *************** function _getLoad_AD *****************
  3846 ;; Defined at:
  3847 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  channel         1    wreg     unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  channel         1    9[BANK0 ] unsigned char 
  3852 ;;  i               1   11[BANK0 ] unsigned char 
  3853 ;;  j               1   10[BANK0 ] unsigned char 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;		None               void
  3856 ;; Registers used:
  3857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3864 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3865 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3866 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3867 ;;Total ram usage:        8 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    5
  3870 ;; This function calls:
  3871 ;;		_getAD
  3872 ;; This function is called by:
  3873 ;;		_main
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           
  3878                           ;psect for function _getLoad_AD
  3879  09C1                     _getLoad_AD:	
  3880                           
  3881                           ;incstack = 0
  3882                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3883                           ;getLoad_AD@channel stored from wreg
  3884  09C1  0020               	movlb	0	; select bank0
  3885  09C2  00A9               	movwf	getLoad_AD@channel
  3886                           
  3887                           ;OverLoad_B1.c: 17: char i=0,j=0;
  3888  09C3  01AB               	clrf	getLoad_AD@i
  3889  09C4  01AA               	clrf	getLoad_AD@j
  3890                           
  3891                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  3892  09C5  086E               	movf	_Load,w
  3893  09C6  0086               	movwf	6
  3894  09C7  3002               	movlw	2	; select bank4/5
  3895  09C8  0087               	movwf	7
  3896  09C9  1E01               	btfss	1,4
  3897  09CA  0008               	return
  3898                           
  3899                           ;OverLoad_B1.c: 20: {
  3900                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  3901  09CB  30C0               	movlw	192
  3902  09CC  00A4               	movwf	??_getLoad_AD
  3903  09CD  0824               	movf	??_getLoad_AD,w
  3904  09CE  00A0               	movwf	getAD@adcon1
  3905  09CF  0829               	movf	getLoad_AD@channel,w
  3906  09D0  3188  2000  3189   	fcall	_getAD
  3907  09D3  0020               	movlb	0	; select bank0
  3908  09D4  086E               	movf	_Load,w
  3909  09D5  3E32               	addlw	50
  3910  09D6  0086               	movwf	6
  3911  09D7  3002               	movlw	2	; select bank4/5
  3912  09D8  0087               	movwf	7
  3913  09D9  0820               	movf	?_getAD,w
  3914  09DA  3FC0               	movwi [0]fsr1
  3915  09DB  0821               	movf	?_getAD+1,w
  3916  09DC  3FC1               	movwi [1]fsr1
  3917                           
  3918                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  3919  09DD  01AB               	clrf	getLoad_AD@i
  3920  09DE  3005               	movlw	5
  3921  09DF  022B               	subwf	getLoad_AD@i,w
  3922  09E0  1803               	btfsc	3,0
  3923  09E1  2A1B               	goto	l9047
  3924  09E2                     l9037:	
  3925                           
  3926                           ;OverLoad_B1.c: 23: {
  3927                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  3928  09E2  086E               	movf	_Load,w
  3929  09E3  3E32               	addlw	50
  3930  09E4  0086               	movwf	6
  3931  09E5  3002               	movlw	2	; select bank4/5
  3932  09E6  0087               	movwf	7
  3933  09E7  3F40               	moviw [0]fsr1
  3934  09E8  00A4               	movwf	??_getLoad_AD
  3935  09E9  3F41               	moviw [1]fsr1
  3936  09EA  00A5               	movwf	??_getLoad_AD+1
  3937  09EB  352B               	lslf	getLoad_AD@i,w
  3938  09EC  3E08               	addlw	8
  3939  09ED  076E               	addwf	_Load,w
  3940  09EE  00A6               	movwf	??_getLoad_AD+2
  3941  09EF  0826               	movf	??_getLoad_AD+2,w
  3942  09F0  0086               	movwf	6
  3943  09F1  3002               	movlw	2	; select bank4/5
  3944  09F2  0087               	movwf	7
  3945  09F3  3F40               	moviw [0]fsr1
  3946  09F4  00A7               	movwf	??_getLoad_AD+3
  3947  09F5  3F41               	moviw [1]fsr1
  3948  09F6  00A8               	movwf	??_getLoad_AD+4
  3949  09F7  0825               	movf	??_getLoad_AD+1,w
  3950  09F8  0228               	subwf	??_getLoad_AD+4,w
  3951  09F9  1D03               	skipz
  3952  09FA  29FD               	goto	u8825
  3953  09FB  0824               	movf	??_getLoad_AD,w
  3954  09FC  0227               	subwf	??_getLoad_AD+3,w
  3955  09FD                     u8825:	
  3956  09FD  1803               	skipnc
  3957  09FE  2A13               	goto	l9043
  3958                           
  3959                           ;OverLoad_B1.c: 25: {
  3960                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  3961  09FF  086E               	movf	_Load,w
  3962  0A00  3E32               	addlw	50
  3963  0A01  0086               	movwf	6
  3964  0A02  3002               	movlw	2	; select bank4/5
  3965  0A03  0087               	movwf	7
  3966  0A04  352B               	lslf	getLoad_AD@i,w
  3967  0A05  3E08               	addlw	8
  3968  0A06  076E               	addwf	_Load,w
  3969  0A07  00A4               	movwf	??_getLoad_AD
  3970  0A08  0824               	movf	??_getLoad_AD,w
  3971  0A09  0084               	movwf	4
  3972  0A0A  3002               	movlw	2	; select bank4/5
  3973  0A0B  0085               	movwf	5
  3974  0A0C  3F40               	moviw [0]fsr1
  3975  0A0D  3F80               	movwi [0]fsr0
  3976  0A0E  3F41               	moviw [1]fsr1
  3977  0A0F  3F81               	movwi [1]fsr0
  3978                           
  3979                           ;OverLoad_B1.c: 27: j=1;
  3980  0A10  01AA               	clrf	getLoad_AD@j
  3981  0A11  0AAA               	incf	getLoad_AD@j,f
  3982                           
  3983                           ;OverLoad_B1.c: 28: break;
  3984  0A12  2A1B               	goto	l9047
  3985  0A13                     l9043:	
  3986  0A13  3001               	movlw	1
  3987  0A14  00A4               	movwf	??_getLoad_AD
  3988  0A15  0824               	movf	??_getLoad_AD,w
  3989  0A16  07AB               	addwf	getLoad_AD@i,f
  3990  0A17  3005               	movlw	5
  3991  0A18  022B               	subwf	getLoad_AD@i,w
  3992  0A19  1C03               	skipc
  3993  0A1A  29E2               	goto	l9037
  3994  0A1B                     l9047:	
  3995                           
  3996                           ;OverLoad_B1.c: 29: }
  3997                           ;OverLoad_B1.c: 30: }
  3998                           ;OverLoad_B1.c: 31: if(!j)
  3999  0A1B  08AA               	movf	getLoad_AD@j,f
  4000  0A1C  1D03               	skipz
  4001  0A1D  0008               	return
  4002                           
  4003                           ;OverLoad_B1.c: 32: {
  4004                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4005  0A1E  01AB               	clrf	getLoad_AD@i
  4006  0A1F                     L1:	
  4007  0A1F  3005               	movlw	5
  4008  0A20  022B               	subwf	getLoad_AD@i,w
  4009  0A21  1803               	btfsc	3,0
  4010  0A22  0008               	return
  4011                           
  4012                           ;OverLoad_B1.c: 34: {
  4013                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4014  0A23  352B               	lslf	getLoad_AD@i,w
  4015  0A24  3E1A               	addlw	26
  4016  0A25  076E               	addwf	_Load,w
  4017  0A26  00A4               	movwf	??_getLoad_AD
  4018  0A27  0824               	movf	??_getLoad_AD,w
  4019  0A28  0086               	movwf	6
  4020  0A29  3002               	movlw	2	; select bank4/5
  4021  0A2A  0087               	movwf	7
  4022  0A2B  3F40               	moviw [0]fsr1
  4023  0A2C  00A5               	movwf	??_getLoad_AD+1
  4024  0A2D  3F41               	moviw [1]fsr1
  4025  0A2E  00A6               	movwf	??_getLoad_AD+2
  4026  0A2F  086E               	movf	_Load,w
  4027  0A30  3E32               	addlw	50
  4028  0A31  0086               	movwf	6
  4029  0A32  3002               	movlw	2	; select bank4/5
  4030  0A33  0087               	movwf	7
  4031  0A34  3F40               	moviw [0]fsr1
  4032  0A35  00A7               	movwf	??_getLoad_AD+3
  4033  0A36  3F41               	moviw [1]fsr1
  4034  0A37  00A8               	movwf	??_getLoad_AD+4
  4035  0A38  0826               	movf	??_getLoad_AD+2,w
  4036  0A39  0228               	subwf	??_getLoad_AD+4,w
  4037  0A3A  1D03               	skipz
  4038  0A3B  2A3E               	goto	u8865
  4039  0A3C  0825               	movf	??_getLoad_AD+1,w
  4040  0A3D  0227               	subwf	??_getLoad_AD+3,w
  4041  0A3E                     u8865:	
  4042  0A3E  1803               	skipnc
  4043  0A3F  2A52               	goto	l9059
  4044                           
  4045                           ;OverLoad_B1.c: 36: {
  4046                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4047  0A40  086E               	movf	_Load,w
  4048  0A41  3E32               	addlw	50
  4049  0A42  0086               	movwf	6
  4050  0A43  3002               	movlw	2	; select bank4/5
  4051  0A44  0087               	movwf	7
  4052  0A45  352B               	lslf	getLoad_AD@i,w
  4053  0A46  3E1A               	addlw	26
  4054  0A47  076E               	addwf	_Load,w
  4055  0A48  00A4               	movwf	??_getLoad_AD
  4056  0A49  0824               	movf	??_getLoad_AD,w
  4057  0A4A  0084               	movwf	4
  4058  0A4B  3002               	movlw	2	; select bank4/5
  4059  0A4C  0085               	movwf	5
  4060  0A4D  3F40               	moviw [0]fsr1
  4061  0A4E  3F80               	movwi [0]fsr0
  4062  0A4F  3F41               	moviw [1]fsr1
  4063  0A50  3F81               	movwi [1]fsr0
  4064                           
  4065                           ;OverLoad_B1.c: 38: break;
  4066  0A51  0008               	return
  4067  0A52                     l9059:	
  4068  0A52  3001               	movlw	1
  4069  0A53  00A4               	movwf	??_getLoad_AD
  4070  0A54  0824               	movf	??_getLoad_AD,w
  4071  0A55  07AB               	addwf	getLoad_AD@i,f
  4072  0A56  2A1F               	goto	L1
  4073  0A57                     __end_of_getLoad_AD:	
  4074                           
  4075                           	psect	text2
  4076  0800                     __ptext2:	
  4077 ;; *************** function _getAD *****************
  4078 ;; Defined at:
  4079 ;;		line 352 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  adcon0          1    wreg     unsigned char 
  4082 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2    0[BANK0 ] int 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4094 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;Total ram usage:        4 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    4
  4101 ;; This function calls:
  4102 ;;		Nothing
  4103 ;; This function is called by:
  4104 ;;		_getLoad_AD
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _getAD
  4110  0800                     _getAD:	
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4114                           ;getAD@adcon0 stored from wreg
  4115  0800  0020               	movlb	0	; select bank0
  4116  0801  00A3               	movwf	getAD@adcon0
  4117                           
  4118                           ;MCU_16f1518_B1.c: 354: ADCON0=adcon0;
  4119  0802  0823               	movf	getAD@adcon0,w
  4120  0803  0021               	movlb	1	; select bank1
  4121  0804  009D               	movwf	29	;volatile
  4122                           
  4123                           ;MCU_16f1518_B1.c: 355: ADCON1=adcon1;
  4124  0805  0020               	movlb	0	; select bank0
  4125  0806  0820               	movf	getAD@adcon1,w
  4126  0807  0021               	movlb	1	; select bank1
  4127  0808  009E               	movwf	30	;volatile
  4128                           
  4129                           ;MCU_16f1518_B1.c: 356: GO_nDONE=1;
  4130  0809  149D               	bsf	29,1	;volatile
  4131  080A                     l1632:	
  4132                           ;MCU_16f1518_B1.c: 357: while(GO_nDONE);
  4133                           
  4134  080A  189D               	btfsc	29,1	;volatile
  4135  080B  280A               	goto	l1632
  4136                           
  4137                           ;MCU_16f1518_B1.c: 358: return ((ADRESH*256)+ADRESL);
  4138  080C  081C               	movf	28,w	;volatile
  4139  080D  0020               	movlb	0	; select bank0
  4140  080E  01A1               	clrf	?_getAD+1
  4141  080F  07A1               	addwf	?_getAD+1,f
  4142  0810  0021               	movlb	1	; select bank1
  4143  0811  081B               	movf	27,w	;volatile
  4144  0812  0020               	movlb	0	; select bank0
  4145  0813  01A0               	clrf	?_getAD
  4146  0814  07A0               	addwf	?_getAD,f
  4147  0815  0008               	return
  4148  0816                     __end_of_getAD:	
  4149                           
  4150                           	psect	text3
  4151  2717                     __ptext3:	
  4152 ;; *************** function _Switch_Main *****************
  4153 ;; Defined at:
  4154 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        0 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:   10
  4175 ;; This function calls:
  4176 ;;		_setSw_Main
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _Switch_Main
  4184  2717                     _Switch_Main:	
  4185                           
  4186                           ;Switch_B1.c: 65: setSw_Main(1);
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4190  2717  3001               	movlw	1
  4191  2718  318E  26A6  31A7   	fcall	_setSw_Main
  4192                           
  4193                           ;Switch_B1.c: 69: setSw_Main(2);
  4194  271B  3002               	movlw	2
  4195  271C  318E  26A6         	fcall	_setSw_Main
  4196  271E  0008               	return
  4197  271F                     __end_of_Switch_Main:	
  4198                           
  4199                           	psect	text4
  4200  0EA6                     __ptext4:	
  4201 ;; *************** function _setSw_Main *****************
  4202 ;; Defined at:
  4203 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  sw              1    wreg     unsigned char 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  sw              1   73[BANK0 ] unsigned char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;Total ram usage:        5 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    9
  4224 ;; This function calls:
  4225 ;;		_SwPointSelect
  4226 ;;		_Sw_DimmerAdjFunc
  4227 ;;		_Sw_DimmerOffFunc
  4228 ;;		_Sw_DimmerOnFunc
  4229 ;;		_setBuz
  4230 ;;		_setRF_Learn
  4231 ;; This function is called by:
  4232 ;;		_Switch_Main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function _setSw_Main
  4238  0EA6                     _setSw_Main:	
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4242                           ;setSw_Main@sw stored from wreg
  4243  0EA6  0020               	movlb	0	; select bank0
  4244  0EA7  00E9               	movwf	setSw_Main@sw
  4245                           
  4246                           ;Switch_B1.c: 114: if(Sw->Enable)
  4247  0EA8  086D               	movf	_Sw,w
  4248  0EA9  0086               	movwf	6
  4249  0EAA  3001               	movlw	1	; select bank2/3
  4250  0EAB  0087               	movwf	7
  4251  0EAC  1C01               	btfss	1,0
  4252  0EAD  0008               	return
  4253                           
  4254                           ;Switch_B1.c: 115: {
  4255                           ;Switch_B1.c: 116: SwPointSelect(sw);
  4256  0EAE  0869               	movf	setSw_Main@sw,w
  4257  0EAF  3199  212D  318E   	fcall	_SwPointSelect
  4258                           
  4259                           ;Switch_B1.c: 133: if(sw == 1)
  4260  0EB2  0020               	movlb	0	; select bank0
  4261  0EB3  0869               	movf	setSw_Main@sw,w
  4262  0EB4  3A01               	xorlw	1
  4263  0EB5  1D03               	skipz
  4264  0EB6  2EC3               	goto	l8853
  4265                           
  4266                           ;Switch_B1.c: 134: {
  4267                           ;Switch_B1.c: 135: Sw->Touch=(RA6 || RA4)?1:0;
  4268  0EB7  01E7               	clrf	_setSw_Main$4284
  4269  0EB8  0AE7               	incf	_setSw_Main$4284,f
  4270  0EB9  1F0C               	btfss	12,6	;volatile
  4271  0EBA  1A0C               	btfsc	12,4	;volatile
  4272  0EBB  2EBD               	goto	l8851
  4273  0EBC  01E7               	clrf	_setSw_Main$4284
  4274  0EBD                     l8851:	
  4275  0EBD  086D               	movf	_Sw,w
  4276  0EBE  0086               	movwf	6
  4277  0EBF  3001               	movlw	1	; select bank2/3
  4278  0EC0  0087               	movwf	7
  4279  0EC1  0867               	movf	_setSw_Main$4284,w
  4280  0EC2  2ED2               	goto	L2
  4281  0EC3                     l8853:	
  4282                           ;Switch_B1.c: 136: }
  4283                           
  4284                           
  4285                           ;Switch_B1.c: 137: else if(sw == 2)
  4286  0EC3  0869               	movf	setSw_Main@sw,w
  4287  0EC4  3A02               	xorlw	2
  4288  0EC5  1D03               	skipz
  4289  0EC6  2ED5               	goto	l8863
  4290                           
  4291                           ;Switch_B1.c: 138: {
  4292                           ;Switch_B1.c: 139: Sw->Touch=(RA0 || RB1)?1:0;
  4293  0EC7  01E8               	clrf	_setSw_Main$4285
  4294  0EC8  0AE8               	incf	_setSw_Main$4285,f
  4295  0EC9  1C0C               	btfss	12,0	;volatile
  4296  0ECA  188D               	btfsc	13,1	;volatile
  4297  0ECB  2ECD               	goto	l8861
  4298  0ECC  01E8               	clrf	_setSw_Main$4285
  4299  0ECD                     l8861:	
  4300  0ECD  086D               	movf	_Sw,w
  4301  0ECE  0086               	movwf	6
  4302  0ECF  3001               	movlw	1	; select bank2/3
  4303  0ED0  0087               	movwf	7
  4304  0ED1  0868               	movf	_setSw_Main$4285,w
  4305  0ED2                     L2:	
  4306  0ED2  1081               	bcf	1,1
  4307  0ED3  1D03               	skipz
  4308  0ED4  1481               	bsf	1,1
  4309  0ED5                     l8863:	
  4310                           
  4311                           ;Switch_B1.c: 140: }
  4312                           ;Switch_B1.c: 148: if(Sw->Touch)
  4313  0ED5  086D               	movf	_Sw,w
  4314  0ED6  0086               	movwf	6
  4315  0ED7  3001               	movlw	1	; select bank2/3
  4316  0ED8  0087               	movwf	7
  4317  0ED9  1C81               	btfss	1,1
  4318  0EDA  2FAB               	goto	l8911
  4319                           
  4320                           ;Switch_B1.c: 149: {
  4321                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  4322  0EDB  086D               	movf	_Sw,w
  4323  0EDC  0086               	movwf	6
  4324  0EDD  3001               	movlw	1	; select bank2/3
  4325  0EDE  0087               	movwf	7
  4326  0EDF  1901               	btfsc	1,2
  4327  0EE0  2F02               	goto	l8877
  4328                           
  4329                           ;Switch_B1.c: 151: {
  4330                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  4331  0EE1  3001               	movlw	1
  4332  0EE2  00E5               	movwf	??_setSw_Main
  4333  0EE3  086D               	movf	_Sw,w
  4334  0EE4  3E02               	addlw	2
  4335  0EE5  0086               	movwf	6
  4336  0EE6  3001               	movlw	1	; select bank2/3
  4337  0EE7  0087               	movwf	7
  4338  0EE8  0865               	movf	??_setSw_Main,w
  4339  0EE9  0781               	addwf	1,f
  4340                           
  4341                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  4342  0EEA  086D               	movf	_Sw,w
  4343  0EEB  3E02               	addlw	2
  4344  0EEC  0086               	movwf	6
  4345  0EED  3001               	movlw	1	; select bank2/3
  4346  0EEE  0087               	movwf	7
  4347  0EEF  3005               	movlw	5
  4348  0EF0  0201               	subwf	1,w
  4349  0EF1  1C03               	skipc
  4350  0EF2  0008               	return
  4351                           
  4352                           ;Switch_B1.c: 154: {
  4353                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  4354  0EF3  086D               	movf	_Sw,w
  4355  0EF4  3E02               	addlw	2
  4356  0EF5  0086               	movwf	6
  4357  0EF6  3001               	movlw	1	; select bank2/3
  4358  0EF7  0087               	movwf	7
  4359  0EF8  0181               	clrf	1
  4360                           
  4361                           ;Switch_B1.c: 156: Sw->Debounce=1;
  4362  0EF9  086D               	movf	_Sw,w
  4363  0EFA  0086               	movwf	6
  4364  0EFB  3001               	movlw	1	; select bank2/3
  4365  0EFC  0087               	movwf	7
  4366  0EFD  1501               	bsf	1,2
  4367                           
  4368                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  4369  0EFE  0869               	movf	setSw_Main@sw,w
  4370  0EFF  3194  24B4         	fcall	_Sw_DimmerOnFunc
  4371                           
  4372                           ;Switch_B1.c: 162: }
  4373                           ;Switch_B1.c: 163: }
  4374  0F01  0008               	return
  4375  0F02                     l8877:	
  4376                           
  4377                           ;Switch_B1.c: 164: else
  4378                           ;Switch_B1.c: 165: {
  4379                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  4380  0F02  0020               	movlb	0	; select bank0
  4381  0F03  086D               	movf	_Sw,w
  4382  0F04  0086               	movwf	6
  4383  0F05  3001               	movlw	1	; select bank2/3
  4384  0F06  0087               	movwf	7
  4385  0F07  1981               	btfsc	1,3
  4386  0F08  2F34               	goto	l8887
  4387                           
  4388                           ;Switch_B1.c: 167: {
  4389                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  4390  0F09  086D               	movf	_Sw,w
  4391  0F0A  3E03               	addlw	3
  4392  0F0B  0086               	movwf	6
  4393  0F0C  3001               	movlw	1	; select bank2/3
  4394  0F0D  0087               	movwf	7
  4395  0F0E  3001               	movlw	1
  4396  0F0F  0781               	addwf	1,f
  4397  0F10  3141               	addfsr 1,1
  4398  0F11  1803               	skipnc
  4399  0F12  0A81               	incf	1,f
  4400                           
  4401                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  4402  0F13  086D               	movf	_Sw,w
  4403  0F14  3E03               	addlw	3
  4404  0F15  0086               	movwf	6
  4405  0F16  3001               	movlw	1	; select bank2/3
  4406  0F17  0087               	movwf	7
  4407  0F18  3F40               	moviw [0]fsr1
  4408  0F19  00E5               	movwf	??_setSw_Main
  4409  0F1A  3F41               	moviw [1]fsr1
  4410  0F1B  00E6               	movwf	??_setSw_Main+1
  4411  0F1C  3000               	movlw	0
  4412  0F1D  0266               	subwf	??_setSw_Main+1,w
  4413  0F1E  3096               	movlw	150
  4414  0F1F  1903               	skipnz
  4415  0F20  0265               	subwf	??_setSw_Main,w
  4416  0F21  1C03               	skipc
  4417  0F22  0008               	return
  4418                           
  4419                           ;Switch_B1.c: 170: {
  4420                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  4421  0F23  086D               	movf	_Sw,w
  4422  0F24  3E03               	addlw	3
  4423  0F25  0086               	movwf	6
  4424  0F26  3001               	movlw	1	; select bank2/3
  4425  0F27  0087               	movwf	7
  4426  0F28  3000               	movlw	0
  4427  0F29  3FC0               	movwi [0]fsr1
  4428  0F2A  3FC1               	movwi [1]fsr1
  4429                           
  4430                           ;Switch_B1.c: 172: Sw->Hold1=1;
  4431  0F2B  086D               	movf	_Sw,w
  4432  0F2C  0086               	movwf	6
  4433  0F2D  3001               	movlw	1	; select bank2/3
  4434  0F2E  0087               	movwf	7
  4435  0F2F  1581               	bsf	1,3
  4436                           
  4437                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  4438  0F30  0869               	movf	setSw_Main@sw,w
  4439  0F31  319B  23B7         	fcall	_Sw_DimmerAdjFunc
  4440                           
  4441                           ;Switch_B1.c: 178: }
  4442                           ;Switch_B1.c: 179: }
  4443  0F33  0008               	return
  4444  0F34                     l8887:	
  4445                           
  4446                           ;Switch_B1.c: 180: else
  4447                           ;Switch_B1.c: 181: {
  4448                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  4449  0F34  0020               	movlb	0	; select bank0
  4450  0F35  086D               	movf	_Sw,w
  4451  0F36  0086               	movwf	6
  4452  0F37  3001               	movlw	1	; select bank2/3
  4453  0F38  0087               	movwf	7
  4454  0F39  1A01               	btfsc	1,4
  4455  0F3A  2F78               	goto	l8901
  4456                           
  4457                           ;Switch_B1.c: 183: {
  4458                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  4459  0F3B  086D               	movf	_Sw,w
  4460  0F3C  3E05               	addlw	5
  4461  0F3D  0086               	movwf	6
  4462  0F3E  3001               	movlw	1	; select bank2/3
  4463  0F3F  0087               	movwf	7
  4464  0F40  3001               	movlw	1
  4465  0F41  0781               	addwf	1,f
  4466  0F42  3141               	addfsr 1,1
  4467  0F43  1803               	skipnc
  4468  0F44  0A81               	incf	1,f
  4469                           
  4470                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  4471  0F45  086D               	movf	_Sw,w
  4472  0F46  3E05               	addlw	5
  4473  0F47  0086               	movwf	6
  4474  0F48  3001               	movlw	1	; select bank2/3
  4475  0F49  0087               	movwf	7
  4476  0F4A  3F40               	moviw [0]fsr1
  4477  0F4B  00E5               	movwf	??_setSw_Main
  4478  0F4C  3F41               	moviw [1]fsr1
  4479  0F4D  00E6               	movwf	??_setSw_Main+1
  4480  0F4E  3000               	movlw	0
  4481  0F4F  0266               	subwf	??_setSw_Main+1,w
  4482  0F50  3096               	movlw	150
  4483  0F51  1903               	skipnz
  4484  0F52  0265               	subwf	??_setSw_Main,w
  4485  0F53  1C03               	skipc
  4486  0F54  0008               	return
  4487                           
  4488                           ;Switch_B1.c: 186: {
  4489                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  4490  0F55  086D               	movf	_Sw,w
  4491  0F56  3E05               	addlw	5
  4492  0F57  0086               	movwf	6
  4493  0F58  3001               	movlw	1	; select bank2/3
  4494  0F59  0087               	movwf	7
  4495  0F5A  3000               	movlw	0
  4496  0F5B  3FC0               	movwi [0]fsr1
  4497  0F5C  3FC1               	movwi [1]fsr1
  4498                           
  4499                           ;Switch_B1.c: 188: Sw->Hold2=1;
  4500  0F5D  086D               	movf	_Sw,w
  4501  0F5E  0086               	movwf	6
  4502  0F5F  3001               	movlw	1	; select bank2/3
  4503  0F60  0087               	movwf	7
  4504  0F61  1601               	bsf	1,4
  4505                           
  4506                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  4507  0F62  01A2               	clrf	setRF_Learn@command
  4508  0F63  0AA2               	incf	setRF_Learn@command,f
  4509  0F64  3001               	movlw	1
  4510  0F65  31A7  27F2  318E   	fcall	_setRF_Learn
  4511                           
  4512                           ;Switch_B1.c: 194: if(TMain->First)
  4513  0F68  087D               	movf	_TMain,w
  4514  0F69  3E03               	addlw	3
  4515  0F6A  0086               	movwf	6
  4516  0F6B  3001               	movlw	1	; select bank2/3
  4517  0F6C  0087               	movwf	7
  4518  0F6D  1C81               	btfss	1,1
  4519  0F6E  0008               	return
  4520                           
  4521                           ;Switch_B1.c: 195: {
  4522                           ;Switch_B1.c: 196: setBuz(2,100);
  4523  0F6F  3064               	movlw	100
  4524  0F70  0020               	movlb	0	; select bank0
  4525  0F71  00A6               	movwf	setBuz@time
  4526  0F72  3000               	movlw	0
  4527  0F73  00A7               	movwf	setBuz@time+1
  4528  0F74  3002               	movlw	2
  4529  0F75  3196  2604         	fcall	_setBuz
  4530                           
  4531                           ;Switch_B1.c: 197: }
  4532                           ;Switch_B1.c: 199: }
  4533                           ;Switch_B1.c: 200: }
  4534  0F77  0008               	return
  4535  0F78                     l8901:	
  4536                           
  4537                           ;Switch_B1.c: 201: else
  4538                           ;Switch_B1.c: 202: {
  4539                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  4540  0F78  0020               	movlb	0	; select bank0
  4541  0F79  086D               	movf	_Sw,w
  4542  0F7A  0086               	movwf	6
  4543  0F7B  3001               	movlw	1	; select bank2/3
  4544  0F7C  0087               	movwf	7
  4545  0F7D  1A81               	btfsc	1,5
  4546  0F7E  0008               	return
  4547                           
  4548                           ;Switch_B1.c: 204: {
  4549                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  4550  0F7F  086D               	movf	_Sw,w
  4551  0F80  3E07               	addlw	7
  4552  0F81  0086               	movwf	6
  4553  0F82  3001               	movlw	1	; select bank2/3
  4554  0F83  0087               	movwf	7
  4555  0F84  3001               	movlw	1
  4556  0F85  0781               	addwf	1,f
  4557  0F86  3141               	addfsr 1,1
  4558  0F87  1803               	skipnc
  4559  0F88  0A81               	incf	1,f
  4560                           
  4561                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  4562  0F89  086D               	movf	_Sw,w
  4563  0F8A  3E07               	addlw	7
  4564  0F8B  0086               	movwf	6
  4565  0F8C  3001               	movlw	1	; select bank2/3
  4566  0F8D  0087               	movwf	7
  4567  0F8E  3F40               	moviw [0]fsr1
  4568  0F8F  00E5               	movwf	??_setSw_Main
  4569  0F90  3F41               	moviw [1]fsr1
  4570  0F91  00E6               	movwf	??_setSw_Main+1
  4571  0F92  3001               	movlw	1
  4572  0F93  0266               	subwf	??_setSw_Main+1,w
  4573  0F94  302C               	movlw	44
  4574  0F95  1903               	skipnz
  4575  0F96  0265               	subwf	??_setSw_Main,w
  4576  0F97  1C03               	skipc
  4577  0F98  0008               	return
  4578                           
  4579                           ;Switch_B1.c: 207: {
  4580                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  4581  0F99  086D               	movf	_Sw,w
  4582  0F9A  3E07               	addlw	7
  4583  0F9B  0086               	movwf	6
  4584  0F9C  3001               	movlw	1	; select bank2/3
  4585  0F9D  0087               	movwf	7
  4586  0F9E  3000               	movlw	0
  4587  0F9F  3FC0               	movwi [0]fsr1
  4588  0FA0  3FC1               	movwi [1]fsr1
  4589                           
  4590                           ;Switch_B1.c: 209: Sw->Hold3=1;
  4591  0FA1  086D               	movf	_Sw,w
  4592  0FA2  0086               	movwf	6
  4593  0FA3  3001               	movlw	1	; select bank2/3
  4594  0FA4  0087               	movwf	7
  4595  0FA5  1681               	bsf	1,5
  4596                           
  4597                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  4598  0FA6  01A2               	clrf	setRF_Learn@command
  4599  0FA7  3001               	movlw	1
  4600  0FA8  31A7  27F2         	fcall	_setRF_Learn
  4601                           
  4602                           ;Switch_B1.c: 215: }
  4603                           ;Switch_B1.c: 216: }
  4604                           ;Switch_B1.c: 217: }
  4605                           ;Switch_B1.c: 218: }
  4606                           ;Switch_B1.c: 219: }
  4607                           ;Switch_B1.c: 220: }
  4608  0FAA  0008               	return
  4609  0FAB                     l8911:	
  4610                           
  4611                           ;Switch_B1.c: 221: else
  4612                           ;Switch_B1.c: 222: {
  4613                           ;Switch_B1.c: 223: if(Sw->Debounce)
  4614  0FAB  0020               	movlb	0	; select bank0
  4615  0FAC  086D               	movf	_Sw,w
  4616  0FAD  0086               	movwf	6
  4617  0FAE  3001               	movlw	1	; select bank2/3
  4618  0FAF  0087               	movwf	7
  4619  0FB0  1D01               	btfss	1,2
  4620  0FB1  0008               	return
  4621                           
  4622                           ;Switch_B1.c: 224: {
  4623                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  4624  0FB2  3001               	movlw	1
  4625  0FB3  00E5               	movwf	??_setSw_Main
  4626  0FB4  086D               	movf	_Sw,w
  4627  0FB5  3E02               	addlw	2
  4628  0FB6  0086               	movwf	6
  4629  0FB7  3001               	movlw	1	; select bank2/3
  4630  0FB8  0087               	movwf	7
  4631  0FB9  0865               	movf	??_setSw_Main,w
  4632  0FBA  0781               	addwf	1,f
  4633                           
  4634                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  4635  0FBB  086D               	movf	_Sw,w
  4636  0FBC  3E02               	addlw	2
  4637  0FBD  0086               	movwf	6
  4638  0FBE  3001               	movlw	1	; select bank2/3
  4639  0FBF  0087               	movwf	7
  4640  0FC0  3005               	movlw	5
  4641  0FC1  0201               	subwf	1,w
  4642  0FC2  1C03               	skipc
  4643  0FC3  0008               	return
  4644                           
  4645                           ;Switch_B1.c: 227: {
  4646                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  4647  0FC4  086D               	movf	_Sw,w
  4648  0FC5  3E02               	addlw	2
  4649  0FC6  0086               	movwf	6
  4650  0FC7  3001               	movlw	1	; select bank2/3
  4651  0FC8  0087               	movwf	7
  4652  0FC9  0181               	clrf	1
  4653                           
  4654                           ;Switch_B1.c: 229: Sw->Debounce=0;
  4655  0FCA  086D               	movf	_Sw,w
  4656  0FCB  0086               	movwf	6
  4657  0FCC  3001               	movlw	1	; select bank2/3
  4658  0FCD  0087               	movwf	7
  4659  0FCE  1101               	bcf	1,2
  4660                           
  4661                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  4662  0FCF  086D               	movf	_Sw,w
  4663  0FD0  3E03               	addlw	3
  4664  0FD1  0086               	movwf	6
  4665  0FD2  3001               	movlw	1	; select bank2/3
  4666  0FD3  0087               	movwf	7
  4667  0FD4  3000               	movlw	0
  4668  0FD5  3FC0               	movwi [0]fsr1
  4669  0FD6  3FC1               	movwi [1]fsr1
  4670                           
  4671                           ;Switch_B1.c: 231: Sw->Hold1=0;
  4672  0FD7  086D               	movf	_Sw,w
  4673  0FD8  0086               	movwf	6
  4674  0FD9  3001               	movlw	1	; select bank2/3
  4675  0FDA  0087               	movwf	7
  4676  0FDB  1181               	bcf	1,3
  4677                           
  4678                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  4679  0FDC  086D               	movf	_Sw,w
  4680  0FDD  3E05               	addlw	5
  4681  0FDE  0086               	movwf	6
  4682  0FDF  3001               	movlw	1	; select bank2/3
  4683  0FE0  0087               	movwf	7
  4684  0FE1  3000               	movlw	0
  4685  0FE2  3FC0               	movwi [0]fsr1
  4686  0FE3  3FC1               	movwi [1]fsr1
  4687                           
  4688                           ;Switch_B1.c: 233: Sw->Hold2=0;
  4689  0FE4  086D               	movf	_Sw,w
  4690  0FE5  0086               	movwf	6
  4691  0FE6  3001               	movlw	1	; select bank2/3
  4692  0FE7  0087               	movwf	7
  4693  0FE8  1201               	bcf	1,4
  4694                           
  4695                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  4696  0FE9  086D               	movf	_Sw,w
  4697  0FEA  3E07               	addlw	7
  4698  0FEB  0086               	movwf	6
  4699  0FEC  3001               	movlw	1	; select bank2/3
  4700  0FED  0087               	movwf	7
  4701  0FEE  3000               	movlw	0
  4702  0FEF  3FC0               	movwi [0]fsr1
  4703  0FF0  3FC1               	movwi [1]fsr1
  4704                           
  4705                           ;Switch_B1.c: 235: Sw->Hold3=0;
  4706  0FF1  086D               	movf	_Sw,w
  4707  0FF2  0086               	movwf	6
  4708  0FF3  3001               	movlw	1	; select bank2/3
  4709  0FF4  0087               	movwf	7
  4710  0FF5  1281               	bcf	1,5
  4711                           
  4712                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  4713  0FF6  0869               	movf	setSw_Main@sw,w
  4714  0FF7  3195  2593  318E   	fcall	_Sw_DimmerOffFunc
  4715                           
  4716                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  4717  0FFA  0020               	movlb	0	; select bank0
  4718  0FFB  01A2               	clrf	setRF_Learn@command
  4719  0FFC  3001               	movlw	1
  4720  0FFD  31A7  27F2         	fcall	_setRF_Learn
  4721  0FFF  0008               	return
  4722  1000                     __end_of_setSw_Main:	
  4723                           
  4724                           	psect	text5
  4725  27F2                     __ptext5:	
  4726 ;; *************** function _setRF_Learn *****************
  4727 ;; Defined at:
  4728 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  rf              1    wreg     unsigned char 
  4731 ;;  command         1    2[BANK0 ] unsigned char 
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;  rf              1    3[BANK0 ] unsigned char 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;		None               void
  4736 ;; Registers used:
  4737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4743 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;Total ram usage:        2 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:    5
  4750 ;; This function calls:
  4751 ;;		_RfPointSelect
  4752 ;; This function is called by:
  4753 ;;		_setSw_Main
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _setRF_Learn
  4759  27F2                     _setRF_Learn:	
  4760                           
  4761                           ;incstack = 0
  4762                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4763                           ;setRF_Learn@rf stored from wreg
  4764  27F2  0020               	movlb	0	; select bank0
  4765  27F3  00A3               	movwf	setRF_Learn@rf
  4766                           
  4767                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  4768  27F4  0823               	movf	setRF_Learn@rf,w
  4769  27F5  31A7  2747         	fcall	_RfPointSelect
  4770                           
  4771                           ;RF_Control_B1.c: 34: RF->Learn=command;
  4772  27F7  087B               	movf	_RF,w
  4773  27F8  0086               	movwf	6
  4774  27F9  0187               	clrf	7
  4775  27FA  0020               	movlb	0	; select bank0
  4776  27FB  0822               	movf	setRF_Learn@command,w
  4777  27FC  1301               	bcf	1,6
  4778  27FD  1D03               	skipz
  4779  27FE  1701               	bsf	1,6
  4780  27FF  0008               	return
  4781  2800                     __end_of_setRF_Learn:	
  4782                           
  4783                           	psect	text6
  4784  14B4                     __ptext6:	
  4785 ;; *************** function _Sw_DimmerOnFunc *****************
  4786 ;; Defined at:
  4787 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  4788 ;; Parameters:    Size  Location     Type
  4789 ;;  sw              1    wreg     unsigned char 
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;  sw              1   67[BANK0 ] unsigned char 
  4792 ;;  Idle            1   66[BANK0 ] unsigned char 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;		None               void
  4795 ;; Registers used:
  4796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4806 ;;Total ram usage:        2 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    8
  4809 ;; This function calls:
  4810 ;;		_setBuz
  4811 ;;		_setDimmerLights_Switch
  4812 ;;		_setDimmerLights_Trigger
  4813 ;;		_setRFSW_Status
  4814 ;;		_setRF_DimmerLights
  4815 ;;		_setTxData
  4816 ;; This function is called by:
  4817 ;;		_setSw_Main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _Sw_DimmerOnFunc
  4823  14B4                     _Sw_DimmerOnFunc:	
  4824                           
  4825                           ;incstack = 0
  4826                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4827                           ;Sw_DimmerOnFunc@sw stored from wreg
  4828  14B4  0020               	movlb	0	; select bank0
  4829  14B5  00E3               	movwf	Sw_DimmerOnFunc@sw
  4830                           
  4831                           ;Switch_B1.c: 253: char Idle=1;
  4832  14B6  01E2               	clrf	Sw_DimmerOnFunc@Idle
  4833  14B7  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  4834                           
  4835                           ;Switch_B1.c: 270: if(sw == 1)
  4836  14B8  0863               	movf	Sw_DimmerOnFunc@sw,w
  4837  14B9  3A01               	xorlw	1
  4838  14BA  1D03               	skipz
  4839  14BB  2CBE               	goto	l8513
  4840                           
  4841                           ;Switch_B1.c: 271: {
  4842                           ;Switch_B1.c: 272: Idle=(DimmerLights22->AdjGo)?0:1;
  4843  14BC  087A               	movf	_DimmerLights22,w
  4844  14BD  2CC3               	goto	L3
  4845  14BE                     l8513:	
  4846                           ;Switch_B1.c: 273: }
  4847                           
  4848                           
  4849                           ;Switch_B1.c: 274: else if(sw == 2)
  4850  14BE  0863               	movf	Sw_DimmerOnFunc@sw,w
  4851  14BF  3A02               	xorlw	2
  4852  14C0  1D03               	skipz
  4853  14C1  2CCE               	goto	l8517
  4854                           
  4855                           ;Switch_B1.c: 275: {
  4856                           ;Switch_B1.c: 276: Idle=(DimmerLights11->AdjGo)?0:1;
  4857  14C2  0879               	movf	_DimmerLights11,w
  4858  14C3                     L3:	
  4859  14C3  3E09               	addlw	9
  4860  14C4  0086               	movwf	6
  4861  14C5  3001               	movlw	1	; select bank2/3
  4862  14C6  0087               	movwf	7
  4863  14C7  1003               	clrc
  4864  14C8  1D01               	btfss	1,2
  4865  14C9  1403               	setc
  4866  14CA  3000               	movlw	0
  4867  14CB  1803               	btfsc	3,0
  4868  14CC  3001               	movlw	1
  4869  14CD  00E2               	movwf	Sw_DimmerOnFunc@Idle
  4870  14CE                     l8517:	
  4871                           
  4872                           ;Switch_B1.c: 277: }
  4873                           ;Switch_B1.c: 280: if(Idle)
  4874  14CE  0862               	movf	Sw_DimmerOnFunc@Idle,w
  4875  14CF  1903               	btfsc	3,2
  4876  14D0  0008               	return
  4877                           
  4878                           ;Switch_B1.c: 281: {
  4879                           ;Switch_B1.c: 282: Sw->Flag=1;
  4880  14D1  086D               	movf	_Sw,w
  4881  14D2  0086               	movwf	6
  4882  14D3  3001               	movlw	1	; select bank2/3
  4883  14D4  0087               	movwf	7
  4884  14D5  1781               	bsf	1,7
  4885                           
  4886                           ;Switch_B1.c: 283: setBuz(1,100);
  4887  14D6  3064               	movlw	100
  4888  14D7  00A6               	movwf	setBuz@time
  4889  14D8  3000               	movlw	0
  4890  14D9  00A7               	movwf	setBuz@time+1
  4891  14DA  3001               	movlw	1
  4892  14DB  3196  2604  3194   	fcall	_setBuz
  4893                           
  4894                           ;Switch_B1.c: 284: if(!Sw->Status)
  4895  14DE  0020               	movlb	0	; select bank0
  4896  14DF  086D               	movf	_Sw,w
  4897  14E0  0086               	movwf	6
  4898  14E1  3001               	movlw	1	; select bank2/3
  4899  14E2  0087               	movwf	7
  4900  14E3  1B01               	btfsc	1,6
  4901  14E4  2D10               	goto	l8537
  4902                           
  4903                           ;Switch_B1.c: 285: {
  4904                           ;Switch_B1.c: 286: Sw->Status=1;
  4905  14E5  086D               	movf	_Sw,w
  4906  14E6  0086               	movwf	6
  4907  14E7  3001               	movlw	1	; select bank2/3
  4908  14E8  0087               	movwf	7
  4909  14E9  1701               	bsf	1,6
  4910                           
  4911                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  4912  14EA  01A2               	clrf	setRFSW_Status@command
  4913  14EB  0AA2               	incf	setRFSW_Status@command,f
  4914  14EC  0863               	movf	Sw_DimmerOnFunc@sw,w
  4915  14ED  3198  2068  3194   	fcall	_setRFSW_Status
  4916                           
  4917                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  4918  14F0  0020               	movlb	0	; select bank0
  4919  14F1  01A2               	clrf	setDimmerLights_Trigger@command
  4920  14F2  0AA2               	incf	setDimmerLights_Trigger@command,f
  4921  14F3  0863               	movf	Sw_DimmerOnFunc@sw,w
  4922  14F4  3198  20A6  3194   	fcall	_setDimmerLights_Trigger
  4923                           
  4924                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  4925  14F7  0020               	movlb	0	; select bank0
  4926  14F8  01A2               	clrf	setDimmerLights_Switch@command
  4927  14F9  0AA2               	incf	setDimmerLights_Switch@command,f
  4928  14FA  0863               	movf	Sw_DimmerOnFunc@sw,w
  4929  14FB  3198  2096  3194   	fcall	_setDimmerLights_Switch
  4930                           
  4931                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  4932  14FE  0020               	movlb	0	; select bank0
  4933  14FF  086D               	movf	_Sw,w
  4934  1500  0086               	movwf	6
  4935  1501  3001               	movlw	1	; select bank2/3
  4936  1502  0087               	movwf	7
  4937  1503  3000               	movlw	0
  4938  1504  1B01               	btfsc	1,6
  4939  1505  3001               	movlw	1
  4940  1506  00DD               	movwf	setRF_DimmerLights@on
  4941  1507  0863               	movf	Sw_DimmerOnFunc@sw,w
  4942  1508  3194  2449  3194   	fcall	_setRF_DimmerLights
  4943                           
  4944                           ;Switch_B1.c: 293: setTxData(1);
  4945  150B  3001               	movlw	1
  4946  150C  318C  24F5         	fcall	_setTxData
  4947                           
  4948                           ;Switch_B1.c: 294: }
  4949  150E  0020               	movlb	0	; select bank0
  4950  150F  0008               	return
  4951  1510                     l8537:	
  4952                           
  4953                           ;Switch_B1.c: 295: else
  4954                           ;Switch_B1.c: 296: {
  4955                           ;Switch_B1.c: 297: Sw->Status=0;
  4956  1510  0020               	movlb	0	; select bank0
  4957  1511  086D               	movf	_Sw,w
  4958  1512  0086               	movwf	6
  4959  1513  3001               	movlw	1	; select bank2/3
  4960  1514  0087               	movwf	7
  4961  1515  1301               	bcf	1,6
  4962                           
  4963                           ;Switch_B1.c: 298: setRFSW_Status(sw,Sw->Status);
  4964  1516  086D               	movf	_Sw,w
  4965  1517  0086               	movwf	6
  4966  1518  3001               	movlw	1	; select bank2/3
  4967  1519  0087               	movwf	7
  4968  151A  3000               	movlw	0
  4969  151B  1B01               	btfsc	1,6
  4970  151C  3001               	movlw	1
  4971  151D  00A2               	movwf	setRFSW_Status@command
  4972  151E  0863               	movf	Sw_DimmerOnFunc@sw,w
  4973  151F  3198  2068         	fcall	_setRFSW_Status
  4974  1521  0020               	movlb	0	; select bank0
  4975  1522  0008               	return
  4976  1523                     __end_of_Sw_DimmerOnFunc:	
  4977                           
  4978                           	psect	text7
  4979  1593                     __ptext7:	
  4980 ;; *************** function _Sw_DimmerOffFunc *****************
  4981 ;; Defined at:
  4982 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;  sw              1    wreg     unsigned char 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  sw              1   68[BANK0 ] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;		None               void
  4989 ;; Registers used:
  4990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;Total ram usage:        3 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    8
  5003 ;; This function calls:
  5004 ;;		_setDelayOff_GO
  5005 ;;		_setDimmerLights_AdjGo
  5006 ;;		_setDimmerLights_Switch
  5007 ;;		_setDimmerLights_Trigger
  5008 ;;		_setDimmerLights_TriggerAdj
  5009 ;;		_setRF_DimmerLights
  5010 ;;		_setTxData
  5011 ;; This function is called by:
  5012 ;;		_setSw_Main
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           
  5017                           ;psect for function _Sw_DimmerOffFunc
  5018  1593                     _Sw_DimmerOffFunc:	
  5019                           
  5020                           ;incstack = 0
  5021                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5022                           ;Sw_DimmerOffFunc@sw stored from wreg
  5023  1593  0020               	movlb	0	; select bank0
  5024  1594  00E4               	movwf	Sw_DimmerOffFunc@sw
  5025                           
  5026                           ;Switch_B1.c: 305: if(Sw->Flag)
  5027  1595  086D               	movf	_Sw,w
  5028  1596  0086               	movwf	6
  5029  1597  3001               	movlw	1	; select bank2/3
  5030  1598  0087               	movwf	7
  5031  1599  1F81               	btfss	1,7
  5032  159A  0008               	return
  5033                           
  5034                           ;Switch_B1.c: 306: {
  5035                           ;Switch_B1.c: 307: Sw->Flag=0;
  5036  159B  086D               	movf	_Sw,w
  5037  159C  0086               	movwf	6
  5038  159D  3001               	movlw	1	; select bank2/3
  5039  159E  0087               	movwf	7
  5040  159F  1381               	bcf	1,7
  5041                           
  5042                           ;Switch_B1.c: 308: if(Sw->Status)
  5043  15A0  086D               	movf	_Sw,w
  5044  15A1  0086               	movwf	6
  5045  15A2  3001               	movlw	1	; select bank2/3
  5046  15A3  0087               	movwf	7
  5047  15A4  1F01               	btfss	1,6
  5048  15A5  2DDF               	goto	l8569
  5049                           
  5050                           ;Switch_B1.c: 309: {
  5051                           ;Switch_B1.c: 310: if(Sw->Adj)
  5052  15A6  0A6D               	incf	_Sw,w
  5053  15A7  0086               	movwf	6
  5054  15A8  3001               	movlw	1	; select bank2/3
  5055  15A9  0087               	movwf	7
  5056  15AA  1C01               	btfss	1,0
  5057  15AB  0008               	return
  5058                           
  5059                           ;Switch_B1.c: 311: {
  5060                           ;Switch_B1.c: 312: Sw->Adj=0;
  5061  15AC  0A6D               	incf	_Sw,w
  5062  15AD  0086               	movwf	6
  5063  15AE  3001               	movlw	1	; select bank2/3
  5064  15AF  0087               	movwf	7
  5065  15B0  1001               	bcf	1,0
  5066                           
  5067                           ;Switch_B1.c: 313: setDimmerLights_TriggerAdj(sw,1);
  5068  15B1  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5069  15B2  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5070  15B3  0864               	movf	Sw_DimmerOffFunc@sw,w
  5071  15B4  3198  20E6  3195   	fcall	_setDimmerLights_TriggerAdj
  5072                           
  5073                           ;Switch_B1.c: 314: setDimmerLights_AdjGo(sw,0);
  5074  15B7  0020               	movlb	0	; select bank0
  5075  15B8  01A2               	clrf	setDimmerLights_AdjGo@command
  5076  15B9  0864               	movf	Sw_DimmerOffFunc@sw,w
  5077  15BA  3198  20D6  3195   	fcall	_setDimmerLights_AdjGo
  5078                           
  5079                           ;Switch_B1.c: 316: Product->Data[17]=Product->Data[26+sw];
  5080  15BD  0020               	movlb	0	; select bank0
  5081  15BE  0864               	movf	Sw_DimmerOffFunc@sw,w
  5082  15BF  3E1A               	addlw	26
  5083  15C0  076F               	addwf	_Product,w
  5084  15C1  00E2               	movwf	??_Sw_DimmerOffFunc
  5085  15C2  0862               	movf	??_Sw_DimmerOffFunc,w
  5086  15C3  0086               	movwf	6
  5087  15C4  3001               	movlw	1	; select bank2/3
  5088  15C5  0087               	movwf	7
  5089  15C6  0801               	movf	1,w
  5090  15C7  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5091  15C8  086F               	movf	_Product,w
  5092  15C9  3E11               	addlw	17
  5093  15CA  0086               	movwf	6
  5094  15CB  3001               	movlw	1	; select bank2/3
  5095  15CC  0087               	movwf	7
  5096  15CD  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5097  15CE  0081               	movwf	1
  5098                           
  5099                           ;Switch_B1.c: 317: setRF_DimmerLights(sw,Sw->Status);
  5100  15CF  086D               	movf	_Sw,w
  5101  15D0  0086               	movwf	6
  5102  15D1  3001               	movlw	1	; select bank2/3
  5103  15D2  0087               	movwf	7
  5104  15D3  3000               	movlw	0
  5105  15D4  1B01               	btfsc	1,6
  5106  15D5  3001               	movlw	1
  5107  15D6  00DD               	movwf	setRF_DimmerLights@on
  5108  15D7  0864               	movf	Sw_DimmerOffFunc@sw,w
  5109  15D8  3194  2449  3195   	fcall	_setRF_DimmerLights
  5110                           
  5111                           ;Switch_B1.c: 318: setTxData(1);
  5112  15DB  3001               	movlw	1
  5113  15DC  318C  24F5         	fcall	_setTxData
  5114                           
  5115                           ;Switch_B1.c: 320: }
  5116                           ;Switch_B1.c: 321: }
  5117  15DE  0008               	return
  5118  15DF                     l8569:	
  5119                           
  5120                           ;Switch_B1.c: 322: else
  5121                           ;Switch_B1.c: 323: {
  5122                           ;Switch_B1.c: 324: setDimmerLights_Trigger(sw,1);
  5123  15DF  0020               	movlb	0	; select bank0
  5124  15E0  01A2               	clrf	setDimmerLights_Trigger@command
  5125  15E1  0AA2               	incf	setDimmerLights_Trigger@command,f
  5126  15E2  0864               	movf	Sw_DimmerOffFunc@sw,w
  5127  15E3  3198  20A6  3195   	fcall	_setDimmerLights_Trigger
  5128                           
  5129                           ;Switch_B1.c: 325: setDimmerLights_Switch(sw,0);
  5130  15E6  0020               	movlb	0	; select bank0
  5131  15E7  01A2               	clrf	setDimmerLights_Switch@command
  5132  15E8  0864               	movf	Sw_DimmerOffFunc@sw,w
  5133  15E9  3198  2096  3195   	fcall	_setDimmerLights_Switch
  5134                           
  5135                           ;Switch_B1.c: 327: setDelayOff_GO(sw,0,0);
  5136  15EC  0020               	movlb	0	; select bank0
  5137  15ED  01A3               	clrf	setDelayOff_GO@command
  5138  15EE  01A4               	clrf	setDelayOff_GO@value
  5139  15EF  0864               	movf	Sw_DimmerOffFunc@sw,w
  5140  15F0  3192  2201  3195   	fcall	_setDelayOff_GO
  5141                           
  5142                           ;Switch_B1.c: 328: setRF_DimmerLights(sw,Sw->Status);
  5143  15F3  0020               	movlb	0	; select bank0
  5144  15F4  086D               	movf	_Sw,w
  5145  15F5  0086               	movwf	6
  5146  15F6  3001               	movlw	1	; select bank2/3
  5147  15F7  0087               	movwf	7
  5148  15F8  3000               	movlw	0
  5149  15F9  1B01               	btfsc	1,6
  5150  15FA  3001               	movlw	1
  5151  15FB  00DD               	movwf	setRF_DimmerLights@on
  5152  15FC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5153  15FD  3194  2449  3195   	fcall	_setRF_DimmerLights
  5154                           
  5155                           ;Switch_B1.c: 329: setTxData(1);
  5156  1600  3001               	movlw	1
  5157  1601  318C  24F5         	fcall	_setTxData
  5158  1603  0008               	return
  5159  1604                     __end_of_Sw_DimmerOffFunc:	
  5160                           
  5161                           	psect	text8
  5162  1BB7                     __ptext8:	
  5163 ;; *************** function _Sw_DimmerAdjFunc *****************
  5164 ;; Defined at:
  5165 ;;		line 334 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  sw              1    wreg     unsigned char 
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;  sw              1    4[BANK0 ] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;		None               void
  5172 ;; Registers used:
  5173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;Total ram usage:        1 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    6
  5186 ;; This function calls:
  5187 ;;		_setDimmerLights_AdjGo
  5188 ;;		_setDimmerLights_TriggerAdj
  5189 ;;		_setRFSW_Status
  5190 ;; This function is called by:
  5191 ;;		_setSw_Main
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           
  5196                           ;psect for function _Sw_DimmerAdjFunc
  5197  1BB7                     _Sw_DimmerAdjFunc:	
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5201                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5202  1BB7  0020               	movlb	0	; select bank0
  5203  1BB8  00A4               	movwf	Sw_DimmerAdjFunc@sw
  5204                           
  5205                           ;Switch_B1.c: 336: if(Sw->Flag)
  5206  1BB9  086D               	movf	_Sw,w
  5207  1BBA  0086               	movwf	6
  5208  1BBB  3001               	movlw	1	; select bank2/3
  5209  1BBC  0087               	movwf	7
  5210  1BBD  1F81               	btfss	1,7
  5211  1BBE  0008               	return
  5212                           
  5213                           ;Switch_B1.c: 337: {
  5214                           ;Switch_B1.c: 338: Sw->Adj=1;
  5215  1BBF  0A6D               	incf	_Sw,w
  5216  1BC0  0086               	movwf	6
  5217  1BC1  3001               	movlw	1	; select bank2/3
  5218  1BC2  0087               	movwf	7
  5219  1BC3  1401               	bsf	1,0
  5220                           
  5221                           ;Switch_B1.c: 339: Sw->Status=1;
  5222  1BC4  086D               	movf	_Sw,w
  5223  1BC5  0086               	movwf	6
  5224  1BC6  3001               	movlw	1	; select bank2/3
  5225  1BC7  0087               	movwf	7
  5226  1BC8  1701               	bsf	1,6
  5227                           
  5228                           ;Switch_B1.c: 340: setRFSW_Status(sw,1);
  5229  1BC9  01A2               	clrf	setRFSW_Status@command
  5230  1BCA  0AA2               	incf	setRFSW_Status@command,f
  5231  1BCB  0824               	movf	Sw_DimmerAdjFunc@sw,w
  5232  1BCC  3198  2068  319B   	fcall	_setRFSW_Status
  5233                           
  5234                           ;Switch_B1.c: 342: setDimmerLights_TriggerAdj(sw,1);
  5235  1BCF  0020               	movlb	0	; select bank0
  5236  1BD0  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5237  1BD1  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5238  1BD2  0824               	movf	Sw_DimmerAdjFunc@sw,w
  5239  1BD3  3198  20E6  319B   	fcall	_setDimmerLights_TriggerAdj
  5240                           
  5241                           ;Switch_B1.c: 343: setDimmerLights_AdjGo(sw,1);
  5242  1BD6  0020               	movlb	0	; select bank0
  5243  1BD7  01A2               	clrf	setDimmerLights_AdjGo@command
  5244  1BD8  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5245  1BD9  0824               	movf	Sw_DimmerAdjFunc@sw,w
  5246  1BDA  3198  20D6         	fcall	_setDimmerLights_AdjGo
  5247  1BDC  0008               	return
  5248  1BDD                     __end_of_Sw_DimmerAdjFunc:	
  5249                           
  5250                           	psect	text9
  5251  18E6                     __ptext9:	
  5252 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5253 ;; Defined at:
  5254 ;;		line 441 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  lights          1    wreg     unsigned char 
  5257 ;;  command         1    2[BANK0 ] unsigned char 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  lights          1    3[BANK0 ] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;		None               void
  5262 ;; Registers used:
  5263 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5269 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;Total ram usage:        2 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    5
  5276 ;; This function calls:
  5277 ;;		_DimmerLightsPointSelect
  5278 ;; This function is called by:
  5279 ;;		_Sw_DimmerOffFunc
  5280 ;;		_Sw_DimmerAdjFunc
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           
  5285                           ;psect for function _setDimmerLights_TriggerAdj
  5286  18E6                     _setDimmerLights_TriggerAdj:	
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5290                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5291  18E6  0020               	movlb	0	; select bank0
  5292  18E7  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5293                           
  5294                           ;Dimmer_B1.c: 443: DimmerLightsPointSelect(lights);
  5295  18E8  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5296  18E9  3199  2107         	fcall	_DimmerLightsPointSelect
  5297                           
  5298                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj=command;
  5299  18EB  0020               	movlb	0	; select bank0
  5300  18EC  086C               	movf	_DimmerLights,w
  5301  18ED  3E09               	addlw	9
  5302  18EE  0086               	movwf	6
  5303  18EF  3001               	movlw	1	; select bank2/3
  5304  18F0  0087               	movwf	7
  5305  18F1  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5306  18F2  1181               	bcf	1,3
  5307  18F3  1D03               	skipz
  5308  18F4  1581               	bsf	1,3
  5309  18F5  0008               	return
  5310  18F6                     __end_of_setDimmerLights_TriggerAdj:	
  5311                           
  5312                           	psect	text10
  5313  18D6                     __ptext10:	
  5314 ;; *************** function _setDimmerLights_AdjGo *****************
  5315 ;; Defined at:
  5316 ;;		line 431 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  lights          1    wreg     unsigned char 
  5319 ;;  command         1    2[BANK0 ] unsigned char 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  lights          1    3[BANK0 ] unsigned char 
  5322 ;; Return value:  Size  Location     Type
  5323 ;;		None               void
  5324 ;; Registers used:
  5325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5331 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;Total ram usage:        2 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; Hardware stack levels required when called:    5
  5338 ;; This function calls:
  5339 ;;		_DimmerLightsPointSelect
  5340 ;; This function is called by:
  5341 ;;		_Sw_DimmerOffFunc
  5342 ;;		_Sw_DimmerAdjFunc
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           
  5347                           ;psect for function _setDimmerLights_AdjGo
  5348  18D6                     _setDimmerLights_AdjGo:	
  5349                           
  5350                           ;incstack = 0
  5351                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5352                           ;setDimmerLights_AdjGo@lights stored from wreg
  5353  18D6  0020               	movlb	0	; select bank0
  5354  18D7  00A3               	movwf	setDimmerLights_AdjGo@lights
  5355                           
  5356                           ;Dimmer_B1.c: 433: DimmerLightsPointSelect(lights);
  5357  18D8  0823               	movf	setDimmerLights_AdjGo@lights,w
  5358  18D9  3199  2107         	fcall	_DimmerLightsPointSelect
  5359                           
  5360                           ;Dimmer_B1.c: 434: DimmerLights->AdjGo=command;
  5361  18DB  0020               	movlb	0	; select bank0
  5362  18DC  086C               	movf	_DimmerLights,w
  5363  18DD  3E09               	addlw	9
  5364  18DE  0086               	movwf	6
  5365  18DF  3001               	movlw	1	; select bank2/3
  5366  18E0  0087               	movwf	7
  5367  18E1  0822               	movf	setDimmerLights_AdjGo@command,w
  5368  18E2  1101               	bcf	1,2
  5369  18E3  1D03               	skipz
  5370  18E4  1501               	bsf	1,2
  5371  18E5  0008               	return
  5372  18E6                     __end_of_setDimmerLights_AdjGo:	
  5373                           
  5374                           	psect	text11
  5375  27D7                     __ptext11:	
  5376 ;; *************** function _Switch_Initialization *****************
  5377 ;; Defined at:
  5378 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;		None               void
  5385 ;; Registers used:
  5386 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;Total ram usage:        0 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    7
  5399 ;; This function calls:
  5400 ;;		_TouchPower
  5401 ;;		_setSw_Initialization
  5402 ;; This function is called by:
  5403 ;;		_main
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           
  5408                           ;psect for function _Switch_Initialization
  5409  27D7                     _Switch_Initialization:	
  5410                           
  5411                           ;Switch_B1.c: 40: TouchPower();
  5412                           
  5413                           ;incstack = 0
  5414                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5415  27D7  31A6  26D3  31A7   	fcall	_TouchPower
  5416                           
  5417                           ;Switch_B1.c: 42: WPUB1=0;
  5418  27DA  0024               	movlb	4	; select bank4
  5419  27DB  108D               	bcf	13,1	;volatile
  5420                           
  5421                           ;Switch_B1.c: 51: setSw_Initialization(1);
  5422  27DC  3001               	movlw	1
  5423  27DD  31A7  270F  31A7   	fcall	_setSw_Initialization
  5424                           
  5425                           ;Switch_B1.c: 54: setSw_Initialization(2);
  5426  27E0  3002               	movlw	2
  5427  27E1  31A7  270F         	fcall	_setSw_Initialization
  5428  27E3  0008               	return
  5429  27E4                     __end_of_Switch_Initialization:	
  5430                           
  5431                           	psect	text12
  5432  270F                     __ptext12:	
  5433 ;; *************** function _setSw_Initialization *****************
  5434 ;; Defined at:
  5435 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  sw              1    wreg     unsigned char 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  sw              1    4[BANK0 ] unsigned char 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;		None               void
  5442 ;; Registers used:
  5443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;Total ram usage:        1 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    6
  5456 ;; This function calls:
  5457 ;;		_setLED
  5458 ;; This function is called by:
  5459 ;;		_Switch_Initialization
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function _setSw_Initialization
  5465  270F                     _setSw_Initialization:	
  5466                           
  5467                           ;incstack = 0
  5468                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5469                           ;setSw_Initialization@sw stored from wreg
  5470  270F  0020               	movlb	0	; select bank0
  5471  2710  00A4               	movwf	setSw_Initialization@sw
  5472                           
  5473                           ;Switch_B1.c: 80: setLED(sw,1);
  5474  2711  01A2               	clrf	setLED@command
  5475  2712  0AA2               	incf	setLED@command,f
  5476  2713  0824               	movf	setSw_Initialization@sw,w
  5477  2714  3192  225D         	fcall	_setLED
  5478  2716  0008               	return
  5479  2717                     __end_of_setSw_Initialization:	
  5480                           
  5481                           	psect	text13
  5482  26D3                     __ptext13:	
  5483 ;; *************** function _TouchPower *****************
  5484 ;; Defined at:
  5485 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5486 ;; Parameters:    Size  Location     Type
  5487 ;;		None
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;		None
  5490 ;; Return value:  Size  Location     Type
  5491 ;;		None               void
  5492 ;; Registers used:
  5493 ;;		None
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;Total ram usage:        0 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    4
  5506 ;; This function calls:
  5507 ;;		Nothing
  5508 ;; This function is called by:
  5509 ;;		_Switch_Initialization
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function _TouchPower
  5515  26D3                     _TouchPower:	
  5516  26D3                     l2641:	
  5517                           ;Switch_B1.c: 11: while(!RC5)
  5518                           
  5519                           ;incstack = 0
  5520                           ; Regs used in _TouchPower: []
  5521                           
  5522  26D3  0020               	movlb	0	; select bank0
  5523  26D4  1A8E               	btfsc	14,5	;volatile
  5524  26D5  0008               	return
  5525                           
  5526                           ;Switch_B1.c: 12: RC5=1;
  5527  26D6  168E               	bsf	14,5	;volatile
  5528  26D7  2ED3               	goto	l2641
  5529  26D8                     __end_of_TouchPower:	
  5530                           
  5531                           	psect	text14
  5532  26CF                     __ptext14:	
  5533 ;; *************** function _RF_Main *****************
  5534 ;; Defined at:
  5535 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;		None
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;		None
  5540 ;; Return value:  Size  Location     Type
  5541 ;;		None               void
  5542 ;; Registers used:
  5543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;Total ram usage:        0 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:   13
  5556 ;; This function calls:
  5557 ;;		_setRF_Main
  5558 ;; This function is called by:
  5559 ;;		_main
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _RF_Main
  5565  26CF                     _RF_Main:	
  5566                           
  5567                           ;RF_Control_B1.c: 27: setRF_Main(1);
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5571  26CF  3001               	movlw	1
  5572  26D0  3188  2016         	fcall	_setRF_Main
  5573  26D2  0008               	return
  5574  26D3                     __end_of_RF_Main:	
  5575                           
  5576                           	psect	text15
  5577  0816                     __ptext15:	
  5578 ;; *************** function _setRF_Main *****************
  5579 ;; Defined at:
  5580 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  rf              1    wreg     unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  rf              1   74[BANK0 ] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;		None               void
  5587 ;; Registers used:
  5588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;Total ram usage:        3 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:   12
  5601 ;; This function calls:
  5602 ;;		_CC2500_RxData
  5603 ;;		_CC2500_TxData
  5604 ;;		_CC2500_WriteCommand
  5605 ;;		_RF_RxDisable
  5606 ;;		_RfPointSelect
  5607 ;;		_getRxData
  5608 ;;		_setINT_GO
  5609 ;; This function is called by:
  5610 ;;		_RF_Main
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _setRF_Main
  5616  0816                     _setRF_Main:	
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5620                           ;setRF_Main@rf stored from wreg
  5621  0816  0020               	movlb	0	; select bank0
  5622  0817  00EA               	movwf	setRF_Main@rf
  5623                           
  5624                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  5625  0818  086A               	movf	setRF_Main@rf,w
  5626  0819  31A7  2747  3188   	fcall	_RfPointSelect
  5627                           
  5628                           ;RF_Control_B1.c: 61: if(RF->Enable)
  5629  081C  087B               	movf	_RF,w
  5630  081D  0086               	movwf	6
  5631  081E  0187               	clrf	7
  5632  081F  1C01               	btfss	1,0
  5633  0820  0008               	return
  5634                           
  5635                           ;RF_Control_B1.c: 62: {
  5636                           ;RF_Control_B1.c: 69: RF->Key=((RA6 || RA4 || RA0 || RB1 ) && !RF->Learn)?1:0;
  5637  0821  0020               	movlb	0	; select bank0
  5638  0822  01EB               	clrf	_setRF_Main$3956
  5639  0823  1F0C               	btfss	12,6	;volatile
  5640  0824  1A0C               	btfsc	12,4	;volatile
  5641  0825  282A               	goto	l8789
  5642  0826  180C               	btfsc	12,0	;volatile
  5643  0827  282A               	goto	l8789
  5644  0828  1C8D               	btfss	13,1	;volatile
  5645  0829  2831               	goto	l8793
  5646  082A                     l8789:	
  5647  082A  087B               	movf	_RF,w
  5648  082B  0086               	movwf	6
  5649  082C  0187               	clrf	7
  5650  082D  1B01               	btfsc	1,6
  5651  082E  2831               	goto	l8793
  5652  082F  01EB               	clrf	_setRF_Main$3956
  5653  0830  0AEB               	incf	_setRF_Main$3956,f
  5654  0831                     l8793:	
  5655  0831  087B               	movf	_RF,w
  5656  0832  0086               	movwf	6
  5657  0833  0187               	clrf	7
  5658  0834  086B               	movf	_setRF_Main$3956,w
  5659  0835  1381               	bcf	1,7
  5660  0836  1D03               	skipz
  5661  0837  1781               	bsf	1,7
  5662                           
  5663                           ;RF_Control_B1.c: 77: if(!RF->Key)
  5664  0838  087B               	movf	_RF,w
  5665  0839  0086               	movwf	6
  5666  083A  0187               	clrf	7
  5667  083B  1B81               	btfsc	1,7
  5668  083C  2869               	goto	l8815
  5669                           
  5670                           ;RF_Control_B1.c: 78: {
  5671                           ;RF_Control_B1.c: 79: if(RF->ReceiveGO)
  5672  083D  087B               	movf	_RF,w
  5673  083E  0086               	movwf	6
  5674  083F  0187               	clrf	7
  5675  0840  1C81               	btfss	1,1
  5676  0841  284E               	goto	l8803
  5677                           
  5678                           ;RF_Control_B1.c: 80: {
  5679                           ;RF_Control_B1.c: 81: RF->ReceiveGO=0;
  5680  0842  087B               	movf	_RF,w
  5681  0843  0086               	movwf	6
  5682  0844  0187               	clrf	7
  5683  0845  1081               	bcf	1,1
  5684                           
  5685                           ;RF_Control_B1.c: 82: CC2500_RxData();
  5686  0846  3193  2380  3188   	fcall	_CC2500_RxData
  5687                           
  5688                           ;RF_Control_B1.c: 88: getRxData(1);
  5689  0849  3001               	movlw	1
  5690  084A  3190  20A5  3188   	fcall	_getRxData
  5691                           
  5692                           ;RF_Control_B1.c: 91: }
  5693  084D  286D               	goto	l8817
  5694  084E                     l8803:	
  5695                           
  5696                           ;RF_Control_B1.c: 92: else
  5697                           ;RF_Control_B1.c: 93: {
  5698                           ;RF_Control_B1.c: 94: if(!RF->TransceiveGO)
  5699  084E  087B               	movf	_RF,w
  5700  084F  0086               	movwf	6
  5701  0850  0187               	clrf	7
  5702  0851  1901               	btfsc	1,2
  5703  0852  286D               	goto	l8817
  5704                           
  5705                           ;RF_Control_B1.c: 95: {
  5706                           ;RF_Control_B1.c: 97: if(!RF->RxStatus)
  5707  0853  087B               	movf	_RF,w
  5708  0854  0086               	movwf	6
  5709  0855  0187               	clrf	7
  5710  0856  1981               	btfsc	1,3
  5711  0857  286D               	goto	l8817
  5712                           
  5713                           ;RF_Control_B1.c: 98: {
  5714                           ;RF_Control_B1.c: 99: RF->RxStatus=1;
  5715  0858  087B               	movf	_RF,w
  5716  0859  0086               	movwf	6
  5717  085A  0187               	clrf	7
  5718  085B  1581               	bsf	1,3
  5719                           
  5720                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x36);
  5721  085C  3036               	movlw	54
  5722  085D  3198  2086  3188   	fcall	_CC2500_WriteCommand
  5723                           
  5724                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x34);
  5725  0860  3034               	movlw	52
  5726  0861  3198  2086  3188   	fcall	_CC2500_WriteCommand
  5727                           
  5728                           ;RF_Control_B1.c: 102: setINT_GO(1);
  5729  0864  3001               	movlw	1
  5730  0865  31A7  2728  3188   	fcall	_setINT_GO
  5731                           
  5732                           ;RF_Control_B1.c: 103: }
  5733                           ;RF_Control_B1.c: 105: }
  5734                           ;RF_Control_B1.c: 106: }
  5735                           ;RF_Control_B1.c: 107: }
  5736  0868  286D               	goto	l8817
  5737  0869                     l8815:	
  5738                           
  5739                           ;RF_Control_B1.c: 108: else
  5740                           ;RF_Control_B1.c: 109: {
  5741                           ;RF_Control_B1.c: 110: RF_RxDisable(1);
  5742  0869  3001               	movlw	1
  5743  086A  319B  23DD  3188   	fcall	_RF_RxDisable
  5744  086D                     l8817:	
  5745                           
  5746                           ;RF_Control_B1.c: 111: }
  5747                           ;RF_Control_B1.c: 112: if(RF->TransceiveGO)
  5748  086D  087B               	movf	_RF,w
  5749  086E  0086               	movwf	6
  5750  086F  0187               	clrf	7
  5751  0870  1D01               	btfss	1,2
  5752  0871  0008               	return
  5753                           
  5754                           ;RF_Control_B1.c: 113: {
  5755                           ;RF_Control_B1.c: 114: RF_RxDisable(1);
  5756  0872  3001               	movlw	1
  5757  0873  319B  23DD  3188   	fcall	_RF_RxDisable
  5758                           
  5759                           ;RF_Control_B1.c: 115: if(!RF->Debounce)
  5760  0876  087B               	movf	_RF,w
  5761  0877  0086               	movwf	6
  5762  0878  0187               	clrf	7
  5763  0879  1A81               	btfsc	1,5
  5764  087A  2893               	goto	l8831
  5765                           
  5766                           ;RF_Control_B1.c: 116: {
  5767                           ;RF_Control_B1.c: 117: RF->DebounceTime++;
  5768  087B  3001               	movlw	1
  5769  087C  0020               	movlb	0	; select bank0
  5770  087D  00E9               	movwf	??_setRF_Main
  5771  087E  0A7B               	incf	_RF,w
  5772  087F  0086               	movwf	6
  5773  0880  0187               	clrf	7
  5774  0881  0869               	movf	??_setRF_Main,w
  5775  0882  0781               	addwf	1,f
  5776                           
  5777                           ;RF_Control_B1.c: 118: if(RF->DebounceTime == 25)
  5778  0883  0A7B               	incf	_RF,w
  5779  0884  0086               	movwf	6
  5780  0885  0187               	clrf	7
  5781  0886  0801               	movf	1,w
  5782  0887  3A19               	xorlw	25
  5783  0888  1D03               	skipz
  5784  0889  0008               	return
  5785                           
  5786                           ;RF_Control_B1.c: 119: {
  5787                           ;RF_Control_B1.c: 120: RF->DebounceTime=0;
  5788  088A  0A7B               	incf	_RF,w
  5789  088B  0086               	movwf	6
  5790  088C  0187               	clrf	7
  5791  088D  0181               	clrf	1
  5792                           
  5793                           ;RF_Control_B1.c: 121: RF->Debounce=1;
  5794  088E  087B               	movf	_RF,w
  5795  088F  0086               	movwf	6
  5796  0890  0187               	clrf	7
  5797  0891  1681               	bsf	1,5
  5798                           
  5799                           ;RF_Control_B1.c: 122: }
  5800                           ;RF_Control_B1.c: 123: }
  5801  0892  0008               	return
  5802  0893                     l8831:	
  5803                           
  5804                           ;RF_Control_B1.c: 124: else
  5805                           ;RF_Control_B1.c: 125: {
  5806                           ;RF_Control_B1.c: 126: RF->Debounce=0;
  5807  0893  087B               	movf	_RF,w
  5808  0894  0086               	movwf	6
  5809  0895  0187               	clrf	7
  5810  0896  1281               	bcf	1,5
  5811                           
  5812                           ;RF_Control_B1.c: 127: RF->TransceiveGO=0;
  5813  0897  087B               	movf	_RF,w
  5814  0898  0086               	movwf	6
  5815  0899  0187               	clrf	7
  5816  089A  1101               	bcf	1,2
  5817                           
  5818                           ;RF_Control_B1.c: 128: CC2500_TxData();
  5819  089B  319F  27BC         	fcall	_CC2500_TxData
  5820  089D  0008               	return
  5821  089E                     __end_of_setRF_Main:	
  5822                           
  5823                           	psect	text16
  5824  10A5                     __ptext16:	
  5825 ;; *************** function _getRxData *****************
  5826 ;; Defined at:
  5827 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;  rf              1    wreg     unsigned char 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  rf              1   72[BANK0 ] unsigned char 
  5832 ;;  i               1    0        unsigned char 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;		None               void
  5835 ;; Registers used:
  5836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;Total ram usage:        1 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:   11
  5849 ;; This function calls:
  5850 ;;		_RfPointSelect
  5851 ;;		_setControl_Lights_Table
  5852 ;;		_setLog_Code
  5853 ;; This function is called by:
  5854 ;;		_setRF_Main
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           
  5859                           ;psect for function _getRxData
  5860  10A5                     _getRxData:	
  5861                           
  5862                           ;incstack = 0
  5863                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5864                           ;getRxData@rf stored from wreg
  5865  10A5  0020               	movlb	0	; select bank0
  5866  10A6  00E8               	movwf	getRxData@rf
  5867                           
  5868                           ;RF_Control_B1.c: 216: unsigned char i;
  5869                           ;RF_Control_B1.c: 217: RfPointSelect(rf);
  5870  10A7  0868               	movf	getRxData@rf,w
  5871  10A8  31A7  2747  3190   	fcall	_RfPointSelect
  5872                           
  5873                           ;RF_Control_B1.c: 218: if(RF->Learn)
  5874  10AB  087B               	movf	_RF,w
  5875  10AC  0086               	movwf	6
  5876  10AD  0187               	clrf	7
  5877  10AE  1F01               	btfss	1,6
  5878  10AF  28BC               	goto	l8461
  5879                           
  5880                           ;RF_Control_B1.c: 219: {
  5881                           ;RF_Control_B1.c: 220: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  5882  10B0  0021               	movlb	1	; select bank1
  5883  10B1  08A0               	movf	_RF_Data^(0+128),f
  5884  10B2  1D03               	skipz
  5885  10B3  0008               	return
  5886  10B4  0821               	movf	(_RF_Data^(0+128)+1),w
  5887  10B5  3A64               	xorlw	100
  5888  10B6  1D03               	skipz
  5889  10B7  0008               	return
  5890                           
  5891                           ;RF_Control_B1.c: 221: {
  5892                           ;RF_Control_B1.c: 222: setLog_Code(1);
  5893  10B8  3001               	movlw	1
  5894  10B9  3190  205E         	fcall	_setLog_Code
  5895                           
  5896                           ;RF_Control_B1.c: 223: }
  5897                           ;RF_Control_B1.c: 224: }
  5898  10BB  0008               	return
  5899  10BC                     l8461:	
  5900                           
  5901                           ;RF_Control_B1.c: 225: else
  5902                           ;RF_Control_B1.c: 226: {
  5903                           ;RF_Control_B1.c: 227: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  5904  10BC  0021               	movlb	1	; select bank1
  5905  10BD  08A0               	movf	_RF_Data^(0+128),f
  5906  10BE  1D03               	skipz
  5907  10BF  0008               	return
  5908  10C0  0821               	movf	(_RF_Data^(0+128)+1),w
  5909  10C1  3A02               	xorlw	2
  5910  10C2  1D03               	skipz
  5911  10C3  0008               	return
  5912                           
  5913                           ;RF_Control_B1.c: 228: {
  5914                           ;RF_Control_B1.c: 229: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  5915  10C4  082C               	movf	(_RF_Data^(0+128)+12),w
  5916  10C5  3AFF               	xorlw	255
  5917  10C6  1D03               	skipz
  5918  10C7  28D2               	goto	l8473
  5919  10C8  082D               	movf	(_RF_Data^(0+128)+13),w
  5920  10C9  3AFF               	xorlw	255
  5921  10CA  1D03               	skipz
  5922  10CB  28D2               	goto	l8473
  5923  10CC  082E               	movf	(_RF_Data^(0+128)+14),w
  5924  10CD  3AFF               	xorlw	255
  5925  10CE  1D03               	skipz
  5926  10CF  28D2               	goto	l8473
  5927                           
  5928                           ;RF_Control_B1.c: 230: {
  5929                           ;RF_Control_B1.c: 231: __nop();
  5930  10D0  0000               	nop
  5931                           
  5932                           ;RF_Control_B1.c: 232: }
  5933  10D1  0008               	return
  5934  10D2                     l8473:	
  5935                           
  5936                           ;RF_Control_B1.c: 233: else
  5937                           ;RF_Control_B1.c: 234: {
  5938                           ;RF_Control_B1.c: 235: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  5939  10D2  0020               	movlb	0	; select bank0
  5940  10D3  086F               	movf	_Product,w
  5941  10D4  3E0C               	addlw	12
  5942  10D5  0086               	movwf	6
  5943  10D6  3001               	movlw	1	; select bank2/3
  5944  10D7  0087               	movwf	7
  5945  10D8  0021               	movlb	1	; select bank1
  5946  10D9  082C               	movf	(_RF_Data^(0+128)+12),w
  5947  10DA  0601               	xorwf	1,w
  5948  10DB  1D03               	skipz
  5949  10DC  0008               	return
  5950  10DD  0020               	movlb	0	; select bank0
  5951  10DE  086F               	movf	_Product,w
  5952  10DF  3E0D               	addlw	13
  5953  10E0  0086               	movwf	6
  5954  10E1  3001               	movlw	1	; select bank2/3
  5955  10E2  0087               	movwf	7
  5956  10E3  0021               	movlb	1	; select bank1
  5957  10E4  082D               	movf	(_RF_Data^(0+128)+13),w
  5958  10E5  0601               	xorwf	1,w
  5959  10E6  1D03               	skipz
  5960  10E7  0008               	return
  5961  10E8  0020               	movlb	0	; select bank0
  5962  10E9  086F               	movf	_Product,w
  5963  10EA  3E0E               	addlw	14
  5964  10EB  0086               	movwf	6
  5965  10EC  3001               	movlw	1	; select bank2/3
  5966  10ED  0087               	movwf	7
  5967  10EE  0021               	movlb	1	; select bank1
  5968  10EF  082E               	movf	(_RF_Data^(0+128)+14),w
  5969  10F0  0601               	xorwf	1,w
  5970  10F1  1D03               	skipz
  5971  10F2  0008               	return
  5972                           
  5973                           ;RF_Control_B1.c: 236: {
  5974                           ;RF_Control_B1.c: 237: setControl_Lights_Table(1);
  5975  10F3  3001               	movlw	1
  5976  10F4  3189  212E         	fcall	_setControl_Lights_Table
  5977                           
  5978                           ;RF_Control_B1.c: 246: {
  5979                           ;RF_Control_B1.c: 247: ;
  5980                           
  5981                           ;RF_Control_B1.c: 242: {
  5982                           ;RF_Control_B1.c: 243: ;
  5983                           ;RF_Control_B1.c: 244: }
  5984                           
  5985                           ;RF_Control_B1.c: 238: }
  5986                           ;RF_Control_B1.c: 239: }
  5987                           ;RF_Control_B1.c: 240: }
  5988  10F6  0008               	return
  5989  10F7                     __end_of_getRxData:	
  5990                           
  5991                           	psect	text17
  5992  105E                     __ptext17:	
  5993 ;; *************** function _setLog_Code *****************
  5994 ;; Defined at:
  5995 ;;		line 256 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  rf              1    wreg     unsigned char 
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  rf              1   11[BANK0 ] unsigned char 
  6000 ;; Return value:  Size  Location     Type
  6001 ;;		None               void
  6002 ;; Registers used:
  6003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;Total ram usage:        2 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:    6
  6016 ;; This function calls:
  6017 ;;		_RfPointSelect
  6018 ;;		_setBuz
  6019 ;; This function is called by:
  6020 ;;		_getRxData
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           
  6025                           ;psect for function _setLog_Code
  6026  105E                     _setLog_Code:	
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6030                           ;setLog_Code@rf stored from wreg
  6031  105E  0020               	movlb	0	; select bank0
  6032  105F  00AB               	movwf	setLog_Code@rf
  6033                           
  6034                           ;RF_Control_B1.c: 258: RfPointSelect(rf);
  6035  1060  082B               	movf	setLog_Code@rf,w
  6036  1061  31A7  2747  3190   	fcall	_RfPointSelect
  6037                           
  6038                           ;RF_Control_B1.c: 259: Product->Data[12]=RF_Data[12];
  6039  1064  0021               	movlb	1	; select bank1
  6040  1065  082C               	movf	(_RF_Data^(0+128)+12),w
  6041  1066  0020               	movlb	0	; select bank0
  6042  1067  00AA               	movwf	??_setLog_Code
  6043  1068  086F               	movf	_Product,w
  6044  1069  3E0C               	addlw	12
  6045  106A  0086               	movwf	6
  6046  106B  3001               	movlw	1	; select bank2/3
  6047  106C  0087               	movwf	7
  6048  106D  082A               	movf	??_setLog_Code,w
  6049  106E  0081               	movwf	1
  6050                           
  6051                           ;RF_Control_B1.c: 260: Product->Data[13]=RF_Data[13];
  6052  106F  0021               	movlb	1	; select bank1
  6053  1070  082D               	movf	(_RF_Data^(0+128)+13),w
  6054  1071  0020               	movlb	0	; select bank0
  6055  1072  00AA               	movwf	??_setLog_Code
  6056  1073  086F               	movf	_Product,w
  6057  1074  3E0D               	addlw	13
  6058  1075  0086               	movwf	6
  6059  1076  3001               	movlw	1	; select bank2/3
  6060  1077  0087               	movwf	7
  6061  1078  082A               	movf	??_setLog_Code,w
  6062  1079  0081               	movwf	1
  6063                           
  6064                           ;RF_Control_B1.c: 261: Product->Data[14]=RF_Data[14];
  6065  107A  0021               	movlb	1	; select bank1
  6066  107B  082E               	movf	(_RF_Data^(0+128)+14),w
  6067  107C  0020               	movlb	0	; select bank0
  6068  107D  00AA               	movwf	??_setLog_Code
  6069  107E  086F               	movf	_Product,w
  6070  107F  3E0E               	addlw	14
  6071  1080  0086               	movwf	6
  6072  1081  3001               	movlw	1	; select bank2/3
  6073  1082  0087               	movwf	7
  6074  1083  082A               	movf	??_setLog_Code,w
  6075  1084  0081               	movwf	1
  6076                           
  6077                           ;RF_Control_B1.c: 262: setBuz(1,100);
  6078  1085  3064               	movlw	100
  6079  1086  00A6               	movwf	setBuz@time
  6080  1087  3000               	movlw	0
  6081  1088  00A7               	movwf	setBuz@time+1
  6082  1089  3001               	movlw	1
  6083  108A  3196  2604  3190   	fcall	_setBuz
  6084                           
  6085                           ;RF_Control_B1.c: 263: RF->Learn=0;
  6086  108D  087B               	movf	_RF,w
  6087  108E  0086               	movwf	6
  6088  108F  0187               	clrf	7
  6089  1090  1301               	bcf	1,6
  6090                           
  6091                           ;RF_Control_B1.c: 264: if(TMain->First)
  6092  1091  087D               	movf	_TMain,w
  6093  1092  3E03               	addlw	3
  6094  1093  0086               	movwf	6
  6095  1094  3001               	movlw	1	; select bank2/3
  6096  1095  0087               	movwf	7
  6097  1096  1C81               	btfss	1,1
  6098  1097  289E               	goto	l2437
  6099                           
  6100                           ;RF_Control_B1.c: 265: {
  6101                           ;RF_Control_B1.c: 266: Memory->LoopSave=1;
  6102  1098  087C               	movf	_Memory,w
  6103  1099  3E22               	addlw	34
  6104  109A  0086               	movwf	6
  6105  109B  3001               	movlw	1	; select bank2/3
  6106  109C  0087               	movwf	7
  6107  109D  1501               	bsf	1,2
  6108  109E                     l2437:	
  6109                           
  6110                           ;RF_Control_B1.c: 267: }
  6111                           ;RF_Control_B1.c: 268: Memory->Modify=1;
  6112  109E  087C               	movf	_Memory,w
  6113  109F  3E22               	addlw	34
  6114  10A0  0086               	movwf	6
  6115  10A1  3001               	movlw	1	; select bank2/3
  6116  10A2  0087               	movwf	7
  6117  10A3  1401               	bsf	1,0
  6118  10A4  0008               	return
  6119  10A5                     __end_of_setLog_Code:	
  6120                           
  6121                           	psect	text18
  6122  092E                     __ptext18:	
  6123 ;; *************** function _setControl_Lights_Table *****************
  6124 ;; Defined at:
  6125 ;;		line 271 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  rf              1    wreg     unsigned char 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  rf              1   71[BANK0 ] unsigned char 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;		None               void
  6132 ;; Registers used:
  6133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;Total ram usage:        1 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:   10
  6146 ;; This function calls:
  6147 ;;		_RfPointSelect
  6148 ;;		_setBuz
  6149 ;;		_setDimmerLights
  6150 ;;		_setRFSW_AdjControl
  6151 ;;		_setRFSW_Control
  6152 ;;		_setRFSW_Status
  6153 ;;		_setSw_Status
  6154 ;;		_setTxData
  6155 ;; This function is called by:
  6156 ;;		_getRxData
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           
  6161                           ;psect for function _setControl_Lights_Table
  6162  092E                     _setControl_Lights_Table:	
  6163                           
  6164                           ;incstack = 0
  6165                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6166                           ;setControl_Lights_Table@rf stored from wreg
  6167  092E  0020               	movlb	0	; select bank0
  6168  092F  00E7               	movwf	setControl_Lights_Table@rf
  6169                           
  6170                           ;RF_Control_B1.c: 273: RfPointSelect(rf);
  6171  0930  0867               	movf	setControl_Lights_Table@rf,w
  6172  0931  31A7  2747  3189   	fcall	_RfPointSelect
  6173                           
  6174                           ;RF_Control_B1.c: 274: if(RF_Data[15] == 0x00)
  6175  0934  0021               	movlb	1	; select bank1
  6176  0935  08AF               	movf	(_RF_Data^(0+128)+15),f
  6177  0936  1D03               	skipz
  6178  0937  2981               	goto	l8269
  6179                           
  6180                           ;RF_Control_B1.c: 275: {
  6181                           ;RF_Control_B1.c: 277: setDimmerLights(1,0);
  6182  0938  0020               	movlb	0	; select bank0
  6183  0939  01A4               	clrf	setDimmerLights@status
  6184  093A  3001               	movlw	1
  6185  093B  318A  2257  3189   	fcall	_setDimmerLights
  6186                           
  6187                           ;RF_Control_B1.c: 278: setRFSW_Status(1,0);
  6188  093E  0020               	movlb	0	; select bank0
  6189  093F  01A2               	clrf	setRFSW_Status@command
  6190  0940  3001               	movlw	1
  6191  0941  3198  2068  3189   	fcall	_setRFSW_Status
  6192                           
  6193                           ;RF_Control_B1.c: 279: setSw_Status(1,0);
  6194  0944  0020               	movlb	0	; select bank0
  6195  0945  01A2               	clrf	setSw_Status@command
  6196  0946  3001               	movlw	1
  6197  0947  3198  2077  3189   	fcall	_setSw_Status
  6198                           
  6199                           ;RF_Control_B1.c: 282: setDimmerLights(2,0);
  6200  094A  0020               	movlb	0	; select bank0
  6201  094B  01A4               	clrf	setDimmerLights@status
  6202  094C  3002               	movlw	2
  6203  094D  318A  2257  3189   	fcall	_setDimmerLights
  6204                           
  6205                           ;RF_Control_B1.c: 283: setRFSW_Status(2,0);
  6206  0950  0020               	movlb	0	; select bank0
  6207  0951  01A2               	clrf	setRFSW_Status@command
  6208  0952  3002               	movlw	2
  6209  0953  3198  2068  3189   	fcall	_setRFSW_Status
  6210                           
  6211                           ;RF_Control_B1.c: 284: setSw_Status(2,0);
  6212  0956  0020               	movlb	0	; select bank0
  6213  0957  01A2               	clrf	setSw_Status@command
  6214  0958  3002               	movlw	2
  6215  0959  3198  2077  3189   	fcall	_setSw_Status
  6216                           
  6217                           ;RF_Control_B1.c: 292: Product->Data[9]=0;
  6218  095C  0020               	movlb	0	; select bank0
  6219  095D  086F               	movf	_Product,w
  6220  095E  3E09               	addlw	9
  6221  095F  0086               	movwf	6
  6222  0960  3001               	movlw	1	; select bank2/3
  6223  0961  0087               	movwf	7
  6224  0962  0181               	clrf	1
  6225                           
  6226                           ;RF_Control_B1.c: 293: Product->Data[11]=0;
  6227  0963  086F               	movf	_Product,w
  6228  0964  3E0B               	addlw	11
  6229  0965  0086               	movwf	6
  6230  0966  3001               	movlw	1	; select bank2/3
  6231  0967  0087               	movwf	7
  6232  0968  0181               	clrf	1
  6233                           
  6234                           ;RF_Control_B1.c: 294: Product->Data[15]=0;
  6235  0969  086F               	movf	_Product,w
  6236  096A  3E0F               	addlw	15
  6237  096B  0086               	movwf	6
  6238  096C  3001               	movlw	1	; select bank2/3
  6239  096D  0087               	movwf	7
  6240  096E  0181               	clrf	1
  6241                           
  6242                           ;RF_Control_B1.c: 295: Product->Data[17]=0;
  6243  096F  086F               	movf	_Product,w
  6244  0970  3E11               	addlw	17
  6245  0971  0086               	movwf	6
  6246  0972  3001               	movlw	1	; select bank2/3
  6247  0973  0087               	movwf	7
  6248  0974  0181               	clrf	1
  6249                           
  6250                           ;RF_Control_B1.c: 296: setBuz(1,100);
  6251  0975  3064               	movlw	100
  6252  0976  00A6               	movwf	setBuz@time
  6253  0977  3000               	movlw	0
  6254  0978  00A7               	movwf	setBuz@time+1
  6255  0979  3001               	movlw	1
  6256  097A  3196  2604  3189   	fcall	_setBuz
  6257                           
  6258                           ;RF_Control_B1.c: 297: setTxData(1);
  6259  097D  3001               	movlw	1
  6260  097E  318C  24F5         	fcall	_setTxData
  6261                           
  6262                           ;RF_Control_B1.c: 298: }
  6263  0980  0008               	return
  6264  0981                     l8269:	
  6265                           
  6266                           ;RF_Control_B1.c: 299: else if(RF_Data[15] == 0x20)
  6267  0981  0021               	movlb	1	; select bank1
  6268  0982  082F               	movf	(_RF_Data^(0+128)+15),w
  6269  0983  3A20               	xorlw	32
  6270  0984  1D03               	skipz
  6271  0985  299D               	goto	l8275
  6272                           
  6273                           ;RF_Control_B1.c: 300: {
  6274                           ;RF_Control_B1.c: 301: Product->Data[9]=0;
  6275  0986  0020               	movlb	0	; select bank0
  6276  0987  086F               	movf	_Product,w
  6277  0988  3E09               	addlw	9
  6278  0989  0086               	movwf	6
  6279  098A  3001               	movlw	1	; select bank2/3
  6280  098B  0087               	movwf	7
  6281  098C  0181               	clrf	1
  6282                           
  6283                           ;RF_Control_B1.c: 302: Product->Data[11]=0;
  6284  098D  086F               	movf	_Product,w
  6285  098E  3E0B               	addlw	11
  6286  098F  0086               	movwf	6
  6287  0990  3001               	movlw	1	; select bank2/3
  6288  0991  0087               	movwf	7
  6289  0992  0181               	clrf	1
  6290                           
  6291                           ;RF_Control_B1.c: 303: Product->Data[17]=0;
  6292  0993  086F               	movf	_Product,w
  6293  0994  3E11               	addlw	17
  6294  0995  0086               	movwf	6
  6295  0996  3001               	movlw	1	; select bank2/3
  6296  0997  0087               	movwf	7
  6297  0998  0181               	clrf	1
  6298                           
  6299                           ;RF_Control_B1.c: 304: setTxData(1);
  6300  0999  3001               	movlw	1
  6301  099A  318C  24F5         	fcall	_setTxData
  6302                           
  6303                           ;RF_Control_B1.c: 305: }
  6304  099C  0008               	return
  6305  099D                     l8275:	
  6306                           
  6307                           ;RF_Control_B1.c: 307: else if(RF_Data[15] == 0x01)
  6308  099D  0021               	movlb	1	; select bank1
  6309  099E  082F               	movf	(_RF_Data^(0+128)+15),w
  6310  099F  3A01               	xorlw	1
  6311  09A0  1D03               	skipz
  6312  09A1  29A6               	goto	l8279
  6313                           
  6314                           ;RF_Control_B1.c: 308: {
  6315                           ;RF_Control_B1.c: 309: setRFSW_Control(1);
  6316  09A2  3001               	movlw	1
  6317  09A3  3188  209E         	fcall	_setRFSW_Control
  6318                           
  6319                           ;RF_Control_B1.c: 310: }
  6320  09A5  0008               	return
  6321  09A6                     l8279:	
  6322                           
  6323                           ;RF_Control_B1.c: 312: else if(RF_Data[15] == 0x11)
  6324  09A6  0021               	movlb	1	; select bank1
  6325  09A7  082F               	movf	(_RF_Data^(0+128)+15),w
  6326  09A8  3A11               	xorlw	17
  6327  09A9  1D03               	skipz
  6328  09AA  29AF               	goto	l8283
  6329                           
  6330                           ;RF_Control_B1.c: 313: {
  6331                           ;RF_Control_B1.c: 314: setRFSW_AdjControl(1);
  6332  09AB  3001               	movlw	1
  6333  09AC  319E  26B2         	fcall	_setRFSW_AdjControl
  6334                           
  6335                           ;RF_Control_B1.c: 315: }
  6336  09AE  0008               	return
  6337  09AF                     l8283:	
  6338                           
  6339                           ;RF_Control_B1.c: 320: else if(RF_Data[15] == 0x02)
  6340  09AF  0021               	movlb	1	; select bank1
  6341  09B0  082F               	movf	(_RF_Data^(0+128)+15),w
  6342  09B1  3A02               	xorlw	2
  6343  09B2  1D03               	skipz
  6344  09B3  29B8               	goto	l8287
  6345                           
  6346                           ;RF_Control_B1.c: 321: {
  6347                           ;RF_Control_B1.c: 322: setRFSW_Control(2);
  6348  09B4  3002               	movlw	2
  6349  09B5  3188  209E         	fcall	_setRFSW_Control
  6350                           
  6351                           ;RF_Control_B1.c: 323: }
  6352  09B7  0008               	return
  6353  09B8                     l8287:	
  6354                           
  6355                           ;RF_Control_B1.c: 325: else if(RF_Data[15] == 0x21)
  6356  09B8  0021               	movlb	1	; select bank1
  6357  09B9  082F               	movf	(_RF_Data^(0+128)+15),w
  6358  09BA  3A21               	xorlw	33
  6359  09BB  1D03               	skipz
  6360  09BC  0008               	return
  6361                           
  6362                           ;RF_Control_B1.c: 326: {
  6363                           ;RF_Control_B1.c: 327: setRFSW_AdjControl(2);
  6364  09BD  3002               	movlw	2
  6365  09BE  319E  26B2         	fcall	_setRFSW_AdjControl
  6366  09C0  0008               	return
  6367  09C1                     __end_of_setControl_Lights_Table:	
  6368                           
  6369                           	psect	text19
  6370  089E                     __ptext19:	
  6371 ;; *************** function _setRFSW_Control *****************
  6372 ;; Defined at:
  6373 ;;		line 368 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;  sw              1    wreg     unsigned char 
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;  sw              1   67[BANK0 ] unsigned char 
  6378 ;; Return value:  Size  Location     Type
  6379 ;;		None               void
  6380 ;; Registers used:
  6381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;Total ram usage:        2 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    8
  6394 ;; This function calls:
  6395 ;;		_RfSWPointSelect
  6396 ;;		_setBuz
  6397 ;;		_setDelayOff_GO
  6398 ;;		_setDimmerLights_Switch
  6399 ;;		_setDimmerLights_Trigger
  6400 ;;		_setRF_DimmerLights
  6401 ;;		_setSw_Status
  6402 ;;		_setTxData
  6403 ;; This function is called by:
  6404 ;;		_setControl_Lights_Table
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _setRFSW_Control
  6410  089E                     _setRFSW_Control:	
  6411                           
  6412                           ;incstack = 0
  6413                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6414                           ;setRFSW_Control@sw stored from wreg
  6415  089E  0020               	movlb	0	; select bank0
  6416  089F  00E3               	movwf	setRFSW_Control@sw
  6417                           
  6418                           ;RF_Control_B1.c: 370: RfSWPointSelect(sw);
  6419  08A0  0863               	movf	setRFSW_Control@sw,w
  6420  08A1  3199  2196  3188   	fcall	_RfSWPointSelect
  6421                           
  6422                           ;RF_Control_B1.c: 371: if(!RFSW->Status)
  6423  08A4  0021               	movlb	1	; select bank1
  6424  08A5  083C               	movf	_RFSW^(0+128),w
  6425  08A6  0086               	movwf	6
  6426  08A7  0187               	clrf	7
  6427  08A8  1801               	btfsc	1,0
  6428  08A9  28DF               	goto	l8171
  6429                           
  6430                           ;RF_Control_B1.c: 372: {
  6431                           ;RF_Control_B1.c: 373: if(RF_Data[16] == 0x80)
  6432  08AA  0830               	movf	(_RF_Data^(0+128)+16),w
  6433  08AB  3A80               	xorlw	128
  6434  08AC  1D03               	skipz
  6435  08AD  28BB               	goto	l8161
  6436                           
  6437                           ;RF_Control_B1.c: 374: {
  6438                           ;RF_Control_B1.c: 375: setDelayOff_GO(sw,1,RF_Data[17]);
  6439  08AE  0020               	movlb	0	; select bank0
  6440  08AF  01A3               	clrf	setDelayOff_GO@command
  6441  08B0  0AA3               	incf	setDelayOff_GO@command,f
  6442  08B1  0021               	movlb	1	; select bank1
  6443  08B2  0831               	movf	(_RF_Data^(0+128)+17),w
  6444  08B3  0020               	movlb	0	; select bank0
  6445  08B4  00E2               	movwf	??_setRFSW_Control
  6446  08B5  0862               	movf	??_setRFSW_Control,w
  6447  08B6  00A4               	movwf	setDelayOff_GO@value
  6448  08B7  0863               	movf	setRFSW_Control@sw,w
  6449  08B8  3192  2201  3188   	fcall	_setDelayOff_GO
  6450  08BB                     l8161:	
  6451                           
  6452                           ;RF_Control_B1.c: 376: }
  6453                           ;RF_Control_B1.c: 377: RFSW->Status=1;
  6454  08BB  0021               	movlb	1	; select bank1
  6455  08BC  083C               	movf	_RFSW^(0+128),w
  6456  08BD  0086               	movwf	6
  6457  08BE  0187               	clrf	7
  6458  08BF  1401               	bsf	1,0
  6459                           
  6460                           ;RF_Control_B1.c: 378: setSw_Status(sw,1);
  6461  08C0  0020               	movlb	0	; select bank0
  6462  08C1  01A2               	clrf	setSw_Status@command
  6463  08C2  0AA2               	incf	setSw_Status@command,f
  6464  08C3  0863               	movf	setRFSW_Control@sw,w
  6465  08C4  3198  2077  3188   	fcall	_setSw_Status
  6466                           
  6467                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw,1);
  6468  08C7  0020               	movlb	0	; select bank0
  6469  08C8  01A2               	clrf	setDimmerLights_Trigger@command
  6470  08C9  0AA2               	incf	setDimmerLights_Trigger@command,f
  6471  08CA  0863               	movf	setRFSW_Control@sw,w
  6472  08CB  3198  20A6  3188   	fcall	_setDimmerLights_Trigger
  6473                           
  6474                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw,1);
  6475  08CE  0020               	movlb	0	; select bank0
  6476  08CF  01A2               	clrf	setDimmerLights_Switch@command
  6477  08D0  0AA2               	incf	setDimmerLights_Switch@command,f
  6478  08D1  0863               	movf	setRFSW_Control@sw,w
  6479  08D2  3198  2096  3188   	fcall	_setDimmerLights_Switch
  6480                           
  6481                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw,RFSW->Status);
  6482  08D5  0021               	movlb	1	; select bank1
  6483  08D6  083C               	movf	_RFSW^(0+128),w
  6484  08D7  0086               	movwf	6
  6485  08D8  0187               	clrf	7
  6486  08D9  3000               	movlw	0
  6487  08DA  1801               	btfsc	1,0
  6488  08DB  3001               	movlw	1
  6489  08DC  0020               	movlb	0	; select bank0
  6490  08DD  00DD               	movwf	setRF_DimmerLights@on
  6491  08DE  291D               	goto	L4
  6492  08DF                     l8171:	
  6493                           ;RF_Control_B1.c: 384: }
  6494                           
  6495                           
  6496                           ;RF_Control_B1.c: 385: else
  6497                           ;RF_Control_B1.c: 386: {
  6498                           ;RF_Control_B1.c: 387: if(RF_Data[16] == 0x80)
  6499  08DF  0021               	movlb	1	; select bank1
  6500  08E0  0830               	movf	(_RF_Data^(0+128)+16),w
  6501  08E1  3A80               	xorlw	128
  6502  08E2  1D03               	skipz
  6503  08E3  28F5               	goto	l8175
  6504                           
  6505                           ;RF_Control_B1.c: 388: {
  6506                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw,1,RF_Data[17]);
  6507  08E4  0020               	movlb	0	; select bank0
  6508  08E5  01A3               	clrf	setDelayOff_GO@command
  6509  08E6  0AA3               	incf	setDelayOff_GO@command,f
  6510  08E7  0021               	movlb	1	; select bank1
  6511  08E8  0831               	movf	(_RF_Data^(0+128)+17),w
  6512  08E9  0020               	movlb	0	; select bank0
  6513  08EA  00E2               	movwf	??_setRFSW_Control
  6514  08EB  0862               	movf	??_setRFSW_Control,w
  6515  08EC  00A4               	movwf	setDelayOff_GO@value
  6516  08ED  0863               	movf	setRFSW_Control@sw,w
  6517  08EE  3192  2201  3188   	fcall	_setDelayOff_GO
  6518                           
  6519                           ;RF_Control_B1.c: 390: setRF_DimmerLights(sw,1);
  6520  08F1  0020               	movlb	0	; select bank0
  6521  08F2  01DD               	clrf	setRF_DimmerLights@on
  6522  08F3  0ADD               	incf	setRF_DimmerLights@on,f
  6523  08F4  291D               	goto	L4
  6524  08F5                     l8175:	
  6525                           ;RF_Control_B1.c: 391: }
  6526                           
  6527                           
  6528                           ;RF_Control_B1.c: 392: else
  6529                           ;RF_Control_B1.c: 393: {
  6530                           ;RF_Control_B1.c: 394: RFSW->Status=0;
  6531  08F5  0021               	movlb	1	; select bank1
  6532  08F6  083C               	movf	_RFSW^(0+128),w
  6533  08F7  0086               	movwf	6
  6534  08F8  0187               	clrf	7
  6535  08F9  1001               	bcf	1,0
  6536                           
  6537                           ;RF_Control_B1.c: 395: setSw_Status(sw,0);
  6538  08FA  0020               	movlb	0	; select bank0
  6539  08FB  01A2               	clrf	setSw_Status@command
  6540  08FC  0863               	movf	setRFSW_Control@sw,w
  6541  08FD  3198  2077  3188   	fcall	_setSw_Status
  6542                           
  6543                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw,1);
  6544  0900  0020               	movlb	0	; select bank0
  6545  0901  01A2               	clrf	setDimmerLights_Trigger@command
  6546  0902  0AA2               	incf	setDimmerLights_Trigger@command,f
  6547  0903  0863               	movf	setRFSW_Control@sw,w
  6548  0904  3198  20A6  3188   	fcall	_setDimmerLights_Trigger
  6549                           
  6550                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw,RFSW->Status);
  6551  0907  0021               	movlb	1	; select bank1
  6552  0908  083C               	movf	_RFSW^(0+128),w
  6553  0909  0086               	movwf	6
  6554  090A  0187               	clrf	7
  6555  090B  3000               	movlw	0
  6556  090C  1801               	btfsc	1,0
  6557  090D  3001               	movlw	1
  6558  090E  0020               	movlb	0	; select bank0
  6559  090F  00A2               	movwf	setDimmerLights_Switch@command
  6560  0910  0863               	movf	setRFSW_Control@sw,w
  6561  0911  3198  2096  3188   	fcall	_setDimmerLights_Switch
  6562                           
  6563                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw,0,0);
  6564  0914  0020               	movlb	0	; select bank0
  6565  0915  01A3               	clrf	setDelayOff_GO@command
  6566  0916  01A4               	clrf	setDelayOff_GO@value
  6567  0917  0863               	movf	setRFSW_Control@sw,w
  6568  0918  3192  2201  3188   	fcall	_setDelayOff_GO
  6569                           
  6570                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw,0);
  6571  091B  0020               	movlb	0	; select bank0
  6572  091C  01DD               	clrf	setRF_DimmerLights@on
  6573  091D                     L4:	
  6574  091D  0863               	movf	setRFSW_Control@sw,w
  6575  091E  3194  2449  3188   	fcall	_setRF_DimmerLights
  6576                           
  6577                           ;RF_Control_B1.c: 402: }
  6578                           ;RF_Control_B1.c: 403: }
  6579                           ;RF_Control_B1.c: 404: setBuz(1,100);
  6580  0921  3064               	movlw	100
  6581  0922  0020               	movlb	0	; select bank0
  6582  0923  00A6               	movwf	setBuz@time
  6583  0924  3000               	movlw	0
  6584  0925  00A7               	movwf	setBuz@time+1
  6585  0926  3001               	movlw	1
  6586  0927  3196  2604  3188   	fcall	_setBuz
  6587                           
  6588                           ;RF_Control_B1.c: 405: setTxData(1);
  6589  092A  3001               	movlw	1
  6590  092B  318C  24F5         	fcall	_setTxData
  6591  092D  0008               	return
  6592  092E                     __end_of_setRFSW_Control:	
  6593                           
  6594                           	psect	text20
  6595  1201                     __ptext20:	
  6596 ;; *************** function _setDelayOff_GO *****************
  6597 ;; Defined at:
  6598 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  sw              1    wreg     unsigned char 
  6601 ;;  command         1    3[BANK0 ] unsigned char 
  6602 ;;  value           1    4[BANK0 ] unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  sw              1    7[BANK0 ] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;		None               void
  6607 ;; Registers used:
  6608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6614 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;Total ram usage:        5 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    5
  6621 ;; This function calls:
  6622 ;;		_DelayOffPointSelect
  6623 ;;		_DelayTimejudge
  6624 ;; This function is called by:
  6625 ;;		_setRFSW_Control
  6626 ;;		_Sw_DimmerOffFunc
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           
  6631                           ;psect for function _setDelayOff_GO
  6632  1201                     _setDelayOff_GO:	
  6633                           
  6634                           ;incstack = 0
  6635                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6636                           ;setDelayOff_GO@sw stored from wreg
  6637  1201  0020               	movlb	0	; select bank0
  6638  1202  00A7               	movwf	setDelayOff_GO@sw
  6639                           
  6640                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  6641  1203  0827               	movf	setDelayOff_GO@sw,w
  6642  1204  3199  21C2  3192   	fcall	_DelayOffPointSelect
  6643                           
  6644                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  6645  1207  0021               	movlb	1	; select bank1
  6646  1208  0838               	movf	_DelayOff^(0+128),w
  6647  1209  0086               	movwf	6
  6648  120A  0187               	clrf	7
  6649  120B  1C01               	btfss	1,0
  6650  120C  0008               	return
  6651                           
  6652                           ;DelayOff_B1.c: 96: {
  6653                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  6654  120D  0838               	movf	_DelayOff^(0+128),w
  6655  120E  0086               	movwf	6
  6656  120F  0187               	clrf	7
  6657  1210  0020               	movlb	0	; select bank0
  6658  1211  0823               	movf	setDelayOff_GO@command,w
  6659  1212  1081               	bcf	1,1
  6660  1213  1D03               	skipz
  6661  1214  1481               	bsf	1,1
  6662                           
  6663                           ;DelayOff_B1.c: 98: if(command)
  6664  1215  0823               	movf	setDelayOff_GO@command,w
  6665  1216  1903               	btfsc	3,2
  6666  1217  2A43               	goto	l6089
  6667                           
  6668                           ;DelayOff_B1.c: 99: {
  6669                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  6670  1218  0824               	movf	setDelayOff_GO@value,w
  6671  1219  319C  24B0  3192   	fcall	_DelayTimejudge
  6672  121C  0020               	movlb	0	; select bank0
  6673  121D  00A5               	movwf	??_setDelayOff_GO
  6674  121E  0021               	movlb	1	; select bank1
  6675  121F  0A38               	incf	_DelayOff^(0+128),w
  6676  1220  0086               	movwf	6
  6677  1221  0187               	clrf	7
  6678  1222  0020               	movlb	0	; select bank0
  6679  1223  0825               	movf	??_setDelayOff_GO,w
  6680  1224  0081               	movwf	1
  6681                           
  6682                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  6683  1225  300F               	movlw	15
  6684  1226  0524               	andwf	setDelayOff_GO@value,w
  6685  1227  00A5               	movwf	??_setDelayOff_GO
  6686  1228  0825               	movf	??_setDelayOff_GO,w
  6687  1229  3A05               	xorlw	5
  6688  122A  1903               	skipnz
  6689  122B  2A30               	goto	l6083
  6690  122C  0824               	movf	setDelayOff_GO@value,w
  6691  122D  390F               	andlw	15
  6692  122E  1D03               	btfss	3,2
  6693  122F  2A36               	goto	l6087
  6694  1230                     l6083:	
  6695  1230  3026               	movlw	38
  6696  1231  0224               	subwf	setDelayOff_GO@value,w
  6697  1232  1803               	skipnc
  6698  1233  2A36               	goto	l6087
  6699                           
  6700                           ;DelayOff_B1.c: 102: {
  6701                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  6702  1234  0824               	movf	setDelayOff_GO@value,w
  6703  1235  2A37               	goto	L5
  6704  1236                     l6087:	
  6705                           ;DelayOff_B1.c: 104: }
  6706                           
  6707                           
  6708                           ;DelayOff_B1.c: 105: else
  6709                           ;DelayOff_B1.c: 106: {
  6710                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  6711  1236  3005               	movlw	5
  6712  1237                     L5:	
  6713  1237  00A5               	movwf	??_setDelayOff_GO
  6714  1238  0827               	movf	setDelayOff_GO@sw,w
  6715  1239  3E1A               	addlw	26
  6716  123A  076F               	addwf	_Product,w
  6717  123B  00A6               	movwf	??_setDelayOff_GO+1
  6718  123C  0826               	movf	??_setDelayOff_GO+1,w
  6719  123D  0086               	movwf	6
  6720  123E  3001               	movlw	1	; select bank2/3
  6721  123F  0087               	movwf	7
  6722  1240  0825               	movf	??_setDelayOff_GO,w
  6723  1241  0081               	movwf	1
  6724                           
  6725                           ;DelayOff_B1.c: 108: }
  6726                           ;DelayOff_B1.c: 109: }
  6727  1242  2A4F               	goto	l6093
  6728  1243                     l6089:	
  6729                           
  6730                           ;DelayOff_B1.c: 110: else if(!command)
  6731  1243  08A3               	movf	setDelayOff_GO@command,f
  6732  1244  1D03               	skipz
  6733  1245  2A4F               	goto	l6093
  6734                           
  6735                           ;DelayOff_B1.c: 111: {
  6736                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  6737  1246  0827               	movf	setDelayOff_GO@sw,w
  6738  1247  3E1A               	addlw	26
  6739  1248  076F               	addwf	_Product,w
  6740  1249  00A5               	movwf	??_setDelayOff_GO
  6741  124A  0825               	movf	??_setDelayOff_GO,w
  6742  124B  0086               	movwf	6
  6743  124C  3001               	movlw	1	; select bank2/3
  6744  124D  0087               	movwf	7
  6745  124E  0181               	clrf	1
  6746  124F                     l6093:	
  6747                           
  6748                           ;DelayOff_B1.c: 113: }
  6749                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  6750  124F  0021               	movlb	1	; select bank1
  6751  1250  0838               	movf	_DelayOff^(0+128),w
  6752  1251  3E02               	addlw	2
  6753  1252  0086               	movwf	6
  6754  1253  0187               	clrf	7
  6755  1254  3000               	movlw	0
  6756  1255  3FC0               	movwi [0]fsr1
  6757  1256  3FC1               	movwi [1]fsr1
  6758                           
  6759                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  6760  1257  0838               	movf	_DelayOff^(0+128),w
  6761  1258  3E04               	addlw	4
  6762  1259  0086               	movwf	6
  6763  125A  0187               	clrf	7
  6764  125B  0181               	clrf	1
  6765  125C  0008               	return
  6766  125D                     __end_of_setDelayOff_GO:	
  6767                           
  6768                           	psect	text21
  6769  1CB0                     __ptext21:	
  6770 ;; *************** function _DelayTimejudge *****************
  6771 ;; Defined at:
  6772 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  value           1    wreg     unsigned char 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;  value           1    2[BANK0 ] unsigned char 
  6777 ;;  i               1    1[BANK0 ] unsigned char 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      unsigned char 
  6780 ;; Registers used:
  6781 ;;		wreg
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;Total ram usage:        3 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    4
  6794 ;; This function calls:
  6795 ;;		Nothing
  6796 ;; This function is called by:
  6797 ;;		_setDelayOff_GO
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function _DelayTimejudge
  6803  1CB0                     _DelayTimejudge:	
  6804                           
  6805                           ;incstack = 0
  6806                           ; Regs used in _DelayTimejudge: [wreg]
  6807                           ;DelayTimejudge@value stored from wreg
  6808  1CB0  0020               	movlb	0	; select bank0
  6809  1CB1  00A2               	movwf	DelayTimejudge@value
  6810                           
  6811                           ;DelayOff_B1.c: 121: char i=5;
  6812  1CB2  3005               	movlw	5
  6813  1CB3  00A0               	movwf	??_DelayTimejudge
  6814  1CB4  0820               	movf	??_DelayTimejudge,w
  6815  1CB5  00A1               	movwf	DelayTimejudge@i
  6816                           
  6817                           ;DelayOff_B1.c: 122: if(value == 0x05)
  6818  1CB6  0822               	movf	DelayTimejudge@value,w
  6819  1CB7  3A05               	xorlw	5
  6820  1CB8  1D03               	skipz
  6821  1CB9  2CBC               	goto	l5933
  6822                           
  6823                           ;DelayOff_B1.c: 123: {
  6824                           ;DelayOff_B1.c: 124: i=5;
  6825  1CBA  3005               	movlw	5
  6826  1CBB  2CD9               	goto	L10
  6827  1CBC                     l5933:	
  6828                           ;DelayOff_B1.c: 125: }
  6829                           
  6830                           
  6831                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  6832  1CBC  0822               	movf	DelayTimejudge@value,w
  6833  1CBD  3A10               	xorlw	16
  6834  1CBE  1D03               	skipz
  6835  1CBF  2CC2               	goto	l5937
  6836                           
  6837                           ;DelayOff_B1.c: 127: {
  6838                           ;DelayOff_B1.c: 128: i=10;
  6839  1CC0  300A               	movlw	10
  6840  1CC1  2CD9               	goto	L10
  6841  1CC2                     l5937:	
  6842                           ;DelayOff_B1.c: 129: }
  6843                           
  6844                           
  6845                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  6846  1CC2  0822               	movf	DelayTimejudge@value,w
  6847  1CC3  3A15               	xorlw	21
  6848  1CC4  1D03               	skipz
  6849  1CC5  2CC8               	goto	l5941
  6850                           
  6851                           ;DelayOff_B1.c: 131: {
  6852                           ;DelayOff_B1.c: 132: i=15;
  6853  1CC6  300F               	movlw	15
  6854  1CC7  2CD9               	goto	L10
  6855  1CC8                     l5941:	
  6856                           ;DelayOff_B1.c: 133: }
  6857                           
  6858                           
  6859                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  6860  1CC8  0822               	movf	DelayTimejudge@value,w
  6861  1CC9  3A20               	xorlw	32
  6862  1CCA  1D03               	skipz
  6863  1CCB  2CCE               	goto	l5945
  6864                           
  6865                           ;DelayOff_B1.c: 135: {
  6866                           ;DelayOff_B1.c: 136: i=20;
  6867  1CCC  3014               	movlw	20
  6868  1CCD  2CD9               	goto	L10
  6869  1CCE                     l5945:	
  6870                           ;DelayOff_B1.c: 137: }
  6871                           
  6872                           
  6873                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  6874  1CCE  0822               	movf	DelayTimejudge@value,w
  6875  1CCF  3A25               	xorlw	37
  6876  1CD0  1D03               	skipz
  6877  1CD1  2CD4               	goto	l5949
  6878                           
  6879                           ;DelayOff_B1.c: 139: {
  6880                           ;DelayOff_B1.c: 140: i=25;
  6881  1CD2  3019               	movlw	25
  6882  1CD3  2CD9               	goto	L10
  6883  1CD4                     l5949:	
  6884                           ;DelayOff_B1.c: 141: }
  6885                           
  6886                           
  6887                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  6888  1CD4  0822               	movf	DelayTimejudge@value,w
  6889  1CD5  3A30               	xorlw	48
  6890  1CD6  1D03               	skipz
  6891  1CD7  2CDC               	goto	l674
  6892                           
  6893                           ;DelayOff_B1.c: 143: {
  6894                           ;DelayOff_B1.c: 144: i=30;
  6895  1CD8  301E               	movlw	30
  6896  1CD9                     L10:	
  6897  1CD9  00A0               	movwf	??_DelayTimejudge
  6898  1CDA  0820               	movf	??_DelayTimejudge,w
  6899  1CDB  00A1               	movwf	DelayTimejudge@i
  6900  1CDC                     l674:	
  6901                           
  6902                           ;DelayOff_B1.c: 145: }
  6903                           ;DelayOff_B1.c: 146: return i;
  6904  1CDC  0821               	movf	DelayTimejudge@i,w
  6905  1CDD  0008               	return
  6906  1CDE                     __end_of_DelayTimejudge:	
  6907                           
  6908                           	psect	text22
  6909  1EB2                     __ptext22:	
  6910 ;; *************** function _setRFSW_AdjControl *****************
  6911 ;; Defined at:
  6912 ;;		line 408 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  sw              1    wreg     unsigned char 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  sw              1   70[BANK0 ] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;		None               void
  6919 ;; Registers used:
  6920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;Total ram usage:        3 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    9
  6933 ;; This function calls:
  6934 ;;		_RfSWPointSelect
  6935 ;;		_setRF_DimmerValue
  6936 ;;		_setTxData
  6937 ;; This function is called by:
  6938 ;;		_setControl_Lights_Table
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _setRFSW_AdjControl
  6944  1EB2                     _setRFSW_AdjControl:	
  6945                           
  6946                           ;incstack = 0
  6947                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6948                           ;setRFSW_AdjControl@sw stored from wreg
  6949  1EB2  0020               	movlb	0	; select bank0
  6950  1EB3  00E6               	movwf	setRFSW_AdjControl@sw
  6951                           
  6952                           ;RF_Control_B1.c: 410: RfSWPointSelect(sw);
  6953  1EB4  0866               	movf	setRFSW_AdjControl@sw,w
  6954  1EB5  3199  2196  319E   	fcall	_RfSWPointSelect
  6955                           
  6956                           ;RF_Control_B1.c: 411: if(RFSW->Status)
  6957  1EB8  0021               	movlb	1	; select bank1
  6958  1EB9  083C               	movf	_RFSW^(0+128),w
  6959  1EBA  0086               	movwf	6
  6960  1EBB  0187               	clrf	7
  6961  1EBC  1C01               	btfss	1,0
  6962  1EBD  2ECA               	goto	l6307
  6963                           
  6964                           ;RF_Control_B1.c: 412: {
  6965                           ;RF_Control_B1.c: 413: Memory->Modify=1;
  6966  1EBE  087C               	movf	_Memory,w
  6967  1EBF  3E22               	addlw	34
  6968  1EC0  0086               	movwf	6
  6969  1EC1  3001               	movlw	1	; select bank2/3
  6970  1EC2  0087               	movwf	7
  6971  1EC3  1401               	bsf	1,0
  6972                           
  6973                           ;RF_Control_B1.c: 414: setRF_DimmerValue(sw);
  6974  1EC4  0020               	movlb	0	; select bank0
  6975  1EC5  0866               	movf	setRFSW_AdjControl@sw,w
  6976  1EC6  319E  2606  319E   	fcall	_setRF_DimmerValue
  6977                           
  6978                           ;RF_Control_B1.c: 415: }
  6979  1EC9  2EDC               	goto	l2469
  6980  1ECA                     l6307:	
  6981                           
  6982                           ;RF_Control_B1.c: 416: else
  6983                           ;RF_Control_B1.c: 417: {
  6984                           ;RF_Control_B1.c: 418: Product->Data[9]=Product->Data[20+sw];
  6985  1ECA  0020               	movlb	0	; select bank0
  6986  1ECB  0866               	movf	setRFSW_AdjControl@sw,w
  6987  1ECC  3E14               	addlw	20
  6988  1ECD  076F               	addwf	_Product,w
  6989  1ECE  00E4               	movwf	??_setRFSW_AdjControl
  6990  1ECF  0864               	movf	??_setRFSW_AdjControl,w
  6991  1ED0  0086               	movwf	6
  6992  1ED1  3001               	movlw	1	; select bank2/3
  6993  1ED2  0087               	movwf	7
  6994  1ED3  0801               	movf	1,w
  6995  1ED4  00E5               	movwf	??_setRFSW_AdjControl+1
  6996  1ED5  086F               	movf	_Product,w
  6997  1ED6  3E09               	addlw	9
  6998  1ED7  0086               	movwf	6
  6999  1ED8  3001               	movlw	1	; select bank2/3
  7000  1ED9  0087               	movwf	7
  7001  1EDA  0865               	movf	??_setRFSW_AdjControl+1,w
  7002  1EDB  0081               	movwf	1
  7003  1EDC                     l2469:	
  7004                           
  7005                           ;RF_Control_B1.c: 419: }
  7006                           ;RF_Control_B1.c: 420: Product->Data[17]=Product->Data[26+sw];
  7007  1EDC  0020               	movlb	0	; select bank0
  7008  1EDD  0866               	movf	setRFSW_AdjControl@sw,w
  7009  1EDE  3E1A               	addlw	26
  7010  1EDF  076F               	addwf	_Product,w
  7011  1EE0  00E4               	movwf	??_setRFSW_AdjControl
  7012  1EE1  0864               	movf	??_setRFSW_AdjControl,w
  7013  1EE2  0086               	movwf	6
  7014  1EE3  3001               	movlw	1	; select bank2/3
  7015  1EE4  0087               	movwf	7
  7016  1EE5  0801               	movf	1,w
  7017  1EE6  00E5               	movwf	??_setRFSW_AdjControl+1
  7018  1EE7  086F               	movf	_Product,w
  7019  1EE8  3E11               	addlw	17
  7020  1EE9  0086               	movwf	6
  7021  1EEA  3001               	movlw	1	; select bank2/3
  7022  1EEB  0087               	movwf	7
  7023  1EEC  0865               	movf	??_setRFSW_AdjControl+1,w
  7024  1EED  0081               	movwf	1
  7025                           
  7026                           ;RF_Control_B1.c: 421: setTxData(1);
  7027  1EEE  3001               	movlw	1
  7028  1EEF  318C  24F5         	fcall	_setTxData
  7029  1EF1  0008               	return
  7030  1EF2                     __end_of_setRFSW_AdjControl:	
  7031                           
  7032                           	psect	text23
  7033  1E06                     __ptext23:	
  7034 ;; *************** function _setRF_DimmerValue *****************
  7035 ;; Defined at:
  7036 ;;		line 432 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  lights          1    wreg     unsigned char 
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;  lights          1   67[BANK0 ] unsigned char 
  7041 ;; Return value:  Size  Location     Type
  7042 ;;		None               void
  7043 ;; Registers used:
  7044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;Total ram usage:        3 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    8
  7057 ;; This function calls:
  7058 ;;		_setDimmerLights_AdjRF
  7059 ;; This function is called by:
  7060 ;;		_setRFSW_AdjControl
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _setRF_DimmerValue
  7066  1E06                     _setRF_DimmerValue:	
  7067                           
  7068                           ;incstack = 0
  7069                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7070                           ;setRF_DimmerValue@lights stored from wreg
  7071  1E06  0020               	movlb	0	; select bank0
  7072  1E07  00E3               	movwf	setRF_DimmerValue@lights
  7073                           
  7074                           ;RF_Control_B1.c: 434: if(RF_Data[9] > 0x64)
  7075  1E08  3065               	movlw	101
  7076  1E09  0021               	movlb	1	; select bank1
  7077  1E0A  0229               	subwf	(_RF_Data^(0+128)+9),w
  7078  1E0B  1C03               	skipc
  7079  1E0C  2E13               	goto	l6173
  7080                           
  7081                           ;RF_Control_B1.c: 435: {
  7082                           ;RF_Control_B1.c: 436: RF_Data[9]=0x64;
  7083  1E0D  3064               	movlw	100
  7084  1E0E  0020               	movlb	0	; select bank0
  7085  1E0F  00E1               	movwf	??_setRF_DimmerValue
  7086  1E10  0861               	movf	??_setRF_DimmerValue,w
  7087  1E11  0021               	movlb	1	; select bank1
  7088  1E12  00A9               	movwf	(_RF_Data^(0+128)+9)
  7089  1E13                     l6173:	
  7090                           
  7091                           ;RF_Control_B1.c: 437: }
  7092                           ;RF_Control_B1.c: 438: Product->Data[9]=RF_Data[9];
  7093  1E13  0829               	movf	(_RF_Data^(0+128)+9),w
  7094  1E14  0020               	movlb	0	; select bank0
  7095  1E15  00E1               	movwf	??_setRF_DimmerValue
  7096  1E16  086F               	movf	_Product,w
  7097  1E17  3E09               	addlw	9
  7098  1E18  0086               	movwf	6
  7099  1E19  3001               	movlw	1	; select bank2/3
  7100  1E1A  0087               	movwf	7
  7101  1E1B  0861               	movf	??_setRF_DimmerValue,w
  7102  1E1C  0081               	movwf	1
  7103                           
  7104                           ;RF_Control_B1.c: 439: Product->Data[11]=lights;
  7105  1E1D  0863               	movf	setRF_DimmerValue@lights,w
  7106  1E1E  00E1               	movwf	??_setRF_DimmerValue
  7107  1E1F  086F               	movf	_Product,w
  7108  1E20  3E0B               	addlw	11
  7109  1E21  0086               	movwf	6
  7110  1E22  3001               	movlw	1	; select bank2/3
  7111  1E23  0087               	movwf	7
  7112  1E24  0861               	movf	??_setRF_DimmerValue,w
  7113  1E25  0081               	movwf	1
  7114                           
  7115                           ;RF_Control_B1.c: 440: Product->Data[(20+lights)]=Product->Data[9];
  7116  1E26  086F               	movf	_Product,w
  7117  1E27  3E09               	addlw	9
  7118  1E28  0086               	movwf	6
  7119  1E29  3001               	movlw	1	; select bank2/3
  7120  1E2A  0087               	movwf	7
  7121  1E2B  0801               	movf	1,w
  7122  1E2C  00E1               	movwf	??_setRF_DimmerValue
  7123  1E2D  0863               	movf	setRF_DimmerValue@lights,w
  7124  1E2E  3E14               	addlw	20
  7125  1E2F  076F               	addwf	_Product,w
  7126  1E30  00E2               	movwf	??_setRF_DimmerValue+1
  7127  1E31  0862               	movf	??_setRF_DimmerValue+1,w
  7128  1E32  0086               	movwf	6
  7129  1E33  3001               	movlw	1	; select bank2/3
  7130  1E34  0087               	movwf	7
  7131  1E35  0861               	movf	??_setRF_DimmerValue,w
  7132  1E36  0081               	movwf	1
  7133                           
  7134                           ;RF_Control_B1.c: 441: setDimmerLights_AdjRF(lights);
  7135  1E37  0863               	movf	setRF_DimmerValue@lights,w
  7136  1E38  319B  236E         	fcall	_setDimmerLights_AdjRF
  7137  1E3A  0008               	return
  7138  1E3B                     __end_of_setRF_DimmerValue:	
  7139                           
  7140                           	psect	text24
  7141  1B6E                     __ptext24:	
  7142 ;; *************** function _setDimmerLights_AdjRF *****************
  7143 ;; Defined at:
  7144 ;;		line 414 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  lights          1    wreg     unsigned char 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  lights          1   64[BANK0 ] unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;		None               void
  7151 ;; Registers used:
  7152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7162 ;;Total ram usage:        2 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    7
  7165 ;; This function calls:
  7166 ;;		_DimmerLightsPointSelect
  7167 ;;		_getPercentValue
  7168 ;; This function is called by:
  7169 ;;		_setRF_DimmerValue
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           
  7174                           ;psect for function _setDimmerLights_AdjRF
  7175  1B6E                     _setDimmerLights_AdjRF:	
  7176                           
  7177                           ;incstack = 0
  7178                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7179                           ;setDimmerLights_AdjRF@lights stored from wreg
  7180  1B6E  0020               	movlb	0	; select bank0
  7181  1B6F  00E0               	movwf	setDimmerLights_AdjRF@lights
  7182                           
  7183                           ;Dimmer_B1.c: 416: DimmerLightsPointSelect(lights);
  7184  1B70  0860               	movf	setDimmerLights_AdjRF@lights,w
  7185  1B71  3199  2107  319B   	fcall	_DimmerLightsPointSelect
  7186                           
  7187                           ;Dimmer_B1.c: 417: DimmerLights->AdjRF=1;
  7188  1B74  0020               	movlb	0	; select bank0
  7189  1B75  086C               	movf	_DimmerLights,w
  7190  1B76  0086               	movwf	6
  7191  1B77  3001               	movlw	1	; select bank2/3
  7192  1B78  0087               	movwf	7
  7193  1B79  1501               	bsf	1,2
  7194                           
  7195                           ;Dimmer_B1.c: 418: DimmerLights->Signal=1;
  7196  1B7A  086C               	movf	_DimmerLights,w
  7197  1B7B  0086               	movwf	6
  7198  1B7C  3001               	movlw	1	; select bank2/3
  7199  1B7D  0087               	movwf	7
  7200  1B7E  1481               	bsf	1,1
  7201                           
  7202                           ;Dimmer_B1.c: 419: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  7203  1B7F  086F               	movf	_Product,w
  7204  1B80  3E09               	addlw	9
  7205  1B81  0086               	movwf	6
  7206  1B82  3001               	movlw	1	; select bank2/3
  7207  1B83  0087               	movwf	7
  7208  1B84  0801               	movf	1,w
  7209  1B85  3191  21A6         	fcall	_getPercentValue
  7210  1B87  0020               	movlb	0	; select bank0
  7211  1B88  00DF               	movwf	??_setDimmerLights_AdjRF
  7212  1B89  086C               	movf	_DimmerLights,w
  7213  1B8A  3E05               	addlw	5
  7214  1B8B  0086               	movwf	6
  7215  1B8C  3001               	movlw	1	; select bank2/3
  7216  1B8D  0087               	movwf	7
  7217  1B8E  085F               	movf	??_setDimmerLights_AdjRF,w
  7218  1B8F  0081               	movwf	1
  7219  1B90  0008               	return
  7220  1B91                     __end_of_setDimmerLights_AdjRF:	
  7221                           
  7222                           	psect	text25
  7223  11A6                     __ptext25:	
  7224 ;; *************** function _getPercentValue *****************
  7225 ;; Defined at:
  7226 ;;		line 481 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;  value           1    wreg     unsigned char 
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;  value           1   59[BANK0 ] unsigned char 
  7231 ;;  i               3   60[BANK0 ] float 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      unsigned char 
  7234 ;; Registers used:
  7235 ;;		wreg, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        6 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    6
  7248 ;; This function calls:
  7249 ;;		___awtoft
  7250 ;;		___ftadd
  7251 ;;		___ftdiv
  7252 ;;		___ftmul
  7253 ;;		___fttol
  7254 ;; This function is called by:
  7255 ;;		_setDimmerLights_AdjRF
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           
  7260                           ;psect for function _getPercentValue
  7261  11A6                     _getPercentValue:	
  7262                           
  7263                           ;incstack = 0
  7264                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7265                           ;getPercentValue@value stored from wreg
  7266  11A6  0020               	movlb	0	; select bank0
  7267  11A7  00DB               	movwf	getPercentValue@value
  7268                           
  7269                           ;Dimmer_B1.c: 490: float i=((char)(65*1.5))-((char)(20*1.5));
  7270  11A8  3000               	movlw	0
  7271  11A9  00DC               	movwf	getPercentValue@i
  7272  11AA  3086               	movlw	134
  7273  11AB  00DD               	movwf	getPercentValue@i+1
  7274  11AC  3042               	movlw	66
  7275  11AD  00DE               	movwf	getPercentValue@i+2
  7276                           
  7277                           ;Dimmer_B1.c: 491: i/=100;
  7278  11AE  3000               	movlw	0
  7279  11AF  00AE               	movwf	___ftdiv@f2
  7280  11B0  30C8               	movlw	200
  7281  11B1  00AF               	movwf	___ftdiv@f2+1
  7282  11B2  3042               	movlw	66
  7283  11B3  00B0               	movwf	___ftdiv@f2+2
  7284  11B4  085C               	movf	getPercentValue@i,w
  7285  11B5  00B1               	movwf	___ftdiv@f1
  7286  11B6  085D               	movf	getPercentValue@i+1,w
  7287  11B7  00B2               	movwf	___ftdiv@f1+1
  7288  11B8  085E               	movf	getPercentValue@i+2,w
  7289  11B9  00B3               	movwf	___ftdiv@f1+2
  7290  11BA  318B  2398  3191   	fcall	___ftdiv
  7291  11BD  0020               	movlb	0	; select bank0
  7292  11BE  082E               	movf	?___ftdiv,w
  7293  11BF  00DC               	movwf	getPercentValue@i
  7294  11C0  082F               	movf	?___ftdiv+1,w
  7295  11C1  00DD               	movwf	getPercentValue@i+1
  7296  11C2  0830               	movf	?___ftdiv+2,w
  7297  11C3  00DE               	movwf	getPercentValue@i+2
  7298                           
  7299                           ;Dimmer_B1.c: 492: return (char)(((100-value)*i)+((char)(65*1.5)));
  7300  11C4  085B               	movf	getPercentValue@value,w
  7301  11C5  00D9               	movwf	??_getPercentValue
  7302  11C6  01DA               	clrf	??_getPercentValue+1
  7303  11C7  09D9               	comf	??_getPercentValue,f
  7304  11C8  09DA               	comf	??_getPercentValue+1,f
  7305  11C9  0AD9               	incf	??_getPercentValue,f
  7306  11CA  1903               	skipnz
  7307  11CB  0ADA               	incf	??_getPercentValue+1,f
  7308  11CC  0859               	movf	??_getPercentValue,w
  7309  11CD  3E64               	addlw	100
  7310  11CE  00A8               	movwf	___awtoft@c
  7311  11CF  3000               	movlw	0
  7312  11D0  3D5A               	addwfc	??_getPercentValue+1,w
  7313  11D1  00A9               	movwf	___awtoft@c+1
  7314  11D2  319B  2308  3191   	fcall	___awtoft
  7315  11D5  0020               	movlb	0	; select bank0
  7316  11D6  0828               	movf	?___awtoft,w
  7317  11D7  00B1               	movwf	___ftmul@f2
  7318  11D8  0829               	movf	?___awtoft+1,w
  7319  11D9  00B2               	movwf	___ftmul@f2+1
  7320  11DA  082A               	movf	?___awtoft+2,w
  7321  11DB  00B3               	movwf	___ftmul@f2+2
  7322  11DC  085C               	movf	getPercentValue@i,w
  7323  11DD  00AE               	movwf	___ftmul@f1
  7324  11DE  085D               	movf	getPercentValue@i+1,w
  7325  11DF  00AF               	movwf	___ftmul@f1+1
  7326  11E0  085E               	movf	getPercentValue@i+2,w
  7327  11E1  00B0               	movwf	___ftmul@f1+2
  7328  11E2  318C  2441  3191   	fcall	___ftmul
  7329  11E5  0020               	movlb	0	; select bank0
  7330  11E6  082E               	movf	?___ftmul,w
  7331  11E7  00C1               	movwf	___ftadd@f2
  7332  11E8  082F               	movf	?___ftmul+1,w
  7333  11E9  00C2               	movwf	___ftadd@f2+1
  7334  11EA  0830               	movf	?___ftmul+2,w
  7335  11EB  00C3               	movwf	___ftadd@f2+2
  7336  11EC  3000               	movlw	0
  7337  11ED  00BE               	movwf	___ftadd@f1
  7338  11EE  30C2               	movlw	194
  7339  11EF  00BF               	movwf	___ftadd@f1+1
  7340  11F0  3042               	movlw	66
  7341  11F1  00C0               	movwf	___ftadd@f1+2
  7342  11F2  3187  2700  3191   	fcall	___ftadd
  7343  11F5  0020               	movlb	0	; select bank0
  7344  11F6  083E               	movf	?___ftadd,w
  7345  11F7  00CB               	movwf	___fttol@f1
  7346  11F8  083F               	movf	?___ftadd+1,w
  7347  11F9  00CC               	movwf	___fttol@f1+1
  7348  11FA  0840               	movf	?___ftadd+2,w
  7349  11FB  00CD               	movwf	___fttol@f1+2
  7350  11FC  3197  2779         	fcall	___fttol
  7351  11FE  0020               	movlb	0	; select bank0
  7352  11FF  084B               	movf	?___fttol,w
  7353  1200  0008               	return
  7354  1201                     __end_of_getPercentValue:	
  7355                           
  7356                           	psect	text26
  7357  0C41                     __ptext26:	
  7358 ;; *************** function ___ftmul *****************
  7359 ;; Defined at:
  7360 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  f1              3   14[BANK0 ] float 
  7363 ;;  f2              3   17[BANK0 ] float 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7366 ;;  sign            1   29[BANK0 ] unsigned char 
  7367 ;;  cntr            1   28[BANK0 ] unsigned char 
  7368 ;;  exp             1   24[BANK0 ] unsigned char 
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  3   14[BANK0 ] float 
  7371 ;; Registers used:
  7372 ;;		wreg, status,2, status,0, pclath, cstack
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7378 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7381 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7382 ;;Total ram usage:       16 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    5
  7385 ;; This function calls:
  7386 ;;		___ftpack
  7387 ;; This function is called by:
  7388 ;;		_getPercentValue
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           
  7393                           ;psect for function ___ftmul
  7394  0C41                     ___ftmul:	
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7398  0C41  0020               	movlb	0	; select bank0
  7399  0C42  082E               	movf	___ftmul@f1,w
  7400  0C43  00B4               	movwf	??___ftmul
  7401  0C44  082F               	movf	___ftmul@f1+1,w
  7402  0C45  00B5               	movwf	??___ftmul+1
  7403  0C46  0830               	movf	___ftmul@f1+2,w
  7404  0C47  00B6               	movwf	??___ftmul+2
  7405  0C48  1003               	clrc
  7406  0C49  0D35               	rlf	??___ftmul+1,w
  7407  0C4A  0D36               	rlf	??___ftmul+2,w
  7408  0C4B  00B7               	movwf	??___ftmul+3
  7409  0C4C  0837               	movf	??___ftmul+3,w
  7410  0C4D  00B8               	movwf	___ftmul@exp
  7411  0C4E  08B8               	movf	___ftmul@exp,f
  7412  0C4F  1D03               	skipz
  7413  0C50  2C58               	goto	l5819
  7414  0C51  3000               	movlw	0
  7415  0C52  00AE               	movwf	?___ftmul
  7416  0C53  3000               	movlw	0
  7417  0C54  00AF               	movwf	?___ftmul+1
  7418  0C55  3000               	movlw	0
  7419  0C56  00B0               	movwf	?___ftmul+2
  7420  0C57  0008               	return
  7421  0C58                     l5819:	
  7422  0C58  0831               	movf	___ftmul@f2,w
  7423  0C59  00B4               	movwf	??___ftmul
  7424  0C5A  0832               	movf	___ftmul@f2+1,w
  7425  0C5B  00B5               	movwf	??___ftmul+1
  7426  0C5C  0833               	movf	___ftmul@f2+2,w
  7427  0C5D  00B6               	movwf	??___ftmul+2
  7428  0C5E  1003               	clrc
  7429  0C5F  0D35               	rlf	??___ftmul+1,w
  7430  0C60  0D36               	rlf	??___ftmul+2,w
  7431  0C61  00B7               	movwf	??___ftmul+3
  7432  0C62  0837               	movf	??___ftmul+3,w
  7433  0C63  00BD               	movwf	___ftmul@sign
  7434  0C64  08BD               	movf	___ftmul@sign,f
  7435  0C65  1D03               	skipz
  7436  0C66  2C6E               	goto	l5825
  7437  0C67  3000               	movlw	0
  7438  0C68  00AE               	movwf	?___ftmul
  7439  0C69  3000               	movlw	0
  7440  0C6A  00AF               	movwf	?___ftmul+1
  7441  0C6B  3000               	movlw	0
  7442  0C6C  00B0               	movwf	?___ftmul+2
  7443  0C6D  0008               	return
  7444  0C6E                     l5825:	
  7445  0C6E  083D               	movf	___ftmul@sign,w
  7446  0C6F  3E7B               	addlw	123
  7447  0C70  00B4               	movwf	??___ftmul
  7448  0C71  0834               	movf	??___ftmul,w
  7449  0C72  07B8               	addwf	___ftmul@exp,f
  7450  0C73  082E               	movf	___ftmul@f1,w
  7451  0C74  00B4               	movwf	??___ftmul
  7452  0C75  082F               	movf	___ftmul@f1+1,w
  7453  0C76  00B5               	movwf	??___ftmul+1
  7454  0C77  0830               	movf	___ftmul@f1+2,w
  7455  0C78  00B6               	movwf	??___ftmul+2
  7456  0C79  3010               	movlw	16
  7457  0C7A                     u4165:	
  7458  0C7A  36B6               	lsrf	??___ftmul+2,f
  7459  0C7B  0CB5               	rrf	??___ftmul+1,f
  7460  0C7C  0CB4               	rrf	??___ftmul,f
  7461  0C7D  0B89               	decfsz	9,f
  7462  0C7E  2C7A               	goto	u4165
  7463  0C7F  0834               	movf	??___ftmul,w
  7464  0C80  00B7               	movwf	??___ftmul+3
  7465  0C81  0837               	movf	??___ftmul+3,w
  7466  0C82  00BD               	movwf	___ftmul@sign
  7467  0C83  0831               	movf	___ftmul@f2,w
  7468  0C84  00B4               	movwf	??___ftmul
  7469  0C85  0832               	movf	___ftmul@f2+1,w
  7470  0C86  00B5               	movwf	??___ftmul+1
  7471  0C87  0833               	movf	___ftmul@f2+2,w
  7472  0C88  00B6               	movwf	??___ftmul+2
  7473  0C89  3010               	movlw	16
  7474  0C8A                     u4175:	
  7475  0C8A  36B6               	lsrf	??___ftmul+2,f
  7476  0C8B  0CB5               	rrf	??___ftmul+1,f
  7477  0C8C  0CB4               	rrf	??___ftmul,f
  7478  0C8D  0B89               	decfsz	9,f
  7479  0C8E  2C8A               	goto	u4175
  7480  0C8F  0834               	movf	??___ftmul,w
  7481  0C90  00B7               	movwf	??___ftmul+3
  7482  0C91  0837               	movf	??___ftmul+3,w
  7483  0C92  06BD               	xorwf	___ftmul@sign,f
  7484  0C93  3080               	movlw	128
  7485  0C94  00B4               	movwf	??___ftmul
  7486  0C95  0834               	movf	??___ftmul,w
  7487  0C96  05BD               	andwf	___ftmul@sign,f
  7488  0C97  17AF               	bsf	___ftmul@f1+1,7
  7489  0C98  17B2               	bsf	___ftmul@f2+1,7
  7490  0C99  30FF               	movlw	255
  7491  0C9A  05B1               	andwf	___ftmul@f2,f
  7492  0C9B  30FF               	movlw	255
  7493  0C9C  05B2               	andwf	___ftmul@f2+1,f
  7494  0C9D  3000               	movlw	0
  7495  0C9E  05B3               	andwf	___ftmul@f2+2,f
  7496  0C9F  3000               	movlw	0
  7497  0CA0  00B9               	movwf	___ftmul@f3_as_product
  7498  0CA1  3000               	movlw	0
  7499  0CA2  00BA               	movwf	___ftmul@f3_as_product+1
  7500  0CA3  3000               	movlw	0
  7501  0CA4  00BB               	movwf	___ftmul@f3_as_product+2
  7502  0CA5  3007               	movlw	7
  7503  0CA6  00B4               	movwf	??___ftmul
  7504  0CA7  0834               	movf	??___ftmul,w
  7505  0CA8  00BC               	movwf	___ftmul@cntr
  7506  0CA9                     l5837:	
  7507  0CA9  1C2E               	btfss	___ftmul@f1,0
  7508  0CAA  2CB1               	goto	l5841
  7509  0CAB  0831               	movf	___ftmul@f2,w
  7510  0CAC  07B9               	addwf	___ftmul@f3_as_product,f
  7511  0CAD  0832               	movf	___ftmul@f2+1,w
  7512  0CAE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7513  0CAF  0833               	movf	___ftmul@f2+2,w
  7514  0CB0  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7515  0CB1                     l5841:	
  7516  0CB1  3001               	movlw	1
  7517  0CB2                     u4195:	
  7518  0CB2  36B0               	lsrf	___ftmul@f1+2,f
  7519  0CB3  0CAF               	rrf	___ftmul@f1+1,f
  7520  0CB4  0CAE               	rrf	___ftmul@f1,f
  7521  0CB5  0B89               	decfsz	9,f
  7522  0CB6  2CB2               	goto	u4195
  7523  0CB7  3001               	movlw	1
  7524  0CB8                     u4205:	
  7525  0CB8  35B1               	lslf	___ftmul@f2,f
  7526  0CB9  0DB2               	rlf	___ftmul@f2+1,f
  7527  0CBA  0DB3               	rlf	___ftmul@f2+2,f
  7528  0CBB  0B89               	decfsz	9,f
  7529  0CBC  2CB8               	goto	u4205
  7530  0CBD  3001               	movlw	1
  7531  0CBE  02BC               	subwf	___ftmul@cntr,f
  7532  0CBF  1D03               	btfss	3,2
  7533  0CC0  2CA9               	goto	l5837
  7534  0CC1  3009               	movlw	9
  7535  0CC2  00B4               	movwf	??___ftmul
  7536  0CC3  0834               	movf	??___ftmul,w
  7537  0CC4  00BC               	movwf	___ftmul@cntr
  7538  0CC5                     l5849:	
  7539  0CC5  1C2E               	btfss	___ftmul@f1,0
  7540  0CC6  2CCD               	goto	l5853
  7541  0CC7  0831               	movf	___ftmul@f2,w
  7542  0CC8  07B9               	addwf	___ftmul@f3_as_product,f
  7543  0CC9  0832               	movf	___ftmul@f2+1,w
  7544  0CCA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7545  0CCB  0833               	movf	___ftmul@f2+2,w
  7546  0CCC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7547  0CCD                     l5853:	
  7548  0CCD  3001               	movlw	1
  7549  0CCE                     u4235:	
  7550  0CCE  36B0               	lsrf	___ftmul@f1+2,f
  7551  0CCF  0CAF               	rrf	___ftmul@f1+1,f
  7552  0CD0  0CAE               	rrf	___ftmul@f1,f
  7553  0CD1  0B89               	decfsz	9,f
  7554  0CD2  2CCE               	goto	u4235
  7555  0CD3  3001               	movlw	1
  7556  0CD4                     u4245:	
  7557  0CD4  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7558  0CD5  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7559  0CD6  0CB9               	rrf	___ftmul@f3_as_product,f
  7560  0CD7  0B89               	decfsz	9,f
  7561  0CD8  2CD4               	goto	u4245
  7562  0CD9  3001               	movlw	1
  7563  0CDA  02BC               	subwf	___ftmul@cntr,f
  7564  0CDB  1D03               	btfss	3,2
  7565  0CDC  2CC5               	goto	l5849
  7566  0CDD  0839               	movf	___ftmul@f3_as_product,w
  7567  0CDE  00A0               	movwf	___ftpack@arg
  7568  0CDF  083A               	movf	___ftmul@f3_as_product+1,w
  7569  0CE0  00A1               	movwf	___ftpack@arg+1
  7570  0CE1  083B               	movf	___ftmul@f3_as_product+2,w
  7571  0CE2  00A2               	movwf	___ftpack@arg+2
  7572  0CE3  0838               	movf	___ftmul@exp,w
  7573  0CE4  00B4               	movwf	??___ftmul
  7574  0CE5  0834               	movf	??___ftmul,w
  7575  0CE6  00A3               	movwf	___ftpack@exp
  7576  0CE7  083D               	movf	___ftmul@sign,w
  7577  0CE8  00B5               	movwf	??___ftmul+1
  7578  0CE9  0835               	movf	??___ftmul+1,w
  7579  0CEA  00A4               	movwf	___ftpack@sign
  7580  0CEB  3192  22BB         	fcall	___ftpack
  7581  0CED  0020               	movlb	0	; select bank0
  7582  0CEE  0820               	movf	?___ftpack,w
  7583  0CEF  00AE               	movwf	?___ftmul
  7584  0CF0  0821               	movf	?___ftpack+1,w
  7585  0CF1  00AF               	movwf	?___ftmul+1
  7586  0CF2  0822               	movf	?___ftpack+2,w
  7587  0CF3  00B0               	movwf	?___ftmul+2
  7588  0CF4  0008               	return
  7589  0CF5                     __end_of___ftmul:	
  7590                           
  7591                           	psect	text27
  7592  0700                     __ptext27:	
  7593 ;; *************** function ___ftadd *****************
  7594 ;; Defined at:
  7595 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  f1              3   30[BANK0 ] float 
  7598 ;;  f2              3   33[BANK0 ] float 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  exp1            1   42[BANK0 ] unsigned char 
  7601 ;;  exp2            1   41[BANK0 ] unsigned char 
  7602 ;;  sign            1   40[BANK0 ] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  3   30[BANK0 ] float 
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0, pclath, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7612 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;Total ram usage:       13 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    5
  7619 ;; This function calls:
  7620 ;;		___ftpack
  7621 ;; This function is called by:
  7622 ;;		_getPercentValue
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           
  7627                           ;psect for function ___ftadd
  7628  0700                     ___ftadd:	
  7629                           
  7630                           ;incstack = 0
  7631                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7632  0700  0020               	movlb	0	; select bank0
  7633  0701  083E               	movf	___ftadd@f1,w
  7634  0702  00C4               	movwf	??___ftadd
  7635  0703  083F               	movf	___ftadd@f1+1,w
  7636  0704  00C5               	movwf	??___ftadd+1
  7637  0705  0840               	movf	___ftadd@f1+2,w
  7638  0706  00C6               	movwf	??___ftadd+2
  7639  0707  1003               	clrc
  7640  0708  0D45               	rlf	??___ftadd+1,w
  7641  0709  0D46               	rlf	??___ftadd+2,w
  7642  070A  00C7               	movwf	??___ftadd+3
  7643  070B  0847               	movf	??___ftadd+3,w
  7644  070C  00CA               	movwf	___ftadd@exp1
  7645  070D  0841               	movf	___ftadd@f2,w
  7646  070E  00C4               	movwf	??___ftadd
  7647  070F  0842               	movf	___ftadd@f2+1,w
  7648  0710  00C5               	movwf	??___ftadd+1
  7649  0711  0843               	movf	___ftadd@f2+2,w
  7650  0712  00C6               	movwf	??___ftadd+2
  7651  0713  1003               	clrc
  7652  0714  0D45               	rlf	??___ftadd+1,w
  7653  0715  0D46               	rlf	??___ftadd+2,w
  7654  0716  00C7               	movwf	??___ftadd+3
  7655  0717  0847               	movf	??___ftadd+3,w
  7656  0718  00C9               	movwf	___ftadd@exp2
  7657  0719  084A               	movf	___ftadd@exp1,w
  7658  071A  1903               	btfsc	3,2
  7659  071B  2F28               	goto	l5707
  7660  071C  0849               	movf	___ftadd@exp2,w
  7661  071D  024A               	subwf	___ftadd@exp1,w
  7662  071E  1803               	skipnc
  7663  071F  2F2F               	goto	l5711
  7664  0720  034A               	decf	___ftadd@exp1,w
  7665  0721  3AFF               	xorlw	255
  7666  0722  0749               	addwf	___ftadd@exp2,w
  7667  0723  00C4               	movwf	??___ftadd
  7668  0724  3019               	movlw	25
  7669  0725  0244               	subwf	??___ftadd,w
  7670  0726  1C03               	skipc
  7671  0727  2F2F               	goto	l5711
  7672  0728                     l5707:	
  7673  0728  0841               	movf	___ftadd@f2,w
  7674  0729  00BE               	movwf	?___ftadd
  7675  072A  0842               	movf	___ftadd@f2+1,w
  7676  072B  00BF               	movwf	?___ftadd+1
  7677  072C  0843               	movf	___ftadd@f2+2,w
  7678  072D  00C0               	movwf	?___ftadd+2
  7679  072E  0008               	return
  7680  072F                     l5711:	
  7681  072F  0849               	movf	___ftadd@exp2,w
  7682  0730  1903               	btfsc	3,2
  7683  0731  0008               	return
  7684  0732  084A               	movf	___ftadd@exp1,w
  7685  0733  0249               	subwf	___ftadd@exp2,w
  7686  0734  1803               	skipnc
  7687  0735  2F3E               	goto	l5717
  7688  0736  0349               	decf	___ftadd@exp2,w
  7689  0737  3AFF               	xorlw	255
  7690  0738  074A               	addwf	___ftadd@exp1,w
  7691  0739  00C4               	movwf	??___ftadd
  7692  073A  3019               	movlw	25
  7693  073B  0244               	subwf	??___ftadd,w
  7694  073C  1803               	btfsc	3,0
  7695  073D  0008               	return
  7696  073E                     l5717:	
  7697  073E  3006               	movlw	6
  7698  073F  00C4               	movwf	??___ftadd
  7699  0740  0844               	movf	??___ftadd,w
  7700  0741  00C8               	movwf	___ftadd@sign
  7701  0742  1BC0               	btfsc	___ftadd@f1+2,7
  7702  0743  17C8               	bsf	___ftadd@sign,7
  7703  0744  1BC3               	btfsc	___ftadd@f2+2,7
  7704  0745  1748               	bsf	___ftadd@sign,6
  7705  0746  17BF               	bsf	___ftadd@f1+1,7
  7706  0747  30FF               	movlw	255
  7707  0748  05BE               	andwf	___ftadd@f1,f
  7708  0749  30FF               	movlw	255
  7709  074A  05BF               	andwf	___ftadd@f1+1,f
  7710  074B  3000               	movlw	0
  7711  074C  05C0               	andwf	___ftadd@f1+2,f
  7712  074D  17C2               	bsf	___ftadd@f2+1,7
  7713  074E  30FF               	movlw	255
  7714  074F  05C1               	andwf	___ftadd@f2,f
  7715  0750  30FF               	movlw	255
  7716  0751  05C2               	andwf	___ftadd@f2+1,f
  7717  0752  3000               	movlw	0
  7718  0753  05C3               	andwf	___ftadd@f2+2,f
  7719  0754  0849               	movf	___ftadd@exp2,w
  7720  0755  024A               	subwf	___ftadd@exp1,w
  7721  0756  1803               	skipnc
  7722  0757  2F7A               	goto	l5739
  7723  0758                     l5729:	
  7724  0758  3001               	movlw	1
  7725  0759                     u3925:	
  7726  0759  35C1               	lslf	___ftadd@f2,f
  7727  075A  0DC2               	rlf	___ftadd@f2+1,f
  7728  075B  0DC3               	rlf	___ftadd@f2+2,f
  7729  075C  0B89               	decfsz	9,f
  7730  075D  2F59               	goto	u3925
  7731  075E  3001               	movlw	1
  7732  075F  02C9               	subwf	___ftadd@exp2,f
  7733  0760  0849               	movf	___ftadd@exp2,w
  7734  0761  064A               	xorwf	___ftadd@exp1,w
  7735  0762  1903               	skipnz
  7736  0763  2F75               	goto	l5737
  7737  0764  3001               	movlw	1
  7738  0765  02C8               	subwf	___ftadd@sign,f
  7739  0766  0848               	movf	___ftadd@sign,w
  7740  0767  3907               	andlw	7
  7741  0768  1903               	btfsc	3,2
  7742  0769  2F75               	goto	l5737
  7743  076A  2F58               	goto	l5729
  7744  076B                     l5735:	
  7745  076B  3001               	movlw	1
  7746  076C                     u3955:	
  7747  076C  36C0               	lsrf	___ftadd@f1+2,f
  7748  076D  0CBF               	rrf	___ftadd@f1+1,f
  7749  076E  0CBE               	rrf	___ftadd@f1,f
  7750  076F  0B89               	decfsz	9,f
  7751  0770  2F6C               	goto	u3955
  7752  0771  3001               	movlw	1
  7753  0772  00C4               	movwf	??___ftadd
  7754  0773  0844               	movf	??___ftadd,w
  7755  0774  07CA               	addwf	___ftadd@exp1,f
  7756  0775                     l5737:	
  7757  0775  084A               	movf	___ftadd@exp1,w
  7758  0776  0649               	xorwf	___ftadd@exp2,w
  7759  0777  1903               	btfsc	3,2
  7760  0778  2F9F               	goto	l3132
  7761  0779  2F6B               	goto	l5735
  7762  077A                     l5739:	
  7763  077A  084A               	movf	___ftadd@exp1,w
  7764  077B  0249               	subwf	___ftadd@exp2,w
  7765  077C  1803               	skipnc
  7766  077D  2F9F               	goto	l3132
  7767  077E                     l5741:	
  7768  077E  3001               	movlw	1
  7769  077F                     u3985:	
  7770  077F  35BE               	lslf	___ftadd@f1,f
  7771  0780  0DBF               	rlf	___ftadd@f1+1,f
  7772  0781  0DC0               	rlf	___ftadd@f1+2,f
  7773  0782  0B89               	decfsz	9,f
  7774  0783  2F7F               	goto	u3985
  7775  0784  3001               	movlw	1
  7776  0785  02CA               	subwf	___ftadd@exp1,f
  7777  0786  0849               	movf	___ftadd@exp2,w
  7778  0787  064A               	xorwf	___ftadd@exp1,w
  7779  0788  1903               	skipnz
  7780  0789  2F9B               	goto	l5749
  7781  078A  3001               	movlw	1
  7782  078B  02C8               	subwf	___ftadd@sign,f
  7783  078C  0848               	movf	___ftadd@sign,w
  7784  078D  3907               	andlw	7
  7785  078E  1903               	btfsc	3,2
  7786  078F  2F9B               	goto	l5749
  7787  0790  2F7E               	goto	l5741
  7788  0791                     l5747:	
  7789  0791  3001               	movlw	1
  7790  0792                     u4015:	
  7791  0792  36C3               	lsrf	___ftadd@f2+2,f
  7792  0793  0CC2               	rrf	___ftadd@f2+1,f
  7793  0794  0CC1               	rrf	___ftadd@f2,f
  7794  0795  0B89               	decfsz	9,f
  7795  0796  2F92               	goto	u4015
  7796  0797  3001               	movlw	1
  7797  0798  00C4               	movwf	??___ftadd
  7798  0799  0844               	movf	??___ftadd,w
  7799  079A  07C9               	addwf	___ftadd@exp2,f
  7800  079B                     l5749:	
  7801  079B  084A               	movf	___ftadd@exp1,w
  7802  079C  0649               	xorwf	___ftadd@exp2,w
  7803  079D  1D03               	skipz
  7804  079E  2F91               	goto	l5747
  7805  079F                     l3132:	
  7806  079F  1FC8               	btfss	___ftadd@sign,7
  7807  07A0  2FB1               	goto	l5753
  7808  07A1  30FF               	movlw	255
  7809  07A2  06BE               	xorwf	___ftadd@f1,f
  7810  07A3  30FF               	movlw	255
  7811  07A4  06BF               	xorwf	___ftadd@f1+1,f
  7812  07A5  30FF               	movlw	255
  7813  07A6  06C0               	xorwf	___ftadd@f1+2,f
  7814  07A7  3001               	movlw	1
  7815  07A8  07BE               	addwf	___ftadd@f1,f
  7816  07A9  3000               	movlw	0
  7817  07AA  1803               	skipnc
  7818  07AB  3001               	movlw	1
  7819  07AC  07BF               	addwf	___ftadd@f1+1,f
  7820  07AD  3000               	movlw	0
  7821  07AE  1803               	skipnc
  7822  07AF  3001               	movlw	1
  7823  07B0  07C0               	addwf	___ftadd@f1+2,f
  7824  07B1                     l5753:	
  7825  07B1  1F48               	btfss	___ftadd@sign,6
  7826  07B2  2FC3               	goto	l5757
  7827  07B3  30FF               	movlw	255
  7828  07B4  06C1               	xorwf	___ftadd@f2,f
  7829  07B5  30FF               	movlw	255
  7830  07B6  06C2               	xorwf	___ftadd@f2+1,f
  7831  07B7  30FF               	movlw	255
  7832  07B8  06C3               	xorwf	___ftadd@f2+2,f
  7833  07B9  3001               	movlw	1
  7834  07BA  07C1               	addwf	___ftadd@f2,f
  7835  07BB  3000               	movlw	0
  7836  07BC  1803               	skipnc
  7837  07BD  3001               	movlw	1
  7838  07BE  07C2               	addwf	___ftadd@f2+1,f
  7839  07BF  3000               	movlw	0
  7840  07C0  1803               	skipnc
  7841  07C1  3001               	movlw	1
  7842  07C2  07C3               	addwf	___ftadd@f2+2,f
  7843  07C3                     l5757:	
  7844  07C3  01C8               	clrf	___ftadd@sign
  7845  07C4  083E               	movf	___ftadd@f1,w
  7846  07C5  07C1               	addwf	___ftadd@f2,f
  7847  07C6  083F               	movf	___ftadd@f1+1,w
  7848  07C7  3DC2               	addwfc	___ftadd@f2+1,f
  7849  07C8  0840               	movf	___ftadd@f1+2,w
  7850  07C9  3DC3               	addwfc	___ftadd@f2+2,f
  7851  07CA  1FC3               	btfss	___ftadd@f2+2,7
  7852  07CB  2FDE               	goto	l5767
  7853  07CC  30FF               	movlw	255
  7854  07CD  06C1               	xorwf	___ftadd@f2,f
  7855  07CE  30FF               	movlw	255
  7856  07CF  06C2               	xorwf	___ftadd@f2+1,f
  7857  07D0  30FF               	movlw	255
  7858  07D1  06C3               	xorwf	___ftadd@f2+2,f
  7859  07D2  3001               	movlw	1
  7860  07D3  07C1               	addwf	___ftadd@f2,f
  7861  07D4  3000               	movlw	0
  7862  07D5  1803               	skipnc
  7863  07D6  3001               	movlw	1
  7864  07D7  07C2               	addwf	___ftadd@f2+1,f
  7865  07D8  3000               	movlw	0
  7866  07D9  1803               	skipnc
  7867  07DA  3001               	movlw	1
  7868  07DB  07C3               	addwf	___ftadd@f2+2,f
  7869  07DC  01C8               	clrf	___ftadd@sign
  7870  07DD  0AC8               	incf	___ftadd@sign,f
  7871  07DE                     l5767:	
  7872  07DE  0841               	movf	___ftadd@f2,w
  7873  07DF  00A0               	movwf	___ftpack@arg
  7874  07E0  0842               	movf	___ftadd@f2+1,w
  7875  07E1  00A1               	movwf	___ftpack@arg+1
  7876  07E2  0843               	movf	___ftadd@f2+2,w
  7877  07E3  00A2               	movwf	___ftpack@arg+2
  7878  07E4  084A               	movf	___ftadd@exp1,w
  7879  07E5  00C4               	movwf	??___ftadd
  7880  07E6  0844               	movf	??___ftadd,w
  7881  07E7  00A3               	movwf	___ftpack@exp
  7882  07E8  0848               	movf	___ftadd@sign,w
  7883  07E9  00C5               	movwf	??___ftadd+1
  7884  07EA  0845               	movf	??___ftadd+1,w
  7885  07EB  00A4               	movwf	___ftpack@sign
  7886  07EC  3192  22BB         	fcall	___ftpack
  7887  07EE  0020               	movlb	0	; select bank0
  7888  07EF  0820               	movf	?___ftpack,w
  7889  07F0  00BE               	movwf	?___ftadd
  7890  07F1  0821               	movf	?___ftpack+1,w
  7891  07F2  00BF               	movwf	?___ftadd+1
  7892  07F3  0822               	movf	?___ftpack+2,w
  7893  07F4  00C0               	movwf	?___ftadd+2
  7894  07F5  0008               	return
  7895  07F6                     __end_of___ftadd:	
  7896                           
  7897                           	psect	text28
  7898  1BDD                     __ptext28:	
  7899 ;; *************** function _RF_RxDisable *****************
  7900 ;; Defined at:
  7901 ;;		line 198 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  rf              1    wreg     unsigned char 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;  rf              1    4[BANK0 ] unsigned char 
  7906 ;; Return value:  Size  Location     Type
  7907 ;;		None               void
  7908 ;; Registers used:
  7909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;Total ram usage:        1 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    6
  7922 ;; This function calls:
  7923 ;;		_CC2500_WriteCommand
  7924 ;;		_RfPointSelect
  7925 ;;		_setINT_GO
  7926 ;; This function is called by:
  7927 ;;		_setRF_Main
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           
  7932                           ;psect for function _RF_RxDisable
  7933  1BDD                     _RF_RxDisable:	
  7934                           
  7935                           ;incstack = 0
  7936                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7937                           ;RF_RxDisable@rf stored from wreg
  7938  1BDD  0020               	movlb	0	; select bank0
  7939  1BDE  00A4               	movwf	RF_RxDisable@rf
  7940                           
  7941                           ;RF_Control_B1.c: 200: RfPointSelect(rf);
  7942  1BDF  0824               	movf	RF_RxDisable@rf,w
  7943  1BE0  31A7  2747  319B   	fcall	_RfPointSelect
  7944                           
  7945                           ;RF_Control_B1.c: 202: if(RF->RxStatus)
  7946  1BE3  087B               	movf	_RF,w
  7947  1BE4  0086               	movwf	6
  7948  1BE5  0187               	clrf	7
  7949  1BE6  1D81               	btfss	1,3
  7950  1BE7  0008               	return
  7951                           
  7952                           ;RF_Control_B1.c: 203: {
  7953                           ;RF_Control_B1.c: 204: RF->RxStatus=0;
  7954  1BE8  087B               	movf	_RF,w
  7955  1BE9  0086               	movwf	6
  7956  1BEA  0187               	clrf	7
  7957  1BEB  1181               	bcf	1,3
  7958                           
  7959                           ;RF_Control_B1.c: 205: RF->ReceiveGO=0;
  7960  1BEC  087B               	movf	_RF,w
  7961  1BED  0086               	movwf	6
  7962  1BEE  0187               	clrf	7
  7963  1BEF  1081               	bcf	1,1
  7964                           
  7965                           ;RF_Control_B1.c: 206: RF->DebounceTime=0;
  7966  1BF0  0A7B               	incf	_RF,w
  7967  1BF1  0086               	movwf	6
  7968  1BF2  0187               	clrf	7
  7969  1BF3  0181               	clrf	1
  7970                           
  7971                           ;RF_Control_B1.c: 207: RF->Debounce=0;
  7972  1BF4  087B               	movf	_RF,w
  7973  1BF5  0086               	movwf	6
  7974  1BF6  0187               	clrf	7
  7975  1BF7  1281               	bcf	1,5
  7976                           
  7977                           ;RF_Control_B1.c: 208: CC2500_WriteCommand(0x36);
  7978  1BF8  3036               	movlw	54
  7979  1BF9  3198  2086  319B   	fcall	_CC2500_WriteCommand
  7980                           
  7981                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x3A);
  7982  1BFC  303A               	movlw	58
  7983  1BFD  3198  2086  319B   	fcall	_CC2500_WriteCommand
  7984                           
  7985                           ;RF_Control_B1.c: 210: setINT_GO(0);
  7986  1C00  3000               	movlw	0
  7987  1C01  31A7  2728         	fcall	_setINT_GO
  7988  1C03  0008               	return
  7989  1C04                     __end_of_RF_RxDisable:	
  7990                           
  7991                           	psect	text29
  7992  1FBC                     __ptext29:	
  7993 ;; *************** function _CC2500_TxData *****************
  7994 ;; Defined at:
  7995 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;		None
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;		None               void
  8002 ;; Registers used:
  8003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;Total ram usage:        2 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    6
  8016 ;; This function calls:
  8017 ;;		_CC2500_WriteByte
  8018 ;;		_CC2500_WriteCommand
  8019 ;; This function is called by:
  8020 ;;		_setRF_Main
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           
  8025                           ;psect for function _CC2500_TxData
  8026  1FBC                     _CC2500_TxData:	
  8027                           
  8028                           ;CC2500_B1.c: 32: unsigned char loop_e;
  8029                           ;CC2500_B1.c: 34: RC4=0;
  8030                           
  8031                           ;incstack = 0
  8032                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8033  1FBC  0020               	movlb	0	; select bank0
  8034  1FBD  120E               	bcf	14,4	;volatile
  8035                           
  8036                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  8037  1FBE  307F               	movlw	127
  8038  1FBF  00A4               	movwf	??_CC2500_TxData
  8039  1FC0  0824               	movf	??_CC2500_TxData,w
  8040  1FC1  0021               	movlb	1	; select bank1
  8041  1FC2  00BF               	movwf	_SPI0Buffer^(0+128)
  8042  1FC3                     l291:	
  8043                           ;CC2500_B1.c: 36: while(RC2==1);
  8044                           
  8045  1FC3  0020               	movlb	0	; select bank0
  8046  1FC4  190E               	btfsc	14,2	;volatile
  8047  1FC5  2FC3               	goto	l291
  8048                           
  8049                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  8050  1FC6  3199  21D9  319F   	fcall	_CC2500_WriteByte
  8051                           
  8052                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  8053  1FC9  0021               	movlb	1	; select bank1
  8054  1FCA  0840               	movf	_Tx_Length^(0+128),w
  8055  1FCB  0020               	movlb	0	; select bank0
  8056  1FCC  00A4               	movwf	??_CC2500_TxData
  8057  1FCD  0824               	movf	??_CC2500_TxData,w
  8058  1FCE  0021               	movlb	1	; select bank1
  8059  1FCF  00BF               	movwf	_SPI0Buffer^(0+128)
  8060                           
  8061                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  8062  1FD0  3199  21D9  319F   	fcall	_CC2500_WriteByte
  8063                           
  8064                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  8065  1FD3  0020               	movlb	0	; select bank0
  8066  1FD4  01A5               	clrf	CC2500_TxData@loop_e
  8067  1FD5                     l6463:	
  8068  1FD5  0021               	movlb	1	; select bank1
  8069  1FD6  0840               	movf	_Tx_Length^(0+128),w
  8070  1FD7  0020               	movlb	0	; select bank0
  8071  1FD8  0225               	subwf	CC2500_TxData@loop_e,w
  8072  1FD9  1803               	btfsc	3,0
  8073  1FDA  2FED               	goto	l296
  8074                           
  8075                           ;CC2500_B1.c: 41: {
  8076                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  8077  1FDB  0825               	movf	CC2500_TxData@loop_e,w
  8078  1FDC  3EA0               	addlw	_RF_Data& (0+255)
  8079  1FDD  0086               	movwf	6
  8080  1FDE  0187               	clrf	7
  8081  1FDF  0801               	movf	1,w
  8082  1FE0  00A4               	movwf	??_CC2500_TxData
  8083  1FE1  0824               	movf	??_CC2500_TxData,w
  8084  1FE2  0021               	movlb	1	; select bank1
  8085  1FE3  00BF               	movwf	_SPI0Buffer^(0+128)
  8086                           
  8087                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8088  1FE4  3199  21D9  319F   	fcall	_CC2500_WriteByte
  8089  1FE7  3001               	movlw	1
  8090  1FE8  0020               	movlb	0	; select bank0
  8091  1FE9  00A4               	movwf	??_CC2500_TxData
  8092  1FEA  0824               	movf	??_CC2500_TxData,w
  8093  1FEB  07A5               	addwf	CC2500_TxData@loop_e,f
  8094  1FEC  2FD5               	goto	l6463
  8095  1FED                     l296:	
  8096                           
  8097                           ;CC2500_B1.c: 44: }
  8098                           ;CC2500_B1.c: 45: RC4=1;
  8099  1FED  160E               	bsf	14,4	;volatile
  8100                           
  8101                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8102  1FEE  3035               	movlw	53
  8103  1FEF  3198  2086  319F   	fcall	_CC2500_WriteCommand
  8104  1FF2                     l297:	
  8105                           ;CC2500_B1.c: 47: while(RB0==0);
  8106                           
  8107  1FF2  0020               	movlb	0	; select bank0
  8108  1FF3  1C0D               	btfss	13,0	;volatile
  8109  1FF4  2FF2               	goto	l297
  8110  1FF5                     l300:	
  8111                           ;CC2500_B1.c: 48: while(RB0==1);
  8112                           
  8113  1FF5  180D               	btfsc	13,0	;volatile
  8114  1FF6  2FF5               	goto	l300
  8115                           
  8116                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8117  1FF7  3036               	movlw	54
  8118  1FF8  3198  2086  319F   	fcall	_CC2500_WriteCommand
  8119                           
  8120                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8121  1FFB  303B               	movlw	59
  8122  1FFC  3198  2086         	fcall	_CC2500_WriteCommand
  8123                           
  8124                           ;CC2500_B1.c: 51: Transceive_OK=1;
  8125  1FFE  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8126  1FFF  0008               	return
  8127  2000                     __end_of_CC2500_TxData:	
  8128                           
  8129                           	psect	text30
  8130  1380                     __ptext30:	
  8131 ;; *************** function _CC2500_RxData *****************
  8132 ;; Defined at:
  8133 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;		None
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8138 ;; Return value:  Size  Location     Type
  8139 ;;		None               void
  8140 ;; Registers used:
  8141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;Total ram usage:        2 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    6
  8154 ;; This function calls:
  8155 ;;		_CC2500_ReadByte
  8156 ;;		_CC2500_ReadStatus
  8157 ;;		_CC2500_WriteByte
  8158 ;;		_CC2500_WriteCommand
  8159 ;;		_setRF_RxStatus
  8160 ;; This function is called by:
  8161 ;;		_setRF_Main
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           
  8166                           ;psect for function _CC2500_RxData
  8167  1380                     _CC2500_RxData:	
  8168                           
  8169                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8170                           ;CC2500_B1.c: 62: if(RB0 == 1)
  8171                           
  8172                           ;incstack = 0
  8173                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8174  1380  0020               	movlb	0	; select bank0
  8175  1381  180D               	btfsc	13,0	;volatile
  8176  1382                     l307:	
  8177                           ;CC2500_B1.c: 63: {
  8178                           ;CC2500_B1.c: 64: while(RB0 == 1);
  8179                           
  8180  1382  180D               	btfsc	13,0	;volatile
  8181  1383  2B82               	goto	l307
  8182                           
  8183                           ;CC2500_B1.c: 65: }
  8184                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8185  1384  303B               	movlw	59
  8186  1385  319A  2257  3193   	fcall	_CC2500_ReadStatus
  8187                           
  8188                           ;CC2500_B1.c: 67: if(s_data != 0)
  8189  1388  0021               	movlb	1	; select bank1
  8190  1389  0843               	movf	_s_data^(0+128),w
  8191  138A  1903               	btfsc	3,2
  8192  138B  2BD6               	goto	l8329
  8193                           
  8194                           ;CC2500_B1.c: 69: {
  8195                           ;CC2500_B1.c: 70: RC4=0;
  8196  138C  0020               	movlb	0	; select bank0
  8197  138D  120E               	bcf	14,4	;volatile
  8198                           
  8199                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  8200  138E  30FF               	movlw	255
  8201  138F  00A4               	movwf	??_CC2500_RxData
  8202  1390  0824               	movf	??_CC2500_RxData,w
  8203  1391  0021               	movlb	1	; select bank1
  8204  1392  00BF               	movwf	_SPI0Buffer^(0+128)
  8205  1393                     l311:	
  8206                           ;CC2500_B1.c: 72: while(RC2==1);
  8207                           
  8208  1393  0020               	movlb	0	; select bank0
  8209  1394  190E               	btfsc	14,2	;volatile
  8210  1395  2B93               	goto	l311
  8211                           
  8212                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8213  1396  3199  21D9  3193   	fcall	_CC2500_WriteByte
  8214                           
  8215                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8216  1399  319A  228E  3193   	fcall	_CC2500_ReadByte
  8217                           
  8218                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  8219  139C  0021               	movlb	1	; select bank1
  8220  139D  083F               	movf	_SPI0Buffer^(0+128),w
  8221  139E  0020               	movlb	0	; select bank0
  8222  139F  00A4               	movwf	??_CC2500_RxData
  8223  13A0  0824               	movf	??_CC2500_RxData,w
  8224  13A1  0021               	movlb	1	; select bank1
  8225  13A2  00BE               	movwf	_Rx_Length^(0+128)
  8226                           
  8227                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  8228  13A3  0020               	movlb	0	; select bank0
  8229  13A4  01A5               	clrf	CC2500_RxData@loop_f
  8230  13A5                     l8315:	
  8231  13A5  0021               	movlb	1	; select bank1
  8232  13A6  083E               	movf	_Rx_Length^(0+128),w
  8233  13A7  0020               	movlb	0	; select bank0
  8234  13A8  0225               	subwf	CC2500_RxData@loop_f,w
  8235  13A9  1803               	btfsc	3,0
  8236  13AA  2BBD               	goto	l8317
  8237                           
  8238                           ;CC2500_B1.c: 78: {
  8239                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  8240  13AB  319A  228E  3193   	fcall	_CC2500_ReadByte
  8241                           
  8242                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  8243  13AE  0021               	movlb	1	; select bank1
  8244  13AF  083F               	movf	_SPI0Buffer^(0+128),w
  8245  13B0  0020               	movlb	0	; select bank0
  8246  13B1  00A4               	movwf	??_CC2500_RxData
  8247  13B2  0825               	movf	CC2500_RxData@loop_f,w
  8248  13B3  3EA0               	addlw	_RF_Data& (0+255)
  8249  13B4  0086               	movwf	6
  8250  13B5  0187               	clrf	7
  8251  13B6  0824               	movf	??_CC2500_RxData,w
  8252  13B7  0081               	movwf	1
  8253  13B8  3001               	movlw	1
  8254  13B9  00A4               	movwf	??_CC2500_RxData
  8255  13BA  0824               	movf	??_CC2500_RxData,w
  8256  13BB  07A5               	addwf	CC2500_RxData@loop_f,f
  8257  13BC  2BA5               	goto	l8315
  8258  13BD                     l8317:	
  8259                           
  8260                           ;CC2500_B1.c: 81: }
  8261                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  8262  13BD  319A  228E  3193   	fcall	_CC2500_ReadByte
  8263                           
  8264                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  8265  13C0  0021               	movlb	1	; select bank1
  8266  13C1  083F               	movf	_SPI0Buffer^(0+128),w
  8267  13C2  0020               	movlb	0	; select bank0
  8268  13C3  00A4               	movwf	??_CC2500_RxData
  8269  13C4  0824               	movf	??_CC2500_RxData,w
  8270  13C5  0021               	movlb	1	; select bank1
  8271  13C6  00BD               	movwf	_RSSI^(0+128)
  8272                           
  8273                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  8274  13C7  319A  228E  3193   	fcall	_CC2500_ReadByte
  8275                           
  8276                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  8277  13CA  0021               	movlb	1	; select bank1
  8278  13CB  083F               	movf	_SPI0Buffer^(0+128),w
  8279  13CC  0020               	movlb	0	; select bank0
  8280  13CD  00A4               	movwf	??_CC2500_RxData
  8281  13CE  0824               	movf	??_CC2500_RxData,w
  8282  13CF  0021               	movlb	1	; select bank1
  8283  13D0  00B7               	movwf	_CRC^(0+128)
  8284                           
  8285                           ;CC2500_B1.c: 86: RC4=1;
  8286  13D1  0020               	movlb	0	; select bank0
  8287  13D2  160E               	bsf	14,4	;volatile
  8288                           
  8289                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  8290  13D3  0021               	movlb	1	; select bank1
  8291  13D4  1BB7               	btfsc	_CRC^(0+128),7
  8292                           
  8293                           ;CC2500_B1.c: 88: Receive_OK=1;
  8294  13D5  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8295  13D6                     l8329:	
  8296                           
  8297                           ;CC2500_B1.c: 89: }
  8298                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  8299  13D6  3036               	movlw	54
  8300  13D7  3198  2086  3193   	fcall	_CC2500_WriteCommand
  8301                           
  8302                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  8303  13DA  303A               	movlw	58
  8304  13DB  3198  2086  3193   	fcall	_CC2500_WriteCommand
  8305                           
  8306                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  8307  13DE  0020               	movlb	0	; select bank0
  8308  13DF  01A2               	clrf	setRF_RxStatus@command
  8309  13E0  3001               	movlw	1
  8310  13E1  31A7  27E4         	fcall	_setRF_RxStatus
  8311  13E3  0008               	return
  8312  13E4                     __end_of_CC2500_RxData:	
  8313                           
  8314                           	psect	text31
  8315  27E4                     __ptext31:	
  8316 ;; *************** function _setRF_RxStatus *****************
  8317 ;; Defined at:
  8318 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  rf              1    wreg     unsigned char 
  8321 ;;  command         1    2[BANK0 ] unsigned char 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  rf              1    3[BANK0 ] unsigned char 
  8324 ;; Return value:  Size  Location     Type
  8325 ;;		None               void
  8326 ;; Registers used:
  8327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8333 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;Total ram usage:        2 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    5
  8340 ;; This function calls:
  8341 ;;		_RfPointSelect
  8342 ;; This function is called by:
  8343 ;;		_CC2500_RxData
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           
  8348                           ;psect for function _setRF_RxStatus
  8349  27E4                     _setRF_RxStatus:	
  8350                           
  8351                           ;incstack = 0
  8352                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8353                           ;setRF_RxStatus@rf stored from wreg
  8354  27E4  0020               	movlb	0	; select bank0
  8355  27E5  00A3               	movwf	setRF_RxStatus@rf
  8356                           
  8357                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  8358  27E6  0823               	movf	setRF_RxStatus@rf,w
  8359  27E7  31A7  2747         	fcall	_RfPointSelect
  8360                           
  8361                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  8362  27E9  087B               	movf	_RF,w
  8363  27EA  0086               	movwf	6
  8364  27EB  0187               	clrf	7
  8365  27EC  0020               	movlb	0	; select bank0
  8366  27ED  0822               	movf	setRF_RxStatus@command,w
  8367  27EE  1181               	bcf	1,3
  8368  27EF  1D03               	skipz
  8369  27F0  1581               	bsf	1,3
  8370  27F1  0008               	return
  8371  27F2                     __end_of_setRF_RxStatus:	
  8372                           
  8373                           	psect	text32
  8374  1A57                     __ptext32:	
  8375 ;; *************** function _CC2500_ReadStatus *****************
  8376 ;; Defined at:
  8377 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;  status_addr     1    wreg     unsigned char 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;		None               void
  8384 ;; Registers used:
  8385 ;;		wreg, status,2, status,0, pclath, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;Total ram usage:        2 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    5
  8398 ;; This function calls:
  8399 ;;		_CC2500_ReadByte
  8400 ;;		_CC2500_WriteByte
  8401 ;; This function is called by:
  8402 ;;		_CC2500_RxData
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _CC2500_ReadStatus
  8408  1A57                     _CC2500_ReadStatus:	
  8409                           
  8410                           ;incstack = 0
  8411                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8412                           ;CC2500_ReadStatus@status_addr stored from wreg
  8413  1A57  0020               	movlb	0	; select bank0
  8414  1A58  00A3               	movwf	CC2500_ReadStatus@status_addr
  8415                           
  8416                           ;CC2500_B1.c: 269: RC4=0;
  8417  1A59  120E               	bcf	14,4	;volatile
  8418                           
  8419                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  8420  1A5A  0823               	movf	CC2500_ReadStatus@status_addr,w
  8421  1A5B  3EC0               	addlw	192
  8422  1A5C  00A2               	movwf	??_CC2500_ReadStatus
  8423  1A5D  0822               	movf	??_CC2500_ReadStatus,w
  8424  1A5E  0021               	movlb	1	; select bank1
  8425  1A5F  00BF               	movwf	_SPI0Buffer^(0+128)
  8426  1A60                     l387:	
  8427                           ;CC2500_B1.c: 272: while(RC2==1);
  8428                           
  8429  1A60  0020               	movlb	0	; select bank0
  8430  1A61  190E               	btfsc	14,2	;volatile
  8431  1A62  2A60               	goto	l387
  8432                           
  8433                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  8434  1A63  3199  21D9  319A   	fcall	_CC2500_WriteByte
  8435                           
  8436                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  8437  1A66  319A  228E         	fcall	_CC2500_ReadByte
  8438                           
  8439                           ;CC2500_B1.c: 276: RC4=1;
  8440  1A68  0020               	movlb	0	; select bank0
  8441  1A69  160E               	bsf	14,4	;volatile
  8442                           
  8443                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  8444  1A6A  0021               	movlb	1	; select bank1
  8445  1A6B  083F               	movf	_SPI0Buffer^(0+128),w
  8446  1A6C  0020               	movlb	0	; select bank0
  8447  1A6D  00A2               	movwf	??_CC2500_ReadStatus
  8448  1A6E  0822               	movf	??_CC2500_ReadStatus,w
  8449  1A6F  0021               	movlb	1	; select bank1
  8450  1A70  00C3               	movwf	_s_data^(0+128)
  8451  1A71  0008               	return
  8452  1A72                     __end_of_CC2500_ReadStatus:	
  8453                           
  8454                           	psect	text33
  8455  1A8E                     __ptext33:	
  8456 ;; *************** function _CC2500_ReadByte *****************
  8457 ;; Defined at:
  8458 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;		None
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8463 ;; Return value:  Size  Location     Type
  8464 ;;		None               void
  8465 ;; Registers used:
  8466 ;;		wreg, status,2, status,0
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;Total ram usage:        2 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    4
  8479 ;; This function calls:
  8480 ;;		Nothing
  8481 ;; This function is called by:
  8482 ;;		_CC2500_RxData
  8483 ;;		_CC2500_ReadStatus
  8484 ;;		_CC2500_ReadREG
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           
  8489                           ;psect for function _CC2500_ReadByte
  8490  1A8E                     _CC2500_ReadByte:	
  8491                           
  8492                           ;CC2500_B1.c: 212: unsigned char loop_b;
  8493                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  8494                           
  8495                           ;incstack = 0
  8496                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8497  1A8E  0020               	movlb	0	; select bank0
  8498  1A8F  01A1               	clrf	CC2500_ReadByte@loop_b
  8499  1A90                     L11:	
  8500  1A90  3008               	movlw	8
  8501  1A91  0221               	subwf	CC2500_ReadByte@loop_b,w
  8502  1A92  1803               	btfsc	3,0
  8503  1A93  0008               	return
  8504                           
  8505                           ;CC2500_B1.c: 214: {
  8506                           ;CC2500_B1.c: 215: RC1=1;
  8507  1A94  148E               	bsf	14,1	;volatile
  8508                           
  8509                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  8510  1A95  1003               	clrc
  8511  1A96  0021               	movlb	1	; select bank1
  8512  1A97  0DBF               	rlf	_SPI0Buffer^(0+128),f
  8513                           
  8514                           ;CC2500_B1.c: 217: if(RC2 == 1)
  8515  1A98  0020               	movlb	0	; select bank0
  8516  1A99  1D0E               	btfss	14,2	;volatile
  8517  1A9A  2A9E               	goto	l6209
  8518                           
  8519                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  8520  1A9B  0021               	movlb	1	; select bank1
  8521  1A9C  143F               	bsf	_SPI0Buffer^(0+128),0
  8522  1A9D  2AA4               	goto	l6211
  8523  1A9E                     l6209:	
  8524                           
  8525                           ;CC2500_B1.c: 219: else
  8526                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  8527  1A9E  30FE               	movlw	254
  8528  1A9F  0020               	movlb	0	; select bank0
  8529  1AA0  00A0               	movwf	??_CC2500_ReadByte
  8530  1AA1  0820               	movf	??_CC2500_ReadByte,w
  8531  1AA2  0021               	movlb	1	; select bank1
  8532  1AA3  05BF               	andwf	_SPI0Buffer^(0+128),f
  8533  1AA4                     l6211:	
  8534                           
  8535                           ;CC2500_B1.c: 221: RC1=0;
  8536  1AA4  0020               	movlb	0	; select bank0
  8537  1AA5  108E               	bcf	14,1	;volatile
  8538  1AA6  3001               	movlw	1
  8539  1AA7  00A0               	movwf	??_CC2500_ReadByte
  8540  1AA8  0820               	movf	??_CC2500_ReadByte,w
  8541  1AA9  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8542  1AAA  2A90               	goto	L11
  8543  1AAB                     __end_of_CC2500_ReadByte:	
  8544                           
  8545                           	psect	text34
  8546  26CB                     __ptext34:	
  8547 ;; *************** function _RF_Initialization *****************
  8548 ;; Defined at:
  8549 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;		None
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;		None
  8554 ;; Return value:  Size  Location     Type
  8555 ;;		None               void
  8556 ;; Registers used:
  8557 ;;		wreg, status,2, status,0, pclath, cstack
  8558 ;; Tracked objects:
  8559 ;;		On entry : 0/0
  8560 ;;		On exit  : 0/0
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8567 ;;Total ram usage:        0 bytes
  8568 ;; Hardware stack levels used:    1
  8569 ;; Hardware stack levels required when called:    5
  8570 ;; This function calls:
  8571 ;;		_setRF_Initialization
  8572 ;; This function is called by:
  8573 ;;		_main
  8574 ;; This function uses a non-reentrant model
  8575 ;;
  8576                           
  8577                           
  8578                           ;psect for function _RF_Initialization
  8579  26CB                     _RF_Initialization:	
  8580                           
  8581                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  8582                           
  8583                           ;incstack = 0
  8584                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8585  26CB  3001               	movlw	1
  8586  26CC  31A6  26F8         	fcall	_setRF_Initialization
  8587  26CE  0008               	return
  8588  26CF                     __end_of_RF_Initialization:	
  8589                           
  8590                           	psect	text35
  8591  26F8                     __ptext35:	
  8592 ;; *************** function _setRF_Initialization *****************
  8593 ;; Defined at:
  8594 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  rf              1    wreg     unsigned char 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  rf              1    0[COMMON] unsigned char 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;		None               void
  8601 ;; Registers used:
  8602 ;;		wreg
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;Total ram usage:        1 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    4
  8615 ;; This function calls:
  8616 ;;		Nothing
  8617 ;; This function is called by:
  8618 ;;		_RF_Initialization
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           
  8623                           ;psect for function _setRF_Initialization
  8624  26F8                     _setRF_Initialization:	
  8625                           
  8626                           ;RF_Control_B1.c: 54: Tx_Length=21;
  8627                           
  8628                           ;incstack = 0
  8629                           ; Regs used in _setRF_Initialization: [wreg]
  8630  26F8  3015               	movlw	21
  8631  26F9  0020               	movlb	0	; select bank0
  8632  26FA  00A0               	movwf	??_setRF_Initialization
  8633  26FB  0820               	movf	??_setRF_Initialization,w
  8634  26FC  0021               	movlb	1	; select bank1
  8635  26FD  00C0               	movwf	_Tx_Length^(0+128)
  8636  26FE  0008               	return
  8637  26FF                     __end_of_setRF_Initialization:	
  8638                           
  8639                           	psect	text36
  8640  1001                     __ptext36:	
  8641 ;; *************** function _Mcu_Initialization *****************
  8642 ;; Defined at:
  8643 ;;		line 11 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  8644 ;; Parameters:    Size  Location     Type
  8645 ;;		None
  8646 ;; Auto vars:     Size  Location     Type
  8647 ;;		None
  8648 ;; Return value:  Size  Location     Type
  8649 ;;		None               void
  8650 ;; Registers used:
  8651 ;;		wreg, status,2, status,0, pclath, cstack
  8652 ;; Tracked objects:
  8653 ;;		On entry : 0/0
  8654 ;;		On exit  : 0/0
  8655 ;;		Unchanged: 0/0
  8656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;Total ram usage:        1 bytes
  8662 ;; Hardware stack levels used:    1
  8663 ;; Hardware stack levels required when called:    5
  8664 ;; This function calls:
  8665 ;;		_ADC_Set
  8666 ;;		_INT_Set
  8667 ;;		_IOC_Set
  8668 ;;		_IO_Set
  8669 ;;		_TMR0_Set
  8670 ;; This function is called by:
  8671 ;;		_main
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           
  8676                           ;psect for function _Mcu_Initialization
  8677  1001                     _Mcu_Initialization:	
  8678                           
  8679                           ;MCU_16f1518_B1.c: 14: OSCCON=0x78; ;;
  8680                           
  8681                           ;incstack = 0
  8682                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8683  1001  3078               	movlw	120
  8684  1002  0021               	movlb	1	; select bank1
  8685  1003  0099               	movwf	25	;volatile
  8686                           
  8687                           ;MCU_16f1518_B1.c: 16: IO_Set();
  8688  1004  319A  2224  3190   	fcall	_IO_Set
  8689                           
  8690                           ;MCU_16f1518_B1.c: 18: TMR0_Set();
  8691  1007  31A7  27CA  3190   	fcall	_TMR0_Set
  8692                           
  8693                           ;MCU_16f1518_B1.c: 20: ;;
  8694                           ;MCU_16f1518_B1.c: 22: ADC_Set();
  8695  100A  31A6  26F1  3190   	fcall	_ADC_Set
  8696                           
  8697                           ;MCU_16f1518_B1.c: 26: INT_Set();
  8698  100D  31A6  26D8  3190   	fcall	_INT_Set
  8699                           
  8700                           ;MCU_16f1518_B1.c: 28: IOC_Set();
  8701  1010  31A7  27BD         	fcall	_IOC_Set
  8702                           
  8703                           ;MCU_16f1518_B1.c: 30: ;;
  8704                           ;MCU_16f1518_B1.c: 32: ;;
  8705                           ;MCU_16f1518_B1.c: 34: Memory=&VarMemory;
  8706  1012  30A0               	movlw	_VarMemory& (0+255)
  8707  1013  0020               	movlb	0	; select bank0
  8708  1014  00A1               	movwf	??_Mcu_Initialization
  8709  1015  0821               	movf	??_Mcu_Initialization,w
  8710  1016  00FC               	movwf	_Memory
  8711  1017  0008               	return
  8712  1018                     __end_of_Mcu_Initialization:	
  8713                           
  8714                           	psect	text37
  8715  27CA                     __ptext37:	
  8716 ;; *************** function _TMR0_Set *****************
  8717 ;; Defined at:
  8718 ;;		line 73 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;		None
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;		None
  8723 ;; Return value:  Size  Location     Type
  8724 ;;		None               void
  8725 ;; Registers used:
  8726 ;;		wreg, status,2
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;Total ram usage:        1 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    4
  8739 ;; This function calls:
  8740 ;;		Nothing
  8741 ;; This function is called by:
  8742 ;;		_Mcu_Initialization
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           
  8747                           ;psect for function _TMR0_Set
  8748  27CA                     _TMR0_Set:	
  8749                           
  8750                           ;MCU_16f1518_B1.c: 75: Timer0=&VarTimer0;
  8751                           
  8752                           ;incstack = 0
  8753                           ; Regs used in _TMR0_Set: [wreg+status,2]
  8754  27CA  30C4               	movlw	_VarTimer0& (0+255)
  8755  27CB  0020               	movlb	0	; select bank0
  8756  27CC  00A0               	movwf	??_TMR0_Set
  8757  27CD  0820               	movf	??_TMR0_Set,w
  8758  27CE  0021               	movlb	1	; select bank1
  8759  27CF  00E9               	movwf	_Timer0^(0+128)
  8760                           
  8761                           ;MCU_16f1518_B1.c: 76: OPTION_REG=0x00;
  8762  27D0  0195               	clrf	21	;volatile
  8763                           
  8764                           ;MCU_16f1518_B1.c: 77: TMR0=(256-90);
  8765  27D1  30A6               	movlw	166
  8766  27D2  0020               	movlb	0	; select bank0
  8767  27D3  0095               	movwf	21	;volatile
  8768                           
  8769                           ;MCU_16f1518_B1.c: 78: TMR0IE=1;
  8770  27D4  168B               	bsf	11,5	;volatile
  8771                           
  8772                           ;MCU_16f1518_B1.c: 79: GIE=1;
  8773  27D5  178B               	bsf	11,7	;volatile
  8774  27D6  0008               	return
  8775  27D7                     __end_of_TMR0_Set:	
  8776                           
  8777                           	psect	text38
  8778  1A24                     __ptext38:	
  8779 ;; *************** function _IO_Set *****************
  8780 ;; Defined at:
  8781 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;		None
  8784 ;; Auto vars:     Size  Location     Type
  8785 ;;		None
  8786 ;; Return value:  Size  Location     Type
  8787 ;;		None               void
  8788 ;; Registers used:
  8789 ;;		wreg, status,2
  8790 ;; Tracked objects:
  8791 ;;		On entry : 0/0
  8792 ;;		On exit  : 0/0
  8793 ;;		Unchanged: 0/0
  8794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8799 ;;Total ram usage:        0 bytes
  8800 ;; Hardware stack levels used:    1
  8801 ;; Hardware stack levels required when called:    4
  8802 ;; This function calls:
  8803 ;;		Nothing
  8804 ;; This function is called by:
  8805 ;;		_Mcu_Initialization
  8806 ;; This function uses a non-reentrant model
  8807 ;;
  8808                           
  8809                           
  8810                           ;psect for function _IO_Set
  8811  1A24                     _IO_Set:	
  8812                           
  8813                           ;MCU_16f1518_B1.c: 39: TRISA=0b01110111;;
  8814                           
  8815                           ;incstack = 0
  8816                           ; Regs used in _IO_Set: [wreg+status,2]
  8817  1A24  3077               	movlw	119
  8818  1A25  0021               	movlb	1	; select bank1
  8819  1A26  008C               	movwf	12	;volatile
  8820                           
  8821                           ;MCU_16f1518_B1.c: 40: TRISB=0b00000111;;
  8822  1A27  3007               	movlw	7
  8823  1A28  008D               	movwf	13	;volatile
  8824                           
  8825                           ;MCU_16f1518_B1.c: 41: TRISC=0b00001100;;
  8826  1A29  300C               	movlw	12
  8827  1A2A  008E               	movwf	14	;volatile
  8828                           
  8829                           ;MCU_16f1518_B1.c: 42: LATA=0b00000000;;
  8830  1A2B  0022               	movlb	2	; select bank2
  8831  1A2C  018C               	clrf	12	;volatile
  8832                           
  8833                           ;MCU_16f1518_B1.c: 43: LATB=0b00000010;;
  8834  1A2D  3002               	movlw	2
  8835  1A2E  008D               	movwf	13	;volatile
  8836                           
  8837                           ;MCU_16f1518_B1.c: 44: LATC=0b00000000;;
  8838  1A2F  018E               	clrf	14	;volatile
  8839                           
  8840                           ;MCU_16f1518_B1.c: 45: ANSELA=0b00100010;;
  8841  1A30  3022               	movlw	34
  8842  1A31  0023               	movlb	3	; select bank3
  8843  1A32  008C               	movwf	12	;volatile
  8844                           
  8845                           ;MCU_16f1518_B1.c: 46: ANSELB=0b00000000;;
  8846  1A33  018D               	clrf	13	;volatile
  8847                           
  8848                           ;MCU_16f1518_B1.c: 47: ANSELC=0b00000000;;
  8849  1A34  018E               	clrf	14	;volatile
  8850                           
  8851                           ;MCU_16f1518_B1.c: 48: PORTA=0b01110111;;
  8852  1A35  3077               	movlw	119
  8853  1A36  0020               	movlb	0	; select bank0
  8854  1A37  008C               	movwf	12	;volatile
  8855                           
  8856                           ;MCU_16f1518_B1.c: 49: PORTB=0b00000111;;
  8857  1A38  3007               	movlw	7
  8858  1A39  008D               	movwf	13	;volatile
  8859                           
  8860                           ;MCU_16f1518_B1.c: 50: PORTC=0b00001100;;
  8861  1A3A  300C               	movlw	12
  8862  1A3B  008E               	movwf	14	;volatile
  8863  1A3C  0008               	return
  8864  1A3D                     __end_of_IO_Set:	
  8865                           
  8866                           	psect	text39
  8867  27BD                     __ptext39:	
  8868 ;; *************** function _IOC_Set *****************
  8869 ;; Defined at:
  8870 ;;		line 281 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;		None
  8875 ;; Return value:  Size  Location     Type
  8876 ;;		None               void
  8877 ;; Registers used:
  8878 ;;		wreg, status,2
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;Total ram usage:        0 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    4
  8891 ;; This function calls:
  8892 ;;		Nothing
  8893 ;; This function is called by:
  8894 ;;		_Mcu_Initialization
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           
  8899                           ;psect for function _IOC_Set
  8900  27BD                     _IOC_Set:	
  8901                           
  8902                           ;MCU_16f1518_B1.c: 283: WPUB2=0;
  8903                           
  8904                           ;incstack = 0
  8905                           ; Regs used in _IOC_Set: [wreg+status,2]
  8906  27BD  0024               	movlb	4	; select bank4
  8907  27BE  110D               	bcf	13,2	;volatile
  8908                           
  8909                           ;MCU_16f1518_B1.c: 291: IOCBP=0b00000100;
  8910  27BF  3004               	movlw	4
  8911  27C0  0027               	movlb	7	; select bank7
  8912  27C1  0094               	movwf	20	;volatile
  8913                           
  8914                           ;MCU_16f1518_B1.c: 292: IOCBN=0b00000100;
  8915  27C2  3004               	movlw	4
  8916  27C3  0095               	movwf	21	;volatile
  8917                           
  8918                           ;MCU_16f1518_B1.c: 301: IOCBF=0b00000000;
  8919  27C4  0196               	clrf	22	;volatile
  8920                           
  8921                           ;MCU_16f1518_B1.c: 303: IOCIE=1;
  8922  27C5  158B               	bsf	11,3	;volatile
  8923                           
  8924                           ;MCU_16f1518_B1.c: 304: IOCIF=0;
  8925  27C6  100B               	bcf	11,0	;volatile
  8926                           
  8927                           ;MCU_16f1518_B1.c: 305: PEIE=1;
  8928  27C7  170B               	bsf	11,6	;volatile
  8929                           
  8930                           ;MCU_16f1518_B1.c: 306: GIE=1;
  8931  27C8  178B               	bsf	11,7	;volatile
  8932  27C9  0008               	return
  8933  27CA                     __end_of_IOC_Set:	
  8934                           
  8935                           	psect	text40
  8936  26D8                     __ptext40:	
  8937 ;; *************** function _INT_Set *****************
  8938 ;; Defined at:
  8939 ;;		line 252 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  8940 ;; Parameters:    Size  Location     Type
  8941 ;;		None
  8942 ;; Auto vars:     Size  Location     Type
  8943 ;;		None
  8944 ;; Return value:  Size  Location     Type
  8945 ;;		None               void
  8946 ;; Registers used:
  8947 ;;		None
  8948 ;; Tracked objects:
  8949 ;;		On entry : 0/0
  8950 ;;		On exit  : 0/0
  8951 ;;		Unchanged: 0/0
  8952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;Total ram usage:        0 bytes
  8958 ;; Hardware stack levels used:    1
  8959 ;; Hardware stack levels required when called:    4
  8960 ;; This function calls:
  8961 ;;		Nothing
  8962 ;; This function is called by:
  8963 ;;		_Mcu_Initialization
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           
  8968                           ;psect for function _INT_Set
  8969  26D8                     _INT_Set:	
  8970                           
  8971                           ;MCU_16f1518_B1.c: 254: WPUB0=0;
  8972                           
  8973                           ;incstack = 0
  8974                           ; Regs used in _INT_Set: []
  8975  26D8  0024               	movlb	4	; select bank4
  8976  26D9  100D               	bcf	13,0	;volatile
  8977                           
  8978                           ;MCU_16f1518_B1.c: 255: INTE=1;
  8979  26DA  160B               	bsf	11,4	;volatile
  8980                           
  8981                           ;MCU_16f1518_B1.c: 256: PEIE=1;
  8982  26DB  170B               	bsf	11,6	;volatile
  8983                           
  8984                           ;MCU_16f1518_B1.c: 257: GIE=1;
  8985  26DC  178B               	bsf	11,7	;volatile
  8986  26DD  0008               	return
  8987  26DE                     __end_of_INT_Set:	
  8988                           
  8989                           	psect	text41
  8990  26F1                     __ptext41:	
  8991 ;; *************** function _ADC_Set *****************
  8992 ;; Defined at:
  8993 ;;		line 346 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;		None
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;		None
  8998 ;; Return value:  Size  Location     Type
  8999 ;;		None               void
  9000 ;; Registers used:
  9001 ;;		wreg
  9002 ;; Tracked objects:
  9003 ;;		On entry : 0/0
  9004 ;;		On exit  : 0/0
  9005 ;;		Unchanged: 0/0
  9006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;Total ram usage:        0 bytes
  9012 ;; Hardware stack levels used:    1
  9013 ;; Hardware stack levels required when called:    4
  9014 ;; This function calls:
  9015 ;;		Nothing
  9016 ;; This function is called by:
  9017 ;;		_Mcu_Initialization
  9018 ;; This function uses a non-reentrant model
  9019 ;;
  9020                           
  9021                           
  9022                           ;psect for function _ADC_Set
  9023  26F1                     _ADC_Set:	
  9024                           
  9025                           ;MCU_16f1518_B1.c: 348: ADCON1=0xf2;
  9026                           
  9027                           ;incstack = 0
  9028                           ; Regs used in _ADC_Set: [wreg]
  9029  26F1  30F2               	movlw	242
  9030  26F2  0021               	movlb	1	; select bank1
  9031  26F3  009E               	movwf	30	;volatile
  9032                           
  9033                           ;MCU_16f1518_B1.c: 349: FVRCON=0xc0;
  9034  26F4  30C0               	movlw	192
  9035  26F5  0022               	movlb	2	; select bank2
  9036  26F6  0097               	movwf	23	;volatile
  9037  26F7  0008               	return
  9038  26F8                     __end_of_ADC_Set:	
  9039                           
  9040                           	psect	text42
  9041  191A                     __ptext42:	
  9042 ;; *************** function _MainT_Initialization *****************
  9043 ;; Defined at:
  9044 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;		None
  9049 ;; Return value:  Size  Location     Type
  9050 ;;		None               void
  9051 ;; Registers used:
  9052 ;;		wreg, fsr1l, fsr1h
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;Total ram usage:        1 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    4
  9065 ;; This function calls:
  9066 ;;		Nothing
  9067 ;; This function is called by:
  9068 ;;		_main
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           
  9073                           ;psect for function _MainT_Initialization
  9074  191A                     _MainT_Initialization:	
  9075                           
  9076                           ;main.c: 95: Product=&VarProduct;
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in _MainT_Initialization: [wregfsr1]
  9080  191A  30C5               	movlw	_VarProduct& (0+255)
  9081  191B  0020               	movlb	0	; select bank0
  9082  191C  00A0               	movwf	??_MainT_Initialization
  9083  191D  0820               	movf	??_MainT_Initialization,w
  9084  191E  00EF               	movwf	_Product
  9085                           
  9086                           ;main.c: 96: Product->Data[20]=2;
  9087  191F  3002               	movlw	2
  9088  1920  00A0               	movwf	??_MainT_Initialization
  9089  1921  086F               	movf	_Product,w
  9090  1922  3E14               	addlw	20
  9091  1923  0086               	movwf	6
  9092  1924  3001               	movlw	1	; select bank2/3
  9093  1925  0087               	movwf	7
  9094  1926  0820               	movf	??_MainT_Initialization,w
  9095  1927  0081               	movwf	1
  9096                           
  9097                           ;main.c: 99: TMain=&VarTMain;
  9098  1928  3020               	movlw	_VarTMain& (0+255)
  9099  1929  00A0               	movwf	??_MainT_Initialization
  9100  192A  0820               	movf	??_MainT_Initialization,w
  9101  192B  00FD               	movwf	_TMain
  9102  192C  0008               	return
  9103  192D                     __end_of_MainT_Initialization:	
  9104                           
  9105                           	psect	text43
  9106  1523                     __ptext43:	
  9107 ;; *************** function _MainT *****************
  9108 ;; Defined at:
  9109 ;;		line 104 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;		None
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;		None               void
  9116 ;; Registers used:
  9117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;Total ram usage:        0 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    6
  9130 ;; This function calls:
  9131 ;;		_setBuz
  9132 ;;		_setLoad_Enable
  9133 ;;		_setRF_Enable
  9134 ;;		_setSw_Enable
  9135 ;; This function is called by:
  9136 ;;		_main
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           
  9141                           ;psect for function _MainT
  9142  1523                     _MainT:	
  9143                           
  9144                           ;main.c: 107: if(!TMain->PowerON)
  9145                           
  9146                           ;incstack = 0
  9147                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9148  1523  087D               	movf	_TMain,w
  9149  1524  0086               	movwf	6
  9150  1525  3001               	movlw	1	; select bank2/3
  9151  1526  0087               	movwf	7
  9152  1527  1801               	btfsc	1,0
  9153  1528  2D68               	goto	l9079
  9154                           
  9155                           ;main.c: 108: {
  9156                           ;main.c: 109: TMain->PowerCount++;
  9157  1529  0A7D               	incf	_TMain,w
  9158  152A  0086               	movwf	6
  9159  152B  3001               	movlw	1	; select bank2/3
  9160  152C  0087               	movwf	7
  9161  152D  3001               	movlw	1
  9162  152E  0781               	addwf	1,f
  9163  152F  3141               	addfsr 1,1
  9164  1530  1803               	skipnc
  9165  1531  0A81               	incf	1,f
  9166                           
  9167                           ;main.c: 110: if(TMain->PowerCount == 150)
  9168  1532  0A7D               	incf	_TMain,w
  9169  1533  0086               	movwf	6
  9170  1534  3001               	movlw	1	; select bank2/3
  9171  1535  0087               	movwf	7
  9172  1536  3F40               	moviw [0]fsr1
  9173  1537  3A96               	xorlw	150
  9174  1538  1D03               	skipz
  9175  1539  2D3C               	goto	u8895
  9176  153A  3F41               	moviw [1]fsr1
  9177  153B  3A00               	xorlw	0
  9178  153C                     u8895:	
  9179  153C  1D03               	skipz
  9180  153D  0008               	return
  9181                           
  9182                           ;main.c: 111: {
  9183                           ;main.c: 112: TMain->PowerCount=0;
  9184  153E  0A7D               	incf	_TMain,w
  9185  153F  0086               	movwf	6
  9186  1540  3001               	movlw	1	; select bank2/3
  9187  1541  0087               	movwf	7
  9188  1542  3000               	movlw	0
  9189  1543  3FC0               	movwi [0]fsr1
  9190  1544  3FC1               	movwi [1]fsr1
  9191                           
  9192                           ;main.c: 113: TMain->PowerON=1;
  9193  1545  087D               	movf	_TMain,w
  9194  1546  0086               	movwf	6
  9195  1547  3001               	movlw	1	; select bank2/3
  9196  1548  0087               	movwf	7
  9197  1549  1401               	bsf	1,0
  9198                           
  9199                           ;main.c: 116: ;;
  9200                           ;main.c: 120: setLoad_Enable(1);
  9201  154A  3001               	movlw	1
  9202  154B  3198  20C6  3195   	fcall	_setLoad_Enable
  9203                           
  9204                           ;main.c: 126: setBuz(3,50);
  9205  154E  3032               	movlw	50
  9206  154F  0020               	movlb	0	; select bank0
  9207  1550  00A6               	movwf	setBuz@time
  9208  1551  3000               	movlw	0
  9209  1552  00A7               	movwf	setBuz@time+1
  9210  1553  3003               	movlw	3
  9211  1554  3196  2604  3195   	fcall	_setBuz
  9212                           
  9213                           ;main.c: 127: TMain->SelfTest=1;
  9214  1557  087D               	movf	_TMain,w
  9215  1558  3E03               	addlw	3
  9216  1559  0086               	movwf	6
  9217  155A  3001               	movlw	1	; select bank2/3
  9218  155B  0087               	movwf	7
  9219  155C  1401               	bsf	1,0
  9220                           
  9221                           ;main.c: 129: setSw_Enable(1);
  9222  155D  3001               	movlw	1
  9223  155E  319A  2272  3195   	fcall	_setSw_Enable
  9224                           
  9225                           ;main.c: 132: setRF_Enable(1,1);
  9226  1561  0020               	movlb	0	; select bank0
  9227  1562  01A2               	clrf	setRF_Enable@command
  9228  1563  0AA2               	incf	setRF_Enable@command,f
  9229  1564  3001               	movlw	1
  9230  1565  319C  242E         	fcall	_setRF_Enable
  9231                           
  9232                           ;main.c: 136: }
  9233                           ;main.c: 137: }
  9234  1567  0008               	return
  9235  1568                     l9079:	
  9236                           
  9237                           ;main.c: 138: else
  9238                           ;main.c: 139: {
  9239                           ;main.c: 147: TMain->Count1++;
  9240  1568  087D               	movf	_TMain,w
  9241  1569  3E06               	addlw	6
  9242  156A  0086               	movwf	6
  9243  156B  3001               	movlw	1	; select bank2/3
  9244  156C  0087               	movwf	7
  9245  156D  3001               	movlw	1
  9246  156E  0781               	addwf	1,f
  9247  156F  3141               	addfsr 1,1
  9248  1570  1803               	skipnc
  9249  1571  0A81               	incf	1,f
  9250                           
  9251                           ;main.c: 148: if(TMain->Count1 == 100)
  9252  1572  087D               	movf	_TMain,w
  9253  1573  3E06               	addlw	6
  9254  1574  0086               	movwf	6
  9255  1575  3001               	movlw	1	; select bank2/3
  9256  1576  0087               	movwf	7
  9257  1577  3F40               	moviw [0]fsr1
  9258  1578  3A64               	xorlw	100
  9259  1579  1D03               	skipz
  9260  157A  2D7D               	goto	u8905
  9261  157B  3F41               	moviw [1]fsr1
  9262  157C  3A00               	xorlw	0
  9263  157D                     u8905:	
  9264  157D  1D03               	skipz
  9265  157E  0008               	return
  9266                           
  9267                           ;main.c: 149: {
  9268                           ;main.c: 150: TMain->Count1=0;
  9269  157F  087D               	movf	_TMain,w
  9270  1580  3E06               	addlw	6
  9271  1581  0086               	movwf	6
  9272  1582  3001               	movlw	1	; select bank2/3
  9273  1583  0087               	movwf	7
  9274  1584  3000               	movlw	0
  9275  1585  3FC0               	movwi [0]fsr1
  9276  1586  3FC1               	movwi [1]fsr1
  9277                           
  9278                           ;main.c: 161: if(TMain->Flag)
  9279  1587  087D               	movf	_TMain,w
  9280  1588  0086               	movwf	6
  9281  1589  3001               	movlw	1	; select bank2/3
  9282  158A  0087               	movwf	7
  9283  158B  1981               	btfsc	1,3
  9284  158C  0008               	return
  9285                           
  9286                           ;main.c: 171: else
  9287                           ;main.c: 172: {
  9288                           ;main.c: 173: TMain->Flag=1;
  9289                           
  9290                           ;main.c: 162: {
  9291                           ;main.c: 170: }
  9292  158D  087D               	movf	_TMain,w
  9293  158E  0086               	movwf	6
  9294  158F  3001               	movlw	1	; select bank2/3
  9295  1590  0087               	movwf	7
  9296  1591  1581               	bsf	1,3
  9297  1592  0008               	return
  9298  1593                     __end_of_MainT:	
  9299                           
  9300                           	psect	text44
  9301  18C6                     __ptext44:	
  9302 ;; *************** function _setLoad_Enable *****************
  9303 ;; Defined at:
  9304 ;;		line 257 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;  command         1    wreg     unsigned char 
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;  command         1    0[BANK0 ] unsigned char 
  9309 ;; Return value:  Size  Location     Type
  9310 ;;		None               void
  9311 ;; Registers used:
  9312 ;;		wreg, fsr1l, fsr1h
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 0/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;Total ram usage:        1 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:    4
  9325 ;; This function calls:
  9326 ;;		Nothing
  9327 ;; This function is called by:
  9328 ;;		_MainT
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _setLoad_Enable
  9334  18C6                     _setLoad_Enable:	
  9335                           
  9336                           ;incstack = 0
  9337                           ; Regs used in _setLoad_Enable: [wregfsr1]
  9338                           ;setLoad_Enable@command stored from wreg
  9339  18C6  0020               	movlb	0	; select bank0
  9340  18C7  00A0               	movwf	setLoad_Enable@command
  9341                           
  9342                           ;OverLoad_B1.c: 259: Load->Enable=command;
  9343  18C8  086E               	movf	_Load,w
  9344  18C9  0086               	movwf	6
  9345  18CA  3002               	movlw	2	; select bank4/5
  9346  18CB  0087               	movwf	7
  9347  18CC  0820               	movf	setLoad_Enable@command,w
  9348  18CD  1001               	bcf	1,0
  9349  18CE  1D03               	skipz
  9350  18CF  1401               	bsf	1,0
  9351                           
  9352                           ;OverLoad_B1.c: 260: Load->GO=0;
  9353  18D0  086E               	movf	_Load,w
  9354  18D1  0086               	movwf	6
  9355  18D2  3002               	movlw	2	; select bank4/5
  9356  18D3  0087               	movwf	7
  9357  18D4  1081               	bcf	1,1
  9358  18D5  0008               	return
  9359  18D6                     __end_of_setLoad_Enable:	
  9360                           
  9361                           	psect	text45
  9362  004F                     __ptext45:	
  9363 ;; *************** function _Load_Main *****************
  9364 ;; Defined at:
  9365 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;  i               1   17[BANK0 ] unsigned char 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;		None               void
  9372 ;; Registers used:
  9373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;Total ram usage:        5 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    9
  9386 ;; This function calls:
  9387 ;;		___lwdiv
  9388 ;;		___wmul
  9389 ;;		_setDimmerLights_Clear
  9390 ;;		_setLoad_AH_AL_Restore
  9391 ;;		_setLoad_Exceptions
  9392 ;; This function is called by:
  9393 ;;		_main
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _Load_Main
  9399  004F                     _Load_Main:	
  9400                           
  9401                           ;OverLoad_B1.c: 47: char i;
  9402                           ;OverLoad_B1.c: 48: if(Load->ERROR)
  9403                           
  9404                           ;incstack = 0
  9405                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9406  004F  0020               	movlb	0	; select bank0
  9407  0050  086E               	movf	_Load,w
  9408  0051  0086               	movwf	6
  9409  0052  3002               	movlw	2	; select bank4/5
  9410  0053  0087               	movwf	7
  9411  0054  1E81               	btfss	1,5
  9412  0055  287C               	goto	l9113
  9413                           
  9414                           ;OverLoad_B1.c: 49: {
  9415                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
  9416  0056  086E               	movf	_Load,w
  9417  0057  3E03               	addlw	3
  9418  0058  0086               	movwf	6
  9419  0059  3002               	movlw	2	; select bank4/5
  9420  005A  0087               	movwf	7
  9421  005B  3001               	movlw	1
  9422  005C  0781               	addwf	1,f
  9423  005D  3141               	addfsr 1,1
  9424  005E  1803               	skipnc
  9425  005F  0A81               	incf	1,f
  9426                           
  9427                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
  9428  0060  086E               	movf	_Load,w
  9429  0061  3E03               	addlw	3
  9430  0062  0086               	movwf	6
  9431  0063  3002               	movlw	2	; select bank4/5
  9432  0064  0087               	movwf	7
  9433  0065  3F40               	moviw [0]fsr1
  9434  0066  00AD               	movwf	??_Load_Main
  9435  0067  3F41               	moviw [1]fsr1
  9436  0068  00AE               	movwf	??_Load_Main+1
  9437  0069  3003               	movlw	3
  9438  006A  022E               	subwf	??_Load_Main+1,w
  9439  006B  30E8               	movlw	232
  9440  006C  1903               	skipnz
  9441  006D  022D               	subwf	??_Load_Main,w
  9442  006E  1C03               	skipc
  9443  006F  0008               	return
  9444                           
  9445                           ;OverLoad_B1.c: 52: {
  9446                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
  9447  0070  086E               	movf	_Load,w
  9448  0071  3E03               	addlw	3
  9449  0072  0086               	movwf	6
  9450  0073  3002               	movlw	2	; select bank4/5
  9451  0074  0087               	movwf	7
  9452  0075  3000               	movlw	0
  9453  0076  3FC0               	movwi [0]fsr1
  9454  0077  3FC1               	movwi [1]fsr1
  9455                           
  9456                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
  9457  0078  3000               	movlw	0
  9458  0079  319F  2735         	fcall	_setLoad_Exceptions
  9459                           
  9460                           ;OverLoad_B1.c: 55: }
  9461                           ;OverLoad_B1.c: 56: }
  9462  007B  0008               	return
  9463  007C                     l9113:	
  9464                           
  9465                           ;OverLoad_B1.c: 57: else
  9466                           ;OverLoad_B1.c: 58: {
  9467                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
  9468  007C  0020               	movlb	0	; select bank0
  9469  007D  086E               	movf	_Load,w
  9470  007E  0086               	movwf	6
  9471  007F  3002               	movlw	2	; select bank4/5
  9472  0080  0087               	movwf	7
  9473  0081  1E01               	btfss	1,4
  9474  0082  2B4A               	goto	l9221
  9475                           
  9476                           ;OverLoad_B1.c: 60: {
  9477                           ;OverLoad_B1.c: 61: Load->Time++;
  9478  0083  0A6E               	incf	_Load,w
  9479  0084  0086               	movwf	6
  9480  0085  3002               	movlw	2	; select bank4/5
  9481  0086  0087               	movwf	7
  9482  0087  3001               	movlw	1
  9483  0088  0781               	addwf	1,f
  9484  0089  3141               	addfsr 1,1
  9485  008A  1803               	skipnc
  9486  008B  0A81               	incf	1,f
  9487                           
  9488                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
  9489  008C  0A6E               	incf	_Load,w
  9490  008D  0086               	movwf	6
  9491  008E  3002               	movlw	2	; select bank4/5
  9492  008F  0087               	movwf	7
  9493  0090  3F40               	moviw [0]fsr1
  9494  0091  00AD               	movwf	??_Load_Main
  9495  0092  3F41               	moviw [1]fsr1
  9496  0093  00AE               	movwf	??_Load_Main+1
  9497  0094  3000               	movlw	0
  9498  0095  022E               	subwf	??_Load_Main+1,w
  9499  0096  3005               	movlw	5
  9500  0097  1903               	skipnz
  9501  0098  022D               	subwf	??_Load_Main,w
  9502  0099  1C03               	skipc
  9503  009A  0008               	return
  9504                           
  9505                           ;OverLoad_B1.c: 63: {
  9506                           ;OverLoad_B1.c: 64: Load->Time=0;
  9507  009B  0A6E               	incf	_Load,w
  9508  009C  0086               	movwf	6
  9509  009D  3002               	movlw	2	; select bank4/5
  9510  009E  0087               	movwf	7
  9511  009F  3000               	movlw	0
  9512  00A0  3FC0               	movwi [0]fsr1
  9513  00A1  3FC1               	movwi [1]fsr1
  9514                           
  9515                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
  9516  00A2  086E               	movf	_Load,w
  9517  00A3  0086               	movwf	6
  9518  00A4  3002               	movlw	2	; select bank4/5
  9519  00A5  0087               	movwf	7
  9520  00A6  1201               	bcf	1,4
  9521                           
  9522                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
  9523  00A7  086E               	movf	_Load,w
  9524  00A8  3E45               	addlw	69
  9525  00A9  0086               	movwf	6
  9526  00AA  3002               	movlw	2	; select bank4/5
  9527  00AB  0087               	movwf	7
  9528  00AC  086E               	movf	_Load,w
  9529  00AD  3E44               	addlw	68
  9530  00AE  0084               	movwf	4
  9531  00AF  3002               	movlw	2	; select bank4/5
  9532  00B0  0085               	movwf	5
  9533  00B1  0800               	movf	0,w
  9534  00B2  00AD               	movwf	??_Load_Main
  9535  00B3  086E               	movf	_Load,w
  9536  00B4  3E43               	addlw	67
  9537  00B5  0084               	movwf	4
  9538  00B6  3002               	movlw	2	; select bank4/5
  9539  00B7  0085               	movwf	5
  9540  00B8  0800               	movf	0,w
  9541  00B9  072D               	addwf	??_Load_Main,w
  9542  00BA  0701               	addwf	1,w
  9543  00BB  00AE               	movwf	??_Load_Main+1
  9544  00BC  086E               	movf	_Load,w
  9545  00BD  3E3E               	addlw	62
  9546  00BE  0086               	movwf	6
  9547  00BF  3002               	movlw	2	; select bank4/5
  9548  00C0  0087               	movwf	7
  9549  00C1  082E               	movf	??_Load_Main+1,w
  9550  00C2  0081               	movwf	1
  9551                           
  9552                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
  9553  00C3  01B1               	clrf	Load_Main@i
  9554  00C4  0AB1               	incf	Load_Main@i,f
  9555  00C5  3004               	movlw	4
  9556  00C6  0231               	subwf	Load_Main@i,w
  9557  00C7  1803               	btfsc	3,0
  9558  00C8  28F7               	goto	l9135
  9559  00C9                     l9129:	
  9560                           
  9561                           ;OverLoad_B1.c: 68: {
  9562                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
  9563  00C9  3531               	lslf	Load_Main@i,w
  9564  00CA  3E08               	addlw	8
  9565  00CB  076E               	addwf	_Load,w
  9566  00CC  00AD               	movwf	??_Load_Main
  9567  00CD  082D               	movf	??_Load_Main,w
  9568  00CE  0086               	movwf	6
  9569  00CF  3002               	movlw	2	; select bank4/5
  9570  00D0  0087               	movwf	7
  9571  00D1  086E               	movf	_Load,w
  9572  00D2  3E2E               	addlw	46
  9573  00D3  0084               	movwf	4
  9574  00D4  3002               	movlw	2	; select bank4/5
  9575  00D5  0085               	movwf	5
  9576  00D6  3F40               	moviw [0]fsr1
  9577  00D7  0780               	addwf	0,f
  9578  00D8  3101               	addfsr 0,1
  9579  00D9  3F41               	moviw [1]fsr1
  9580  00DA  3D80               	addwfc	0,f
  9581  00DB  313F               	addfsr 0,-1
  9582                           
  9583                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
  9584  00DC  3531               	lslf	Load_Main@i,w
  9585  00DD  3E1A               	addlw	26
  9586  00DE  076E               	addwf	_Load,w
  9587  00DF  00AD               	movwf	??_Load_Main
  9588  00E0  082D               	movf	??_Load_Main,w
  9589  00E1  0086               	movwf	6
  9590  00E2  3002               	movlw	2	; select bank4/5
  9591  00E3  0087               	movwf	7
  9592  00E4  086E               	movf	_Load,w
  9593  00E5  3E30               	addlw	48
  9594  00E6  0084               	movwf	4
  9595  00E7  3002               	movlw	2	; select bank4/5
  9596  00E8  0085               	movwf	5
  9597  00E9  3F40               	moviw [0]fsr1
  9598  00EA  0780               	addwf	0,f
  9599  00EB  3101               	addfsr 0,1
  9600  00EC  3F41               	moviw [1]fsr1
  9601  00ED  3D80               	addwfc	0,f
  9602  00EE  313F               	addfsr 0,-1
  9603  00EF  3001               	movlw	1
  9604  00F0  00AD               	movwf	??_Load_Main
  9605  00F1  082D               	movf	??_Load_Main,w
  9606  00F2  07B1               	addwf	Load_Main@i,f
  9607  00F3  3004               	movlw	4
  9608  00F4  0231               	subwf	Load_Main@i,w
  9609  00F5  1C03               	skipc
  9610  00F6  28C9               	goto	l9129
  9611  00F7                     l9135:	
  9612                           
  9613                           ;OverLoad_B1.c: 71: }
  9614                           ;OverLoad_B1.c: 72: Load->ADH/=3;
  9615  00F7  3003               	movlw	3
  9616  00F8  00A0               	movwf	___lwdiv@divisor
  9617  00F9  3000               	movlw	0
  9618  00FA  00A1               	movwf	___lwdiv@divisor+1
  9619  00FB  086E               	movf	_Load,w
  9620  00FC  3E2E               	addlw	46
  9621  00FD  0086               	movwf	6
  9622  00FE  3002               	movlw	2	; select bank4/5
  9623  00FF  0087               	movwf	7
  9624  0100  3F40               	moviw [0]fsr1
  9625  0101  00A2               	movwf	___lwdiv@dividend
  9626  0102  3F41               	moviw [1]fsr1
  9627  0103  00A3               	movwf	___lwdiv@dividend+1
  9628  0104  319E  263B  3180   	fcall	___lwdiv
  9629  0107  0020               	movlb	0	; select bank0
  9630  0108  086E               	movf	_Load,w
  9631  0109  3E2E               	addlw	46
  9632  010A  0086               	movwf	6
  9633  010B  3002               	movlw	2	; select bank4/5
  9634  010C  0087               	movwf	7
  9635  010D  0820               	movf	?___lwdiv,w
  9636  010E  3FC0               	movwi [0]fsr1
  9637  010F  0821               	movf	?___lwdiv+1,w
  9638  0110  3FC1               	movwi [1]fsr1
  9639                           
  9640                           ;OverLoad_B1.c: 73: Load->ADL/=3;
  9641  0111  3003               	movlw	3
  9642  0112  00A0               	movwf	___lwdiv@divisor
  9643  0113  3000               	movlw	0
  9644  0114  00A1               	movwf	___lwdiv@divisor+1
  9645  0115  086E               	movf	_Load,w
  9646  0116  3E30               	addlw	48
  9647  0117  0086               	movwf	6
  9648  0118  3002               	movlw	2	; select bank4/5
  9649  0119  0087               	movwf	7
  9650  011A  3F40               	moviw [0]fsr1
  9651  011B  00A2               	movwf	___lwdiv@dividend
  9652  011C  3F41               	moviw [1]fsr1
  9653  011D  00A3               	movwf	___lwdiv@dividend+1
  9654  011E  319E  263B  3180   	fcall	___lwdiv
  9655  0121  0020               	movlb	0	; select bank0
  9656  0122  086E               	movf	_Load,w
  9657  0123  3E30               	addlw	48
  9658  0124  0086               	movwf	6
  9659  0125  3002               	movlw	2	; select bank4/5
  9660  0126  0087               	movwf	7
  9661  0127  0820               	movf	?___lwdiv,w
  9662  0128  3FC0               	movwi [0]fsr1
  9663  0129  0821               	movf	?___lwdiv+1,w
  9664  012A  3FC1               	movwi [1]fsr1
  9665                           
  9666                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
  9667  012B  086E               	movf	_Load,w
  9668  012C  3E2E               	addlw	46
  9669  012D  0086               	movwf	6
  9670  012E  3002               	movlw	2	; select bank4/5
  9671  012F  0087               	movwf	7
  9672  0130  3F40               	moviw [0]fsr1
  9673  0131  00AD               	movwf	??_Load_Main
  9674  0132  3F41               	moviw [1]fsr1
  9675  0133  00AE               	movwf	??_Load_Main+1
  9676  0134  086E               	movf	_Load,w
  9677  0135  3E30               	addlw	48
  9678  0136  0086               	movwf	6
  9679  0137  3002               	movlw	2	; select bank4/5
  9680  0138  0087               	movwf	7
  9681  0139  3F40               	moviw [0]fsr1
  9682  013A  00AF               	movwf	??_Load_Main+2
  9683  013B  3F41               	moviw [1]fsr1
  9684  013C  00B0               	movwf	??_Load_Main+3
  9685  013D  082E               	movf	??_Load_Main+1,w
  9686  013E  0230               	subwf	??_Load_Main+3,w
  9687  013F  1D03               	skipz
  9688  0140  2943               	goto	u9015
  9689  0141  082D               	movf	??_Load_Main,w
  9690  0142  022F               	subwf	??_Load_Main+2,w
  9691  0143                     u9015:	
  9692  0143  1803               	skipnc
  9693  0144  2ACD               	goto	l9203
  9694                           
  9695                           ;OverLoad_B1.c: 75: {
  9696                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
  9697  0145  086E               	movf	_Load,w
  9698  0146  3E2E               	addlw	46
  9699  0147  0086               	movwf	6
  9700  0148  3002               	movlw	2	; select bank4/5
  9701  0149  0087               	movwf	7
  9702  014A  086E               	movf	_Load,w
  9703  014B  3E30               	addlw	48
  9704  014C  0084               	movwf	4
  9705  014D  3002               	movlw	2	; select bank4/5
  9706  014E  0085               	movwf	5
  9707  014F  3F00               	moviw [0]fsr0
  9708  0150  00AD               	movwf	??_Load_Main
  9709  0151  3F01               	moviw [1]fsr0
  9710  0152  00AE               	movwf	??_Load_Main+1
  9711  0153  09AD               	comf	??_Load_Main,f
  9712  0154  09AE               	comf	??_Load_Main+1,f
  9713  0155  0AAD               	incf	??_Load_Main,f
  9714  0156  1903               	skipnz
  9715  0157  0AAE               	incf	??_Load_Main+1,f
  9716  0158  3F40               	moviw [0]fsr1
  9717  0159  072D               	addwf	??_Load_Main,w
  9718  015A  00AF               	movwf	??_Load_Main+2
  9719  015B  3F41               	moviw [1]fsr1
  9720  015C  3D2E               	addwfc	??_Load_Main+1,w
  9721  015D  00B0               	movwf	??_Load_Main+3
  9722  015E  086E               	movf	_Load,w
  9723  015F  3E2C               	addlw	44
  9724  0160  0086               	movwf	6
  9725  0161  3002               	movlw	2	; select bank4/5
  9726  0162  0087               	movwf	7
  9727  0163  082F               	movf	??_Load_Main+2,w
  9728  0164  3FC0               	movwi [0]fsr1
  9729  0165  0830               	movf	??_Load_Main+3,w
  9730  0166  3FC1               	movwi [1]fsr1
  9731                           
  9732                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
  9733  0167  086E               	movf	_Load,w
  9734  0168  3E3A               	addlw	58
  9735  0169  0086               	movwf	6
  9736  016A  3002               	movlw	2	; select bank4/5
  9737  016B  0087               	movwf	7
  9738  016C  3002               	movlw	2
  9739  016D  0201               	subwf	1,w
  9740  016E  1803               	skipnc
  9741  016F  29C0               	goto	l9157
  9742                           
  9743                           ;OverLoad_B1.c: 79: {
  9744                           ;OverLoad_B1.c: 80: Load->Count++;
  9745  0170  3001               	movlw	1
  9746  0171  00AD               	movwf	??_Load_Main
  9747  0172  086E               	movf	_Load,w
  9748  0173  3E3A               	addlw	58
  9749  0174  0086               	movwf	6
  9750  0175  3002               	movlw	2	; select bank4/5
  9751  0176  0087               	movwf	7
  9752  0177  082D               	movf	??_Load_Main,w
  9753  0178  0781               	addwf	1,f
  9754                           
  9755                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
  9756  0179  086E               	movf	_Load,w
  9757  017A  3E3A               	addlw	58
  9758  017B  0086               	movwf	6
  9759  017C  3002               	movlw	2	; select bank4/5
  9760  017D  0087               	movwf	7
  9761  017E  0801               	movf	1,w
  9762  017F  3A01               	xorlw	1
  9763  0180  1D03               	skipz
  9764  0181  298C               	goto	l9149
  9765                           
  9766                           ;OverLoad_B1.c: 82: {
  9767                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
  9768  0182  086E               	movf	_Load,w
  9769  0183  3E36               	addlw	54
  9770  0184  0086               	movwf	6
  9771  0185  3002               	movlw	2	; select bank4/5
  9772  0186  0087               	movwf	7
  9773  0187  30F4               	movlw	244
  9774  0188  3FC0               	movwi [0]fsr1
  9775  0189  3001               	movlw	1
  9776  018A  3FC1               	movwi [1]fsr1
  9777                           
  9778                           ;OverLoad_B1.c: 84: }
  9779  018B  29C0               	goto	l9157
  9780  018C                     l9149:	
  9781                           
  9782                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
  9783  018C  086E               	movf	_Load,w
  9784  018D  3E3A               	addlw	58
  9785  018E  0086               	movwf	6
  9786  018F  3002               	movlw	2	; select bank4/5
  9787  0190  0087               	movwf	7
  9788  0191  0801               	movf	1,w
  9789  0192  3A02               	xorlw	2
  9790  0193  1D03               	skipz
  9791  0194  29C0               	goto	l9157
  9792                           
  9793                           ;OverLoad_B1.c: 86: {
  9794                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
  9795  0195  086E               	movf	_Load,w
  9796  0196  3E3E               	addlw	62
  9797  0197  0086               	movwf	6
  9798  0198  3002               	movlw	2	; select bank4/5
  9799  0199  0087               	movwf	7
  9800  019A  0801               	movf	1,w
  9801  019B  3A01               	xorlw	1
  9802  019C  1D03               	skipz
  9803  019D  29A8               	goto	l9155
  9804                           
  9805                           ;OverLoad_B1.c: 88: {
  9806                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x32;
  9807  019E  086E               	movf	_Load,w
  9808  019F  3E36               	addlw	54
  9809  01A0  0086               	movwf	6
  9810  01A1  3002               	movlw	2	; select bank4/5
  9811  01A2  0087               	movwf	7
  9812  01A3  3032               	movlw	50
  9813  01A4  3FC0               	movwi [0]fsr1
  9814  01A5  3000               	movlw	0
  9815  01A6  3FC1               	movwi [1]fsr1
  9816                           
  9817                           ;OverLoad_B1.c: 90: }
  9818  01A7  29C0               	goto	l9157
  9819  01A8                     l9155:	
  9820                           
  9821                           ;OverLoad_B1.c: 91: else
  9822                           ;OverLoad_B1.c: 92: {
  9823                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x32+Load->TotalLoad)-0x08;
  9824  01A8  086E               	movf	_Load,w
  9825  01A9  3E06               	addlw	6
  9826  01AA  0086               	movwf	6
  9827  01AB  3002               	movlw	2	; select bank4/5
  9828  01AC  0087               	movwf	7
  9829  01AD  3F40               	moviw [0]fsr1
  9830  01AE  00AD               	movwf	??_Load_Main
  9831  01AF  3F41               	moviw [1]fsr1
  9832  01B0  00AE               	movwf	??_Load_Main+1
  9833  01B1  082D               	movf	??_Load_Main,w
  9834  01B2  3E2A               	addlw	42
  9835  01B3  00AF               	movwf	??_Load_Main+2
  9836  01B4  3000               	movlw	0
  9837  01B5  3D2E               	addwfc	??_Load_Main+1,w
  9838  01B6  00B0               	movwf	??_Load_Main+3
  9839  01B7  086E               	movf	_Load,w
  9840  01B8  3E36               	addlw	54
  9841  01B9  0086               	movwf	6
  9842  01BA  3002               	movlw	2	; select bank4/5
  9843  01BB  0087               	movwf	7
  9844  01BC  082F               	movf	??_Load_Main+2,w
  9845  01BD  3FC0               	movwi [0]fsr1
  9846  01BE  0830               	movf	??_Load_Main+3,w
  9847  01BF  3FC1               	movwi [1]fsr1
  9848  01C0                     l9157:	
  9849                           
  9850                           ;OverLoad_B1.c: 94: }
  9851                           ;OverLoad_B1.c: 95: }
  9852                           ;OverLoad_B1.c: 96: }
  9853                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
  9854  01C0  086E               	movf	_Load,w
  9855  01C1  3E36               	addlw	54
  9856  01C2  0086               	movwf	6
  9857  01C3  3002               	movlw	2	; select bank4/5
  9858  01C4  0087               	movwf	7
  9859  01C5  3F40               	moviw [0]fsr1
  9860  01C6  00AD               	movwf	??_Load_Main
  9861  01C7  3F41               	moviw [1]fsr1
  9862  01C8  00AE               	movwf	??_Load_Main+1
  9863  01C9  086E               	movf	_Load,w
  9864  01CA  3E2C               	addlw	44
  9865  01CB  0086               	movwf	6
  9866  01CC  3002               	movlw	2	; select bank4/5
  9867  01CD  0087               	movwf	7
  9868  01CE  3F40               	moviw [0]fsr1
  9869  01CF  00AF               	movwf	??_Load_Main+2
  9870  01D0  3F41               	moviw [1]fsr1
  9871  01D1  00B0               	movwf	??_Load_Main+3
  9872  01D2  082E               	movf	??_Load_Main+1,w
  9873  01D3  0230               	subwf	??_Load_Main+3,w
  9874  01D4  1D03               	skipz
  9875  01D5  29D8               	goto	u9065
  9876  01D6  082D               	movf	??_Load_Main,w
  9877  01D7  022F               	subwf	??_Load_Main+2,w
  9878  01D8                     u9065:	
  9879  01D8  1C03               	skipc
  9880  01D9  2A46               	goto	l9177
  9881                           
  9882                           ;OverLoad_B1.c: 99: {
  9883                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
  9884  01DA  3001               	movlw	1
  9885  01DB  00AD               	movwf	??_Load_Main
  9886  01DC  086E               	movf	_Load,w
  9887  01DD  3E3C               	addlw	60
  9888  01DE  0086               	movwf	6
  9889  01DF  3002               	movlw	2	; select bank4/5
  9890  01E0  0087               	movwf	7
  9891  01E1  082D               	movf	??_Load_Main,w
  9892  01E2  0781               	addwf	1,f
  9893                           
  9894                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
  9895  01E3  086E               	movf	_Load,w
  9896  01E4  3E3C               	addlw	60
  9897  01E5  0086               	movwf	6
  9898  01E6  3002               	movlw	2	; select bank4/5
  9899  01E7  0087               	movwf	7
  9900  01E8  3003               	movlw	3
  9901  01E9  0201               	subwf	1,w
  9902  01EA  1C03               	skipc
  9903  01EB  2ACD               	goto	l9203
  9904                           
  9905                           ;OverLoad_B1.c: 102: {
  9906                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
  9907  01EC  086E               	movf	_Load,w
  9908  01ED  3E3C               	addlw	60
  9909  01EE  0086               	movwf	6
  9910  01EF  3002               	movlw	2	; select bank4/5
  9911  01F0  0087               	movwf	7
  9912  01F1  0181               	clrf	1
  9913                           
  9914                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
  9915  01F2  3001               	movlw	1
  9916  01F3  319F  2735  3180   	fcall	_setLoad_Exceptions
  9917                           
  9918                           ;OverLoad_B1.c: 106: Product->Data[4]=(Load->AD >> 8);
  9919  01F6  0020               	movlb	0	; select bank0
  9920  01F7  086E               	movf	_Load,w
  9921  01F8  3E2C               	addlw	44
  9922  01F9  0086               	movwf	6
  9923  01FA  3002               	movlw	2	; select bank4/5
  9924  01FB  0087               	movwf	7
  9925  01FC  3F40               	moviw [0]fsr1
  9926  01FD  00AD               	movwf	??_Load_Main
  9927  01FE  3F41               	moviw [1]fsr1
  9928  01FF  00AE               	movwf	??_Load_Main+1
  9929  0200  082E               	movf	??_Load_Main+1,w
  9930  0201  00AF               	movwf	??_Load_Main+2
  9931  0202  086F               	movf	_Product,w
  9932  0203  3E04               	addlw	4
  9933  0204  0086               	movwf	6
  9934  0205  3001               	movlw	1	; select bank2/3
  9935  0206  0087               	movwf	7
  9936  0207  082F               	movf	??_Load_Main+2,w
  9937  0208  0081               	movwf	1
  9938                           
  9939                           ;OverLoad_B1.c: 107: Product->Data[5]=Load->AD;
  9940  0209  086E               	movf	_Load,w
  9941  020A  3E2C               	addlw	44
  9942  020B  0086               	movwf	6
  9943  020C  3002               	movlw	2	; select bank4/5
  9944  020D  0087               	movwf	7
  9945  020E  0801               	movf	1,w
  9946  020F  00AD               	movwf	??_Load_Main
  9947  0210  086F               	movf	_Product,w
  9948  0211  3E05               	addlw	5
  9949  0212  0086               	movwf	6
  9950  0213  3001               	movlw	1	; select bank2/3
  9951  0214  0087               	movwf	7
  9952  0215  082D               	movf	??_Load_Main,w
  9953  0216  0081               	movwf	1
  9954                           
  9955                           ;OverLoad_B1.c: 108: Product->Data[16]=(Load->JudgeValue >> 8);
  9956  0217  086E               	movf	_Load,w
  9957  0218  3E36               	addlw	54
  9958  0219  0086               	movwf	6
  9959  021A  3002               	movlw	2	; select bank4/5
  9960  021B  0087               	movwf	7
  9961  021C  3F40               	moviw [0]fsr1
  9962  021D  00AD               	movwf	??_Load_Main
  9963  021E  3F41               	moviw [1]fsr1
  9964  021F  00AE               	movwf	??_Load_Main+1
  9965  0220  082E               	movf	??_Load_Main+1,w
  9966  0221  00AF               	movwf	??_Load_Main+2
  9967  0222  086F               	movf	_Product,w
  9968  0223  3E10               	addlw	16
  9969  0224  0086               	movwf	6
  9970  0225  3001               	movlw	1	; select bank2/3
  9971  0226  0087               	movwf	7
  9972  0227  082F               	movf	??_Load_Main+2,w
  9973  0228  0081               	movwf	1
  9974                           
  9975                           ;OverLoad_B1.c: 109: Product->Data[17]=Load->JudgeValue;
  9976  0229  086E               	movf	_Load,w
  9977  022A  3E36               	addlw	54
  9978  022B  0086               	movwf	6
  9979  022C  3002               	movlw	2	; select bank4/5
  9980  022D  0087               	movwf	7
  9981  022E  0801               	movf	1,w
  9982  022F  00AD               	movwf	??_Load_Main
  9983  0230  086F               	movf	_Product,w
  9984  0231  3E11               	addlw	17
  9985  0232  0086               	movwf	6
  9986  0233  3001               	movlw	1	; select bank2/3
  9987  0234  0087               	movwf	7
  9988  0235  082D               	movf	??_Load_Main,w
  9989  0236  0081               	movwf	1
  9990                           
  9991                           ;OverLoad_B1.c: 110: Product->Data[8]=Load->LightsCount;
  9992  0237  086E               	movf	_Load,w
  9993  0238  3E3E               	addlw	62
  9994  0239  0086               	movwf	6
  9995  023A  3002               	movlw	2	; select bank4/5
  9996  023B  0087               	movwf	7
  9997  023C  0801               	movf	1,w
  9998  023D  00AD               	movwf	??_Load_Main
  9999  023E  086F               	movf	_Product,w
 10000  023F  3E08               	addlw	8
 10001  0240  0086               	movwf	6
 10002  0241  3001               	movlw	1	; select bank2/3
 10003  0242  0087               	movwf	7
 10004  0243  082D               	movf	??_Load_Main,w
 10005  0244  0081               	movwf	1
 10006                           
 10007                           ;OverLoad_B1.c: 113: }
 10008                           ;OverLoad_B1.c: 114: }
 10009  0245  2ACD               	goto	l9203
 10010  0246                     l9177:	
 10011                           
 10012                           ;OverLoad_B1.c: 115: else
 10013                           ;OverLoad_B1.c: 116: {
 10014                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 10015  0246  086E               	movf	_Load,w
 10016  0247  3E3C               	addlw	60
 10017  0248  0086               	movwf	6
 10018  0249  3002               	movlw	2	; select bank4/5
 10019  024A  0087               	movwf	7
 10020  024B  0181               	clrf	1
 10021                           
 10022                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 10023  024C  086E               	movf	_Load,w
 10024  024D  3E42               	addlw	66
 10025  024E  0086               	movwf	6
 10026  024F  3002               	movlw	2	; select bank4/5
 10027  0250  0087               	movwf	7
 10028  0251  300A               	movlw	10
 10029  0252  0201               	subwf	1,w
 10030  0253  1803               	skipnc
 10031  0254  2A5E               	goto	l9183
 10032                           
 10033                           ;OverLoad_B1.c: 119: {
 10034                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 10035  0255  3001               	movlw	1
 10036  0256  00AD               	movwf	??_Load_Main
 10037  0257  086E               	movf	_Load,w
 10038  0258  3E42               	addlw	66
 10039  0259  0086               	movwf	6
 10040  025A  3002               	movlw	2	; select bank4/5
 10041  025B  0087               	movwf	7
 10042  025C  082D               	movf	??_Load_Main,w
 10043  025D  0781               	addwf	1,f
 10044  025E                     l9183:	
 10045                           
 10046                           ;OverLoad_B1.c: 121: }
 10047                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 10048  025E  086E               	movf	_Load,w
 10049  025F  3E42               	addlw	66
 10050  0260  0086               	movwf	6
 10051  0261  3002               	movlw	2	; select bank4/5
 10052  0262  0087               	movwf	7
 10053  0263  300A               	movlw	10
 10054  0264  0201               	subwf	1,w
 10055  0265  1C03               	skipc
 10056  0266  2ACD               	goto	l9203
 10057                           
 10058                           ;OverLoad_B1.c: 123: {
 10059                           ;OverLoad_B1.c: 124: Load->Safe=1;
 10060  0267  086E               	movf	_Load,w
 10061  0268  0086               	movwf	6
 10062  0269  3002               	movlw	2	; select bank4/5
 10063  026A  0087               	movwf	7
 10064  026B  1581               	bsf	1,3
 10065                           
 10066                           ;OverLoad_B1.c: 127: setDimmerLights_Clear(1,1);
 10067  026C  01A2               	clrf	setDimmerLights_Clear@command
 10068  026D  0AA2               	incf	setDimmerLights_Clear@command,f
 10069  026E  3001               	movlw	1
 10070  026F  3198  20B6  3180   	fcall	_setDimmerLights_Clear
 10071                           
 10072                           ;OverLoad_B1.c: 131: setDimmerLights_Clear(2,1);
 10073  0272  0020               	movlb	0	; select bank0
 10074  0273  01A2               	clrf	setDimmerLights_Clear@command
 10075  0274  0AA2               	incf	setDimmerLights_Clear@command,f
 10076  0275  3002               	movlw	2
 10077  0276  3198  20B6  3180   	fcall	_setDimmerLights_Clear
 10078                           
 10079                           ;OverLoad_B1.c: 138: if(Load->StatusOn)
 10080  0279  0020               	movlb	0	; select bank0
 10081  027A  086E               	movf	_Load,w
 10082  027B  3E46               	addlw	70
 10083  027C  0086               	movwf	6
 10084  027D  3002               	movlw	2	; select bank4/5
 10085  027E  0087               	movwf	7
 10086  027F  1C01               	btfss	1,0
 10087  0280  2A95               	goto	l9195
 10088                           
 10089                           ;OverLoad_B1.c: 139: {
 10090                           ;OverLoad_B1.c: 140: Load->StatusOn=0;
 10091  0281  086E               	movf	_Load,w
 10092  0282  3E46               	addlw	70
 10093  0283  0086               	movwf	6
 10094  0284  3002               	movlw	2	; select bank4/5
 10095  0285  0087               	movwf	7
 10096  0286  1001               	bcf	1,0
 10097                           
 10098                           ;OverLoad_B1.c: 141: Load->TotalLoad=Load->AD;
 10099  0287  086E               	movf	_Load,w
 10100  0288  3E2C               	addlw	44
 10101  0289  0086               	movwf	6
 10102  028A  3002               	movlw	2	; select bank4/5
 10103  028B  0087               	movwf	7
 10104  028C  086E               	movf	_Load,w
 10105  028D  3E06               	addlw	6
 10106  028E  0084               	movwf	4
 10107  028F  3002               	movlw	2	; select bank4/5
 10108  0290  0085               	movwf	5
 10109  0291  3F40               	moviw [0]fsr1
 10110  0292  3F80               	movwi [0]fsr0
 10111  0293  3F41               	moviw [1]fsr1
 10112  0294  3F81               	movwi [1]fsr0
 10113  0295                     l9195:	
 10114                           
 10115                           ;OverLoad_B1.c: 143: }
 10116                           ;OverLoad_B1.c: 145: if(Load->StatusOff)
 10117  0295  086E               	movf	_Load,w
 10118  0296  3E46               	addlw	70
 10119  0297  0086               	movwf	6
 10120  0298  3002               	movlw	2	; select bank4/5
 10121  0299  0087               	movwf	7
 10122  029A  1C81               	btfss	1,1
 10123  029B  2ACD               	goto	l9203
 10124                           
 10125                           ;OverLoad_B1.c: 146: {
 10126                           ;OverLoad_B1.c: 147: Load->StatusOff=0;
 10127  029C  086E               	movf	_Load,w
 10128  029D  3E46               	addlw	70
 10129  029E  0086               	movwf	6
 10130  029F  3002               	movlw	2	; select bank4/5
 10131  02A0  0087               	movwf	7
 10132  02A1  1081               	bcf	1,1
 10133                           
 10134                           ;OverLoad_B1.c: 148: Load->TotalLoad=Load->AD;
 10135  02A2  086E               	movf	_Load,w
 10136  02A3  3E2C               	addlw	44
 10137  02A4  0086               	movwf	6
 10138  02A5  3002               	movlw	2	; select bank4/5
 10139  02A6  0087               	movwf	7
 10140  02A7  086E               	movf	_Load,w
 10141  02A8  3E06               	addlw	6
 10142  02A9  0084               	movwf	4
 10143  02AA  3002               	movlw	2	; select bank4/5
 10144  02AB  0085               	movwf	5
 10145  02AC  3F40               	moviw [0]fsr1
 10146  02AD  3F80               	movwi [0]fsr0
 10147  02AE  3F41               	moviw [1]fsr1
 10148  02AF  3F81               	movwi [1]fsr0
 10149                           
 10150                           ;OverLoad_B1.c: 149: Load->JudgeValue=0x32*Load->LightsCount;
 10151  02B0  086E               	movf	_Load,w
 10152  02B1  3E3E               	addlw	62
 10153  02B2  0086               	movwf	6
 10154  02B3  3002               	movlw	2	; select bank4/5
 10155  02B4  0087               	movwf	7
 10156  02B5  0801               	movf	1,w
 10157  02B6  00AD               	movwf	??_Load_Main
 10158  02B7  01AE               	clrf	??_Load_Main+1
 10159  02B8  082D               	movf	??_Load_Main,w
 10160  02B9  00A0               	movwf	___wmul@multiplier
 10161  02BA  082E               	movf	??_Load_Main+1,w
 10162  02BB  00A1               	movwf	___wmul@multiplier+1
 10163  02BC  3032               	movlw	50
 10164  02BD  00A2               	movwf	___wmul@multiplicand
 10165  02BE  3000               	movlw	0
 10166  02BF  00A3               	movwf	___wmul@multiplicand+1
 10167  02C0  319A  22AB  3180   	fcall	___wmul
 10168  02C3  0020               	movlb	0	; select bank0
 10169  02C4  086E               	movf	_Load,w
 10170  02C5  3E36               	addlw	54
 10171  02C6  0086               	movwf	6
 10172  02C7  3002               	movlw	2	; select bank4/5
 10173  02C8  0087               	movwf	7
 10174  02C9  0820               	movf	?___wmul,w
 10175  02CA  3FC0               	movwi [0]fsr1
 10176  02CB  0821               	movf	?___wmul+1,w
 10177  02CC  3FC1               	movwi [1]fsr1
 10178  02CD                     l9203:	
 10179                           
 10180                           ;OverLoad_B1.c: 150: }
 10181                           ;OverLoad_B1.c: 151: }
 10182                           ;OverLoad_B1.c: 152: }
 10183                           ;OverLoad_B1.c: 153: }
 10184                           ;OverLoad_B1.c: 154: setLoad_AH_AL_Restore();
 10185  02CD  319B  234C  3180   	fcall	_setLoad_AH_AL_Restore
 10186                           
 10187                           ;OverLoad_B1.c: 156: Product->Data[2]=(Load->AD >> 8);
 10188  02D0  0020               	movlb	0	; select bank0
 10189  02D1  086E               	movf	_Load,w
 10190  02D2  3E2C               	addlw	44
 10191  02D3  0086               	movwf	6
 10192  02D4  3002               	movlw	2	; select bank4/5
 10193  02D5  0087               	movwf	7
 10194  02D6  3F40               	moviw [0]fsr1
 10195  02D7  00AD               	movwf	??_Load_Main
 10196  02D8  3F41               	moviw [1]fsr1
 10197  02D9  00AE               	movwf	??_Load_Main+1
 10198  02DA  082E               	movf	??_Load_Main+1,w
 10199  02DB  00AF               	movwf	??_Load_Main+2
 10200  02DC  086F               	movf	_Product,w
 10201  02DD  3E02               	addlw	2
 10202  02DE  0086               	movwf	6
 10203  02DF  3001               	movlw	1	; select bank2/3
 10204  02E0  0087               	movwf	7
 10205  02E1  082F               	movf	??_Load_Main+2,w
 10206  02E2  0081               	movwf	1
 10207                           
 10208                           ;OverLoad_B1.c: 157: Product->Data[3]=Load->AD;
 10209  02E3  086E               	movf	_Load,w
 10210  02E4  3E2C               	addlw	44
 10211  02E5  0086               	movwf	6
 10212  02E6  3002               	movlw	2	; select bank4/5
 10213  02E7  0087               	movwf	7
 10214  02E8  0801               	movf	1,w
 10215  02E9  00AD               	movwf	??_Load_Main
 10216  02EA  086F               	movf	_Product,w
 10217  02EB  3E03               	addlw	3
 10218  02EC  0086               	movwf	6
 10219  02ED  3001               	movlw	1	; select bank2/3
 10220  02EE  0087               	movwf	7
 10221  02EF  082D               	movf	??_Load_Main,w
 10222  02F0  0081               	movwf	1
 10223                           
 10224                           ;OverLoad_B1.c: 158: Product->Data[8]=Load->LightsCount;
 10225  02F1  086E               	movf	_Load,w
 10226  02F2  3E3E               	addlw	62
 10227  02F3  0086               	movwf	6
 10228  02F4  3002               	movlw	2	; select bank4/5
 10229  02F5  0087               	movwf	7
 10230  02F6  0801               	movf	1,w
 10231  02F7  00AD               	movwf	??_Load_Main
 10232  02F8  086F               	movf	_Product,w
 10233  02F9  3E08               	addlw	8
 10234  02FA  0086               	movwf	6
 10235  02FB  3001               	movlw	1	; select bank2/3
 10236  02FC  0087               	movwf	7
 10237  02FD  082D               	movf	??_Load_Main,w
 10238  02FE  0081               	movwf	1
 10239                           
 10240                           ;OverLoad_B1.c: 159: Product->Data[10]=Load->TotalLoad;
 10241  02FF  086E               	movf	_Load,w
 10242  0300  3E06               	addlw	6
 10243  0301  0086               	movwf	6
 10244  0302  3002               	movlw	2	; select bank4/5
 10245  0303  0087               	movwf	7
 10246  0304  0801               	movf	1,w
 10247  0305  00AD               	movwf	??_Load_Main
 10248  0306  086F               	movf	_Product,w
 10249  0307  3E0A               	addlw	10
 10250  0308  0086               	movwf	6
 10251  0309  3001               	movlw	1	; select bank2/3
 10252  030A  0087               	movwf	7
 10253  030B  082D               	movf	??_Load_Main,w
 10254  030C  0081               	movwf	1
 10255                           
 10256                           ;OverLoad_B1.c: 160: Product->Data[16]=(Load->JudgeValue >> 8);
 10257  030D  086E               	movf	_Load,w
 10258  030E  3E36               	addlw	54
 10259  030F  0086               	movwf	6
 10260  0310  3002               	movlw	2	; select bank4/5
 10261  0311  0087               	movwf	7
 10262  0312  3F40               	moviw [0]fsr1
 10263  0313  00AD               	movwf	??_Load_Main
 10264  0314  3F41               	moviw [1]fsr1
 10265  0315  00AE               	movwf	??_Load_Main+1
 10266  0316  082E               	movf	??_Load_Main+1,w
 10267  0317  00AF               	movwf	??_Load_Main+2
 10268  0318  086F               	movf	_Product,w
 10269  0319  3E10               	addlw	16
 10270  031A  0086               	movwf	6
 10271  031B  3001               	movlw	1	; select bank2/3
 10272  031C  0087               	movwf	7
 10273  031D  082F               	movf	??_Load_Main+2,w
 10274  031E  0081               	movwf	1
 10275                           
 10276                           ;OverLoad_B1.c: 161: Product->Data[17]=Load->JudgeValue;
 10277  031F  086E               	movf	_Load,w
 10278  0320  3E36               	addlw	54
 10279  0321  0086               	movwf	6
 10280  0322  3002               	movlw	2	; select bank4/5
 10281  0323  0087               	movwf	7
 10282  0324  0801               	movf	1,w
 10283  0325  00AD               	movwf	??_Load_Main
 10284  0326  086F               	movf	_Product,w
 10285  0327  3E11               	addlw	17
 10286  0328  0086               	movwf	6
 10287  0329  3001               	movlw	1	; select bank2/3
 10288  032A  0087               	movwf	7
 10289  032B  082D               	movf	??_Load_Main,w
 10290  032C  0081               	movwf	1
 10291                           
 10292                           ;OverLoad_B1.c: 162: Product->Data[18]=Load->ErrorStatus;
 10293  032D  086E               	movf	_Load,w
 10294  032E  3E05               	addlw	5
 10295  032F  0086               	movwf	6
 10296  0330  3002               	movlw	2	; select bank4/5
 10297  0331  0087               	movwf	7
 10298  0332  0801               	movf	1,w
 10299  0333  00AD               	movwf	??_Load_Main
 10300  0334  086F               	movf	_Product,w
 10301  0335  3E12               	addlw	18
 10302  0336  0086               	movwf	6
 10303  0337  3001               	movlw	1	; select bank2/3
 10304  0338  0087               	movwf	7
 10305  0339  082D               	movf	??_Load_Main,w
 10306  033A  0081               	movwf	1
 10307                           
 10308                           ;OverLoad_B1.c: 163: Product->Data[19]=Load->Count;
 10309  033B  086E               	movf	_Load,w
 10310  033C  3E3A               	addlw	58
 10311  033D  0086               	movwf	6
 10312  033E  3002               	movlw	2	; select bank4/5
 10313  033F  0087               	movwf	7
 10314  0340  0801               	movf	1,w
 10315  0341  00AD               	movwf	??_Load_Main
 10316  0342  086F               	movf	_Product,w
 10317  0343  3E13               	addlw	19
 10318  0344  0086               	movwf	6
 10319  0345  3001               	movlw	1	; select bank2/3
 10320  0346  0087               	movwf	7
 10321  0347  082D               	movf	??_Load_Main,w
 10322  0348  0081               	movwf	1
 10323                           
 10324                           ;OverLoad_B1.c: 166: }
 10325                           ;OverLoad_B1.c: 167: }
 10326  0349  0008               	return
 10327  034A                     l9221:	
 10328                           
 10329                           ;OverLoad_B1.c: 168: else
 10330                           ;OverLoad_B1.c: 169: {
 10331                           ;OverLoad_B1.c: 170: if(Load->GO)
 10332  034A  086E               	movf	_Load,w
 10333  034B  0086               	movwf	6
 10334  034C  3002               	movlw	2	; select bank4/5
 10335  034D  0087               	movwf	7
 10336  034E  1C81               	btfss	1,1
 10337  034F  2B66               	goto	l9227
 10338                           
 10339                           ;OverLoad_B1.c: 171: {
 10340                           ;OverLoad_B1.c: 172: if(!Load->LightsON)
 10341  0350  086E               	movf	_Load,w
 10342  0351  0086               	movwf	6
 10343  0352  3002               	movlw	2	; select bank4/5
 10344  0353  0087               	movwf	7
 10345  0354  1901               	btfsc	1,2
 10346  0355  2B60               	goto	l1834
 10347                           
 10348                           ;OverLoad_B1.c: 173: {
 10349                           ;OverLoad_B1.c: 174: Load->LightsON=1;
 10350  0356  086E               	movf	_Load,w
 10351  0357  0086               	movwf	6
 10352  0358  3002               	movlw	2	; select bank4/5
 10353  0359  0087               	movwf	7
 10354  035A  1501               	bsf	1,2
 10355                           
 10356                           ;OverLoad_B1.c: 175: Load->Safe=0;
 10357  035B  086E               	movf	_Load,w
 10358  035C  0086               	movwf	6
 10359  035D  3002               	movlw	2	; select bank4/5
 10360  035E  0087               	movwf	7
 10361  035F  1181               	bcf	1,3
 10362  0360                     l1834:	
 10363                           ;OverLoad_B1.c: 176: }
 10364                           ;OverLoad_B1.c: 177: if(1 && 1)
 10365                           
 10366                           
 10367                           ;OverLoad_B1.c: 178: {
 10368                           ;OverLoad_B1.c: 179: Load->ADtoGO=1;
 10369  0360  086E               	movf	_Load,w
 10370  0361  0086               	movwf	6
 10371  0362  3002               	movlw	2	; select bank4/5
 10372  0363  0087               	movwf	7
 10373  0364  1601               	bsf	1,4
 10374                           
 10375                           ;OverLoad_B1.c: 180: }
 10376                           ;OverLoad_B1.c: 181: }
 10377  0365  0008               	return
 10378  0366                     l9227:	
 10379                           
 10380                           ;OverLoad_B1.c: 182: else
 10381                           ;OverLoad_B1.c: 183: {
 10382                           ;OverLoad_B1.c: 184: if(Load->LightsON)
 10383  0366  086E               	movf	_Load,w
 10384  0367  0086               	movwf	6
 10385  0368  3002               	movlw	2	; select bank4/5
 10386  0369  0087               	movwf	7
 10387  036A  1D01               	btfss	1,2
 10388  036B  0008               	return
 10389                           
 10390                           ;OverLoad_B1.c: 185: {
 10391                           ;OverLoad_B1.c: 186: Load->LightsON=0;
 10392  036C  086E               	movf	_Load,w
 10393  036D  0086               	movwf	6
 10394  036E  3002               	movlw	2	; select bank4/5
 10395  036F  0087               	movwf	7
 10396  0370  1101               	bcf	1,2
 10397                           
 10398                           ;OverLoad_B1.c: 187: Load->Safe=1;
 10399  0371  086E               	movf	_Load,w
 10400  0372  0086               	movwf	6
 10401  0373  3002               	movlw	2	; select bank4/5
 10402  0374  0087               	movwf	7
 10403  0375  1581               	bsf	1,3
 10404                           
 10405                           ;OverLoad_B1.c: 188: Load->ErrorCount=0;
 10406  0376  086E               	movf	_Load,w
 10407  0377  3E3C               	addlw	60
 10408  0378  0086               	movwf	6
 10409  0379  3002               	movlw	2	; select bank4/5
 10410  037A  0087               	movwf	7
 10411  037B  0181               	clrf	1
 10412                           
 10413                           ;OverLoad_B1.c: 189: Load->Count=0;
 10414  037C  086E               	movf	_Load,w
 10415  037D  3E3A               	addlw	58
 10416  037E  0086               	movwf	6
 10417  037F  3002               	movlw	2	; select bank4/5
 10418  0380  0087               	movwf	7
 10419  0381  0181               	clrf	1
 10420                           
 10421                           ;OverLoad_B1.c: 190: Load->TotalLoad=0;
 10422  0382  086E               	movf	_Load,w
 10423  0383  3E06               	addlw	6
 10424  0384  0086               	movwf	6
 10425  0385  3002               	movlw	2	; select bank4/5
 10426  0386  0087               	movwf	7
 10427  0387  3000               	movlw	0
 10428  0388  3FC0               	movwi [0]fsr1
 10429  0389  3FC1               	movwi [1]fsr1
 10430                           
 10431                           ;OverLoad_B1.c: 191: Load->NumberCount=0;
 10432  038A  086E               	movf	_Load,w
 10433  038B  3E3F               	addlw	63
 10434  038C  0086               	movwf	6
 10435  038D  3002               	movlw	2	; select bank4/5
 10436  038E  0087               	movwf	7
 10437  038F  0181               	clrf	1
 10438                           
 10439                           ;OverLoad_B1.c: 192: Load->StatusOn=0;
 10440  0390  086E               	movf	_Load,w
 10441  0391  3E46               	addlw	70
 10442  0392  0086               	movwf	6
 10443  0393  3002               	movlw	2	; select bank4/5
 10444  0394  0087               	movwf	7
 10445  0395  1001               	bcf	1,0
 10446                           
 10447                           ;OverLoad_B1.c: 193: Load->StatusOff=0;
 10448  0396  086E               	movf	_Load,w
 10449  0397  3E46               	addlw	70
 10450  0398  0086               	movwf	6
 10451  0399  3002               	movlw	2	; select bank4/5
 10452  039A  0087               	movwf	7
 10453  039B  1081               	bcf	1,1
 10454                           
 10455                           ;OverLoad_B1.c: 194: Load->AD=0;
 10456  039C  086E               	movf	_Load,w
 10457  039D  3E2C               	addlw	44
 10458  039E  0086               	movwf	6
 10459  039F  3002               	movlw	2	; select bank4/5
 10460  03A0  0087               	movwf	7
 10461  03A1  3000               	movlw	0
 10462  03A2  3FC0               	movwi [0]fsr1
 10463  03A3  3FC1               	movwi [1]fsr1
 10464                           
 10465                           ;OverLoad_B1.c: 195: setLoad_AH_AL_Restore();
 10466  03A4  319B  234C  3180   	fcall	_setLoad_AH_AL_Restore
 10467                           
 10468                           ;OverLoad_B1.c: 198: setDimmerLights_Clear(1,1);
 10469  03A7  0020               	movlb	0	; select bank0
 10470  03A8  01A2               	clrf	setDimmerLights_Clear@command
 10471  03A9  0AA2               	incf	setDimmerLights_Clear@command,f
 10472  03AA  3001               	movlw	1
 10473  03AB  3198  20B6  3180   	fcall	_setDimmerLights_Clear
 10474                           
 10475                           ;OverLoad_B1.c: 202: setDimmerLights_Clear(2,1);
 10476  03AE  0020               	movlb	0	; select bank0
 10477  03AF  01A2               	clrf	setDimmerLights_Clear@command
 10478  03B0  0AA2               	incf	setDimmerLights_Clear@command,f
 10479  03B1  3002               	movlw	2
 10480  03B2  3198  20B6  3180   	fcall	_setDimmerLights_Clear
 10481                           
 10482                           ;OverLoad_B1.c: 209: Product->Data[2]=(Load->AD >> 8);
 10483  03B5  0020               	movlb	0	; select bank0
 10484  03B6  086E               	movf	_Load,w
 10485  03B7  3E2C               	addlw	44
 10486  03B8  0086               	movwf	6
 10487  03B9  3002               	movlw	2	; select bank4/5
 10488  03BA  0087               	movwf	7
 10489  03BB  3F40               	moviw [0]fsr1
 10490  03BC  00AD               	movwf	??_Load_Main
 10491  03BD  3F41               	moviw [1]fsr1
 10492  03BE  00AE               	movwf	??_Load_Main+1
 10493  03BF  082E               	movf	??_Load_Main+1,w
 10494  03C0  00AF               	movwf	??_Load_Main+2
 10495  03C1  086F               	movf	_Product,w
 10496  03C2  3E02               	addlw	2
 10497  03C3  0086               	movwf	6
 10498  03C4  3001               	movlw	1	; select bank2/3
 10499  03C5  0087               	movwf	7
 10500  03C6  082F               	movf	??_Load_Main+2,w
 10501  03C7  0081               	movwf	1
 10502                           
 10503                           ;OverLoad_B1.c: 210: Product->Data[3]=Load->AD;
 10504  03C8  086E               	movf	_Load,w
 10505  03C9  3E2C               	addlw	44
 10506  03CA  0086               	movwf	6
 10507  03CB  3002               	movlw	2	; select bank4/5
 10508  03CC  0087               	movwf	7
 10509  03CD  0801               	movf	1,w
 10510  03CE  00AD               	movwf	??_Load_Main
 10511  03CF  086F               	movf	_Product,w
 10512  03D0  3E03               	addlw	3
 10513  03D1  0086               	movwf	6
 10514  03D2  3001               	movlw	1	; select bank2/3
 10515  03D3  0087               	movwf	7
 10516  03D4  082D               	movf	??_Load_Main,w
 10517  03D5  0081               	movwf	1
 10518                           
 10519                           ;OverLoad_B1.c: 215: Product->Data[8]=Load->NumberCount;
 10520  03D6  086E               	movf	_Load,w
 10521  03D7  3E3F               	addlw	63
 10522  03D8  0086               	movwf	6
 10523  03D9  3002               	movlw	2	; select bank4/5
 10524  03DA  0087               	movwf	7
 10525  03DB  0801               	movf	1,w
 10526  03DC  00AD               	movwf	??_Load_Main
 10527  03DD  086F               	movf	_Product,w
 10528  03DE  3E08               	addlw	8
 10529  03DF  0086               	movwf	6
 10530  03E0  3001               	movlw	1	; select bank2/3
 10531  03E1  0087               	movwf	7
 10532  03E2  082D               	movf	??_Load_Main,w
 10533  03E3  0081               	movwf	1
 10534                           
 10535                           ;OverLoad_B1.c: 216: Product->Data[10]=Load->TotalLoad;
 10536  03E4  086E               	movf	_Load,w
 10537  03E5  3E06               	addlw	6
 10538  03E6  0086               	movwf	6
 10539  03E7  3002               	movlw	2	; select bank4/5
 10540  03E8  0087               	movwf	7
 10541  03E9  0801               	movf	1,w
 10542  03EA  00AD               	movwf	??_Load_Main
 10543  03EB  086F               	movf	_Product,w
 10544  03EC  3E0A               	addlw	10
 10545  03ED  0086               	movwf	6
 10546  03EE  3001               	movlw	1	; select bank2/3
 10547  03EF  0087               	movwf	7
 10548  03F0  082D               	movf	??_Load_Main,w
 10549  03F1  0081               	movwf	1
 10550                           
 10551                           ;OverLoad_B1.c: 217: Product->Data[16]=(Load->JudgeValue >> 8);
 10552  03F2  086E               	movf	_Load,w
 10553  03F3  3E36               	addlw	54
 10554  03F4  0086               	movwf	6
 10555  03F5  3002               	movlw	2	; select bank4/5
 10556  03F6  0087               	movwf	7
 10557  03F7  3F40               	moviw [0]fsr1
 10558  03F8  00AD               	movwf	??_Load_Main
 10559  03F9  3F41               	moviw [1]fsr1
 10560  03FA  00AE               	movwf	??_Load_Main+1
 10561  03FB  082E               	movf	??_Load_Main+1,w
 10562  03FC  00AF               	movwf	??_Load_Main+2
 10563  03FD  086F               	movf	_Product,w
 10564  03FE  3E10               	addlw	16
 10565  03FF  0086               	movwf	6
 10566  0400  3001               	movlw	1	; select bank2/3
 10567  0401  0087               	movwf	7
 10568  0402  082F               	movf	??_Load_Main+2,w
 10569  0403  0081               	movwf	1
 10570                           
 10571                           ;OverLoad_B1.c: 218: Product->Data[17]=Load->JudgeValue;
 10572  0404  086E               	movf	_Load,w
 10573  0405  3E36               	addlw	54
 10574  0406  0086               	movwf	6
 10575  0407  3002               	movlw	2	; select bank4/5
 10576  0408  0087               	movwf	7
 10577  0409  0801               	movf	1,w
 10578  040A  00AD               	movwf	??_Load_Main
 10579  040B  086F               	movf	_Product,w
 10580  040C  3E11               	addlw	17
 10581  040D  0086               	movwf	6
 10582  040E  3001               	movlw	1	; select bank2/3
 10583  040F  0087               	movwf	7
 10584  0410  082D               	movf	??_Load_Main,w
 10585  0411  0081               	movwf	1
 10586                           
 10587                           ;OverLoad_B1.c: 219: Product->Data[18]=Load->ErrorStatus;
 10588  0412  086E               	movf	_Load,w
 10589  0413  3E05               	addlw	5
 10590  0414  0086               	movwf	6
 10591  0415  3002               	movlw	2	; select bank4/5
 10592  0416  0087               	movwf	7
 10593  0417  0801               	movf	1,w
 10594  0418  00AD               	movwf	??_Load_Main
 10595  0419  086F               	movf	_Product,w
 10596  041A  3E12               	addlw	18
 10597  041B  0086               	movwf	6
 10598  041C  3001               	movlw	1	; select bank2/3
 10599  041D  0087               	movwf	7
 10600  041E  082D               	movf	??_Load_Main,w
 10601  041F  0081               	movwf	1
 10602                           
 10603                           ;OverLoad_B1.c: 220: Product->Data[19]=Load->Count;
 10604  0420  086E               	movf	_Load,w
 10605  0421  3E3A               	addlw	58
 10606  0422  0086               	movwf	6
 10607  0423  3002               	movlw	2	; select bank4/5
 10608  0424  0087               	movwf	7
 10609  0425  0801               	movf	1,w
 10610  0426  00AD               	movwf	??_Load_Main
 10611  0427  086F               	movf	_Product,w
 10612  0428  3E13               	addlw	19
 10613  0429  0086               	movwf	6
 10614  042A  3001               	movlw	1	; select bank2/3
 10615  042B  0087               	movwf	7
 10616  042C  082D               	movf	??_Load_Main,w
 10617  042D  0081               	movwf	1
 10618  042E  0008               	return
 10619  042F                     __end_of_Load_Main:	
 10620                           
 10621                           	psect	text46
 10622  1F35                     __ptext46:	
 10623 ;; *************** function _setLoad_Exceptions *****************
 10624 ;; Defined at:
 10625 ;;		line 228 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;  command         1    wreg     unsigned char 
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;  command         1   12[BANK0 ] unsigned char 
 10630 ;; Return value:  Size  Location     Type
 10631 ;;		None               void
 10632 ;; Registers used:
 10633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;Total ram usage:        2 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; Hardware stack levels required when called:    8
 10646 ;; This function calls:
 10647 ;;		_DimmerLights_Exceptions
 10648 ;;		_setLED
 10649 ;;		_setRF_Enable
 10650 ;;		_setSw_Enable
 10651 ;; This function is called by:
 10652 ;;		_Load_Main
 10653 ;; This function uses a non-reentrant model
 10654 ;;
 10655                           
 10656                           
 10657                           ;psect for function _setLoad_Exceptions
 10658  1F35                     _setLoad_Exceptions:	
 10659                           
 10660                           ;incstack = 0
 10661                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10662                           ;setLoad_Exceptions@command stored from wreg
 10663  1F35  0020               	movlb	0	; select bank0
 10664  1F36  00AC               	movwf	setLoad_Exceptions@command
 10665                           
 10666                           ;OverLoad_B1.c: 230: Load->ERROR=command;
 10667  1F37  086E               	movf	_Load,w
 10668  1F38  0086               	movwf	6
 10669  1F39  3002               	movlw	2	; select bank4/5
 10670  1F3A  0087               	movwf	7
 10671  1F3B  082C               	movf	setLoad_Exceptions@command,w
 10672  1F3C  1281               	bcf	1,5
 10673  1F3D  1D03               	skipz
 10674  1F3E  1681               	bsf	1,5
 10675                           
 10676                           ;OverLoad_B1.c: 231: Load->Safe=(~command) & 0x01;
 10677  1F3F  092C               	comf	setLoad_Exceptions@command,w
 10678  1F40  3901               	andlw	1
 10679  1F41  00AB               	movwf	??_setLoad_Exceptions
 10680  1F42  086E               	movf	_Load,w
 10681  1F43  0086               	movwf	6
 10682  1F44  3002               	movlw	2	; select bank4/5
 10683  1F45  0087               	movwf	7
 10684  1F46  0DAB               	rlf	??_setLoad_Exceptions,f
 10685  1F47  0DAB               	rlf	??_setLoad_Exceptions,f
 10686  1F48  0DAB               	rlf	??_setLoad_Exceptions,f
 10687  1F49  0801               	movf	1,w
 10688  1F4A  062B               	xorwf	??_setLoad_Exceptions,w
 10689  1F4B  39F7               	andlw	-9
 10690  1F4C  062B               	xorwf	??_setLoad_Exceptions,w
 10691  1F4D  0081               	movwf	1
 10692                           
 10693                           ;OverLoad_B1.c: 232: Load->ErrorStatus=command;
 10694  1F4E  082C               	movf	setLoad_Exceptions@command,w
 10695  1F4F  00AB               	movwf	??_setLoad_Exceptions
 10696  1F50  086E               	movf	_Load,w
 10697  1F51  3E05               	addlw	5
 10698  1F52  0086               	movwf	6
 10699  1F53  3002               	movlw	2	; select bank4/5
 10700  1F54  0087               	movwf	7
 10701  1F55  082B               	movf	??_setLoad_Exceptions,w
 10702  1F56  0081               	movwf	1
 10703                           
 10704                           ;OverLoad_B1.c: 234: if(command)
 10705  1F57  082C               	movf	setLoad_Exceptions@command,w
 10706  1F58  1903               	btfsc	3,2
 10707  1F59  2F5E               	goto	l1841
 10708                           
 10709                           ;OverLoad_B1.c: 235: {
 10710                           ;OverLoad_B1.c: 236: DimmerLights_Exceptions(2);
 10711  1F5A  3002               	movlw	2
 10712  1F5B  3193  231C  319F   	fcall	_DimmerLights_Exceptions
 10713  1F5E                     l1841:	
 10714                           
 10715                           ;OverLoad_B1.c: 240: }
 10716                           ;OverLoad_B1.c: 241: setLED(99,command+10);
 10717  1F5E  0020               	movlb	0	; select bank0
 10718  1F5F  082C               	movf	setLoad_Exceptions@command,w
 10719  1F60  3E0A               	addlw	10
 10720  1F61  00AB               	movwf	??_setLoad_Exceptions
 10721  1F62  082B               	movf	??_setLoad_Exceptions,w
 10722  1F63  00A2               	movwf	setLED@command
 10723  1F64  3063               	movlw	99
 10724  1F65  3192  225D  319F   	fcall	_setLED
 10725                           
 10726                           ;OverLoad_B1.c: 243: setSw_Enable((~command) & 0x01);
 10727  1F68  0020               	movlb	0	; select bank0
 10728  1F69  092C               	comf	setLoad_Exceptions@command,w
 10729  1F6A  3901               	andlw	1
 10730  1F6B  319A  2272  319F   	fcall	_setSw_Enable
 10731                           
 10732                           ;OverLoad_B1.c: 245: setRF_Enable(1,(~command) & 0x01);
 10733  1F6E  0020               	movlb	0	; select bank0
 10734  1F6F  092C               	comf	setLoad_Exceptions@command,w
 10735  1F70  3901               	andlw	1
 10736  1F71  00AB               	movwf	??_setLoad_Exceptions
 10737  1F72  082B               	movf	??_setLoad_Exceptions,w
 10738  1F73  00A2               	movwf	setRF_Enable@command
 10739  1F74  3001               	movlw	1
 10740  1F75  319C  242E         	fcall	_setRF_Enable
 10741  1F77  0008               	return
 10742  1F78                     __end_of_setLoad_Exceptions:	
 10743                           
 10744                           	psect	text47
 10745  1A72                     __ptext47:	
 10746 ;; *************** function _setSw_Enable *****************
 10747 ;; Defined at:
 10748 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;  command         1    wreg     unsigned char 
 10751 ;; Auto vars:     Size  Location     Type
 10752 ;;  command         1    2[BANK0 ] unsigned char 
 10753 ;; Return value:  Size  Location     Type
 10754 ;;		None               void
 10755 ;; Registers used:
 10756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10757 ;; Tracked objects:
 10758 ;;		On entry : 0/0
 10759 ;;		On exit  : 0/0
 10760 ;;		Unchanged: 0/0
 10761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;Total ram usage:        1 bytes
 10767 ;; Hardware stack levels used:    1
 10768 ;; Hardware stack levels required when called:    5
 10769 ;; This function calls:
 10770 ;;		_SwPointSelect
 10771 ;; This function is called by:
 10772 ;;		_MainT
 10773 ;;		_setLoad_Exceptions
 10774 ;; This function uses a non-reentrant model
 10775 ;;
 10776                           
 10777                           
 10778                           ;psect for function _setSw_Enable
 10779  1A72                     _setSw_Enable:	
 10780                           
 10781                           ;incstack = 0
 10782                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10783                           ;setSw_Enable@command stored from wreg
 10784  1A72  0020               	movlb	0	; select bank0
 10785  1A73  00A2               	movwf	setSw_Enable@command
 10786                           
 10787                           ;Switch_B1.c: 90: SwPointSelect(1);
 10788  1A74  3001               	movlw	1
 10789  1A75  3199  212D  319A   	fcall	_SwPointSelect
 10790                           
 10791                           ;Switch_B1.c: 91: Sw->Enable=command;
 10792  1A78  0020               	movlb	0	; select bank0
 10793  1A79  086D               	movf	_Sw,w
 10794  1A7A  0086               	movwf	6
 10795  1A7B  3001               	movlw	1	; select bank2/3
 10796  1A7C  0087               	movwf	7
 10797  1A7D  0822               	movf	setSw_Enable@command,w
 10798  1A7E  1001               	bcf	1,0
 10799  1A7F  1D03               	skipz
 10800  1A80  1401               	bsf	1,0
 10801                           
 10802                           ;Switch_B1.c: 95: SwPointSelect(2);
 10803  1A81  3002               	movlw	2
 10804  1A82  3199  212D         	fcall	_SwPointSelect
 10805                           
 10806                           ;Switch_B1.c: 96: Sw->Enable=command;
 10807  1A84  0020               	movlb	0	; select bank0
 10808  1A85  086D               	movf	_Sw,w
 10809  1A86  0086               	movwf	6
 10810  1A87  3001               	movlw	1	; select bank2/3
 10811  1A88  0087               	movwf	7
 10812  1A89  0822               	movf	setSw_Enable@command,w
 10813  1A8A  1001               	bcf	1,0
 10814  1A8B  1D03               	skipz
 10815  1A8C  1401               	bsf	1,0
 10816  1A8D  0008               	return
 10817  1A8E                     __end_of_setSw_Enable:	
 10818                           
 10819                           	psect	text48
 10820  1C2E                     __ptext48:	
 10821 ;; *************** function _setRF_Enable *****************
 10822 ;; Defined at:
 10823 ;;		line 185 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;  rf              1    wreg     unsigned char 
 10826 ;;  command         1    2[BANK0 ] unsigned char 
 10827 ;; Auto vars:     Size  Location     Type
 10828 ;;  rf              1    3[BANK0 ] unsigned char 
 10829 ;; Return value:  Size  Location     Type
 10830 ;;		None               void
 10831 ;; Registers used:
 10832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10833 ;; Tracked objects:
 10834 ;;		On entry : 0/0
 10835 ;;		On exit  : 0/0
 10836 ;;		Unchanged: 0/0
 10837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10838 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;Total ram usage:        2 bytes
 10843 ;; Hardware stack levels used:    1
 10844 ;; Hardware stack levels required when called:    5
 10845 ;; This function calls:
 10846 ;;		_RfPointSelect
 10847 ;;		_setINT_GO
 10848 ;; This function is called by:
 10849 ;;		_MainT
 10850 ;;		_setLoad_Exceptions
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _setRF_Enable
 10856  1C2E                     _setRF_Enable:	
 10857                           
 10858                           ;incstack = 0
 10859                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10860                           ;setRF_Enable@rf stored from wreg
 10861  1C2E  0020               	movlb	0	; select bank0
 10862  1C2F  00A3               	movwf	setRF_Enable@rf
 10863                           
 10864                           ;RF_Control_B1.c: 187: RfPointSelect(rf);
 10865  1C30  0823               	movf	setRF_Enable@rf,w
 10866  1C31  31A7  2747  319C   	fcall	_RfPointSelect
 10867                           
 10868                           ;RF_Control_B1.c: 188: RF->Enable=command;
 10869  1C34  087B               	movf	_RF,w
 10870  1C35  0086               	movwf	6
 10871  1C36  0187               	clrf	7
 10872  1C37  0020               	movlb	0	; select bank0
 10873  1C38  0822               	movf	setRF_Enable@command,w
 10874  1C39  1001               	bcf	1,0
 10875  1C3A  1D03               	skipz
 10876  1C3B  1401               	bsf	1,0
 10877                           
 10878                           ;RF_Control_B1.c: 189: RF->Learn=0;
 10879  1C3C  087B               	movf	_RF,w
 10880  1C3D  0086               	movwf	6
 10881  1C3E  0187               	clrf	7
 10882  1C3F  1301               	bcf	1,6
 10883                           
 10884                           ;RF_Control_B1.c: 190: RF->TransceiveGO=0;
 10885  1C40  087B               	movf	_RF,w
 10886  1C41  0086               	movwf	6
 10887  1C42  0187               	clrf	7
 10888  1C43  1101               	bcf	1,2
 10889                           
 10890                           ;RF_Control_B1.c: 191: RF->RxStatus=0;
 10891  1C44  087B               	movf	_RF,w
 10892  1C45  0086               	movwf	6
 10893  1C46  0187               	clrf	7
 10894  1C47  1181               	bcf	1,3
 10895                           
 10896                           ;RF_Control_B1.c: 192: RF->ReceiveGO=0;
 10897  1C48  087B               	movf	_RF,w
 10898  1C49  0086               	movwf	6
 10899  1C4A  0187               	clrf	7
 10900  1C4B  1081               	bcf	1,1
 10901                           
 10902                           ;RF_Control_B1.c: 193: RF->DebounceTime=0;
 10903  1C4C  0A7B               	incf	_RF,w
 10904  1C4D  0086               	movwf	6
 10905  1C4E  0187               	clrf	7
 10906  1C4F  0181               	clrf	1
 10907                           
 10908                           ;RF_Control_B1.c: 194: RF->Debounce=0;
 10909  1C50  087B               	movf	_RF,w
 10910  1C51  0086               	movwf	6
 10911  1C52  0187               	clrf	7
 10912  1C53  1281               	bcf	1,5
 10913                           
 10914                           ;RF_Control_B1.c: 195: setINT_GO(0);
 10915  1C54  3000               	movlw	0
 10916  1C55  31A7  2728         	fcall	_setINT_GO
 10917  1C57  0008               	return
 10918  1C58                     __end_of_setRF_Enable:	
 10919                           
 10920                           	psect	text49
 10921  2728                     __ptext49:	
 10922 ;; *************** function _setINT_GO *****************
 10923 ;; Defined at:
 10924 ;;		line 270 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;  command         1    wreg     unsigned char 
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;  command         1    0[BANK0 ] unsigned char 
 10929 ;; Return value:  Size  Location     Type
 10930 ;;		None               void
 10931 ;; Registers used:
 10932 ;;		wreg
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;Total ram usage:        1 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    4
 10945 ;; This function calls:
 10946 ;;		Nothing
 10947 ;; This function is called by:
 10948 ;;		_setRF_Main
 10949 ;;		_setRF_Enable
 10950 ;;		_RF_RxDisable
 10951 ;; This function uses a non-reentrant model
 10952 ;;
 10953                           
 10954                           
 10955                           ;psect for function _setINT_GO
 10956  2728                     _setINT_GO:	
 10957                           
 10958                           ;incstack = 0
 10959                           ; Regs used in _setINT_GO: [wreg]
 10960                           ;setINT_GO@command stored from wreg
 10961  2728  0020               	movlb	0	; select bank0
 10962  2729  00A0               	movwf	setINT_GO@command
 10963                           
 10964                           ;MCU_16f1518_B1.c: 272: INTF=0;
 10965  272A  108B               	bcf	11,1	;volatile
 10966                           
 10967                           ;MCU_16f1518_B1.c: 273: INTE=command;
 10968  272B  1C20               	btfss	setINT_GO@command,0
 10969  272C  2F2F               	goto	u7760
 10970  272D  160B               	bsf	11,4	;volatile
 10971  272E  0008               	return
 10972  272F                     u7760:	
 10973  272F  120B               	bcf	11,4	;volatile
 10974  2730  0008               	return
 10975  2731                     __end_of_setINT_GO:	
 10976                           
 10977                           	psect	text50
 10978  131C                     __ptext50:	
 10979 ;; *************** function _DimmerLights_Exceptions *****************
 10980 ;; Defined at:
 10981 ;;		line 237 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;  status          1    wreg     unsigned char 
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;  status          1   10[BANK0 ] unsigned char 
 10986 ;; Return value:  Size  Location     Type
 10987 ;;		None               void
 10988 ;; Registers used:
 10989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;Total ram usage:        1 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    7
 11002 ;; This function calls:
 11003 ;;		_getDimmerLights_StatusFlag
 11004 ;;		_setBuz
 11005 ;;		_setDimmerLights_ERROR
 11006 ;;		_setDimmerLights_TriggerERROR
 11007 ;; This function is called by:
 11008 ;;		_setLoad_Exceptions
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           
 11013                           ;psect for function _DimmerLights_Exceptions
 11014  131C                     _DimmerLights_Exceptions:	
 11015                           
 11016                           ;incstack = 0
 11017                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11018                           ;DimmerLights_Exceptions@status stored from wreg
 11019  131C  0020               	movlb	0	; select bank0
 11020  131D  00AA               	movwf	DimmerLights_Exceptions@status
 11021                           
 11022                           ;Dimmer_B1.c: 239: if(status == 1)
 11023  131E  082A               	movf	DimmerLights_Exceptions@status,w
 11024  131F  3A01               	xorlw	1
 11025  1320  1D03               	skipz
 11026  1321  2B32               	goto	l8367
 11027                           
 11028                           ;Dimmer_B1.c: 240: {
 11029                           ;Dimmer_B1.c: 241: if(getDimmerLights_StatusFlag())
 11030  1322  3199  21AC  3193   	fcall	_getDimmerLights_StatusFlag
 11031  1325  3A00               	xorlw	0
 11032  1326  1903               	skipnz
 11033  1327  2B4A               	goto	l8373
 11034                           
 11035                           ;Dimmer_B1.c: 242: {
 11036                           ;Dimmer_B1.c: 243: setBuz(10,300);
 11037  1328  302C               	movlw	44
 11038  1329  0020               	movlb	0	; select bank0
 11039  132A  00A6               	movwf	setBuz@time
 11040  132B  3001               	movlw	1
 11041  132C  00A7               	movwf	setBuz@time+1
 11042  132D  300A               	movlw	10
 11043  132E  3196  2604  3193   	fcall	_setBuz
 11044  1331  2B4A               	goto	l8373
 11045  1332                     l8367:	
 11046                           ;Dimmer_B1.c: 255: }
 11047                           
 11048                           ;Dimmer_B1.c: 250: setDimmerLights_ERROR(2);
 11049                           
 11050                           ;Dimmer_B1.c: 244: }
 11051                           ;Dimmer_B1.c: 247: setDimmerLights_ERROR(1);
 11052                           
 11053                           
 11054                           ;Dimmer_B1.c: 256: else if(status == 2)
 11055  1332  0020               	movlb	0	; select bank0
 11056  1333  082A               	movf	DimmerLights_Exceptions@status,w
 11057  1334  3A02               	xorlw	2
 11058  1335  1D03               	skipz
 11059  1336  2B45               	goto	l8371
 11060                           
 11061                           ;Dimmer_B1.c: 257: {
 11062                           ;Dimmer_B1.c: 258: setBuz(5,300);
 11063  1337  302C               	movlw	44
 11064  1338  00A6               	movwf	setBuz@time
 11065  1339  3001               	movlw	1
 11066  133A  00A7               	movwf	setBuz@time+1
 11067  133B  3005               	movlw	5
 11068  133C  3196  2604  3193   	fcall	_setBuz
 11069                           
 11070                           ;Dimmer_B1.c: 259: setDimmerLights_ERROR(Dimmer->Load);
 11071  133F  0021               	movlb	1	; select bank1
 11072  1340  0A39               	incf	_Dimmer^(0+128),w
 11073  1341  0086               	movwf	6
 11074  1342  0187               	clrf	7
 11075  1343  0801               	movf	1,w
 11076  1344  2B4F               	goto	L12
 11077  1345                     l8371:	
 11078                           ;Dimmer_B1.c: 260: }
 11079                           
 11080                           
 11081                           ;Dimmer_B1.c: 261: else if(status == 3)
 11082  1345  0020               	movlb	0	; select bank0
 11083  1346  082A               	movf	DimmerLights_Exceptions@status,w
 11084  1347  3A03               	xorlw	3
 11085  1348  1D03               	skipz
 11086  1349  2B52               	goto	l882
 11087  134A                     l8373:	
 11088                           
 11089                           ;Dimmer_B1.c: 262: {
 11090                           ;Dimmer_B1.c: 264: setDimmerLights_ERROR(1);
 11091  134A  3001               	movlw	1
 11092  134B  3190  20F7  3193   	fcall	_setDimmerLights_ERROR
 11093                           
 11094                           ;Dimmer_B1.c: 267: setDimmerLights_ERROR(2);
 11095  134E  3002               	movlw	2
 11096  134F                     L12:	
 11097  134F  3190  20F7  3193   	fcall	_setDimmerLights_ERROR
 11098  1352                     l882:	
 11099                           
 11100                           ;Dimmer_B1.c: 272: }
 11101                           ;Dimmer_B1.c: 275: setDimmerLights_TriggerERROR(1,0);
 11102  1352  0020               	movlb	0	; select bank0
 11103  1353  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11104  1354  3001               	movlw	1
 11105  1355  319C  2458  3193   	fcall	_setDimmerLights_TriggerERROR
 11106                           
 11107                           ;Dimmer_B1.c: 278: setDimmerLights_TriggerERROR(2,0);
 11108  1358  0020               	movlb	0	; select bank0
 11109  1359  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11110  135A  3002               	movlw	2
 11111  135B  319C  2458  3193   	fcall	_setDimmerLights_TriggerERROR
 11112                           
 11113                           ;Dimmer_B1.c: 284: if(TMain->SelfTest == 0)
 11114  135E  087D               	movf	_TMain,w
 11115  135F  3E03               	addlw	3
 11116  1360  0086               	movwf	6
 11117  1361  3001               	movlw	1	; select bank2/3
 11118  1362  0087               	movwf	7
 11119  1363  1801               	btfsc	1,0
 11120  1364  0008               	return
 11121                           
 11122                           ;Dimmer_B1.c: 285: {
 11123                           ;Dimmer_B1.c: 286: TMain->i=0;
 11124  1365  087D               	movf	_TMain,w
 11125  1366  3E0E               	addlw	14
 11126  1367  0086               	movwf	6
 11127  1368  3001               	movlw	1	; select bank2/3
 11128  1369  0087               	movwf	7
 11129  136A  1001               	bcf	1,0
 11130                           
 11131                           ;Dimmer_B1.c: 287: TMain->j=0;
 11132  136B  087D               	movf	_TMain,w
 11133  136C  3E0E               	addlw	14
 11134  136D  0086               	movwf	6
 11135  136E  3001               	movlw	1	; select bank2/3
 11136  136F  0087               	movwf	7
 11137  1370  1081               	bcf	1,1
 11138                           
 11139                           ;Dimmer_B1.c: 288: TMain->k=1;
 11140  1371  087D               	movf	_TMain,w
 11141  1372  3E0E               	addlw	14
 11142  1373  0086               	movwf	6
 11143  1374  3001               	movlw	1	; select bank2/3
 11144  1375  0087               	movwf	7
 11145  1376  1501               	bsf	1,2
 11146                           
 11147                           ;Dimmer_B1.c: 289: TMain->Count2=0;
 11148  1377  087D               	movf	_TMain,w
 11149  1378  3E08               	addlw	8
 11150  1379  0086               	movwf	6
 11151  137A  3001               	movlw	1	; select bank2/3
 11152  137B  0087               	movwf	7
 11153  137C  3000               	movlw	0
 11154  137D  3FC0               	movwi [0]fsr1
 11155  137E  3FC1               	movwi [1]fsr1
 11156  137F  0008               	return
 11157  1380                     __end_of_DimmerLights_Exceptions:	
 11158                           
 11159                           	psect	text51
 11160  1C58                     __ptext51:	
 11161 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11162 ;; Defined at:
 11163 ;;		line 311 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;  lights          1    wreg     unsigned char 
 11166 ;;  command         1    2[BANK0 ] unsigned char 
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;  lights          1    3[BANK0 ] unsigned char 
 11169 ;; Return value:  Size  Location     Type
 11170 ;;		None               void
 11171 ;; Registers used:
 11172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11178 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;Total ram usage:        2 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; Hardware stack levels required when called:    5
 11185 ;; This function calls:
 11186 ;;		_DimmerLightsPointSelect
 11187 ;; This function is called by:
 11188 ;;		_DimmerLights_Exceptions
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           
 11193                           ;psect for function _setDimmerLights_TriggerERROR
 11194  1C58                     _setDimmerLights_TriggerERROR:	
 11195                           
 11196                           ;incstack = 0
 11197                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11198                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11199  1C58  0020               	movlb	0	; select bank0
 11200  1C59  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11201                           
 11202                           ;Dimmer_B1.c: 313: DimmerLightsPointSelect(lights);
 11203  1C5A  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11204  1C5B  3199  2107         	fcall	_DimmerLightsPointSelect
 11205                           
 11206                           ;Dimmer_B1.c: 314: DimmerLights->Trigger=command;
 11207  1C5D  0020               	movlb	0	; select bank0
 11208  1C5E  086C               	movf	_DimmerLights,w
 11209  1C5F  3E09               	addlw	9
 11210  1C60  0086               	movwf	6
 11211  1C61  3001               	movlw	1	; select bank2/3
 11212  1C62  0087               	movwf	7
 11213  1C63  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11214  1C64  1081               	bcf	1,1
 11215  1C65  1D03               	skipz
 11216  1C66  1481               	bsf	1,1
 11217                           
 11218                           ;Dimmer_B1.c: 315: DimmerLights->Switch=command;
 11219  1C67  086C               	movf	_DimmerLights,w
 11220  1C68  3E09               	addlw	9
 11221  1C69  0086               	movwf	6
 11222  1C6A  3001               	movlw	1	; select bank2/3
 11223  1C6B  0087               	movwf	7
 11224  1C6C  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11225  1C6D  1001               	bcf	1,0
 11226  1C6E  1D03               	skipz
 11227  1C6F  1401               	bsf	1,0
 11228                           
 11229                           ;Dimmer_B1.c: 316: DimmerLights->TriggerAdj=command;
 11230  1C70  086C               	movf	_DimmerLights,w
 11231  1C71  3E09               	addlw	9
 11232  1C72  0086               	movwf	6
 11233  1C73  3001               	movlw	1	; select bank2/3
 11234  1C74  0087               	movwf	7
 11235  1C75  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11236  1C76  1181               	bcf	1,3
 11237  1C77  1D03               	skipz
 11238  1C78  1581               	bsf	1,3
 11239                           
 11240                           ;Dimmer_B1.c: 317: DimmerLights->AdjGo=command;
 11241  1C79  086C               	movf	_DimmerLights,w
 11242  1C7A  3E09               	addlw	9
 11243  1C7B  0086               	movwf	6
 11244  1C7C  3001               	movlw	1	; select bank2/3
 11245  1C7D  0087               	movwf	7
 11246  1C7E  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11247  1C7F  1101               	bcf	1,2
 11248  1C80  1D03               	skipz
 11249  1C81  1501               	bsf	1,2
 11250  1C82  0008               	return
 11251  1C83                     __end_of_setDimmerLights_TriggerERROR:	
 11252                           
 11253                           	psect	text52
 11254  10F7                     __ptext52:	
 11255 ;; *************** function _setDimmerLights_ERROR *****************
 11256 ;; Defined at:
 11257 ;;		line 293 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 11258 ;; Parameters:    Size  Location     Type
 11259 ;;  lights          1    wreg     unsigned char 
 11260 ;; Auto vars:     Size  Location     Type
 11261 ;;  lights          1    5[BANK0 ] unsigned char 
 11262 ;; Return value:  Size  Location     Type
 11263 ;;		None               void
 11264 ;; Registers used:
 11265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11266 ;; Tracked objects:
 11267 ;;		On entry : 0/0
 11268 ;;		On exit  : 0/0
 11269 ;;		Unchanged: 0/0
 11270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;Total ram usage:        2 bytes
 11276 ;; Hardware stack levels used:    1
 11277 ;; Hardware stack levels required when called:    6
 11278 ;; This function calls:
 11279 ;;		_DimmerLightsPointSelect
 11280 ;;		_setLED
 11281 ;;		_setLoad_StatusOff
 11282 ;;		_setRFSW_Status
 11283 ;;		_setSw_Status
 11284 ;; This function is called by:
 11285 ;;		_DimmerLights_Exceptions
 11286 ;; This function uses a non-reentrant model
 11287 ;;
 11288                           
 11289                           
 11290                           ;psect for function _setDimmerLights_ERROR
 11291  10F7                     _setDimmerLights_ERROR:	
 11292                           
 11293                           ;incstack = 0
 11294                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11295                           ;setDimmerLights_ERROR@lights stored from wreg
 11296  10F7  0020               	movlb	0	; select bank0
 11297  10F8  00A5               	movwf	setDimmerLights_ERROR@lights
 11298                           
 11299                           ;Dimmer_B1.c: 295: DimmerLightsPointSelect(lights);
 11300  10F9  0825               	movf	setDimmerLights_ERROR@lights,w
 11301  10FA  3199  2107  3190   	fcall	_DimmerLightsPointSelect
 11302                           
 11303                           ;Dimmer_B1.c: 296: if(DimmerLights->Status)
 11304  10FD  0020               	movlb	0	; select bank0
 11305  10FE  086C               	movf	_DimmerLights,w
 11306  10FF  0086               	movwf	6
 11307  1100  3001               	movlw	1	; select bank2/3
 11308  1101  0087               	movwf	7
 11309  1102  1E81               	btfss	1,5
 11310  1103  0008               	return
 11311                           
 11312                           ;Dimmer_B1.c: 297: {
 11313                           ;Dimmer_B1.c: 298: DimmerLights->Signal=0;
 11314  1104  086C               	movf	_DimmerLights,w
 11315  1105  0086               	movwf	6
 11316  1106  3001               	movlw	1	; select bank2/3
 11317  1107  0087               	movwf	7
 11318  1108  1081               	bcf	1,1
 11319                           
 11320                           ;Dimmer_B1.c: 299: DimmerLights->AdjFlag=0;
 11321  1109  086C               	movf	_DimmerLights,w
 11322  110A  0086               	movwf	6
 11323  110B  3001               	movlw	1	; select bank2/3
 11324  110C  0087               	movwf	7
 11325  110D  1181               	bcf	1,3
 11326                           
 11327                           ;Dimmer_B1.c: 300: DimmerLights->AdjStatus=0;
 11328  110E  086C               	movf	_DimmerLights,w
 11329  110F  0086               	movwf	6
 11330  1110  3001               	movlw	1	; select bank2/3
 11331  1111  0087               	movwf	7
 11332  1112  1201               	bcf	1,4
 11333                           
 11334                           ;Dimmer_B1.c: 301: DimmerLights->StatusFlag=0;
 11335  1113  086C               	movf	_DimmerLights,w
 11336  1114  0086               	movwf	6
 11337  1115  3001               	movlw	1	; select bank2/3
 11338  1116  0087               	movwf	7
 11339  1117  1301               	bcf	1,6
 11340                           
 11341                           ;Dimmer_B1.c: 302: DimmerLights->DimmingTimeValue=3;
 11342  1118  3003               	movlw	3
 11343  1119  00A4               	movwf	??_setDimmerLights_ERROR
 11344  111A  086C               	movf	_DimmerLights,w
 11345  111B  3E02               	addlw	2
 11346  111C  0086               	movwf	6
 11347  111D  3001               	movlw	1	; select bank2/3
 11348  111E  0087               	movwf	7
 11349  111F  0824               	movf	??_setDimmerLights_ERROR,w
 11350  1120  0081               	movwf	1
 11351                           
 11352                           ;Dimmer_B1.c: 303: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 11353  1121  086C               	movf	_DimmerLights,w
 11354  1122  3E06               	addlw	6
 11355  1123  0086               	movwf	6
 11356  1124  3001               	movlw	1	; select bank2/3
 11357  1125  0087               	movwf	7
 11358  1126  0801               	movf	1,w
 11359  1127  00A4               	movwf	??_setDimmerLights_ERROR
 11360  1128  086C               	movf	_DimmerLights,w
 11361  1129  3E04               	addlw	4
 11362  112A  0086               	movwf	6
 11363  112B  3001               	movlw	1	; select bank2/3
 11364  112C  0087               	movwf	7
 11365  112D  0824               	movf	??_setDimmerLights_ERROR,w
 11366  112E  0081               	movwf	1
 11367                           
 11368                           ;Dimmer_B1.c: 304: Dimmer->Detect=1;
 11369  112F  0021               	movlb	1	; select bank1
 11370  1130  0839               	movf	_Dimmer^(0+128),w
 11371  1131  0086               	movwf	6
 11372  1132  0187               	clrf	7
 11373  1133  1401               	bsf	1,0
 11374                           
 11375                           ;Dimmer_B1.c: 305: setLoad_StatusOff(lights,1);
 11376  1134  0020               	movlb	0	; select bank0
 11377  1135  01A0               	clrf	setLoad_StatusOff@command
 11378  1136  0AA0               	incf	setLoad_StatusOff@command,f
 11379  1137  0825               	movf	setDimmerLights_ERROR@lights,w
 11380  1138  319D  256E  3190   	fcall	_setLoad_StatusOff
 11381                           
 11382                           ;Dimmer_B1.c: 306: setLED(lights,1);
 11383  113B  0020               	movlb	0	; select bank0
 11384  113C  01A2               	clrf	setLED@command
 11385  113D  0AA2               	incf	setLED@command,f
 11386  113E  0825               	movf	setDimmerLights_ERROR@lights,w
 11387  113F  3192  225D  3190   	fcall	_setLED
 11388                           
 11389                           ;Dimmer_B1.c: 307: setSw_Status(lights,0);
 11390  1142  0020               	movlb	0	; select bank0
 11391  1143  01A2               	clrf	setSw_Status@command
 11392  1144  0825               	movf	setDimmerLights_ERROR@lights,w
 11393  1145  3198  2077  3190   	fcall	_setSw_Status
 11394                           
 11395                           ;Dimmer_B1.c: 308: setRFSW_Status(lights,0);
 11396  1148  0020               	movlb	0	; select bank0
 11397  1149  01A2               	clrf	setRFSW_Status@command
 11398  114A  0825               	movf	setDimmerLights_ERROR@lights,w
 11399  114B  3198  2068         	fcall	_setRFSW_Status
 11400  114D  0008               	return
 11401  114E                     __end_of_setDimmerLights_ERROR:	
 11402                           
 11403                           	psect	text53
 11404  18B6                     __ptext53:	
 11405 ;; *************** function _setDimmerLights_Clear *****************
 11406 ;; Defined at:
 11407 ;;		line 447 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;  lights          1    wreg     unsigned char 
 11410 ;;  command         1    2[BANK0 ] unsigned char 
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;  lights          1    3[BANK0 ] unsigned char 
 11413 ;; Return value:  Size  Location     Type
 11414 ;;		None               void
 11415 ;; Registers used:
 11416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11422 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;Total ram usage:        2 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    5
 11429 ;; This function calls:
 11430 ;;		_DimmerLightsPointSelect
 11431 ;; This function is called by:
 11432 ;;		_Load_Main
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           
 11437                           ;psect for function _setDimmerLights_Clear
 11438  18B6                     _setDimmerLights_Clear:	
 11439                           
 11440                           ;incstack = 0
 11441                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11442                           ;setDimmerLights_Clear@lights stored from wreg
 11443  18B6  0020               	movlb	0	; select bank0
 11444  18B7  00A3               	movwf	setDimmerLights_Clear@lights
 11445                           
 11446                           ;Dimmer_B1.c: 449: DimmerLightsPointSelect(lights);
 11447  18B8  0823               	movf	setDimmerLights_Clear@lights,w
 11448  18B9  3199  2107         	fcall	_DimmerLightsPointSelect
 11449                           
 11450                           ;Dimmer_B1.c: 450: DimmerLights->Clear=command;
 11451  18BB  0020               	movlb	0	; select bank0
 11452  18BC  086C               	movf	_DimmerLights,w
 11453  18BD  3E0C               	addlw	12
 11454  18BE  0086               	movwf	6
 11455  18BF  3001               	movlw	1	; select bank2/3
 11456  18C0  0087               	movwf	7
 11457  18C1  0822               	movf	setDimmerLights_Clear@command,w
 11458  18C2  1001               	bcf	1,0
 11459  18C3  1D03               	skipz
 11460  18C4  1401               	bsf	1,0
 11461  18C5  0008               	return
 11462  18C6                     __end_of_setDimmerLights_Clear:	
 11463                           
 11464                           	psect	text54
 11465  1E3B                     __ptext54:	
 11466 ;; *************** function ___lwdiv *****************
 11467 ;; Defined at:
 11468 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  divisor         2    0[BANK0 ] unsigned int 
 11471 ;;  dividend        2    2[BANK0 ] unsigned int 
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;  quotient        2    5[BANK0 ] unsigned int 
 11474 ;;  counter         1    7[BANK0 ] unsigned char 
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  2    0[BANK0 ] unsigned int 
 11477 ;; Registers used:
 11478 ;;		wreg, status,2, status,0
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11484 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;Total ram usage:        8 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    4
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		_Load_Main
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           
 11499                           ;psect for function ___lwdiv
 11500  1E3B                     ___lwdiv:	
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11504  1E3B  0020               	movlb	0	; select bank0
 11505  1E3C  01A5               	clrf	___lwdiv@quotient
 11506  1E3D  01A6               	clrf	___lwdiv@quotient+1
 11507  1E3E  0821               	movf	___lwdiv@divisor+1,w
 11508  1E3F  0420               	iorwf	___lwdiv@divisor,w
 11509  1E40  1903               	skipnz
 11510  1E41  2E6B               	goto	l7281
 11511  1E42  01A7               	clrf	___lwdiv@counter
 11512  1E43  0AA7               	incf	___lwdiv@counter,f
 11513  1E44                     l7269:	
 11514  1E44  1BA1               	btfsc	___lwdiv@divisor+1,7
 11515  1E45  2E50               	goto	l7271
 11516  1E46  3001               	movlw	1
 11517  1E47                     u6335:	
 11518  1E47  35A0               	lslf	___lwdiv@divisor,f
 11519  1E48  0DA1               	rlf	___lwdiv@divisor+1,f
 11520  1E49  0B89               	decfsz	9,f
 11521  1E4A  2E47               	goto	u6335
 11522  1E4B  3001               	movlw	1
 11523  1E4C  00A4               	movwf	??___lwdiv
 11524  1E4D  0824               	movf	??___lwdiv,w
 11525  1E4E  07A7               	addwf	___lwdiv@counter,f
 11526  1E4F  2E44               	goto	l7269
 11527  1E50                     l7271:	
 11528  1E50  3001               	movlw	1
 11529  1E51                     u6355:	
 11530  1E51  35A5               	lslf	___lwdiv@quotient,f
 11531  1E52  0DA6               	rlf	___lwdiv@quotient+1,f
 11532  1E53  0B89               	decfsz	9,f
 11533  1E54  2E51               	goto	u6355
 11534  1E55  0821               	movf	___lwdiv@divisor+1,w
 11535  1E56  0223               	subwf	___lwdiv@dividend+1,w
 11536  1E57  1D03               	skipz
 11537  1E58  2E5B               	goto	u6365
 11538  1E59  0820               	movf	___lwdiv@divisor,w
 11539  1E5A  0222               	subwf	___lwdiv@dividend,w
 11540  1E5B                     u6365:	
 11541  1E5B  1C03               	skipc
 11542  1E5C  2E62               	goto	l7277
 11543  1E5D  0820               	movf	___lwdiv@divisor,w
 11544  1E5E  02A2               	subwf	___lwdiv@dividend,f
 11545  1E5F  0821               	movf	___lwdiv@divisor+1,w
 11546  1E60  3BA3               	subwfb	___lwdiv@dividend+1,f
 11547  1E61  1425               	bsf	___lwdiv@quotient,0
 11548  1E62                     l7277:	
 11549  1E62  3001               	movlw	1
 11550  1E63                     u6375:	
 11551  1E63  36A1               	lsrf	___lwdiv@divisor+1,f
 11552  1E64  0CA0               	rrf	___lwdiv@divisor,f
 11553  1E65  0B89               	decfsz	9,f
 11554  1E66  2E63               	goto	u6375
 11555  1E67  3001               	movlw	1
 11556  1E68  02A7               	subwf	___lwdiv@counter,f
 11557  1E69  1D03               	btfss	3,2
 11558  1E6A  2E50               	goto	l7271
 11559  1E6B                     l7281:	
 11560  1E6B  0826               	movf	___lwdiv@quotient+1,w
 11561  1E6C  01A1               	clrf	?___lwdiv+1
 11562  1E6D  07A1               	addwf	?___lwdiv+1,f
 11563  1E6E  0825               	movf	___lwdiv@quotient,w
 11564  1E6F  01A0               	clrf	?___lwdiv
 11565  1E70  07A0               	addwf	?___lwdiv,f
 11566  1E71  0008               	return
 11567  1E72                     __end_of___lwdiv:	
 11568                           
 11569                           	psect	text55
 11570  27B0                     __ptext55:	
 11571 ;; *************** function _Load_Initialization *****************
 11572 ;; Defined at:
 11573 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;		None
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;		None
 11578 ;; Return value:  Size  Location     Type
 11579 ;;		None               void
 11580 ;; Registers used:
 11581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/0
 11584 ;;		On exit  : 0/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11591 ;;Total ram usage:        1 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    5
 11594 ;; This function calls:
 11595 ;;		_setLoad_AH_AL_Restore
 11596 ;; This function is called by:
 11597 ;;		_main
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           
 11602                           ;psect for function _Load_Initialization
 11603  27B0                     _Load_Initialization:	
 11604                           
 11605                           ;OverLoad_B1.c: 10: Load=&Load1;
 11606                           
 11607                           ;incstack = 0
 11608                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11609  27B0  3020               	movlw	_Load1& (0+255)
 11610  27B1  0020               	movlb	0	; select bank0
 11611  27B2  00A2               	movwf	??_Load_Initialization
 11612  27B3  0822               	movf	??_Load_Initialization,w
 11613  27B4  00EE               	movwf	_Load
 11614                           
 11615                           ;OverLoad_B1.c: 11: Load->Safe=1;
 11616  27B5  086E               	movf	_Load,w
 11617  27B6  0086               	movwf	6
 11618  27B7  3002               	movlw	2	; select bank4/5
 11619  27B8  0087               	movwf	7
 11620  27B9  1581               	bsf	1,3
 11621                           
 11622                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 11623  27BA  319B  234C         	fcall	_setLoad_AH_AL_Restore
 11624  27BC  0008               	return
 11625  27BD                     __end_of_Load_Initialization:	
 11626                           
 11627                           	psect	text56
 11628  1B4C                     __ptext56:	
 11629 ;; *************** function _setLoad_AH_AL_Restore *****************
 11630 ;; Defined at:
 11631 ;;		line 310 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;		None
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;  i               1    1[BANK0 ] unsigned char 
 11636 ;; Return value:  Size  Location     Type
 11637 ;;		None               void
 11638 ;; Registers used:
 11639 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;Total ram usage:        2 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    4
 11652 ;; This function calls:
 11653 ;;		Nothing
 11654 ;; This function is called by:
 11655 ;;		_Load_Initialization
 11656 ;;		_Load_Main
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _setLoad_AH_AL_Restore
 11662  1B4C                     _setLoad_AH_AL_Restore:	
 11663                           
 11664                           ;OverLoad_B1.c: 312: char i;
 11665                           ;OverLoad_B1.c: 313: for(i=0 ; i<5 ;i++)
 11666                           
 11667                           ;incstack = 0
 11668                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11669  1B4C  0020               	movlb	0	; select bank0
 11670  1B4D  01A1               	clrf	setLoad_AH_AL_Restore@i
 11671  1B4E                     L13:	
 11672  1B4E  3005               	movlw	5
 11673  1B4F  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11674  1B50  1803               	btfsc	3,0
 11675  1B51  0008               	return
 11676                           
 11677                           ;OverLoad_B1.c: 314: {
 11678                           ;OverLoad_B1.c: 315: Load->AH[i]=0;
 11679  1B52  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11680  1B53  3E08               	addlw	8
 11681  1B54  076E               	addwf	_Load,w
 11682  1B55  00A0               	movwf	??_setLoad_AH_AL_Restore
 11683  1B56  0820               	movf	??_setLoad_AH_AL_Restore,w
 11684  1B57  0086               	movwf	6
 11685  1B58  3002               	movlw	2	; select bank4/5
 11686  1B59  0087               	movwf	7
 11687  1B5A  3000               	movlw	0
 11688  1B5B  3FC0               	movwi [0]fsr1
 11689  1B5C  3FC1               	movwi [1]fsr1
 11690                           
 11691                           ;OverLoad_B1.c: 316: Load->AL[i]=0xffff;
 11692  1B5D  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11693  1B5E  3E1A               	addlw	26
 11694  1B5F  076E               	addwf	_Load,w
 11695  1B60  00A0               	movwf	??_setLoad_AH_AL_Restore
 11696  1B61  0820               	movf	??_setLoad_AH_AL_Restore,w
 11697  1B62  0086               	movwf	6
 11698  1B63  3002               	movlw	2	; select bank4/5
 11699  1B64  0087               	movwf	7
 11700  1B65  30FF               	movlw	255
 11701  1B66  3FC0               	movwi [0]fsr1
 11702  1B67  30FF               	movlw	255
 11703  1B68  3FC1               	movwi [1]fsr1
 11704  1B69  3001               	movlw	1
 11705  1B6A  00A0               	movwf	??_setLoad_AH_AL_Restore
 11706  1B6B  0820               	movf	??_setLoad_AH_AL_Restore,w
 11707  1B6C  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11708  1B6D  2B4E               	goto	L13
 11709  1B6E                     __end_of_setLoad_AH_AL_Restore:	
 11710                           
 11711                           	psect	text57
 11712  27A4                     __ptext57:	
 11713 ;; *************** function _LED_Main *****************
 11714 ;; Defined at:
 11715 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;		None
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;		None
 11720 ;; Return value:  Size  Location     Type
 11721 ;;		None               void
 11722 ;; Registers used:
 11723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;Total ram usage:        0 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; Hardware stack levels required when called:    6
 11736 ;; This function calls:
 11737 ;;		_setLED_Main
 11738 ;; This function is called by:
 11739 ;;		_main
 11740 ;; This function uses a non-reentrant model
 11741 ;;
 11742                           
 11743                           
 11744                           ;psect for function _LED_Main
 11745  27A4                     _LED_Main:	
 11746                           
 11747                           ;LED_B1.c: 54: setLED_Main(1);
 11748                           
 11749                           ;incstack = 0
 11750                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11751  27A4  3001               	movlw	1
 11752  27A5  319E  2672  31A7   	fcall	_setLED_Main
 11753                           
 11754                           ;LED_B1.c: 57: setLED_Main(2);
 11755  27A8  3002               	movlw	2
 11756  27A9  319E  2672  31A7   	fcall	_setLED_Main
 11757                           
 11758                           ;LED_B1.c: 63: setLED_Main(99);
 11759  27AC  3063               	movlw	99
 11760  27AD  319E  2672         	fcall	_setLED_Main
 11761  27AF  0008               	return
 11762  27B0                     __end_of_LED_Main:	
 11763                           
 11764                           	psect	text58
 11765  1E72                     __ptext58:	
 11766 ;; *************** function _setLED_Main *****************
 11767 ;; Defined at:
 11768 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 11769 ;; Parameters:    Size  Location     Type
 11770 ;;  led             1    wreg     unsigned char 
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;  led             1    4[BANK0 ] unsigned char 
 11773 ;; Return value:  Size  Location     Type
 11774 ;;		None               void
 11775 ;; Registers used:
 11776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;Total ram usage:        3 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:    5
 11789 ;; This function calls:
 11790 ;;		_LedPointSelect
 11791 ;; This function is called by:
 11792 ;;		_LED_Main
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           
 11797                           ;psect for function _setLED_Main
 11798  1E72                     _setLED_Main:	
 11799                           
 11800                           ;incstack = 0
 11801                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11802                           ;setLED_Main@led stored from wreg
 11803  1E72  0020               	movlb	0	; select bank0
 11804  1E73  00A4               	movwf	setLED_Main@led
 11805                           
 11806                           ;LED_B1.c: 216: LedPointSelect(led);
 11807  1E74  0824               	movf	setLED_Main@led,w
 11808  1E75  319B  232A  319E   	fcall	_LedPointSelect
 11809                           
 11810                           ;LED_B1.c: 217: if(LED->GO)
 11811  1E78  0021               	movlb	1	; select bank1
 11812  1E79  083B               	movf	_LED^(0+128),w
 11813  1E7A  0086               	movwf	6
 11814  1E7B  0187               	clrf	7
 11815  1E7C  1C81               	btfss	1,1
 11816  1E7D  0008               	return
 11817                           
 11818                           ;LED_B1.c: 218: {
 11819                           ;LED_B1.c: 219: LED->Time++;
 11820  1E7E  0A3B               	incf	_LED^(0+128),w
 11821  1E7F  0086               	movwf	6
 11822  1E80  0187               	clrf	7
 11823  1E81  3001               	movlw	1
 11824  1E82  0781               	addwf	1,f
 11825  1E83  3141               	addfsr 1,1
 11826  1E84  1803               	skipnc
 11827  1E85  0A81               	incf	1,f
 11828                           
 11829                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 11830  1E86  0A3B               	incf	_LED^(0+128),w
 11831  1E87  0086               	movwf	6
 11832  1E88  0187               	clrf	7
 11833  1E89  3F40               	moviw [0]fsr1
 11834  1E8A  0020               	movlb	0	; select bank0
 11835  1E8B  00A2               	movwf	??_setLED_Main
 11836  1E8C  3F41               	moviw [1]fsr1
 11837  1E8D  00A3               	movwf	??_setLED_Main+1
 11838  1E8E  3000               	movlw	0
 11839  1E8F  0223               	subwf	??_setLED_Main+1,w
 11840  1E90  3032               	movlw	50
 11841  1E91  1903               	skipnz
 11842  1E92  0222               	subwf	??_setLED_Main,w
 11843  1E93  1C03               	skipc
 11844  1E94  0008               	return
 11845                           
 11846                           ;LED_B1.c: 221: {
 11847                           ;LED_B1.c: 222: LED->Time=0;
 11848  1E95  0021               	movlb	1	; select bank1
 11849  1E96  0A3B               	incf	_LED^(0+128),w
 11850  1E97  0086               	movwf	6
 11851  1E98  0187               	clrf	7
 11852  1E99  3000               	movlw	0
 11853  1E9A  3FC0               	movwi [0]fsr1
 11854  1E9B  3FC1               	movwi [1]fsr1
 11855                           
 11856                           ;LED_B1.c: 224: if(led == 1)
 11857  1E9C  0020               	movlb	0	; select bank0
 11858  1E9D  0824               	movf	setLED_Main@led,w
 11859  1E9E  3A01               	xorlw	1
 11860  1E9F  1D03               	skipz
 11861  1EA0  2EA4               	goto	l6963
 11862                           
 11863                           ;LED_B1.c: 225: {
 11864                           ;LED_B1.c: 226: RA3=~RA3;
 11865  1EA1  3008               	movlw	8
 11866  1EA2  068C               	xorwf	12,f
 11867                           
 11868                           ;LED_B1.c: 227: }
 11869  1EA3  0008               	return
 11870  1EA4                     l6963:	
 11871                           
 11872                           ;LED_B1.c: 230: else if(led == 2)
 11873  1EA4  0824               	movf	setLED_Main@led,w
 11874  1EA5  3A02               	xorlw	2
 11875  1EA6  1D03               	skipz
 11876  1EA7  2EAB               	goto	l6967
 11877                           
 11878                           ;LED_B1.c: 231: {
 11879                           ;LED_B1.c: 232: RC7=~RC7;
 11880  1EA8  3080               	movlw	128
 11881  1EA9  068E               	xorwf	14,f
 11882                           
 11883                           ;LED_B1.c: 233: }
 11884  1EAA  0008               	return
 11885  1EAB                     l6967:	
 11886                           
 11887                           ;LED_B1.c: 242: else if(led == 99)
 11888  1EAB  0824               	movf	setLED_Main@led,w
 11889  1EAC  3A63               	xorlw	99
 11890  1EAD  1D03               	skipz
 11891  1EAE  0008               	return
 11892                           
 11893                           ;LED_B1.c: 243: {
 11894                           ;LED_B1.c: 244: RB5=~RB5;
 11895  1EAF  3020               	movlw	32
 11896  1EB0  068D               	xorwf	13,f
 11897  1EB1  0008               	return
 11898  1EB2                     __end_of_setLED_Main:	
 11899                           
 11900                           	psect	text59
 11901  2798                     __ptext59:	
 11902 ;; *************** function _LED_Initialization *****************
 11903 ;; Defined at:
 11904 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 11905 ;; Parameters:    Size  Location     Type
 11906 ;;		None
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;		None
 11909 ;; Return value:  Size  Location     Type
 11910 ;;		None               void
 11911 ;; Registers used:
 11912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11913 ;; Tracked objects:
 11914 ;;		On entry : 0/0
 11915 ;;		On exit  : 0/0
 11916 ;;		Unchanged: 0/0
 11917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;Total ram usage:        0 bytes
 11923 ;; Hardware stack levels used:    1
 11924 ;; Hardware stack levels required when called:    7
 11925 ;; This function calls:
 11926 ;;		_setLED_Initialization
 11927 ;; This function is called by:
 11928 ;;		_main
 11929 ;; This function uses a non-reentrant model
 11930 ;;
 11931                           
 11932                           
 11933                           ;psect for function _LED_Initialization
 11934  2798                     _LED_Initialization:	
 11935                           
 11936                           ;LED_B1.c: 38: setLED_Initialization(1);
 11937                           
 11938                           ;incstack = 0
 11939                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11940  2798  3001               	movlw	1
 11941  2799  3198  20F6  31A7   	fcall	_setLED_Initialization
 11942                           
 11943                           ;LED_B1.c: 41: setLED_Initialization(2);
 11944  279C  3002               	movlw	2
 11945  279D  3198  20F6  31A7   	fcall	_setLED_Initialization
 11946                           
 11947                           ;LED_B1.c: 47: setLED_Initialization(99);
 11948  27A0  3063               	movlw	99
 11949  27A1  3198  20F6         	fcall	_setLED_Initialization
 11950  27A3  0008               	return
 11951  27A4                     __end_of_LED_Initialization:	
 11952                           
 11953                           	psect	text60
 11954  18F6                     __ptext60:	
 11955 ;; *************** function _setLED_Initialization *****************
 11956 ;; Defined at:
 11957 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 11958 ;; Parameters:    Size  Location     Type
 11959 ;;  led             1    wreg     unsigned char 
 11960 ;; Auto vars:     Size  Location     Type
 11961 ;;  led             1    4[BANK0 ] unsigned char 
 11962 ;; Return value:  Size  Location     Type
 11963 ;;		None               void
 11964 ;; Registers used:
 11965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11966 ;; Tracked objects:
 11967 ;;		On entry : 0/0
 11968 ;;		On exit  : 0/0
 11969 ;;		Unchanged: 0/0
 11970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;Total ram usage:        1 bytes
 11976 ;; Hardware stack levels used:    1
 11977 ;; Hardware stack levels required when called:    6
 11978 ;; This function calls:
 11979 ;;		_LedPointSelect
 11980 ;;		_setLED
 11981 ;; This function is called by:
 11982 ;;		_LED_Initialization
 11983 ;; This function uses a non-reentrant model
 11984 ;;
 11985                           
 11986                           
 11987                           ;psect for function _setLED_Initialization
 11988  18F6                     _setLED_Initialization:	
 11989                           
 11990                           ;incstack = 0
 11991                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11992                           ;setLED_Initialization@led stored from wreg
 11993  18F6  0020               	movlb	0	; select bank0
 11994  18F7  00A4               	movwf	setLED_Initialization@led
 11995                           
 11996                           ;LED_B1.c: 69: LedPointSelect(led);
 11997  18F8  0824               	movf	setLED_Initialization@led,w
 11998  18F9  319B  232A  3198   	fcall	_LedPointSelect
 11999                           
 12000                           ;LED_B1.c: 70: LED->Enable=1;
 12001  18FC  0021               	movlb	1	; select bank1
 12002  18FD  083B               	movf	_LED^(0+128),w
 12003  18FE  0086               	movwf	6
 12004  18FF  0187               	clrf	7
 12005  1900  1401               	bsf	1,0
 12006                           
 12007                           ;LED_B1.c: 71: setLED(led,0);
 12008  1901  0020               	movlb	0	; select bank0
 12009  1902  01A2               	clrf	setLED@command
 12010  1903  0824               	movf	setLED_Initialization@led,w
 12011  1904  3192  225D         	fcall	_setLED
 12012  1906  0008               	return
 12013  1907                     __end_of_setLED_Initialization:	
 12014                           
 12015                           	psect	text61
 12016  1EF2                     __ptext61:	
 12017 ;; *************** function _Flash_Memory_Main *****************
 12018 ;; Defined at:
 12019 ;;		line 517 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12020 ;; Parameters:    Size  Location     Type
 12021 ;;		None
 12022 ;; Auto vars:     Size  Location     Type
 12023 ;;		None
 12024 ;; Return value:  Size  Location     Type
 12025 ;;		None               void
 12026 ;; Registers used:
 12027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12028 ;; Tracked objects:
 12029 ;;		On entry : 0/0
 12030 ;;		On exit  : 0/0
 12031 ;;		Unchanged: 0/0
 12032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12037 ;;Total ram usage:        0 bytes
 12038 ;; Hardware stack levels used:    1
 12039 ;; Hardware stack levels required when called:    7
 12040 ;; This function calls:
 12041 ;;		_Flash_Memory_Modify
 12042 ;; This function is called by:
 12043 ;;		_main
 12044 ;; This function uses a non-reentrant model
 12045 ;;
 12046                           
 12047                           
 12048                           ;psect for function _Flash_Memory_Main
 12049  1EF2                     _Flash_Memory_Main:	
 12050                           
 12051                           ;MCU_16f1518_B1.c: 519: if(Memory->GO)
 12052                           
 12053                           ;incstack = 0
 12054                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12055  1EF2  087C               	movf	_Memory,w
 12056  1EF3  3E22               	addlw	34
 12057  1EF4  0086               	movwf	6
 12058  1EF5  3001               	movlw	1	; select bank2/3
 12059  1EF6  0087               	movwf	7
 12060  1EF7  1C81               	btfss	1,1
 12061  1EF8  0008               	return
 12062                           
 12063                           ;MCU_16f1518_B1.c: 520: {
 12064                           ;MCU_16f1518_B1.c: 521: if(Memory->Modify)
 12065  1EF9  087C               	movf	_Memory,w
 12066  1EFA  3E22               	addlw	34
 12067  1EFB  0086               	movwf	6
 12068  1EFC  3001               	movlw	1	; select bank2/3
 12069  1EFD  0087               	movwf	7
 12070  1EFE  1C01               	btfss	1,0
 12071  1EFF  2F2E               	goto	l9101
 12072                           
 12073                           ;MCU_16f1518_B1.c: 522: {
 12074                           ;MCU_16f1518_B1.c: 523: Memory->Time++;
 12075  1F00  087C               	movf	_Memory,w
 12076  1F01  3E23               	addlw	35
 12077  1F02  0086               	movwf	6
 12078  1F03  3001               	movlw	1	; select bank2/3
 12079  1F04  0087               	movwf	7
 12080  1F05  3001               	movlw	1
 12081  1F06  0781               	addwf	1,f
 12082  1F07  3141               	addfsr 1,1
 12083  1F08  1803               	skipnc
 12084  1F09  0A81               	incf	1,f
 12085                           
 12086                           ;MCU_16f1518_B1.c: 524: if(Memory->Time == 25)
 12087  1F0A  087C               	movf	_Memory,w
 12088  1F0B  3E23               	addlw	35
 12089  1F0C  0086               	movwf	6
 12090  1F0D  3001               	movlw	1	; select bank2/3
 12091  1F0E  0087               	movwf	7
 12092  1F0F  3F40               	moviw [0]fsr1
 12093  1F10  3A19               	xorlw	25
 12094  1F11  1D03               	skipz
 12095  1F12  2F15               	goto	u8945
 12096  1F13  3F41               	moviw [1]fsr1
 12097  1F14  3A00               	xorlw	0
 12098  1F15                     u8945:	
 12099  1F15  1D03               	skipz
 12100  1F16  0008               	return
 12101                           
 12102                           ;MCU_16f1518_B1.c: 525: {
 12103                           ;MCU_16f1518_B1.c: 526: Memory->Time=0;
 12104  1F17  087C               	movf	_Memory,w
 12105  1F18  3E23               	addlw	35
 12106  1F19  0086               	movwf	6
 12107  1F1A  3001               	movlw	1	; select bank2/3
 12108  1F1B  0087               	movwf	7
 12109  1F1C  3000               	movlw	0
 12110  1F1D  3FC0               	movwi [0]fsr1
 12111  1F1E  3FC1               	movwi [1]fsr1
 12112                           
 12113                           ;MCU_16f1518_B1.c: 527: Memory->Modify=0;
 12114  1F1F  087C               	movf	_Memory,w
 12115  1F20  3E22               	addlw	34
 12116  1F21  0086               	movwf	6
 12117  1F22  3001               	movlw	1	; select bank2/3
 12118  1F23  0087               	movwf	7
 12119  1F24  1001               	bcf	1,0
 12120                           
 12121                           ;MCU_16f1518_B1.c: 528: Memory->GO=0;
 12122  1F25  087C               	movf	_Memory,w
 12123  1F26  3E22               	addlw	34
 12124  1F27  0086               	movwf	6
 12125  1F28  3001               	movlw	1	; select bank2/3
 12126  1F29  0087               	movwf	7
 12127  1F2A  1081               	bcf	1,1
 12128                           
 12129                           ;MCU_16f1518_B1.c: 529: Flash_Memory_Modify();
 12130  1F2B  3193  23E4         	fcall	_Flash_Memory_Modify
 12131                           
 12132                           ;MCU_16f1518_B1.c: 531: }
 12133                           ;MCU_16f1518_B1.c: 532: }
 12134  1F2D  0008               	return
 12135  1F2E                     l9101:	
 12136                           
 12137                           ;MCU_16f1518_B1.c: 533: else
 12138                           ;MCU_16f1518_B1.c: 534: {
 12139                           ;MCU_16f1518_B1.c: 535: Memory->GO=0;
 12140  1F2E  087C               	movf	_Memory,w
 12141  1F2F  3E22               	addlw	34
 12142  1F30  0086               	movwf	6
 12143  1F31  3001               	movlw	1	; select bank2/3
 12144  1F32  0087               	movwf	7
 12145  1F33  1081               	bcf	1,1
 12146  1F34  0008               	return
 12147  1F35                     __end_of_Flash_Memory_Main:	
 12148                           
 12149                           	psect	text62
 12150  13E4                     __ptext62:	
 12151 ;; *************** function _Flash_Memory_Modify *****************
 12152 ;; Defined at:
 12153 ;;		line 592 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;		None
 12156 ;; Auto vars:     Size  Location     Type
 12157 ;;  i               1    6[BANK0 ] unsigned char 
 12158 ;; Return value:  Size  Location     Type
 12159 ;;		None               void
 12160 ;; Registers used:
 12161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12162 ;; Tracked objects:
 12163 ;;		On entry : 0/0
 12164 ;;		On exit  : 0/0
 12165 ;;		Unchanged: 0/0
 12166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12169 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;Total ram usage:        3 bytes
 12172 ;; Hardware stack levels used:    1
 12173 ;; Hardware stack levels required when called:    6
 12174 ;; This function calls:
 12175 ;;		_Flash_Memory_Erasing
 12176 ;;		_Flash_Memory_Read
 12177 ;;		_Flash_Memory_Write
 12178 ;; This function is called by:
 12179 ;;		_Flash_Memory_Main
 12180 ;; This function uses a non-reentrant model
 12181 ;;
 12182                           
 12183                           
 12184                           ;psect for function _Flash_Memory_Modify
 12185  13E4                     _Flash_Memory_Modify:	
 12186                           
 12187                           ;MCU_16f1518_B1.c: 594: char i;
 12188                           ;MCU_16f1518_B1.c: 595: for(i=0;i<32;i++)
 12189                           
 12190                           ;incstack = 0
 12191                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12192  13E4  0020               	movlb	0	; select bank0
 12193  13E5  01A6               	clrf	Flash_Memory_Modify@i
 12194  13E6  3020               	movlw	32
 12195  13E7  0226               	subwf	Flash_Memory_Modify@i,w
 12196  13E8  1803               	btfsc	3,0
 12197  13E9  2C01               	goto	l8753
 12198  13EA                     l8747:	
 12199                           
 12200                           ;MCU_16f1518_B1.c: 596: {
 12201                           ;MCU_16f1518_B1.c: 597: Memory->Data[i]=Flash_Memory_Read(i);
 12202  13EA  0826               	movf	Flash_Memory_Modify@i,w
 12203  13EB  319A  220B  3193   	fcall	_Flash_Memory_Read
 12204  13EE  0020               	movlb	0	; select bank0
 12205  13EF  00A4               	movwf	??_Flash_Memory_Modify
 12206  13F0  0826               	movf	Flash_Memory_Modify@i,w
 12207  13F1  077C               	addwf	_Memory,w
 12208  13F2  00A5               	movwf	??_Flash_Memory_Modify+1
 12209  13F3  0825               	movf	??_Flash_Memory_Modify+1,w
 12210  13F4  0086               	movwf	6
 12211  13F5  3001               	movlw	1	; select bank2/3
 12212  13F6  0087               	movwf	7
 12213  13F7  0824               	movf	??_Flash_Memory_Modify,w
 12214  13F8  0081               	movwf	1
 12215  13F9  3001               	movlw	1
 12216  13FA  00A4               	movwf	??_Flash_Memory_Modify
 12217  13FB  0824               	movf	??_Flash_Memory_Modify,w
 12218  13FC  07A6               	addwf	Flash_Memory_Modify@i,f
 12219  13FD  3020               	movlw	32
 12220  13FE  0226               	subwf	Flash_Memory_Modify@i,w
 12221  13FF  1C03               	skipc
 12222  1400  2BEA               	goto	l8747
 12223  1401                     l8753:	
 12224                           
 12225                           ;MCU_16f1518_B1.c: 598: }
 12226                           ;MCU_16f1518_B1.c: 599: Memory->Data[0]=Product->Data[12];
 12227  1401  086F               	movf	_Product,w
 12228  1402  3E0C               	addlw	12
 12229  1403  0086               	movwf	6
 12230  1404  3001               	movlw	1	; select bank2/3
 12231  1405  0087               	movwf	7
 12232  1406  0801               	movf	1,w
 12233  1407  00A4               	movwf	??_Flash_Memory_Modify
 12234  1408  087C               	movf	_Memory,w
 12235  1409  0086               	movwf	6
 12236  140A  3001               	movlw	1	; select bank2/3
 12237  140B  0087               	movwf	7
 12238  140C  0824               	movf	??_Flash_Memory_Modify,w
 12239  140D  0081               	movwf	1
 12240                           
 12241                           ;MCU_16f1518_B1.c: 600: Memory->Data[1]=Product->Data[13];
 12242  140E  086F               	movf	_Product,w
 12243  140F  3E0D               	addlw	13
 12244  1410  0086               	movwf	6
 12245  1411  3001               	movlw	1	; select bank2/3
 12246  1412  0087               	movwf	7
 12247  1413  0801               	movf	1,w
 12248  1414  00A4               	movwf	??_Flash_Memory_Modify
 12249  1415  0A7C               	incf	_Memory,w
 12250  1416  0086               	movwf	6
 12251  1417  3001               	movlw	1	; select bank2/3
 12252  1418  0087               	movwf	7
 12253  1419  0824               	movf	??_Flash_Memory_Modify,w
 12254  141A  0081               	movwf	1
 12255                           
 12256                           ;MCU_16f1518_B1.c: 601: Memory->Data[2]=Product->Data[14];
 12257  141B  086F               	movf	_Product,w
 12258  141C  3E0E               	addlw	14
 12259  141D  0086               	movwf	6
 12260  141E  3001               	movlw	1	; select bank2/3
 12261  141F  0087               	movwf	7
 12262  1420  0801               	movf	1,w
 12263  1421  00A4               	movwf	??_Flash_Memory_Modify
 12264  1422  087C               	movf	_Memory,w
 12265  1423  3E02               	addlw	2
 12266  1424  0086               	movwf	6
 12267  1425  3001               	movlw	1	; select bank2/3
 12268  1426  0087               	movwf	7
 12269  1427  0824               	movf	??_Flash_Memory_Modify,w
 12270  1428  0081               	movwf	1
 12271                           
 12272                           ;MCU_16f1518_B1.c: 607: if(Memory->LoopSave)
 12273  1429  087C               	movf	_Memory,w
 12274  142A  3E22               	addlw	34
 12275  142B  0086               	movwf	6
 12276  142C  3001               	movlw	1	; select bank2/3
 12277  142D  0087               	movwf	7
 12278  142E  1D01               	btfss	1,2
 12279  142F  2C41               	goto	l8757
 12280                           
 12281                           ;MCU_16f1518_B1.c: 608: {
 12282                           ;MCU_16f1518_B1.c: 609: Memory->LoopSave=0;
 12283  1430  087C               	movf	_Memory,w
 12284  1431  3E22               	addlw	34
 12285  1432  0086               	movwf	6
 12286  1433  3001               	movlw	1	; select bank2/3
 12287  1434  0087               	movwf	7
 12288  1435  1101               	bcf	1,2
 12289                           
 12290                           ;MCU_16f1518_B1.c: 610: TMain->FirstOpen=0;
 12291  1436  087D               	movf	_TMain,w
 12292  1437  0086               	movwf	6
 12293  1438  3001               	movlw	1	; select bank2/3
 12294  1439  0087               	movwf	7
 12295  143A  1281               	bcf	1,5
 12296                           
 12297                           ;MCU_16f1518_B1.c: 611: TMain->First=0;
 12298  143B  087D               	movf	_TMain,w
 12299  143C  3E03               	addlw	3
 12300  143D  0086               	movwf	6
 12301  143E  3001               	movlw	1	; select bank2/3
 12302  143F  0087               	movwf	7
 12303  1440  1081               	bcf	1,1
 12304  1441                     l8757:	
 12305                           
 12306                           ;MCU_16f1518_B1.c: 613: }
 12307                           ;MCU_16f1518_B1.c: 614: GIE=0;
 12308  1441  138B               	bcf	11,7	;volatile
 12309                           
 12310                           ;MCU_16f1518_B1.c: 615: Flash_Memory_Erasing();
 12311  1442  31A7  278C  3193   	fcall	_Flash_Memory_Erasing
 12312                           
 12313                           ;MCU_16f1518_B1.c: 616: Flash_Memory_Write();
 12314  1445  319C  24DE         	fcall	_Flash_Memory_Write
 12315                           
 12316                           ;MCU_16f1518_B1.c: 617: GIE=1;
 12317  1447  178B               	bsf	11,7	;volatile
 12318  1448  0008               	return
 12319  1449                     __end_of_Flash_Memory_Modify:	
 12320                           
 12321                           	psect	text63
 12322  278C                     __ptext63:	
 12323 ;; *************** function _Flash_Memory_Erasing *****************
 12324 ;; Defined at:
 12325 ;;		line 581 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;		None
 12328 ;; Auto vars:     Size  Location     Type
 12329 ;;		None
 12330 ;; Return value:  Size  Location     Type
 12331 ;;		None               void
 12332 ;; Registers used:
 12333 ;;		wreg, status,2, status,0, pclath, cstack
 12334 ;; Tracked objects:
 12335 ;;		On entry : 0/0
 12336 ;;		On exit  : 0/0
 12337 ;;		Unchanged: 0/0
 12338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;Total ram usage:        0 bytes
 12344 ;; Hardware stack levels used:    1
 12345 ;; Hardware stack levels required when called:    5
 12346 ;; This function calls:
 12347 ;;		_Flash_Memory_Unlock
 12348 ;; This function is called by:
 12349 ;;		_Flash_Memory_Modify
 12350 ;; This function uses a non-reentrant model
 12351 ;;
 12352                           
 12353                           
 12354                           ;psect for function _Flash_Memory_Erasing
 12355  278C                     _Flash_Memory_Erasing:	
 12356                           
 12357                           ;MCU_16f1518_B1.c: 583: CFGS=0;
 12358                           
 12359                           ;incstack = 0
 12360                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12361  278C  0023               	movlb	3	; select bank3
 12362  278D  1315               	bcf	21,6	;volatile
 12363                           
 12364                           ;MCU_16f1518_B1.c: 584: PMADRH=0x30;
 12365  278E  3030               	movlw	48
 12366  278F  0092               	movwf	18	;volatile
 12367                           
 12368                           ;MCU_16f1518_B1.c: 585: PMADRL=0x00;
 12369  2790  0191               	clrf	17	;volatile
 12370                           
 12371                           ;MCU_16f1518_B1.c: 586: FREE=1;
 12372  2791  1615               	bsf	21,4	;volatile
 12373                           
 12374                           ;MCU_16f1518_B1.c: 587: WREN=1;
 12375  2792  1515               	bsf	21,2	;volatile
 12376                           
 12377                           ;MCU_16f1518_B1.c: 588: Flash_Memory_Unlock();
 12378  2793  31A7  271F         	fcall	_Flash_Memory_Unlock
 12379                           
 12380                           ;MCU_16f1518_B1.c: 589: WREN=0;
 12381  2795  0023               	movlb	3	; select bank3
 12382  2796  1115               	bcf	21,2	;volatile
 12383  2797  0008               	return
 12384  2798                     __end_of_Flash_Memory_Erasing:	
 12385                           
 12386                           	psect	text64
 12387  0DBE                     __ptext64:	
 12388 ;; *************** function _Flash_Memory_Initialization *****************
 12389 ;; Defined at:
 12390 ;;		line 472 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12391 ;; Parameters:    Size  Location     Type
 12392 ;;		None
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;  i               1   62[BANK0 ] unsigned char 
 12395 ;; Return value:  Size  Location     Type
 12396 ;;		None               void
 12397 ;; Registers used:
 12398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;Total ram usage:        2 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    7
 12411 ;; This function calls:
 12412 ;;		_Flash_Memory_Read
 12413 ;;		_Flash_Memory_Write
 12414 ;;		_setPercentValue
 12415 ;; This function is called by:
 12416 ;;		_main
 12417 ;; This function uses a non-reentrant model
 12418 ;;
 12419                           
 12420                           
 12421                           ;psect for function _Flash_Memory_Initialization
 12422  0DBE                     _Flash_Memory_Initialization:	
 12423                           
 12424                           ;MCU_16f1518_B1.c: 474: char i;
 12425                           ;MCU_16f1518_B1.c: 475: if(Flash_Memory_Read(31) == 0xaa)
 12426                           
 12427                           ;incstack = 0
 12428                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12429  0DBE  301F               	movlw	31
 12430  0DBF  319A  220B  318D   	fcall	_Flash_Memory_Read
 12431  0DC2  3AAA               	xorlw	170
 12432  0DC3  1D03               	skipz
 12433  0DC4  2E36               	goto	l8983
 12434                           
 12435                           ;MCU_16f1518_B1.c: 476: {
 12436                           ;MCU_16f1518_B1.c: 477: Product->Data[12]=Flash_Memory_Read(0);
 12437  0DC5  3000               	movlw	0
 12438  0DC6  319A  220B  318D   	fcall	_Flash_Memory_Read
 12439  0DC9  0020               	movlb	0	; select bank0
 12440  0DCA  00DD               	movwf	??_Flash_Memory_Initialization
 12441  0DCB  086F               	movf	_Product,w
 12442  0DCC  3E0C               	addlw	12
 12443  0DCD  0086               	movwf	6
 12444  0DCE  3001               	movlw	1	; select bank2/3
 12445  0DCF  0087               	movwf	7
 12446  0DD0  085D               	movf	??_Flash_Memory_Initialization,w
 12447  0DD1  0081               	movwf	1
 12448                           
 12449                           ;MCU_16f1518_B1.c: 478: Product->Data[13]=Flash_Memory_Read(1);
 12450  0DD2  3001               	movlw	1
 12451  0DD3  319A  220B  318D   	fcall	_Flash_Memory_Read
 12452  0DD6  0020               	movlb	0	; select bank0
 12453  0DD7  00DD               	movwf	??_Flash_Memory_Initialization
 12454  0DD8  086F               	movf	_Product,w
 12455  0DD9  3E0D               	addlw	13
 12456  0DDA  0086               	movwf	6
 12457  0DDB  3001               	movlw	1	; select bank2/3
 12458  0DDC  0087               	movwf	7
 12459  0DDD  085D               	movf	??_Flash_Memory_Initialization,w
 12460  0DDE  0081               	movwf	1
 12461                           
 12462                           ;MCU_16f1518_B1.c: 479: Product->Data[14]=Flash_Memory_Read(2);
 12463  0DDF  3002               	movlw	2
 12464  0DE0  319A  220B  318D   	fcall	_Flash_Memory_Read
 12465  0DE3  0020               	movlb	0	; select bank0
 12466  0DE4  00DD               	movwf	??_Flash_Memory_Initialization
 12467  0DE5  086F               	movf	_Product,w
 12468  0DE6  3E0E               	addlw	14
 12469  0DE7  0086               	movwf	6
 12470  0DE8  3001               	movlw	1	; select bank2/3
 12471  0DE9  0087               	movwf	7
 12472  0DEA  085D               	movf	??_Flash_Memory_Initialization,w
 12473  0DEB  0081               	movwf	1
 12474                           
 12475                           ;MCU_16f1518_B1.c: 485: i=setPercentValue(((char)(65*1.5)));
 12476  0DEC  3061               	movlw	97
 12477  0DED  3190  2018  318D   	fcall	_setPercentValue
 12478  0DF0  0020               	movlb	0	; select bank0
 12479  0DF1  00DD               	movwf	??_Flash_Memory_Initialization
 12480  0DF2  085D               	movf	??_Flash_Memory_Initialization,w
 12481  0DF3  00DE               	movwf	Flash_Memory_Initialization@i
 12482                           
 12483                           ;MCU_16f1518_B1.c: 486: Product->Data[21]=i;
 12484  0DF4  085E               	movf	Flash_Memory_Initialization@i,w
 12485  0DF5  00DD               	movwf	??_Flash_Memory_Initialization
 12486  0DF6  086F               	movf	_Product,w
 12487  0DF7  3E15               	addlw	21
 12488  0DF8  0086               	movwf	6
 12489  0DF9  3001               	movlw	1	; select bank2/3
 12490  0DFA  0087               	movwf	7
 12491  0DFB  085D               	movf	??_Flash_Memory_Initialization,w
 12492  0DFC  0081               	movwf	1
 12493                           
 12494                           ;MCU_16f1518_B1.c: 487: Product->Data[22]=i;
 12495  0DFD  085E               	movf	Flash_Memory_Initialization@i,w
 12496  0DFE  00DD               	movwf	??_Flash_Memory_Initialization
 12497  0DFF  086F               	movf	_Product,w
 12498  0E00  3E16               	addlw	22
 12499  0E01  0086               	movwf	6
 12500  0E02  3001               	movlw	1	; select bank2/3
 12501  0E03  0087               	movwf	7
 12502  0E04  085D               	movf	??_Flash_Memory_Initialization,w
 12503  0E05  0081               	movwf	1
 12504                           
 12505                           ;MCU_16f1518_B1.c: 488: Product->Data[23]=i;
 12506  0E06  085E               	movf	Flash_Memory_Initialization@i,w
 12507  0E07  00DD               	movwf	??_Flash_Memory_Initialization
 12508  0E08  086F               	movf	_Product,w
 12509  0E09  3E17               	addlw	23
 12510  0E0A  0086               	movwf	6
 12511  0E0B  3001               	movlw	1	; select bank2/3
 12512  0E0C  0087               	movwf	7
 12513  0E0D  085D               	movf	??_Flash_Memory_Initialization,w
 12514  0E0E  0081               	movwf	1
 12515                           
 12516                           ;MCU_16f1518_B1.c: 490: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product
      +                          ->Data[14]==0xff)
 12517  0E0F  086F               	movf	_Product,w
 12518  0E10  3E0C               	addlw	12
 12519  0E11  0086               	movwf	6
 12520  0E12  3001               	movlw	1	; select bank2/3
 12521  0E13  0087               	movwf	7
 12522  0E14  0801               	movf	1,w
 12523  0E15  3AFF               	xorlw	255
 12524  0E16  1D03               	skipz
 12525  0E17  0008               	return
 12526  0E18  086F               	movf	_Product,w
 12527  0E19  3E0D               	addlw	13
 12528  0E1A  0086               	movwf	6
 12529  0E1B  3001               	movlw	1	; select bank2/3
 12530  0E1C  0087               	movwf	7
 12531  0E1D  0801               	movf	1,w
 12532  0E1E  3AFF               	xorlw	255
 12533  0E1F  1D03               	skipz
 12534  0E20  0008               	return
 12535  0E21  086F               	movf	_Product,w
 12536  0E22  3E0E               	addlw	14
 12537  0E23  0086               	movwf	6
 12538  0E24  3001               	movlw	1	; select bank2/3
 12539  0E25  0087               	movwf	7
 12540  0E26  0801               	movf	1,w
 12541  0E27  3AFF               	xorlw	255
 12542  0E28  1D03               	skipz
 12543  0E29  0008               	return
 12544                           
 12545                           ;MCU_16f1518_B1.c: 491: {
 12546                           ;MCU_16f1518_B1.c: 492: TMain->FirstOpen=1;
 12547  0E2A  087D               	movf	_TMain,w
 12548  0E2B  0086               	movwf	6
 12549  0E2C  3001               	movlw	1	; select bank2/3
 12550  0E2D  0087               	movwf	7
 12551  0E2E  1681               	bsf	1,5
 12552                           
 12553                           ;MCU_16f1518_B1.c: 493: TMain->First=1;
 12554  0E2F  087D               	movf	_TMain,w
 12555  0E30  3E03               	addlw	3
 12556  0E31  0086               	movwf	6
 12557  0E32  3001               	movlw	1	; select bank2/3
 12558  0E33  0087               	movwf	7
 12559  0E34  1481               	bsf	1,1
 12560                           
 12561                           ;MCU_16f1518_B1.c: 494: }
 12562                           ;MCU_16f1518_B1.c: 495: }
 12563  0E35  0008               	return
 12564  0E36                     l8983:	
 12565                           
 12566                           ;MCU_16f1518_B1.c: 496: else
 12567                           ;MCU_16f1518_B1.c: 497: {
 12568                           ;MCU_16f1518_B1.c: 498: i=setPercentValue(((char)(65*1.5)));
 12569  0E36  3061               	movlw	97
 12570  0E37  3190  2018  318D   	fcall	_setPercentValue
 12571  0E3A  0020               	movlb	0	; select bank0
 12572  0E3B  00DD               	movwf	??_Flash_Memory_Initialization
 12573  0E3C  085D               	movf	??_Flash_Memory_Initialization,w
 12574  0E3D  00DE               	movwf	Flash_Memory_Initialization@i
 12575                           
 12576                           ;MCU_16f1518_B1.c: 499: Memory->Data[0]=0xff;
 12577  0E3E  30FF               	movlw	255
 12578  0E3F  00DD               	movwf	??_Flash_Memory_Initialization
 12579  0E40  087C               	movf	_Memory,w
 12580  0E41  0086               	movwf	6
 12581  0E42  3001               	movlw	1	; select bank2/3
 12582  0E43  0087               	movwf	7
 12583  0E44  085D               	movf	??_Flash_Memory_Initialization,w
 12584  0E45  0081               	movwf	1
 12585                           
 12586                           ;MCU_16f1518_B1.c: 500: Memory->Data[1]=0xff;
 12587  0E46  30FF               	movlw	255
 12588  0E47  00DD               	movwf	??_Flash_Memory_Initialization
 12589  0E48  0A7C               	incf	_Memory,w
 12590  0E49  0086               	movwf	6
 12591  0E4A  3001               	movlw	1	; select bank2/3
 12592  0E4B  0087               	movwf	7
 12593  0E4C  085D               	movf	??_Flash_Memory_Initialization,w
 12594  0E4D  0081               	movwf	1
 12595                           
 12596                           ;MCU_16f1518_B1.c: 501: Memory->Data[2]=0xff;
 12597  0E4E  30FF               	movlw	255
 12598  0E4F  00DD               	movwf	??_Flash_Memory_Initialization
 12599  0E50  087C               	movf	_Memory,w
 12600  0E51  3E02               	addlw	2
 12601  0E52  0086               	movwf	6
 12602  0E53  3001               	movlw	1	; select bank2/3
 12603  0E54  0087               	movwf	7
 12604  0E55  085D               	movf	??_Flash_Memory_Initialization,w
 12605  0E56  0081               	movwf	1
 12606                           
 12607                           ;MCU_16f1518_B1.c: 502: Memory->Data[3]=0xff;
 12608  0E57  30FF               	movlw	255
 12609  0E58  00DD               	movwf	??_Flash_Memory_Initialization
 12610  0E59  087C               	movf	_Memory,w
 12611  0E5A  3E03               	addlw	3
 12612  0E5B  0086               	movwf	6
 12613  0E5C  3001               	movlw	1	; select bank2/3
 12614  0E5D  0087               	movwf	7
 12615  0E5E  085D               	movf	??_Flash_Memory_Initialization,w
 12616  0E5F  0081               	movwf	1
 12617                           
 12618                           ;MCU_16f1518_B1.c: 503: Memory->Data[4]=0xff;
 12619  0E60  30FF               	movlw	255
 12620  0E61  00DD               	movwf	??_Flash_Memory_Initialization
 12621  0E62  087C               	movf	_Memory,w
 12622  0E63  3E04               	addlw	4
 12623  0E64  0086               	movwf	6
 12624  0E65  3001               	movlw	1	; select bank2/3
 12625  0E66  0087               	movwf	7
 12626  0E67  085D               	movf	??_Flash_Memory_Initialization,w
 12627  0E68  0081               	movwf	1
 12628                           
 12629                           ;MCU_16f1518_B1.c: 504: Memory->Data[5]=0xff;
 12630  0E69  30FF               	movlw	255
 12631  0E6A  00DD               	movwf	??_Flash_Memory_Initialization
 12632  0E6B  087C               	movf	_Memory,w
 12633  0E6C  3E05               	addlw	5
 12634  0E6D  0086               	movwf	6
 12635  0E6E  3001               	movlw	1	; select bank2/3
 12636  0E6F  0087               	movwf	7
 12637  0E70  085D               	movf	??_Flash_Memory_Initialization,w
 12638  0E71  0081               	movwf	1
 12639                           
 12640                           ;MCU_16f1518_B1.c: 505: Memory->Data[31]=0xaa;
 12641  0E72  30AA               	movlw	170
 12642  0E73  00DD               	movwf	??_Flash_Memory_Initialization
 12643  0E74  087C               	movf	_Memory,w
 12644  0E75  3E1F               	addlw	31
 12645  0E76  0086               	movwf	6
 12646  0E77  3001               	movlw	1	; select bank2/3
 12647  0E78  0087               	movwf	7
 12648  0E79  085D               	movf	??_Flash_Memory_Initialization,w
 12649  0E7A  0081               	movwf	1
 12650                           
 12651                           ;MCU_16f1518_B1.c: 506: Product->Data[21]=i;
 12652  0E7B  085E               	movf	Flash_Memory_Initialization@i,w
 12653  0E7C  00DD               	movwf	??_Flash_Memory_Initialization
 12654  0E7D  086F               	movf	_Product,w
 12655  0E7E  3E15               	addlw	21
 12656  0E7F  0086               	movwf	6
 12657  0E80  3001               	movlw	1	; select bank2/3
 12658  0E81  0087               	movwf	7
 12659  0E82  085D               	movf	??_Flash_Memory_Initialization,w
 12660  0E83  0081               	movwf	1
 12661                           
 12662                           ;MCU_16f1518_B1.c: 507: Product->Data[22]=i;
 12663  0E84  085E               	movf	Flash_Memory_Initialization@i,w
 12664  0E85  00DD               	movwf	??_Flash_Memory_Initialization
 12665  0E86  086F               	movf	_Product,w
 12666  0E87  3E16               	addlw	22
 12667  0E88  0086               	movwf	6
 12668  0E89  3001               	movlw	1	; select bank2/3
 12669  0E8A  0087               	movwf	7
 12670  0E8B  085D               	movf	??_Flash_Memory_Initialization,w
 12671  0E8C  0081               	movwf	1
 12672                           
 12673                           ;MCU_16f1518_B1.c: 508: Product->Data[23]=i;
 12674  0E8D  085E               	movf	Flash_Memory_Initialization@i,w
 12675  0E8E  00DD               	movwf	??_Flash_Memory_Initialization
 12676  0E8F  086F               	movf	_Product,w
 12677  0E90  3E17               	addlw	23
 12678  0E91  0086               	movwf	6
 12679  0E92  3001               	movlw	1	; select bank2/3
 12680  0E93  0087               	movwf	7
 12681  0E94  085D               	movf	??_Flash_Memory_Initialization,w
 12682  0E95  0081               	movwf	1
 12683                           
 12684                           ;MCU_16f1518_B1.c: 509: GIE=0;
 12685  0E96  138B               	bcf	11,7	;volatile
 12686                           
 12687                           ;MCU_16f1518_B1.c: 510: Flash_Memory_Write();
 12688  0E97  319C  24DE         	fcall	_Flash_Memory_Write
 12689                           
 12690                           ;MCU_16f1518_B1.c: 511: GIE=1;
 12691  0E99  178B               	bsf	11,7	;volatile
 12692                           
 12693                           ;MCU_16f1518_B1.c: 512: TMain->FirstOpen=1;
 12694  0E9A  087D               	movf	_TMain,w
 12695  0E9B  0086               	movwf	6
 12696  0E9C  3001               	movlw	1	; select bank2/3
 12697  0E9D  0087               	movwf	7
 12698  0E9E  1681               	bsf	1,5
 12699                           
 12700                           ;MCU_16f1518_B1.c: 513: TMain->First=1;
 12701  0E9F  087D               	movf	_TMain,w
 12702  0EA0  3E03               	addlw	3
 12703  0EA1  0086               	movwf	6
 12704  0EA2  3001               	movlw	1	; select bank2/3
 12705  0EA3  0087               	movwf	7
 12706  0EA4  1481               	bsf	1,1
 12707  0EA5  0008               	return
 12708  0EA6                     __end_of_Flash_Memory_Initialization:	
 12709                           
 12710                           	psect	text65
 12711  1CDE                     __ptext65:	
 12712 ;; *************** function _Flash_Memory_Write *****************
 12713 ;; Defined at:
 12714 ;;		line 561 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;		None
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;  i               1    1[BANK0 ] unsigned char 
 12719 ;; Return value:  Size  Location     Type
 12720 ;;		None               void
 12721 ;; Registers used:
 12722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12723 ;; Tracked objects:
 12724 ;;		On entry : 0/0
 12725 ;;		On exit  : 0/0
 12726 ;;		Unchanged: 0/0
 12727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;Total ram usage:        2 bytes
 12733 ;; Hardware stack levels used:    1
 12734 ;; Hardware stack levels required when called:    5
 12735 ;; This function calls:
 12736 ;;		_Flash_Memory_Unlock
 12737 ;; This function is called by:
 12738 ;;		_Flash_Memory_Initialization
 12739 ;;		_Flash_Memory_Modify
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           
 12744                           ;psect for function _Flash_Memory_Write
 12745  1CDE                     _Flash_Memory_Write:	
 12746                           
 12747                           ;MCU_16f1518_B1.c: 563: char i;
 12748                           ;MCU_16f1518_B1.c: 564: CFGS=0;
 12749                           
 12750                           ;incstack = 0
 12751                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12752  1CDE  0023               	movlb	3	; select bank3
 12753  1CDF  1315               	bcf	21,6	;volatile
 12754                           
 12755                           ;MCU_16f1518_B1.c: 565: PMADRH=0x30;
 12756  1CE0  3030               	movlw	48
 12757  1CE1  0092               	movwf	18	;volatile
 12758                           
 12759                           ;MCU_16f1518_B1.c: 566: PMDATH=0;
 12760  1CE2  0194               	clrf	20	;volatile
 12761                           
 12762                           ;MCU_16f1518_B1.c: 567: FREE=0;
 12763  1CE3  1215               	bcf	21,4	;volatile
 12764                           
 12765                           ;MCU_16f1518_B1.c: 568: LWLO=1;
 12766  1CE4  1695               	bsf	21,5	;volatile
 12767                           
 12768                           ;MCU_16f1518_B1.c: 569: WREN=1;
 12769  1CE5  1515               	bsf	21,2	;volatile
 12770                           
 12771                           ;MCU_16f1518_B1.c: 570: for(i=0 ; i<32 ; i++)
 12772  1CE6  0020               	movlb	0	; select bank0
 12773  1CE7  01A1               	clrf	Flash_Memory_Write@i
 12774  1CE8  3020               	movlw	32
 12775  1CE9  0221               	subwf	Flash_Memory_Write@i,w
 12776  1CEA  1803               	btfsc	3,0
 12777  1CEB  2D06               	goto	l1658
 12778  1CEC                     l8419:	
 12779                           
 12780                           ;MCU_16f1518_B1.c: 571: {
 12781                           ;MCU_16f1518_B1.c: 572: PMADRL=i;
 12782  1CEC  0821               	movf	Flash_Memory_Write@i,w
 12783  1CED  0023               	movlb	3	; select bank3
 12784  1CEE  0091               	movwf	17	;volatile
 12785                           
 12786                           ;MCU_16f1518_B1.c: 573: PMDATL=Memory->Data[i];
 12787  1CEF  0020               	movlb	0	; select bank0
 12788  1CF0  0821               	movf	Flash_Memory_Write@i,w
 12789  1CF1  077C               	addwf	_Memory,w
 12790  1CF2  00A0               	movwf	??_Flash_Memory_Write
 12791  1CF3  0820               	movf	??_Flash_Memory_Write,w
 12792  1CF4  0086               	movwf	6
 12793  1CF5  3001               	movlw	1	; select bank2/3
 12794  1CF6  0087               	movwf	7
 12795  1CF7  0801               	movf	1,w
 12796  1CF8  0023               	movlb	3	; select bank3
 12797  1CF9  0093               	movwf	19	;volatile
 12798                           
 12799                           ;MCU_16f1518_B1.c: 574: Flash_Memory_Unlock();
 12800  1CFA  31A7  271F  319C   	fcall	_Flash_Memory_Unlock
 12801  1CFD  3001               	movlw	1
 12802  1CFE  0020               	movlb	0	; select bank0
 12803  1CFF  00A0               	movwf	??_Flash_Memory_Write
 12804  1D00  0820               	movf	??_Flash_Memory_Write,w
 12805  1D01  07A1               	addwf	Flash_Memory_Write@i,f
 12806  1D02  3020               	movlw	32
 12807  1D03  0221               	subwf	Flash_Memory_Write@i,w
 12808  1D04  1C03               	skipc
 12809  1D05  2CEC               	goto	l8419
 12810  1D06                     l1658:	
 12811                           
 12812                           ;MCU_16f1518_B1.c: 575: }
 12813                           ;MCU_16f1518_B1.c: 576: LWLO=0;
 12814  1D06  0023               	movlb	3	; select bank3
 12815  1D07  1295               	bcf	21,5	;volatile
 12816                           
 12817                           ;MCU_16f1518_B1.c: 577: Flash_Memory_Unlock();
 12818  1D08  31A7  271F         	fcall	_Flash_Memory_Unlock
 12819                           
 12820                           ;MCU_16f1518_B1.c: 578: WREN=0;
 12821  1D0A  0023               	movlb	3	; select bank3
 12822  1D0B  1115               	bcf	21,2	;volatile
 12823  1D0C  0008               	return
 12824  1D0D                     __end_of_Flash_Memory_Write:	
 12825                           
 12826                           	psect	text66
 12827  271F                     __ptext66:	
 12828 ;; *************** function _Flash_Memory_Unlock *****************
 12829 ;; Defined at:
 12830 ;;		line 540 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12831 ;; Parameters:    Size  Location     Type
 12832 ;;		None
 12833 ;; Auto vars:     Size  Location     Type
 12834 ;;		None
 12835 ;; Return value:  Size  Location     Type
 12836 ;;		None               void
 12837 ;; Registers used:
 12838 ;;		wreg
 12839 ;; Tracked objects:
 12840 ;;		On entry : 0/0
 12841 ;;		On exit  : 0/0
 12842 ;;		Unchanged: 0/0
 12843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;Total ram usage:        0 bytes
 12849 ;; Hardware stack levels used:    1
 12850 ;; Hardware stack levels required when called:    4
 12851 ;; This function calls:
 12852 ;;		Nothing
 12853 ;; This function is called by:
 12854 ;;		_Flash_Memory_Write
 12855 ;;		_Flash_Memory_Erasing
 12856 ;; This function uses a non-reentrant model
 12857 ;;
 12858                           
 12859                           
 12860                           ;psect for function _Flash_Memory_Unlock
 12861  271F                     _Flash_Memory_Unlock:	
 12862                           
 12863                           ;MCU_16f1518_B1.c: 542: PMCON2=0x55;
 12864                           
 12865                           ;incstack = 0
 12866                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12867  271F  3055               	movlw	85
 12868  2720  0023               	movlb	3	; select bank3
 12869  2721  0096               	movwf	22	;volatile
 12870                           
 12871                           ;MCU_16f1518_B1.c: 543: PMCON2=0xaa;
 12872  2722  30AA               	movlw	170
 12873  2723  0096               	movwf	22	;volatile
 12874                           
 12875                           ;MCU_16f1518_B1.c: 544: WR=1;
 12876  2724  1495               	bsf	21,1	;volatile
 12877                           
 12878                           ;MCU_16f1518_B1.c: 545: __nop();
 12879  2725  0000               	nop
 12880                           
 12881                           ;MCU_16f1518_B1.c: 546: __nop();
 12882  2726  0000               	nop
 12883  2727  0008               	return
 12884  2728                     __end_of_Flash_Memory_Unlock:	
 12885                           
 12886                           	psect	text67
 12887  1A0B                     __ptext67:	
 12888 ;; *************** function _Flash_Memory_Read *****************
 12889 ;; Defined at:
 12890 ;;		line 549 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12891 ;; Parameters:    Size  Location     Type
 12892 ;;  address         1    wreg     unsigned char 
 12893 ;; Auto vars:     Size  Location     Type
 12894 ;;  address         1    2[BANK0 ] unsigned char 
 12895 ;;  ret             1    3[BANK0 ] unsigned char 
 12896 ;;  i               1    1[BANK0 ] unsigned char 
 12897 ;; Return value:  Size  Location     Type
 12898 ;;                  1    wreg      unsigned char 
 12899 ;; Registers used:
 12900 ;;		wreg, status,2
 12901 ;; Tracked objects:
 12902 ;;		On entry : 0/0
 12903 ;;		On exit  : 0/0
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;Total ram usage:        4 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; Hardware stack levels required when called:    4
 12913 ;; This function calls:
 12914 ;;		Nothing
 12915 ;; This function is called by:
 12916 ;;		_Flash_Memory_Initialization
 12917 ;;		_Flash_Memory_Modify
 12918 ;; This function uses a non-reentrant model
 12919 ;;
 12920                           
 12921                           
 12922                           ;psect for function _Flash_Memory_Read
 12923  1A0B                     _Flash_Memory_Read:	
 12924                           
 12925                           ;incstack = 0
 12926                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12927                           ;Flash_Memory_Read@address stored from wreg
 12928  1A0B  0020               	movlb	0	; select bank0
 12929  1A0C  00A2               	movwf	Flash_Memory_Read@address
 12930                           
 12931                           ;MCU_16f1518_B1.c: 551: char i,ret=0;
 12932  1A0D  01A3               	clrf	Flash_Memory_Read@ret
 12933                           
 12934                           ;MCU_16f1518_B1.c: 552: PMADRH=0x30;
 12935  1A0E  3030               	movlw	48
 12936  1A0F  0023               	movlb	3	; select bank3
 12937  1A10  0092               	movwf	18	;volatile
 12938                           
 12939                           ;MCU_16f1518_B1.c: 553: PMADRL=address;
 12940  1A11  0020               	movlb	0	; select bank0
 12941  1A12  0822               	movf	Flash_Memory_Read@address,w
 12942  1A13  0023               	movlb	3	; select bank3
 12943  1A14  0091               	movwf	17	;volatile
 12944                           
 12945                           ;MCU_16f1518_B1.c: 554: CFGS=0;
 12946  1A15  1315               	bcf	21,6	;volatile
 12947                           
 12948                           ;MCU_16f1518_B1.c: 555: RD=1;
 12949  1A16  1415               	bsf	21,0	;volatile
 12950                           
 12951                           ;MCU_16f1518_B1.c: 556: i=PMDATH;
 12952  1A17  0814               	movf	20,w	;volatile
 12953  1A18  0020               	movlb	0	; select bank0
 12954  1A19  00A0               	movwf	??_Flash_Memory_Read
 12955  1A1A  0820               	movf	??_Flash_Memory_Read,w
 12956  1A1B  00A1               	movwf	Flash_Memory_Read@i
 12957                           
 12958                           ;MCU_16f1518_B1.c: 557: ret=PMDATL;
 12959  1A1C  0023               	movlb	3	; select bank3
 12960  1A1D  0813               	movf	19,w	;volatile
 12961  1A1E  0020               	movlb	0	; select bank0
 12962  1A1F  00A0               	movwf	??_Flash_Memory_Read
 12963  1A20  0820               	movf	??_Flash_Memory_Read,w
 12964  1A21  00A3               	movwf	Flash_Memory_Read@ret
 12965                           
 12966                           ;MCU_16f1518_B1.c: 558: return ret;
 12967  1A22  0823               	movf	Flash_Memory_Read@ret,w
 12968  1A23  0008               	return
 12969  1A24                     __end_of_Flash_Memory_Read:	
 12970                           
 12971                           	psect	text68
 12972  275D                     __ptext68:	
 12973 ;; *************** function _DimmerLights_Main *****************
 12974 ;; Defined at:
 12975 ;;		line 105 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12976 ;; Parameters:    Size  Location     Type
 12977 ;;		None
 12978 ;; Auto vars:     Size  Location     Type
 12979 ;;		None
 12980 ;; Return value:  Size  Location     Type
 12981 ;;		None               void
 12982 ;; Registers used:
 12983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12984 ;; Tracked objects:
 12985 ;;		On entry : 0/0
 12986 ;;		On exit  : 0/0
 12987 ;;		Unchanged: 0/0
 12988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;Total ram usage:        0 bytes
 12994 ;; Hardware stack levels used:    1
 12995 ;; Hardware stack levels required when called:   10
 12996 ;; This function calls:
 12997 ;;		_DimmerLights_Close
 12998 ;;		_setDimmerLights_Main
 12999 ;; This function is called by:
 13000 ;;		_main
 13001 ;; This function uses a non-reentrant model
 13002 ;;
 13003                           
 13004                           
 13005                           ;psect for function _DimmerLights_Main
 13006  275D                     _DimmerLights_Main:	
 13007                           
 13008                           ;Dimmer_B1.c: 108: setDimmerLights_Main(1);
 13009                           
 13010                           ;incstack = 0
 13011                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13012  275D  3001               	movlw	1
 13013  275E  3196  26F4  31A7   	fcall	_setDimmerLights_Main
 13014                           
 13015                           ;Dimmer_B1.c: 112: setDimmerLights_Main(2);
 13016  2761  3002               	movlw	2
 13017  2762  3196  26F4  31A7   	fcall	_setDimmerLights_Main
 13018                           
 13019                           ;Dimmer_B1.c: 119: DimmerLights_Close();
 13020  2765  319A  223D         	fcall	_DimmerLights_Close
 13021  2767  0008               	return
 13022  2768                     __end_of_DimmerLights_Main:	
 13023                           
 13024                           	psect	text69
 13025  16F4                     __ptext69:	
 13026 ;; *************** function _setDimmerLights_Main *****************
 13027 ;; Defined at:
 13028 ;;		line 122 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;  lights          1    wreg     unsigned char 
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;  lights          1   70[BANK0 ] unsigned char 
 13033 ;;  clear           1   69[BANK0 ] unsigned char 
 13034 ;; Return value:  Size  Location     Type
 13035 ;;		None               void
 13036 ;; Registers used:
 13037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;Total ram usage:        2 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; Hardware stack levels required when called:    9
 13050 ;; This function calls:
 13051 ;;		_DimmerLightsPointSelect
 13052 ;;		_setBuz
 13053 ;;		_setDimmerLights
 13054 ;;		_setDimmerLights_Adj
 13055 ;; This function is called by:
 13056 ;;		_DimmerLights_Main
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           
 13061                           ;psect for function _setDimmerLights_Main
 13062  16F4                     _setDimmerLights_Main:	
 13063                           
 13064                           ;incstack = 0
 13065                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13066                           ;setDimmerLights_Main@lights stored from wreg
 13067  16F4  0020               	movlb	0	; select bank0
 13068  16F5  00E6               	movwf	setDimmerLights_Main@lights
 13069                           
 13070                           ;Dimmer_B1.c: 124: char clear=1;
 13071  16F6  01E5               	clrf	setDimmerLights_Main@clear
 13072  16F7  0AE5               	incf	setDimmerLights_Main@clear,f
 13073                           
 13074                           ;Dimmer_B1.c: 125: DimmerLightsPointSelect(lights);
 13075  16F8  0866               	movf	setDimmerLights_Main@lights,w
 13076  16F9  3199  2107  3196   	fcall	_DimmerLightsPointSelect
 13077                           
 13078                           ;Dimmer_B1.c: 143: if(lights == 1)
 13079  16FC  0020               	movlb	0	; select bank0
 13080  16FD  0866               	movf	setDimmerLights_Main@lights,w
 13081  16FE  3A01               	xorlw	1
 13082  16FF  1D03               	skipz
 13083  1700  2F03               	goto	l8649
 13084                           
 13085                           ;Dimmer_B1.c: 144: {
 13086                           ;Dimmer_B1.c: 145: clear=(!DimmerLights22->Clear)?0:1;
 13087  1701  087A               	movf	_DimmerLights22,w
 13088  1702  2F08               	goto	L14
 13089  1703                     l8649:	
 13090                           ;Dimmer_B1.c: 146: }
 13091                           
 13092                           
 13093                           ;Dimmer_B1.c: 147: else if(lights == 2)
 13094  1703  0866               	movf	setDimmerLights_Main@lights,w
 13095  1704  3A02               	xorlw	2
 13096  1705  1D03               	skipz
 13097  1706  2F10               	goto	l8653
 13098                           
 13099                           ;Dimmer_B1.c: 148: {
 13100                           ;Dimmer_B1.c: 149: clear=(!DimmerLights11->Clear)?0:1;
 13101  1707  0879               	movf	_DimmerLights11,w
 13102  1708                     L14:	
 13103  1708  3E0C               	addlw	12
 13104  1709  0086               	movwf	6
 13105  170A  3001               	movlw	1	; select bank2/3
 13106  170B  0087               	movwf	7
 13107  170C  3000               	movlw	0
 13108  170D  1801               	btfsc	1,0
 13109  170E  3001               	movlw	1
 13110  170F  00E5               	movwf	setDimmerLights_Main@clear
 13111  1710                     l8653:	
 13112                           
 13113                           ;Dimmer_B1.c: 150: }
 13114                           ;Dimmer_B1.c: 153: if(DimmerLights->Trigger)
 13115  1710  086C               	movf	_DimmerLights,w
 13116  1711  3E09               	addlw	9
 13117  1712  0086               	movwf	6
 13118  1713  3001               	movlw	1	; select bank2/3
 13119  1714  0087               	movwf	7
 13120  1715  1C81               	btfss	1,1
 13121  1716  2F46               	goto	l8671
 13122                           
 13123                           ;Dimmer_B1.c: 154: {
 13124                           ;Dimmer_B1.c: 155: if(clear)
 13125  1717  0865               	movf	setDimmerLights_Main@clear,w
 13126  1718  1903               	btfsc	3,2
 13127  1719  0008               	return
 13128                           
 13129                           ;Dimmer_B1.c: 156: {
 13130                           ;Dimmer_B1.c: 157: if(DimmerLights->Switch)
 13131  171A  086C               	movf	_DimmerLights,w
 13132  171B  3E09               	addlw	9
 13133  171C  0086               	movwf	6
 13134  171D  3001               	movlw	1	; select bank2/3
 13135  171E  0087               	movwf	7
 13136  171F  1C01               	btfss	1,0
 13137  1720  2F34               	goto	l8665
 13138                           
 13139                           ;Dimmer_B1.c: 158: {
 13140                           ;Dimmer_B1.c: 159: DimmerLights->Trigger=0;
 13141  1721  086C               	movf	_DimmerLights,w
 13142  1722  3E09               	addlw	9
 13143  1723  0086               	movwf	6
 13144  1724  3001               	movlw	1	; select bank2/3
 13145  1725  0087               	movwf	7
 13146  1726  1081               	bcf	1,1
 13147                           
 13148                           ;Dimmer_B1.c: 160: setDimmerLights(lights,1);
 13149  1727  01A4               	clrf	setDimmerLights@status
 13150  1728  0AA4               	incf	setDimmerLights@status,f
 13151  1729  0866               	movf	setDimmerLights_Main@lights,w
 13152  172A  318A  2257         	fcall	_setDimmerLights
 13153                           
 13154                           ;Dimmer_B1.c: 163: DimmerLights->Clear=0;
 13155  172C  0020               	movlb	0	; select bank0
 13156  172D  086C               	movf	_DimmerLights,w
 13157  172E  3E0C               	addlw	12
 13158  172F  0086               	movwf	6
 13159  1730  3001               	movlw	1	; select bank2/3
 13160  1731  0087               	movwf	7
 13161  1732  1001               	bcf	1,0
 13162                           
 13163                           ;Dimmer_B1.c: 165: }
 13164  1733  0008               	return
 13165  1734                     l8665:	
 13166                           
 13167                           ;Dimmer_B1.c: 166: else
 13168                           ;Dimmer_B1.c: 167: {
 13169                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 13170  1734  086C               	movf	_DimmerLights,w
 13171  1735  3E09               	addlw	9
 13172  1736  0086               	movwf	6
 13173  1737  3001               	movlw	1	; select bank2/3
 13174  1738  0087               	movwf	7
 13175  1739  1081               	bcf	1,1
 13176                           
 13177                           ;Dimmer_B1.c: 169: setDimmerLights(lights,0);
 13178  173A  01A4               	clrf	setDimmerLights@status
 13179  173B  0866               	movf	setDimmerLights_Main@lights,w
 13180  173C  318A  2257         	fcall	_setDimmerLights
 13181                           
 13182                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 13183  173E  0020               	movlb	0	; select bank0
 13184  173F  086C               	movf	_DimmerLights,w
 13185  1740  3E0C               	addlw	12
 13186  1741  0086               	movwf	6
 13187  1742  3001               	movlw	1	; select bank2/3
 13188  1743  0087               	movwf	7
 13189  1744  1001               	bcf	1,0
 13190                           
 13191                           ;Dimmer_B1.c: 174: }
 13192                           ;Dimmer_B1.c: 175: }
 13193                           ;Dimmer_B1.c: 176: }
 13194  1745  0008               	return
 13195  1746                     l8671:	
 13196                           
 13197                           ;Dimmer_B1.c: 177: else
 13198                           ;Dimmer_B1.c: 178: {
 13199                           ;Dimmer_B1.c: 179: if(DimmerLights->TriggerAdj)
 13200  1746  086C               	movf	_DimmerLights,w
 13201  1747  3E09               	addlw	9
 13202  1748  0086               	movwf	6
 13203  1749  3001               	movlw	1	; select bank2/3
 13204  174A  0087               	movwf	7
 13205  174B  1D81               	btfss	1,3
 13206  174C  0008               	return
 13207                           
 13208                           ;Dimmer_B1.c: 180: {
 13209                           ;Dimmer_B1.c: 181: if(clear)
 13210  174D  0865               	movf	setDimmerLights_Main@clear,w
 13211  174E  1903               	btfsc	3,2
 13212  174F  0008               	return
 13213                           
 13214                           ;Dimmer_B1.c: 182: {
 13215                           ;Dimmer_B1.c: 183: DimmerLightsPointSelect(lights);
 13216  1750  0866               	movf	setDimmerLights_Main@lights,w
 13217  1751  3199  2107  3196   	fcall	_DimmerLightsPointSelect
 13218                           
 13219                           ;Dimmer_B1.c: 184: DimmerLights->TriggerAdj=0;
 13220  1754  0020               	movlb	0	; select bank0
 13221  1755  086C               	movf	_DimmerLights,w
 13222  1756  3E09               	addlw	9
 13223  1757  0086               	movwf	6
 13224  1758  3001               	movlw	1	; select bank2/3
 13225  1759  0087               	movwf	7
 13226  175A  1181               	bcf	1,3
 13227                           
 13228                           ;Dimmer_B1.c: 185: if(DimmerLights->AdjGo)
 13229  175B  086C               	movf	_DimmerLights,w
 13230  175C  3E09               	addlw	9
 13231  175D  0086               	movwf	6
 13232  175E  3001               	movlw	1	; select bank2/3
 13233  175F  0087               	movwf	7
 13234  1760  1D01               	btfss	1,2
 13235  1761  2F72               	goto	l8683
 13236                           
 13237                           ;Dimmer_B1.c: 186: {
 13238                           ;Dimmer_B1.c: 187: setDimmerLights_Adj(lights,1);
 13239  1762  01E2               	clrf	setDimmerLights_Adj@status
 13240  1763  0AE2               	incf	setDimmerLights_Adj@status,f
 13241  1764  0866               	movf	setDimmerLights_Main@lights,w
 13242  1765  319F  2778  3196   	fcall	_setDimmerLights_Adj
 13243                           
 13244                           ;Dimmer_B1.c: 188: setBuz(1,100);
 13245  1768  3064               	movlw	100
 13246  1769  0020               	movlb	0	; select bank0
 13247  176A  00A6               	movwf	setBuz@time
 13248  176B  3000               	movlw	0
 13249  176C  00A7               	movwf	setBuz@time+1
 13250  176D  3001               	movlw	1
 13251  176E  3196  2604         	fcall	_setBuz
 13252                           
 13253                           ;Dimmer_B1.c: 189: }
 13254  1770  0020               	movlb	0	; select bank0
 13255  1771  0008               	return
 13256  1772                     l8683:	
 13257                           
 13258                           ;Dimmer_B1.c: 190: else
 13259                           ;Dimmer_B1.c: 191: {
 13260                           ;Dimmer_B1.c: 192: setDimmerLights_Adj(lights,0);
 13261  1772  0020               	movlb	0	; select bank0
 13262  1773  01E2               	clrf	setDimmerLights_Adj@status
 13263  1774  0866               	movf	setDimmerLights_Main@lights,w
 13264  1775  319F  2778         	fcall	_setDimmerLights_Adj
 13265  1777  0020               	movlb	0	; select bank0
 13266  1778  0008               	return
 13267  1779                     __end_of_setDimmerLights_Main:	
 13268                           
 13269                           	psect	text70
 13270  1F78                     __ptext70:	
 13271 ;; *************** function _setDimmerLights_Adj *****************
 13272 ;; Defined at:
 13273 ;;		line 379 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13274 ;; Parameters:    Size  Location     Type
 13275 ;;  lights          1    wreg     unsigned char 
 13276 ;;  status          1   66[BANK0 ] unsigned char 
 13277 ;; Auto vars:     Size  Location     Type
 13278 ;;  lights          1   68[BANK0 ] unsigned char 
 13279 ;; Return value:  Size  Location     Type
 13280 ;;		None               void
 13281 ;; Registers used:
 13282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13283 ;; Tracked objects:
 13284 ;;		On entry : 0/0
 13285 ;;		On exit  : 0/0
 13286 ;;		Unchanged: 0/0
 13287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13288 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;Total ram usage:        3 bytes
 13293 ;; Hardware stack levels used:    1
 13294 ;; Hardware stack levels required when called:    8
 13295 ;; This function calls:
 13296 ;;		_DimmerLightsPointSelect
 13297 ;;		_setLoad_StatusOff
 13298 ;;		_setRF_DimmerLights
 13299 ;;		_setTxData
 13300 ;; This function is called by:
 13301 ;;		_setDimmerLights_Main
 13302 ;; This function uses a non-reentrant model
 13303 ;;
 13304                           
 13305                           
 13306                           ;psect for function _setDimmerLights_Adj
 13307  1F78                     _setDimmerLights_Adj:	
 13308                           
 13309                           ;incstack = 0
 13310                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13311                           ;setDimmerLights_Adj@lights stored from wreg
 13312  1F78  0020               	movlb	0	; select bank0
 13313  1F79  00E4               	movwf	setDimmerLights_Adj@lights
 13314                           
 13315                           ;Dimmer_B1.c: 381: DimmerLightsPointSelect(lights);
 13316  1F7A  0864               	movf	setDimmerLights_Adj@lights,w
 13317  1F7B  3199  2107  319F   	fcall	_DimmerLightsPointSelect
 13318                           
 13319                           ;Dimmer_B1.c: 382: if(status)
 13320  1F7E  0020               	movlb	0	; select bank0
 13321  1F7F  0862               	movf	setDimmerLights_Adj@status,w
 13322  1F80  1903               	btfsc	3,2
 13323  1F81  2F8D               	goto	l8353
 13324                           
 13325                           ;Dimmer_B1.c: 383: {
 13326                           ;Dimmer_B1.c: 384: DimmerLights->AdjFlag=1;
 13327  1F82  086C               	movf	_DimmerLights,w
 13328  1F83  0086               	movwf	6
 13329  1F84  3001               	movlw	1	; select bank2/3
 13330  1F85  0087               	movwf	7
 13331  1F86  1581               	bsf	1,3
 13332                           
 13333                           ;Dimmer_B1.c: 385: DimmerLights->Signal=1;
 13334  1F87  086C               	movf	_DimmerLights,w
 13335  1F88  0086               	movwf	6
 13336  1F89  3001               	movlw	1	; select bank2/3
 13337  1F8A  0087               	movwf	7
 13338  1F8B  1481               	bsf	1,1
 13339                           
 13340                           ;Dimmer_B1.c: 386: }
 13341  1F8C  0008               	return
 13342  1F8D                     l8353:	
 13343                           
 13344                           ;Dimmer_B1.c: 387: else
 13345                           ;Dimmer_B1.c: 388: {
 13346                           ;Dimmer_B1.c: 389: if(DimmerLights->AdjFlag)
 13347  1F8D  086C               	movf	_DimmerLights,w
 13348  1F8E  0086               	movwf	6
 13349  1F8F  3001               	movlw	1	; select bank2/3
 13350  1F90  0087               	movwf	7
 13351  1F91  1D81               	btfss	1,3
 13352  1F92  0008               	return
 13353                           
 13354                           ;Dimmer_B1.c: 390: {
 13355                           ;Dimmer_B1.c: 391: DimmerLights->Signal=0;
 13356  1F93  086C               	movf	_DimmerLights,w
 13357  1F94  0086               	movwf	6
 13358  1F95  3001               	movlw	1	; select bank2/3
 13359  1F96  0087               	movwf	7
 13360  1F97  1081               	bcf	1,1
 13361                           
 13362                           ;Dimmer_B1.c: 392: DimmerLights->AdjFlag=0;
 13363  1F98  086C               	movf	_DimmerLights,w
 13364  1F99  0086               	movwf	6
 13365  1F9A  3001               	movlw	1	; select bank2/3
 13366  1F9B  0087               	movwf	7
 13367  1F9C  1181               	bcf	1,3
 13368                           
 13369                           ;Dimmer_B1.c: 393: setLoad_StatusOff(0,1);
 13370  1F9D  01A0               	clrf	setLoad_StatusOff@command
 13371  1F9E  0AA0               	incf	setLoad_StatusOff@command,f
 13372  1F9F  3000               	movlw	0
 13373  1FA0  319D  256E  319F   	fcall	_setLoad_StatusOff
 13374                           
 13375                           ;Dimmer_B1.c: 394: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 13376  1FA3  0020               	movlb	0	; select bank0
 13377  1FA4  086C               	movf	_DimmerLights,w
 13378  1FA5  3E04               	addlw	4
 13379  1FA6  0086               	movwf	6
 13380  1FA7  3001               	movlw	1	; select bank2/3
 13381  1FA8  0087               	movwf	7
 13382  1FA9  0801               	movf	1,w
 13383  1FAA  00E3               	movwf	??_setDimmerLights_Adj
 13384  1FAB  086C               	movf	_DimmerLights,w
 13385  1FAC  3E05               	addlw	5
 13386  1FAD  0086               	movwf	6
 13387  1FAE  3001               	movlw	1	; select bank2/3
 13388  1FAF  0087               	movwf	7
 13389  1FB0  0863               	movf	??_setDimmerLights_Adj,w
 13390  1FB1  0081               	movwf	1
 13391                           
 13392                           ;Dimmer_B1.c: 402: setRF_DimmerLights(lights,1);
 13393  1FB2  01DD               	clrf	setRF_DimmerLights@on
 13394  1FB3  0ADD               	incf	setRF_DimmerLights@on,f
 13395  1FB4  0864               	movf	setDimmerLights_Adj@lights,w
 13396  1FB5  3194  2449  319F   	fcall	_setRF_DimmerLights
 13397                           
 13398                           ;Dimmer_B1.c: 403: setTxData(1);
 13399  1FB8  3001               	movlw	1
 13400  1FB9  318C  24F5         	fcall	_setTxData
 13401  1FBB  0008               	return
 13402  1FBC                     __end_of_setDimmerLights_Adj:	
 13403                           
 13404                           	psect	text71
 13405  1D6E                     __ptext71:	
 13406 ;; *************** function _setLoad_StatusOff *****************
 13407 ;; Defined at:
 13408 ;;		line 284 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  lights          1    wreg     unsigned char 
 13411 ;;  command         1    0[BANK0 ] unsigned char 
 13412 ;; Auto vars:     Size  Location     Type
 13413 ;;  lights          1    1[BANK0 ] unsigned char 
 13414 ;; Return value:  Size  Location     Type
 13415 ;;		None               void
 13416 ;; Registers used:
 13417 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13418 ;; Tracked objects:
 13419 ;;		On entry : 0/0
 13420 ;;		On exit  : 0/0
 13421 ;;		Unchanged: 0/0
 13422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13423 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;Total ram usage:        2 bytes
 13428 ;; Hardware stack levels used:    1
 13429 ;; Hardware stack levels required when called:    4
 13430 ;; This function calls:
 13431 ;;		Nothing
 13432 ;; This function is called by:
 13433 ;;		_setDimmerLights_ERROR
 13434 ;;		_setDimmerLights_Adj
 13435 ;; This function uses a non-reentrant model
 13436 ;;
 13437                           
 13438                           
 13439                           ;psect for function _setLoad_StatusOff
 13440  1D6E                     _setLoad_StatusOff:	
 13441                           
 13442                           ;incstack = 0
 13443                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 13444                           ;setLoad_StatusOff@lights stored from wreg
 13445  1D6E  0020               	movlb	0	; select bank0
 13446  1D6F  00A1               	movwf	setLoad_StatusOff@lights
 13447                           
 13448                           ;OverLoad_B1.c: 286: Load->StatusOff=command;
 13449  1D70  086E               	movf	_Load,w
 13450  1D71  3E46               	addlw	70
 13451  1D72  0086               	movwf	6
 13452  1D73  3002               	movlw	2	; select bank4/5
 13453  1D74  0087               	movwf	7
 13454  1D75  0820               	movf	setLoad_StatusOff@command,w
 13455  1D76  1081               	bcf	1,1
 13456  1D77  1D03               	skipz
 13457  1D78  1481               	bsf	1,1
 13458                           
 13459                           ;OverLoad_B1.c: 287: Load->SafeCount-=2;
 13460  1D79  086E               	movf	_Load,w
 13461  1D7A  3E42               	addlw	66
 13462  1D7B  0086               	movwf	6
 13463  1D7C  3002               	movlw	2	; select bank4/5
 13464  1D7D  0087               	movwf	7
 13465  1D7E  3002               	movlw	2
 13466  1D7F  0281               	subwf	1,f
 13467                           
 13468                           ;OverLoad_B1.c: 288: if(lights == 1)
 13469  1D80  0821               	movf	setLoad_StatusOff@lights,w
 13470  1D81  3A01               	xorlw	1
 13471  1D82  1D03               	skipz
 13472  1D83  2D8A               	goto	l8145
 13473                           
 13474                           ;OverLoad_B1.c: 289: {
 13475                           ;OverLoad_B1.c: 290: Load->Lights1Status=0;
 13476  1D84  086E               	movf	_Load,w
 13477  1D85  3E43               	addlw	67
 13478  1D86  0086               	movwf	6
 13479  1D87  3002               	movlw	2	; select bank4/5
 13480  1D88  0087               	movwf	7
 13481  1D89  0181               	clrf	1
 13482  1D8A                     l8145:	
 13483                           
 13484                           ;OverLoad_B1.c: 291: }
 13485                           ;OverLoad_B1.c: 292: if(lights == 2)
 13486  1D8A  0821               	movf	setLoad_StatusOff@lights,w
 13487  1D8B  3A02               	xorlw	2
 13488  1D8C  1D03               	skipz
 13489  1D8D  2D94               	goto	l8149
 13490                           
 13491                           ;OverLoad_B1.c: 293: {
 13492                           ;OverLoad_B1.c: 294: Load->Lights2Status=0;
 13493  1D8E  086E               	movf	_Load,w
 13494  1D8F  3E44               	addlw	68
 13495  1D90  0086               	movwf	6
 13496  1D91  3002               	movlw	2	; select bank4/5
 13497  1D92  0087               	movwf	7
 13498  1D93  0181               	clrf	1
 13499  1D94                     l8149:	
 13500                           
 13501                           ;OverLoad_B1.c: 295: }
 13502                           ;OverLoad_B1.c: 296: if(lights == 3)
 13503  1D94  0821               	movf	setLoad_StatusOff@lights,w
 13504  1D95  3A03               	xorlw	3
 13505  1D96  1D03               	skipz
 13506  1D97  0008               	return
 13507                           
 13508                           ;OverLoad_B1.c: 297: {
 13509                           ;OverLoad_B1.c: 298: Load->Lights3Status=0;
 13510  1D98  086E               	movf	_Load,w
 13511  1D99  3E45               	addlw	69
 13512  1D9A  0086               	movwf	6
 13513  1D9B  3002               	movlw	2	; select bank4/5
 13514  1D9C  0087               	movwf	7
 13515  1D9D  0181               	clrf	1
 13516  1D9E  0008               	return
 13517  1D9F                     __end_of_setLoad_StatusOff:	
 13518                           
 13519                           	psect	text72
 13520  0A57                     __ptext72:	
 13521 ;; *************** function _setDimmerLights *****************
 13522 ;; Defined at:
 13523 ;;		line 321 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13524 ;; Parameters:    Size  Location     Type
 13525 ;;  lights          1    wreg     unsigned char 
 13526 ;;  status          1    4[BANK0 ] unsigned char 
 13527 ;; Auto vars:     Size  Location     Type
 13528 ;;  lights          1    6[BANK0 ] unsigned char 
 13529 ;; Return value:  Size  Location     Type
 13530 ;;		None               void
 13531 ;; Registers used:
 13532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13533 ;; Tracked objects:
 13534 ;;		On entry : 0/0
 13535 ;;		On exit  : 0/0
 13536 ;;		Unchanged: 0/0
 13537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13538 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13542 ;;Total ram usage:        3 bytes
 13543 ;; Hardware stack levels used:    1
 13544 ;; Hardware stack levels required when called:    6
 13545 ;; This function calls:
 13546 ;;		_DimmerLightsPointSelect
 13547 ;;		_setLED
 13548 ;;		_setLoad_Count
 13549 ;;		_setLoad_StatusOn
 13550 ;; This function is called by:
 13551 ;;		_setDimmerLights_Main
 13552 ;;		_setControl_Lights_Table
 13553 ;; This function uses a non-reentrant model
 13554 ;;
 13555                           
 13556                           
 13557                           ;psect for function _setDimmerLights
 13558  0A57                     _setDimmerLights:	
 13559                           
 13560                           ;incstack = 0
 13561                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13562                           ;setDimmerLights@lights stored from wreg
 13563  0A57  0020               	movlb	0	; select bank0
 13564  0A58  00A6               	movwf	setDimmerLights@lights
 13565                           
 13566                           ;Dimmer_B1.c: 323: DimmerLightsPointSelect(lights);
 13567  0A59  0826               	movf	setDimmerLights@lights,w
 13568  0A5A  3199  2107  318A   	fcall	_DimmerLightsPointSelect
 13569                           
 13570                           ;Dimmer_B1.c: 324: Dimmer->Load=lights;
 13571  0A5D  0020               	movlb	0	; select bank0
 13572  0A5E  0826               	movf	setDimmerLights@lights,w
 13573  0A5F  00A5               	movwf	??_setDimmerLights
 13574  0A60  0021               	movlb	1	; select bank1
 13575  0A61  0A39               	incf	_Dimmer^(0+128),w
 13576  0A62  0086               	movwf	6
 13577  0A63  0187               	clrf	7
 13578  0A64  0020               	movlb	0	; select bank0
 13579  0A65  0825               	movf	??_setDimmerLights,w
 13580  0A66  0081               	movwf	1
 13581                           
 13582                           ;Dimmer_B1.c: 325: if(status)
 13583  0A67  0824               	movf	setDimmerLights@status,w
 13584  0A68  1903               	btfsc	3,2
 13585  0A69  2ABE               	goto	l8135
 13586                           
 13587                           ;Dimmer_B1.c: 326: {
 13588                           ;Dimmer_B1.c: 327: DimmerLights->Status=1;
 13589  0A6A  086C               	movf	_DimmerLights,w
 13590  0A6B  0086               	movwf	6
 13591  0A6C  3001               	movlw	1	; select bank2/3
 13592  0A6D  0087               	movwf	7
 13593  0A6E  1681               	bsf	1,5
 13594                           
 13595                           ;Dimmer_B1.c: 328: setLED(lights,0);
 13596  0A6F  01A2               	clrf	setLED@command
 13597  0A70  0826               	movf	setDimmerLights@lights,w
 13598  0A71  3192  225D  318A   	fcall	_setLED
 13599                           
 13600                           ;Dimmer_B1.c: 330: setLoad_Count(0);
 13601  0A74  3000               	movlw	0
 13602  0A75  3199  216B  318A   	fcall	_setLoad_Count
 13603                           
 13604                           ;Dimmer_B1.c: 332: DimmerLights->Signal=1;
 13605  0A78  0020               	movlb	0	; select bank0
 13606  0A79  086C               	movf	_DimmerLights,w
 13607  0A7A  0086               	movwf	6
 13608  0A7B  3001               	movlw	1	; select bank2/3
 13609  0A7C  0087               	movwf	7
 13610  0A7D  1481               	bsf	1,1
 13611                           
 13612                           ;Dimmer_B1.c: 333: DimmerLights->DimmingTimeValue=3;
 13613  0A7E  3003               	movlw	3
 13614  0A7F  00A5               	movwf	??_setDimmerLights
 13615  0A80  086C               	movf	_DimmerLights,w
 13616  0A81  3E02               	addlw	2
 13617  0A82  0086               	movwf	6
 13618  0A83  3001               	movlw	1	; select bank2/3
 13619  0A84  0087               	movwf	7
 13620  0A85  0825               	movf	??_setDimmerLights,w
 13621  0A86  0081               	movwf	1
 13622                           
 13623                           ;Dimmer_B1.c: 335: if(!DimmerLights->StatusFlag)
 13624  0A87  086C               	movf	_DimmerLights,w
 13625  0A88  0086               	movwf	6
 13626  0A89  3001               	movlw	1	; select bank2/3
 13627  0A8A  0087               	movwf	7
 13628  0A8B  1B01               	btfsc	1,6
 13629  0A8C  0008               	return
 13630                           
 13631                           ;Dimmer_B1.c: 336: {
 13632                           ;Dimmer_B1.c: 337: DimmerLights->StatusFlag=1;
 13633  0A8D  086C               	movf	_DimmerLights,w
 13634  0A8E  0086               	movwf	6
 13635  0A8F  3001               	movlw	1	; select bank2/3
 13636  0A90  0087               	movwf	7
 13637  0A91  1701               	bsf	1,6
 13638                           
 13639                           ;Dimmer_B1.c: 338: setLoad_StatusOn(lights,1);
 13640  0A92  01A0               	clrf	setLoad_StatusOn@command
 13641  0A93  0AA0               	incf	setLoad_StatusOn@command,f
 13642  0A94  0826               	movf	setDimmerLights@lights,w
 13643  0A95  319D  259F         	fcall	_setLoad_StatusOn
 13644                           
 13645                           ;Dimmer_B1.c: 339: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 13646  0A97  087C               	movf	_Memory,w
 13647  0A98  3E22               	addlw	34
 13648  0A99  0086               	movwf	6
 13649  0A9A  3001               	movlw	1	; select bank2/3
 13650  0A9B  0087               	movwf	7
 13651  0A9C  1081               	bcf	1,1
 13652  0A9D  087C               	movf	_Memory,w
 13653  0A9E  3E23               	addlw	35
 13654  0A9F  0086               	movwf	6
 13655  0AA0  3001               	movlw	1	; select bank2/3
 13656  0AA1  0087               	movwf	7
 13657  0AA2  3000               	movlw	0
 13658  0AA3  3FC0               	movwi [0]fsr1
 13659  0AA4  3FC1               	movwi [1]fsr1
 13660                           
 13661                           ;Dimmer_B1.c: 342: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 13662  0AA5  0020               	movlb	0	; select bank0
 13663  0AA6  086C               	movf	_DimmerLights,w
 13664  0AA7  3E05               	addlw	5
 13665  0AA8  0086               	movwf	6
 13666  0AA9  3001               	movlw	1	; select bank2/3
 13667  0AAA  0087               	movwf	7
 13668  0AAB  0801               	movf	1,w
 13669  0AAC  00A5               	movwf	??_setDimmerLights
 13670  0AAD  086C               	movf	_DimmerLights,w
 13671  0AAE  3E04               	addlw	4
 13672  0AAF  0086               	movwf	6
 13673  0AB0  3001               	movlw	1	; select bank2/3
 13674  0AB1  0087               	movwf	7
 13675  0AB2  0825               	movf	??_setDimmerLights,w
 13676  0AB3  0081               	movwf	1
 13677                           
 13678                           ;Dimmer_B1.c: 346: DimmerLights->DimmingValue=((char)(65*1.5));
 13679  0AB4  3061               	movlw	97
 13680  0AB5  00A5               	movwf	??_setDimmerLights
 13681  0AB6  086C               	movf	_DimmerLights,w
 13682  0AB7  3E04               	addlw	4
 13683  0AB8  0086               	movwf	6
 13684  0AB9  3001               	movlw	1	; select bank2/3
 13685  0ABA  0087               	movwf	7
 13686  0ABB  0825               	movf	??_setDimmerLights,w
 13687  0ABC  0081               	movwf	1
 13688                           
 13689                           ;Dimmer_B1.c: 348: }
 13690                           ;Dimmer_B1.c: 349: }
 13691  0ABD  0008               	return
 13692  0ABE                     l8135:	
 13693                           
 13694                           ;Dimmer_B1.c: 350: else
 13695                           ;Dimmer_B1.c: 351: {
 13696                           ;Dimmer_B1.c: 352: DimmerLights->Status=0;
 13697  0ABE  086C               	movf	_DimmerLights,w
 13698  0ABF  0086               	movwf	6
 13699  0AC0  3001               	movlw	1	; select bank2/3
 13700  0AC1  0087               	movwf	7
 13701  0AC2  1281               	bcf	1,5
 13702                           
 13703                           ;Dimmer_B1.c: 354: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13704  0AC3  086C               	movf	_DimmerLights,w
 13705  0AC4  3E06               	addlw	6
 13706  0AC5  0086               	movwf	6
 13707  0AC6  3001               	movlw	1	; select bank2/3
 13708  0AC7  0087               	movwf	7
 13709  0AC8  0801               	movf	1,w
 13710  0AC9  00A5               	movwf	??_setDimmerLights
 13711  0ACA  086C               	movf	_DimmerLights,w
 13712  0ACB  3E04               	addlw	4
 13713  0ACC  0086               	movwf	6
 13714  0ACD  3001               	movlw	1	; select bank2/3
 13715  0ACE  0087               	movwf	7
 13716  0ACF  0825               	movf	??_setDimmerLights,w
 13717  0AD0  0081               	movwf	1
 13718                           
 13719                           ;Dimmer_B1.c: 359: DimmerLights->MosfetClose=1;
 13720  0AD1  086C               	movf	_DimmerLights,w
 13721  0AD2  3E09               	addlw	9
 13722  0AD3  0086               	movwf	6
 13723  0AD4  3001               	movlw	1	; select bank2/3
 13724  0AD5  0087               	movwf	7
 13725  0AD6  1701               	bsf	1,6
 13726                           
 13727                           ;Dimmer_B1.c: 361: DimmerLights->Signal=1;
 13728  0AD7  086C               	movf	_DimmerLights,w
 13729  0AD8  0086               	movwf	6
 13730  0AD9  3001               	movlw	1	; select bank2/3
 13731  0ADA  0087               	movwf	7
 13732  0ADB  1481               	bsf	1,1
 13733                           
 13734                           ;Dimmer_B1.c: 362: DimmerLights->AdjFlag=0;
 13735  0ADC  086C               	movf	_DimmerLights,w
 13736  0ADD  0086               	movwf	6
 13737  0ADE  3001               	movlw	1	; select bank2/3
 13738  0ADF  0087               	movwf	7
 13739  0AE0  1181               	bcf	1,3
 13740                           
 13741                           ;Dimmer_B1.c: 363: DimmerLights->AdjStatus=0;
 13742  0AE1  086C               	movf	_DimmerLights,w
 13743  0AE2  0086               	movwf	6
 13744  0AE3  3001               	movlw	1	; select bank2/3
 13745  0AE4  0087               	movwf	7
 13746  0AE5  1201               	bcf	1,4
 13747                           
 13748                           ;Dimmer_B1.c: 364: DimmerLights->DimmingTimeValue=3;
 13749  0AE6  3003               	movlw	3
 13750  0AE7  00A5               	movwf	??_setDimmerLights
 13751  0AE8  086C               	movf	_DimmerLights,w
 13752  0AE9  3E02               	addlw	2
 13753  0AEA  0086               	movwf	6
 13754  0AEB  3001               	movlw	1	; select bank2/3
 13755  0AEC  0087               	movwf	7
 13756  0AED  0825               	movf	??_setDimmerLights,w
 13757  0AEE  0081               	movwf	1
 13758  0AEF  0008               	return
 13759  0AF0                     __end_of_setDimmerLights:	
 13760                           
 13761                           	psect	text73
 13762  1D9F                     __ptext73:	
 13763 ;; *************** function _setLoad_StatusOn *****************
 13764 ;; Defined at:
 13765 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13766 ;; Parameters:    Size  Location     Type
 13767 ;;  lights          1    wreg     unsigned char 
 13768 ;;  command         1    0[BANK0 ] unsigned char 
 13769 ;; Auto vars:     Size  Location     Type
 13770 ;;  lights          1    1[BANK0 ] unsigned char 
 13771 ;; Return value:  Size  Location     Type
 13772 ;;		None               void
 13773 ;; Registers used:
 13774 ;;		wreg, fsr1l, fsr1h
 13775 ;; Tracked objects:
 13776 ;;		On entry : 0/0
 13777 ;;		On exit  : 0/0
 13778 ;;		Unchanged: 0/0
 13779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13780 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;Total ram usage:        2 bytes
 13785 ;; Hardware stack levels used:    1
 13786 ;; Hardware stack levels required when called:    4
 13787 ;; This function calls:
 13788 ;;		Nothing
 13789 ;; This function is called by:
 13790 ;;		_setDimmerLights
 13791 ;; This function uses a non-reentrant model
 13792 ;;
 13793                           
 13794                           
 13795                           ;psect for function _setLoad_StatusOn
 13796  1D9F                     _setLoad_StatusOn:	
 13797                           
 13798                           ;incstack = 0
 13799                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 13800                           ;setLoad_StatusOn@lights stored from wreg
 13801  1D9F  0020               	movlb	0	; select bank0
 13802  1DA0  00A1               	movwf	setLoad_StatusOn@lights
 13803                           
 13804                           ;OverLoad_B1.c: 268: Load->GO=1;
 13805  1DA1  086E               	movf	_Load,w
 13806  1DA2  0086               	movwf	6
 13807  1DA3  3002               	movlw	2	; select bank4/5
 13808  1DA4  0087               	movwf	7
 13809  1DA5  1481               	bsf	1,1
 13810                           
 13811                           ;OverLoad_B1.c: 269: Load->StatusOn=command;
 13812  1DA6  086E               	movf	_Load,w
 13813  1DA7  3E46               	addlw	70
 13814  1DA8  0086               	movwf	6
 13815  1DA9  3002               	movlw	2	; select bank4/5
 13816  1DAA  0087               	movwf	7
 13817  1DAB  0820               	movf	setLoad_StatusOn@command,w
 13818  1DAC  1001               	bcf	1,0
 13819  1DAD  1D03               	skipz
 13820  1DAE  1401               	bsf	1,0
 13821                           
 13822                           ;OverLoad_B1.c: 271: if(lights == 1)
 13823  1DAF  0821               	movf	setLoad_StatusOn@lights,w
 13824  1DB0  3A01               	xorlw	1
 13825  1DB1  1D03               	skipz
 13826  1DB2  2DBA               	goto	l8099
 13827                           
 13828                           ;OverLoad_B1.c: 272: {
 13829                           ;OverLoad_B1.c: 273: Load->Lights1Status=1;
 13830  1DB3  086E               	movf	_Load,w
 13831  1DB4  3E43               	addlw	67
 13832  1DB5  0086               	movwf	6
 13833  1DB6  3002               	movlw	2	; select bank4/5
 13834  1DB7  0087               	movwf	7
 13835  1DB8  0181               	clrf	1
 13836  1DB9  0A81               	incf	1,f
 13837  1DBA                     l8099:	
 13838                           
 13839                           ;OverLoad_B1.c: 274: }
 13840                           ;OverLoad_B1.c: 275: if(lights == 2)
 13841  1DBA  0821               	movf	setLoad_StatusOn@lights,w
 13842  1DBB  3A02               	xorlw	2
 13843  1DBC  1D03               	skipz
 13844  1DBD  2DC5               	goto	l8103
 13845                           
 13846                           ;OverLoad_B1.c: 276: {
 13847                           ;OverLoad_B1.c: 277: Load->Lights2Status=1;
 13848  1DBE  086E               	movf	_Load,w
 13849  1DBF  3E44               	addlw	68
 13850  1DC0  0086               	movwf	6
 13851  1DC1  3002               	movlw	2	; select bank4/5
 13852  1DC2  0087               	movwf	7
 13853  1DC3  0181               	clrf	1
 13854  1DC4  0A81               	incf	1,f
 13855  1DC5                     l8103:	
 13856                           
 13857                           ;OverLoad_B1.c: 278: }
 13858                           ;OverLoad_B1.c: 279: if(lights == 3)
 13859  1DC5  0821               	movf	setLoad_StatusOn@lights,w
 13860  1DC6  3A03               	xorlw	3
 13861  1DC7  1D03               	skipz
 13862  1DC8  0008               	return
 13863                           
 13864                           ;OverLoad_B1.c: 280: {
 13865                           ;OverLoad_B1.c: 281: Load->Lights3Status=1;
 13866  1DC9  086E               	movf	_Load,w
 13867  1DCA  3E45               	addlw	69
 13868  1DCB  0086               	movwf	6
 13869  1DCC  3002               	movlw	2	; select bank4/5
 13870  1DCD  0087               	movwf	7
 13871  1DCE  0181               	clrf	1
 13872  1DCF  0A81               	incf	1,f
 13873  1DD0  0008               	return
 13874  1DD1                     __end_of_setLoad_StatusOn:	
 13875                           
 13876                           	psect	text74
 13877  196B                     __ptext74:	
 13878 ;; *************** function _setLoad_Count *****************
 13879 ;; Defined at:
 13880 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 13881 ;; Parameters:    Size  Location     Type
 13882 ;;  command         1    wreg     unsigned char 
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;  command         1    1[BANK0 ] unsigned char 
 13885 ;; Return value:  Size  Location     Type
 13886 ;;		None               void
 13887 ;; Registers used:
 13888 ;;		wreg, fsr1l, fsr1h
 13889 ;; Tracked objects:
 13890 ;;		On entry : 0/0
 13891 ;;		On exit  : 0/0
 13892 ;;		Unchanged: 0/0
 13893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13898 ;;Total ram usage:        2 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; Hardware stack levels required when called:    4
 13901 ;; This function calls:
 13902 ;;		Nothing
 13903 ;; This function is called by:
 13904 ;;		_setDimmerLights
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           
 13909                           ;psect for function _setLoad_Count
 13910  196B                     _setLoad_Count:	
 13911                           
 13912                           ;incstack = 0
 13913                           ; Regs used in _setLoad_Count: [wregfsr1]
 13914                           ;setLoad_Count@command stored from wreg
 13915  196B  0020               	movlb	0	; select bank0
 13916  196C  00A1               	movwf	setLoad_Count@command
 13917                           
 13918                           ;OverLoad_B1.c: 253: Load->Count=command;
 13919  196D  0821               	movf	setLoad_Count@command,w
 13920  196E  00A0               	movwf	??_setLoad_Count
 13921  196F  086E               	movf	_Load,w
 13922  1970  3E3A               	addlw	58
 13923  1971  0086               	movwf	6
 13924  1972  3002               	movlw	2	; select bank4/5
 13925  1973  0087               	movwf	7
 13926  1974  0820               	movf	??_setLoad_Count,w
 13927  1975  0081               	movwf	1
 13928                           
 13929                           ;OverLoad_B1.c: 254: Load->SafeCount=command;
 13930  1976  0821               	movf	setLoad_Count@command,w
 13931  1977  00A0               	movwf	??_setLoad_Count
 13932  1978  086E               	movf	_Load,w
 13933  1979  3E42               	addlw	66
 13934  197A  0086               	movwf	6
 13935  197B  3002               	movlw	2	; select bank4/5
 13936  197C  0087               	movwf	7
 13937  197D  0820               	movf	??_setLoad_Count,w
 13938  197E  0081               	movwf	1
 13939  197F  0008               	return
 13940  1980                     __end_of_setLoad_Count:	
 13941                           
 13942                           	psect	text75
 13943  125D                     __ptext75:	
 13944 ;; *************** function _setLED *****************
 13945 ;; Defined at:
 13946 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 13947 ;; Parameters:    Size  Location     Type
 13948 ;;  led             1    wreg     unsigned char 
 13949 ;;  command         1    2[BANK0 ] unsigned char 
 13950 ;; Auto vars:     Size  Location     Type
 13951 ;;  led             1    3[BANK0 ] unsigned char 
 13952 ;; Return value:  Size  Location     Type
 13953 ;;		None               void
 13954 ;; Registers used:
 13955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13956 ;; Tracked objects:
 13957 ;;		On entry : 0/0
 13958 ;;		On exit  : 0/0
 13959 ;;		Unchanged: 0/0
 13960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13961 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13964 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;Total ram usage:        2 bytes
 13966 ;; Hardware stack levels used:    1
 13967 ;; Hardware stack levels required when called:    5
 13968 ;; This function calls:
 13969 ;;		_LedPointSelect
 13970 ;; This function is called by:
 13971 ;;		_setDimmerLights_ERROR
 13972 ;;		_setDimmerLights
 13973 ;;		_setLED_Initialization
 13974 ;;		_setLoad_Exceptions
 13975 ;;		_setSw_Initialization
 13976 ;; This function uses a non-reentrant model
 13977 ;;
 13978                           
 13979                           
 13980                           ;psect for function _setLED
 13981  125D                     _setLED:	
 13982                           
 13983                           ;incstack = 0
 13984                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13985                           ;setLED@led stored from wreg
 13986  125D  0020               	movlb	0	; select bank0
 13987  125E  00A3               	movwf	setLED@led
 13988                           
 13989                           ;LED_B1.c: 76: LedPointSelect(led);
 13990  125F  0823               	movf	setLED@led,w
 13991  1260  319B  232A  3192   	fcall	_LedPointSelect
 13992                           
 13993                           ;LED_B1.c: 77: if(command == 0)
 13994  1263  0020               	movlb	0	; select bank0
 13995  1264  08A2               	movf	setLED@command,f
 13996  1265  1D03               	skipz
 13997  1266  2A79               	goto	l8059
 13998                           
 13999                           ;LED_B1.c: 78: {
 14000                           ;LED_B1.c: 80: if(led == 1)
 14001  1267  0823               	movf	setLED@led,w
 14002  1268  3A01               	xorlw	1
 14003  1269  1D03               	skipz
 14004  126A  2A6D               	goto	l8051
 14005                           
 14006                           ;LED_B1.c: 81: {
 14007                           ;LED_B1.c: 85: RA3=1;
 14008  126B  158C               	bsf	12,3	;volatile
 14009                           
 14010                           ;LED_B1.c: 87: }
 14011  126C  0008               	return
 14012  126D                     l8051:	
 14013                           
 14014                           ;LED_B1.c: 90: else if(led == 2)
 14015  126D  0823               	movf	setLED@led,w
 14016  126E  3A02               	xorlw	2
 14017  126F  1D03               	skipz
 14018  1270  2A73               	goto	l8055
 14019                           
 14020                           ;LED_B1.c: 91: {
 14021                           ;LED_B1.c: 95: RC7=1;
 14022  1271  178E               	bsf	14,7	;volatile
 14023                           
 14024                           ;LED_B1.c: 97: }
 14025  1272  0008               	return
 14026  1273                     l8055:	
 14027                           
 14028                           ;LED_B1.c: 110: else if(led == 99)
 14029  1273  0823               	movf	setLED@led,w
 14030  1274  3A63               	xorlw	99
 14031  1275  1D03               	skipz
 14032  1276  0008               	return
 14033                           
 14034                           ;LED_B1.c: 111: {
 14035                           ;LED_B1.c: 115: RB5=1;
 14036  1277  168D               	bsf	13,5	;volatile
 14037                           
 14038                           ;LED_B1.c: 117: }
 14039                           ;LED_B1.c: 119: }
 14040  1278  0008               	return
 14041  1279                     l8059:	
 14042                           
 14043                           ;LED_B1.c: 120: else if(command == 1)
 14044  1279  0822               	movf	setLED@command,w
 14045  127A  3A01               	xorlw	1
 14046  127B  1D03               	skipz
 14047  127C  2A8F               	goto	l8073
 14048                           
 14049                           ;LED_B1.c: 121: {
 14050                           ;LED_B1.c: 123: if(led == 1)
 14051  127D  0823               	movf	setLED@led,w
 14052  127E  3A01               	xorlw	1
 14053  127F  1D03               	skipz
 14054  1280  2A83               	goto	l8065
 14055                           
 14056                           ;LED_B1.c: 124: {
 14057                           ;LED_B1.c: 128: RA3=0;
 14058  1281  118C               	bcf	12,3	;volatile
 14059                           
 14060                           ;LED_B1.c: 130: }
 14061  1282  0008               	return
 14062  1283                     l8065:	
 14063                           
 14064                           ;LED_B1.c: 133: else if(led == 2)
 14065  1283  0823               	movf	setLED@led,w
 14066  1284  3A02               	xorlw	2
 14067  1285  1D03               	skipz
 14068  1286  2A89               	goto	l8069
 14069                           
 14070                           ;LED_B1.c: 134: {
 14071                           ;LED_B1.c: 138: RC7=0;
 14072  1287  138E               	bcf	14,7	;volatile
 14073                           
 14074                           ;LED_B1.c: 140: }
 14075  1288  0008               	return
 14076  1289                     l8069:	
 14077                           
 14078                           ;LED_B1.c: 153: else if(led == 99)
 14079  1289  0823               	movf	setLED@led,w
 14080  128A  3A63               	xorlw	99
 14081  128B  1D03               	skipz
 14082  128C  0008               	return
 14083                           
 14084                           ;LED_B1.c: 154: {
 14085                           ;LED_B1.c: 158: RB5=0;
 14086  128D  128D               	bcf	13,5	;volatile
 14087                           
 14088                           ;LED_B1.c: 160: }
 14089                           ;LED_B1.c: 162: }
 14090  128E  0008               	return
 14091  128F                     l8073:	
 14092                           
 14093                           ;LED_B1.c: 163: else if(command == 10)
 14094  128F  0822               	movf	setLED@command,w
 14095  1290  3A0A               	xorlw	10
 14096  1291  1D03               	skipz
 14097  1292  2AB1               	goto	l8089
 14098                           
 14099                           ;LED_B1.c: 164: {
 14100                           ;LED_B1.c: 165: LED->GO=0;
 14101  1293  0021               	movlb	1	; select bank1
 14102  1294  083B               	movf	_LED^(0+128),w
 14103  1295  0086               	movwf	6
 14104  1296  0187               	clrf	7
 14105  1297  1081               	bcf	1,1
 14106                           
 14107                           ;LED_B1.c: 166: LED->Time=0;
 14108  1298  0A3B               	incf	_LED^(0+128),w
 14109  1299  0086               	movwf	6
 14110  129A  0187               	clrf	7
 14111  129B  3000               	movlw	0
 14112  129C  3FC0               	movwi [0]fsr1
 14113  129D  3FC1               	movwi [1]fsr1
 14114                           
 14115                           ;LED_B1.c: 168: if(led == 1)
 14116  129E  0020               	movlb	0	; select bank0
 14117  129F  0823               	movf	setLED@led,w
 14118  12A0  3A01               	xorlw	1
 14119  12A1  1D03               	skipz
 14120  12A2  2AA5               	goto	l8081
 14121                           
 14122                           ;LED_B1.c: 169: {
 14123                           ;LED_B1.c: 173: RA3=1;
 14124  12A3  158C               	bsf	12,3	;volatile
 14125                           
 14126                           ;LED_B1.c: 175: }
 14127  12A4  0008               	return
 14128  12A5                     l8081:	
 14129                           
 14130                           ;LED_B1.c: 178: else if(led == 2)
 14131  12A5  0823               	movf	setLED@led,w
 14132  12A6  3A02               	xorlw	2
 14133  12A7  1D03               	skipz
 14134  12A8  2AAB               	goto	l8085
 14135                           
 14136                           ;LED_B1.c: 179: {
 14137                           ;LED_B1.c: 183: RC7=1;
 14138  12A9  178E               	bsf	14,7	;volatile
 14139                           
 14140                           ;LED_B1.c: 185: }
 14141  12AA  0008               	return
 14142  12AB                     l8085:	
 14143                           
 14144                           ;LED_B1.c: 198: else if(led == 99)
 14145  12AB  0823               	movf	setLED@led,w
 14146  12AC  3A63               	xorlw	99
 14147  12AD  1D03               	skipz
 14148  12AE  0008               	return
 14149                           
 14150                           ;LED_B1.c: 199: {
 14151                           ;LED_B1.c: 203: RB5=1;
 14152  12AF  168D               	bsf	13,5	;volatile
 14153                           
 14154                           ;LED_B1.c: 205: }
 14155                           ;LED_B1.c: 207: }
 14156  12B0  0008               	return
 14157  12B1                     l8089:	
 14158                           
 14159                           ;LED_B1.c: 208: else if(command == 11)
 14160  12B1  0822               	movf	setLED@command,w
 14161  12B2  3A0B               	xorlw	11
 14162  12B3  1D03               	skipz
 14163  12B4  0008               	return
 14164                           
 14165                           ;LED_B1.c: 209: {
 14166                           ;LED_B1.c: 210: LED->GO=1;
 14167  12B5  0021               	movlb	1	; select bank1
 14168  12B6  083B               	movf	_LED^(0+128),w
 14169  12B7  0086               	movwf	6
 14170  12B8  0187               	clrf	7
 14171  12B9  1481               	bsf	1,1
 14172  12BA  0008               	return
 14173  12BB                     __end_of_setLED:	
 14174                           
 14175                           	psect	text76
 14176  1B2A                     __ptext76:	
 14177 ;; *************** function _LedPointSelect *****************
 14178 ;; Defined at:
 14179 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 14180 ;; Parameters:    Size  Location     Type
 14181 ;;  led             1    wreg     unsigned char 
 14182 ;; Auto vars:     Size  Location     Type
 14183 ;;  led             1    1[BANK0 ] unsigned char 
 14184 ;; Return value:  Size  Location     Type
 14185 ;;		None               void
 14186 ;; Registers used:
 14187 ;;		wreg
 14188 ;; Tracked objects:
 14189 ;;		On entry : 0/0
 14190 ;;		On exit  : 0/0
 14191 ;;		Unchanged: 0/0
 14192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;Total ram usage:        2 bytes
 14198 ;; Hardware stack levels used:    1
 14199 ;; Hardware stack levels required when called:    4
 14200 ;; This function calls:
 14201 ;;		Nothing
 14202 ;; This function is called by:
 14203 ;;		_setLED_Initialization
 14204 ;;		_setLED
 14205 ;;		_setLED_Main
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           
 14210                           ;psect for function _LedPointSelect
 14211  1B2A                     _LedPointSelect:	
 14212                           
 14213                           ;incstack = 0
 14214                           ; Regs used in _LedPointSelect: [wreg]
 14215                           ;LedPointSelect@led stored from wreg
 14216  1B2A  0020               	movlb	0	; select bank0
 14217  1B2B  00A1               	movwf	LedPointSelect@led
 14218                           
 14219                           ;LED_B1.c: 10: if(led == 1)
 14220  1B2C  0821               	movf	LedPointSelect@led,w
 14221  1B2D  3A01               	xorlw	1
 14222  1B2E  1D03               	skipz
 14223  1B2F  2B36               	goto	l5975
 14224                           
 14225                           ;LED_B1.c: 11: {
 14226                           ;LED_B1.c: 12: LED=&VarLED1;
 14227  1B30  30D9               	movlw	_VarLED1& (0+255)
 14228  1B31  00A0               	movwf	??_LedPointSelect
 14229  1B32  0820               	movf	??_LedPointSelect,w
 14230  1B33  0021               	movlb	1	; select bank1
 14231  1B34  00BB               	movwf	_LED^(0+128)
 14232                           
 14233                           ;LED_B1.c: 13: }
 14234  1B35  0008               	return
 14235  1B36                     l5975:	
 14236                           
 14237                           ;LED_B1.c: 16: else if(led == 2)
 14238  1B36  0020               	movlb	0	; select bank0
 14239  1B37  0821               	movf	LedPointSelect@led,w
 14240  1B38  3A02               	xorlw	2
 14241  1B39  1D03               	skipz
 14242  1B3A  2B41               	goto	l5979
 14243                           
 14244                           ;LED_B1.c: 17: {
 14245                           ;LED_B1.c: 18: LED=&VarLED2;
 14246  1B3B  30DD               	movlw	_VarLED2& (0+255)
 14247  1B3C  00A0               	movwf	??_LedPointSelect
 14248  1B3D  0820               	movf	??_LedPointSelect,w
 14249  1B3E  0021               	movlb	1	; select bank1
 14250  1B3F  00BB               	movwf	_LED^(0+128)
 14251                           
 14252                           ;LED_B1.c: 19: }
 14253  1B40  0008               	return
 14254  1B41                     l5979:	
 14255                           
 14256                           ;LED_B1.c: 28: else if(led == 99)
 14257  1B41  0020               	movlb	0	; select bank0
 14258  1B42  0821               	movf	LedPointSelect@led,w
 14259  1B43  3A63               	xorlw	99
 14260  1B44  1D03               	skipz
 14261  1B45  0008               	return
 14262                           
 14263                           ;LED_B1.c: 29: {
 14264                           ;LED_B1.c: 30: LED=&VarErrLED;
 14265  1B46  30D5               	movlw	_VarErrLED& (0+255)
 14266  1B47  00A0               	movwf	??_LedPointSelect
 14267  1B48  0820               	movf	??_LedPointSelect,w
 14268  1B49  0021               	movlb	1	; select bank1
 14269  1B4A  00BB               	movwf	_LED^(0+128)
 14270  1B4B  0008               	return
 14271  1B4C                     __end_of_LedPointSelect:	
 14272                           
 14273                           	psect	text77
 14274  1A3D                     __ptext77:	
 14275 ;; *************** function _DimmerLights_Close *****************
 14276 ;; Defined at:
 14277 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14278 ;; Parameters:    Size  Location     Type
 14279 ;;		None
 14280 ;; Auto vars:     Size  Location     Type
 14281 ;;		None
 14282 ;; Return value:  Size  Location     Type
 14283 ;;		None               void
 14284 ;; Registers used:
 14285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14286 ;; Tracked objects:
 14287 ;;		On entry : 0/0
 14288 ;;		On exit  : 0/0
 14289 ;;		Unchanged: 0/0
 14290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14295 ;;Total ram usage:        0 bytes
 14296 ;; Hardware stack levels used:    1
 14297 ;; Hardware stack levels required when called:    5
 14298 ;; This function calls:
 14299 ;;		_getDimmerLights_StatusFlag
 14300 ;;		_setLoad_GO
 14301 ;; This function is called by:
 14302 ;;		_DimmerLights_Main
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           
 14307                           ;psect for function _DimmerLights_Close
 14308  1A3D                     _DimmerLights_Close:	
 14309                           
 14310                           ;Dimmer_B1.c: 94: if(Dimmer->Detect)
 14311                           
 14312                           ;incstack = 0
 14313                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14314  1A3D  0021               	movlb	1	; select bank1
 14315  1A3E  0839               	movf	_Dimmer^(0+128),w
 14316  1A3F  0086               	movwf	6
 14317  1A40  0187               	clrf	7
 14318  1A41  1C01               	btfss	1,0
 14319  1A42  0008               	return
 14320                           
 14321                           ;Dimmer_B1.c: 95: {
 14322                           ;Dimmer_B1.c: 96: Dimmer->Detect=0;
 14323  1A43  0839               	movf	_Dimmer^(0+128),w
 14324  1A44  0086               	movwf	6
 14325  1A45  0187               	clrf	7
 14326  1A46  1001               	bcf	1,0
 14327                           
 14328                           ;Dimmer_B1.c: 97: if(!getDimmerLights_StatusFlag())
 14329  1A47  3199  21AC  319A   	fcall	_getDimmerLights_StatusFlag
 14330  1A4A  3800               	iorlw	0
 14331  1A4B  1D03               	skipz
 14332  1A4C  0008               	return
 14333                           
 14334                           ;Dimmer_B1.c: 98: {
 14335                           ;Dimmer_B1.c: 99: setLoad_GO(0);
 14336  1A4D  3000               	movlw	0
 14337  1A4E  31A7  2752         	fcall	_setLoad_GO
 14338                           
 14339                           ;Dimmer_B1.c: 100: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 14340  1A50  087C               	movf	_Memory,w
 14341  1A51  3E22               	addlw	34
 14342  1A52  0086               	movwf	6
 14343  1A53  3001               	movlw	1	; select bank2/3
 14344  1A54  0087               	movwf	7
 14345  1A55  1481               	bsf	1,1
 14346  1A56  0008               	return
 14347  1A57                     __end_of_DimmerLights_Close:	
 14348                           
 14349                           	psect	text78
 14350  2752                     __ptext78:	
 14351 ;; *************** function _setLoad_GO *****************
 14352 ;; Defined at:
 14353 ;;		line 262 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 14354 ;; Parameters:    Size  Location     Type
 14355 ;;  command         1    wreg     unsigned char 
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;  command         1    0[BANK0 ] unsigned char 
 14358 ;; Return value:  Size  Location     Type
 14359 ;;		None               void
 14360 ;; Registers used:
 14361 ;;		wreg, fsr1l, fsr1h
 14362 ;; Tracked objects:
 14363 ;;		On entry : 0/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;Total ram usage:        1 bytes
 14372 ;; Hardware stack levels used:    1
 14373 ;; Hardware stack levels required when called:    4
 14374 ;; This function calls:
 14375 ;;		Nothing
 14376 ;; This function is called by:
 14377 ;;		_DimmerLights_Close
 14378 ;; This function uses a non-reentrant model
 14379 ;;
 14380                           
 14381                           
 14382                           ;psect for function _setLoad_GO
 14383  2752                     _setLoad_GO:	
 14384                           
 14385                           ;incstack = 0
 14386                           ; Regs used in _setLoad_GO: [wregfsr1]
 14387                           ;setLoad_GO@command stored from wreg
 14388  2752  0020               	movlb	0	; select bank0
 14389  2753  00A0               	movwf	setLoad_GO@command
 14390                           
 14391                           ;OverLoad_B1.c: 264: Load->GO=command;
 14392  2754  086E               	movf	_Load,w
 14393  2755  0086               	movwf	6
 14394  2756  3002               	movlw	2	; select bank4/5
 14395  2757  0087               	movwf	7
 14396  2758  0820               	movf	setLoad_GO@command,w
 14397  2759  1081               	bcf	1,1
 14398  275A  1D03               	skipz
 14399  275B  1481               	bsf	1,1
 14400  275C  0008               	return
 14401  275D                     __end_of_setLoad_GO:	
 14402                           
 14403                           	psect	text79
 14404  19AC                     __ptext79:	
 14405 ;; *************** function _getDimmerLights_StatusFlag *****************
 14406 ;; Defined at:
 14407 ;;		line 199 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14408 ;; Parameters:    Size  Location     Type
 14409 ;;		None
 14410 ;; Auto vars:     Size  Location     Type
 14411 ;;  Status          1    1[BANK0 ] unsigned char 
 14412 ;; Return value:  Size  Location     Type
 14413 ;;                  1    wreg      unsigned char 
 14414 ;; Registers used:
 14415 ;;		wreg, fsr1l, fsr1h, status,2
 14416 ;; Tracked objects:
 14417 ;;		On entry : 0/0
 14418 ;;		On exit  : 0/0
 14419 ;;		Unchanged: 0/0
 14420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;Total ram usage:        3 bytes
 14426 ;; Hardware stack levels used:    1
 14427 ;; Hardware stack levels required when called:    4
 14428 ;; This function calls:
 14429 ;;		Nothing
 14430 ;; This function is called by:
 14431 ;;		_DimmerLights_Close
 14432 ;;		_DimmerLights_Exceptions
 14433 ;; This function uses a non-reentrant model
 14434 ;;
 14435                           
 14436                           
 14437                           ;psect for function _getDimmerLights_StatusFlag
 14438  19AC                     _getDimmerLights_StatusFlag:	
 14439                           
 14440                           ;Dimmer_B1.c: 201: char Status=0;
 14441                           
 14442                           ;incstack = 0
 14443                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 14444  19AC  0020               	movlb	0	; select bank0
 14445  19AD  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14446                           
 14447                           ;Dimmer_B1.c: 208: Status=(DimmerLights11->StatusFlag || DimmerLights22->StatusFlag)?1:0
      +                          ;
 14448  19AE  01A2               	clrf	_getDimmerLights_StatusFlag$1710
 14449  19AF  0AA2               	incf	_getDimmerLights_StatusFlag$1710,f
 14450  19B0  0879               	movf	_DimmerLights11,w
 14451  19B1  0086               	movwf	6
 14452  19B2  3001               	movlw	1	; select bank2/3
 14453  19B3  0087               	movwf	7
 14454  19B4  1B01               	btfsc	1,6
 14455  19B5  29BC               	goto	l6343
 14456  19B6  087A               	movf	_DimmerLights22,w
 14457  19B7  0086               	movwf	6
 14458  19B8  3001               	movlw	1	; select bank2/3
 14459  19B9  0087               	movwf	7
 14460  19BA  1F01               	btfss	1,6
 14461  19BB  01A2               	clrf	_getDimmerLights_StatusFlag$1710
 14462  19BC                     l6343:	
 14463  19BC  0822               	movf	_getDimmerLights_StatusFlag$1710,w
 14464  19BD  00A0               	movwf	??_getDimmerLights_StatusFlag
 14465  19BE  0820               	movf	??_getDimmerLights_StatusFlag,w
 14466  19BF  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14467                           
 14468                           ;Dimmer_B1.c: 215: return Status;
 14469  19C0  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14470  19C1  0008               	return
 14471  19C2                     __end_of_getDimmerLights_StatusFlag:	
 14472                           
 14473                           	psect	text80
 14474  1956                     __ptext80:	
 14475 ;; *************** function _DimmerLights_Initialization *****************
 14476 ;; Defined at:
 14477 ;;		line 32 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14478 ;; Parameters:    Size  Location     Type
 14479 ;;		None
 14480 ;; Auto vars:     Size  Location     Type
 14481 ;;		None
 14482 ;; Return value:  Size  Location     Type
 14483 ;;		None               void
 14484 ;; Registers used:
 14485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14486 ;; Tracked objects:
 14487 ;;		On entry : 0/0
 14488 ;;		On exit  : 0/0
 14489 ;;		Unchanged: 0/0
 14490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;Total ram usage:        1 bytes
 14496 ;; Hardware stack levels used:    1
 14497 ;; Hardware stack levels required when called:    6
 14498 ;; This function calls:
 14499 ;;		_Dimmer_Initialization
 14500 ;;		_setDimmerLights_Initialization
 14501 ;; This function is called by:
 14502 ;;		_main
 14503 ;; This function uses a non-reentrant model
 14504 ;;
 14505                           
 14506                           
 14507                           ;psect for function _DimmerLights_Initialization
 14508  1956                     _DimmerLights_Initialization:	
 14509                           
 14510                           ;Dimmer_B1.c: 35: DimmerLights11=&DimmerLights1;
 14511                           
 14512                           ;incstack = 0
 14513                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14514  1956  3030               	movlw	_DimmerLights1& (0+255)
 14515  1957  0020               	movlb	0	; select bank0
 14516  1958  00A4               	movwf	??_DimmerLights_Initialization
 14517  1959  0824               	movf	??_DimmerLights_Initialization,w
 14518  195A  00F9               	movwf	_DimmerLights11
 14519                           
 14520                           ;Dimmer_B1.c: 36: setDimmerLights_Initialization(1);
 14521  195B  3001               	movlw	1
 14522  195C  319C  2483  3199   	fcall	_setDimmerLights_Initialization
 14523                           
 14524                           ;Dimmer_B1.c: 40: DimmerLights22=&DimmerLights2;
 14525  195F  303F               	movlw	_DimmerLights2& (0+255)
 14526  1960  0020               	movlb	0	; select bank0
 14527  1961  00A4               	movwf	??_DimmerLights_Initialization
 14528  1962  0824               	movf	??_DimmerLights_Initialization,w
 14529  1963  00FA               	movwf	_DimmerLights22
 14530                           
 14531                           ;Dimmer_B1.c: 41: setDimmerLights_Initialization(2);
 14532  1964  3002               	movlw	2
 14533  1965  319C  2483  3199   	fcall	_setDimmerLights_Initialization
 14534                           
 14535                           ;Dimmer_B1.c: 50: Dimmer_Initialization();
 14536  1968  31A6  26EA         	fcall	_Dimmer_Initialization
 14537  196A  0008               	return
 14538  196B                     __end_of_DimmerLights_Initialization:	
 14539                           
 14540                           	psect	text81
 14541  1C83                     __ptext81:	
 14542 ;; *************** function _setDimmerLights_Initialization *****************
 14543 ;; Defined at:
 14544 ;;		line 54 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14545 ;; Parameters:    Size  Location     Type
 14546 ;;  lights          1    wreg     unsigned char 
 14547 ;; Auto vars:     Size  Location     Type
 14548 ;;  lights          1    3[BANK0 ] unsigned char 
 14549 ;; Return value:  Size  Location     Type
 14550 ;;		None               void
 14551 ;; Registers used:
 14552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;Total ram usage:        2 bytes
 14563 ;; Hardware stack levels used:    1
 14564 ;; Hardware stack levels required when called:    5
 14565 ;; This function calls:
 14566 ;;		_DimmerLightsPointSelect
 14567 ;; This function is called by:
 14568 ;;		_DimmerLights_Initialization
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572                           
 14573                           ;psect for function _setDimmerLights_Initialization
 14574  1C83                     _setDimmerLights_Initialization:	
 14575                           
 14576                           ;incstack = 0
 14577                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14578                           ;setDimmerLights_Initialization@lights stored from wreg
 14579  1C83  0020               	movlb	0	; select bank0
 14580  1C84  00A3               	movwf	setDimmerLights_Initialization@lights
 14581                           
 14582                           ;Dimmer_B1.c: 56: DimmerLightsPointSelect(lights);
 14583  1C85  0823               	movf	setDimmerLights_Initialization@lights,w
 14584  1C86  3199  2107         	fcall	_DimmerLightsPointSelect
 14585                           
 14586                           ;Dimmer_B1.c: 57: DimmerLights->Clear=1;
 14587  1C88  0020               	movlb	0	; select bank0
 14588  1C89  086C               	movf	_DimmerLights,w
 14589  1C8A  3E0C               	addlw	12
 14590  1C8B  0086               	movwf	6
 14591  1C8C  3001               	movlw	1	; select bank2/3
 14592  1C8D  0087               	movwf	7
 14593  1C8E  1401               	bsf	1,0
 14594                           
 14595                           ;Dimmer_B1.c: 63: DimmerLights->MaxmumValue=((char)(65*1.5));
 14596  1C8F  3061               	movlw	97
 14597  1C90  00A2               	movwf	??_setDimmerLights_Initialization
 14598  1C91  086C               	movf	_DimmerLights,w
 14599  1C92  3E05               	addlw	5
 14600  1C93  0086               	movwf	6
 14601  1C94  3001               	movlw	1	; select bank2/3
 14602  1C95  0087               	movwf	7
 14603  1C96  0822               	movf	??_setDimmerLights_Initialization,w
 14604  1C97  0081               	movwf	1
 14605                           
 14606                           ;Dimmer_B1.c: 64: DimmerLights->MinimumValue=((char)(20*1.5));
 14607  1C98  301E               	movlw	30
 14608  1C99  00A2               	movwf	??_setDimmerLights_Initialization
 14609  1C9A  086C               	movf	_DimmerLights,w
 14610  1C9B  3E06               	addlw	6
 14611  1C9C  0086               	movwf	6
 14612  1C9D  3001               	movlw	1	; select bank2/3
 14613  1C9E  0087               	movwf	7
 14614  1C9F  0822               	movf	??_setDimmerLights_Initialization,w
 14615  1CA0  0081               	movwf	1
 14616                           
 14617                           ;Dimmer_B1.c: 78: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 14618  1CA1  086C               	movf	_DimmerLights,w
 14619  1CA2  3E05               	addlw	5
 14620  1CA3  0086               	movwf	6
 14621  1CA4  3001               	movlw	1	; select bank2/3
 14622  1CA5  0087               	movwf	7
 14623  1CA6  0801               	movf	1,w
 14624  1CA7  00A2               	movwf	??_setDimmerLights_Initialization
 14625  1CA8  086C               	movf	_DimmerLights,w
 14626  1CA9  3E04               	addlw	4
 14627  1CAA  0086               	movwf	6
 14628  1CAB  3001               	movlw	1	; select bank2/3
 14629  1CAC  0087               	movwf	7
 14630  1CAD  0822               	movf	??_setDimmerLights_Initialization,w
 14631  1CAE  0081               	movwf	1
 14632  1CAF  0008               	return
 14633  1CB0                     __end_of_setDimmerLights_Initialization:	
 14634                           
 14635                           	psect	text82
 14636  26EA                     __ptext82:	
 14637 ;; *************** function _Dimmer_Initialization *****************
 14638 ;; Defined at:
 14639 ;;		line 511 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;		None
 14642 ;; Auto vars:     Size  Location     Type
 14643 ;;		None
 14644 ;; Return value:  Size  Location     Type
 14645 ;;		None               void
 14646 ;; Registers used:
 14647 ;;		wreg
 14648 ;; Tracked objects:
 14649 ;;		On entry : 0/0
 14650 ;;		On exit  : 0/0
 14651 ;;		Unchanged: 0/0
 14652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14656 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;Total ram usage:        1 bytes
 14658 ;; Hardware stack levels used:    1
 14659 ;; Hardware stack levels required when called:    4
 14660 ;; This function calls:
 14661 ;;		Nothing
 14662 ;; This function is called by:
 14663 ;;		_DimmerLights_Initialization
 14664 ;; This function uses a non-reentrant model
 14665 ;;
 14666                           
 14667                           
 14668                           ;psect for function _Dimmer_Initialization
 14669  26EA                     _Dimmer_Initialization:	
 14670                           
 14671                           ;Dimmer_B1.c: 513: Dimmer=&Dimmer1;
 14672                           
 14673                           ;incstack = 0
 14674                           ; Regs used in _Dimmer_Initialization: [wreg]
 14675  26EA  30E1               	movlw	_Dimmer1& (0+255)
 14676  26EB  0020               	movlb	0	; select bank0
 14677  26EC  00A0               	movwf	??_Dimmer_Initialization
 14678  26ED  0820               	movf	??_Dimmer_Initialization,w
 14679  26EE  0021               	movlb	1	; select bank1
 14680  26EF  00B9               	movwf	_Dimmer^(0+128)
 14681  26F0  0008               	return
 14682  26F1                     __end_of_Dimmer_Initialization:	
 14683                           
 14684                           	psect	text83
 14685  2707                     __ptext83:	
 14686 ;; *************** function _DelayOff_Main *****************
 14687 ;; Defined at:
 14688 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;		None
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;		None
 14693 ;; Return value:  Size  Location     Type
 14694 ;;		None               void
 14695 ;; Registers used:
 14696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14697 ;; Tracked objects:
 14698 ;;		On entry : 0/0
 14699 ;;		On exit  : 0/0
 14700 ;;		Unchanged: 0/0
 14701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;Total ram usage:        0 bytes
 14707 ;; Hardware stack levels used:    1
 14708 ;; Hardware stack levels required when called:    9
 14709 ;; This function calls:
 14710 ;;		_DlyOff_Main
 14711 ;; This function is called by:
 14712 ;;		_main
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           
 14717                           ;psect for function _DelayOff_Main
 14718  2707                     _DelayOff_Main:	
 14719                           
 14720                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 14721                           
 14722                           ;incstack = 0
 14723                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14724  2707  3001               	movlw	1
 14725  2708  3196  267B  31A7   	fcall	_DlyOff_Main
 14726                           
 14727                           ;DelayOff_B1.c: 52: DlyOff_Main(2);
 14728  270B  3002               	movlw	2
 14729  270C  3196  267B         	fcall	_DlyOff_Main
 14730  270E  0008               	return
 14731  270F                     __end_of_DelayOff_Main:	
 14732                           
 14733                           	psect	text84
 14734  167B                     __ptext84:	
 14735 ;; *************** function _DlyOff_Main *****************
 14736 ;; Defined at:
 14737 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 14738 ;; Parameters:    Size  Location     Type
 14739 ;;  sw              1    wreg     unsigned char 
 14740 ;; Auto vars:     Size  Location     Type
 14741 ;;  sw              1   68[BANK0 ] unsigned char 
 14742 ;; Return value:  Size  Location     Type
 14743 ;;		None               void
 14744 ;; Registers used:
 14745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14746 ;; Tracked objects:
 14747 ;;		On entry : 0/0
 14748 ;;		On exit  : 0/0
 14749 ;;		Unchanged: 0/0
 14750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14753 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14754 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;Total ram usage:        3 bytes
 14756 ;; Hardware stack levels used:    1
 14757 ;; Hardware stack levels required when called:    8
 14758 ;; This function calls:
 14759 ;;		_DelayOffPointSelect
 14760 ;;		_setBuz
 14761 ;;		_setDimmerLights_Switch
 14762 ;;		_setDimmerLights_Trigger
 14763 ;;		_setRFSW_Status
 14764 ;;		_setRF_DimmerLights
 14765 ;;		_setSw_Status
 14766 ;;		_setTxData
 14767 ;; This function is called by:
 14768 ;;		_DelayOff_Main
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772                           
 14773                           ;psect for function _DlyOff_Main
 14774  167B                     _DlyOff_Main:	
 14775                           
 14776                           ;incstack = 0
 14777                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14778                           ;DlyOff_Main@sw stored from wreg
 14779  167B  0020               	movlb	0	; select bank0
 14780  167C  00E4               	movwf	DlyOff_Main@sw
 14781                           
 14782                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 14783  167D  0864               	movf	DlyOff_Main@sw,w
 14784  167E  3199  21C2  3196   	fcall	_DelayOffPointSelect
 14785                           
 14786                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 14787  1681  0021               	movlb	1	; select bank1
 14788  1682  0838               	movf	_DelayOff^(0+128),w
 14789  1683  0086               	movwf	6
 14790  1684  0187               	clrf	7
 14791  1685  1C81               	btfss	1,1
 14792  1686  0008               	return
 14793                           
 14794                           ;DelayOff_B1.c: 70: {
 14795                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 14796  1687  0838               	movf	_DelayOff^(0+128),w
 14797  1688  3E02               	addlw	2
 14798  1689  0086               	movwf	6
 14799  168A  0187               	clrf	7
 14800  168B  3001               	movlw	1
 14801  168C  0781               	addwf	1,f
 14802  168D  3141               	addfsr 1,1
 14803  168E  1803               	skipnc
 14804  168F  0A81               	incf	1,f
 14805                           
 14806                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5650)
 14807  1690  0838               	movf	_DelayOff^(0+128),w
 14808  1691  3E02               	addlw	2
 14809  1692  0086               	movwf	6
 14810  1693  0187               	clrf	7
 14811  1694  3F40               	moviw [0]fsr1
 14812  1695  0020               	movlb	0	; select bank0
 14813  1696  00E2               	movwf	??_DlyOff_Main
 14814  1697  3F41               	moviw [1]fsr1
 14815  1698  00E3               	movwf	??_DlyOff_Main+1
 14816  1699  3016               	movlw	22
 14817  169A  0263               	subwf	??_DlyOff_Main+1,w
 14818  169B  3012               	movlw	18
 14819  169C  1903               	skipnz
 14820  169D  0262               	subwf	??_DlyOff_Main,w
 14821  169E  1C03               	skipc
 14822  169F  0008               	return
 14823                           
 14824                           ;DelayOff_B1.c: 73: {
 14825                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 14826  16A0  0021               	movlb	1	; select bank1
 14827  16A1  0838               	movf	_DelayOff^(0+128),w
 14828  16A2  3E02               	addlw	2
 14829  16A3  0086               	movwf	6
 14830  16A4  0187               	clrf	7
 14831  16A5  3000               	movlw	0
 14832  16A6  3FC0               	movwi [0]fsr1
 14833  16A7  3FC1               	movwi [1]fsr1
 14834                           
 14835                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 14836  16A8  3001               	movlw	1
 14837  16A9  0020               	movlb	0	; select bank0
 14838  16AA  00E2               	movwf	??_DlyOff_Main
 14839  16AB  0021               	movlb	1	; select bank1
 14840  16AC  0838               	movf	_DelayOff^(0+128),w
 14841  16AD  3E04               	addlw	4
 14842  16AE  0086               	movwf	6
 14843  16AF  0187               	clrf	7
 14844  16B0  0020               	movlb	0	; select bank0
 14845  16B1  0862               	movf	??_DlyOff_Main,w
 14846  16B2  0781               	addwf	1,f
 14847                           
 14848                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 14849  16B3  0021               	movlb	1	; select bank1
 14850  16B4  0838               	movf	_DelayOff^(0+128),w
 14851  16B5  3E04               	addlw	4
 14852  16B6  0086               	movwf	6
 14853  16B7  0187               	clrf	7
 14854  16B8  0A38               	incf	_DelayOff^(0+128),w
 14855  16B9  0084               	movwf	4
 14856  16BA  0185               	clrf	5
 14857  16BB  0800               	movf	0,w
 14858  16BC  0201               	subwf	1,w
 14859  16BD  1C03               	skipc
 14860  16BE  0008               	return
 14861                           
 14862                           ;DelayOff_B1.c: 77: {
 14863                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 14864  16BF  0838               	movf	_DelayOff^(0+128),w
 14865  16C0  3E04               	addlw	4
 14866  16C1  0086               	movwf	6
 14867  16C2  0187               	clrf	7
 14868  16C3  0181               	clrf	1
 14869                           
 14870                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 14871  16C4  0838               	movf	_DelayOff^(0+128),w
 14872  16C5  0086               	movwf	6
 14873  16C6  0187               	clrf	7
 14874  16C7  1081               	bcf	1,1
 14875                           
 14876                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 14877  16C8  0020               	movlb	0	; select bank0
 14878  16C9  01A2               	clrf	setSw_Status@command
 14879  16CA  0864               	movf	DlyOff_Main@sw,w
 14880  16CB  3198  2077  3196   	fcall	_setSw_Status
 14881                           
 14882                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 14883  16CE  0020               	movlb	0	; select bank0
 14884  16CF  01A2               	clrf	setRFSW_Status@command
 14885  16D0  0864               	movf	DlyOff_Main@sw,w
 14886  16D1  3198  2068  3196   	fcall	_setRFSW_Status
 14887                           
 14888                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 14889  16D4  0020               	movlb	0	; select bank0
 14890  16D5  01DD               	clrf	setRF_DimmerLights@on
 14891  16D6  0864               	movf	DlyOff_Main@sw,w
 14892  16D7  3194  2449  3196   	fcall	_setRF_DimmerLights
 14893                           
 14894                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 14895  16DA  0020               	movlb	0	; select bank0
 14896  16DB  01A2               	clrf	setDimmerLights_Trigger@command
 14897  16DC  0AA2               	incf	setDimmerLights_Trigger@command,f
 14898  16DD  0864               	movf	DlyOff_Main@sw,w
 14899  16DE  3198  20A6  3196   	fcall	_setDimmerLights_Trigger
 14900                           
 14901                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 14902  16E1  0020               	movlb	0	; select bank0
 14903  16E2  01A2               	clrf	setDimmerLights_Switch@command
 14904  16E3  0864               	movf	DlyOff_Main@sw,w
 14905  16E4  3198  2096  3196   	fcall	_setDimmerLights_Switch
 14906                           
 14907                           ;DelayOff_B1.c: 85: setTxData(1);
 14908  16E7  3001               	movlw	1
 14909  16E8  318C  24F5  3196   	fcall	_setTxData
 14910                           
 14911                           ;DelayOff_B1.c: 86: setBuz(1,100);
 14912  16EB  3064               	movlw	100
 14913  16EC  0020               	movlb	0	; select bank0
 14914  16ED  00A6               	movwf	setBuz@time
 14915  16EE  3000               	movlw	0
 14916  16EF  00A7               	movwf	setBuz@time+1
 14917  16F0  3001               	movlw	1
 14918  16F1  3196  2604         	fcall	_setBuz
 14919  16F3  0008               	return
 14920  16F4                     __end_of_DlyOff_Main:	
 14921                           
 14922                           	psect	text85
 14923  0CF5                     __ptext85:	
 14924 ;; *************** function _setTxData *****************
 14925 ;; Defined at:
 14926 ;;		line 140 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 14927 ;; Parameters:    Size  Location     Type
 14928 ;;  rf              1    wreg     unsigned char 
 14929 ;; Auto vars:     Size  Location     Type
 14930 ;;  rf              1    3[BANK0 ] unsigned char 
 14931 ;;  i               1    0        unsigned char 
 14932 ;; Return value:  Size  Location     Type
 14933 ;;		None               void
 14934 ;; Registers used:
 14935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14936 ;; Tracked objects:
 14937 ;;		On entry : 0/0
 14938 ;;		On exit  : 0/0
 14939 ;;		Unchanged: 0/0
 14940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;Total ram usage:        2 bytes
 14946 ;; Hardware stack levels used:    1
 14947 ;; Hardware stack levels required when called:    5
 14948 ;; This function calls:
 14949 ;;		_RfPointSelect
 14950 ;; This function is called by:
 14951 ;;		_DlyOff_Main
 14952 ;;		_setDimmerLights_Adj
 14953 ;;		_setControl_Lights_Table
 14954 ;;		_setRFSW_Control
 14955 ;;		_setRFSW_AdjControl
 14956 ;;		_Sw_DimmerOnFunc
 14957 ;;		_Sw_DimmerOffFunc
 14958 ;; This function uses a non-reentrant model
 14959 ;;
 14960                           
 14961                           
 14962                           ;psect for function _setTxData
 14963  0CF5                     _setTxData:	
 14964                           
 14965                           ;incstack = 0
 14966                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14967                           ;setTxData@rf stored from wreg
 14968  0CF5  0020               	movlb	0	; select bank0
 14969  0CF6  00A3               	movwf	setTxData@rf
 14970                           
 14971                           ;RF_Control_B1.c: 142: char i;
 14972                           ;RF_Control_B1.c: 143: RfPointSelect(rf);
 14973  0CF7  0823               	movf	setTxData@rf,w
 14974  0CF8  31A7  2747  318C   	fcall	_RfPointSelect
 14975                           
 14976                           ;RF_Control_B1.c: 144: if(RF->Enable)
 14977  0CFB  087B               	movf	_RF,w
 14978  0CFC  0086               	movwf	6
 14979  0CFD  0187               	clrf	7
 14980  0CFE  1C01               	btfss	1,0
 14981  0CFF  0008               	return
 14982                           
 14983                           ;RF_Control_B1.c: 145: {
 14984                           ;RF_Control_B1.c: 147: if(!RF->TransceiveGO)
 14985  0D00  087B               	movf	_RF,w
 14986  0D01  0086               	movwf	6
 14987  0D02  0187               	clrf	7
 14988  0D03  1901               	btfsc	1,2
 14989  0D04  0008               	return
 14990                           
 14991                           ;RF_Control_B1.c: 148: {
 14992                           ;RF_Control_B1.c: 149: RF->TransceiveGO=1;
 14993  0D05  087B               	movf	_RF,w
 14994  0D06  0086               	movwf	6
 14995  0D07  0187               	clrf	7
 14996  0D08  1501               	bsf	1,2
 14997                           
 14998                           ;RF_Control_B1.c: 158: RF_Data[0]=0x63;
 14999  0D09  3063               	movlw	99
 15000  0D0A  0020               	movlb	0	; select bank0
 15001  0D0B  00A2               	movwf	??_setTxData
 15002  0D0C  0822               	movf	??_setTxData,w
 15003  0D0D  0021               	movlb	1	; select bank1
 15004  0D0E  00A0               	movwf	_RF_Data^(0+128)
 15005                           
 15006                           ;RF_Control_B1.c: 159: RF_Data[1]=0x02;
 15007  0D0F  3002               	movlw	2
 15008  0D10  0020               	movlb	0	; select bank0
 15009  0D11  00A2               	movwf	??_setTxData
 15010  0D12  0822               	movf	??_setTxData,w
 15011  0D13  0021               	movlb	1	; select bank1
 15012  0D14  00A1               	movwf	(_RF_Data^(0+128)+1)
 15013                           
 15014                           ;RF_Control_B1.c: 160: RF_Data[2]=Product->Data[2];
 15015  0D15  0020               	movlb	0	; select bank0
 15016  0D16  086F               	movf	_Product,w
 15017  0D17  0086               	movwf	6
 15018  0D18  3001               	movlw	1	; select bank2/3
 15019  0D19  0087               	movwf	7
 15020  0D1A  3001               	movlw	1	; select bank2/3
 15021  0D1B  3F42               	moviw [2]fsr1
 15022  0D1C  0021               	movlb	1	; select bank1
 15023  0D1D  00A2               	movwf	(_RF_Data^(0+128)+2)
 15024                           
 15025                           ;RF_Control_B1.c: 161: RF_Data[3]=Product->Data[3];
 15026  0D1E  0020               	movlb	0	; select bank0
 15027  0D1F  086F               	movf	_Product,w
 15028  0D20  0086               	movwf	6
 15029  0D21  3001               	movlw	1	; select bank2/3
 15030  0D22  0087               	movwf	7
 15031  0D23  3001               	movlw	1	; select bank2/3
 15032  0D24  3F43               	moviw [3]fsr1
 15033  0D25  0021               	movlb	1	; select bank1
 15034  0D26  00A3               	movwf	(_RF_Data^(0+128)+3)
 15035                           
 15036                           ;RF_Control_B1.c: 162: RF_Data[4]=Product->Data[4];
 15037  0D27  0020               	movlb	0	; select bank0
 15038  0D28  086F               	movf	_Product,w
 15039  0D29  0086               	movwf	6
 15040  0D2A  3001               	movlw	1	; select bank2/3
 15041  0D2B  0087               	movwf	7
 15042  0D2C  3001               	movlw	1	; select bank2/3
 15043  0D2D  3F44               	moviw [4]fsr1
 15044  0D2E  0021               	movlb	1	; select bank1
 15045  0D2F  00A4               	movwf	(_RF_Data^(0+128)+4)
 15046                           
 15047                           ;RF_Control_B1.c: 163: RF_Data[5]=Product->Data[5];
 15048  0D30  0020               	movlb	0	; select bank0
 15049  0D31  086F               	movf	_Product,w
 15050  0D32  0086               	movwf	6
 15051  0D33  3001               	movlw	1	; select bank2/3
 15052  0D34  0087               	movwf	7
 15053  0D35  3001               	movlw	1	; select bank2/3
 15054  0D36  3F45               	moviw [5]fsr1
 15055  0D37  0021               	movlb	1	; select bank1
 15056  0D38  00A5               	movwf	(_RF_Data^(0+128)+5)
 15057                           
 15058                           ;RF_Control_B1.c: 164: RF_Data[6]=Product->Data[6];
 15059  0D39  0020               	movlb	0	; select bank0
 15060  0D3A  086F               	movf	_Product,w
 15061  0D3B  0086               	movwf	6
 15062  0D3C  3001               	movlw	1	; select bank2/3
 15063  0D3D  0087               	movwf	7
 15064  0D3E  3001               	movlw	1	; select bank2/3
 15065  0D3F  3F46               	moviw [6]fsr1
 15066  0D40  0021               	movlb	1	; select bank1
 15067  0D41  00A6               	movwf	(_RF_Data^(0+128)+6)
 15068                           
 15069                           ;RF_Control_B1.c: 165: RF_Data[7]=Product->Data[7];
 15070  0D42  0020               	movlb	0	; select bank0
 15071  0D43  086F               	movf	_Product,w
 15072  0D44  0086               	movwf	6
 15073  0D45  3001               	movlw	1	; select bank2/3
 15074  0D46  0087               	movwf	7
 15075  0D47  3001               	movlw	1	; select bank2/3
 15076  0D48  3F47               	moviw [7]fsr1
 15077  0D49  0021               	movlb	1	; select bank1
 15078  0D4A  00A7               	movwf	(_RF_Data^(0+128)+7)
 15079                           
 15080                           ;RF_Control_B1.c: 166: RF_Data[8]=Product->Data[8];
 15081  0D4B  0020               	movlb	0	; select bank0
 15082  0D4C  086F               	movf	_Product,w
 15083  0D4D  0086               	movwf	6
 15084  0D4E  3001               	movlw	1	; select bank2/3
 15085  0D4F  0087               	movwf	7
 15086  0D50  3001               	movlw	1	; select bank2/3
 15087  0D51  3F48               	moviw [8]fsr1
 15088  0D52  0021               	movlb	1	; select bank1
 15089  0D53  00A8               	movwf	(_RF_Data^(0+128)+8)
 15090                           
 15091                           ;RF_Control_B1.c: 167: RF_Data[9]=Product->Data[9];
 15092  0D54  0020               	movlb	0	; select bank0
 15093  0D55  086F               	movf	_Product,w
 15094  0D56  0086               	movwf	6
 15095  0D57  3001               	movlw	1	; select bank2/3
 15096  0D58  0087               	movwf	7
 15097  0D59  3001               	movlw	1	; select bank2/3
 15098  0D5A  3F49               	moviw [9]fsr1
 15099  0D5B  0021               	movlb	1	; select bank1
 15100  0D5C  00A9               	movwf	(_RF_Data^(0+128)+9)
 15101                           
 15102                           ;RF_Control_B1.c: 168: RF_Data[10]=Product->Data[10];
 15103  0D5D  0020               	movlb	0	; select bank0
 15104  0D5E  086F               	movf	_Product,w
 15105  0D5F  0086               	movwf	6
 15106  0D60  3001               	movlw	1	; select bank2/3
 15107  0D61  0087               	movwf	7
 15108  0D62  3001               	movlw	1	; select bank2/3
 15109  0D63  3F4A               	moviw [10]fsr1
 15110  0D64  0021               	movlb	1	; select bank1
 15111  0D65  00AA               	movwf	(_RF_Data^(0+128)+10)
 15112                           
 15113                           ;RF_Control_B1.c: 169: RF_Data[11]=Product->Data[11];
 15114  0D66  0020               	movlb	0	; select bank0
 15115  0D67  086F               	movf	_Product,w
 15116  0D68  0086               	movwf	6
 15117  0D69  3001               	movlw	1	; select bank2/3
 15118  0D6A  0087               	movwf	7
 15119  0D6B  3001               	movlw	1	; select bank2/3
 15120  0D6C  3F4B               	moviw [11]fsr1
 15121  0D6D  0021               	movlb	1	; select bank1
 15122  0D6E  00AB               	movwf	(_RF_Data^(0+128)+11)
 15123                           
 15124                           ;RF_Control_B1.c: 170: RF_Data[12]=Product->Data[12];
 15125  0D6F  0020               	movlb	0	; select bank0
 15126  0D70  086F               	movf	_Product,w
 15127  0D71  0086               	movwf	6
 15128  0D72  3001               	movlw	1	; select bank2/3
 15129  0D73  0087               	movwf	7
 15130  0D74  3001               	movlw	1	; select bank2/3
 15131  0D75  3F4C               	moviw [12]fsr1
 15132  0D76  0021               	movlb	1	; select bank1
 15133  0D77  00AC               	movwf	(_RF_Data^(0+128)+12)
 15134                           
 15135                           ;RF_Control_B1.c: 171: RF_Data[13]=Product->Data[13];
 15136  0D78  0020               	movlb	0	; select bank0
 15137  0D79  086F               	movf	_Product,w
 15138  0D7A  0086               	movwf	6
 15139  0D7B  3001               	movlw	1	; select bank2/3
 15140  0D7C  0087               	movwf	7
 15141  0D7D  3001               	movlw	1	; select bank2/3
 15142  0D7E  3F4D               	moviw [13]fsr1
 15143  0D7F  0021               	movlb	1	; select bank1
 15144  0D80  00AD               	movwf	(_RF_Data^(0+128)+13)
 15145                           
 15146                           ;RF_Control_B1.c: 172: RF_Data[14]=Product->Data[14];
 15147  0D81  0020               	movlb	0	; select bank0
 15148  0D82  086F               	movf	_Product,w
 15149  0D83  0086               	movwf	6
 15150  0D84  3001               	movlw	1	; select bank2/3
 15151  0D85  0087               	movwf	7
 15152  0D86  3001               	movlw	1	; select bank2/3
 15153  0D87  3F4E               	moviw [14]fsr1
 15154  0D88  0021               	movlb	1	; select bank1
 15155  0D89  00AE               	movwf	(_RF_Data^(0+128)+14)
 15156                           
 15157                           ;RF_Control_B1.c: 173: RF_Data[15]=Product->Data[15];
 15158  0D8A  0020               	movlb	0	; select bank0
 15159  0D8B  086F               	movf	_Product,w
 15160  0D8C  0086               	movwf	6
 15161  0D8D  3001               	movlw	1	; select bank2/3
 15162  0D8E  0087               	movwf	7
 15163  0D8F  3001               	movlw	1	; select bank2/3
 15164  0D90  3F4F               	moviw [15]fsr1
 15165  0D91  0021               	movlb	1	; select bank1
 15166  0D92  00AF               	movwf	(_RF_Data^(0+128)+15)
 15167                           
 15168                           ;RF_Control_B1.c: 174: RF_Data[16]=Product->Data[16];
 15169  0D93  0020               	movlb	0	; select bank0
 15170  0D94  086F               	movf	_Product,w
 15171  0D95  0086               	movwf	6
 15172  0D96  3001               	movlw	1	; select bank2/3
 15173  0D97  0087               	movwf	7
 15174  0D98  3001               	movlw	1	; select bank2/3
 15175  0D99  3F50               	moviw [16]fsr1
 15176  0D9A  0021               	movlb	1	; select bank1
 15177  0D9B  00B0               	movwf	(_RF_Data^(0+128)+16)
 15178                           
 15179                           ;RF_Control_B1.c: 175: RF_Data[17]=Product->Data[17];
 15180  0D9C  0020               	movlb	0	; select bank0
 15181  0D9D  086F               	movf	_Product,w
 15182  0D9E  0086               	movwf	6
 15183  0D9F  3001               	movlw	1	; select bank2/3
 15184  0DA0  0087               	movwf	7
 15185  0DA1  3001               	movlw	1	; select bank2/3
 15186  0DA2  3F51               	moviw [17]fsr1
 15187  0DA3  0021               	movlb	1	; select bank1
 15188  0DA4  00B1               	movwf	(_RF_Data^(0+128)+17)
 15189                           
 15190                           ;RF_Control_B1.c: 176: RF_Data[18]=Product->Data[18];
 15191  0DA5  0020               	movlb	0	; select bank0
 15192  0DA6  086F               	movf	_Product,w
 15193  0DA7  0086               	movwf	6
 15194  0DA8  3001               	movlw	1	; select bank2/3
 15195  0DA9  0087               	movwf	7
 15196  0DAA  3001               	movlw	1	; select bank2/3
 15197  0DAB  3F52               	moviw [18]fsr1
 15198  0DAC  0021               	movlb	1	; select bank1
 15199  0DAD  00B2               	movwf	(_RF_Data^(0+128)+18)
 15200                           
 15201                           ;RF_Control_B1.c: 177: RF_Data[19]=Product->Data[19];
 15202  0DAE  0020               	movlb	0	; select bank0
 15203  0DAF  086F               	movf	_Product,w
 15204  0DB0  0086               	movwf	6
 15205  0DB1  3001               	movlw	1	; select bank2/3
 15206  0DB2  0087               	movwf	7
 15207  0DB3  3001               	movlw	1	; select bank2/3
 15208  0DB4  3F53               	moviw [19]fsr1
 15209  0DB5  0021               	movlb	1	; select bank1
 15210  0DB6  00B3               	movwf	(_RF_Data^(0+128)+19)
 15211                           
 15212                           ;RF_Control_B1.c: 178: RF_Data[20]=2;
 15213  0DB7  3002               	movlw	2
 15214  0DB8  0020               	movlb	0	; select bank0
 15215  0DB9  00A2               	movwf	??_setTxData
 15216  0DBA  0822               	movf	??_setTxData,w
 15217  0DBB  0021               	movlb	1	; select bank1
 15218  0DBC  00B4               	movwf	(_RF_Data^(0+128)+20)
 15219  0DBD  0008               	return
 15220  0DBE                     __end_of_setTxData:	
 15221                           
 15222                           	psect	text86
 15223  2747                     __ptext86:	
 15224 ;; *************** function _RfPointSelect *****************
 15225 ;; Defined at:
 15226 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 15227 ;; Parameters:    Size  Location     Type
 15228 ;;  rf              1    wreg     unsigned char 
 15229 ;; Auto vars:     Size  Location     Type
 15230 ;;  rf              1    1[BANK0 ] unsigned char 
 15231 ;; Return value:  Size  Location     Type
 15232 ;;		None               void
 15233 ;; Registers used:
 15234 ;;		wreg
 15235 ;; Tracked objects:
 15236 ;;		On entry : 0/0
 15237 ;;		On exit  : 0/0
 15238 ;;		Unchanged: 0/0
 15239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;Total ram usage:        2 bytes
 15245 ;; Hardware stack levels used:    1
 15246 ;; Hardware stack levels required when called:    4
 15247 ;; This function calls:
 15248 ;;		Nothing
 15249 ;; This function is called by:
 15250 ;;		_setRF_Learn
 15251 ;;		_setRF_RxStatus
 15252 ;;		_setRF_Main
 15253 ;;		_setTxData
 15254 ;;		_setRF_Enable
 15255 ;;		_RF_RxDisable
 15256 ;;		_getRxData
 15257 ;;		_setLog_Code
 15258 ;;		_setControl_Lights_Table
 15259 ;; This function uses a non-reentrant model
 15260 ;;
 15261                           
 15262                           
 15263                           ;psect for function _RfPointSelect
 15264  2747                     _RfPointSelect:	
 15265                           
 15266                           ;incstack = 0
 15267                           ; Regs used in _RfPointSelect: [wreg]
 15268                           ;RfPointSelect@rf stored from wreg
 15269  2747  0020               	movlb	0	; select bank0
 15270  2748  00A1               	movwf	RfPointSelect@rf
 15271                           
 15272                           ;RF_Control_B1.c: 10: if(rf == 1)
 15273  2749  0821               	movf	RfPointSelect@rf,w
 15274  274A  3A01               	xorlw	1
 15275  274B  1D03               	skipz
 15276  274C  0008               	return
 15277                           
 15278                           ;RF_Control_B1.c: 11: {
 15279                           ;RF_Control_B1.c: 12: RF=&RF1;
 15280  274D  30E4               	movlw	_RF1& (0+255)
 15281  274E  00A0               	movwf	??_RfPointSelect
 15282  274F  0820               	movf	??_RfPointSelect,w
 15283  2750  00FB               	movwf	_RF
 15284  2751  0008               	return
 15285  2752                     __end_of_RfPointSelect:	
 15286                           
 15287                           	psect	text87
 15288  1877                     __ptext87:	
 15289 ;; *************** function _setSw_Status *****************
 15290 ;; Defined at:
 15291 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 15292 ;; Parameters:    Size  Location     Type
 15293 ;;  sw              1    wreg     unsigned char 
 15294 ;;  command         1    2[BANK0 ] unsigned char 
 15295 ;; Auto vars:     Size  Location     Type
 15296 ;;  sw              1    3[BANK0 ] unsigned char 
 15297 ;; Return value:  Size  Location     Type
 15298 ;;		None               void
 15299 ;; Registers used:
 15300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15301 ;; Tracked objects:
 15302 ;;		On entry : 0/0
 15303 ;;		On exit  : 0/0
 15304 ;;		Unchanged: 0/0
 15305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15306 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15310 ;;Total ram usage:        2 bytes
 15311 ;; Hardware stack levels used:    1
 15312 ;; Hardware stack levels required when called:    5
 15313 ;; This function calls:
 15314 ;;		_SwPointSelect
 15315 ;; This function is called by:
 15316 ;;		_DlyOff_Main
 15317 ;;		_setDimmerLights_ERROR
 15318 ;;		_setControl_Lights_Table
 15319 ;;		_setRFSW_Control
 15320 ;; This function uses a non-reentrant model
 15321 ;;
 15322                           
 15323                           
 15324                           ;psect for function _setSw_Status
 15325  1877                     _setSw_Status:	
 15326                           
 15327                           ;incstack = 0
 15328                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15329                           ;setSw_Status@sw stored from wreg
 15330  1877  0020               	movlb	0	; select bank0
 15331  1878  00A3               	movwf	setSw_Status@sw
 15332                           
 15333                           ;Switch_B1.c: 108: SwPointSelect(sw);
 15334  1879  0823               	movf	setSw_Status@sw,w
 15335  187A  3199  212D         	fcall	_SwPointSelect
 15336                           
 15337                           ;Switch_B1.c: 109: Sw->Status=command;
 15338  187C  0020               	movlb	0	; select bank0
 15339  187D  086D               	movf	_Sw,w
 15340  187E  0086               	movwf	6
 15341  187F  3001               	movlw	1	; select bank2/3
 15342  1880  0087               	movwf	7
 15343  1881  0822               	movf	setSw_Status@command,w
 15344  1882  1301               	bcf	1,6
 15345  1883  1D03               	skipz
 15346  1884  1701               	bsf	1,6
 15347  1885  0008               	return
 15348  1886                     __end_of_setSw_Status:	
 15349                           
 15350                           	psect	text88
 15351  192D                     __ptext88:	
 15352 ;; *************** function _SwPointSelect *****************
 15353 ;; Defined at:
 15354 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 15355 ;; Parameters:    Size  Location     Type
 15356 ;;  sw              1    wreg     unsigned char 
 15357 ;; Auto vars:     Size  Location     Type
 15358 ;;  sw              1    1[BANK0 ] unsigned char 
 15359 ;; Return value:  Size  Location     Type
 15360 ;;		None               void
 15361 ;; Registers used:
 15362 ;;		wreg
 15363 ;; Tracked objects:
 15364 ;;		On entry : 0/0
 15365 ;;		On exit  : 0/0
 15366 ;;		Unchanged: 0/0
 15367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;Total ram usage:        2 bytes
 15373 ;; Hardware stack levels used:    1
 15374 ;; Hardware stack levels required when called:    4
 15375 ;; This function calls:
 15376 ;;		Nothing
 15377 ;; This function is called by:
 15378 ;;		_setSw_Enable
 15379 ;;		_setSw_Status
 15380 ;;		_setSw_Main
 15381 ;;		_Sw_Detect
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385                           
 15386                           ;psect for function _SwPointSelect
 15387  192D                     _SwPointSelect:	
 15388                           
 15389                           ;incstack = 0
 15390                           ; Regs used in _SwPointSelect: [wreg]
 15391                           ;SwPointSelect@sw stored from wreg
 15392  192D  0020               	movlb	0	; select bank0
 15393  192E  00A1               	movwf	SwPointSelect@sw
 15394                           
 15395                           ;Switch_B1.c: 19: if(sw == 1)
 15396  192F  0821               	movf	SwPointSelect@sw,w
 15397  1930  3A01               	xorlw	1
 15398  1931  1D03               	skipz
 15399  1932  2938               	goto	l5991
 15400                           
 15401                           ;Switch_B1.c: 20: {
 15402                           ;Switch_B1.c: 21: Sw=&Sw1;
 15403  1933  305A               	movlw	_Sw1& (0+255)
 15404  1934  00A0               	movwf	??_SwPointSelect
 15405  1935  0820               	movf	??_SwPointSelect,w
 15406  1936  00ED               	movwf	_Sw
 15407                           
 15408                           ;Switch_B1.c: 22: }
 15409  1937  0008               	return
 15410  1938                     l5991:	
 15411                           
 15412                           ;Switch_B1.c: 25: else if(sw == 2)
 15413  1938  0821               	movf	SwPointSelect@sw,w
 15414  1939  3A02               	xorlw	2
 15415  193A  1D03               	skipz
 15416  193B  0008               	return
 15417                           
 15418                           ;Switch_B1.c: 26: {
 15419                           ;Switch_B1.c: 27: Sw=&Sw2;
 15420  193C  3063               	movlw	_Sw2& (0+255)
 15421  193D  00A0               	movwf	??_SwPointSelect
 15422  193E  0820               	movf	??_SwPointSelect,w
 15423  193F  00ED               	movwf	_Sw
 15424  1940  0008               	return
 15425  1941                     __end_of_SwPointSelect:	
 15426                           
 15427                           	psect	text89
 15428  1449                     __ptext89:	
 15429 ;; *************** function _setRF_DimmerLights *****************
 15430 ;; Defined at:
 15431 ;;		line 444 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 15432 ;; Parameters:    Size  Location     Type
 15433 ;;  lights          1    wreg     unsigned char 
 15434 ;;  on              1   61[BANK0 ] unsigned char 
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;  lights          1   65[BANK0 ] unsigned char 
 15437 ;;  status          1   64[BANK0 ] unsigned char 
 15438 ;; Return value:  Size  Location     Type
 15439 ;;		None               void
 15440 ;; Registers used:
 15441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15442 ;; Tracked objects:
 15443 ;;		On entry : 0/0
 15444 ;;		On exit  : 0/0
 15445 ;;		Unchanged: 0/0
 15446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15447 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15451 ;;Total ram usage:        5 bytes
 15452 ;; Hardware stack levels used:    1
 15453 ;; Hardware stack levels required when called:    7
 15454 ;; This function calls:
 15455 ;;		_setPercentValue
 15456 ;; This function is called by:
 15457 ;;		_DlyOff_Main
 15458 ;;		_setDimmerLights_Adj
 15459 ;;		_setRFSW_Control
 15460 ;;		_Sw_DimmerOnFunc
 15461 ;;		_Sw_DimmerOffFunc
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           
 15466                           ;psect for function _setRF_DimmerLights
 15467  1449                     _setRF_DimmerLights:	
 15468                           
 15469                           ;incstack = 0
 15470                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15471                           ;setRF_DimmerLights@lights stored from wreg
 15472  1449  0020               	movlb	0	; select bank0
 15473  144A  00E1               	movwf	setRF_DimmerLights@lights
 15474                           
 15475                           ;RF_Control_B1.c: 446: char status;
 15476                           ;RF_Control_B1.c: 447: status=1;
 15477  144B  01E0               	clrf	setRF_DimmerLights@status
 15478  144C  0AE0               	incf	setRF_DimmerLights@status,f
 15479                           
 15480                           ;RF_Control_B1.c: 448: status<<=(lights-1);
 15481  144D  0861               	movf	setRF_DimmerLights@lights,w
 15482  144E  3EFF               	addlw	-1
 15483  144F  0A89               	incf	9,f
 15484  1450  2C53               	goto	u7490
 15485  1451                     u7495:	
 15486  1451  1003               	clrc
 15487  1452  0DE0               	rlf	setRF_DimmerLights@status,f
 15488  1453                     u7490:	
 15489  1453  3EFF               	addlw	-1
 15490  1454  1D03               	skipz
 15491  1455  2C51               	goto	u7495
 15492                           
 15493                           ;RF_Control_B1.c: 449: Product->Data[11]=lights;
 15494  1456  0861               	movf	setRF_DimmerLights@lights,w
 15495  1457  00DE               	movwf	??_setRF_DimmerLights
 15496  1458  086F               	movf	_Product,w
 15497  1459  3E0B               	addlw	11
 15498  145A  0086               	movwf	6
 15499  145B  3001               	movlw	1	; select bank2/3
 15500  145C  0087               	movwf	7
 15501  145D  085E               	movf	??_setRF_DimmerLights,w
 15502  145E  0081               	movwf	1
 15503                           
 15504                           ;RF_Control_B1.c: 452: Product->Data[(20+lights)]=setPercentValue(((char)(65*1.5)));
 15505  145F  3061               	movlw	97
 15506  1460  3190  2018  3194   	fcall	_setPercentValue
 15507  1463  0020               	movlb	0	; select bank0
 15508  1464  00DE               	movwf	??_setRF_DimmerLights
 15509  1465  0861               	movf	setRF_DimmerLights@lights,w
 15510  1466  3E14               	addlw	20
 15511  1467  076F               	addwf	_Product,w
 15512  1468  00DF               	movwf	??_setRF_DimmerLights+1
 15513  1469  085F               	movf	??_setRF_DimmerLights+1,w
 15514  146A  0086               	movwf	6
 15515  146B  3001               	movlw	1	; select bank2/3
 15516  146C  0087               	movwf	7
 15517  146D  085E               	movf	??_setRF_DimmerLights,w
 15518  146E  0081               	movwf	1
 15519                           
 15520                           ;RF_Control_B1.c: 455: Product->Data[9]=Product->Data[20+lights];
 15521  146F  0861               	movf	setRF_DimmerLights@lights,w
 15522  1470  3E14               	addlw	20
 15523  1471  076F               	addwf	_Product,w
 15524  1472  00DE               	movwf	??_setRF_DimmerLights
 15525  1473  085E               	movf	??_setRF_DimmerLights,w
 15526  1474  0086               	movwf	6
 15527  1475  3001               	movlw	1	; select bank2/3
 15528  1476  0087               	movwf	7
 15529  1477  0801               	movf	1,w
 15530  1478  00DF               	movwf	??_setRF_DimmerLights+1
 15531  1479  086F               	movf	_Product,w
 15532  147A  3E09               	addlw	9
 15533  147B  0086               	movwf	6
 15534  147C  3001               	movlw	1	; select bank2/3
 15535  147D  0087               	movwf	7
 15536  147E  085F               	movf	??_setRF_DimmerLights+1,w
 15537  147F  0081               	movwf	1
 15538                           
 15539                           ;RF_Control_B1.c: 456: Product->Data[17]=Product->Data[26+lights];
 15540  1480  0861               	movf	setRF_DimmerLights@lights,w
 15541  1481  3E1A               	addlw	26
 15542  1482  076F               	addwf	_Product,w
 15543  1483  00DE               	movwf	??_setRF_DimmerLights
 15544  1484  085E               	movf	??_setRF_DimmerLights,w
 15545  1485  0086               	movwf	6
 15546  1486  3001               	movlw	1	; select bank2/3
 15547  1487  0087               	movwf	7
 15548  1488  0801               	movf	1,w
 15549  1489  00DF               	movwf	??_setRF_DimmerLights+1
 15550  148A  086F               	movf	_Product,w
 15551  148B  3E11               	addlw	17
 15552  148C  0086               	movwf	6
 15553  148D  3001               	movlw	1	; select bank2/3
 15554  148E  0087               	movwf	7
 15555  148F  085F               	movf	??_setRF_DimmerLights+1,w
 15556  1490  0081               	movwf	1
 15557                           
 15558                           ;RF_Control_B1.c: 457: if(on)
 15559  1491  085D               	movf	setRF_DimmerLights@on,w
 15560  1492  1903               	btfsc	3,2
 15561  1493  2CA4               	goto	l8033
 15562                           
 15563                           ;RF_Control_B1.c: 458: {
 15564                           ;RF_Control_B1.c: 459: Product->Data[15]=(Product->Data[15]|status);
 15565  1494  086F               	movf	_Product,w
 15566  1495  3E0F               	addlw	15
 15567  1496  0086               	movwf	6
 15568  1497  3001               	movlw	1	; select bank2/3
 15569  1498  0087               	movwf	7
 15570  1499  0801               	movf	1,w
 15571  149A  0460               	iorwf	setRF_DimmerLights@status,w
 15572  149B  00DE               	movwf	??_setRF_DimmerLights
 15573  149C  086F               	movf	_Product,w
 15574  149D  3E0F               	addlw	15
 15575  149E  0086               	movwf	6
 15576  149F  3001               	movlw	1	; select bank2/3
 15577  14A0  0087               	movwf	7
 15578  14A1  085E               	movf	??_setRF_DimmerLights,w
 15579  14A2  0081               	movwf	1
 15580                           
 15581                           ;RF_Control_B1.c: 460: }
 15582  14A3  0008               	return
 15583  14A4                     l8033:	
 15584                           
 15585                           ;RF_Control_B1.c: 461: else
 15586                           ;RF_Control_B1.c: 462: {
 15587                           ;RF_Control_B1.c: 463: Product->Data[15]=(Product->Data[15]&(~status));
 15588  14A4  086F               	movf	_Product,w
 15589  14A5  3E0F               	addlw	15
 15590  14A6  0086               	movwf	6
 15591  14A7  3001               	movlw	1	; select bank2/3
 15592  14A8  0087               	movwf	7
 15593  14A9  0960               	comf	setRF_DimmerLights@status,w
 15594  14AA  0501               	andwf	1,w
 15595  14AB  00DE               	movwf	??_setRF_DimmerLights
 15596  14AC  086F               	movf	_Product,w
 15597  14AD  3E0F               	addlw	15
 15598  14AE  0086               	movwf	6
 15599  14AF  3001               	movlw	1	; select bank2/3
 15600  14B0  0087               	movwf	7
 15601  14B1  085E               	movf	??_setRF_DimmerLights,w
 15602  14B2  0081               	movwf	1
 15603  14B3  0008               	return
 15604  14B4                     __end_of_setRF_DimmerLights:	
 15605                           
 15606                           	psect	text90
 15607  1018                     __ptext90:	
 15608 ;; *************** function _setPercentValue *****************
 15609 ;; Defined at:
 15610 ;;		line 496 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15611 ;; Parameters:    Size  Location     Type
 15612 ;;  value           1    wreg     unsigned char 
 15613 ;; Auto vars:     Size  Location     Type
 15614 ;;  value           1   57[BANK0 ] unsigned char 
 15615 ;;  i               3   58[BANK0 ] float 
 15616 ;; Return value:  Size  Location     Type
 15617 ;;                  1    wreg      unsigned char 
 15618 ;; Registers used:
 15619 ;;		wreg, status,2, status,0, pclath, cstack
 15620 ;; Tracked objects:
 15621 ;;		On entry : 0/0
 15622 ;;		On exit  : 0/0
 15623 ;;		Unchanged: 0/0
 15624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15626 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;Total ram usage:        4 bytes
 15630 ;; Hardware stack levels used:    1
 15631 ;; Hardware stack levels required when called:    6
 15632 ;; This function calls:
 15633 ;;		___awtoft
 15634 ;;		___ftdiv
 15635 ;;		___fttol
 15636 ;; This function is called by:
 15637 ;;		_Flash_Memory_Initialization
 15638 ;;		_setRF_DimmerLights
 15639 ;; This function uses a non-reentrant model
 15640 ;;
 15641                           
 15642                           
 15643                           ;psect for function _setPercentValue
 15644  1018                     _setPercentValue:	
 15645                           
 15646                           ;incstack = 0
 15647                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15648                           ;setPercentValue@value stored from wreg
 15649  1018  0020               	movlb	0	; select bank0
 15650  1019  00D9               	movwf	setPercentValue@value
 15651                           
 15652                           ;Dimmer_B1.c: 505: float i=((char)(65*1.5))-((char)(20*1.5));
 15653  101A  3000               	movlw	0
 15654  101B  00DA               	movwf	setPercentValue@i
 15655  101C  3086               	movlw	134
 15656  101D  00DB               	movwf	setPercentValue@i+1
 15657  101E  3042               	movlw	66
 15658  101F  00DC               	movwf	setPercentValue@i+2
 15659                           
 15660                           ;Dimmer_B1.c: 506: i/=100;
 15661  1020  3000               	movlw	0
 15662  1021  00AE               	movwf	___ftdiv@f2
 15663  1022  30C8               	movlw	200
 15664  1023  00AF               	movwf	___ftdiv@f2+1
 15665  1024  3042               	movlw	66
 15666  1025  00B0               	movwf	___ftdiv@f2+2
 15667  1026  085A               	movf	setPercentValue@i,w
 15668  1027  00B1               	movwf	___ftdiv@f1
 15669  1028  085B               	movf	setPercentValue@i+1,w
 15670  1029  00B2               	movwf	___ftdiv@f1+1
 15671  102A  085C               	movf	setPercentValue@i+2,w
 15672  102B  00B3               	movwf	___ftdiv@f1+2
 15673  102C  318B  2398  3190   	fcall	___ftdiv
 15674  102F  0020               	movlb	0	; select bank0
 15675  1030  082E               	movf	?___ftdiv,w
 15676  1031  00DA               	movwf	setPercentValue@i
 15677  1032  082F               	movf	?___ftdiv+1,w
 15678  1033  00DB               	movwf	setPercentValue@i+1
 15679  1034  0830               	movf	?___ftdiv+2,w
 15680  1035  00DC               	movwf	setPercentValue@i+2
 15681                           
 15682                           ;Dimmer_B1.c: 507: return (100-(char)((value-((char)(65*1.5)))/i));
 15683  1036  0859               	movf	setPercentValue@value,w
 15684  1037  3E9F               	addlw	159
 15685  1038  00A8               	movwf	___awtoft@c
 15686  1039  30FF               	movlw	255
 15687  103A  1803               	skipnc
 15688  103B  3000               	movlw	0
 15689  103C  00A9               	movwf	___awtoft@c+1
 15690  103D  319B  2308  3190   	fcall	___awtoft
 15691  1040  0020               	movlb	0	; select bank0
 15692  1041  0828               	movf	?___awtoft,w
 15693  1042  00B1               	movwf	___ftdiv@f1
 15694  1043  0829               	movf	?___awtoft+1,w
 15695  1044  00B2               	movwf	___ftdiv@f1+1
 15696  1045  082A               	movf	?___awtoft+2,w
 15697  1046  00B3               	movwf	___ftdiv@f1+2
 15698  1047  085A               	movf	setPercentValue@i,w
 15699  1048  00AE               	movwf	___ftdiv@f2
 15700  1049  085B               	movf	setPercentValue@i+1,w
 15701  104A  00AF               	movwf	___ftdiv@f2+1
 15702  104B  085C               	movf	setPercentValue@i+2,w
 15703  104C  00B0               	movwf	___ftdiv@f2+2
 15704  104D  318B  2398  3190   	fcall	___ftdiv
 15705  1050  0020               	movlb	0	; select bank0
 15706  1051  082E               	movf	?___ftdiv,w
 15707  1052  00CB               	movwf	___fttol@f1
 15708  1053  082F               	movf	?___ftdiv+1,w
 15709  1054  00CC               	movwf	___fttol@f1+1
 15710  1055  0830               	movf	?___ftdiv+2,w
 15711  1056  00CD               	movwf	___fttol@f1+2
 15712  1057  3197  2779         	fcall	___fttol
 15713  1059  0020               	movlb	0	; select bank0
 15714  105A  034B               	decf	?___fttol,w
 15715  105B  3AFF               	xorlw	255
 15716  105C  3E64               	addlw	100
 15717  105D  0008               	return
 15718  105E                     __end_of_setPercentValue:	
 15719                           
 15720                           	psect	text91
 15721  1779                     __ptext91:	
 15722 ;; *************** function ___fttol *****************
 15723 ;; Defined at:
 15724 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15725 ;; Parameters:    Size  Location     Type
 15726 ;;  f1              3   43[BANK0 ] float 
 15727 ;; Auto vars:     Size  Location     Type
 15728 ;;  lval            4   52[BANK0 ] unsigned long 
 15729 ;;  exp1            1   56[BANK0 ] unsigned char 
 15730 ;;  sign1           1   51[BANK0 ] unsigned char 
 15731 ;; Return value:  Size  Location     Type
 15732 ;;                  4   43[BANK0 ] long 
 15733 ;; Registers used:
 15734 ;;		wreg, status,2, status,0
 15735 ;; Tracked objects:
 15736 ;;		On entry : 0/0
 15737 ;;		On exit  : 0/0
 15738 ;;		Unchanged: 0/0
 15739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15740 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15741 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15742 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15744 ;;Total ram usage:       14 bytes
 15745 ;; Hardware stack levels used:    1
 15746 ;; Hardware stack levels required when called:    4
 15747 ;; This function calls:
 15748 ;;		Nothing
 15749 ;; This function is called by:
 15750 ;;		_getPercentValue
 15751 ;;		_setPercentValue
 15752 ;; This function uses a non-reentrant model
 15753 ;;
 15754                           
 15755                           
 15756                           ;psect for function ___fttol
 15757  1779                     ___fttol:	
 15758                           
 15759                           ;incstack = 0
 15760                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15761  1779  0020               	movlb	0	; select bank0
 15762  177A  084B               	movf	___fttol@f1,w
 15763  177B  00CF               	movwf	??___fttol
 15764  177C  084C               	movf	___fttol@f1+1,w
 15765  177D  00D0               	movwf	??___fttol+1
 15766  177E  084D               	movf	___fttol@f1+2,w
 15767  177F  00D1               	movwf	??___fttol+2
 15768  1780  1003               	clrc
 15769  1781  0D50               	rlf	??___fttol+1,w
 15770  1782  0D51               	rlf	??___fttol+2,w
 15771  1783  00D2               	movwf	??___fttol+3
 15772  1784  0852               	movf	??___fttol+3,w
 15773  1785  00D8               	movwf	___fttol@exp1
 15774  1786  08D8               	movf	___fttol@exp1,f
 15775  1787  1D03               	skipz
 15776  1788  2F92               	goto	l5869
 15777  1789  3000               	movlw	0
 15778  178A  00CE               	movwf	?___fttol+3
 15779  178B  3000               	movlw	0
 15780  178C  00CD               	movwf	?___fttol+2
 15781  178D  3000               	movlw	0
 15782  178E  00CC               	movwf	?___fttol+1
 15783  178F  3000               	movlw	0
 15784  1790  00CB               	movwf	?___fttol
 15785  1791  0008               	return
 15786  1792                     l5869:	
 15787  1792  084B               	movf	___fttol@f1,w
 15788  1793  00CF               	movwf	??___fttol
 15789  1794  084C               	movf	___fttol@f1+1,w
 15790  1795  00D0               	movwf	??___fttol+1
 15791  1796  084D               	movf	___fttol@f1+2,w
 15792  1797  00D1               	movwf	??___fttol+2
 15793  1798  3017               	movlw	23
 15794  1799                     u4275:	
 15795  1799  36D1               	lsrf	??___fttol+2,f
 15796  179A  0CD0               	rrf	??___fttol+1,f
 15797  179B  0CCF               	rrf	??___fttol,f
 15798  179C  0B89               	decfsz	9,f
 15799  179D  2F99               	goto	u4275
 15800  179E  084F               	movf	??___fttol,w
 15801  179F  00D2               	movwf	??___fttol+3
 15802  17A0  0852               	movf	??___fttol+3,w
 15803  17A1  00D3               	movwf	___fttol@sign1
 15804  17A2  17CC               	bsf	___fttol@f1+1,7
 15805  17A3  30FF               	movlw	255
 15806  17A4  05CB               	andwf	___fttol@f1,f
 15807  17A5  30FF               	movlw	255
 15808  17A6  05CC               	andwf	___fttol@f1+1,f
 15809  17A7  3000               	movlw	0
 15810  17A8  05CD               	andwf	___fttol@f1+2,f
 15811  17A9  084B               	movf	___fttol@f1,w
 15812  17AA  00D4               	movwf	___fttol@lval
 15813  17AB  084C               	movf	___fttol@f1+1,w
 15814  17AC  00D5               	movwf	___fttol@lval+1
 15815  17AD  084D               	movf	___fttol@f1+2,w
 15816  17AE  00D6               	movwf	___fttol@lval+2
 15817  17AF  01D7               	clrf	___fttol@lval+3
 15818  17B0  308E               	movlw	142
 15819  17B1  02D8               	subwf	___fttol@exp1,f
 15820  17B2  1FD8               	btfss	___fttol@exp1,7
 15821  17B3  2FD0               	goto	l5889
 15822  17B4  0858               	movf	___fttol@exp1,w
 15823  17B5  3A80               	xorlw	128
 15824  17B6  3E8F               	addlw	143
 15825  17B7  1803               	skipnc
 15826  17B8  2FC2               	goto	l5887
 15827  17B9  3000               	movlw	0
 15828  17BA  00CE               	movwf	?___fttol+3
 15829  17BB  3000               	movlw	0
 15830  17BC  00CD               	movwf	?___fttol+2
 15831  17BD  3000               	movlw	0
 15832  17BE  00CC               	movwf	?___fttol+1
 15833  17BF  3000               	movlw	0
 15834  17C0  00CB               	movwf	?___fttol
 15835  17C1  0008               	return
 15836  17C2                     l5887:	
 15837  17C2  3001               	movlw	1
 15838  17C3                     u4305:	
 15839  17C3  36D7               	lsrf	___fttol@lval+3,f
 15840  17C4  0CD6               	rrf	___fttol@lval+2,f
 15841  17C5  0CD5               	rrf	___fttol@lval+1,f
 15842  17C6  0CD4               	rrf	___fttol@lval,f
 15843  17C7  0B89               	decfsz	9,f
 15844  17C8  2FC3               	goto	u4305
 15845  17C9  3001               	movlw	1
 15846  17CA  00CF               	movwf	??___fttol
 15847  17CB  084F               	movf	??___fttol,w
 15848  17CC  07D8               	addwf	___fttol@exp1,f
 15849  17CD  1903               	btfsc	3,2
 15850  17CE  2FE9               	goto	l5899
 15851  17CF  2FC2               	goto	l5887
 15852  17D0                     l5889:	
 15853  17D0  3018               	movlw	24
 15854  17D1  0258               	subwf	___fttol@exp1,w
 15855  17D2  1C03               	skipc
 15856  17D3  2FE6               	goto	l5897
 15857  17D4  3000               	movlw	0
 15858  17D5  00CE               	movwf	?___fttol+3
 15859  17D6  3000               	movlw	0
 15860  17D7  00CD               	movwf	?___fttol+2
 15861  17D8  3000               	movlw	0
 15862  17D9  00CC               	movwf	?___fttol+1
 15863  17DA  3000               	movlw	0
 15864  17DB  00CB               	movwf	?___fttol
 15865  17DC  0008               	return
 15866  17DD                     l5895:	
 15867  17DD  3001               	movlw	1
 15868  17DE                     u4335:	
 15869  17DE  35D4               	lslf	___fttol@lval,f
 15870  17DF  0DD5               	rlf	___fttol@lval+1,f
 15871  17E0  0DD6               	rlf	___fttol@lval+2,f
 15872  17E1  0DD7               	rlf	___fttol@lval+3,f
 15873  17E2  0B89               	decfsz	9,f
 15874  17E3  2FDE               	goto	u4335
 15875  17E4  3001               	movlw	1
 15876  17E5  02D8               	subwf	___fttol@exp1,f
 15877  17E6                     l5897:	
 15878  17E6  08D8               	movf	___fttol@exp1,f
 15879  17E7  1D03               	skipz
 15880  17E8  2FDD               	goto	l5895
 15881  17E9                     l5899:	
 15882  17E9  0853               	movf	___fttol@sign1,w
 15883  17EA  1903               	btfsc	3,2
 15884  17EB  2FF7               	goto	l5903
 15885  17EC  09D4               	comf	___fttol@lval,f
 15886  17ED  09D5               	comf	___fttol@lval+1,f
 15887  17EE  09D6               	comf	___fttol@lval+2,f
 15888  17EF  09D7               	comf	___fttol@lval+3,f
 15889  17F0  0AD4               	incf	___fttol@lval,f
 15890  17F1  1903               	skipnz
 15891  17F2  0AD5               	incf	___fttol@lval+1,f
 15892  17F3  1903               	skipnz
 15893  17F4  0AD6               	incf	___fttol@lval+2,f
 15894  17F5  1903               	skipnz
 15895  17F6  0AD7               	incf	___fttol@lval+3,f
 15896  17F7                     l5903:	
 15897  17F7  0857               	movf	___fttol@lval+3,w
 15898  17F8  00CE               	movwf	?___fttol+3
 15899  17F9  0856               	movf	___fttol@lval+2,w
 15900  17FA  00CD               	movwf	?___fttol+2
 15901  17FB  0855               	movf	___fttol@lval+1,w
 15902  17FC  00CC               	movwf	?___fttol+1
 15903  17FD  0854               	movf	___fttol@lval,w
 15904  17FE  00CB               	movwf	?___fttol
 15905  17FF  0008               	return
 15906  1800                     __end_of___fttol:	
 15907                           
 15908                           	psect	text92
 15909  0B98                     __ptext92:	
 15910 ;; *************** function ___ftdiv *****************
 15911 ;; Defined at:
 15912 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15913 ;; Parameters:    Size  Location     Type
 15914 ;;  f2              3   14[BANK0 ] float 
 15915 ;;  f1              3   17[BANK0 ] float 
 15916 ;; Auto vars:     Size  Location     Type
 15917 ;;  f3              3   25[BANK0 ] float 
 15918 ;;  sign            1   29[BANK0 ] unsigned char 
 15919 ;;  exp             1   28[BANK0 ] unsigned char 
 15920 ;;  cntr            1   24[BANK0 ] unsigned char 
 15921 ;; Return value:  Size  Location     Type
 15922 ;;                  3   14[BANK0 ] float 
 15923 ;; Registers used:
 15924 ;;		wreg, status,2, status,0, pclath, cstack
 15925 ;; Tracked objects:
 15926 ;;		On entry : 0/0
 15927 ;;		On exit  : 0/0
 15928 ;;		Unchanged: 0/0
 15929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15930 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15931 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15932 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15933 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15934 ;;Total ram usage:       16 bytes
 15935 ;; Hardware stack levels used:    1
 15936 ;; Hardware stack levels required when called:    5
 15937 ;; This function calls:
 15938 ;;		___ftpack
 15939 ;; This function is called by:
 15940 ;;		_getPercentValue
 15941 ;;		_setPercentValue
 15942 ;; This function uses a non-reentrant model
 15943 ;;
 15944                           
 15945                           
 15946                           ;psect for function ___ftdiv
 15947  0B98                     ___ftdiv:	
 15948                           
 15949                           ;incstack = 0
 15950                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15951  0B98  0020               	movlb	0	; select bank0
 15952  0B99  0831               	movf	___ftdiv@f1,w
 15953  0B9A  00B4               	movwf	??___ftdiv
 15954  0B9B  0832               	movf	___ftdiv@f1+1,w
 15955  0B9C  00B5               	movwf	??___ftdiv+1
 15956  0B9D  0833               	movf	___ftdiv@f1+2,w
 15957  0B9E  00B6               	movwf	??___ftdiv+2
 15958  0B9F  1003               	clrc
 15959  0BA0  0D35               	rlf	??___ftdiv+1,w
 15960  0BA1  0D36               	rlf	??___ftdiv+2,w
 15961  0BA2  00B7               	movwf	??___ftdiv+3
 15962  0BA3  0837               	movf	??___ftdiv+3,w
 15963  0BA4  00BC               	movwf	___ftdiv@exp
 15964  0BA5  08BC               	movf	___ftdiv@exp,f
 15965  0BA6  1D03               	skipz
 15966  0BA7  2BAF               	goto	l5777
 15967  0BA8  3000               	movlw	0
 15968  0BA9  00AE               	movwf	?___ftdiv
 15969  0BAA  3000               	movlw	0
 15970  0BAB  00AF               	movwf	?___ftdiv+1
 15971  0BAC  3000               	movlw	0
 15972  0BAD  00B0               	movwf	?___ftdiv+2
 15973  0BAE  0008               	return
 15974  0BAF                     l5777:	
 15975  0BAF  082E               	movf	___ftdiv@f2,w
 15976  0BB0  00B4               	movwf	??___ftdiv
 15977  0BB1  082F               	movf	___ftdiv@f2+1,w
 15978  0BB2  00B5               	movwf	??___ftdiv+1
 15979  0BB3  0830               	movf	___ftdiv@f2+2,w
 15980  0BB4  00B6               	movwf	??___ftdiv+2
 15981  0BB5  1003               	clrc
 15982  0BB6  0D35               	rlf	??___ftdiv+1,w
 15983  0BB7  0D36               	rlf	??___ftdiv+2,w
 15984  0BB8  00B7               	movwf	??___ftdiv+3
 15985  0BB9  0837               	movf	??___ftdiv+3,w
 15986  0BBA  00BD               	movwf	___ftdiv@sign
 15987  0BBB  08BD               	movf	___ftdiv@sign,f
 15988  0BBC  1D03               	skipz
 15989  0BBD  2BC5               	goto	l5783
 15990  0BBE  3000               	movlw	0
 15991  0BBF  00AE               	movwf	?___ftdiv
 15992  0BC0  3000               	movlw	0
 15993  0BC1  00AF               	movwf	?___ftdiv+1
 15994  0BC2  3000               	movlw	0
 15995  0BC3  00B0               	movwf	?___ftdiv+2
 15996  0BC4  0008               	return
 15997  0BC5                     l5783:	
 15998  0BC5  3000               	movlw	0
 15999  0BC6  00B9               	movwf	___ftdiv@f3
 16000  0BC7  3000               	movlw	0
 16001  0BC8  00BA               	movwf	___ftdiv@f3+1
 16002  0BC9  3000               	movlw	0
 16003  0BCA  00BB               	movwf	___ftdiv@f3+2
 16004  0BCB  3089               	movlw	137
 16005  0BCC  073D               	addwf	___ftdiv@sign,w
 16006  0BCD  00B4               	movwf	??___ftdiv
 16007  0BCE  0834               	movf	??___ftdiv,w
 16008  0BCF  02BC               	subwf	___ftdiv@exp,f
 16009  0BD0  0831               	movf	___ftdiv@f1,w
 16010  0BD1  00B4               	movwf	??___ftdiv
 16011  0BD2  0832               	movf	___ftdiv@f1+1,w
 16012  0BD3  00B5               	movwf	??___ftdiv+1
 16013  0BD4  0833               	movf	___ftdiv@f1+2,w
 16014  0BD5  00B6               	movwf	??___ftdiv+2
 16015  0BD6  3010               	movlw	16
 16016  0BD7                     u4085:	
 16017  0BD7  36B6               	lsrf	??___ftdiv+2,f
 16018  0BD8  0CB5               	rrf	??___ftdiv+1,f
 16019  0BD9  0CB4               	rrf	??___ftdiv,f
 16020  0BDA  0B89               	decfsz	9,f
 16021  0BDB  2BD7               	goto	u4085
 16022  0BDC  0834               	movf	??___ftdiv,w
 16023  0BDD  00B7               	movwf	??___ftdiv+3
 16024  0BDE  0837               	movf	??___ftdiv+3,w
 16025  0BDF  00BD               	movwf	___ftdiv@sign
 16026  0BE0  082E               	movf	___ftdiv@f2,w
 16027  0BE1  00B4               	movwf	??___ftdiv
 16028  0BE2  082F               	movf	___ftdiv@f2+1,w
 16029  0BE3  00B5               	movwf	??___ftdiv+1
 16030  0BE4  0830               	movf	___ftdiv@f2+2,w
 16031  0BE5  00B6               	movwf	??___ftdiv+2
 16032  0BE6  3010               	movlw	16
 16033  0BE7                     u4095:	
 16034  0BE7  36B6               	lsrf	??___ftdiv+2,f
 16035  0BE8  0CB5               	rrf	??___ftdiv+1,f
 16036  0BE9  0CB4               	rrf	??___ftdiv,f
 16037  0BEA  0B89               	decfsz	9,f
 16038  0BEB  2BE7               	goto	u4095
 16039  0BEC  0834               	movf	??___ftdiv,w
 16040  0BED  00B7               	movwf	??___ftdiv+3
 16041  0BEE  0837               	movf	??___ftdiv+3,w
 16042  0BEF  06BD               	xorwf	___ftdiv@sign,f
 16043  0BF0  3080               	movlw	128
 16044  0BF1  00B4               	movwf	??___ftdiv
 16045  0BF2  0834               	movf	??___ftdiv,w
 16046  0BF3  05BD               	andwf	___ftdiv@sign,f
 16047  0BF4  17B2               	bsf	___ftdiv@f1+1,7
 16048  0BF5  30FF               	movlw	255
 16049  0BF6  05B1               	andwf	___ftdiv@f1,f
 16050  0BF7  30FF               	movlw	255
 16051  0BF8  05B2               	andwf	___ftdiv@f1+1,f
 16052  0BF9  3000               	movlw	0
 16053  0BFA  05B3               	andwf	___ftdiv@f1+2,f
 16054  0BFB  17AF               	bsf	___ftdiv@f2+1,7
 16055  0BFC  30FF               	movlw	255
 16056  0BFD  05AE               	andwf	___ftdiv@f2,f
 16057  0BFE  30FF               	movlw	255
 16058  0BFF  05AF               	andwf	___ftdiv@f2+1,f
 16059  0C00  3000               	movlw	0
 16060  0C01  05B0               	andwf	___ftdiv@f2+2,f
 16061  0C02  3018               	movlw	24
 16062  0C03  00B4               	movwf	??___ftdiv
 16063  0C04  0834               	movf	??___ftdiv,w
 16064  0C05  00B8               	movwf	___ftdiv@cntr
 16065  0C06                     l5797:	
 16066  0C06  3001               	movlw	1
 16067  0C07                     u4105:	
 16068  0C07  35B9               	lslf	___ftdiv@f3,f
 16069  0C08  0DBA               	rlf	___ftdiv@f3+1,f
 16070  0C09  0DBB               	rlf	___ftdiv@f3+2,f
 16071  0C0A  0B89               	decfsz	9,f
 16072  0C0B  2C07               	goto	u4105
 16073  0C0C  0830               	movf	___ftdiv@f2+2,w
 16074  0C0D  0233               	subwf	___ftdiv@f1+2,w
 16075  0C0E  1D03               	skipz
 16076  0C0F  2C16               	goto	u4115
 16077  0C10  082F               	movf	___ftdiv@f2+1,w
 16078  0C11  0232               	subwf	___ftdiv@f1+1,w
 16079  0C12  1D03               	skipz
 16080  0C13  2C16               	goto	u4115
 16081  0C14  082E               	movf	___ftdiv@f2,w
 16082  0C15  0231               	subwf	___ftdiv@f1,w
 16083  0C16                     u4115:	
 16084  0C16  1C03               	skipc
 16085  0C17  2C1F               	goto	l5805
 16086  0C18  082E               	movf	___ftdiv@f2,w
 16087  0C19  02B1               	subwf	___ftdiv@f1,f
 16088  0C1A  082F               	movf	___ftdiv@f2+1,w
 16089  0C1B  3BB2               	subwfb	___ftdiv@f1+1,f
 16090  0C1C  0830               	movf	___ftdiv@f2+2,w
 16091  0C1D  3BB3               	subwfb	___ftdiv@f1+2,f
 16092  0C1E  1439               	bsf	___ftdiv@f3,0
 16093  0C1F                     l5805:	
 16094  0C1F  3001               	movlw	1
 16095  0C20                     u4125:	
 16096  0C20  35B1               	lslf	___ftdiv@f1,f
 16097  0C21  0DB2               	rlf	___ftdiv@f1+1,f
 16098  0C22  0DB3               	rlf	___ftdiv@f1+2,f
 16099  0C23  0B89               	decfsz	9,f
 16100  0C24  2C20               	goto	u4125
 16101  0C25  3001               	movlw	1
 16102  0C26  02B8               	subwf	___ftdiv@cntr,f
 16103  0C27  1D03               	btfss	3,2
 16104  0C28  2C06               	goto	l5797
 16105  0C29  0839               	movf	___ftdiv@f3,w
 16106  0C2A  00A0               	movwf	___ftpack@arg
 16107  0C2B  083A               	movf	___ftdiv@f3+1,w
 16108  0C2C  00A1               	movwf	___ftpack@arg+1
 16109  0C2D  083B               	movf	___ftdiv@f3+2,w
 16110  0C2E  00A2               	movwf	___ftpack@arg+2
 16111  0C2F  083C               	movf	___ftdiv@exp,w
 16112  0C30  00B4               	movwf	??___ftdiv
 16113  0C31  0834               	movf	??___ftdiv,w
 16114  0C32  00A3               	movwf	___ftpack@exp
 16115  0C33  083D               	movf	___ftdiv@sign,w
 16116  0C34  00B5               	movwf	??___ftdiv+1
 16117  0C35  0835               	movf	??___ftdiv+1,w
 16118  0C36  00A4               	movwf	___ftpack@sign
 16119  0C37  3192  22BB         	fcall	___ftpack
 16120  0C39  0020               	movlb	0	; select bank0
 16121  0C3A  0820               	movf	?___ftpack,w
 16122  0C3B  00AE               	movwf	?___ftdiv
 16123  0C3C  0821               	movf	?___ftpack+1,w
 16124  0C3D  00AF               	movwf	?___ftdiv+1
 16125  0C3E  0822               	movf	?___ftpack+2,w
 16126  0C3F  00B0               	movwf	?___ftdiv+2
 16127  0C40  0008               	return
 16128  0C41                     __end_of___ftdiv:	
 16129                           
 16130                           	psect	text93
 16131  1B08                     __ptext93:	
 16132 ;; *************** function ___awtoft *****************
 16133 ;; Defined at:
 16134 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16135 ;; Parameters:    Size  Location     Type
 16136 ;;  c               2    8[BANK0 ] int 
 16137 ;; Auto vars:     Size  Location     Type
 16138 ;;  sign            1   13[BANK0 ] unsigned char 
 16139 ;; Return value:  Size  Location     Type
 16140 ;;                  3    8[BANK0 ] float 
 16141 ;; Registers used:
 16142 ;;		wreg, status,2, status,0, pclath, cstack
 16143 ;; Tracked objects:
 16144 ;;		On entry : 0/0
 16145 ;;		On exit  : 0/0
 16146 ;;		Unchanged: 0/0
 16147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16148 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16151 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16152 ;;Total ram usage:        6 bytes
 16153 ;; Hardware stack levels used:    1
 16154 ;; Hardware stack levels required when called:    5
 16155 ;; This function calls:
 16156 ;;		___ftpack
 16157 ;; This function is called by:
 16158 ;;		_getPercentValue
 16159 ;;		_setPercentValue
 16160 ;; This function uses a non-reentrant model
 16161 ;;
 16162                           
 16163                           
 16164                           ;psect for function ___awtoft
 16165  1B08                     ___awtoft:	
 16166                           
 16167                           ;incstack = 0
 16168                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16169  1B08  0020               	movlb	0	; select bank0
 16170  1B09  01AD               	clrf	___awtoft@sign
 16171  1B0A  1FA9               	btfss	___awtoft@c+1,7
 16172  1B0B  2B13               	goto	l5695
 16173  1B0C  09A8               	comf	___awtoft@c,f
 16174  1B0D  09A9               	comf	___awtoft@c+1,f
 16175  1B0E  0AA8               	incf	___awtoft@c,f
 16176  1B0F  1903               	skipnz
 16177  1B10  0AA9               	incf	___awtoft@c+1,f
 16178  1B11  01AD               	clrf	___awtoft@sign
 16179  1B12  0AAD               	incf	___awtoft@sign,f
 16180  1B13                     l5695:	
 16181  1B13  0828               	movf	___awtoft@c,w
 16182  1B14  00A0               	movwf	___ftpack@arg
 16183  1B15  0829               	movf	___awtoft@c+1,w
 16184  1B16  00A1               	movwf	___ftpack@arg+1
 16185  1B17  01A2               	clrf	___ftpack@arg+2
 16186  1B18  308E               	movlw	142
 16187  1B19  00AB               	movwf	??___awtoft
 16188  1B1A  082B               	movf	??___awtoft,w
 16189  1B1B  00A3               	movwf	___ftpack@exp
 16190  1B1C  082D               	movf	___awtoft@sign,w
 16191  1B1D  00AC               	movwf	??___awtoft+1
 16192  1B1E  082C               	movf	??___awtoft+1,w
 16193  1B1F  00A4               	movwf	___ftpack@sign
 16194  1B20  3192  22BB         	fcall	___ftpack
 16195  1B22  0020               	movlb	0	; select bank0
 16196  1B23  0820               	movf	?___ftpack,w
 16197  1B24  00A8               	movwf	?___awtoft
 16198  1B25  0821               	movf	?___ftpack+1,w
 16199  1B26  00A9               	movwf	?___awtoft+1
 16200  1B27  0822               	movf	?___ftpack+2,w
 16201  1B28  00AA               	movwf	?___awtoft+2
 16202  1B29  0008               	return
 16203  1B2A                     __end_of___awtoft:	
 16204                           
 16205                           	psect	text94
 16206  12BB                     __ptext94:	
 16207 ;; *************** function ___ftpack *****************
 16208 ;; Defined at:
 16209 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16210 ;; Parameters:    Size  Location     Type
 16211 ;;  arg             3    0[BANK0 ] unsigned um
 16212 ;;  exp             1    3[BANK0 ] unsigned char 
 16213 ;;  sign            1    4[BANK0 ] unsigned char 
 16214 ;; Auto vars:     Size  Location     Type
 16215 ;;		None
 16216 ;; Return value:  Size  Location     Type
 16217 ;;                  3    0[BANK0 ] float 
 16218 ;; Registers used:
 16219 ;;		wreg, status,2, status,0
 16220 ;; Tracked objects:
 16221 ;;		On entry : 0/0
 16222 ;;		On exit  : 0/0
 16223 ;;		Unchanged: 0/0
 16224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16225 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;Total ram usage:        8 bytes
 16230 ;; Hardware stack levels used:    1
 16231 ;; Hardware stack levels required when called:    4
 16232 ;; This function calls:
 16233 ;;		Nothing
 16234 ;; This function is called by:
 16235 ;;		___awtoft
 16236 ;;		___ftadd
 16237 ;;		___ftdiv
 16238 ;;		___ftmul
 16239 ;; This function uses a non-reentrant model
 16240 ;;
 16241                           
 16242                           
 16243                           ;psect for function ___ftpack
 16244  12BB                     ___ftpack:	
 16245                           
 16246                           ;incstack = 0
 16247                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16248  12BB  0020               	movlb	0	; select bank0
 16249  12BC  0823               	movf	___ftpack@exp,w
 16250  12BD  1903               	btfsc	3,2
 16251  12BE  2AC4               	goto	l5661
 16252  12BF  0822               	movf	___ftpack@arg+2,w
 16253  12C0  0421               	iorwf	___ftpack@arg+1,w
 16254  12C1  0420               	iorwf	___ftpack@arg,w
 16255  12C2  1D03               	skipz
 16256  12C3  2AD5               	goto	l5667
 16257  12C4                     l5661:	
 16258  12C4  3000               	movlw	0
 16259  12C5  00A0               	movwf	?___ftpack
 16260  12C6  3000               	movlw	0
 16261  12C7  00A1               	movwf	?___ftpack+1
 16262  12C8  3000               	movlw	0
 16263  12C9  00A2               	movwf	?___ftpack+2
 16264  12CA  0008               	return
 16265  12CB                     l5665:	
 16266  12CB  3001               	movlw	1
 16267  12CC  00A5               	movwf	??___ftpack
 16268  12CD  0825               	movf	??___ftpack,w
 16269  12CE  07A3               	addwf	___ftpack@exp,f
 16270  12CF  3001               	movlw	1
 16271  12D0                     u3735:	
 16272  12D0  36A2               	lsrf	___ftpack@arg+2,f
 16273  12D1  0CA1               	rrf	___ftpack@arg+1,f
 16274  12D2  0CA0               	rrf	___ftpack@arg,f
 16275  12D3  0B89               	decfsz	9,f
 16276  12D4  2AD0               	goto	u3735
 16277  12D5                     l5667:	
 16278  12D5  30FE               	movlw	254
 16279  12D6  0522               	andwf	___ftpack@arg+2,w
 16280  12D7  1903               	btfsc	3,2
 16281  12D8  2AEE               	goto	l3103
 16282  12D9  2ACB               	goto	l5665
 16283  12DA                     l5669:	
 16284  12DA  3001               	movlw	1
 16285  12DB  00A5               	movwf	??___ftpack
 16286  12DC  0825               	movf	??___ftpack,w
 16287  12DD  07A3               	addwf	___ftpack@exp,f
 16288  12DE  3001               	movlw	1
 16289  12DF  07A0               	addwf	___ftpack@arg,f
 16290  12E0  3000               	movlw	0
 16291  12E1  1803               	skipnc
 16292  12E2  3001               	movlw	1
 16293  12E3  07A1               	addwf	___ftpack@arg+1,f
 16294  12E4  3000               	movlw	0
 16295  12E5  1803               	skipnc
 16296  12E6  3001               	movlw	1
 16297  12E7  07A2               	addwf	___ftpack@arg+2,f
 16298  12E8  3001               	movlw	1
 16299  12E9                     u3755:	
 16300  12E9  36A2               	lsrf	___ftpack@arg+2,f
 16301  12EA  0CA1               	rrf	___ftpack@arg+1,f
 16302  12EB  0CA0               	rrf	___ftpack@arg,f
 16303  12EC  0B89               	decfsz	9,f
 16304  12ED  2AE9               	goto	u3755
 16305  12EE                     l3103:	
 16306  12EE  30FF               	movlw	255
 16307  12EF  0522               	andwf	___ftpack@arg+2,w
 16308  12F0  1903               	btfsc	3,2
 16309  12F1  2AFB               	goto	l5677
 16310  12F2  2ADA               	goto	l5669
 16311  12F3                     l5675:	
 16312  12F3  3001               	movlw	1
 16313  12F4  02A3               	subwf	___ftpack@exp,f
 16314  12F5  3001               	movlw	1
 16315  12F6                     u3775:	
 16316  12F6  35A0               	lslf	___ftpack@arg,f
 16317  12F7  0DA1               	rlf	___ftpack@arg+1,f
 16318  12F8  0DA2               	rlf	___ftpack@arg+2,f
 16319  12F9  0B89               	decfsz	9,f
 16320  12FA  2AF6               	goto	u3775
 16321  12FB                     l5677:	
 16322  12FB  1FA1               	btfss	___ftpack@arg+1,7
 16323  12FC  2AF3               	goto	l5675
 16324  12FD  1823               	btfsc	___ftpack@exp,0
 16325  12FE  2B05               	goto	l3109
 16326  12FF  30FF               	movlw	255
 16327  1300  05A0               	andwf	___ftpack@arg,f
 16328  1301  307F               	movlw	127
 16329  1302  05A1               	andwf	___ftpack@arg+1,f
 16330  1303  30FF               	movlw	255
 16331  1304  05A2               	andwf	___ftpack@arg+2,f
 16332  1305                     l3109:	
 16333  1305  1003               	clrc
 16334  1306  0CA3               	rrf	___ftpack@exp,f
 16335  1307  0823               	movf	___ftpack@exp,w
 16336  1308  00A5               	movwf	??___ftpack
 16337  1309  01A6               	clrf	??___ftpack+1
 16338  130A  01A7               	clrf	??___ftpack+2
 16339  130B  3010               	movlw	16
 16340  130C                     u3805:	
 16341  130C  35A5               	lslf	??___ftpack,f
 16342  130D  0DA6               	rlf	??___ftpack+1,f
 16343  130E  0DA7               	rlf	??___ftpack+2,f
 16344  130F  0B89               	decfsz	9,f
 16345  1310  2B0C               	goto	u3805
 16346  1311  0825               	movf	??___ftpack,w
 16347  1312  04A0               	iorwf	___ftpack@arg,f
 16348  1313  0826               	movf	??___ftpack+1,w
 16349  1314  04A1               	iorwf	___ftpack@arg+1,f
 16350  1315  0827               	movf	??___ftpack+2,w
 16351  1316  04A2               	iorwf	___ftpack@arg+2,f
 16352  1317  0824               	movf	___ftpack@sign,w
 16353  1318  1903               	btfsc	3,2
 16354  1319  0008               	return
 16355  131A  17A2               	bsf	___ftpack@arg+2,7
 16356  131B  0008               	return
 16357  131C                     __end_of___ftpack:	
 16358                           
 16359                           	psect	text95
 16360  1868                     __ptext95:	
 16361 ;; *************** function _setRFSW_Status *****************
 16362 ;; Defined at:
 16363 ;;		line 424 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 16364 ;; Parameters:    Size  Location     Type
 16365 ;;  sw              1    wreg     unsigned char 
 16366 ;;  command         1    2[BANK0 ] unsigned char 
 16367 ;; Auto vars:     Size  Location     Type
 16368 ;;  sw              1    3[BANK0 ] unsigned char 
 16369 ;; Return value:  Size  Location     Type
 16370 ;;		None               void
 16371 ;; Registers used:
 16372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16373 ;; Tracked objects:
 16374 ;;		On entry : 0/0
 16375 ;;		On exit  : 0/0
 16376 ;;		Unchanged: 0/0
 16377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16378 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;Total ram usage:        2 bytes
 16383 ;; Hardware stack levels used:    1
 16384 ;; Hardware stack levels required when called:    5
 16385 ;; This function calls:
 16386 ;;		_RfSWPointSelect
 16387 ;; This function is called by:
 16388 ;;		_DlyOff_Main
 16389 ;;		_setDimmerLights_ERROR
 16390 ;;		_setControl_Lights_Table
 16391 ;;		_Sw_DimmerOnFunc
 16392 ;;		_Sw_DimmerAdjFunc
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           
 16397                           ;psect for function _setRFSW_Status
 16398  1868                     _setRFSW_Status:	
 16399                           
 16400                           ;incstack = 0
 16401                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16402                           ;setRFSW_Status@sw stored from wreg
 16403  1868  0020               	movlb	0	; select bank0
 16404  1869  00A3               	movwf	setRFSW_Status@sw
 16405                           
 16406                           ;RF_Control_B1.c: 426: RfSWPointSelect(sw);
 16407  186A  0823               	movf	setRFSW_Status@sw,w
 16408  186B  3199  2196         	fcall	_RfSWPointSelect
 16409                           
 16410                           ;RF_Control_B1.c: 427: RFSW->Status=command;
 16411  186D  0021               	movlb	1	; select bank1
 16412  186E  083C               	movf	_RFSW^(0+128),w
 16413  186F  0086               	movwf	6
 16414  1870  0187               	clrf	7
 16415  1871  0020               	movlb	0	; select bank0
 16416  1872  0822               	movf	setRFSW_Status@command,w
 16417  1873  1001               	bcf	1,0
 16418  1874  1D03               	skipz
 16419  1875  1401               	bsf	1,0
 16420  1876  0008               	return
 16421  1877                     __end_of_setRFSW_Status:	
 16422                           
 16423                           	psect	text96
 16424  1996                     __ptext96:	
 16425 ;; *************** function _RfSWPointSelect *****************
 16426 ;; Defined at:
 16427 ;;		line 346 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;  sw              1    wreg     unsigned char 
 16430 ;; Auto vars:     Size  Location     Type
 16431 ;;  sw              1    1[BANK0 ] unsigned char 
 16432 ;; Return value:  Size  Location     Type
 16433 ;;		None               void
 16434 ;; Registers used:
 16435 ;;		wreg
 16436 ;; Tracked objects:
 16437 ;;		On entry : 0/0
 16438 ;;		On exit  : 0/0
 16439 ;;		Unchanged: 0/0
 16440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16445 ;;Total ram usage:        2 bytes
 16446 ;; Hardware stack levels used:    1
 16447 ;; Hardware stack levels required when called:    4
 16448 ;; This function calls:
 16449 ;;		Nothing
 16450 ;; This function is called by:
 16451 ;;		_setRFSW_Control
 16452 ;;		_setRFSW_AdjControl
 16453 ;;		_setRFSW_Status
 16454 ;; This function uses a non-reentrant model
 16455 ;;
 16456                           
 16457                           
 16458                           ;psect for function _RfSWPointSelect
 16459  1996                     _RfSWPointSelect:	
 16460                           
 16461                           ;incstack = 0
 16462                           ; Regs used in _RfSWPointSelect: [wreg]
 16463                           ;RfSWPointSelect@sw stored from wreg
 16464  1996  0020               	movlb	0	; select bank0
 16465  1997  00A1               	movwf	RfSWPointSelect@sw
 16466                           
 16467                           ;RF_Control_B1.c: 349: if(sw == 1)
 16468  1998  0821               	movf	RfSWPointSelect@sw,w
 16469  1999  3A01               	xorlw	1
 16470  199A  1D03               	skipz
 16471  199B  29A1               	goto	l2455
 16472                           
 16473                           ;RF_Control_B1.c: 350: {
 16474                           ;RF_Control_B1.c: 351: RFSW=&RFSW1;
 16475  199C  30E7               	movlw	_RFSW1& (0+255)
 16476  199D  00A0               	movwf	??_RfSWPointSelect
 16477  199E  0820               	movf	??_RfSWPointSelect,w
 16478  199F  0021               	movlb	1	; select bank1
 16479  19A0  00BC               	movwf	_RFSW^(0+128)
 16480  19A1                     l2455:	
 16481                           
 16482                           ;RF_Control_B1.c: 352: }
 16483                           ;RF_Control_B1.c: 355: if(sw == 2)
 16484  19A1  0020               	movlb	0	; select bank0
 16485  19A2  0821               	movf	RfSWPointSelect@sw,w
 16486  19A3  3A02               	xorlw	2
 16487  19A4  1D03               	skipz
 16488  19A5  0008               	return
 16489                           
 16490                           ;RF_Control_B1.c: 356: {
 16491                           ;RF_Control_B1.c: 357: RFSW=&RFSW2;
 16492  19A6  30E8               	movlw	_RFSW2& (0+255)
 16493  19A7  00A0               	movwf	??_RfSWPointSelect
 16494  19A8  0820               	movf	??_RfSWPointSelect,w
 16495  19A9  0021               	movlb	1	; select bank1
 16496  19AA  00BC               	movwf	_RFSW^(0+128)
 16497  19AB  0008               	return
 16498  19AC                     __end_of_RfSWPointSelect:	
 16499                           
 16500                           	psect	text97
 16501  18A6                     __ptext97:	
 16502 ;; *************** function _setDimmerLights_Trigger *****************
 16503 ;; Defined at:
 16504 ;;		line 436 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16505 ;; Parameters:    Size  Location     Type
 16506 ;;  lights          1    wreg     unsigned char 
 16507 ;;  command         1    2[BANK0 ] unsigned char 
 16508 ;; Auto vars:     Size  Location     Type
 16509 ;;  lights          1    3[BANK0 ] unsigned char 
 16510 ;; Return value:  Size  Location     Type
 16511 ;;		None               void
 16512 ;; Registers used:
 16513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16514 ;; Tracked objects:
 16515 ;;		On entry : 0/0
 16516 ;;		On exit  : 0/0
 16517 ;;		Unchanged: 0/0
 16518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16519 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16523 ;;Total ram usage:        2 bytes
 16524 ;; Hardware stack levels used:    1
 16525 ;; Hardware stack levels required when called:    5
 16526 ;; This function calls:
 16527 ;;		_DimmerLightsPointSelect
 16528 ;; This function is called by:
 16529 ;;		_DlyOff_Main
 16530 ;;		_setRFSW_Control
 16531 ;;		_Sw_DimmerOnFunc
 16532 ;;		_Sw_DimmerOffFunc
 16533 ;; This function uses a non-reentrant model
 16534 ;;
 16535                           
 16536                           
 16537                           ;psect for function _setDimmerLights_Trigger
 16538  18A6                     _setDimmerLights_Trigger:	
 16539                           
 16540                           ;incstack = 0
 16541                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16542                           ;setDimmerLights_Trigger@lights stored from wreg
 16543  18A6  0020               	movlb	0	; select bank0
 16544  18A7  00A3               	movwf	setDimmerLights_Trigger@lights
 16545                           
 16546                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 16547  18A8  0823               	movf	setDimmerLights_Trigger@lights,w
 16548  18A9  3199  2107         	fcall	_DimmerLightsPointSelect
 16549                           
 16550                           ;Dimmer_B1.c: 439: DimmerLights->Trigger=command;
 16551  18AB  0020               	movlb	0	; select bank0
 16552  18AC  086C               	movf	_DimmerLights,w
 16553  18AD  3E09               	addlw	9
 16554  18AE  0086               	movwf	6
 16555  18AF  3001               	movlw	1	; select bank2/3
 16556  18B0  0087               	movwf	7
 16557  18B1  0822               	movf	setDimmerLights_Trigger@command,w
 16558  18B2  1081               	bcf	1,1
 16559  18B3  1D03               	skipz
 16560  18B4  1481               	bsf	1,1
 16561  18B5  0008               	return
 16562  18B6                     __end_of_setDimmerLights_Trigger:	
 16563                           
 16564                           	psect	text98
 16565  1896                     __ptext98:	
 16566 ;; *************** function _setDimmerLights_Switch *****************
 16567 ;; Defined at:
 16568 ;;		line 426 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16569 ;; Parameters:    Size  Location     Type
 16570 ;;  lights          1    wreg     unsigned char 
 16571 ;;  command         1    2[BANK0 ] unsigned char 
 16572 ;; Auto vars:     Size  Location     Type
 16573 ;;  lights          1    3[BANK0 ] unsigned char 
 16574 ;; Return value:  Size  Location     Type
 16575 ;;		None               void
 16576 ;; Registers used:
 16577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16578 ;; Tracked objects:
 16579 ;;		On entry : 0/0
 16580 ;;		On exit  : 0/0
 16581 ;;		Unchanged: 0/0
 16582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16583 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;Total ram usage:        2 bytes
 16588 ;; Hardware stack levels used:    1
 16589 ;; Hardware stack levels required when called:    5
 16590 ;; This function calls:
 16591 ;;		_DimmerLightsPointSelect
 16592 ;; This function is called by:
 16593 ;;		_DlyOff_Main
 16594 ;;		_setRFSW_Control
 16595 ;;		_Sw_DimmerOnFunc
 16596 ;;		_Sw_DimmerOffFunc
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           
 16601                           ;psect for function _setDimmerLights_Switch
 16602  1896                     _setDimmerLights_Switch:	
 16603                           
 16604                           ;incstack = 0
 16605                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16606                           ;setDimmerLights_Switch@lights stored from wreg
 16607  1896  0020               	movlb	0	; select bank0
 16608  1897  00A3               	movwf	setDimmerLights_Switch@lights
 16609                           
 16610                           ;Dimmer_B1.c: 428: DimmerLightsPointSelect(lights);
 16611  1898  0823               	movf	setDimmerLights_Switch@lights,w
 16612  1899  3199  2107         	fcall	_DimmerLightsPointSelect
 16613                           
 16614                           ;Dimmer_B1.c: 429: DimmerLights->Switch=command;
 16615  189B  0020               	movlb	0	; select bank0
 16616  189C  086C               	movf	_DimmerLights,w
 16617  189D  3E09               	addlw	9
 16618  189E  0086               	movwf	6
 16619  189F  3001               	movlw	1	; select bank2/3
 16620  18A0  0087               	movwf	7
 16621  18A1  0822               	movf	setDimmerLights_Switch@command,w
 16622  18A2  1001               	bcf	1,0
 16623  18A3  1D03               	skipz
 16624  18A4  1401               	bsf	1,0
 16625  18A5  0008               	return
 16626  18A6                     __end_of_setDimmerLights_Switch:	
 16627                           
 16628                           	psect	text99
 16629  1907                     __ptext99:	
 16630 ;; *************** function _DimmerLightsPointSelect *****************
 16631 ;; Defined at:
 16632 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16633 ;; Parameters:    Size  Location     Type
 16634 ;;  lights          1    wreg     unsigned char 
 16635 ;; Auto vars:     Size  Location     Type
 16636 ;;  lights          1    1[BANK0 ] unsigned char 
 16637 ;; Return value:  Size  Location     Type
 16638 ;;		None               void
 16639 ;; Registers used:
 16640 ;;		wreg
 16641 ;; Tracked objects:
 16642 ;;		On entry : 0/0
 16643 ;;		On exit  : 0/0
 16644 ;;		Unchanged: 0/0
 16645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;Total ram usage:        2 bytes
 16651 ;; Hardware stack levels used:    1
 16652 ;; Hardware stack levels required when called:    4
 16653 ;; This function calls:
 16654 ;;		Nothing
 16655 ;; This function is called by:
 16656 ;;		_setDimmerLights_Initialization
 16657 ;;		_setDimmerLights_Main
 16658 ;;		_setDimmerLights_ERROR
 16659 ;;		_setDimmerLights_TriggerERROR
 16660 ;;		_setDimmerLights
 16661 ;;		_setDimmerLights_Adj
 16662 ;;		_setDimmerLights_AdjRF
 16663 ;;		_setDimmerLights_Switch
 16664 ;;		_setDimmerLights_AdjGo
 16665 ;;		_setDimmerLights_Trigger
 16666 ;;		_setDimmerLights_TriggerAdj
 16667 ;;		_setDimmerLights_Clear
 16668 ;;		_setDimmerLights_GO
 16669 ;;		_setDimmerLights_MaxmumValue
 16670 ;; This function uses a non-reentrant model
 16671 ;;
 16672                           
 16673                           
 16674                           ;psect for function _DimmerLightsPointSelect
 16675  1907                     _DimmerLightsPointSelect:	
 16676                           
 16677                           ;incstack = 0
 16678                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16679                           ;DimmerLightsPointSelect@lights stored from wreg
 16680  1907  0020               	movlb	0	; select bank0
 16681  1908  00A1               	movwf	DimmerLightsPointSelect@lights
 16682                           
 16683                           ;Dimmer_B1.c: 10: if(lights == 1)
 16684  1909  0821               	movf	DimmerLightsPointSelect@lights,w
 16685  190A  3A01               	xorlw	1
 16686  190B  1D03               	skipz
 16687  190C  2911               	goto	l835
 16688                           
 16689                           ;Dimmer_B1.c: 11: {
 16690                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 16691  190D  3030               	movlw	_DimmerLights1& (0+255)
 16692  190E  00A0               	movwf	??_DimmerLightsPointSelect
 16693  190F  0820               	movf	??_DimmerLightsPointSelect,w
 16694  1910  00EC               	movwf	_DimmerLights
 16695  1911                     l835:	
 16696                           
 16697                           ;Dimmer_B1.c: 13: }
 16698                           ;Dimmer_B1.c: 17: if(lights == 2)
 16699  1911  0821               	movf	DimmerLightsPointSelect@lights,w
 16700  1912  3A02               	xorlw	2
 16701  1913  1D03               	skipz
 16702  1914  0008               	return
 16703                           
 16704                           ;Dimmer_B1.c: 18: {
 16705                           ;Dimmer_B1.c: 19: DimmerLights=&DimmerLights2;
 16706  1915  303F               	movlw	_DimmerLights2& (0+255)
 16707  1916  00A0               	movwf	??_DimmerLightsPointSelect
 16708  1917  0820               	movf	??_DimmerLightsPointSelect,w
 16709  1918  00EC               	movwf	_DimmerLights
 16710  1919  0008               	return
 16711  191A                     __end_of_DimmerLightsPointSelect:	
 16712                           
 16713                           	psect	text100
 16714  1604                     __ptext100:	
 16715 ;; *************** function _setBuz *****************
 16716 ;; Defined at:
 16717 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 16718 ;; Parameters:    Size  Location     Type
 16719 ;;  count           1    wreg     unsigned char 
 16720 ;;  time            2    6[BANK0 ] int 
 16721 ;; Auto vars:     Size  Location     Type
 16722 ;;  count           1    9[BANK0 ] unsigned char 
 16723 ;; Return value:  Size  Location     Type
 16724 ;;		None               void
 16725 ;; Registers used:
 16726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16727 ;; Tracked objects:
 16728 ;;		On entry : 0/0
 16729 ;;		On exit  : 0/0
 16730 ;;		Unchanged: 0/0
 16731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16732 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16735 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;Total ram usage:        4 bytes
 16737 ;; Hardware stack levels used:    1
 16738 ;; Hardware stack levels required when called:    5
 16739 ;; This function calls:
 16740 ;;		___wmul
 16741 ;; This function is called by:
 16742 ;;		_DlyOff_Main
 16743 ;;		_setDimmerLights_Main
 16744 ;;		_DimmerLights_Exceptions
 16745 ;;		_MainT
 16746 ;;		_setLog_Code
 16747 ;;		_setControl_Lights_Table
 16748 ;;		_setRFSW_Control
 16749 ;;		_setSw_Main
 16750 ;;		_Sw_DimmerOnFunc
 16751 ;; This function uses a non-reentrant model
 16752 ;;
 16753                           
 16754                           
 16755                           ;psect for function _setBuz
 16756  1604                     _setBuz:	
 16757                           
 16758                           ;incstack = 0
 16759                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16760                           ;setBuz@count stored from wreg
 16761  1604  0020               	movlb	0	; select bank0
 16762  1605  00A9               	movwf	setBuz@count
 16763                           
 16764                           ;Buzzer_B1.c: 24: time*=20;
 16765  1606  3014               	movlw	20
 16766  1607  00A0               	movwf	___wmul@multiplier
 16767  1608  3000               	movlw	0
 16768  1609  00A1               	movwf	___wmul@multiplier+1
 16769  160A  0827               	movf	setBuz@time+1,w
 16770  160B  01A3               	clrf	___wmul@multiplicand+1
 16771  160C  07A3               	addwf	___wmul@multiplicand+1,f
 16772  160D  0826               	movf	setBuz@time,w
 16773  160E  01A2               	clrf	___wmul@multiplicand
 16774  160F  07A2               	addwf	___wmul@multiplicand,f
 16775  1610  319A  22AB  3196   	fcall	___wmul
 16776  1613  0020               	movlb	0	; select bank0
 16777  1614  0821               	movf	?___wmul+1,w
 16778  1615  01A7               	clrf	setBuz@time+1
 16779  1616  07A7               	addwf	setBuz@time+1,f
 16780  1617  0820               	movf	?___wmul,w
 16781  1618  01A6               	clrf	setBuz@time
 16782  1619  07A6               	addwf	setBuz@time,f
 16783                           
 16784                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 16785  161A  0878               	movf	_Buz,w
 16786  161B  0086               	movwf	6
 16787  161C  3001               	movlw	1	; select bank2/3
 16788  161D  0087               	movwf	7
 16789  161E  1C01               	btfss	1,0
 16790  161F  0008               	return
 16791                           
 16792                           ;Buzzer_B1.c: 26: {
 16793                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 16794  1620  0878               	movf	_Buz,w
 16795  1621  0086               	movwf	6
 16796  1622  3001               	movlw	1	; select bank2/3
 16797  1623  0087               	movwf	7
 16798  1624  1881               	btfsc	1,1
 16799  1625  2E3F               	goto	l8005
 16800                           
 16801                           ;Buzzer_B1.c: 28: {
 16802                           ;Buzzer_B1.c: 29: Buz->GO=1;
 16803  1626  0878               	movf	_Buz,w
 16804  1627  0086               	movwf	6
 16805  1628  3001               	movlw	1	; select bank2/3
 16806  1629  0087               	movwf	7
 16807  162A  1481               	bsf	1,1
 16808                           
 16809                           ;Buzzer_B1.c: 30: Buz->Count=count;
 16810  162B  0829               	movf	setBuz@count,w
 16811  162C  00A8               	movwf	??_setBuz
 16812  162D  0878               	movf	_Buz,w
 16813  162E  3E03               	addlw	3
 16814  162F  0086               	movwf	6
 16815  1630  3001               	movlw	1	; select bank2/3
 16816  1631  0087               	movwf	7
 16817  1632  0828               	movf	??_setBuz,w
 16818  1633  0081               	movwf	1
 16819                           
 16820                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 16821  1634  0878               	movf	_Buz,w
 16822  1635  3E06               	addlw	6
 16823  1636  0086               	movwf	6
 16824  1637  3001               	movlw	1	; select bank2/3
 16825  1638  0087               	movwf	7
 16826  1639  0826               	movf	setBuz@time,w
 16827  163A  3FC0               	movwi [0]fsr1
 16828  163B  0827               	movf	setBuz@time+1,w
 16829  163C  3FC1               	movwi [1]fsr1
 16830                           
 16831                           ;Buzzer_B1.c: 33: RB3=1;
 16832  163D  158D               	bsf	13,3	;volatile
 16833                           
 16834                           ;Buzzer_B1.c: 34: }
 16835  163E  0008               	return
 16836  163F                     l8005:	
 16837                           
 16838                           ;Buzzer_B1.c: 35: else
 16839                           ;Buzzer_B1.c: 36: {
 16840                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 16841  163F  0878               	movf	_Buz,w
 16842  1640  0086               	movwf	6
 16843  1641  3001               	movlw	1	; select bank2/3
 16844  1642  0087               	movwf	7
 16845  1643  1981               	btfsc	1,3
 16846  1644  2E5D               	goto	l8009
 16847                           
 16848                           ;Buzzer_B1.c: 38: {
 16849                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 16850  1645  0878               	movf	_Buz,w
 16851  1646  0086               	movwf	6
 16852  1647  3001               	movlw	1	; select bank2/3
 16853  1648  0087               	movwf	7
 16854  1649  1581               	bsf	1,3
 16855                           
 16856                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 16857  164A  0829               	movf	setBuz@count,w
 16858  164B  00A8               	movwf	??_setBuz
 16859  164C  0878               	movf	_Buz,w
 16860  164D  3E04               	addlw	4
 16861  164E  0086               	movwf	6
 16862  164F  3001               	movlw	1	; select bank2/3
 16863  1650  0087               	movwf	7
 16864  1651  0828               	movf	??_setBuz,w
 16865  1652  0081               	movwf	1
 16866                           
 16867                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 16868  1653  0878               	movf	_Buz,w
 16869  1654  3E08               	addlw	8
 16870  1655  0086               	movwf	6
 16871  1656  3001               	movlw	1	; select bank2/3
 16872  1657  0087               	movwf	7
 16873  1658  0826               	movf	setBuz@time,w
 16874  1659  3FC0               	movwi [0]fsr1
 16875  165A  0827               	movf	setBuz@time+1,w
 16876  165B  3FC1               	movwi [1]fsr1
 16877                           
 16878                           ;Buzzer_B1.c: 42: }
 16879  165C  0008               	return
 16880  165D                     l8009:	
 16881                           
 16882                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 16883  165D  0878               	movf	_Buz,w
 16884  165E  0086               	movwf	6
 16885  165F  3001               	movlw	1	; select bank2/3
 16886  1660  0087               	movwf	7
 16887  1661  1A01               	btfsc	1,4
 16888  1662  0008               	return
 16889                           
 16890                           ;Buzzer_B1.c: 44: {
 16891                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 16892  1663  0878               	movf	_Buz,w
 16893  1664  0086               	movwf	6
 16894  1665  3001               	movlw	1	; select bank2/3
 16895  1666  0087               	movwf	7
 16896  1667  1601               	bsf	1,4
 16897                           
 16898                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 16899  1668  0829               	movf	setBuz@count,w
 16900  1669  00A8               	movwf	??_setBuz
 16901  166A  0878               	movf	_Buz,w
 16902  166B  3E05               	addlw	5
 16903  166C  0086               	movwf	6
 16904  166D  3001               	movlw	1	; select bank2/3
 16905  166E  0087               	movwf	7
 16906  166F  0828               	movf	??_setBuz,w
 16907  1670  0081               	movwf	1
 16908                           
 16909                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 16910  1671  0878               	movf	_Buz,w
 16911  1672  3E0A               	addlw	10
 16912  1673  0086               	movwf	6
 16913  1674  3001               	movlw	1	; select bank2/3
 16914  1675  0087               	movwf	7
 16915  1676  0826               	movf	setBuz@time,w
 16916  1677  3FC0               	movwi [0]fsr1
 16917  1678  0827               	movf	setBuz@time+1,w
 16918  1679  3FC1               	movwi [1]fsr1
 16919  167A  0008               	return
 16920  167B                     __end_of_setBuz:	
 16921                           
 16922                           	psect	text101
 16923  1AAB                     __ptext101:	
 16924 ;; *************** function ___wmul *****************
 16925 ;; Defined at:
 16926 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 16927 ;; Parameters:    Size  Location     Type
 16928 ;;  multiplier      2    0[BANK0 ] unsigned int 
 16929 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 16930 ;; Auto vars:     Size  Location     Type
 16931 ;;  product         2    4[BANK0 ] unsigned int 
 16932 ;; Return value:  Size  Location     Type
 16933 ;;                  2    0[BANK0 ] unsigned int 
 16934 ;; Registers used:
 16935 ;;		wreg, status,2, status,0
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16941 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;Total ram usage:        6 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; Hardware stack levels required when called:    4
 16948 ;; This function calls:
 16949 ;;		Nothing
 16950 ;; This function is called by:
 16951 ;;		_setBuz
 16952 ;;		_Load_Main
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           
 16957                           ;psect for function ___wmul
 16958  1AAB                     ___wmul:	
 16959                           
 16960                           ;incstack = 0
 16961                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 16962  1AAB  0020               	movlb	0	; select bank0
 16963  1AAC  01A4               	clrf	___wmul@product
 16964  1AAD  01A5               	clrf	___wmul@product+1
 16965  1AAE                     l7985:	
 16966  1AAE  1C20               	btfss	___wmul@multiplier,0
 16967  1AAF  2AB4               	goto	l2942
 16968  1AB0  0822               	movf	___wmul@multiplicand,w
 16969  1AB1  07A4               	addwf	___wmul@product,f
 16970  1AB2  0823               	movf	___wmul@multiplicand+1,w
 16971  1AB3  3DA5               	addwfc	___wmul@product+1,f
 16972  1AB4                     l2942:	
 16973  1AB4  3001               	movlw	1
 16974  1AB5                     u7425:	
 16975  1AB5  35A2               	lslf	___wmul@multiplicand,f
 16976  1AB6  0DA3               	rlf	___wmul@multiplicand+1,f
 16977  1AB7  0B89               	decfsz	9,f
 16978  1AB8  2AB5               	goto	u7425
 16979  1AB9  3001               	movlw	1
 16980  1ABA                     u7435:	
 16981  1ABA  36A1               	lsrf	___wmul@multiplier+1,f
 16982  1ABB  0CA0               	rrf	___wmul@multiplier,f
 16983  1ABC  0B89               	decfsz	9,f
 16984  1ABD  2ABA               	goto	u7435
 16985  1ABE  0821               	movf	___wmul@multiplier+1,w
 16986  1ABF  0420               	iorwf	___wmul@multiplier,w
 16987  1AC0  1D03               	skipz
 16988  1AC1  2AAE               	goto	l7985
 16989  1AC2  0825               	movf	___wmul@product+1,w
 16990  1AC3  01A1               	clrf	?___wmul+1
 16991  1AC4  07A1               	addwf	?___wmul+1,f
 16992  1AC5  0824               	movf	___wmul@product,w
 16993  1AC6  01A0               	clrf	?___wmul
 16994  1AC7  07A0               	addwf	?___wmul,f
 16995  1AC8  0008               	return
 16996  1AC9                     __end_of___wmul:	
 16997                           
 16998                           	psect	text102
 16999  26FF                     __ptext102:	
 17000 ;; *************** function _DelayOff_Initialization *****************
 17001 ;; Defined at:
 17002 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17003 ;; Parameters:    Size  Location     Type
 17004 ;;		None
 17005 ;; Auto vars:     Size  Location     Type
 17006 ;;		None
 17007 ;; Return value:  Size  Location     Type
 17008 ;;		None               void
 17009 ;; Registers used:
 17010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17011 ;; Tracked objects:
 17012 ;;		On entry : 0/0
 17013 ;;		On exit  : 0/0
 17014 ;;		Unchanged: 0/0
 17015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17020 ;;Total ram usage:        0 bytes
 17021 ;; Hardware stack levels used:    1
 17022 ;; Hardware stack levels required when called:    6
 17023 ;; This function calls:
 17024 ;;		_DlyOff_Initialization
 17025 ;; This function is called by:
 17026 ;;		_main
 17027 ;; This function uses a non-reentrant model
 17028 ;;
 17029                           
 17030                           
 17031                           ;psect for function _DelayOff_Initialization
 17032  26FF                     _DelayOff_Initialization:	
 17033                           
 17034                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 17035                           
 17036                           ;incstack = 0
 17037                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17038  26FF  3001               	movlw	1
 17039  2700  31A7  273C  31A6   	fcall	_DlyOff_Initialization
 17040                           
 17041                           ;DelayOff_B1.c: 37: DlyOff_Initialization(2);
 17042  2703  3002               	movlw	2
 17043  2704  31A7  273C         	fcall	_DlyOff_Initialization
 17044  2706  0008               	return
 17045  2707                     __end_of_DelayOff_Initialization:	
 17046                           
 17047                           	psect	text103
 17048  273C                     __ptext103:	
 17049 ;; *************** function _DlyOff_Initialization *****************
 17050 ;; Defined at:
 17051 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17052 ;; Parameters:    Size  Location     Type
 17053 ;;  sw              1    wreg     unsigned char 
 17054 ;; Auto vars:     Size  Location     Type
 17055 ;;  sw              1    2[BANK0 ] unsigned char 
 17056 ;; Return value:  Size  Location     Type
 17057 ;;		None               void
 17058 ;; Registers used:
 17059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17060 ;; Tracked objects:
 17061 ;;		On entry : 0/0
 17062 ;;		On exit  : 0/0
 17063 ;;		Unchanged: 0/0
 17064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;Total ram usage:        1 bytes
 17070 ;; Hardware stack levels used:    1
 17071 ;; Hardware stack levels required when called:    5
 17072 ;; This function calls:
 17073 ;;		_DelayOffPointSelect
 17074 ;; This function is called by:
 17075 ;;		_DelayOff_Initialization
 17076 ;; This function uses a non-reentrant model
 17077 ;;
 17078                           
 17079                           
 17080                           ;psect for function _DlyOff_Initialization
 17081  273C                     _DlyOff_Initialization:	
 17082                           
 17083                           ;incstack = 0
 17084                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17085                           ;DlyOff_Initialization@sw stored from wreg
 17086  273C  0020               	movlb	0	; select bank0
 17087  273D  00A2               	movwf	DlyOff_Initialization@sw
 17088                           
 17089                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 17090  273E  0822               	movf	DlyOff_Initialization@sw,w
 17091  273F  3199  21C2         	fcall	_DelayOffPointSelect
 17092                           
 17093                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 17094  2741  0021               	movlb	1	; select bank1
 17095  2742  0838               	movf	_DelayOff^(0+128),w
 17096  2743  0086               	movwf	6
 17097  2744  0187               	clrf	7
 17098  2745  1401               	bsf	1,0
 17099  2746  0008               	return
 17100  2747                     __end_of_DlyOff_Initialization:	
 17101                           
 17102                           	psect	text104
 17103  19C2                     __ptext104:	
 17104 ;; *************** function _DelayOffPointSelect *****************
 17105 ;; Defined at:
 17106 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17107 ;; Parameters:    Size  Location     Type
 17108 ;;  sw              1    wreg     unsigned char 
 17109 ;; Auto vars:     Size  Location     Type
 17110 ;;  sw              1    1[BANK0 ] unsigned char 
 17111 ;; Return value:  Size  Location     Type
 17112 ;;		None               void
 17113 ;; Registers used:
 17114 ;;		wreg
 17115 ;; Tracked objects:
 17116 ;;		On entry : 0/0
 17117 ;;		On exit  : 0/0
 17118 ;;		Unchanged: 0/0
 17119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17124 ;;Total ram usage:        2 bytes
 17125 ;; Hardware stack levels used:    1
 17126 ;; Hardware stack levels required when called:    4
 17127 ;; This function calls:
 17128 ;;		Nothing
 17129 ;; This function is called by:
 17130 ;;		_DlyOff_Initialization
 17131 ;;		_DlyOff_Main
 17132 ;;		_setDelayOff_GO
 17133 ;; This function uses a non-reentrant model
 17134 ;;
 17135                           
 17136                           
 17137                           ;psect for function _DelayOffPointSelect
 17138  19C2                     _DelayOffPointSelect:	
 17139                           
 17140                           ;incstack = 0
 17141                           ; Regs used in _DelayOffPointSelect: [wreg]
 17142                           ;DelayOffPointSelect@sw stored from wreg
 17143  19C2  0020               	movlb	0	; select bank0
 17144  19C3  00A1               	movwf	DelayOffPointSelect@sw
 17145                           
 17146                           ;DelayOff_B1.c: 11: if(sw == 1)
 17147  19C4  0821               	movf	DelayOffPointSelect@sw,w
 17148  19C5  3A01               	xorlw	1
 17149  19C6  1D03               	skipz
 17150  19C7  29CE               	goto	l5925
 17151                           
 17152                           ;DelayOff_B1.c: 12: {
 17153                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 17154  19C8  30CB               	movlw	_DlySw1& (0+255)
 17155  19C9  00A0               	movwf	??_DelayOffPointSelect
 17156  19CA  0820               	movf	??_DelayOffPointSelect,w
 17157  19CB  0021               	movlb	1	; select bank1
 17158  19CC  00B8               	movwf	_DelayOff^(0+128)
 17159                           
 17160                           ;DelayOff_B1.c: 14: }
 17161  19CD  0008               	return
 17162  19CE                     l5925:	
 17163                           
 17164                           ;DelayOff_B1.c: 17: else if(sw == 2)
 17165  19CE  0020               	movlb	0	; select bank0
 17166  19CF  0821               	movf	DelayOffPointSelect@sw,w
 17167  19D0  3A02               	xorlw	2
 17168  19D1  1D03               	skipz
 17169  19D2  0008               	return
 17170                           
 17171                           ;DelayOff_B1.c: 18: {
 17172                           ;DelayOff_B1.c: 19: DelayOff=&DlySw2;
 17173  19D3  30D0               	movlw	_DlySw2& (0+255)
 17174  19D4  00A0               	movwf	??_DelayOffPointSelect
 17175  19D5  0820               	movf	??_DelayOffPointSelect,w
 17176  19D6  0021               	movlb	1	; select bank1
 17177  19D7  00B8               	movwf	_DelayOff^(0+128)
 17178  19D8  0008               	return
 17179  19D9                     __end_of_DelayOffPointSelect:	
 17180                           
 17181                           	psect	text105
 17182  1941                     __ptext105:	
 17183 ;; *************** function _CC2500_PowerOnInitial *****************
 17184 ;; Defined at:
 17185 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17186 ;; Parameters:    Size  Location     Type
 17187 ;;		None
 17188 ;; Auto vars:     Size  Location     Type
 17189 ;;		None
 17190 ;; Return value:  Size  Location     Type
 17191 ;;		None               void
 17192 ;; Registers used:
 17193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17194 ;; Tracked objects:
 17195 ;;		On entry : 0/0
 17196 ;;		On exit  : 0/0
 17197 ;;		Unchanged: 0/0
 17198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17203 ;;Total ram usage:        0 bytes
 17204 ;; Hardware stack levels used:    1
 17205 ;; Hardware stack levels required when called:    7
 17206 ;; This function calls:
 17207 ;;		_CC2500_ClearRXFIFO
 17208 ;;		_CC2500_ClearTXFIFO
 17209 ;;		_CC2500_FrequencyCabr
 17210 ;;		_CC2500_InitPATable
 17211 ;;		_CC2500_InitSetREG
 17212 ;;		_CC2500_PowerRST
 17213 ;;		_CC2500_SIDLEMode
 17214 ;; This function is called by:
 17215 ;;		_main
 17216 ;; This function uses a non-reentrant model
 17217 ;;
 17218                           
 17219                           
 17220                           ;psect for function _CC2500_PowerOnInitial
 17221  1941                     _CC2500_PowerOnInitial:	
 17222                           
 17223                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 17224                           
 17225                           ;incstack = 0
 17226                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17227  1941  319D  250D  3199   	fcall	_CC2500_PowerRST
 17228                           
 17229                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 17230  1944  319C  2404  3199   	fcall	_CC2500_InitSetREG
 17231                           
 17232                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 17233  1947  319A  22C9  3199   	fcall	_CC2500_InitPATable
 17234                           
 17235                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 17236  194A  31A6  26C3  3199   	fcall	_CC2500_ClearTXFIFO
 17237                           
 17238                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 17239  194D  31A6  26BF  3199   	fcall	_CC2500_ClearRXFIFO
 17240                           
 17241                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 17242  1950  31A7  2780  3199   	fcall	_CC2500_FrequencyCabr
 17243                           
 17244                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 17245  1953  31A6  26C7         	fcall	_CC2500_SIDLEMode
 17246  1955  0008               	return
 17247  1956                     __end_of_CC2500_PowerOnInitial:	
 17248                           
 17249                           	psect	text106
 17250  26C7                     __ptext106:	
 17251 ;; *************** function _CC2500_SIDLEMode *****************
 17252 ;; Defined at:
 17253 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17254 ;; Parameters:    Size  Location     Type
 17255 ;;		None
 17256 ;; Auto vars:     Size  Location     Type
 17257 ;;		None
 17258 ;; Return value:  Size  Location     Type
 17259 ;;		None               void
 17260 ;; Registers used:
 17261 ;;		wreg, status,2, status,0, pclath, cstack
 17262 ;; Tracked objects:
 17263 ;;		On entry : 0/0
 17264 ;;		On exit  : 0/0
 17265 ;;		Unchanged: 0/0
 17266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;Total ram usage:        0 bytes
 17272 ;; Hardware stack levels used:    1
 17273 ;; Hardware stack levels required when called:    6
 17274 ;; This function calls:
 17275 ;;		_CC2500_WriteCommand
 17276 ;; This function is called by:
 17277 ;;		_CC2500_PowerOnInitial
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           
 17282                           ;psect for function _CC2500_SIDLEMode
 17283  26C7                     _CC2500_SIDLEMode:	
 17284                           
 17285                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 17286                           
 17287                           ;incstack = 0
 17288                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 17289  26C7  3036               	movlw	54
 17290  26C8  3198  2086         	fcall	_CC2500_WriteCommand
 17291  26CA  0008               	return
 17292  26CB                     __end_of_CC2500_SIDLEMode:	
 17293                           
 17294                           	psect	text107
 17295  1D0D                     __ptext107:	
 17296 ;; *************** function _CC2500_PowerRST *****************
 17297 ;; Defined at:
 17298 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17299 ;; Parameters:    Size  Location     Type
 17300 ;;		None
 17301 ;; Auto vars:     Size  Location     Type
 17302 ;;		None
 17303 ;; Return value:  Size  Location     Type
 17304 ;;		None               void
 17305 ;; Registers used:
 17306 ;;		wreg, status,2, status,0, pclath, cstack
 17307 ;; Tracked objects:
 17308 ;;		On entry : 0/0
 17309 ;;		On exit  : 0/0
 17310 ;;		Unchanged: 0/0
 17311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;Total ram usage:        1 bytes
 17317 ;; Hardware stack levels used:    1
 17318 ;; Hardware stack levels required when called:    5
 17319 ;; This function calls:
 17320 ;;		_CC2500_WriteByte
 17321 ;;		_DelayTime_1us
 17322 ;; This function is called by:
 17323 ;;		_CC2500_PowerOnInitial
 17324 ;; This function uses a non-reentrant model
 17325 ;;
 17326                           
 17327                           
 17328                           ;psect for function _CC2500_PowerRST
 17329  1D0D                     _CC2500_PowerRST:	
 17330                           
 17331                           ;CC2500_B1.c: 112: RC1=0;
 17332                           
 17333                           ;incstack = 0
 17334                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 17335  1D0D  0020               	movlb	0	; select bank0
 17336  1D0E  108E               	bcf	14,1	;volatile
 17337                           
 17338                           ;CC2500_B1.c: 113: RC0=0;
 17339  1D0F  100E               	bcf	14,0	;volatile
 17340                           
 17341                           ;CC2500_B1.c: 114: RC4=1;
 17342  1D10  160E               	bsf	14,4	;volatile
 17343                           
 17344                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 17345  1D11  300A               	movlw	10
 17346  1D12  00A0               	movwf	DelayTime_1us@count
 17347  1D13  3000               	movlw	0
 17348  1D14  00A1               	movwf	DelayTime_1us@count+1
 17349  1D15  319B  2391  319D   	fcall	_DelayTime_1us
 17350                           
 17351                           ;CC2500_B1.c: 116: RC4=0;
 17352  1D18  0020               	movlb	0	; select bank0
 17353  1D19  120E               	bcf	14,4	;volatile
 17354                           
 17355                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 17356  1D1A  300A               	movlw	10
 17357  1D1B  00A0               	movwf	DelayTime_1us@count
 17358  1D1C  3000               	movlw	0
 17359  1D1D  00A1               	movwf	DelayTime_1us@count+1
 17360  1D1E  319B  2391  319D   	fcall	_DelayTime_1us
 17361                           
 17362                           ;CC2500_B1.c: 118: RC4=1;
 17363  1D21  0020               	movlb	0	; select bank0
 17364  1D22  160E               	bsf	14,4	;volatile
 17365                           
 17366                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 17367  1D23  3028               	movlw	40
 17368  1D24  00A0               	movwf	DelayTime_1us@count
 17369  1D25  3000               	movlw	0
 17370  1D26  00A1               	movwf	DelayTime_1us@count+1
 17371  1D27  319B  2391  319D   	fcall	_DelayTime_1us
 17372                           
 17373                           ;CC2500_B1.c: 120: RC4=0;
 17374  1D2A  0020               	movlb	0	; select bank0
 17375  1D2B  120E               	bcf	14,4	;volatile
 17376                           
 17377                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 17378  1D2C  3030               	movlw	48
 17379  1D2D  00A6               	movwf	??_CC2500_PowerRST
 17380  1D2E  0826               	movf	??_CC2500_PowerRST,w
 17381  1D2F  0021               	movlb	1	; select bank1
 17382  1D30  00BF               	movwf	_SPI0Buffer^(0+128)
 17383  1D31                     l324:	
 17384                           ;CC2500_B1.c: 122: while(RC2==1);
 17385                           
 17386  1D31  0020               	movlb	0	; select bank0
 17387  1D32  190E               	btfsc	14,2	;volatile
 17388  1D33  2D31               	goto	l324
 17389                           
 17390                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 17391  1D34  3199  21D9  319D   	fcall	_CC2500_WriteByte
 17392  1D37                     l327:	
 17393                           ;CC2500_B1.c: 124: while(RC2==1);
 17394                           
 17395  1D37  0020               	movlb	0	; select bank0
 17396  1D38  190E               	btfsc	14,2	;volatile
 17397  1D39  2D37               	goto	l327
 17398                           
 17399                           ;CC2500_B1.c: 125: RC0=0;
 17400  1D3A  100E               	bcf	14,0	;volatile
 17401                           
 17402                           ;CC2500_B1.c: 126: RC4=1;
 17403  1D3B  160E               	bsf	14,4	;volatile
 17404  1D3C  0008               	return
 17405  1D3D                     __end_of_CC2500_PowerRST:	
 17406                           
 17407                           	psect	text108
 17408  1C04                     __ptext108:	
 17409 ;; *************** function _CC2500_InitSetREG *****************
 17410 ;; Defined at:
 17411 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17412 ;; Parameters:    Size  Location     Type
 17413 ;;		None
 17414 ;; Auto vars:     Size  Location     Type
 17415 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17416 ;;  temp2           1    7[BANK0 ] unsigned char 
 17417 ;;  temp1           1    6[BANK0 ] unsigned char 
 17418 ;; Return value:  Size  Location     Type
 17419 ;;		None               void
 17420 ;; Registers used:
 17421 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17422 ;; Tracked objects:
 17423 ;;		On entry : 0/0
 17424 ;;		On exit  : 0/0
 17425 ;;		Unchanged: 0/0
 17426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17428 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17430 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17431 ;;Total ram usage:        4 bytes
 17432 ;; Hardware stack levels used:    1
 17433 ;; Hardware stack levels required when called:    6
 17434 ;; This function calls:
 17435 ;;		_CC2500_WriteREG
 17436 ;; This function is called by:
 17437 ;;		_CC2500_PowerOnInitial
 17438 ;; This function uses a non-reentrant model
 17439 ;;
 17440                           
 17441                           
 17442                           ;psect for function _CC2500_InitSetREG
 17443  1C04                     _CC2500_InitSetREG:	
 17444                           
 17445                           ;CC2500_B1.c: 133: unsigned char loop_c;
 17446                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 17447                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 17448                           
 17449                           ;incstack = 0
 17450                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17451  1C04  0020               	movlb	0	; select bank0
 17452  1C05  01A8               	clrf	CC2500_InitSetREG@loop_c
 17453  1C06                     L15:	
 17454  1C06  302F               	movlw	47
 17455  1C07  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17456  1C08  1803               	btfsc	3,0
 17457  1C09  0008               	return
 17458                           
 17459                           ;CC2500_B1.c: 137: {
 17460                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 17461  1C0A  0828               	movf	CC2500_InitSetREG@loop_c,w
 17462  1C0B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17463  1C0C  0084               	movwf	4
 17464  1C0D  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 17465  1C0E  1803               	skipnc
 17466  1C0F  3E01               	addlw	1
 17467  1C10  0085               	movwf	5
 17468  1C11  0800               	movf	0,w	;code access
 17469  1C12  00A5               	movwf	??_CC2500_InitSetREG
 17470  1C13  0825               	movf	??_CC2500_InitSetREG,w
 17471  1C14  00A6               	movwf	CC2500_InitSetREG@temp1
 17472                           
 17473                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 17474  1C15  0828               	movf	CC2500_InitSetREG@loop_c,w
 17475  1C16  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17476  1C17  0084               	movwf	4
 17477  1C18  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 17478  1C19  1803               	skipnc
 17479  1C1A  3E01               	addlw	1
 17480  1C1B  0085               	movwf	5
 17481  1C1C  0800               	movf	0,w	;code access
 17482  1C1D  00A5               	movwf	??_CC2500_InitSetREG
 17483  1C1E  0825               	movf	??_CC2500_InitSetREG,w
 17484  1C1F  00A7               	movwf	CC2500_InitSetREG@temp2
 17485                           
 17486                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 17487  1C20  0827               	movf	CC2500_InitSetREG@temp2,w
 17488  1C21  00A5               	movwf	??_CC2500_InitSetREG
 17489  1C22  0825               	movf	??_CC2500_InitSetREG,w
 17490  1C23  00A2               	movwf	CC2500_WriteREG@value
 17491  1C24  0826               	movf	CC2500_InitSetREG@temp1,w
 17492  1C25  3199  21F2  319C   	fcall	_CC2500_WriteREG
 17493  1C28  3001               	movlw	1
 17494  1C29  0020               	movlb	0	; select bank0
 17495  1C2A  00A5               	movwf	??_CC2500_InitSetREG
 17496  1C2B  0825               	movf	??_CC2500_InitSetREG,w
 17497  1C2C  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17498  1C2D  2C06               	goto	L15
 17499  1C2E                     __end_of_CC2500_InitSetREG:	
 17500                           
 17501                           	psect	text109
 17502  1AC9                     __ptext109:	
 17503 ;; *************** function _CC2500_InitPATable *****************
 17504 ;; Defined at:
 17505 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17506 ;; Parameters:    Size  Location     Type
 17507 ;;		None
 17508 ;; Auto vars:     Size  Location     Type
 17509 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17510 ;;  temp            1    6[BANK0 ] unsigned char 
 17511 ;; Return value:  Size  Location     Type
 17512 ;;		None               void
 17513 ;; Registers used:
 17514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17515 ;; Tracked objects:
 17516 ;;		On entry : 0/0
 17517 ;;		On exit  : 0/0
 17518 ;;		Unchanged: 0/0
 17519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;Total ram usage:        3 bytes
 17525 ;; Hardware stack levels used:    1
 17526 ;; Hardware stack levels required when called:    6
 17527 ;; This function calls:
 17528 ;;		_CC2500_WriteREG
 17529 ;; This function is called by:
 17530 ;;		_CC2500_PowerOnInitial
 17531 ;; This function uses a non-reentrant model
 17532 ;;
 17533                           
 17534                           
 17535                           ;psect for function _CC2500_InitPATable
 17536  1AC9                     _CC2500_InitPATable:	
 17537                           
 17538                           ;CC2500_B1.c: 149: unsigned char loop_d;
 17539                           ;CC2500_B1.c: 150: unsigned char temp;
 17540                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 17541                           
 17542                           ;incstack = 0
 17543                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17544  1AC9  0020               	movlb	0	; select bank0
 17545  1ACA  01A7               	clrf	CC2500_InitPATable@loop_d
 17546  1ACB                     L16:	
 17547  1ACB  3008               	movlw	8
 17548  1ACC  0227               	subwf	CC2500_InitPATable@loop_d,w
 17549  1ACD  1803               	btfsc	3,0
 17550  1ACE  0008               	return
 17551                           
 17552                           ;CC2500_B1.c: 153: {
 17553                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 17554  1ACF  0827               	movf	CC2500_InitPATable@loop_d,w
 17555  1AD0  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17556  1AD1  0084               	movwf	4
 17557  1AD2  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17558  1AD3  1803               	skipnc
 17559  1AD4  3E01               	addlw	1
 17560  1AD5  0085               	movwf	5
 17561  1AD6  0800               	movf	0,w	;code access
 17562  1AD7  00A5               	movwf	??_CC2500_InitPATable
 17563  1AD8  0825               	movf	??_CC2500_InitPATable,w
 17564  1AD9  00A6               	movwf	CC2500_InitPATable@temp
 17565                           
 17566                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 17567  1ADA  0826               	movf	CC2500_InitPATable@temp,w
 17568  1ADB  00A5               	movwf	??_CC2500_InitPATable
 17569  1ADC  0825               	movf	??_CC2500_InitPATable,w
 17570  1ADD  00A2               	movwf	CC2500_WriteREG@value
 17571  1ADE  303E               	movlw	62
 17572  1ADF  3199  21F2  319A   	fcall	_CC2500_WriteREG
 17573  1AE2  3001               	movlw	1
 17574  1AE3  0020               	movlb	0	; select bank0
 17575  1AE4  00A5               	movwf	??_CC2500_InitPATable
 17576  1AE5  0825               	movf	??_CC2500_InitPATable,w
 17577  1AE6  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17578  1AE7  2ACB               	goto	L16
 17579  1AE8                     __end_of_CC2500_InitPATable:	
 17580                           
 17581                           	psect	text110
 17582  19F2                     __ptext110:	
 17583 ;; *************** function _CC2500_WriteREG *****************
 17584 ;; Defined at:
 17585 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17586 ;; Parameters:    Size  Location     Type
 17587 ;;  w_addr          1    wreg     unsigned char 
 17588 ;;  value           1    2[BANK0 ] unsigned char 
 17589 ;; Auto vars:     Size  Location     Type
 17590 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17591 ;; Return value:  Size  Location     Type
 17592 ;;		None               void
 17593 ;; Registers used:
 17594 ;;		wreg, status,2, status,0, pclath, cstack
 17595 ;; Tracked objects:
 17596 ;;		On entry : 0/0
 17597 ;;		On exit  : 0/0
 17598 ;;		Unchanged: 0/0
 17599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17600 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17603 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17604 ;;Total ram usage:        3 bytes
 17605 ;; Hardware stack levels used:    1
 17606 ;; Hardware stack levels required when called:    5
 17607 ;; This function calls:
 17608 ;;		_CC2500_WriteByte
 17609 ;; This function is called by:
 17610 ;;		_CC2500_InitSetREG
 17611 ;;		_CC2500_InitPATable
 17612 ;; This function uses a non-reentrant model
 17613 ;;
 17614                           
 17615                           
 17616                           ;psect for function _CC2500_WriteREG
 17617  19F2                     _CC2500_WriteREG:	
 17618                           
 17619                           ;incstack = 0
 17620                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 17621                           ;CC2500_WriteREG@w_addr stored from wreg
 17622  19F2  0020               	movlb	0	; select bank0
 17623  19F3  00A4               	movwf	CC2500_WriteREG@w_addr
 17624                           
 17625                           ;CC2500_B1.c: 229: RC4=0;
 17626  19F4  120E               	bcf	14,4	;volatile
 17627                           
 17628                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 17629  19F5  0824               	movf	CC2500_WriteREG@w_addr,w
 17630  19F6  00A3               	movwf	??_CC2500_WriteREG
 17631  19F7  0823               	movf	??_CC2500_WriteREG,w
 17632  19F8  0021               	movlb	1	; select bank1
 17633  19F9  00BF               	movwf	_SPI0Buffer^(0+128)
 17634  19FA                     l369:	
 17635                           ;CC2500_B1.c: 231: while(RC2==1);
 17636                           
 17637  19FA  0020               	movlb	0	; select bank0
 17638  19FB  190E               	btfsc	14,2	;volatile
 17639  19FC  29FA               	goto	l369
 17640                           
 17641                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 17642  19FD  3199  21D9  3199   	fcall	_CC2500_WriteByte
 17643                           
 17644                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 17645  1A00  0020               	movlb	0	; select bank0
 17646  1A01  0822               	movf	CC2500_WriteREG@value,w
 17647  1A02  00A3               	movwf	??_CC2500_WriteREG
 17648  1A03  0823               	movf	??_CC2500_WriteREG,w
 17649  1A04  0021               	movlb	1	; select bank1
 17650  1A05  00BF               	movwf	_SPI0Buffer^(0+128)
 17651                           
 17652                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 17653  1A06  3199  21D9         	fcall	_CC2500_WriteByte
 17654                           
 17655                           ;CC2500_B1.c: 235: RC4=1;
 17656  1A08  0020               	movlb	0	; select bank0
 17657  1A09  160E               	bsf	14,4	;volatile
 17658  1A0A  0008               	return
 17659  1A0B                     __end_of_CC2500_WriteREG:	
 17660                           
 17661                           	psect	text111
 17662  2780                     __ptext111:	
 17663 ;; *************** function _CC2500_FrequencyCabr *****************
 17664 ;; Defined at:
 17665 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17666 ;; Parameters:    Size  Location     Type
 17667 ;;		None
 17668 ;; Auto vars:     Size  Location     Type
 17669 ;;		None
 17670 ;; Return value:  Size  Location     Type
 17671 ;;		None               void
 17672 ;; Registers used:
 17673 ;;		wreg, status,2, status,0, pclath, cstack
 17674 ;; Tracked objects:
 17675 ;;		On entry : 0/0
 17676 ;;		On exit  : 0/0
 17677 ;;		Unchanged: 0/0
 17678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;Total ram usage:        0 bytes
 17684 ;; Hardware stack levels used:    1
 17685 ;; Hardware stack levels required when called:    6
 17686 ;; This function calls:
 17687 ;;		_CC2500_WriteCommand
 17688 ;;		_DelayTime_1us
 17689 ;; This function is called by:
 17690 ;;		_CC2500_PowerOnInitial
 17691 ;; This function uses a non-reentrant model
 17692 ;;
 17693                           
 17694                           
 17695                           ;psect for function _CC2500_FrequencyCabr
 17696  2780                     _CC2500_FrequencyCabr:	
 17697                           
 17698                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 17699                           
 17700                           ;incstack = 0
 17701                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 17702  2780  3033               	movlw	51
 17703  2781  3198  2086  31A7   	fcall	_CC2500_WriteCommand
 17704                           
 17705                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 17706  2784  30E8               	movlw	232
 17707  2785  0020               	movlb	0	; select bank0
 17708  2786  00A0               	movwf	DelayTime_1us@count
 17709  2787  3003               	movlw	3
 17710  2788  00A1               	movwf	DelayTime_1us@count+1
 17711  2789  319B  2391         	fcall	_DelayTime_1us
 17712  278B  0008               	return
 17713  278C                     __end_of_CC2500_FrequencyCabr:	
 17714                           
 17715                           	psect	text112
 17716  1B91                     __ptext112:	
 17717 ;; *************** function _DelayTime_1us *****************
 17718 ;; Defined at:
 17719 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17720 ;; Parameters:    Size  Location     Type
 17721 ;;  count           2    0[BANK0 ] int 
 17722 ;; Auto vars:     Size  Location     Type
 17723 ;;  j               2    4[BANK0 ] unsigned int 
 17724 ;;  i               2    2[BANK0 ] unsigned int 
 17725 ;; Return value:  Size  Location     Type
 17726 ;;		None               void
 17727 ;; Registers used:
 17728 ;;		wreg, status,2
 17729 ;; Tracked objects:
 17730 ;;		On entry : 0/0
 17731 ;;		On exit  : 0/0
 17732 ;;		Unchanged: 0/0
 17733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17734 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17735 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;Total ram usage:        6 bytes
 17739 ;; Hardware stack levels used:    1
 17740 ;; Hardware stack levels required when called:    4
 17741 ;; This function calls:
 17742 ;;		Nothing
 17743 ;; This function is called by:
 17744 ;;		_CC2500_PowerRST
 17745 ;;		_CC2500_FrequencyCabr
 17746 ;; This function uses a non-reentrant model
 17747 ;;
 17748                           
 17749                           
 17750                           ;psect for function _DelayTime_1us
 17751  1B91                     _DelayTime_1us:	
 17752                           
 17753                           ;CC2500_B1.c: 285: unsigned int i,j;
 17754                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 17755                           
 17756                           ;incstack = 0
 17757                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17758  1B91  3001               	movlw	1
 17759  1B92  0020               	movlb	0	; select bank0
 17760  1B93  00A2               	movwf	DelayTime_1us@i
 17761  1B94  3000               	movlw	0
 17762  1B95  00A3               	movwf	DelayTime_1us@i+1
 17763  1B96                     l393:	
 17764  1B96  0821               	movf	DelayTime_1us@count+1,w
 17765  1B97  0223               	subwf	DelayTime_1us@i+1,w
 17766  1B98  1D03               	skipz
 17767  1B99  2B9C               	goto	u7935
 17768  1B9A  0820               	movf	DelayTime_1us@count,w
 17769  1B9B  0222               	subwf	DelayTime_1us@i,w
 17770  1B9C                     u7935:	
 17771  1B9C  1803               	btfsc	3,0
 17772  1B9D  0008               	return
 17773                           
 17774                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 17775  1B9E  01A4               	clrf	DelayTime_1us@j
 17776  1B9F  01A5               	clrf	DelayTime_1us@j+1
 17777  1BA0  3000               	movlw	0
 17778  1BA1  0225               	subwf	DelayTime_1us@j+1,w
 17779  1BA2  3002               	movlw	2
 17780  1BA3  1903               	skipnz
 17781  1BA4  0224               	subwf	DelayTime_1us@j,w
 17782  1BA5  1803               	btfsc	3,0
 17783  1BA6  2BB2               	goto	l8343
 17784  1BA7                     l8341:	
 17785  1BA7  3001               	movlw	1
 17786  1BA8  07A4               	addwf	DelayTime_1us@j,f
 17787  1BA9  3000               	movlw	0
 17788  1BAA  3DA5               	addwfc	DelayTime_1us@j+1,f
 17789  1BAB  3000               	movlw	0
 17790  1BAC  0225               	subwf	DelayTime_1us@j+1,w
 17791  1BAD  3002               	movlw	2
 17792  1BAE  1903               	skipnz
 17793  1BAF  0224               	subwf	DelayTime_1us@j,w
 17794  1BB0  1C03               	skipc
 17795  1BB1  2BA7               	goto	l8341
 17796  1BB2                     l8343:	
 17797  1BB2  3001               	movlw	1
 17798  1BB3  07A2               	addwf	DelayTime_1us@i,f
 17799  1BB4  3000               	movlw	0
 17800  1BB5  3DA3               	addwfc	DelayTime_1us@i+1,f
 17801  1BB6  2B96               	goto	l393
 17802  1BB7                     __end_of_DelayTime_1us:	
 17803                           
 17804                           	psect	text113
 17805  26C3                     __ptext113:	
 17806 ;; *************** function _CC2500_ClearTXFIFO *****************
 17807 ;; Defined at:
 17808 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17809 ;; Parameters:    Size  Location     Type
 17810 ;;		None
 17811 ;; Auto vars:     Size  Location     Type
 17812 ;;		None
 17813 ;; Return value:  Size  Location     Type
 17814 ;;		None               void
 17815 ;; Registers used:
 17816 ;;		wreg, status,2, status,0, pclath, cstack
 17817 ;; Tracked objects:
 17818 ;;		On entry : 0/0
 17819 ;;		On exit  : 0/0
 17820 ;;		Unchanged: 0/0
 17821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17826 ;;Total ram usage:        0 bytes
 17827 ;; Hardware stack levels used:    1
 17828 ;; Hardware stack levels required when called:    6
 17829 ;; This function calls:
 17830 ;;		_CC2500_WriteCommand
 17831 ;; This function is called by:
 17832 ;;		_CC2500_PowerOnInitial
 17833 ;; This function uses a non-reentrant model
 17834 ;;
 17835                           
 17836                           
 17837                           ;psect for function _CC2500_ClearTXFIFO
 17838  26C3                     _CC2500_ClearTXFIFO:	
 17839                           
 17840                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 17841                           
 17842                           ;incstack = 0
 17843                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 17844  26C3  303B               	movlw	59
 17845  26C4  3198  2086         	fcall	_CC2500_WriteCommand
 17846  26C6  0008               	return
 17847  26C7                     __end_of_CC2500_ClearTXFIFO:	
 17848                           
 17849                           	psect	text114
 17850  26BF                     __ptext114:	
 17851 ;; *************** function _CC2500_ClearRXFIFO *****************
 17852 ;; Defined at:
 17853 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17854 ;; Parameters:    Size  Location     Type
 17855 ;;		None
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;		None
 17858 ;; Return value:  Size  Location     Type
 17859 ;;		None               void
 17860 ;; Registers used:
 17861 ;;		wreg, status,2, status,0, pclath, cstack
 17862 ;; Tracked objects:
 17863 ;;		On entry : 0/0
 17864 ;;		On exit  : 0/0
 17865 ;;		Unchanged: 0/0
 17866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;Total ram usage:        0 bytes
 17872 ;; Hardware stack levels used:    1
 17873 ;; Hardware stack levels required when called:    6
 17874 ;; This function calls:
 17875 ;;		_CC2500_WriteCommand
 17876 ;; This function is called by:
 17877 ;;		_CC2500_PowerOnInitial
 17878 ;; This function uses a non-reentrant model
 17879 ;;
 17880                           
 17881                           
 17882                           ;psect for function _CC2500_ClearRXFIFO
 17883  26BF                     _CC2500_ClearRXFIFO:	
 17884                           
 17885                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 17886                           
 17887                           ;incstack = 0
 17888                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 17889  26BF  303A               	movlw	58
 17890  26C0  3198  2086         	fcall	_CC2500_WriteCommand
 17891  26C2  0008               	return
 17892  26C3                     __end_of_CC2500_ClearRXFIFO:	
 17893                           
 17894                           	psect	text115
 17895  1886                     __ptext115:	
 17896 ;; *************** function _CC2500_WriteCommand *****************
 17897 ;; Defined at:
 17898 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17899 ;; Parameters:    Size  Location     Type
 17900 ;;  command         1    wreg     unsigned char 
 17901 ;; Auto vars:     Size  Location     Type
 17902 ;;  command         1    3[BANK0 ] unsigned char 
 17903 ;; Return value:  Size  Location     Type
 17904 ;;		None               void
 17905 ;; Registers used:
 17906 ;;		wreg, status,2, status,0, pclath, cstack
 17907 ;; Tracked objects:
 17908 ;;		On entry : 0/0
 17909 ;;		On exit  : 0/0
 17910 ;;		Unchanged: 0/0
 17911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17913 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;Total ram usage:        2 bytes
 17917 ;; Hardware stack levels used:    1
 17918 ;; Hardware stack levels required when called:    5
 17919 ;; This function calls:
 17920 ;;		_CC2500_WriteByte
 17921 ;; This function is called by:
 17922 ;;		_CC2500_TxData
 17923 ;;		_CC2500_RxData
 17924 ;;		_CC2500_ClearTXFIFO
 17925 ;;		_CC2500_ClearRXFIFO
 17926 ;;		_CC2500_FrequencyCabr
 17927 ;;		_CC2500_SIDLEMode
 17928 ;;		_setRF_Main
 17929 ;;		_RF_RxDisable
 17930 ;; This function uses a non-reentrant model
 17931 ;;
 17932                           
 17933                           
 17934                           ;psect for function _CC2500_WriteCommand
 17935  1886                     _CC2500_WriteCommand:	
 17936                           
 17937                           ;incstack = 0
 17938                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 17939                           ;CC2500_WriteCommand@command stored from wreg
 17940  1886  0020               	movlb	0	; select bank0
 17941  1887  00A3               	movwf	CC2500_WriteCommand@command
 17942                           
 17943                           ;CC2500_B1.c: 255: RC4=0;
 17944  1888  120E               	bcf	14,4	;volatile
 17945                           
 17946                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 17947  1889  0823               	movf	CC2500_WriteCommand@command,w
 17948  188A  00A2               	movwf	??_CC2500_WriteCommand
 17949  188B  0822               	movf	??_CC2500_WriteCommand,w
 17950  188C  0021               	movlb	1	; select bank1
 17951  188D  00BF               	movwf	_SPI0Buffer^(0+128)
 17952  188E                     l381:	
 17953                           ;CC2500_B1.c: 258: while(RC2==1);
 17954                           
 17955  188E  0020               	movlb	0	; select bank0
 17956  188F  190E               	btfsc	14,2	;volatile
 17957  1890  288E               	goto	l381
 17958                           
 17959                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 17960  1891  3199  21D9         	fcall	_CC2500_WriteByte
 17961                           
 17962                           ;CC2500_B1.c: 261: RC4=1;
 17963  1893  0020               	movlb	0	; select bank0
 17964  1894  160E               	bsf	14,4	;volatile
 17965  1895  0008               	return
 17966  1896                     __end_of_CC2500_WriteCommand:	
 17967                           
 17968                           	psect	text116
 17969  19D9                     __ptext116:	
 17970 ;; *************** function _CC2500_WriteByte *****************
 17971 ;; Defined at:
 17972 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17973 ;; Parameters:    Size  Location     Type
 17974 ;;		None
 17975 ;; Auto vars:     Size  Location     Type
 17976 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17977 ;; Return value:  Size  Location     Type
 17978 ;;		None               void
 17979 ;; Registers used:
 17980 ;;		wreg, status,2, status,0
 17981 ;; Tracked objects:
 17982 ;;		On entry : 0/0
 17983 ;;		On exit  : 0/0
 17984 ;;		Unchanged: 0/0
 17985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17990 ;;Total ram usage:        2 bytes
 17991 ;; Hardware stack levels used:    1
 17992 ;; Hardware stack levels required when called:    4
 17993 ;; This function calls:
 17994 ;;		Nothing
 17995 ;; This function is called by:
 17996 ;;		_CC2500_TxData
 17997 ;;		_CC2500_RxData
 17998 ;;		_CC2500_PowerRST
 17999 ;;		_CC2500_WriteREG
 18000 ;;		_CC2500_WriteCommand
 18001 ;;		_CC2500_ReadStatus
 18002 ;;		_CC2500_ReadREG
 18003 ;; This function uses a non-reentrant model
 18004 ;;
 18005                           
 18006                           
 18007                           ;psect for function _CC2500_WriteByte
 18008  19D9                     _CC2500_WriteByte:	
 18009                           
 18010                           ;CC2500_B1.c: 195: unsigned char loop_a;
 18011                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 18012                           
 18013                           ;incstack = 0
 18014                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18015  19D9  0020               	movlb	0	; select bank0
 18016  19DA  01A1               	clrf	CC2500_WriteByte@loop_a
 18017  19DB                     L17:	
 18018  19DB  3008               	movlw	8
 18019  19DC  0221               	subwf	CC2500_WriteByte@loop_a,w
 18020  19DD  1803               	btfsc	3,0
 18021  19DE  0008               	return
 18022                           
 18023                           ;CC2500_B1.c: 197: {
 18024                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 18025  19DF  0021               	movlb	1	; select bank1
 18026  19E0  1FBF               	btfss	_SPI0Buffer^(0+128),7
 18027  19E1  29E5               	goto	l357
 18028                           
 18029                           ;CC2500_B1.c: 199: RC0=1;
 18030  19E2  0020               	movlb	0	; select bank0
 18031  19E3  140E               	bsf	14,0	;volatile
 18032  19E4  29E7               	goto	l358
 18033  19E5                     l357:	
 18034                           
 18035                           ;CC2500_B1.c: 200: else
 18036                           ;CC2500_B1.c: 201: RC0=0;
 18037  19E5  0020               	movlb	0	; select bank0
 18038  19E6  100E               	bcf	14,0	;volatile
 18039  19E7                     l358:	
 18040                           
 18041                           ;CC2500_B1.c: 202: RC1=1;
 18042  19E7  148E               	bsf	14,1	;volatile
 18043                           
 18044                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 18045  19E8  1003               	clrc
 18046  19E9  0021               	movlb	1	; select bank1
 18047  19EA  0DBF               	rlf	_SPI0Buffer^(0+128),f
 18048                           
 18049                           ;CC2500_B1.c: 204: RC1=0;
 18050  19EB  0020               	movlb	0	; select bank0
 18051  19EC  108E               	bcf	14,1	;volatile
 18052  19ED  3001               	movlw	1
 18053  19EE  00A0               	movwf	??_CC2500_WriteByte
 18054  19EF  0820               	movf	??_CC2500_WriteByte,w
 18055  19F0  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18056  19F1  29DB               	goto	L17
 18057  19F2                     __end_of_CC2500_WriteByte:	
 18058                           
 18059                           	psect	text117
 18060  0AF0                     __ptext117:	
 18061 ;; *************** function _Buzzer_Main *****************
 18062 ;; Defined at:
 18063 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18064 ;; Parameters:    Size  Location     Type
 18065 ;;		None
 18066 ;; Auto vars:     Size  Location     Type
 18067 ;;		None
 18068 ;; Return value:  Size  Location     Type
 18069 ;;		None               void
 18070 ;; Registers used:
 18071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 18072 ;; Tracked objects:
 18073 ;;		On entry : 0/0
 18074 ;;		On exit  : 0/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;Total ram usage:        4 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; Hardware stack levels required when called:    4
 18084 ;; This function calls:
 18085 ;;		Nothing
 18086 ;; This function is called by:
 18087 ;;		_main
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           
 18092                           ;psect for function _Buzzer_Main
 18093  0AF0                     _Buzzer_Main:	
 18094                           
 18095                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 18096                           
 18097                           ;incstack = 0
 18098                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 18099  0AF0  0878               	movf	_Buz,w
 18100  0AF1  0086               	movwf	6
 18101  0AF2  3001               	movlw	1	; select bank2/3
 18102  0AF3  0087               	movwf	7
 18103  0AF4  1281               	bcf	1,5
 18104  0AF5  0020               	movlb	0	; select bank0
 18105  0AF6  198D               	btfsc	13,3	;volatile
 18106  0AF7  1681               	bsf	1,5
 18107                           
 18108                           ;Buzzer_B1.c: 57: if(Buz->GO)
 18109  0AF8  0878               	movf	_Buz,w
 18110  0AF9  0086               	movwf	6
 18111  0AFA  3001               	movlw	1	; select bank2/3
 18112  0AFB  0087               	movwf	7
 18113  0AFC  1C81               	btfss	1,1
 18114  0AFD  0008               	return
 18115                           
 18116                           ;Buzzer_B1.c: 58: {
 18117                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 18118  0AFE  0878               	movf	_Buz,w
 18119  0AFF  3E06               	addlw	6
 18120  0B00  0086               	movwf	6
 18121  0B01  3001               	movlw	1	; select bank2/3
 18122  0B02  0087               	movwf	7
 18123  0B03  3F40               	moviw [0]fsr1
 18124  0B04  0020               	movlb	0	; select bank0
 18125  0B05  00A0               	movwf	??_Buzzer_Main
 18126  0B06  3F41               	moviw [1]fsr1
 18127  0B07  00A1               	movwf	??_Buzzer_Main+1
 18128  0B08  0A78               	incf	_Buz,w
 18129  0B09  0086               	movwf	6
 18130  0B0A  3001               	movlw	1	; select bank2/3
 18131  0B0B  0087               	movwf	7
 18132  0B0C  3F40               	moviw [0]fsr1
 18133  0B0D  00A2               	movwf	??_Buzzer_Main+2
 18134  0B0E  3F41               	moviw [1]fsr1
 18135  0B0F  00A3               	movwf	??_Buzzer_Main+3
 18136  0B10  0821               	movf	??_Buzzer_Main+1,w
 18137  0B11  0223               	subwf	??_Buzzer_Main+3,w
 18138  0B12  1D03               	skipz
 18139  0B13  2B16               	goto	u6445
 18140  0B14  0820               	movf	??_Buzzer_Main,w
 18141  0B15  0222               	subwf	??_Buzzer_Main+2,w
 18142  0B16                     u6445:	
 18143  0B16  1C03               	skipc
 18144  0B17  0008               	return
 18145                           
 18146                           ;Buzzer_B1.c: 61: {
 18147                           ;Buzzer_B1.c: 62: Buz->Time=0;
 18148  0B18  0A78               	incf	_Buz,w
 18149  0B19  0086               	movwf	6
 18150  0B1A  3001               	movlw	1	; select bank2/3
 18151  0B1B  0087               	movwf	7
 18152  0B1C  3000               	movlw	0
 18153  0B1D  3FC0               	movwi [0]fsr1
 18154  0B1E  3FC1               	movwi [1]fsr1
 18155                           
 18156                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 18157  0B1F  0878               	movf	_Buz,w
 18158  0B20  0086               	movwf	6
 18159  0B21  3001               	movlw	1	; select bank2/3
 18160  0B22  0087               	movwf	7
 18161  0B23  1A81               	btfsc	1,5
 18162  0B24  2B8A               	goto	l7331
 18163                           
 18164                           ;Buzzer_B1.c: 64: {
 18165                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 18166  0B25  0878               	movf	_Buz,w
 18167  0B26  3E03               	addlw	3
 18168  0B27  0086               	movwf	6
 18169  0B28  3001               	movlw	1	; select bank2/3
 18170  0B29  0087               	movwf	7
 18171  0B2A  0881               	movf	1,f
 18172  0B2B  1D03               	skipz
 18173  0B2C  2B83               	goto	l7327
 18174                           
 18175                           ;Buzzer_B1.c: 66: {
 18176                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 18177  0B2D  0878               	movf	_Buz,w
 18178  0B2E  0086               	movwf	6
 18179  0B2F  3001               	movlw	1	; select bank2/3
 18180  0B30  0087               	movwf	7
 18181  0B31  1D81               	btfss	1,3
 18182  0B32  2B55               	goto	l7319
 18183                           
 18184                           ;Buzzer_B1.c: 68: {
 18185                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 18186  0B33  0878               	movf	_Buz,w
 18187  0B34  0086               	movwf	6
 18188  0B35  3001               	movlw	1	; select bank2/3
 18189  0B36  0087               	movwf	7
 18190  0B37  1181               	bcf	1,3
 18191                           
 18192                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 18193  0B38  0878               	movf	_Buz,w
 18194  0B39  3E04               	addlw	4
 18195  0B3A  0086               	movwf	6
 18196  0B3B  3001               	movlw	1	; select bank2/3
 18197  0B3C  0087               	movwf	7
 18198  0B3D  0801               	movf	1,w
 18199  0B3E  00A0               	movwf	??_Buzzer_Main
 18200  0B3F  0878               	movf	_Buz,w
 18201  0B40  3E03               	addlw	3
 18202  0B41  0086               	movwf	6
 18203  0B42  3001               	movlw	1	; select bank2/3
 18204  0B43  0087               	movwf	7
 18205  0B44  0820               	movf	??_Buzzer_Main,w
 18206  0B45  0081               	movwf	1
 18207                           
 18208                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 18209  0B46  0878               	movf	_Buz,w
 18210  0B47  3E08               	addlw	8
 18211  0B48  0086               	movwf	6
 18212  0B49  3001               	movlw	1	; select bank2/3
 18213  0B4A  0087               	movwf	7
 18214  0B4B  0878               	movf	_Buz,w
 18215  0B4C  3E06               	addlw	6
 18216  0B4D  0084               	movwf	4
 18217  0B4E  3001               	movlw	1	; select bank2/3
 18218  0B4F  0085               	movwf	5
 18219  0B50  3F40               	moviw [0]fsr1
 18220  0B51  3F80               	movwi [0]fsr0
 18221  0B52  3F41               	moviw [1]fsr1
 18222  0B53  3F81               	movwi [1]fsr0
 18223                           
 18224                           ;Buzzer_B1.c: 72: }
 18225  0B54  0008               	return
 18226  0B55                     l7319:	
 18227                           
 18228                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 18229  0B55  0878               	movf	_Buz,w
 18230  0B56  0086               	movwf	6
 18231  0B57  3001               	movlw	1	; select bank2/3
 18232  0B58  0087               	movwf	7
 18233  0B59  1E01               	btfss	1,4
 18234  0B5A  2B7D               	goto	l7325
 18235                           
 18236                           ;Buzzer_B1.c: 74: {
 18237                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 18238  0B5B  0878               	movf	_Buz,w
 18239  0B5C  0086               	movwf	6
 18240  0B5D  3001               	movlw	1	; select bank2/3
 18241  0B5E  0087               	movwf	7
 18242  0B5F  1201               	bcf	1,4
 18243                           
 18244                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 18245  0B60  0878               	movf	_Buz,w
 18246  0B61  3E05               	addlw	5
 18247  0B62  0086               	movwf	6
 18248  0B63  3001               	movlw	1	; select bank2/3
 18249  0B64  0087               	movwf	7
 18250  0B65  0801               	movf	1,w
 18251  0B66  00A0               	movwf	??_Buzzer_Main
 18252  0B67  0878               	movf	_Buz,w
 18253  0B68  3E03               	addlw	3
 18254  0B69  0086               	movwf	6
 18255  0B6A  3001               	movlw	1	; select bank2/3
 18256  0B6B  0087               	movwf	7
 18257  0B6C  0820               	movf	??_Buzzer_Main,w
 18258  0B6D  0081               	movwf	1
 18259                           
 18260                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 18261  0B6E  0878               	movf	_Buz,w
 18262  0B6F  3E0A               	addlw	10
 18263  0B70  0086               	movwf	6
 18264  0B71  3001               	movlw	1	; select bank2/3
 18265  0B72  0087               	movwf	7
 18266  0B73  0878               	movf	_Buz,w
 18267  0B74  3E06               	addlw	6
 18268  0B75  0084               	movwf	4
 18269  0B76  3001               	movlw	1	; select bank2/3
 18270  0B77  0085               	movwf	5
 18271  0B78  3F40               	moviw [0]fsr1
 18272  0B79  3F80               	movwi [0]fsr0
 18273  0B7A  3F41               	moviw [1]fsr1
 18274  0B7B  3F81               	movwi [1]fsr0
 18275                           
 18276                           ;Buzzer_B1.c: 78: }
 18277  0B7C  0008               	return
 18278  0B7D                     l7325:	
 18279                           
 18280                           ;Buzzer_B1.c: 79: else
 18281                           ;Buzzer_B1.c: 80: {
 18282                           ;Buzzer_B1.c: 81: Buz->GO=0;
 18283  0B7D  0878               	movf	_Buz,w
 18284  0B7E  0086               	movwf	6
 18285  0B7F  3001               	movlw	1	; select bank2/3
 18286  0B80  0087               	movwf	7
 18287  0B81  1081               	bcf	1,1
 18288                           
 18289                           ;Buzzer_B1.c: 82: }
 18290                           ;Buzzer_B1.c: 83: }
 18291  0B82  0008               	return
 18292  0B83                     l7327:	
 18293                           
 18294                           ;Buzzer_B1.c: 84: else
 18295                           ;Buzzer_B1.c: 85: {
 18296                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 18297  0B83  0878               	movf	_Buz,w
 18298  0B84  0086               	movwf	6
 18299  0B85  3001               	movlw	1	; select bank2/3
 18300  0B86  0087               	movwf	7
 18301  0B87  1681               	bsf	1,5
 18302                           
 18303                           ;Buzzer_B1.c: 88: RB3=1;
 18304  0B88  158D               	bsf	13,3	;volatile
 18305                           
 18306                           ;Buzzer_B1.c: 89: }
 18307                           ;Buzzer_B1.c: 90: }
 18308  0B89  0008               	return
 18309  0B8A                     l7331:	
 18310                           
 18311                           ;Buzzer_B1.c: 91: else
 18312                           ;Buzzer_B1.c: 92: {
 18313                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 18314  0B8A  0878               	movf	_Buz,w
 18315  0B8B  0086               	movwf	6
 18316  0B8C  3001               	movlw	1	; select bank2/3
 18317  0B8D  0087               	movwf	7
 18318  0B8E  1281               	bcf	1,5
 18319                           
 18320                           ;Buzzer_B1.c: 95: RB3=0;
 18321  0B8F  118D               	bcf	13,3	;volatile
 18322                           
 18323                           ;Buzzer_B1.c: 97: Buz->Count--;
 18324  0B90  0878               	movf	_Buz,w
 18325  0B91  3E03               	addlw	3
 18326  0B92  0086               	movwf	6
 18327  0B93  3001               	movlw	1	; select bank2/3
 18328  0B94  0087               	movwf	7
 18329  0B95  3001               	movlw	1
 18330  0B96  0281               	subwf	1,f
 18331  0B97  0008               	return
 18332  0B98                     __end_of_Buzzer_Main:	
 18333                           
 18334                           	psect	text118
 18335  2731                     __ptext118:	
 18336 ;; *************** function _Buzzer_Initialization *****************
 18337 ;; Defined at:
 18338 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18339 ;; Parameters:    Size  Location     Type
 18340 ;;		None
 18341 ;; Auto vars:     Size  Location     Type
 18342 ;;		None
 18343 ;; Return value:  Size  Location     Type
 18344 ;;		None               void
 18345 ;; Registers used:
 18346 ;;		wreg, fsr1l, fsr1h
 18347 ;; Tracked objects:
 18348 ;;		On entry : 0/0
 18349 ;;		On exit  : 0/0
 18350 ;;		Unchanged: 0/0
 18351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18356 ;;Total ram usage:        1 bytes
 18357 ;; Hardware stack levels used:    1
 18358 ;; Hardware stack levels required when called:    4
 18359 ;; This function calls:
 18360 ;;		Nothing
 18361 ;; This function is called by:
 18362 ;;		_main
 18363 ;; This function uses a non-reentrant model
 18364 ;;
 18365                           
 18366                           
 18367                           ;psect for function _Buzzer_Initialization
 18368  2731                     _Buzzer_Initialization:	
 18369                           
 18370                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 18371                           
 18372                           ;incstack = 0
 18373                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 18374  2731  304E               	movlw	_Buz1& (0+255)
 18375  2732  0020               	movlb	0	; select bank0
 18376  2733  00A0               	movwf	??_Buzzer_Initialization
 18377  2734  0820               	movf	??_Buzzer_Initialization,w
 18378  2735  00F8               	movwf	_Buz
 18379                           
 18380                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 18381  2736  0878               	movf	_Buz,w
 18382  2737  0086               	movwf	6
 18383  2738  3001               	movlw	1	; select bank2/3
 18384  2739  0087               	movwf	7
 18385  273A  1401               	bsf	1,0
 18386  273B  0008               	return
 18387  273C                     __end_of_Buzzer_Initialization:	
 18388                           
 18389                           	psect	intentry
 18390  0004                     __pintentry:	
 18391 ;; *************** function _ISR *****************
 18392 ;; Defined at:
 18393 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 18394 ;; Parameters:    Size  Location     Type
 18395 ;;		None
 18396 ;; Auto vars:     Size  Location     Type
 18397 ;;		None
 18398 ;; Return value:  Size  Location     Type
 18399 ;;		None               void
 18400 ;; Registers used:
 18401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18402 ;; Tracked objects:
 18403 ;;		On entry : 0/0
 18404 ;;		On exit  : 0/0
 18405 ;;		Unchanged: 0/0
 18406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18409 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18410 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18411 ;;Total ram usage:        1 bytes
 18412 ;; Hardware stack levels used:    1
 18413 ;; Hardware stack levels required when called:    3
 18414 ;; This function calls:
 18415 ;;		_INT_ISR
 18416 ;;		_IOC_ISR
 18417 ;;		_TMR0_ISR
 18418 ;; This function is called by:
 18419 ;;		Interrupt level 1
 18420 ;; This function uses a non-reentrant model
 18421 ;;
 18422                           
 18423  0004                     _ISR:	
 18424                           
 18425                           ;incstack = 0
 18426                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18427  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18428  0005  3180               	pagesel	$
 18429  0006  0020               	movlb	0	; select bank0
 18430  0007  087F               	movf	127,w
 18431  0008  00F7               	movwf	??_ISR
 18432                           
 18433                           ;MCU_16f1518_B1.c: 58: IOC_ISR();
 18434  0009  3199  2180  3180   	fcall	_IOC_ISR
 18435                           
 18436                           ;MCU_16f1518_B1.c: 60: TMR0_ISR();
 18437  000C  3184  242F  3180   	fcall	_TMR0_ISR
 18438                           
 18439                           ;MCU_16f1518_B1.c: 62: ;;
 18440                           ;MCU_16f1518_B1.c: 66: INT_ISR();
 18441  000F  31A7  2774         	fcall	_INT_ISR
 18442  0011  0877               	movf	??_ISR,w
 18443  0012  0020               	movlb	0	; select bank0
 18444  0013  00FF               	movwf	127
 18445  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 18446  0015  0009               	retfie
 18447  0016                     __end_of_ISR:	
 18448                           
 18449                           	psect	text120
 18450  042F                     __ptext120:	
 18451 ;; *************** function _TMR0_ISR *****************
 18452 ;; Defined at:
 18453 ;;		line 82 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 18454 ;; Parameters:    Size  Location     Type
 18455 ;;		None
 18456 ;; Auto vars:     Size  Location     Type
 18457 ;;		None
 18458 ;; Return value:  Size  Location     Type
 18459 ;;		None               void
 18460 ;; Registers used:
 18461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18462 ;; Tracked objects:
 18463 ;;		On entry : 0/0
 18464 ;;		On exit  : 0/0
 18465 ;;		Unchanged: 0/0
 18466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18469 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18470 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18471 ;;Total ram usage:        4 bytes
 18472 ;; Hardware stack levels used:    1
 18473 ;; Hardware stack levels required when called:    1
 18474 ;; This function calls:
 18475 ;;		i1_setLoad_StatusOff
 18476 ;; This function is called by:
 18477 ;;		_ISR
 18478 ;; This function uses a non-reentrant model
 18479 ;;
 18480                           
 18481                           
 18482                           ;psect for function _TMR0_ISR
 18483  042F                     _TMR0_ISR:	
 18484                           
 18485                           ;MCU_16f1518_B1.c: 84: if(TMR0IE && TMR0IF)
 18486                           
 18487                           ;incstack = 0
 18488                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18489  042F  1E8B               	btfss	11,5	;volatile
 18490  0430  0008               	return
 18491  0431  1D0B               	btfss	11,2	;volatile
 18492  0432  0008               	return
 18493                           
 18494                           ;MCU_16f1518_B1.c: 85: {
 18495                           ;MCU_16f1518_B1.c: 86: TMR0=(256-90);
 18496  0433  30A6               	movlw	166
 18497  0434  0020               	movlb	0	; select bank0
 18498  0435  0095               	movwf	21	;volatile
 18499                           
 18500                           ;MCU_16f1518_B1.c: 87: TMR0IF=0;
 18501  0436  110B               	bcf	11,2	;volatile
 18502                           
 18503                           ;MCU_16f1518_B1.c: 100: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLight
      +                          s11->Count >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count
      +                          =0; DimmerLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=0
      +                          ; ;; if(Di
 18504  0437  0879               	movf	_DimmerLights11,w
 18505  0438  0086               	movwf	6
 18506  0439  3001               	movlw	1	; select bank2/3
 18507  043A  0087               	movwf	7
 18508  043B  1C01               	btfss	1,0
 18509  043C  2CAB               	goto	i1l7731
 18510  043D  3001               	movlw	1
 18511  043E  00F3               	movwf	??_TMR0_ISR
 18512  043F  0879               	movf	_DimmerLights11,w
 18513  0440  3E03               	addlw	3
 18514  0441  0086               	movwf	6
 18515  0442  3001               	movlw	1	; select bank2/3
 18516  0443  0087               	movwf	7
 18517  0444  0873               	movf	??_TMR0_ISR,w
 18518  0445  0781               	addwf	1,f
 18519  0446  0021               	movlb	1	; select bank1
 18520  0447  0839               	movf	_Dimmer^(0+128),w
 18521  0448  3E02               	addlw	2
 18522  0449  0086               	movwf	6
 18523  044A  0187               	clrf	7
 18524  044B  0801               	movf	1,w
 18525  044C  00F3               	movwf	??_TMR0_ISR
 18526  044D  01F4               	clrf	??_TMR0_ISR+1
 18527  044E  09F3               	comf	??_TMR0_ISR,f
 18528  044F  09F4               	comf	??_TMR0_ISR+1,f
 18529  0450  0AF3               	incf	??_TMR0_ISR,f
 18530  0451  1903               	skipnz
 18531  0452  0AF4               	incf	??_TMR0_ISR+1,f
 18532  0453  0879               	movf	_DimmerLights11,w
 18533  0454  3E04               	addlw	4
 18534  0455  0086               	movwf	6
 18535  0456  3001               	movlw	1	; select bank2/3
 18536  0457  0087               	movwf	7
 18537  0458  0801               	movf	1,w
 18538  0459  0773               	addwf	??_TMR0_ISR,w
 18539  045A  00F5               	movwf	??_TMR0_ISR+2
 18540  045B  0874               	movf	??_TMR0_ISR+1,w
 18541  045C  1803               	skipnc
 18542  045D  0A74               	incf	??_TMR0_ISR+1,w
 18543  045E  00F6               	movwf	??_TMR0_ISR+3
 18544  045F  0879               	movf	_DimmerLights11,w
 18545  0460  3E03               	addlw	3
 18546  0461  0086               	movwf	6
 18547  0462  3001               	movlw	1	; select bank2/3
 18548  0463  0087               	movwf	7
 18549  0464  0876               	movf	??_TMR0_ISR+3,w
 18550  0465  3A80               	xorlw	128
 18551  0466  3C80               	sublw	128
 18552  0467  1D03               	skipz
 18553  0468  2C6B               	goto	u694_25
 18554  0469  0875               	movf	??_TMR0_ISR+2,w
 18555  046A  0201               	subwf	1,w
 18556  046B                     u694_25:	
 18557  046B  1C03               	skipc
 18558  046C  2D84               	goto	i1l1555
 18559  046D  0879               	movf	_DimmerLights11,w
 18560  046E  3E03               	addlw	3
 18561  046F  0086               	movwf	6
 18562  0470  3001               	movlw	1	; select bank2/3
 18563  0471  0087               	movwf	7
 18564  0472  0181               	clrf	1
 18565  0473  0879               	movf	_DimmerLights11,w
 18566  0474  0086               	movwf	6
 18567  0475  3001               	movlw	1	; select bank2/3
 18568  0476  0087               	movwf	7
 18569  0477  1001               	bcf	1,0
 18570  0478  0879               	movf	_DimmerLights11,w
 18571  0479  3E07               	addlw	7
 18572  047A  0086               	movwf	6
 18573  047B  3001               	movlw	1	; select bank2/3
 18574  047C  0087               	movwf	7
 18575  047D  1401               	bsf	1,0
 18576  047E  0879               	movf	_DimmerLights11,w
 18577  047F  0086               	movwf	6
 18578  0480  3001               	movlw	1	; select bank2/3
 18579  0481  0087               	movwf	7
 18580  0482  1F01               	btfss	1,6
 18581  0483  2D84               	goto	i1l1555
 18582  0484  0020               	movlb	0	; select bank0
 18583  0485  138C               	bcf	12,7	;volatile
 18584  0486  0879               	movf	_DimmerLights11,w
 18585  0487  3E09               	addlw	9
 18586  0488  0086               	movwf	6
 18587  0489  3001               	movlw	1	; select bank2/3
 18588  048A  0087               	movwf	7
 18589  048B  1F01               	btfss	1,6
 18590  048C  2D84               	goto	i1l1555
 18591  048D  0879               	movf	_DimmerLights11,w
 18592  048E  3E09               	addlw	9
 18593  048F  0086               	movwf	6
 18594  0490  3001               	movlw	1	; select bank2/3
 18595  0491  0087               	movwf	7
 18596  0492  1301               	bcf	1,6
 18597  0493  0879               	movf	_DimmerLights11,w
 18598  0494  0086               	movwf	6
 18599  0495  3001               	movlw	1	; select bank2/3
 18600  0496  0087               	movwf	7
 18601  0497  1301               	bcf	1,6
 18602  0498  0879               	movf	_DimmerLights11,w
 18603  0499  3E0C               	addlw	12
 18604  049A  0086               	movwf	6
 18605  049B  3001               	movlw	1	; select bank2/3
 18606  049C  0087               	movwf	7
 18607  049D  1401               	bsf	1,0
 18608  049E  118C               	bcf	12,3	;volatile
 18609  049F  0021               	movlb	1	; select bank1
 18610  04A0  0839               	movf	_Dimmer^(0+128),w
 18611  04A1  0086               	movwf	6
 18612  04A2  0187               	clrf	7
 18613  04A3  1401               	bsf	1,0
 18614  04A4  01F1               	clrf	i1setLoad_StatusOff@command
 18615  04A5  0AF1               	incf	i1setLoad_StatusOff@command,f
 18616  04A6  3001               	movlw	1
 18617  04A7  319D  253D  3184   	fcall	i1_setLoad_StatusOff
 18618  04AA  2D84               	goto	i1l1555
 18619  04AB                     i1l7731:	
 18620  04AB  0879               	movf	_DimmerLights11,w
 18621  04AC  3E09               	addlw	9
 18622  04AD  0086               	movwf	6
 18623  04AE  3001               	movlw	1	; select bank2/3
 18624  04AF  0087               	movwf	7
 18625  04B0  1E81               	btfss	1,5
 18626  04B1  2CD0               	goto	i1l7741
 18627  04B2  3001               	movlw	1
 18628  04B3  00F3               	movwf	??_TMR0_ISR
 18629  04B4  0879               	movf	_DimmerLights11,w
 18630  04B5  3E03               	addlw	3
 18631  04B6  0086               	movwf	6
 18632  04B7  3001               	movlw	1	; select bank2/3
 18633  04B8  0087               	movwf	7
 18634  04B9  0873               	movf	??_TMR0_ISR,w
 18635  04BA  0781               	addwf	1,f
 18636  04BB  0879               	movf	_DimmerLights11,w
 18637  04BC  3E03               	addlw	3
 18638  04BD  0086               	movwf	6
 18639  04BE  3001               	movlw	1	; select bank2/3
 18640  04BF  0087               	movwf	7
 18641  04C0  3014               	movlw	20
 18642  04C1  0201               	subwf	1,w
 18643  04C2  1C03               	skipc
 18644  04C3  2CD0               	goto	i1l7741
 18645  04C4  0879               	movf	_DimmerLights11,w
 18646  04C5  3E03               	addlw	3
 18647  04C6  0086               	movwf	6
 18648  04C7  3001               	movlw	1	; select bank2/3
 18649  04C8  0087               	movwf	7
 18650  04C9  0181               	clrf	1
 18651  04CA  0879               	movf	_DimmerLights11,w
 18652  04CB  3E09               	addlw	9
 18653  04CC  0086               	movwf	6
 18654  04CD  3001               	movlw	1	; select bank2/3
 18655  04CE  0087               	movwf	7
 18656  04CF  1281               	bcf	1,5
 18657  04D0                     i1l7741:	
 18658  04D0  0879               	movf	_DimmerLights11,w
 18659  04D1  3E07               	addlw	7
 18660  04D2  0086               	movwf	6
 18661  04D3  3001               	movlw	1	; select bank2/3
 18662  04D4  0087               	movwf	7
 18663  04D5  1C01               	btfss	1,0
 18664  04D6  2D84               	goto	i1l1555
 18665  04D7  0879               	movf	_DimmerLights11,w
 18666  04D8  3E07               	addlw	7
 18667  04D9  0086               	movwf	6
 18668  04DA  3001               	movlw	1	; select bank2/3
 18669  04DB  0087               	movwf	7
 18670  04DC  1001               	bcf	1,0
 18671  04DD  0879               	movf	_DimmerLights11,w
 18672  04DE  0086               	movwf	6
 18673  04DF  3001               	movlw	1	; select bank2/3
 18674  04E0  0087               	movwf	7
 18675  04E1  1C81               	btfss	1,1
 18676  04E2  2D84               	goto	i1l1555
 18677  04E3  3001               	movlw	1
 18678  04E4  00F3               	movwf	??_TMR0_ISR
 18679  04E5  0A79               	incf	_DimmerLights11,w
 18680  04E6  0086               	movwf	6
 18681  04E7  3001               	movlw	1	; select bank2/3
 18682  04E8  0087               	movwf	7
 18683  04E9  0873               	movf	??_TMR0_ISR,w
 18684  04EA  0781               	addwf	1,f
 18685  04EB  0A79               	incf	_DimmerLights11,w
 18686  04EC  0086               	movwf	6
 18687  04ED  3001               	movlw	1	; select bank2/3
 18688  04EE  0087               	movwf	7
 18689  04EF  0879               	movf	_DimmerLights11,w
 18690  04F0  3E02               	addlw	2
 18691  04F1  0084               	movwf	4
 18692  04F2  3001               	movlw	1	; select bank2/3
 18693  04F3  0085               	movwf	5
 18694  04F4  0800               	movf	0,w
 18695  04F5  0201               	subwf	1,w
 18696  04F6  1C03               	skipc
 18697  04F7  2D84               	goto	i1l1555
 18698  04F8  0A79               	incf	_DimmerLights11,w
 18699  04F9  0086               	movwf	6
 18700  04FA  3001               	movlw	1	; select bank2/3
 18701  04FB  0087               	movwf	7
 18702  04FC  0181               	clrf	1
 18703  04FD  0879               	movf	_DimmerLights11,w
 18704  04FE  0086               	movwf	6
 18705  04FF  3001               	movlw	1	; select bank2/3
 18706  0500  0087               	movwf	7
 18707  0501  1D81               	btfss	1,3
 18708  0502  2D39               	goto	i1l7767
 18709  0503  0879               	movf	_DimmerLights11,w
 18710  0504  0086               	movwf	6
 18711  0505  3001               	movlw	1	; select bank2/3
 18712  0506  0087               	movwf	7
 18713  0507  1A01               	btfsc	1,4
 18714  0508  2D22               	goto	i1l7761
 18715  0509  0879               	movf	_DimmerLights11,w
 18716  050A  3E04               	addlw	4
 18717  050B  0086               	movwf	6
 18718  050C  3001               	movlw	1	; select bank2/3
 18719  050D  0087               	movwf	7
 18720  050E  3061               	movlw	97
 18721  050F  0201               	subwf	1,w
 18722  0510  1803               	skipnc
 18723  0511  2D1C               	goto	i1l7759
 18724  0512  3001               	movlw	1
 18725  0513  00F3               	movwf	??_TMR0_ISR
 18726  0514  0879               	movf	_DimmerLights11,w
 18727  0515  3E04               	addlw	4
 18728  0516  0086               	movwf	6
 18729  0517  3001               	movlw	1	; select bank2/3
 18730  0518  0087               	movwf	7
 18731  0519  0873               	movf	??_TMR0_ISR,w
 18732  051A  0781               	addwf	1,f
 18733  051B  2D84               	goto	i1l1555
 18734  051C                     i1l7759:	
 18735  051C  0879               	movf	_DimmerLights11,w
 18736  051D  0086               	movwf	6
 18737  051E  3001               	movlw	1	; select bank2/3
 18738  051F  0087               	movwf	7
 18739  0520  1601               	bsf	1,4
 18740  0521  2D84               	goto	i1l1555
 18741  0522                     i1l7761:	
 18742  0522  0879               	movf	_DimmerLights11,w
 18743  0523  3E04               	addlw	4
 18744  0524  0086               	movwf	6
 18745  0525  3001               	movlw	1	; select bank2/3
 18746  0526  0087               	movwf	7
 18747  0527  301F               	movlw	31
 18748  0528  0201               	subwf	1,w
 18749  0529  1C03               	skipc
 18750  052A  2D33               	goto	i1l7765
 18751  052B  0879               	movf	_DimmerLights11,w
 18752  052C  3E04               	addlw	4
 18753  052D  0086               	movwf	6
 18754  052E  3001               	movlw	1	; select bank2/3
 18755  052F  0087               	movwf	7
 18756  0530  3001               	movlw	1
 18757  0531  0281               	subwf	1,f
 18758  0532  2D84               	goto	i1l1555
 18759  0533                     i1l7765:	
 18760  0533  0879               	movf	_DimmerLights11,w
 18761  0534  0086               	movwf	6
 18762  0535  3001               	movlw	1	; select bank2/3
 18763  0536  0087               	movwf	7
 18764  0537  1201               	bcf	1,4
 18765  0538  2D84               	goto	i1l1555
 18766  0539                     i1l7767:	
 18767  0539  0879               	movf	_DimmerLights11,w
 18768  053A  0086               	movwf	6
 18769  053B  3001               	movlw	1	; select bank2/3
 18770  053C  0087               	movwf	7
 18771  053D  1D01               	btfss	1,2
 18772  053E  2D7F               	goto	i1l7781
 18773  053F  0879               	movf	_DimmerLights11,w
 18774  0540  3E04               	addlw	4
 18775  0541  0086               	movwf	6
 18776  0542  3001               	movlw	1	; select bank2/3
 18777  0543  0087               	movwf	7
 18778  0544  0879               	movf	_DimmerLights11,w
 18779  0545  3E05               	addlw	5
 18780  0546  0084               	movwf	4
 18781  0547  3001               	movlw	1	; select bank2/3
 18782  0548  0085               	movwf	5
 18783  0549  0800               	movf	0,w
 18784  054A  0201               	subwf	1,w
 18785  054B  1803               	skipnc
 18786  054C  2D57               	goto	i1l7773
 18787  054D  3001               	movlw	1
 18788  054E  00F3               	movwf	??_TMR0_ISR
 18789  054F  0879               	movf	_DimmerLights11,w
 18790  0550  3E04               	addlw	4
 18791  0551  0086               	movwf	6
 18792  0552  3001               	movlw	1	; select bank2/3
 18793  0553  0087               	movwf	7
 18794  0554  0873               	movf	??_TMR0_ISR,w
 18795  0555  0781               	addwf	1,f
 18796  0556  2D6C               	goto	i1l7777
 18797  0557                     i1l7773:	
 18798  0557  0879               	movf	_DimmerLights11,w
 18799  0558  3E05               	addlw	5
 18800  0559  0086               	movwf	6
 18801  055A  3001               	movlw	1	; select bank2/3
 18802  055B  0087               	movwf	7
 18803  055C  0879               	movf	_DimmerLights11,w
 18804  055D  3E04               	addlw	4
 18805  055E  0084               	movwf	4
 18806  055F  3001               	movlw	1	; select bank2/3
 18807  0560  0085               	movwf	5
 18808  0561  0800               	movf	0,w
 18809  0562  0201               	subwf	1,w
 18810  0563  1803               	skipnc
 18811  0564  2D6C               	goto	i1l7777
 18812  0565  0879               	movf	_DimmerLights11,w
 18813  0566  3E04               	addlw	4
 18814  0567  0086               	movwf	6
 18815  0568  3001               	movlw	1	; select bank2/3
 18816  0569  0087               	movwf	7
 18817  056A  3001               	movlw	1
 18818  056B  0281               	subwf	1,f
 18819  056C                     i1l7777:	
 18820  056C  0879               	movf	_DimmerLights11,w
 18821  056D  3E05               	addlw	5
 18822  056E  0086               	movwf	6
 18823  056F  3001               	movlw	1	; select bank2/3
 18824  0570  0087               	movwf	7
 18825  0571  0879               	movf	_DimmerLights11,w
 18826  0572  3E04               	addlw	4
 18827  0573  0084               	movwf	4
 18828  0574  3001               	movlw	1	; select bank2/3
 18829  0575  0085               	movwf	5
 18830  0576  0800               	movf	0,w
 18831  0577  0601               	xorwf	1,w
 18832  0578  1D03               	skipz
 18833  0579  2D84               	goto	i1l1555
 18834  057A  0879               	movf	_DimmerLights11,w
 18835  057B  0086               	movwf	6
 18836  057C  3001               	movlw	1	; select bank2/3
 18837  057D  0087               	movwf	7
 18838  057E  1101               	bcf	1,2
 18839  057F                     i1l7781:	
 18840  057F  0879               	movf	_DimmerLights11,w
 18841  0580  0086               	movwf	6
 18842  0581  3001               	movlw	1	; select bank2/3
 18843  0582  0087               	movwf	7
 18844  0583  1081               	bcf	1,1
 18845  0584                     i1l1555:	
 18846                           
 18847                           ;MCU_16f1518_B1.c: 104: if(DimmerLights22->GO) { DimmerLights22->Count++; if(DimmerLight
      +                          s22->Count >= (DimmerLights22->DimmingValue-Dimmer->Correction)) { DimmerLights22->Count
      +                          =0; DimmerLights22->GO=0; DimmerLights22->Flag=1; if(DimmerLights22->StatusFlag) { RB4=0
      +                          ; if(Dimme
 18848  0584  087A               	movf	_DimmerLights22,w
 18849  0585  0086               	movwf	6
 18850  0586  3001               	movlw	1	; select bank2/3
 18851  0587  0087               	movwf	7
 18852  0588  1C01               	btfss	1,0
 18853  0589  2DF8               	goto	i1l7803
 18854  058A  3001               	movlw	1
 18855  058B  00F3               	movwf	??_TMR0_ISR
 18856  058C  087A               	movf	_DimmerLights22,w
 18857  058D  3E03               	addlw	3
 18858  058E  0086               	movwf	6
 18859  058F  3001               	movlw	1	; select bank2/3
 18860  0590  0087               	movwf	7
 18861  0591  0873               	movf	??_TMR0_ISR,w
 18862  0592  0781               	addwf	1,f
 18863  0593  0021               	movlb	1	; select bank1
 18864  0594  0839               	movf	_Dimmer^(0+128),w
 18865  0595  3E02               	addlw	2
 18866  0596  0086               	movwf	6
 18867  0597  0187               	clrf	7
 18868  0598  0801               	movf	1,w
 18869  0599  00F3               	movwf	??_TMR0_ISR
 18870  059A  01F4               	clrf	??_TMR0_ISR+1
 18871  059B  09F3               	comf	??_TMR0_ISR,f
 18872  059C  09F4               	comf	??_TMR0_ISR+1,f
 18873  059D  0AF3               	incf	??_TMR0_ISR,f
 18874  059E  1903               	skipnz
 18875  059F  0AF4               	incf	??_TMR0_ISR+1,f
 18876  05A0  087A               	movf	_DimmerLights22,w
 18877  05A1  3E04               	addlw	4
 18878  05A2  0086               	movwf	6
 18879  05A3  3001               	movlw	1	; select bank2/3
 18880  05A4  0087               	movwf	7
 18881  05A5  0801               	movf	1,w
 18882  05A6  0773               	addwf	??_TMR0_ISR,w
 18883  05A7  00F5               	movwf	??_TMR0_ISR+2
 18884  05A8  0874               	movf	??_TMR0_ISR+1,w
 18885  05A9  1803               	skipnc
 18886  05AA  0A74               	incf	??_TMR0_ISR+1,w
 18887  05AB  00F6               	movwf	??_TMR0_ISR+3
 18888  05AC  087A               	movf	_DimmerLights22,w
 18889  05AD  3E03               	addlw	3
 18890  05AE  0086               	movwf	6
 18891  05AF  3001               	movlw	1	; select bank2/3
 18892  05B0  0087               	movwf	7
 18893  05B1  0876               	movf	??_TMR0_ISR+3,w
 18894  05B2  3A80               	xorlw	128
 18895  05B3  3C80               	sublw	128
 18896  05B4  1D03               	skipz
 18897  05B5  2DB8               	goto	u711_25
 18898  05B6  0875               	movf	??_TMR0_ISR+2,w
 18899  05B7  0201               	subwf	1,w
 18900  05B8                     u711_25:	
 18901  05B8  1C03               	skipc
 18902  05B9  2ED1               	goto	i1l7855
 18903  05BA  087A               	movf	_DimmerLights22,w
 18904  05BB  3E03               	addlw	3
 18905  05BC  0086               	movwf	6
 18906  05BD  3001               	movlw	1	; select bank2/3
 18907  05BE  0087               	movwf	7
 18908  05BF  0181               	clrf	1
 18909  05C0  087A               	movf	_DimmerLights22,w
 18910  05C1  0086               	movwf	6
 18911  05C2  3001               	movlw	1	; select bank2/3
 18912  05C3  0087               	movwf	7
 18913  05C4  1001               	bcf	1,0
 18914  05C5  087A               	movf	_DimmerLights22,w
 18915  05C6  3E07               	addlw	7
 18916  05C7  0086               	movwf	6
 18917  05C8  3001               	movlw	1	; select bank2/3
 18918  05C9  0087               	movwf	7
 18919  05CA  1401               	bsf	1,0
 18920  05CB  087A               	movf	_DimmerLights22,w
 18921  05CC  0086               	movwf	6
 18922  05CD  3001               	movlw	1	; select bank2/3
 18923  05CE  0087               	movwf	7
 18924  05CF  1F01               	btfss	1,6
 18925  05D0  2ED1               	goto	i1l7855
 18926  05D1  0020               	movlb	0	; select bank0
 18927  05D2  120D               	bcf	13,4	;volatile
 18928  05D3  087A               	movf	_DimmerLights22,w
 18929  05D4  3E09               	addlw	9
 18930  05D5  0086               	movwf	6
 18931  05D6  3001               	movlw	1	; select bank2/3
 18932  05D7  0087               	movwf	7
 18933  05D8  1F01               	btfss	1,6
 18934  05D9  2ED1               	goto	i1l7855
 18935  05DA  087A               	movf	_DimmerLights22,w
 18936  05DB  3E09               	addlw	9
 18937  05DC  0086               	movwf	6
 18938  05DD  3001               	movlw	1	; select bank2/3
 18939  05DE  0087               	movwf	7
 18940  05DF  1301               	bcf	1,6
 18941  05E0  087A               	movf	_DimmerLights22,w
 18942  05E1  0086               	movwf	6
 18943  05E2  3001               	movlw	1	; select bank2/3
 18944  05E3  0087               	movwf	7
 18945  05E4  1301               	bcf	1,6
 18946  05E5  087A               	movf	_DimmerLights22,w
 18947  05E6  3E0C               	addlw	12
 18948  05E7  0086               	movwf	6
 18949  05E8  3001               	movlw	1	; select bank2/3
 18950  05E9  0087               	movwf	7
 18951  05EA  1401               	bsf	1,0
 18952  05EB  138E               	bcf	14,7	;volatile
 18953  05EC  0021               	movlb	1	; select bank1
 18954  05ED  0839               	movf	_Dimmer^(0+128),w
 18955  05EE  0086               	movwf	6
 18956  05EF  0187               	clrf	7
 18957  05F0  1401               	bsf	1,0
 18958  05F1  01F1               	clrf	i1setLoad_StatusOff@command
 18959  05F2  0AF1               	incf	i1setLoad_StatusOff@command,f
 18960  05F3  3002               	movlw	2
 18961  05F4  319D  253D  3184   	fcall	i1_setLoad_StatusOff
 18962  05F7  2ED1               	goto	i1l7855
 18963  05F8                     i1l7803:	
 18964  05F8  087A               	movf	_DimmerLights22,w
 18965  05F9  3E09               	addlw	9
 18966  05FA  0086               	movwf	6
 18967  05FB  3001               	movlw	1	; select bank2/3
 18968  05FC  0087               	movwf	7
 18969  05FD  1E81               	btfss	1,5
 18970  05FE  2E1D               	goto	i1l7813
 18971  05FF  3001               	movlw	1
 18972  0600  00F3               	movwf	??_TMR0_ISR
 18973  0601  087A               	movf	_DimmerLights22,w
 18974  0602  3E03               	addlw	3
 18975  0603  0086               	movwf	6
 18976  0604  3001               	movlw	1	; select bank2/3
 18977  0605  0087               	movwf	7
 18978  0606  0873               	movf	??_TMR0_ISR,w
 18979  0607  0781               	addwf	1,f
 18980  0608  087A               	movf	_DimmerLights22,w
 18981  0609  3E03               	addlw	3
 18982  060A  0086               	movwf	6
 18983  060B  3001               	movlw	1	; select bank2/3
 18984  060C  0087               	movwf	7
 18985  060D  3014               	movlw	20
 18986  060E  0201               	subwf	1,w
 18987  060F  1C03               	skipc
 18988  0610  2E1D               	goto	i1l7813
 18989  0611  087A               	movf	_DimmerLights22,w
 18990  0612  3E03               	addlw	3
 18991  0613  0086               	movwf	6
 18992  0614  3001               	movlw	1	; select bank2/3
 18993  0615  0087               	movwf	7
 18994  0616  0181               	clrf	1
 18995  0617  087A               	movf	_DimmerLights22,w
 18996  0618  3E09               	addlw	9
 18997  0619  0086               	movwf	6
 18998  061A  3001               	movlw	1	; select bank2/3
 18999  061B  0087               	movwf	7
 19000  061C  1281               	bcf	1,5
 19001  061D                     i1l7813:	
 19002  061D  087A               	movf	_DimmerLights22,w
 19003  061E  3E07               	addlw	7
 19004  061F  0086               	movwf	6
 19005  0620  3001               	movlw	1	; select bank2/3
 19006  0621  0087               	movwf	7
 19007  0622  1C01               	btfss	1,0
 19008  0623  2ED1               	goto	i1l7855
 19009  0624  087A               	movf	_DimmerLights22,w
 19010  0625  3E07               	addlw	7
 19011  0626  0086               	movwf	6
 19012  0627  3001               	movlw	1	; select bank2/3
 19013  0628  0087               	movwf	7
 19014  0629  1001               	bcf	1,0
 19015  062A  087A               	movf	_DimmerLights22,w
 19016  062B  0086               	movwf	6
 19017  062C  3001               	movlw	1	; select bank2/3
 19018  062D  0087               	movwf	7
 19019  062E  1C81               	btfss	1,1
 19020  062F  2ED1               	goto	i1l7855
 19021  0630  3001               	movlw	1
 19022  0631  00F3               	movwf	??_TMR0_ISR
 19023  0632  0A7A               	incf	_DimmerLights22,w
 19024  0633  0086               	movwf	6
 19025  0634  3001               	movlw	1	; select bank2/3
 19026  0635  0087               	movwf	7
 19027  0636  0873               	movf	??_TMR0_ISR,w
 19028  0637  0781               	addwf	1,f
 19029  0638  0A7A               	incf	_DimmerLights22,w
 19030  0639  0086               	movwf	6
 19031  063A  3001               	movlw	1	; select bank2/3
 19032  063B  0087               	movwf	7
 19033  063C  087A               	movf	_DimmerLights22,w
 19034  063D  3E02               	addlw	2
 19035  063E  0084               	movwf	4
 19036  063F  3001               	movlw	1	; select bank2/3
 19037  0640  0085               	movwf	5
 19038  0641  0800               	movf	0,w
 19039  0642  0201               	subwf	1,w
 19040  0643  1C03               	skipc
 19041  0644  2ED1               	goto	i1l7855
 19042  0645  0A7A               	incf	_DimmerLights22,w
 19043  0646  0086               	movwf	6
 19044  0647  3001               	movlw	1	; select bank2/3
 19045  0648  0087               	movwf	7
 19046  0649  0181               	clrf	1
 19047  064A  087A               	movf	_DimmerLights22,w
 19048  064B  0086               	movwf	6
 19049  064C  3001               	movlw	1	; select bank2/3
 19050  064D  0087               	movwf	7
 19051  064E  1D81               	btfss	1,3
 19052  064F  2E86               	goto	i1l7839
 19053  0650  087A               	movf	_DimmerLights22,w
 19054  0651  0086               	movwf	6
 19055  0652  3001               	movlw	1	; select bank2/3
 19056  0653  0087               	movwf	7
 19057  0654  1A01               	btfsc	1,4
 19058  0655  2E6F               	goto	i1l7833
 19059  0656  087A               	movf	_DimmerLights22,w
 19060  0657  3E04               	addlw	4
 19061  0658  0086               	movwf	6
 19062  0659  3001               	movlw	1	; select bank2/3
 19063  065A  0087               	movwf	7
 19064  065B  3061               	movlw	97
 19065  065C  0201               	subwf	1,w
 19066  065D  1803               	skipnc
 19067  065E  2E69               	goto	i1l7831
 19068  065F  3001               	movlw	1
 19069  0660  00F3               	movwf	??_TMR0_ISR
 19070  0661  087A               	movf	_DimmerLights22,w
 19071  0662  3E04               	addlw	4
 19072  0663  0086               	movwf	6
 19073  0664  3001               	movlw	1	; select bank2/3
 19074  0665  0087               	movwf	7
 19075  0666  0873               	movf	??_TMR0_ISR,w
 19076  0667  0781               	addwf	1,f
 19077  0668  2ED1               	goto	i1l7855
 19078  0669                     i1l7831:	
 19079  0669  087A               	movf	_DimmerLights22,w
 19080  066A  0086               	movwf	6
 19081  066B  3001               	movlw	1	; select bank2/3
 19082  066C  0087               	movwf	7
 19083  066D  1601               	bsf	1,4
 19084  066E  2ED1               	goto	i1l7855
 19085  066F                     i1l7833:	
 19086  066F  087A               	movf	_DimmerLights22,w
 19087  0670  3E04               	addlw	4
 19088  0671  0086               	movwf	6
 19089  0672  3001               	movlw	1	; select bank2/3
 19090  0673  0087               	movwf	7
 19091  0674  301F               	movlw	31
 19092  0675  0201               	subwf	1,w
 19093  0676  1C03               	skipc
 19094  0677  2E80               	goto	i1l7837
 19095  0678  087A               	movf	_DimmerLights22,w
 19096  0679  3E04               	addlw	4
 19097  067A  0086               	movwf	6
 19098  067B  3001               	movlw	1	; select bank2/3
 19099  067C  0087               	movwf	7
 19100  067D  3001               	movlw	1
 19101  067E  0281               	subwf	1,f
 19102  067F  2ED1               	goto	i1l7855
 19103  0680                     i1l7837:	
 19104  0680  087A               	movf	_DimmerLights22,w
 19105  0681  0086               	movwf	6
 19106  0682  3001               	movlw	1	; select bank2/3
 19107  0683  0087               	movwf	7
 19108  0684  1201               	bcf	1,4
 19109  0685  2ED1               	goto	i1l7855
 19110  0686                     i1l7839:	
 19111  0686  087A               	movf	_DimmerLights22,w
 19112  0687  0086               	movwf	6
 19113  0688  3001               	movlw	1	; select bank2/3
 19114  0689  0087               	movwf	7
 19115  068A  1D01               	btfss	1,2
 19116  068B  2ECC               	goto	i1l7853
 19117  068C  087A               	movf	_DimmerLights22,w
 19118  068D  3E04               	addlw	4
 19119  068E  0086               	movwf	6
 19120  068F  3001               	movlw	1	; select bank2/3
 19121  0690  0087               	movwf	7
 19122  0691  087A               	movf	_DimmerLights22,w
 19123  0692  3E05               	addlw	5
 19124  0693  0084               	movwf	4
 19125  0694  3001               	movlw	1	; select bank2/3
 19126  0695  0085               	movwf	5
 19127  0696  0800               	movf	0,w
 19128  0697  0201               	subwf	1,w
 19129  0698  1803               	skipnc
 19130  0699  2EA4               	goto	i1l7845
 19131  069A  3001               	movlw	1
 19132  069B  00F3               	movwf	??_TMR0_ISR
 19133  069C  087A               	movf	_DimmerLights22,w
 19134  069D  3E04               	addlw	4
 19135  069E  0086               	movwf	6
 19136  069F  3001               	movlw	1	; select bank2/3
 19137  06A0  0087               	movwf	7
 19138  06A1  0873               	movf	??_TMR0_ISR,w
 19139  06A2  0781               	addwf	1,f
 19140  06A3  2EB9               	goto	i1l7849
 19141  06A4                     i1l7845:	
 19142  06A4  087A               	movf	_DimmerLights22,w
 19143  06A5  3E05               	addlw	5
 19144  06A6  0086               	movwf	6
 19145  06A7  3001               	movlw	1	; select bank2/3
 19146  06A8  0087               	movwf	7
 19147  06A9  087A               	movf	_DimmerLights22,w
 19148  06AA  3E04               	addlw	4
 19149  06AB  0084               	movwf	4
 19150  06AC  3001               	movlw	1	; select bank2/3
 19151  06AD  0085               	movwf	5
 19152  06AE  0800               	movf	0,w
 19153  06AF  0201               	subwf	1,w
 19154  06B0  1803               	skipnc
 19155  06B1  2EB9               	goto	i1l7849
 19156  06B2  087A               	movf	_DimmerLights22,w
 19157  06B3  3E04               	addlw	4
 19158  06B4  0086               	movwf	6
 19159  06B5  3001               	movlw	1	; select bank2/3
 19160  06B6  0087               	movwf	7
 19161  06B7  3001               	movlw	1
 19162  06B8  0281               	subwf	1,f
 19163  06B9                     i1l7849:	
 19164  06B9  087A               	movf	_DimmerLights22,w
 19165  06BA  3E05               	addlw	5
 19166  06BB  0086               	movwf	6
 19167  06BC  3001               	movlw	1	; select bank2/3
 19168  06BD  0087               	movwf	7
 19169  06BE  087A               	movf	_DimmerLights22,w
 19170  06BF  3E04               	addlw	4
 19171  06C0  0084               	movwf	4
 19172  06C1  3001               	movlw	1	; select bank2/3
 19173  06C2  0085               	movwf	5
 19174  06C3  0800               	movf	0,w
 19175  06C4  0601               	xorwf	1,w
 19176  06C5  1D03               	skipz
 19177  06C6  2ED1               	goto	i1l7855
 19178  06C7  087A               	movf	_DimmerLights22,w
 19179  06C8  0086               	movwf	6
 19180  06C9  3001               	movlw	1	; select bank2/3
 19181  06CA  0087               	movwf	7
 19182  06CB  1101               	bcf	1,2
 19183  06CC                     i1l7853:	
 19184  06CC  087A               	movf	_DimmerLights22,w
 19185  06CD  0086               	movwf	6
 19186  06CE  3001               	movlw	1	; select bank2/3
 19187  06CF  0087               	movwf	7
 19188  06D0  1081               	bcf	1,1
 19189  06D1                     i1l7855:	
 19190                           
 19191                           ;MCU_16f1518_B1.c: 113: Timer0->Count++;
 19192  06D1  0021               	movlb	1	; select bank1
 19193  06D2  0A69               	incf	_Timer0^(0+128),w
 19194  06D3  0086               	movwf	6
 19195  06D4  0187               	clrf	7
 19196  06D5  3001               	movlw	1
 19197  06D6  0781               	addwf	1,f
 19198  06D7  3141               	addfsr 1,1
 19199  06D8  1803               	skipnc
 19200  06D9  0A81               	incf	1,f
 19201                           
 19202                           ;MCU_16f1518_B1.c: 114: if(Timer0->Count == 200)
 19203  06DA  0A69               	incf	_Timer0^(0+128),w
 19204  06DB  0086               	movwf	6
 19205  06DC  0187               	clrf	7
 19206  06DD  3F40               	moviw [0]fsr1
 19207  06DE  3AC8               	xorlw	200
 19208  06DF  1D03               	skipz
 19209  06E0  2EE3               	goto	u727_25
 19210  06E1  3F41               	moviw [1]fsr1
 19211  06E2  3A00               	xorlw	0
 19212  06E3                     u727_25:	
 19213  06E3  1D03               	skipz
 19214  06E4  2EF0               	goto	i1l1599
 19215                           
 19216                           ;MCU_16f1518_B1.c: 115: {
 19217                           ;MCU_16f1518_B1.c: 116: Timer0->Count=0;
 19218  06E5  0A69               	incf	_Timer0^(0+128),w
 19219  06E6  0086               	movwf	6
 19220  06E7  0187               	clrf	7
 19221  06E8  3000               	movlw	0
 19222  06E9  3FC0               	movwi [0]fsr1
 19223  06EA  3FC1               	movwi [1]fsr1
 19224                           
 19225                           ;MCU_16f1518_B1.c: 117: TMain->T0_Timerout=1;
 19226  06EB  087D               	movf	_TMain,w
 19227  06EC  0086               	movwf	6
 19228  06ED  3001               	movlw	1	; select bank2/3
 19229  06EE  0087               	movwf	7
 19230  06EF  1481               	bsf	1,1
 19231  06F0                     i1l1599:	
 19232                           
 19233                           ;MCU_16f1518_B1.c: 118: }
 19234                           ;MCU_16f1518_B1.c: 121: if(Buz->GO)
 19235  06F0  0878               	movf	_Buz,w
 19236  06F1  0086               	movwf	6
 19237  06F2  3001               	movlw	1	; select bank2/3
 19238  06F3  0087               	movwf	7
 19239  06F4  1C81               	btfss	1,1
 19240  06F5  0008               	return
 19241                           
 19242                           ;MCU_16f1518_B1.c: 122: {
 19243                           ;MCU_16f1518_B1.c: 123: Buz->Time++;
 19244  06F6  0A78               	incf	_Buz,w
 19245  06F7  0086               	movwf	6
 19246  06F8  3001               	movlw	1	; select bank2/3
 19247  06F9  0087               	movwf	7
 19248  06FA  3001               	movlw	1
 19249  06FB  0781               	addwf	1,f
 19250  06FC  3141               	addfsr 1,1
 19251  06FD  1803               	skipnc
 19252  06FE  0A81               	incf	1,f
 19253  06FF  0008               	return
 19254  0700                     __end_of_TMR0_ISR:	
 19255                           
 19256                           	psect	text121
 19257  1D3D                     __ptext121:	
 19258 ;; *************** function i1_setLoad_StatusOff *****************
 19259 ;; Defined at:
 19260 ;;		line 284 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 19261 ;; Parameters:    Size  Location     Type
 19262 ;;  lights          1    wreg     unsigned char 
 19263 ;;  command         1    0[COMMON] unsigned char 
 19264 ;; Auto vars:     Size  Location     Type
 19265 ;;  lights          1    1[COMMON] unsigned char 
 19266 ;; Return value:  Size  Location     Type
 19267 ;;		None               void
 19268 ;; Registers used:
 19269 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19270 ;; Tracked objects:
 19271 ;;		On entry : 0/0
 19272 ;;		On exit  : 0/0
 19273 ;;		Unchanged: 0/0
 19274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19275 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19276 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19278 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19279 ;;Total ram usage:        2 bytes
 19280 ;; Hardware stack levels used:    1
 19281 ;; This function calls:
 19282 ;;		Nothing
 19283 ;; This function is called by:
 19284 ;;		_TMR0_ISR
 19285 ;; This function uses a non-reentrant model
 19286 ;;
 19287                           
 19288                           
 19289                           ;psect for function i1_setLoad_StatusOff
 19290  1D3D                     i1_setLoad_StatusOff:	
 19291                           
 19292                           ;incstack = 0
 19293                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 19294                           ;i1setLoad_StatusOff@lights stored from wreg
 19295  1D3D  00F2               	movwf	i1setLoad_StatusOff@lights
 19296                           
 19297                           ;OverLoad_B1.c: 286: Load->StatusOff=command;
 19298  1D3E  0020               	movlb	0	; select bank0
 19299  1D3F  086E               	movf	_Load,w
 19300  1D40  3E46               	addlw	70
 19301  1D41  0086               	movwf	6
 19302  1D42  3002               	movlw	2	; select bank4/5
 19303  1D43  0087               	movwf	7
 19304  1D44  0871               	movf	i1setLoad_StatusOff@command,w
 19305  1D45  1081               	bcf	1,1
 19306  1D46  1D03               	skipz
 19307  1D47  1481               	bsf	1,1
 19308                           
 19309                           ;OverLoad_B1.c: 287: Load->SafeCount-=2;
 19310  1D48  086E               	movf	_Load,w
 19311  1D49  3E42               	addlw	66
 19312  1D4A  0086               	movwf	6
 19313  1D4B  3002               	movlw	2	; select bank4/5
 19314  1D4C  0087               	movwf	7
 19315  1D4D  3002               	movlw	2
 19316  1D4E  0281               	subwf	1,f
 19317                           
 19318                           ;OverLoad_B1.c: 288: if(lights == 1)
 19319  1D4F  0872               	movf	i1setLoad_StatusOff@lights,w
 19320  1D50  3A01               	xorlw	1
 19321  1D51  1D03               	skipz
 19322  1D52  2D59               	goto	i1l7293
 19323                           
 19324                           ;OverLoad_B1.c: 289: {
 19325                           ;OverLoad_B1.c: 290: Load->Lights1Status=0;
 19326  1D53  086E               	movf	_Load,w
 19327  1D54  3E43               	addlw	67
 19328  1D55  0086               	movwf	6
 19329  1D56  3002               	movlw	2	; select bank4/5
 19330  1D57  0087               	movwf	7
 19331  1D58  0181               	clrf	1
 19332  1D59                     i1l7293:	
 19333                           
 19334                           ;OverLoad_B1.c: 291: }
 19335                           ;OverLoad_B1.c: 292: if(lights == 2)
 19336  1D59  0872               	movf	i1setLoad_StatusOff@lights,w
 19337  1D5A  3A02               	xorlw	2
 19338  1D5B  1D03               	skipz
 19339  1D5C  2D63               	goto	i1l7297
 19340                           
 19341                           ;OverLoad_B1.c: 293: {
 19342                           ;OverLoad_B1.c: 294: Load->Lights2Status=0;
 19343  1D5D  086E               	movf	_Load,w
 19344  1D5E  3E44               	addlw	68
 19345  1D5F  0086               	movwf	6
 19346  1D60  3002               	movlw	2	; select bank4/5
 19347  1D61  0087               	movwf	7
 19348  1D62  0181               	clrf	1
 19349  1D63                     i1l7297:	
 19350                           
 19351                           ;OverLoad_B1.c: 295: }
 19352                           ;OverLoad_B1.c: 296: if(lights == 3)
 19353  1D63  0872               	movf	i1setLoad_StatusOff@lights,w
 19354  1D64  3A03               	xorlw	3
 19355  1D65  1D03               	skipz
 19356  1D66  0008               	return
 19357                           
 19358                           ;OverLoad_B1.c: 297: {
 19359                           ;OverLoad_B1.c: 298: Load->Lights3Status=0;
 19360  1D67  086E               	movf	_Load,w
 19361  1D68  3E45               	addlw	69
 19362  1D69  0086               	movwf	6
 19363  1D6A  3002               	movlw	2	; select bank4/5
 19364  1D6B  0087               	movwf	7
 19365  1D6C  0181               	clrf	1
 19366  1D6D  0008               	return
 19367  1D6E                     __end_ofi1_setLoad_StatusOff:	
 19368                           
 19369                           	psect	text122
 19370  1980                     __ptext122:	
 19371 ;; *************** function _IOC_ISR *****************
 19372 ;; Defined at:
 19373 ;;		line 309 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 19374 ;; Parameters:    Size  Location     Type
 19375 ;;		None
 19376 ;; Auto vars:     Size  Location     Type
 19377 ;;		None
 19378 ;; Return value:  Size  Location     Type
 19379 ;;		None               void
 19380 ;; Registers used:
 19381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19382 ;; Tracked objects:
 19383 ;;		On entry : 0/0
 19384 ;;		On exit  : 0/0
 19385 ;;		Unchanged: 0/0
 19386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19391 ;;Total ram usage:        0 bytes
 19392 ;; Hardware stack levels used:    1
 19393 ;; Hardware stack levels required when called:    1
 19394 ;; This function calls:
 19395 ;;		_setDimmerReClock
 19396 ;; This function is called by:
 19397 ;;		_ISR
 19398 ;; This function uses a non-reentrant model
 19399 ;;
 19400                           
 19401                           
 19402                           ;psect for function _IOC_ISR
 19403  1980                     _IOC_ISR:	
 19404                           
 19405                           ;MCU_16f1518_B1.c: 311: if(IOCIE && IOCBF2)
 19406                           
 19407                           ;incstack = 0
 19408                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19409  1980  1D8B               	btfss	11,3	;volatile
 19410  1981  0008               	return
 19411  1982  0027               	movlb	7	; select bank7
 19412  1983  1D16               	btfss	22,2	;volatile
 19413  1984  0008               	return
 19414                           
 19415                           ;MCU_16f1518_B1.c: 312: {
 19416                           ;MCU_16f1518_B1.c: 313: IOCBF2=0;
 19417  1985  1116               	bcf	22,2	;volatile
 19418                           
 19419                           ;MCU_16f1518_B1.c: 314: IOCIF=0;
 19420  1986  100B               	bcf	11,0	;volatile
 19421                           
 19422                           ;MCU_16f1518_B1.c: 315: if(TMain->PowerON)
 19423  1987  087D               	movf	_TMain,w
 19424  1988  0086               	movwf	6
 19425  1989  3001               	movlw	1	; select bank2/3
 19426  198A  0087               	movwf	7
 19427  198B  1C01               	btfss	1,0
 19428  198C  0008               	return
 19429                           
 19430                           ;MCU_16f1518_B1.c: 316: {
 19431                           ;MCU_16f1518_B1.c: 332: Dimmer->Correction=0;
 19432  198D  0021               	movlb	1	; select bank1
 19433  198E  0839               	movf	_Dimmer^(0+128),w
 19434  198F  3E02               	addlw	2
 19435  1990  0086               	movwf	6
 19436  1991  0187               	clrf	7
 19437  1992  0181               	clrf	1
 19438                           
 19439                           ;MCU_16f1518_B1.c: 333: setDimmerReClock();
 19440  1993  319D  25D1         	fcall	_setDimmerReClock
 19441  1995  0008               	return
 19442  1996                     __end_of_IOC_ISR:	
 19443                           
 19444                           	psect	text123
 19445  1DD1                     __ptext123:	
 19446 ;; *************** function _setDimmerReClock *****************
 19447 ;; Defined at:
 19448 ;;		line 129 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 19449 ;; Parameters:    Size  Location     Type
 19450 ;;		None
 19451 ;; Auto vars:     Size  Location     Type
 19452 ;;		None
 19453 ;; Return value:  Size  Location     Type
 19454 ;;		None               void
 19455 ;; Registers used:
 19456 ;;		wreg, fsr1l, fsr1h
 19457 ;; Tracked objects:
 19458 ;;		On entry : 0/0
 19459 ;;		On exit  : 0/0
 19460 ;;		Unchanged: 0/0
 19461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19466 ;;Total ram usage:        0 bytes
 19467 ;; Hardware stack levels used:    1
 19468 ;; This function calls:
 19469 ;;		Nothing
 19470 ;; This function is called by:
 19471 ;;		_IOC_ISR
 19472 ;; This function uses a non-reentrant model
 19473 ;;
 19474                           
 19475                           
 19476                           ;psect for function _setDimmerReClock
 19477  1DD1                     _setDimmerReClock:	
 19478                           
 19479                           ;MCU_16f1518_B1.c: 131: TMR0=255;
 19480                           
 19481                           ;incstack = 0
 19482                           ; Regs used in _setDimmerReClock: [wregfsr1]
 19483  1DD1  30FF               	movlw	255
 19484  1DD2  0020               	movlb	0	; select bank0
 19485  1DD3  0095               	movwf	21	;volatile
 19486                           
 19487                           ;MCU_16f1518_B1.c: 143: if(!DimmerLights11->GO && !DimmerLights11->MosfetOpen)
 19488  1DD4  0879               	movf	_DimmerLights11,w
 19489  1DD5  0086               	movwf	6
 19490  1DD6  3001               	movlw	1	; select bank2/3
 19491  1DD7  0087               	movwf	7
 19492  1DD8  1801               	btfsc	1,0
 19493  1DD9  2DEC               	goto	i1l7029
 19494  1DDA  0879               	movf	_DimmerLights11,w
 19495  1DDB  3E09               	addlw	9
 19496  1DDC  0086               	movwf	6
 19497  1DDD  3001               	movlw	1	; select bank2/3
 19498  1DDE  0087               	movwf	7
 19499  1DDF  1A81               	btfsc	1,5
 19500  1DE0  2DEC               	goto	i1l7029
 19501                           
 19502                           ;MCU_16f1518_B1.c: 144: {
 19503                           ;MCU_16f1518_B1.c: 145: DimmerLights11->GO=1;
 19504  1DE1  0879               	movf	_DimmerLights11,w
 19505  1DE2  0086               	movwf	6
 19506  1DE3  3001               	movlw	1	; select bank2/3
 19507  1DE4  0087               	movwf	7
 19508  1DE5  1401               	bsf	1,0
 19509                           
 19510                           ;MCU_16f1518_B1.c: 146: if(DimmerLights11->StatusFlag)
 19511  1DE6  0879               	movf	_DimmerLights11,w
 19512  1DE7  0086               	movwf	6
 19513  1DE8  3001               	movlw	1	; select bank2/3
 19514  1DE9  0087               	movwf	7
 19515  1DEA  1B01               	btfsc	1,6
 19516                           
 19517                           ;MCU_16f1518_B1.c: 147: {
 19518                           ;MCU_16f1518_B1.c: 148: RA7=1;
 19519  1DEB  178C               	bsf	12,7	;volatile
 19520  1DEC                     i1l7029:	
 19521                           ;MCU_16f1518_B1.c: 149: ;;
 19522                           
 19523                           
 19524                           ;MCU_16f1518_B1.c: 162: }
 19525                           ;MCU_16f1518_B1.c: 163: }
 19526                           ;MCU_16f1518_B1.c: 176: if(!DimmerLights22->GO && !DimmerLights22->MosfetOpen)
 19527  1DEC  087A               	movf	_DimmerLights22,w
 19528  1DED  0086               	movwf	6
 19529  1DEE  3001               	movlw	1	; select bank2/3
 19530  1DEF  0087               	movwf	7
 19531  1DF0  1801               	btfsc	1,0
 19532  1DF1  0008               	return
 19533  1DF2  087A               	movf	_DimmerLights22,w
 19534  1DF3  3E09               	addlw	9
 19535  1DF4  0086               	movwf	6
 19536  1DF5  3001               	movlw	1	; select bank2/3
 19537  1DF6  0087               	movwf	7
 19538  1DF7  1A81               	btfsc	1,5
 19539  1DF8  0008               	return
 19540                           
 19541                           ;MCU_16f1518_B1.c: 177: {
 19542                           ;MCU_16f1518_B1.c: 178: DimmerLights22->GO=1;
 19543  1DF9  087A               	movf	_DimmerLights22,w
 19544  1DFA  0086               	movwf	6
 19545  1DFB  3001               	movlw	1	; select bank2/3
 19546  1DFC  0087               	movwf	7
 19547  1DFD  1401               	bsf	1,0
 19548                           
 19549                           ;MCU_16f1518_B1.c: 179: if(DimmerLights22->StatusFlag)
 19550  1DFE  087A               	movf	_DimmerLights22,w
 19551  1DFF  0086               	movwf	6
 19552  1E00  3001               	movlw	1	; select bank2/3
 19553  1E01  0087               	movwf	7
 19554  1E02  1F01               	btfss	1,6
 19555  1E03  0008               	return
 19556                           
 19557                           ;MCU_16f1518_B1.c: 180: {
 19558                           ;MCU_16f1518_B1.c: 181: RB4=1;
 19559  1E04  160D               	bsf	13,4	;volatile
 19560  1E05  0008               	return
 19561  1E06                     __end_of_setDimmerReClock:	
 19562                           
 19563                           	psect	text124
 19564  2774                     __ptext124:	
 19565 ;; *************** function _INT_ISR *****************
 19566 ;; Defined at:
 19567 ;;		line 260 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 19568 ;; Parameters:    Size  Location     Type
 19569 ;;		None
 19570 ;; Auto vars:     Size  Location     Type
 19571 ;;		None
 19572 ;; Return value:  Size  Location     Type
 19573 ;;		None               void
 19574 ;; Registers used:
 19575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19576 ;; Tracked objects:
 19577 ;;		On entry : 0/0
 19578 ;;		On exit  : 0/0
 19579 ;;		Unchanged: 0/0
 19580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19585 ;;Total ram usage:        0 bytes
 19586 ;; Hardware stack levels used:    1
 19587 ;; Hardware stack levels required when called:    2
 19588 ;; This function calls:
 19589 ;;		_setRF_ReceiveGO
 19590 ;; This function is called by:
 19591 ;;		_ISR
 19592 ;; This function uses a non-reentrant model
 19593 ;;
 19594                           
 19595                           
 19596                           ;psect for function _INT_ISR
 19597  2774                     _INT_ISR:	
 19598                           
 19599                           ;MCU_16f1518_B1.c: 262: if(INTE && INTF)
 19600                           
 19601                           ;incstack = 0
 19602                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19603  2774  1E0B               	btfss	11,4	;volatile
 19604  2775  0008               	return
 19605  2776  1C8B               	btfss	11,1	;volatile
 19606  2777  0008               	return
 19607                           
 19608                           ;MCU_16f1518_B1.c: 263: {
 19609                           ;MCU_16f1518_B1.c: 264: INTF=0;
 19610  2778  108B               	bcf	11,1	;volatile
 19611                           
 19612                           ;MCU_16f1518_B1.c: 265: INTE=0;
 19613  2779  120B               	bcf	11,4	;volatile
 19614                           
 19615                           ;MCU_16f1518_B1.c: 266: setRF_ReceiveGO(1,1);
 19616  277A  01F3               	clrf	setRF_ReceiveGO@command
 19617  277B  0AF3               	incf	setRF_ReceiveGO@command,f
 19618  277C  3001               	movlw	1
 19619  277D  31A7  2768         	fcall	_setRF_ReceiveGO
 19620  277F  0008               	return
 19621  2780                     __end_of_INT_ISR:	
 19622                           
 19623                           	psect	text125
 19624  2768                     __ptext125:	
 19625 ;; *************** function _setRF_ReceiveGO *****************
 19626 ;; Defined at:
 19627 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 19628 ;; Parameters:    Size  Location     Type
 19629 ;;  rf              1    wreg     unsigned char 
 19630 ;;  command         1    2[COMMON] unsigned char 
 19631 ;; Auto vars:     Size  Location     Type
 19632 ;;  rf              1    3[COMMON] unsigned char 
 19633 ;; Return value:  Size  Location     Type
 19634 ;;		None               void
 19635 ;; Registers used:
 19636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19637 ;; Tracked objects:
 19638 ;;		On entry : 0/0
 19639 ;;		On exit  : 0/0
 19640 ;;		Unchanged: 0/0
 19641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19642 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19645 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19646 ;;Total ram usage:        2 bytes
 19647 ;; Hardware stack levels used:    1
 19648 ;; Hardware stack levels required when called:    1
 19649 ;; This function calls:
 19650 ;;		i1_RfPointSelect
 19651 ;; This function is called by:
 19652 ;;		_INT_ISR
 19653 ;; This function uses a non-reentrant model
 19654 ;;
 19655                           
 19656                           
 19657                           ;psect for function _setRF_ReceiveGO
 19658  2768                     _setRF_ReceiveGO:	
 19659                           
 19660                           ;incstack = 0
 19661                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19662                           ;setRF_ReceiveGO@rf stored from wreg
 19663  2768  00F4               	movwf	setRF_ReceiveGO@rf
 19664                           
 19665                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 19666  2769  0874               	movf	setRF_ReceiveGO@rf,w
 19667  276A  3187  27F6         	fcall	i1_RfPointSelect
 19668                           
 19669                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 19670  276C  087B               	movf	_RF,w
 19671  276D  0086               	movwf	6
 19672  276E  0187               	clrf	7
 19673  276F  0873               	movf	setRF_ReceiveGO@command,w
 19674  2770  1081               	bcf	1,1
 19675  2771  1D03               	skipz
 19676  2772  1481               	bsf	1,1
 19677  2773  0008               	return
 19678  2774                     __end_of_setRF_ReceiveGO:	
 19679                           
 19680                           	psect	text126
 19681  07F6                     __ptext126:	
 19682 ;; *************** function i1_RfPointSelect *****************
 19683 ;; Defined at:
 19684 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 19685 ;; Parameters:    Size  Location     Type
 19686 ;;  rf              1    wreg     unsigned char 
 19687 ;; Auto vars:     Size  Location     Type
 19688 ;;  rf              1    1[COMMON] unsigned char 
 19689 ;; Return value:  Size  Location     Type
 19690 ;;		None               void
 19691 ;; Registers used:
 19692 ;;		wreg
 19693 ;; Tracked objects:
 19694 ;;		On entry : 0/0
 19695 ;;		On exit  : 0/0
 19696 ;;		Unchanged: 0/0
 19697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19702 ;;Total ram usage:        2 bytes
 19703 ;; Hardware stack levels used:    1
 19704 ;; This function calls:
 19705 ;;		Nothing
 19706 ;; This function is called by:
 19707 ;;		_setRF_ReceiveGO
 19708 ;; This function uses a non-reentrant model
 19709 ;;
 19710                           
 19711                           
 19712                           ;psect for function i1_RfPointSelect
 19713  07F6                     i1_RfPointSelect:	
 19714                           
 19715                           ;incstack = 0
 19716                           ; Regs used in i1_RfPointSelect: [wreg]
 19717                           ;i1RfPointSelect@rf stored from wreg
 19718  07F6  00F2               	movwf	i1RfPointSelect@rf
 19719                           
 19720                           ;RF_Control_B1.c: 10: if(rf == 1)
 19721  07F7  0872               	movf	i1RfPointSelect@rf,w
 19722  07F8  3A01               	xorlw	1
 19723  07F9  1D03               	skipz
 19724  07FA  0008               	return
 19725                           
 19726                           ;RF_Control_B1.c: 11: {
 19727                           ;RF_Control_B1.c: 12: RF=&RF1;
 19728  07FB  30E4               	movlw	_RF1& (0+255)
 19729  07FC  00F1               	movwf	??i1_RfPointSelect
 19730  07FD  0871               	movf	??i1_RfPointSelect,w
 19731  07FE  00FB               	movwf	_RF
 19732  07FF  0008               	return
 19733  0800                     __end_ofi1_RfPointSelect:	
 19734  007E                     btemp	set	126	;btemp
 19735  007E                     pic14e$flags	set	126
 19736  007E                     wtemp	set	126
 19737  007E                     wtemp0	set	126
 19738  0080                     wtemp1	set	128
 19739  0082                     wtemp2	set	130
 19740  0084                     wtemp3	set	132
 19741  0086                     wtemp4	set	134
 19742  0088                     wtemp5	set	136
 19743  007F                     wtemp6	set	127
 19744  007E                     ttemp	set	126
 19745  007E                     ttemp0	set	126
 19746  0081                     ttemp1	set	129
 19747  0084                     ttemp2	set	132
 19748  0087                     ttemp3	set	135
 19749  007F                     ttemp4	set	127
 19750  007E                     ltemp	set	126
 19751  007E                     ltemp0	set	126
 19752  0082                     ltemp1	set	130
 19753  0086                     ltemp2	set	134
 19754  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      74
    BANK2            80      0      76
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 7
		 -> NULL(NULL[0]), VarTimer0(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK2[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getLoad_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   92124
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                         _getLoad_AD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     470
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     139
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   22104
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   22104
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9690
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    9103
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     1     1      0    1258
                                              4 BANK0      1     1      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     260
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     916
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     916
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29064
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29064
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28060
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1487
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26520
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10784
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     981
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    1840
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    7560
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6064
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     106
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     269
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_Exceptions                              1     1      0    4587
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerERROR                         2     1      1     353
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_ERROR                                2     2      0    2659
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     414
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1013
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1013
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10538
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10459
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    7025
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setLoad_StatusOff                                    2     1      1     362
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1637
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     885
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      79
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10231
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10231
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     568
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     645
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     491
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setBuz                                               4     2      2    1434
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      75
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      75
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     270
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     140
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     140
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0       0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _getLoad_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     180      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     180      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Sep 23 16:21:51 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _RD 0CA8  
                                     _RF 007B                  __end_of_CC2500_WriteREG 1A0B  
                                     _WR 0CA9                                       _Sw 006D  
     __end_of_getDimmerLights_StatusFlag 19C2               _getDimmerLights_StatusFlag 19AC  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 125D  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1D9F  
                   _setDimmerLights_Main 16F4                             ___ftadd@sign 0048  
                                    l300 1FF5                                      l311 1393  
                                    l307 1382                                      l324 1D31  
                                    l327 1D37                                      l291 1FC3  
                                    l357 19E5                                      l381 188E  
                                    l358 19E7                                      l296 1FED  
                                    l393 1B96                                      l369 19FA  
                                    l297 1FF2                                      l387 1A60  
                                    l674 1CDC                                      l835 1911  
                                    l882 1352                                      _GIE 005F  
                                    _CRC 00B7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0015  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00BB                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00E4  
                                    _ISR 0004                                      _Sw1 015A  
                                    _Sw2 0163                                      _Buz 0078  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 19F2  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2731  
                        __end_of_ADC_Set 26F8                          ?_DelayTimejudge 0071  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0A57                    _setDimmerLights_ERROR 10F7  
                  _setDimmerLights_AdjRF 1B6E                    _setDimmerLights_AdjGo 18D6  
                  _setDimmerLights_Clear 18B6                                     ?_ISR 0071  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1996  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l3103 12EE                 ?_DimmerLightsPointSelect 0071  
                                   l3132 079F                                     l3109 1305  
                                   l1632 080A                          __end_of_IOC_Set 27CA  
                                   l2437 109E                                     l2455 19A1  
                                   l1841 1F5E                                     l2641 26D3  
                                   l1658 1D06                                     l1834 0360  
                                   l2469 1EDC                                     l6211 1AA4  
                                   l2942 1AB4                                     l6209 1A9E  
                                   l6307 1ECA                                     l6083 1230  
                                   l8005 163F                                     l6173 1E13  
                                   l6093 124F                                     l6343 19BC  
                                   l8103 1DC5                                     l5711 072F  
                                   l6087 1236                                     l8009 165D  
                                   l8033 14A4                                     l6089 1243  
                                   l7331 0B8A                                     l8051 126D  
                                   l5707 0728                                     l7325 0B7D  
                                   l5661 12C4                                     l5805 0C1F  
                                   l9101 1F2E                                     l5741 077E  
                                   l5717 073E                                     l7319 0B55  
                                   l7327 0B83                                     l5903 17F7  
                                   l8055 1273                                     l8135 0ABE  
                                   l7271 1E50                                     l6463 1FD5  
                                   l5735 076B                                     l5665 12CB  
                                   l8081 12A5                                     l8065 1283  
                                   l8073 128F                                     l8145 1D8A  
                                   l7281 1E6B                                     l9113 007C  
                                   l5753 07B1                                     l5737 0775  
                                   l5729 0758                                     l5841 0CB1  
                                   l5825 0C6E                                     l8161 08BB  
                                   l5675 12F3                                     l5667 12D5  
                                   l8059 1279                                     l9203 02CD  
                                   l8315 13A5                                     l5747 0791  
                                   l5739 077A                                     l5819 0C58  
                                   l8171 08DF                                     l9043 0A13  
                                   l8341 1BA7                                     l5925 19CE  
                                   l5677 12FB                                     l5669 12DA  
                                   l8085 12AB                                     l8069 1289  
                                   l8149 1D94                                     l7277 1E62  
                                   l7269 1E44                                     l9221 034A  
                                   l8317 13BD                                     l5757 07C3  
                                   l5749 079B                                     l5853 0CCD  
                                   l5837 0CA9                                     l5941 1CC8  
                                   l5933 1CBC                                     l9037 09E2  
                                   l8343 1BB2                                     l5695 1B13  
                                   l5783 0BC5                                     l9135 00F7  
                                   l5767 07DE                                     l8175 08F5  
                                   l9047 0A1B                                     l5777 0BAF  
                                   l8089 12B1                                     l8353 1F8D  
                                   l9129 00C9                                     l8329 13D6  
                                   l5849 0CC5                                     l5945 1CCE  
                                   l5937 1CC2                                     l8513 14BE  
                                   l8099 1DBA                                     l8419 1CEC  
                                   l8371 1345                                     l9227 0366  
                                   l9155 01A8                                     l8283 09AF  
                                   l8275 099D                                     l9059 0A52  
                                   l5797 0C06                                     l5869 1792  
                                   l8373 134A                                     l9149 018C  
                                   l9157 01C0                                     l5949 1CD4  
                                   l8269 0981                                     l8461 10BC  
                                   l8517 14CE                                     l5895 17DD  
                                   l5887 17C2                                     l5991 1938  
                                   l5975 1B36                                     l8367 1332  
                                   l9183 025E                                     l9079 1568  
                                   l8287 09B8                                     l8279 09A6  
                                   l5897 17E6                                     l5889 17D0  
                                   l9177 0246                                     l8473 10D2  
                                   l8537 1510                                     l5899 17E9  
                                   l5979 1B41                                     l6963 1EA4  
                                   l9195 0295                                     l8803 084E  
                                   l8653 1710                                     l8901 0F78  
                                   l9293 117C                                     l8671 1746  
                                   l6967 1EAB                                     l8831 0893  
                                   l8815 0869                                     l8911 0FAB  
                                   l8665 1734                                     l8649 1703  
                                   l8753 1401                                     l8817 086D  
                                   l8569 15DF                                     l9289 116F  
                                   l8683 1772                                     l8747 13EA  
                                   l8851 0EBD                                     l8757 1441  
                                   l8861 0ECD                                     l8853 0EC3  
                                   l8863 0ED5                                     l7985 1AAE  
                                   l8793 0831                                     _CFGS 0CAE  
                                   l8789 082A                                     l8877 0F02  
                                   l8983 0E36                                     l8887 0F34  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 2780  
                                   _LATC 010E                                     u4015 0792  
                                   u4105 0C07                                     u4115 0C16  
                                   u4125 0C20                                     u4205 0CB8  
                                   u4305 17C3                                     u4235 0CCE  
                                   u4085 0BD7                                     u4245 0CD4  
                                   u4165 0C7A                                     u4095 0BE7  
                                   u4335 17DE                                     u4175 0C8A  
                                   u4275 1799                                     u4195 0CB2  
                                   _PEIE 005E                                     u3805 130C  
                                   _INTE 005C                                     _INTF 0059  
                                   u3735 12D0                                     u3755 12E9  
                                   u3925 0759                                     u3775 12F6  
                                   u6335 1E47                                     u6355 1E51  
                                   u3955 076C                                     u6445 0B16  
                                   u6365 1E5B                                     u6375 1E63  
                                   u9015 0143                                     u7425 1AB5  
                                   u3985 077F                                     u7435 1ABA  
                                   u9065 01D8                                     u7490 1453  
                                   u7495 1451                                     u7760 272F  
                                   u7935 1B9C                                     u8905 157D  
                                   u8825 09FD                                     u8945 1F15  
                                   u8865 0A3E                                     _LWLO 0CAD  
                                   _RFSW 00BC                                     u8895 153C  
                                   _TMR0 0015                          __end_of_INT_Set 26DE  
                                   _RSSI 00BD                                     _WREN 0CAA  
                                   _Buz1 014E                                     _Load 006E  
                                   _main 114E                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 16F4                          __end_of_RF_Main 26D3  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1DD1  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0022  
                          _RfPointSelect 2747               __end_of_setRFSW_AdjControl 1EF2  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                         __end_of_LED_Main 27B0  
                  ?_setDimmerLights_Main 0071                          ?_setDelayOff_GO 0023  
                  __end_of_setLoad_Count 1980                                    ?_main 0071  
              setControl_Lights_Table@rf 0067                          __end_of___ftadd 07F6  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0C41  
                        __end_of___ftmul 0CF5                          __end_of___fttol 1800  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1E72                   _setDimmerLights_Switch 1896  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E7  
                                  _RFSW2 00E8                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0071                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0031  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _TMain 007D  
                          setRF_Learn@rf 0023                                    _MainT 1523  
                                  _Load1 0220                            __CFG_WRT$HALF 0000  
                       __end_of_TMR0_ISR 0700             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 27D7                                    _getAD 0800  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 1380  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 18C6              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 0380  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0071                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1907                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1449  
            __size_of_Flash_Memory_Write 002F                   ??_MainT_Initialization 0020  
                      ?_CC2500_SIDLEMode 0071               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0071                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0071                setDimmerLights_Main@clear 0065  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 11A6                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0071  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 11A6                      ?_setRF_DimmerLights 005D  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0AF0                     _setSw_Initialization 270F  
             __size_of_setLoad_StatusOff 0031                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0071  
                _setControl_Lights_Table 092E                   ?_Buzzer_Initialization 0071  
                ??_DlyOff_Initialization 0022                               _Receive_GO 0381  
                             _Receive_OK 0382                                ??_IOC_ISR 0071  
                 ?_setDimmerLights_ERROR 0071                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 191A                                   ?_MainT 0071  
                 ?_setDimmerLights_AdjRF 0071                                ??_INT_ISR 0075  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 18D6                        i1RfPointSelect@rf 0072  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 167B                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0071                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1B2A                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 131C                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 18A6                                   i1l1555 0584  
                                 i1l1599 06F0                                   i1l7029 1DEC  
                                 i1l7293 1D59                                   i1l7297 1D63  
                                 i1l7803 05F8                                   i1l7731 04AB  
                                 i1l7813 061D                                   i1l7741 04D0  
                                 i1l7831 0669                                   i1l7833 066F  
                                 i1l7761 0522                                   i1l7845 06A4  
                                 i1l7853 06CC                                   i1l7837 0680  
                                 i1l7773 0557                                   i1l7781 057F  
                                 i1l7765 0533                                   i1l7839 0686  
                                 i1l7855 06D1                                   i1l7759 051C  
                                 i1l7767 0539                                   i1l7849 06B9  
                                 i1l7777 056C                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u711_25 05B8  
                                 _OSCCON 0099                       __size_of_Load_Main 03E0  
                                 u727_25 06E3                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   u694_25 046B  
                                 _IO_Set 1A24                       DelayTime_1us@count 0020  
                             _VarProduct 01C5                    _Dimmer_Initialization 26EA  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1956  
                                 _Dimmer 00B9                                   _DlySw1 00CB  
                                 _DlySw2 00D0              __size_of_setLoad_Exceptions 0043  
             __end_of_Mcu_Initialization 1018                      __end_of_Buzzer_Main 0B98  
                                 _Memory 007C                                   _Timer0 00E9  
     __end_of_setDimmerLights_TriggerAdj 18F6               _setDimmerLights_TriggerAdj 18E6  
          setDimmerLights_Switch@command 0022                                   ___wmul 1AAB  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0017  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0071                                ??___lwdiv 0024  
                        i1_RfPointSelect 07F6              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C2  
                                 _s_data 00C3                                   _setLED 125D  
                       _DimmerLightsIntr 00BA                    ?_setSw_Initialization 0071  
                  setDimmerLights@status 0024                                   _setBuz 1604  
            __end_of_Load_Initialization 27BD         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0071                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 1941                          ?_setLoad_Enable 0071  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 1996  
           __size_of_Flash_Memory_Modify 0065              __size_of_DimmerLights_Close 001A  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 26D3  
                      ?_Sw_DimmerAdjFunc 0071              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1201  
       __end_of_CC2500_registers_address 182F                  __end_of__initialization 004B  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0071                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0071                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0071                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                            __end_of_MainT 1593  
                             ___fttol@f1 004B                           __pcstackCOMMON 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 1AE8  
                          __end_of_getAD 0816                                ?_TMR0_ISR 0071  
                              ?_TMR0_Set 0071                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 2798  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0064  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0071  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                      __end_of_Load_Main 042F                 __end_of_setDimmerReClock 1E06  
                     __size_of_getRxData 0052                      ?_LED_Initialization 0071  
                      ?_CC2500_WriteByte 0071                                  ??_MainT 002A  
                         ??_setRF_Enable 0023                           _DimmerLights11 0079  
                         _DimmerLights22 007A                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006C                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                              _Buzzer_Main 0AF0  
                      ??_setRFSW_Control 0062                   ?_Dimmer_Initialization 0071  
                                ?_IO_Set 0071                               ??_LED_Main 0025  
                _DelayOff_Initialization 26FF                               __pnvCOMMON 007C  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 0800                      i1_setLoad_StatusOff 1D3D  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 114E                      _CC2500_WriteCommand 1886  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0073                               ??_TMR0_Set 0020  
                             _getLoad_AD 09C1                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C9                  ?_setDimmerLights_Switch 0022  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 26F1                                  ?_setBuz 0026  
                              ?___awtoft 0028                                ?___ftpack 0020  
           __end_of_setRF_Initialization 26FF                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1EB2                  __end_of_RfSWPointSelect 19AC  
                      Sw_DimmerOnFunc@sw 0063                     ?i1_setLoad_StatusOff 0071  
                                _IOC_ISR 1980                                  _IOC_Set 27BD  
                   __size_of_setLog_Code 0047                                  _INT_ISR 2774  
                                _INT_Set 26D8                     ?_CC2500_WriteCommand 0071  
                      _Flash_Memory_Main 1EF2                        _Flash_Memory_Read 1A0B  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0071      setDimmerLights_TriggerERROR@command 0022  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 26CF                       ?_Flash_Memory_Main 0071  
                     ?_Flash_Memory_Read 0071          __end_of_setControl_Lights_Table 09C1  
                            ?_TouchPower 0071                          _Sw_DimmerOnFunc 14B4  
                        _setPercentValue 1018                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002B                         ?_getPercentValue 0071  
                                _Dimmer1 00E1             __end_of_CC2500_FrequencyCabr 278C  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D9  
                                _VarLED2 00DD                        __end_of_getRxData 10F7  
               _CC2500_registers_address 1800                           RF_RxDisable@rf 0024  
        __end_of_setDimmerLights_Trigger 18B6                                  _Product 006F  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 18A6  
                                ___ftadd 0700                           ??_setSw_Enable 0022  
                                ___ftdiv 0B98                          __size_of___wmul 001E  
                                ___ftmul 0C41                                  ___fttol 1779  
                    __end_of_Switch_Main 271F                                  ___lwdiv 1E3B  
                ??_Buzzer_Initialization 0020                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0077                           ??_setSw_Status 0023  
                                __ptext1 09C1                                  __ptext2 0800  
                                __ptext3 2717                                  __ptext4 0EA6  
                                __ptext5 27F2                                  __ptext6 14B4  
                                __ptext7 1593                                  __ptext8 1BB7  
                                __ptext9 18E6                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0072                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1F35                __end_of_Flash_Memory_Read 1A24  
                             _setRF_Main 0816                            _DelayOff_Main 2707  
                      _DimmerLights_Main 275D                        __end_of_setINT_GO 2731  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 2747                        ??_setRF_ReceiveGO 0074  
             __end_of_CC2500_ClearRXFIFO 26C3               __end_of_CC2500_ClearTXFIFO 26C7  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0071  
                     ?_DimmerLights_Main 0071                           _LedPointSelect 1B2A  
                    _DelayOffPointSelect 19C2                                  clrloop0 26E5  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 27E4  
                   end_of_initialization 004B                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 2752                        _CC2500_InitSetREG 1C04  
                          _DelayTime_1us 1B91                        __end_of_setTxData 0DBE  
             __end_of_Flash_Memory_Write 1D0D                                  init_ram 26DE  
                     ?_CC2500_InitSetREG 0071                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 26DF  
                             _setSw_Main 0EA6                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 1A57                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 18F6  
                          _CC2500_Enable 0380                         ?i1_RfPointSelect 0071  
                     ?_CC2500_ReadStatus 0071                         setRFSW_Status@sw 0023  
          __size_of_MainT_Initialization 0013                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 1380                            _CC2500_TxData 1FBC  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1C58  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0071                      _Flash_Memory_Modify 13E4  
                _DimmerLights_Exceptions 131C                              ?_getLoad_AD 0071  
                           __pstringtext 1800                      _Flash_Memory_Unlock 271F  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0071  
                       _setLoad_StatusOn 1D9F         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 2768  
                     _Mcu_Initialization 1001                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0071  
                       ?_RfSWPointSelect 0071                          _setSw_Main$4284 0067  
                        _setSw_Main$4285 0068                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1B4C                  __end_of_Sw_DimmerOnFunc 1523  
                __end_of_setPercentValue 105E                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1C2E                      ?_Mcu_Initialization 0071  
                   ?_Flash_Memory_Modify 0071              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1F78  
                   ?_Flash_Memory_Unlock 0071                __end_of_CC2500_ReadStatus 1A72  
                          ?_RF_RxDisable 0071               __end_of_setLoad_Exceptions 1F78  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1A3D  
                   _setRF_Initialization 26F8                              _Switch_Main 2717  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0071                           ?_CC2500_TxData 0071  
                _DimmerLightsPointSelect 1907                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1941                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0026                     setRF_DimmerLights@on 005D  
                         __end_of___wmul 1AC9                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 02D1                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0085                           __end_of_setLED 12BB  
                         __end_of_setBuz 167B                            _setLoad_Count 196B  
        _getDimmerLights_StatusFlag$1710 0022                     _CC2500_FrequencyCabr 2780  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 0071  
             __size_of_Flash_Memory_Main 0043               __size_of_Flash_Memory_Read 0019  
                            ?_setRF_Main 0071                          _setRFSW_Control 089E  
                      ?_setDimmerReClock 0071                      start_initialization 0018  
                      _setRF_DimmerValue 1E06                          ?_LedPointSelect 0071  
             __end_of_DimmerLights_Close 1A57                                _Load_Main 004F  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
                     ??_setDimmerReClock 0071                       ?_setRF_DimmerValue 0071  
             __end_of_CC2500_InitPATable 1AE8                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                              ?_setLoad_GO 0071  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1A8E  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0071                                 ??_IO_Set 0020  
                              _VarErrLED 00D5                              ?_setSw_Main 0071  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0071  
                   __end_of_setSw_Status 1886                       Sw_DimmerAdjFunc@sw 0024  
                  ?_setRF_Initialization 0071                i1setLoad_StatusOff@lights 0072  
                              _VarMemory 01A0                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 2752                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00C4                ??_DimmerLights_Exceptions 002A  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C0  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                               ?_ADC_Set 0071                                 ??_setBuz 0028  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0071                         _CC2500_SIDLEMode 26C7  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 1E3B  
                  ?_CC2500_FrequencyCabr 0071                         setINT_GO@command 0020  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0071  
                        _setRF_Main$3956 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0071                                ___latbits 0003  
                             ?_Load_Main 0071                                 ?_INT_ISR 0071  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0071  
                          __pcstackBANK0 0020                                 ?_INT_Set 0071  
                       ?_setPercentValue 0071                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0099  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0071             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0130  
                          _DimmerLights2 013F                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 0022                    __size_of_setRF_Enable 002A  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1B6E  
                __size_of_setRF_RxStatus 000E                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                                __pnvBANK1 00E9  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0071  
                    __size_of_setRF_Main 0088                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0071  
    __end_of_Flash_Memory_Initialization 0EA6              _Flash_Memory_Initialization 0DBE  
                              __ptext100 1604                                __ptext101 1AAB  
                              __ptext110 19F2                                __ptext102 26FF  
                              __ptext111 2780                                __ptext103 273C  
                              __ptext120 042F                                __ptext112 1B91  
                              __ptext104 19C2                                __ptext121 1D3D  
                              __ptext113 26C3                                __ptext105 1941  
                              __ptext122 1980                                __ptext114 26BF  
                              __ptext106 26C7                                __ptext123 1DD1  
                              __ptext115 1886                                __ptext107 1D0D  
                              __ptext124 2774                                __ptext116 19D9  
                              __ptext108 1C04                                __ptext125 2768  
                              __ptext117 0AF0                                __ptext109 1AC9  
                               ?___ftadd 003E                                __ptext126 07F6  
                              __ptext118 2731                                _getRxData 10A5  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 092E                          _setRF_ReceiveGO 2768  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 273C  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002A                       __end_of_TouchPower 26D8  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0021  
                    __size_of_setSw_Main 015A            __end_of_setDimmerLights_ERROR 114E  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1B91  
          __end_of_setDimmerLights_AdjGo 18E6                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 18C6  
                         __size_of_MainT 0070                                _r_address 00C1  
           __end_of_CC2500_patable_vaule 1866                           __size_of_getAD 0016  
                           _setRF_Enable 1C2E                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002E                            _SwPointSelect 192D  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 2728  
                    __end_of_setLED_Main 1EB2                 __end_of_setLoad_StatusOn 1DD1  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 27A4  
                        SwPointSelect@sw 0021                                clear_ram0 26E4  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0CF5  
    __end_of_DimmerLights_Initialization 196B              _DimmerLights_Initialization 1956  
                     _CC2500_ClearRXFIFO 26BF                       _CC2500_ClearTXFIFO 26C3  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 2800  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0073              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1CDE                               ?_getRxData 0071  
                               _TMR0_ISR 042F                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1D6E                        setRF_ReceiveGO@rf 0074  
                               _TMR0_Set 27CA                         _Sw_DimmerAdjFunc 1BB7  
                    ?_CC2500_ClearRXFIFO 0071                      ?_CC2500_ClearTXFIFO 0071  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1C04  
            __end_of_CC2500_WriteCommand 1896                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0071                         _Sw_DimmerOffFunc 1593  
           __end_of_MainT_Initialization 192D                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 0069                              ??_Load_Main 002D  
                       __size_of_IOC_ISR 0016                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 2798                           ?_SwPointSelect 0071  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 10A5  
                  _DlyOff_Initialization 273C                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0071                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 185E  
                       __size_of_RF_Main 0004                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0A57                    _Switch_Initialization 27D7  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1868                     __size_of_Buzzer_Main 00A8  
                             ?_setTxData 0071                             ?_Switch_Main 0071  
                       _CC2500_WriteByte 19D9                                 _VarTMain 0120  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 2774                        setRFSW_Control@sw 0063  
                    _Load_Initialization 27B0                                setLED@led 0023  
                               _RxStatus 0383     __end_of_setDimmerLights_TriggerERROR 1C83  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1C58  
                               _TxStatus 0386                       _setLoad_Exceptions 1F35  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0071  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1A72  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000A  
                               ___awtoft 1B08                         ??_LedPointSelect 0020  
                               ___ftpack 12BB                             _setSw_Status 1877  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1E72                      ?_setLoad_Exceptions 0071  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 14B4  
               ?_DelayOff_Initialization 0071                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0071  
                        ___lwdiv@counter 0027                                 __ptext10 18D6  
                               __ptext11 27D7                                 __ptext20 1201  
                               __ptext12 270F                                 __ptext21 1CB0  
                               __ptext13 26D3                                 __ptext30 1380  
                               __ptext22 1EB2                                 __ptext14 26CF  
                               __ptext31 27E4                                 __ptext23 1E06  
                               __ptext15 0816                                 __ptext40 26D8  
                               __ptext32 1A57                                 __ptext24 1B6E  
                               __ptext16 10A5                                 __ptext41 26F1  
                               __ptext33 1A8E                                 __ptext25 11A6  
                               __ptext17 105E                                 __ptext50 131C  
                               __ptext42 191A                                 __ptext34 26CB  
                               __ptext26 0C41                                 __ptext18 092E  
                               __ptext51 1C58                                 __ptext43 1523  
                               __ptext35 26F8                                 __ptext27 0700  
                               __ptext19 089E                                 __ptext60 18F6  
                               __ptext52 10F7                                 __ptext44 18C6  
                               __ptext36 1001                                 __ptext28 1BDD  
                               __ptext61 1EF2                                 __ptext53 18B6  
                               __ptext45 004F                                 __ptext37 27CA  
                               __ptext29 1FBC                                 __ptext70 1F78  
                               __ptext62 13E4                                 __ptext54 1E3B  
                               __ptext46 1F35                                 __ptext38 1A24  
                               __ptext71 1D6E                                 __ptext63 278C  
                               __ptext55 27B0                                 __ptext47 1A72  
                               __ptext39 27BD                                 __ptext80 1956  
                               __ptext72 0A57                                 __ptext64 0DBE  
                               __ptext56 1B4C                                 __ptext48 1C2E  
                               __ptext81 1C83                                 __ptext73 1D9F  
                               __ptext65 1CDE                                 __ptext57 27A4  
                               __ptext49 2728                                 __ptext90 1018  
                               __ptext82 26EA                                 __ptext74 196B  
                               __ptext66 271F                                 __ptext58 1E72  
                               __ptext91 1779                                 __ptext83 2707  
                               __ptext75 125D                                 __ptext67 1A0B  
                               __ptext59 2798                                 __ptext92 0B98  
                               __ptext84 167B                                 __ptext76 1B2A  
                               __ptext68 275D                                 __ptext93 1B08  
                               __ptext85 0CF5                                 __ptext77 1A3D  
                               __ptext69 16F4                                 __ptext94 12BB  
                               __ptext86 2747                                 __ptext78 2752  
                               __ptext95 1868                                 __ptext87 1877  
                               __ptext79 19AC                                 __ptext96 1996  
                               __ptext88 192D                                 __ptext97 18A6  
                               __ptext89 1449                                 __ptext98 1896  
                               __ptext99 1907                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1877  
          __end_of_Dimmer_Initialization 26F1             __end_of_setDimmerLights_Main 1779  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 27F2                 __end_of_CC2500_SIDLEMode 26CB  
                         _setRF_RxStatus 27E4               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 19D9               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1A3D                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0035                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 1A8E                       _CC2500_InitPATable 1AC9  
    __size_of_getDimmerLights_StatusFlag 0016            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 089E              __size_of_Mcu_Initialization 0017  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0071         setDimmerLights_TriggerAdj@lights 0023  
          ?_setDimmerLights_TriggerERROR 0022                      ?_CC2500_InitPATable 0071  
                        _CC2500_PowerRST 1D0D                       __end_of_setLoad_GO 275D  
            __end_of_Flash_Memory_Modify 1449                        ??_getPercentValue 0059  
                            _setLog_Code 105E                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 2728                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 19F2                       __end_of_setSw_Main 1000  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_GO 0384                            _Transceive_OK 0385  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0071  
                         _DelayTimejudge 1CB0                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0071  
                 __end_of_setRF_RxStatus 27F2                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1CB0  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1C83  
            __end_of_setDimmerLights_Adj 1FBC                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0073                   CC2500_InitPATable@temp 0026  
                   _MainT_Initialization 191A                    __size_of_RF_RxDisable 0027  
                      _RF_Initialization 26CB                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                     _Flash_Memory_Erasing 278C  
                     ?_RF_Initialization 0071                               _SPI0Buffer 00BF  
        __end_of_DelayOff_Initialization 2707                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 270F                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1201  
       __size_of_setControl_Lights_Table 0093                        _setLoad_StatusOff 1D6E  
                 __end_of_DelayTimejudge 1CDE                   __size_of_RfPointSelect 000B  
                      ??i1_RfPointSelect 0071     __size_of_Flash_Memory_Initialization 00E8  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1BB7                 __end_of_Sw_DimmerAdjFunc 1BDD  
                __end_of_CC2500_ReadByte 1AAB             __end_of_setSw_Initialization 2717  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 1BDD               __end_of_LED_Initialization 27A4  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
               __size_of_Sw_DimmerOnFunc 006F                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0071                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 26CF  
               __end_of_Sw_DimmerOffFunc 1604                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0071                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 13E4                    __end_of_CC2500_TxData 2000  
                  _setLoad_AH_AL_Restore 1B4C                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1D3D  
