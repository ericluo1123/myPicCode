

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Sep 22 16:56:08 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	intentry,global,class=CODE,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	dabs	1,0x7E,2
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  0116                     	;# 
   205  0117                     	;# 
   206  011D                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0197                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019C                     	;# 
   226  019C                     	;# 
   227  019D                     	;# 
   228  019E                     	;# 
   229  019F                     	;# 
   230  020D                     	;# 
   231  0210                     	;# 
   232  0211                     	;# 
   233  0211                     	;# 
   234  0212                     	;# 
   235  0212                     	;# 
   236  0213                     	;# 
   237  0213                     	;# 
   238  0214                     	;# 
   239  0214                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0216                     	;# 
   245  0217                     	;# 
   246  0217                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0298                     	;# 
   252  0298                     	;# 
   253  0299                     	;# 
   254  029A                     	;# 
   255  0394                     	;# 
   256  0395                     	;# 
   257  0396                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0095                     	;# 
   303  0096                     	;# 
   304  0097                     	;# 
   305  0099                     	;# 
   306  009A                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  010C                     	;# 
   313  010D                     	;# 
   314  010E                     	;# 
   315  0116                     	;# 
   316  0117                     	;# 
   317  011D                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  018E                     	;# 
   321  0191                     	;# 
   322  0191                     	;# 
   323  0192                     	;# 
   324  0193                     	;# 
   325  0193                     	;# 
   326  0194                     	;# 
   327  0195                     	;# 
   328  0196                     	;# 
   329  0197                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019D                     	;# 
   339  019E                     	;# 
   340  019F                     	;# 
   341  020D                     	;# 
   342  0210                     	;# 
   343  0211                     	;# 
   344  0211                     	;# 
   345  0212                     	;# 
   346  0212                     	;# 
   347  0213                     	;# 
   348  0213                     	;# 
   349  0214                     	;# 
   350  0214                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0216                     	;# 
   355  0216                     	;# 
   356  0217                     	;# 
   357  0217                     	;# 
   358  0291                     	;# 
   359  0291                     	;# 
   360  0292                     	;# 
   361  0293                     	;# 
   362  0298                     	;# 
   363  0298                     	;# 
   364  0299                     	;# 
   365  029A                     	;# 
   366  0394                     	;# 
   367  0395                     	;# 
   368  0396                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  0010                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0015                     	;# 
   399  0016                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001C                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0095                     	;# 
   414  0096                     	;# 
   415  0097                     	;# 
   416  0099                     	;# 
   417  009A                     	;# 
   418  009B                     	;# 
   419  009B                     	;# 
   420  009C                     	;# 
   421  009D                     	;# 
   422  009E                     	;# 
   423  010C                     	;# 
   424  010D                     	;# 
   425  010E                     	;# 
   426  0116                     	;# 
   427  0117                     	;# 
   428  011D                     	;# 
   429  018C                     	;# 
   430  018D                     	;# 
   431  018E                     	;# 
   432  0191                     	;# 
   433  0191                     	;# 
   434  0192                     	;# 
   435  0193                     	;# 
   436  0193                     	;# 
   437  0194                     	;# 
   438  0195                     	;# 
   439  0196                     	;# 
   440  0197                     	;# 
   441  0199                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019C                     	;# 
   448  019C                     	;# 
   449  019D                     	;# 
   450  019E                     	;# 
   451  019F                     	;# 
   452  020D                     	;# 
   453  0210                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  0212                     	;# 
   457  0212                     	;# 
   458  0213                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0216                     	;# 
   466  0216                     	;# 
   467  0217                     	;# 
   468  0217                     	;# 
   469  0291                     	;# 
   470  0291                     	;# 
   471  0292                     	;# 
   472  0293                     	;# 
   473  0298                     	;# 
   474  0298                     	;# 
   475  0299                     	;# 
   476  029A                     	;# 
   477  0394                     	;# 
   478  0395                     	;# 
   479  0396                     	;# 
   480  0FE4                     	;# 
   481  0FE5                     	;# 
   482  0FE6                     	;# 
   483  0FE7                     	;# 
   484  0FE8                     	;# 
   485  0FE9                     	;# 
   486  0FEA                     	;# 
   487  0FEB                     	;# 
   488  0FED                     	;# 
   489  0FEE                     	;# 
   490  0FEF                     	;# 
   491  0000                     	;# 
   492  0001                     	;# 
   493  0002                     	;# 
   494  0003                     	;# 
   495  0004                     	;# 
   496  0005                     	;# 
   497  0006                     	;# 
   498  0007                     	;# 
   499  0008                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000D                     	;# 
   505  000E                     	;# 
   506  0010                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0015                     	;# 
   510  0016                     	;# 
   511  0016                     	;# 
   512  0017                     	;# 
   513  0018                     	;# 
   514  0019                     	;# 
   515  001A                     	;# 
   516  001B                     	;# 
   517  001C                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0095                     	;# 
   525  0096                     	;# 
   526  0097                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009B                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  0116                     	;# 
   538  0117                     	;# 
   539  011D                     	;# 
   540  018C                     	;# 
   541  018D                     	;# 
   542  018E                     	;# 
   543  0191                     	;# 
   544  0191                     	;# 
   545  0192                     	;# 
   546  0193                     	;# 
   547  0193                     	;# 
   548  0194                     	;# 
   549  0195                     	;# 
   550  0196                     	;# 
   551  0197                     	;# 
   552  0199                     	;# 
   553  019A                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019C                     	;# 
   559  019C                     	;# 
   560  019D                     	;# 
   561  019E                     	;# 
   562  019F                     	;# 
   563  020D                     	;# 
   564  0210                     	;# 
   565  0211                     	;# 
   566  0211                     	;# 
   567  0212                     	;# 
   568  0212                     	;# 
   569  0213                     	;# 
   570  0213                     	;# 
   571  0214                     	;# 
   572  0214                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0216                     	;# 
   577  0216                     	;# 
   578  0217                     	;# 
   579  0217                     	;# 
   580  0291                     	;# 
   581  0291                     	;# 
   582  0292                     	;# 
   583  0293                     	;# 
   584  0298                     	;# 
   585  0298                     	;# 
   586  0299                     	;# 
   587  029A                     	;# 
   588  0394                     	;# 
   589  0395                     	;# 
   590  0396                     	;# 
   591  0FE4                     	;# 
   592  0FE5                     	;# 
   593  0FE6                     	;# 
   594  0FE7                     	;# 
   595  0FE8                     	;# 
   596  0FE9                     	;# 
   597  0FEA                     	;# 
   598  0FEB                     	;# 
   599  0FED                     	;# 
   600  0FEE                     	;# 
   601  0FEF                     	;# 
   602  0000                     	;# 
   603  0001                     	;# 
   604  0002                     	;# 
   605  0003                     	;# 
   606  0004                     	;# 
   607  0005                     	;# 
   608  0006                     	;# 
   609  0007                     	;# 
   610  0008                     	;# 
   611  0009                     	;# 
   612  000A                     	;# 
   613  000B                     	;# 
   614  000C                     	;# 
   615  000D                     	;# 
   616  000E                     	;# 
   617  0010                     	;# 
   618  0011                     	;# 
   619  0012                     	;# 
   620  0015                     	;# 
   621  0016                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001C                     	;# 
   629  008C                     	;# 
   630  008D                     	;# 
   631  008E                     	;# 
   632  0090                     	;# 
   633  0091                     	;# 
   634  0092                     	;# 
   635  0095                     	;# 
   636  0096                     	;# 
   637  0097                     	;# 
   638  0099                     	;# 
   639  009A                     	;# 
   640  009B                     	;# 
   641  009B                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0116                     	;# 
   649  0117                     	;# 
   650  011D                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  018E                     	;# 
   654  0191                     	;# 
   655  0191                     	;# 
   656  0192                     	;# 
   657  0193                     	;# 
   658  0193                     	;# 
   659  0194                     	;# 
   660  0195                     	;# 
   661  0196                     	;# 
   662  0197                     	;# 
   663  0199                     	;# 
   664  019A                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019C                     	;# 
   670  019C                     	;# 
   671  019D                     	;# 
   672  019E                     	;# 
   673  019F                     	;# 
   674  020D                     	;# 
   675  0210                     	;# 
   676  0211                     	;# 
   677  0211                     	;# 
   678  0212                     	;# 
   679  0212                     	;# 
   680  0213                     	;# 
   681  0213                     	;# 
   682  0214                     	;# 
   683  0214                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0216                     	;# 
   689  0217                     	;# 
   690  0217                     	;# 
   691  0291                     	;# 
   692  0291                     	;# 
   693  0292                     	;# 
   694  0293                     	;# 
   695  0298                     	;# 
   696  0298                     	;# 
   697  0299                     	;# 
   698  029A                     	;# 
   699  0394                     	;# 
   700  0395                     	;# 
   701  0396                     	;# 
   702  0FE4                     	;# 
   703  0FE5                     	;# 
   704  0FE6                     	;# 
   705  0FE7                     	;# 
   706  0FE8                     	;# 
   707  0FE9                     	;# 
   708  0FEA                     	;# 
   709  0FEB                     	;# 
   710  0FED                     	;# 
   711  0FEE                     	;# 
   712  0FEF                     	;# 
   713  0000                     	;# 
   714  0001                     	;# 
   715  0002                     	;# 
   716  0003                     	;# 
   717  0004                     	;# 
   718  0005                     	;# 
   719  0006                     	;# 
   720  0007                     	;# 
   721  0008                     	;# 
   722  0009                     	;# 
   723  000A                     	;# 
   724  000B                     	;# 
   725  000C                     	;# 
   726  000D                     	;# 
   727  000E                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0015                     	;# 
   732  0016                     	;# 
   733  0016                     	;# 
   734  0017                     	;# 
   735  0018                     	;# 
   736  0019                     	;# 
   737  001A                     	;# 
   738  001B                     	;# 
   739  001C                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  0090                     	;# 
   744  0091                     	;# 
   745  0092                     	;# 
   746  0095                     	;# 
   747  0096                     	;# 
   748  0097                     	;# 
   749  0099                     	;# 
   750  009A                     	;# 
   751  009B                     	;# 
   752  009B                     	;# 
   753  009C                     	;# 
   754  009D                     	;# 
   755  009E                     	;# 
   756  010C                     	;# 
   757  010D                     	;# 
   758  010E                     	;# 
   759  0116                     	;# 
   760  0117                     	;# 
   761  011D                     	;# 
   762  018C                     	;# 
   763  018D                     	;# 
   764  018E                     	;# 
   765  0191                     	;# 
   766  0191                     	;# 
   767  0192                     	;# 
   768  0193                     	;# 
   769  0193                     	;# 
   770  0194                     	;# 
   771  0195                     	;# 
   772  0196                     	;# 
   773  0197                     	;# 
   774  0199                     	;# 
   775  019A                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019C                     	;# 
   781  019C                     	;# 
   782  019D                     	;# 
   783  019E                     	;# 
   784  019F                     	;# 
   785  020D                     	;# 
   786  0210                     	;# 
   787  0211                     	;# 
   788  0211                     	;# 
   789  0212                     	;# 
   790  0212                     	;# 
   791  0213                     	;# 
   792  0213                     	;# 
   793  0214                     	;# 
   794  0214                     	;# 
   795  0215                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0216                     	;# 
   799  0216                     	;# 
   800  0217                     	;# 
   801  0217                     	;# 
   802  0291                     	;# 
   803  0291                     	;# 
   804  0292                     	;# 
   805  0293                     	;# 
   806  0298                     	;# 
   807  0298                     	;# 
   808  0299                     	;# 
   809  029A                     	;# 
   810  0394                     	;# 
   811  0395                     	;# 
   812  0396                     	;# 
   813  0FE4                     	;# 
   814  0FE5                     	;# 
   815  0FE6                     	;# 
   816  0FE7                     	;# 
   817  0FE8                     	;# 
   818  0FE9                     	;# 
   819  0FEA                     	;# 
   820  0FEB                     	;# 
   821  0FED                     	;# 
   822  0FEE                     	;# 
   823  0FEF                     	;# 
   824  0000                     	;# 
   825  0001                     	;# 
   826  0002                     	;# 
   827  0003                     	;# 
   828  0004                     	;# 
   829  0005                     	;# 
   830  0006                     	;# 
   831  0007                     	;# 
   832  0008                     	;# 
   833  0009                     	;# 
   834  000A                     	;# 
   835  000B                     	;# 
   836  000C                     	;# 
   837  000D                     	;# 
   838  000E                     	;# 
   839  0010                     	;# 
   840  0011                     	;# 
   841  0012                     	;# 
   842  0015                     	;# 
   843  0016                     	;# 
   844  0016                     	;# 
   845  0017                     	;# 
   846  0018                     	;# 
   847  0019                     	;# 
   848  001A                     	;# 
   849  001B                     	;# 
   850  001C                     	;# 
   851  008C                     	;# 
   852  008D                     	;# 
   853  008E                     	;# 
   854  0090                     	;# 
   855  0091                     	;# 
   856  0092                     	;# 
   857  0095                     	;# 
   858  0096                     	;# 
   859  0097                     	;# 
   860  0099                     	;# 
   861  009A                     	;# 
   862  009B                     	;# 
   863  009B                     	;# 
   864  009C                     	;# 
   865  009D                     	;# 
   866  009E                     	;# 
   867  010C                     	;# 
   868  010D                     	;# 
   869  010E                     	;# 
   870  0116                     	;# 
   871  0117                     	;# 
   872  011D                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  018E                     	;# 
   876  0191                     	;# 
   877  0191                     	;# 
   878  0192                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0194                     	;# 
   882  0195                     	;# 
   883  0196                     	;# 
   884  0197                     	;# 
   885  0199                     	;# 
   886  019A                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019C                     	;# 
   892  019C                     	;# 
   893  019D                     	;# 
   894  019E                     	;# 
   895  019F                     	;# 
   896  020D                     	;# 
   897  0210                     	;# 
   898  0211                     	;# 
   899  0211                     	;# 
   900  0212                     	;# 
   901  0212                     	;# 
   902  0213                     	;# 
   903  0213                     	;# 
   904  0214                     	;# 
   905  0214                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  0291                     	;# 
   914  0291                     	;# 
   915  0292                     	;# 
   916  0293                     	;# 
   917  0298                     	;# 
   918  0298                     	;# 
   919  0299                     	;# 
   920  029A                     	;# 
   921  0394                     	;# 
   922  0395                     	;# 
   923  0396                     	;# 
   924  0FE4                     	;# 
   925  0FE5                     	;# 
   926  0FE6                     	;# 
   927  0FE7                     	;# 
   928  0FE8                     	;# 
   929  0FE9                     	;# 
   930  0FEA                     	;# 
   931  0FEB                     	;# 
   932  0FED                     	;# 
   933  0FEE                     	;# 
   934  0FEF                     	;# 
   935  0000                     	;# 
   936  0001                     	;# 
   937  0002                     	;# 
   938  0003                     	;# 
   939  0004                     	;# 
   940  0005                     	;# 
   941  0006                     	;# 
   942  0007                     	;# 
   943  0008                     	;# 
   944  0009                     	;# 
   945  000A                     	;# 
   946  000B                     	;# 
   947  000C                     	;# 
   948  000D                     	;# 
   949  000E                     	;# 
   950  0010                     	;# 
   951  0011                     	;# 
   952  0012                     	;# 
   953  0015                     	;# 
   954  0016                     	;# 
   955  0016                     	;# 
   956  0017                     	;# 
   957  0018                     	;# 
   958  0019                     	;# 
   959  001A                     	;# 
   960  001B                     	;# 
   961  001C                     	;# 
   962  008C                     	;# 
   963  008D                     	;# 
   964  008E                     	;# 
   965  0090                     	;# 
   966  0091                     	;# 
   967  0092                     	;# 
   968  0095                     	;# 
   969  0096                     	;# 
   970  0097                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  011D                     	;# 
   984  018C                     	;# 
   985  018D                     	;# 
   986  018E                     	;# 
   987  0191                     	;# 
   988  0191                     	;# 
   989  0192                     	;# 
   990  0193                     	;# 
   991  0193                     	;# 
   992  0194                     	;# 
   993  0195                     	;# 
   994  0196                     	;# 
   995  0197                     	;# 
   996  0199                     	;# 
   997  019A                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019C                     	;# 
  1003  019C                     	;# 
  1004  019D                     	;# 
  1005  019E                     	;# 
  1006  019F                     	;# 
  1007  020D                     	;# 
  1008  0210                     	;# 
  1009  0211                     	;# 
  1010  0211                     	;# 
  1011  0212                     	;# 
  1012  0212                     	;# 
  1013  0213                     	;# 
  1014  0213                     	;# 
  1015  0214                     	;# 
  1016  0214                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0216                     	;# 
  1021  0216                     	;# 
  1022  0217                     	;# 
  1023  0217                     	;# 
  1024  0291                     	;# 
  1025  0291                     	;# 
  1026  0292                     	;# 
  1027  0293                     	;# 
  1028  0298                     	;# 
  1029  0298                     	;# 
  1030  0299                     	;# 
  1031  029A                     	;# 
  1032  0394                     	;# 
  1033  0395                     	;# 
  1034  0396                     	;# 
  1035  0FE4                     	;# 
  1036  0FE5                     	;# 
  1037  0FE6                     	;# 
  1038  0FE7                     	;# 
  1039  0FE8                     	;# 
  1040  0FE9                     	;# 
  1041  0FEA                     	;# 
  1042  0FEB                     	;# 
  1043  0FED                     	;# 
  1044  0FEE                     	;# 
  1045  0FEF                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0008                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  0010                     	;# 
  1062  0011                     	;# 
  1063  0012                     	;# 
  1064  0015                     	;# 
  1065  0016                     	;# 
  1066  0016                     	;# 
  1067  0017                     	;# 
  1068  0018                     	;# 
  1069  0019                     	;# 
  1070  001A                     	;# 
  1071  001B                     	;# 
  1072  001C                     	;# 
  1073  008C                     	;# 
  1074  008D                     	;# 
  1075  008E                     	;# 
  1076  0090                     	;# 
  1077  0091                     	;# 
  1078  0092                     	;# 
  1079  0095                     	;# 
  1080  0096                     	;# 
  1081  0097                     	;# 
  1082  0099                     	;# 
  1083  009A                     	;# 
  1084  009B                     	;# 
  1085  009B                     	;# 
  1086  009C                     	;# 
  1087  009D                     	;# 
  1088  009E                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  010E                     	;# 
  1092  0116                     	;# 
  1093  0117                     	;# 
  1094  011D                     	;# 
  1095  018C                     	;# 
  1096  018D                     	;# 
  1097  018E                     	;# 
  1098  0191                     	;# 
  1099  0191                     	;# 
  1100  0192                     	;# 
  1101  0193                     	;# 
  1102  0193                     	;# 
  1103  0194                     	;# 
  1104  0195                     	;# 
  1105  0196                     	;# 
  1106  0197                     	;# 
  1107  0199                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019C                     	;# 
  1114  019C                     	;# 
  1115  019D                     	;# 
  1116  019E                     	;# 
  1117  019F                     	;# 
  1118  020D                     	;# 
  1119  0210                     	;# 
  1120  0211                     	;# 
  1121  0211                     	;# 
  1122  0212                     	;# 
  1123  0212                     	;# 
  1124  0213                     	;# 
  1125  0213                     	;# 
  1126  0214                     	;# 
  1127  0214                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0216                     	;# 
  1132  0216                     	;# 
  1133  0217                     	;# 
  1134  0217                     	;# 
  1135  0291                     	;# 
  1136  0291                     	;# 
  1137  0292                     	;# 
  1138  0293                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  0394                     	;# 
  1144  0395                     	;# 
  1145  0396                     	;# 
  1146  0FE4                     	;# 
  1147  0FE5                     	;# 
  1148  0FE6                     	;# 
  1149  0FE7                     	;# 
  1150  0FE8                     	;# 
  1151  0FE9                     	;# 
  1152  0FEA                     	;# 
  1153  0FEB                     	;# 
  1154  0FED                     	;# 
  1155  0FEE                     	;# 
  1156  0FEF                     	;# 
  1157  0000                     	;# 
  1158  0001                     	;# 
  1159  0002                     	;# 
  1160  0003                     	;# 
  1161  0004                     	;# 
  1162  0005                     	;# 
  1163  0006                     	;# 
  1164  0007                     	;# 
  1165  0008                     	;# 
  1166  0009                     	;# 
  1167  000A                     	;# 
  1168  000B                     	;# 
  1169  000C                     	;# 
  1170  000D                     	;# 
  1171  000E                     	;# 
  1172  0010                     	;# 
  1173  0011                     	;# 
  1174  0012                     	;# 
  1175  0015                     	;# 
  1176  0016                     	;# 
  1177  0016                     	;# 
  1178  0017                     	;# 
  1179  0018                     	;# 
  1180  0019                     	;# 
  1181  001A                     	;# 
  1182  001B                     	;# 
  1183  001C                     	;# 
  1184  008C                     	;# 
  1185  008D                     	;# 
  1186  008E                     	;# 
  1187  0090                     	;# 
  1188  0091                     	;# 
  1189  0092                     	;# 
  1190  0095                     	;# 
  1191  0096                     	;# 
  1192  0097                     	;# 
  1193  0099                     	;# 
  1194  009A                     	;# 
  1195  009B                     	;# 
  1196  009B                     	;# 
  1197  009C                     	;# 
  1198  009D                     	;# 
  1199  009E                     	;# 
  1200  010C                     	;# 
  1201  010D                     	;# 
  1202  010E                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  011D                     	;# 
  1206  018C                     	;# 
  1207  018D                     	;# 
  1208  018E                     	;# 
  1209  0191                     	;# 
  1210  0191                     	;# 
  1211  0192                     	;# 
  1212  0193                     	;# 
  1213  0193                     	;# 
  1214  0194                     	;# 
  1215  0195                     	;# 
  1216  0196                     	;# 
  1217  0197                     	;# 
  1218  0199                     	;# 
  1219  019A                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019C                     	;# 
  1225  019C                     	;# 
  1226  019D                     	;# 
  1227  019E                     	;# 
  1228  019F                     	;# 
  1229  020D                     	;# 
  1230  0210                     	;# 
  1231  0211                     	;# 
  1232  0211                     	;# 
  1233  0212                     	;# 
  1234  0212                     	;# 
  1235  0213                     	;# 
  1236  0213                     	;# 
  1237  0214                     	;# 
  1238  0214                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0216                     	;# 
  1243  0216                     	;# 
  1244  0217                     	;# 
  1245  0217                     	;# 
  1246  0291                     	;# 
  1247  0291                     	;# 
  1248  0292                     	;# 
  1249  0293                     	;# 
  1250  0298                     	;# 
  1251  0298                     	;# 
  1252  0299                     	;# 
  1253  029A                     	;# 
  1254  0394                     	;# 
  1255  0395                     	;# 
  1256  0396                     	;# 
  1257  0FE4                     	;# 
  1258  0FE5                     	;# 
  1259  0FE6                     	;# 
  1260  0FE7                     	;# 
  1261  0FE8                     	;# 
  1262  0FE9                     	;# 
  1263  0FEA                     	;# 
  1264  0FEB                     	;# 
  1265  0FED                     	;# 
  1266  0FEE                     	;# 
  1267  0FEF                     	;# 
  1268  0000                     	;# 
  1269  0001                     	;# 
  1270  0002                     	;# 
  1271  0003                     	;# 
  1272  0004                     	;# 
  1273  0005                     	;# 
  1274  0006                     	;# 
  1275  0007                     	;# 
  1276  0008                     	;# 
  1277  0009                     	;# 
  1278  000A                     	;# 
  1279  000B                     	;# 
  1280  000C                     	;# 
  1281  000D                     	;# 
  1282  000E                     	;# 
  1283  0010                     	;# 
  1284  0011                     	;# 
  1285  0012                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0016                     	;# 
  1289  0017                     	;# 
  1290  0018                     	;# 
  1291  0019                     	;# 
  1292  001A                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  008C                     	;# 
  1296  008D                     	;# 
  1297  008E                     	;# 
  1298  0090                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0095                     	;# 
  1302  0096                     	;# 
  1303  0097                     	;# 
  1304  0099                     	;# 
  1305  009A                     	;# 
  1306  009B                     	;# 
  1307  009B                     	;# 
  1308  009C                     	;# 
  1309  009D                     	;# 
  1310  009E                     	;# 
  1311  010C                     	;# 
  1312  010D                     	;# 
  1313  010E                     	;# 
  1314  0116                     	;# 
  1315  0117                     	;# 
  1316  011D                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0194                     	;# 
  1326  0195                     	;# 
  1327  0196                     	;# 
  1328  0197                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019C                     	;# 
  1336  019C                     	;# 
  1337  019D                     	;# 
  1338  019E                     	;# 
  1339  019F                     	;# 
  1340  020D                     	;# 
  1341  0210                     	;# 
  1342  0211                     	;# 
  1343  0211                     	;# 
  1344  0212                     	;# 
  1345  0212                     	;# 
  1346  0213                     	;# 
  1347  0213                     	;# 
  1348  0214                     	;# 
  1349  0214                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0216                     	;# 
  1354  0216                     	;# 
  1355  0217                     	;# 
  1356  0217                     	;# 
  1357  0291                     	;# 
  1358  0291                     	;# 
  1359  0292                     	;# 
  1360  0293                     	;# 
  1361  0298                     	;# 
  1362  0298                     	;# 
  1363  0299                     	;# 
  1364  029A                     	;# 
  1365  0394                     	;# 
  1366  0395                     	;# 
  1367  0396                     	;# 
  1368  0FE4                     	;# 
  1369  0FE5                     	;# 
  1370  0FE6                     	;# 
  1371  0FE7                     	;# 
  1372  0FE8                     	;# 
  1373  0FE9                     	;# 
  1374  0FEA                     	;# 
  1375  0FEB                     	;# 
  1376  0FED                     	;# 
  1377  0FEE                     	;# 
  1378  0FEF                     	;# 
  1379  0000                     	;# 
  1380  0001                     	;# 
  1381  0002                     	;# 
  1382  0003                     	;# 
  1383  0004                     	;# 
  1384  0005                     	;# 
  1385  0006                     	;# 
  1386  0007                     	;# 
  1387  0008                     	;# 
  1388  0009                     	;# 
  1389  000A                     	;# 
  1390  000B                     	;# 
  1391  000C                     	;# 
  1392  000D                     	;# 
  1393  000E                     	;# 
  1394  0010                     	;# 
  1395  0011                     	;# 
  1396  0012                     	;# 
  1397  0015                     	;# 
  1398  0016                     	;# 
  1399  0016                     	;# 
  1400  0017                     	;# 
  1401  0018                     	;# 
  1402  0019                     	;# 
  1403  001A                     	;# 
  1404  001B                     	;# 
  1405  001C                     	;# 
  1406  008C                     	;# 
  1407  008D                     	;# 
  1408  008E                     	;# 
  1409  0090                     	;# 
  1410  0091                     	;# 
  1411  0092                     	;# 
  1412  0095                     	;# 
  1413  0096                     	;# 
  1414  0097                     	;# 
  1415  0099                     	;# 
  1416  009A                     	;# 
  1417  009B                     	;# 
  1418  009B                     	;# 
  1419  009C                     	;# 
  1420  009D                     	;# 
  1421  009E                     	;# 
  1422  010C                     	;# 
  1423  010D                     	;# 
  1424  010E                     	;# 
  1425  0116                     	;# 
  1426  0117                     	;# 
  1427  011D                     	;# 
  1428  018C                     	;# 
  1429  018D                     	;# 
  1430  018E                     	;# 
  1431  0191                     	;# 
  1432  0191                     	;# 
  1433  0192                     	;# 
  1434  0193                     	;# 
  1435  0193                     	;# 
  1436  0194                     	;# 
  1437  0195                     	;# 
  1438  0196                     	;# 
  1439  0197                     	;# 
  1440  0199                     	;# 
  1441  019A                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019C                     	;# 
  1447  019C                     	;# 
  1448  019D                     	;# 
  1449  019E                     	;# 
  1450  019F                     	;# 
  1451  020D                     	;# 
  1452  0210                     	;# 
  1453  0211                     	;# 
  1454  0211                     	;# 
  1455  0212                     	;# 
  1456  0212                     	;# 
  1457  0213                     	;# 
  1458  0213                     	;# 
  1459  0214                     	;# 
  1460  0214                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0216                     	;# 
  1465  0216                     	;# 
  1466  0217                     	;# 
  1467  0217                     	;# 
  1468  0291                     	;# 
  1469  0291                     	;# 
  1470  0292                     	;# 
  1471  0293                     	;# 
  1472  0298                     	;# 
  1473  0298                     	;# 
  1474  0299                     	;# 
  1475  029A                     	;# 
  1476  0394                     	;# 
  1477  0395                     	;# 
  1478  0396                     	;# 
  1479  0FE4                     	;# 
  1480  0FE5                     	;# 
  1481  0FE6                     	;# 
  1482  0FE7                     	;# 
  1483  0FE8                     	;# 
  1484  0FE9                     	;# 
  1485  0FEA                     	;# 
  1486  0FEB                     	;# 
  1487  0FED                     	;# 
  1488  0FEE                     	;# 
  1489  0FEF                     	;# 
  1490  0000                     	;# 
  1491  0001                     	;# 
  1492  0002                     	;# 
  1493  0003                     	;# 
  1494  0004                     	;# 
  1495  0005                     	;# 
  1496  0006                     	;# 
  1497  0007                     	;# 
  1498  0008                     	;# 
  1499  0009                     	;# 
  1500  000A                     	;# 
  1501  000B                     	;# 
  1502  000C                     	;# 
  1503  000D                     	;# 
  1504  000E                     	;# 
  1505  0010                     	;# 
  1506  0011                     	;# 
  1507  0012                     	;# 
  1508  0015                     	;# 
  1509  0016                     	;# 
  1510  0016                     	;# 
  1511  0017                     	;# 
  1512  0018                     	;# 
  1513  0019                     	;# 
  1514  001A                     	;# 
  1515  001B                     	;# 
  1516  001C                     	;# 
  1517  008C                     	;# 
  1518  008D                     	;# 
  1519  008E                     	;# 
  1520  0090                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0095                     	;# 
  1524  0096                     	;# 
  1525  0097                     	;# 
  1526  0099                     	;# 
  1527  009A                     	;# 
  1528  009B                     	;# 
  1529  009B                     	;# 
  1530  009C                     	;# 
  1531  009D                     	;# 
  1532  009E                     	;# 
  1533  010C                     	;# 
  1534  010D                     	;# 
  1535  010E                     	;# 
  1536  0116                     	;# 
  1537  0117                     	;# 
  1538  011D                     	;# 
  1539  018C                     	;# 
  1540  018D                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019C                     	;# 
  1558  019C                     	;# 
  1559  019D                     	;# 
  1560  019E                     	;# 
  1561  019F                     	;# 
  1562  020D                     	;# 
  1563  0210                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  0212                     	;# 
  1567  0212                     	;# 
  1568  0213                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0216                     	;# 
  1576  0216                     	;# 
  1577  0217                     	;# 
  1578  0217                     	;# 
  1579  0291                     	;# 
  1580  0291                     	;# 
  1581  0292                     	;# 
  1582  0293                     	;# 
  1583  0298                     	;# 
  1584  0298                     	;# 
  1585  0299                     	;# 
  1586  029A                     	;# 
  1587  0394                     	;# 
  1588  0395                     	;# 
  1589  0396                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0010                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  008C                     	;# 
  1629  008D                     	;# 
  1630  008E                     	;# 
  1631  0090                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0095                     	;# 
  1635  0096                     	;# 
  1636  0097                     	;# 
  1637  0099                     	;# 
  1638  009A                     	;# 
  1639  009B                     	;# 
  1640  009B                     	;# 
  1641  009C                     	;# 
  1642  009D                     	;# 
  1643  009E                     	;# 
  1644  010C                     	;# 
  1645  010D                     	;# 
  1646  010E                     	;# 
  1647  0116                     	;# 
  1648  0117                     	;# 
  1649  011D                     	;# 
  1650  018C                     	;# 
  1651  018D                     	;# 
  1652  018E                     	;# 
  1653  0191                     	;# 
  1654  0191                     	;# 
  1655  0192                     	;# 
  1656  0193                     	;# 
  1657  0193                     	;# 
  1658  0194                     	;# 
  1659  0195                     	;# 
  1660  0196                     	;# 
  1661  0197                     	;# 
  1662  0199                     	;# 
  1663  019A                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019C                     	;# 
  1669  019C                     	;# 
  1670  019D                     	;# 
  1671  019E                     	;# 
  1672  019F                     	;# 
  1673  020D                     	;# 
  1674  0210                     	;# 
  1675  0211                     	;# 
  1676  0211                     	;# 
  1677  0212                     	;# 
  1678  0212                     	;# 
  1679  0213                     	;# 
  1680  0213                     	;# 
  1681  0214                     	;# 
  1682  0214                     	;# 
  1683  0215                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0216                     	;# 
  1687  0216                     	;# 
  1688  0217                     	;# 
  1689  0217                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0298                     	;# 
  1695  0298                     	;# 
  1696  0299                     	;# 
  1697  029A                     	;# 
  1698  0394                     	;# 
  1699  0395                     	;# 
  1700  0396                     	;# 
  1701  0FE4                     	;# 
  1702  0FE5                     	;# 
  1703  0FE6                     	;# 
  1704  0FE7                     	;# 
  1705  0FE8                     	;# 
  1706  0FE9                     	;# 
  1707  0FEA                     	;# 
  1708  0FEB                     	;# 
  1709  0FED                     	;# 
  1710  0FEE                     	;# 
  1711  0FEF                     	;# 
  1712  0000                     	;# 
  1713  0001                     	;# 
  1714  0002                     	;# 
  1715  0003                     	;# 
  1716  0004                     	;# 
  1717  0005                     	;# 
  1718  0006                     	;# 
  1719  0007                     	;# 
  1720  0008                     	;# 
  1721  0009                     	;# 
  1722  000A                     	;# 
  1723  000B                     	;# 
  1724  000C                     	;# 
  1725  000D                     	;# 
  1726  000E                     	;# 
  1727  0010                     	;# 
  1728  0011                     	;# 
  1729  0012                     	;# 
  1730  0015                     	;# 
  1731  0016                     	;# 
  1732  0016                     	;# 
  1733  0017                     	;# 
  1734  0018                     	;# 
  1735  0019                     	;# 
  1736  001A                     	;# 
  1737  001B                     	;# 
  1738  001C                     	;# 
  1739  008C                     	;# 
  1740  008D                     	;# 
  1741  008E                     	;# 
  1742  0090                     	;# 
  1743  0091                     	;# 
  1744  0092                     	;# 
  1745  0095                     	;# 
  1746  0096                     	;# 
  1747  0097                     	;# 
  1748  0099                     	;# 
  1749  009A                     	;# 
  1750  009B                     	;# 
  1751  009B                     	;# 
  1752  009C                     	;# 
  1753  009D                     	;# 
  1754  009E                     	;# 
  1755  010C                     	;# 
  1756  010D                     	;# 
  1757  010E                     	;# 
  1758  0116                     	;# 
  1759  0117                     	;# 
  1760  011D                     	;# 
  1761  018C                     	;# 
  1762  018D                     	;# 
  1763  018E                     	;# 
  1764  0191                     	;# 
  1765  0191                     	;# 
  1766  0192                     	;# 
  1767  0193                     	;# 
  1768  0193                     	;# 
  1769  0194                     	;# 
  1770  0195                     	;# 
  1771  0196                     	;# 
  1772  0197                     	;# 
  1773  0199                     	;# 
  1774  019A                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019C                     	;# 
  1780  019C                     	;# 
  1781  019D                     	;# 
  1782  019E                     	;# 
  1783  019F                     	;# 
  1784  020D                     	;# 
  1785  0210                     	;# 
  1786  0211                     	;# 
  1787  0211                     	;# 
  1788  0212                     	;# 
  1789  0212                     	;# 
  1790  0213                     	;# 
  1791  0213                     	;# 
  1792  0214                     	;# 
  1793  0214                     	;# 
  1794  0215                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0216                     	;# 
  1798  0216                     	;# 
  1799  0217                     	;# 
  1800  0217                     	;# 
  1801  0291                     	;# 
  1802  0291                     	;# 
  1803  0292                     	;# 
  1804  0293                     	;# 
  1805  0298                     	;# 
  1806  0298                     	;# 
  1807  0299                     	;# 
  1808  029A                     	;# 
  1809  0394                     	;# 
  1810  0395                     	;# 
  1811  0396                     	;# 
  1812  0FE4                     	;# 
  1813  0FE5                     	;# 
  1814  0FE6                     	;# 
  1815  0FE7                     	;# 
  1816  0FE8                     	;# 
  1817  0FE9                     	;# 
  1818  0FEA                     	;# 
  1819  0FEB                     	;# 
  1820  0FED                     	;# 
  1821  0FEE                     	;# 
  1822  0FEF                     	;# 
  1823  0000                     	;# 
  1824  0001                     	;# 
  1825  0002                     	;# 
  1826  0003                     	;# 
  1827  0004                     	;# 
  1828  0005                     	;# 
  1829  0006                     	;# 
  1830  0007                     	;# 
  1831  0008                     	;# 
  1832  0009                     	;# 
  1833  000A                     	;# 
  1834  000B                     	;# 
  1835  000C                     	;# 
  1836  000D                     	;# 
  1837  000E                     	;# 
  1838  0010                     	;# 
  1839  0011                     	;# 
  1840  0012                     	;# 
  1841  0015                     	;# 
  1842  0016                     	;# 
  1843  0016                     	;# 
  1844  0017                     	;# 
  1845  0018                     	;# 
  1846  0019                     	;# 
  1847  001A                     	;# 
  1848  001B                     	;# 
  1849  001C                     	;# 
  1850  008C                     	;# 
  1851  008D                     	;# 
  1852  008E                     	;# 
  1853  0090                     	;# 
  1854  0091                     	;# 
  1855  0092                     	;# 
  1856  0095                     	;# 
  1857  0096                     	;# 
  1858  0097                     	;# 
  1859  0099                     	;# 
  1860  009A                     	;# 
  1861  009B                     	;# 
  1862  009B                     	;# 
  1863  009C                     	;# 
  1864  009D                     	;# 
  1865  009E                     	;# 
  1866  010C                     	;# 
  1867  010D                     	;# 
  1868  010E                     	;# 
  1869  0116                     	;# 
  1870  0117                     	;# 
  1871  011D                     	;# 
  1872  018C                     	;# 
  1873  018D                     	;# 
  1874  018E                     	;# 
  1875  0191                     	;# 
  1876  0191                     	;# 
  1877  0192                     	;# 
  1878  0193                     	;# 
  1879  0193                     	;# 
  1880  0194                     	;# 
  1881  0195                     	;# 
  1882  0196                     	;# 
  1883  0197                     	;# 
  1884  0199                     	;# 
  1885  019A                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019C                     	;# 
  1891  019C                     	;# 
  1892  019D                     	;# 
  1893  019E                     	;# 
  1894  019F                     	;# 
  1895  020D                     	;# 
  1896  0210                     	;# 
  1897  0211                     	;# 
  1898  0211                     	;# 
  1899  0212                     	;# 
  1900  0212                     	;# 
  1901  0213                     	;# 
  1902  0213                     	;# 
  1903  0214                     	;# 
  1904  0214                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0216                     	;# 
  1909  0216                     	;# 
  1910  0217                     	;# 
  1911  0217                     	;# 
  1912  0291                     	;# 
  1913  0291                     	;# 
  1914  0292                     	;# 
  1915  0293                     	;# 
  1916  0298                     	;# 
  1917  0298                     	;# 
  1918  0299                     	;# 
  1919  029A                     	;# 
  1920  0394                     	;# 
  1921  0395                     	;# 
  1922  0396                     	;# 
  1923  0FE4                     	;# 
  1924  0FE5                     	;# 
  1925  0FE6                     	;# 
  1926  0FE7                     	;# 
  1927  0FE8                     	;# 
  1928  0FE9                     	;# 
  1929  0FEA                     	;# 
  1930  0FEB                     	;# 
  1931  0FED                     	;# 
  1932  0FEE                     	;# 
  1933  0FEF                     	;# 
  1934                           
  1935                           	psect	idataBANK3
  1936  1B6E                     __pidataBANK3:	
  1937                           
  1938                           ;initializer for _VarProduct
  1939  1B6E  3463               	retlw	99
  1940  1B6F  3402               	retlw	2
  1941  1B70  3400               	retlw	0
  1942  1B71  3400               	retlw	0
  1943  1B72  3400               	retlw	0
  1944  1B73  3400               	retlw	0
  1945  1B74  3400               	retlw	0
  1946  1B75  3400               	retlw	0
  1947  1B76  3400               	retlw	0
  1948  1B77  3400               	retlw	0
  1949  1B78  3400               	retlw	0
  1950  1B79  3400               	retlw	0
  1951  1B7A  34FF               	retlw	255
  1952  1B7B  34FF               	retlw	255
  1953  1B7C  34FF               	retlw	255
  1954  1B7D  3400               	retlw	0
  1955  1B7E  3400               	retlw	0
  1956  1B7F  3400               	retlw	0
  1957  1B80  3400               	retlw	0
  1958  1B81  3400               	retlw	0
  1959  1B82  3401               	retlw	1
  1960  1B83  3400               	retlw	0
  1961  1B84  3400               	retlw	0
  1962  1B85  3400               	retlw	0
  1963  1B86  3400               	retlw	0
  1964  1B87  3400               	retlw	0
  1965  1B88  3400               	retlw	0
  1966  1B89  3400               	retlw	0
  1967  1B8A  3400               	retlw	0
  1968  1B8B  3400               	retlw	0
  1969  1B8C  3400               	retlw	0
  1970  1B8D  3400               	retlw	0
  1971                           
  1972                           	psect	stringtext
  1973  1800                     __pstringtext:	
  1974  1800                     _CC2500_registers_address:	
  1975  1800  3403               	retlw	3
  1976  1801  3416               	retlw	22
  1977  1802  3417               	retlw	23
  1978  1803  341E               	retlw	30
  1979  1804  341F               	retlw	31
  1980  1805  3420               	retlw	32
  1981  1806  342A               	retlw	42
  1982  1807  342B               	retlw	43
  1983  1808  340B               	retlw	11
  1984  1809  340C               	retlw	12
  1985  180A  340D               	retlw	13
  1986  180B  340E               	retlw	14
  1987  180C  340F               	retlw	15
  1988  180D  3410               	retlw	16
  1989  180E  3411               	retlw	17
  1990  180F  3412               	retlw	18
  1991  1810  3413               	retlw	19
  1992  1811  3414               	retlw	20
  1993  1812  340A               	retlw	10
  1994  1813  3415               	retlw	21
  1995  1814  3421               	retlw	33
  1996  1815  3422               	retlw	34
  1997  1816  3418               	retlw	24
  1998  1817  3419               	retlw	25
  1999  1818  341A               	retlw	26
  2000  1819  341B               	retlw	27
  2001  181A  341C               	retlw	28
  2002  181B  341D               	retlw	29
  2003  181C  3423               	retlw	35
  2004  181D  3424               	retlw	36
  2005  181E  3425               	retlw	37
  2006  181F  3426               	retlw	38
  2007  1820  3429               	retlw	41
  2008  1821  342C               	retlw	44
  2009  1822  342D               	retlw	45
  2010  1823  342E               	retlw	46
  2011  1824  3400               	retlw	0
  2012  1825  3401               	retlw	1
  2013  1826  3402               	retlw	2
  2014  1827  3407               	retlw	7
  2015  1828  3408               	retlw	8
  2016  1829  3409               	retlw	9
  2017  182A  3406               	retlw	6
  2018  182B  3404               	retlw	4
  2019  182C  3405               	retlw	5
  2020  182D  3427               	retlw	39
  2021  182E  3428               	retlw	40
  2022  182F                     __end_of_CC2500_registers_address:	
  2023  182F                     _CC2500_rfSettings:	
  2024  182F  3407               	retlw	7
  2025  1830  3407               	retlw	7
  2026  1831  3430               	retlw	48
  2027  1832  3487               	retlw	135
  2028  1833  346B               	retlw	107
  2029  1834  34F8               	retlw	248
  2030  1835  347F               	retlw	127
  2031  1836  343F               	retlw	63
  2032  1837  3409               	retlw	9
  2033  1838  3400               	retlw	0
  2034  1839  345C               	retlw	92
  2035  183A  34A7               	retlw	167
  2036  183B  3462               	retlw	98
  2037  183C  3486               	retlw	134
  2038  183D  3483               	retlw	131
  2039  183E  3403               	retlw	3
  2040  183F  3422               	retlw	34
  2041  1840  34F8               	retlw	248
  2042  1841  3400               	retlw	0
  2043  1842  3444               	retlw	68
  2044  1843  34B6               	retlw	182
  2045  1844  3410               	retlw	16
  2046  1845  3418               	retlw	24
  2047  1846  341D               	retlw	29
  2048  1847  341C               	retlw	28
  2049  1848  34C7               	retlw	199
  2050  1849  3400               	retlw	0
  2051  184A  34B2               	retlw	178
  2052  184B  34EA               	retlw	234
  2053  184C  340A               	retlw	10
  2054  184D  3400               	retlw	0
  2055  184E  3411               	retlw	17
  2056  184F  3459               	retlw	89
  2057  1850  3488               	retlw	136
  2058  1851  3431               	retlw	49
  2059  1852  340B               	retlw	11
  2060  1853  342F               	retlw	47
  2061  1854  342E               	retlw	46
  2062  1855  3406               	retlw	6
  2063  1856  3404               	retlw	4
  2064  1857  3405               	retlw	5
  2065  1858  3400               	retlw	0
  2066  1859  3430               	retlw	48
  2067  185A  34D3               	retlw	211
  2068  185B  3491               	retlw	145
  2069  185C  3441               	retlw	65
  2070  185D  3400               	retlw	0
  2071  185E                     __end_of_CC2500_rfSettings:	
  2072  185E                     _CC2500_patable_vaule:	
  2073  185E  34FE               	retlw	254
  2074  185F  34FE               	retlw	254
  2075  1860  34FE               	retlw	254
  2076  1861  34FE               	retlw	254
  2077  1862  34FE               	retlw	254
  2078  1863  34FE               	retlw	254
  2079  1864  34FE               	retlw	254
  2080  1865  34FE               	retlw	254
  2081  1866                     __end_of_CC2500_patable_vaule:	
  2082                           
  2083                           	psect	nvCOMMON
  2084  007C                     __pnvCOMMON:	
  2085  007C                     _Memory:	
  2086  007C                     	ds	1
  2087  007D                     _TMain:	
  2088  007D                     	ds	1
  2089                           
  2090                           	psect	nvBANK0
  2091  006F                     __pnvBANK0:	
  2092  006F                     _Product:	
  2093  006F                     	ds	1
  2094                           
  2095                           	psect	nvBANK1
  2096  00EB                     __pnvBANK1:	
  2097  00EB                     _Timer0:	
  2098  00EB                     	ds	1
  2099  000C                     _PORTA	set	12
  2100  000D                     _PORTB	set	13
  2101  000E                     _PORTC	set	14
  2102  0015                     _TMR0	set	21
  2103  005F                     _GIE	set	95
  2104  005C                     _INTE	set	92
  2105  0059                     _INTF	set	89
  2106  005B                     _IOCIE	set	91
  2107  0058                     _IOCIF	set	88
  2108  005E                     _PEIE	set	94
  2109  0060                     _RA0	set	96
  2110  0063                     _RA3	set	99
  2111  0064                     _RA4	set	100
  2112  0066                     _RA6	set	102
  2113  0067                     _RA7	set	103
  2114  0068                     _RB0	set	104
  2115  0069                     _RB1	set	105
  2116  006B                     _RB3	set	107
  2117  006C                     _RB4	set	108
  2118  006D                     _RB5	set	109
  2119  0070                     _RC0	set	112
  2120  0071                     _RC1	set	113
  2121  0072                     _RC2	set	114
  2122  0074                     _RC4	set	116
  2123  0075                     _RC5	set	117
  2124  0077                     _RC7	set	119
  2125  005D                     _TMR0IE	set	93
  2126  005A                     _TMR0IF	set	90
  2127  009D                     _ADCON0	set	157
  2128  009E                     _ADCON1	set	158
  2129  009C                     _ADRESH	set	156
  2130  009B                     _ADRESL	set	155
  2131  0095                     _OPTION_REG	set	149
  2132  0099                     _OSCCON	set	153
  2133  008C                     _TRISA	set	140
  2134  008D                     _TRISB	set	141
  2135  008E                     _TRISC	set	142
  2136  04E9                     _GO_nDONE	set	1257
  2137  0117                     _FVRCON	set	279
  2138  010C                     _LATA	set	268
  2139  010D                     _LATB	set	269
  2140  010E                     _LATC	set	270
  2141  018C                     _ANSELA	set	396
  2142  018D                     _ANSELB	set	397
  2143  018E                     _ANSELC	set	398
  2144  0192                     _PMADRH	set	402
  2145  0191                     _PMADRL	set	401
  2146  0196                     _PMCON2	set	406
  2147  0194                     _PMDATH	set	404
  2148  0193                     _PMDATL	set	403
  2149  0CAE                     _CFGS	set	3246
  2150  0CAC                     _FREE	set	3244
  2151  0CAD                     _LWLO	set	3245
  2152  0CA8                     _RD	set	3240
  2153  0CA9                     _WR	set	3241
  2154  0CAA                     _WREN	set	3242
  2155  1068                     _WPUB0	set	4200
  2156  1069                     _WPUB1	set	4201
  2157  106A                     _WPUB2	set	4202
  2158  0396                     _IOCBF	set	918
  2159  0395                     _IOCBN	set	917
  2160  0394                     _IOCBP	set	916
  2161  1CB2                     _IOCBF2	set	7346
  2162                           
  2163                           ; #config settings
  2164  0000                     
  2165                           	psect	cinit
  2166  0018                     start_initialization:	
  2167  0018                     __initialization:	
  2168                           
  2169                           ; Clear objects allocated to BITCOMMON
  2170  0018  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2171                           
  2172                           ; Clear objects allocated to COMMON
  2173  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2174  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2175  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2176  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2177                           
  2178                           ; Clear objects allocated to BANK0
  2179  001D  01EC               	clrf	__pbssBANK0& (0+127)
  2180  001E  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2181  001F  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2182                           
  2183                           ; Clear objects allocated to BANK1
  2184  0020  30A0               	movlw	low __pbssBANK1
  2185  0021  0084               	movwf	4
  2186  0022  3000               	movlw	high __pbssBANK1
  2187  0023  0085               	movwf	5
  2188  0024  304B               	movlw	75
  2189  0025  31A7  2786  3180   	fcall	clear_ram0
  2190                           
  2191                           ; Clear objects allocated to BANK2
  2192  0028  3020               	movlw	low __pbssBANK2
  2193  0029  0084               	movwf	4
  2194  002A  3001               	movlw	high __pbssBANK2
  2195  002B  0085               	movwf	5
  2196  002C  3034               	movlw	52
  2197  002D  31A7  2786  3180   	fcall	clear_ram0
  2198                           
  2199                           ; Clear objects allocated to BANK3
  2200  0030  30A0               	movlw	low __pbssBANK3
  2201  0031  0084               	movwf	4
  2202  0032  3001               	movlw	high __pbssBANK3
  2203  0033  0085               	movwf	5
  2204  0034  3025               	movlw	37
  2205  0035  31A7  2786  3180   	fcall	clear_ram0
  2206                           
  2207                           ; Clear objects allocated to BANK4
  2208  0038  3020               	movlw	low __pbssBANK4
  2209  0039  0084               	movwf	4
  2210  003A  3002               	movlw	high __pbssBANK4
  2211  003B  0085               	movwf	5
  2212  003C  3047               	movlw	71
  2213  003D  31A7  2786  3180   	fcall	clear_ram0
  2214                           
  2215                           ; Initialize objects allocated to BANK3
  2216  0040  306E               	movlw	low __pidataBANK3
  2217  0041  0084               	movwf	4
  2218  0042  309B               	movlw	(high __pidataBANK3)| (0+128)
  2219  0043  0085               	movwf	5
  2220  0044  30C5               	movlw	low __pdataBANK3
  2221  0045  0086               	movwf	6
  2222  0046  3001               	movlw	high __pdataBANK3
  2223  0047  0087               	movwf	7
  2224  0048  3020               	movlw	32
  2225  0049  31A7  2780         	fcall	init_ram
  2226  004B                     end_of_initialization:	
  2227                           ;End of C runtime variable initialization code
  2228                           
  2229  004B                     __end_of__initialization:	
  2230  004B  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2231  004C  0020               	movlb	0
  2232  004D  3194  2C31         	ljmp	_main	;jump to C main() function
  2233                           
  2234                           	psect	bitbssCOMMON
  2235  0380                     __pbitbssCOMMON:	
  2236  0380                     _CC2500_Enable:	
  2237  0380                     	ds	1
  2238  0381                     _Receive_GO:	
  2239  0381                     	ds	1
  2240  0382                     _Receive_OK:	
  2241  0382                     	ds	1
  2242  0383                     _RxStatus:	
  2243  0383                     	ds	1
  2244  0384                     _Transceive_GO:	
  2245  0384                     	ds	1
  2246  0385                     _Transceive_OK:	
  2247  0385                     	ds	1
  2248  0386                     _TxStatus:	
  2249  0386                     	ds	1
  2250                           
  2251                           	psect	bssCOMMON
  2252  0078                     __pbssCOMMON:	
  2253  0078                     _Buz:	
  2254  0078                     	ds	1
  2255  0079                     _DimmerLights11:	
  2256  0079                     	ds	1
  2257  007A                     _PF:	
  2258  007A                     	ds	1
  2259  007B                     _RF:	
  2260  007B                     	ds	1
  2261                           
  2262                           	psect	bssBANK0
  2263  006C                     __pbssBANK0:	
  2264  006C                     _DimmerLights:	
  2265  006C                     	ds	1
  2266  006D                     _Sw:	
  2267  006D                     	ds	1
  2268  006E                     _Load:	
  2269  006E                     	ds	1
  2270                           
  2271                           	psect	bssBANK1
  2272  00A0                     __pbssBANK1:	
  2273  00A0                     _RF_Data:	
  2274  00A0                     	ds	21
  2275  00B5                     _RF_Count:	
  2276  00B5                     	ds	2
  2277  00B7                     _CRC:	
  2278  00B7                     	ds	1
  2279  00B8                     _DelayOff:	
  2280  00B8                     	ds	1
  2281  00B9                     _Dimmer:	
  2282  00B9                     	ds	1
  2283  00BA                     _DimmerLightsIntr:	
  2284  00BA                     	ds	1
  2285  00BB                     _LED:	
  2286  00BB                     	ds	1
  2287  00BC                     _RFSW:	
  2288  00BC                     	ds	1
  2289  00BD                     _RSSI:	
  2290  00BD                     	ds	1
  2291  00BE                     _Rx_Length:	
  2292  00BE                     	ds	1
  2293  00BF                     _SPI0Buffer:	
  2294  00BF                     	ds	1
  2295  00C0                     _Tx_Length:	
  2296  00C0                     	ds	1
  2297  00C1                     _r_address:	
  2298  00C1                     	ds	1
  2299  00C2                     _r_data:	
  2300  00C2                     	ds	1
  2301  00C3                     _s_data:	
  2302  00C3                     	ds	1
  2303  00C4                     _PF1:	
  2304  00C4                     	ds	8
  2305  00CC                     _VarTimer0:	
  2306  00CC                     	ds	7
  2307  00D3                     _DlySw1:	
  2308  00D3                     	ds	5
  2309  00D8                     _VarErrLED:	
  2310  00D8                     	ds	4
  2311  00DC                     _VarLED1:	
  2312  00DC                     	ds	4
  2313  00E0                     _VarLED2:	
  2314  00E0                     	ds	4
  2315  00E4                     _Dimmer1:	
  2316  00E4                     	ds	3
  2317  00E7                     _RF1:	
  2318  00E7                     	ds	3
  2319  00EA                     _RFSW1:	
  2320  00EA                     	ds	1
  2321                           
  2322                           	psect	bssBANK2
  2323  0120                     __pbssBANK2:	
  2324  0120                     _VarTMain:	
  2325  0120                     	ds	16
  2326  0130                     _DimmerLights1:	
  2327  0130                     	ds	15
  2328  013F                     _Buz1:	
  2329  013F                     	ds	12
  2330  014B                     _Sw1:	
  2331  014B                     	ds	9
  2332                           
  2333                           	psect	bssBANK3
  2334  01A0                     __pbssBANK3:	
  2335  01A0                     _VarMemory:	
  2336  01A0                     	ds	37
  2337                           
  2338                           	psect	dataBANK3
  2339  01C5                     __pdataBANK3:	
  2340  01C5                     _VarProduct:	
  2341  01C5                     	ds	32
  2342                           
  2343                           	psect	bssBANK4
  2344  0220                     __pbssBANK4:	
  2345  0220                     _Load1:	
  2346  0220                     	ds	71
  2347                           
  2348                           	psect	clrtext
  2349  2786                     clear_ram0:	
  2350                           ;	Called with FSR0 containing the base address, and
  2351                           ;	WREG with the size to clear
  2352                           
  2353  2786  0064               	clrwdt	;clear the watchdog before getting into this loop
  2354  2787                     clrloop0:	
  2355  2787  0180               	clrf	0	;clear RAM location pointed to by FSR
  2356  2788  3101               	addfsr 0,1
  2357  2789  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2358  278A  2F87               	goto	clrloop0	;have we reached the end yet?
  2359  278B  3400               	retlw	0	;all done for this memory range, return
  2360                           
  2361                           	psect	inittext
  2362  2780                     init_ram:	
  2363  2780  00FE               	movwf	126
  2364  2781                     initloop:	
  2365  2781  0012               	moviw fsr0++
  2366  2782  001E               	movwi fsr1++
  2367  2783  0BFE               	decfsz	126,f
  2368  2784  2F81               	goto	initloop
  2369  2785  3400               	retlw	0
  2370                           
  2371                           	psect	cstackCOMMON
  2372  0071                     __pcstackCOMMON:	
  2373  0071                     ?_CC2500_WriteByte:	
  2374  0071                     ?_CC2500_WriteCommand:	
  2375                           ; 0 bytes @ 0x0
  2376                           
  2377  0071                     ?_CC2500_ReadStatus:	
  2378                           ; 0 bytes @ 0x0
  2379                           
  2380  0071                     ?_CC2500_ReadByte:	
  2381                           ; 0 bytes @ 0x0
  2382                           
  2383  0071                     ?_CC2500_PowerRST:	
  2384                           ; 0 bytes @ 0x0
  2385                           
  2386  0071                     ?_CC2500_InitSetREG:	
  2387                           ; 0 bytes @ 0x0
  2388                           
  2389  0071                     ?_CC2500_InitPATable:	
  2390                           ; 0 bytes @ 0x0
  2391                           
  2392  0071                     ?_CC2500_ClearTXFIFO:	
  2393                           ; 0 bytes @ 0x0
  2394                           
  2395  0071                     ?_CC2500_ClearRXFIFO:	
  2396                           ; 0 bytes @ 0x0
  2397                           
  2398  0071                     ?_CC2500_FrequencyCabr:	
  2399                           ; 0 bytes @ 0x0
  2400                           
  2401  0071                     ?_CC2500_SIDLEMode:	
  2402                           ; 0 bytes @ 0x0
  2403                           
  2404  0071                     ?_DlyOff_Initialization:	
  2405                           ; 0 bytes @ 0x0
  2406                           
  2407  0071                     ?_DlyOff_Main:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0071                     ?_setTxData:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0071                     ?_setDimmerLights_Initialization:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0071                     ?_Dimmer_Initialization:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0071                     ?_setLoad_GO:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0071                     ?_setDimmerLights_Main:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0071                     ?_setDimmerLights_ERROR:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0071                     ?_setLoad_Count:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0071                     ?_setLED_Initialization:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0071                     ?_setLED_Main:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0071                     ?_MainT_Initialization:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0071                     ?_Mcu_Initialization:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0071                     ?_Flash_Memory_Initialization:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0071                     ?_Load_Initialization:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0071                     ?_PowerFault_Initialization:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0071                     ?_Switch_Initialization:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0071                     ?_RF_Initialization:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0071                     ?_getLoad_AD:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0071                     ?_getPowerFault_AD:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0071                     ?_MainT:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0071                     ?_Flash_Memory_Main:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0071                     ?_Load_Main:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0071                     ?_PowerFault_Main:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0071                     ?_Switch_Main:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0071                     ?_RF_Main:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0071                     ?_setLoad_Enable:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0071                     ?_setSw_Enable:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0071                     ?_IO_Set:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0071                     ?_TMR0_Set:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0071                     ?_ADC_Set:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0071                     ?_INT_Set:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0071                     ?_IOC_Set:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0071                     ?_IOC_ISR:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0071                     ??_IOC_ISR:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0071                     ?_TMR0_ISR:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0071                     ?_INT_ISR:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0071                     ?_Flash_Memory_Write:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0071                     ?_Flash_Memory_Modify:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0071                     ?_setLoad_AH_AL_Restore:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0071                     ?_setLoad_Exceptions:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0071                     ?_setPowerFault_Initialization:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0071                     ?_setPowerFault_Main:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0071                     ?_setPowerFault_Exceptions:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0071                     ?_setRF_Initialization:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0071                     ?_setRF_Main:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0071                     ?_getRxData:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0071                     ?_RF_RxDisable:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0071                     ?_setLog_Code:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0071                     ?_setControl_Lights_Table:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0071                     ?_setRFSW_Control:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0071                     ?_setRFSW_AdjControl:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0071                     ?_setRF_DimmerValue:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0071                     ?_setSw_Initialization:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0071                     ?_setSw_Main:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0071                     ?_Sw_DimmerOnFunc:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0071                     ?_Sw_DimmerAdjFunc:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0071                     ?_Sw_DimmerOffFunc:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0071                     ?_Buzzer_Initialization:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0071                     ?_Buzzer_Main:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0071                     ?_CC2500_TxData:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0071                     ?_CC2500_RxData:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0071                     ?_CC2500_PowerOnInitial:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0071                     ?_DelayOffPointSelect:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0071                     ?_DelayOff_Initialization:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0071                     ?_DelayOff_Main:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0071                     ?_DimmerLightsPointSelect:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0071                     ?_DimmerLights_Initialization:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0071                     ?_DimmerLights_Close:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0071                     ?_DimmerLights_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0071                     ?_DimmerLights_Exceptions:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0071                     ?_setDimmerLights_AdjRF:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0071                     ?_LedPointSelect:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0071                     ?_LED_Initialization:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0071                     ?_LED_Main:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0071                     ?_main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0071                     ?_ISR:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0071                     ?_setDimmerReClock:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0071                     ??_setDimmerReClock:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0071                     ?_setINT_GO:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0071                     ?_Flash_Memory_Unlock:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0071                     ?_Flash_Memory_Erasing:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0071                     ?_RfPointSelect:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0071                     ?_RfSWPointSelect:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0071                     ?_TouchPower:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0071                     ?_SwPointSelect:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0071                     ?i1_setLoad_StatusOff:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0071                     ?i1_RfPointSelect:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0071                     ??i1_RfPointSelect:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0071                     ?_DelayTimejudge:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0071                     ?_getDimmerLights_StatusFlag:	
  2675                           ; 1 bytes @ 0x0
  2676                           
  2677  0071                     ?_getPercentValue:	
  2678                           ; 1 bytes @ 0x0
  2679                           
  2680  0071                     ?_Flash_Memory_Read:	
  2681                           ; 1 bytes @ 0x0
  2682                           
  2683  0071                     ?_getPF_Safe:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686  0071                     ?_setPercentValue:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689  0071                     ?_getLoad_Safe:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692  0071                     setRF_Initialization@rf:	
  2693                           ; 1 bytes @ 0x0
  2694                           
  2695  0071                     i1setLoad_StatusOff@command:	
  2696                           ; 1 bytes @ 0x0
  2697                           
  2698                           
  2699                           ; 1 bytes @ 0x0
  2700  0071                     	ds	1
  2701  0072                     ??i1_setLoad_StatusOff:	
  2702  0072                     i1setLoad_StatusOff@lights:	
  2703                           ; 0 bytes @ 0x1
  2704                           
  2705  0072                     i1RfPointSelect@rf:	
  2706                           ; 1 bytes @ 0x1
  2707                           
  2708                           
  2709                           ; 1 bytes @ 0x1
  2710  0072                     	ds	1
  2711  0073                     ??_TMR0_ISR:	
  2712  0073                     ?_setRF_ReceiveGO:	
  2713                           ; 0 bytes @ 0x2
  2714                           
  2715  0073                     setRF_ReceiveGO@command:	
  2716                           ; 0 bytes @ 0x2
  2717                           
  2718                           
  2719                           ; 1 bytes @ 0x2
  2720  0073                     	ds	1
  2721  0074                     ??_setRF_ReceiveGO:	
  2722  0074                     setRF_ReceiveGO@rf:	
  2723                           ; 0 bytes @ 0x3
  2724                           
  2725                           
  2726                           ; 1 bytes @ 0x3
  2727  0074                     	ds	1
  2728  0075                     ??_INT_ISR:	
  2729                           
  2730                           ; 0 bytes @ 0x4
  2731  0075                     	ds	2
  2732  0077                     ??_ISR:	
  2733                           
  2734                           ; 0 bytes @ 0x6
  2735  0077                     	ds	1
  2736                           
  2737                           	psect	cstackBANK0
  2738  0020                     __pcstackBANK0:	
  2739  0020                     ??_CC2500_WriteByte:	
  2740  0020                     ??_CC2500_ReadByte:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0020                     ?_DelayTime_1us:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0020                     ??_DelayTimejudge:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0020                     ??_Dimmer_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0020                     ??_getDimmerLights_StatusFlag:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0020                     ??_setLoad_GO:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0020                     ?_setLoad_StatusOff:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0020                     ??_setLoad_Count:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0020                     ?_setLoad_StatusOn:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0020                     ??_MainT_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0020                     ??_setLoad_Enable:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0020                     ??_IO_Set:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0020                     ??_TMR0_Set:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0020                     ??_ADC_Set:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0020                     ??_INT_Set:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0020                     ??_IOC_Set:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0020                     ??_Flash_Memory_Read:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0020                     ??_Flash_Memory_Write:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0020                     ??_setLoad_AH_AL_Restore:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0020                     ??_getPF_Safe:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ??_setPowerFault_Initialization:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ??_setRF_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_Buzzer_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_Buzzer_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_DelayOffPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_DimmerLightsPointSelect:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_LedPointSelect:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_setINT_GO:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_Flash_Memory_Unlock:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_Flash_Memory_Erasing:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_getLoad_Safe:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_RfPointSelect:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_RfSWPointSelect:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_TouchPower:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_SwPointSelect:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ?_getAD:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ?___wmul:	
  2849                           ; 2 bytes @ 0x0
  2850                           
  2851  0020                     ?___lwdiv:	
  2852                           ; 2 bytes @ 0x0
  2853                           
  2854  0020                     ?___ftpack:	
  2855                           ; 2 bytes @ 0x0
  2856                           
  2857  0020                     getDimmerLights_StatusFlag@Status:	
  2858                           ; 3 bytes @ 0x0
  2859                           
  2860  0020                     setINT_GO@command:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0020                     getAD@adcon1:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0020                     setLoad_Enable@command:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0020                     setLoad_GO@command:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0020                     setLoad_StatusOn@command:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0020                     setLoad_StatusOff@command:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0020                     DelayTime_1us@count:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0020                     ___wmul@multiplier:	
  2882                           ; 2 bytes @ 0x0
  2883                           
  2884  0020                     ___lwdiv@divisor:	
  2885                           ; 2 bytes @ 0x0
  2886                           
  2887  0020                     ___ftpack@arg:	
  2888                           ; 2 bytes @ 0x0
  2889                           
  2890                           
  2891                           ; 3 bytes @ 0x0
  2892  0020                     	ds	1
  2893  0021                     ??_setLoad_StatusOff:	
  2894  0021                     ??_setLoad_StatusOn:	
  2895                           ; 0 bytes @ 0x1
  2896                           
  2897  0021                     ??_Mcu_Initialization:	
  2898                           ; 0 bytes @ 0x1
  2899                           
  2900  0021                     ??_PowerFault_Initialization:	
  2901                           ; 0 bytes @ 0x1
  2902                           
  2903  0021                     ??_RF_Initialization:	
  2904                           ; 0 bytes @ 0x1
  2905                           
  2906  0021                     ??_DimmerLights_Close:	
  2907                           ; 0 bytes @ 0x1
  2908                           
  2909  0021                     CC2500_WriteByte@loop_a:	
  2910                           ; 0 bytes @ 0x1
  2911                           
  2912  0021                     CC2500_ReadByte@loop_b:	
  2913                           ; 1 bytes @ 0x1
  2914                           
  2915  0021                     DelayOffPointSelect@sw:	
  2916                           ; 1 bytes @ 0x1
  2917                           
  2918  0021                     DelayTimejudge@i:	
  2919                           ; 1 bytes @ 0x1
  2920                           
  2921  0021                     DimmerLightsPointSelect@lights:	
  2922                           ; 1 bytes @ 0x1
  2923                           
  2924  0021                     LedPointSelect@led:	
  2925                           ; 1 bytes @ 0x1
  2926                           
  2927  0021                     Flash_Memory_Read@i:	
  2928                           ; 1 bytes @ 0x1
  2929                           
  2930  0021                     Flash_Memory_Write@i:	
  2931                           ; 1 bytes @ 0x1
  2932                           
  2933  0021                     setLoad_Count@command:	
  2934                           ; 1 bytes @ 0x1
  2935                           
  2936  0021                     setLoad_StatusOn@lights:	
  2937                           ; 1 bytes @ 0x1
  2938                           
  2939  0021                     setLoad_StatusOff@lights:	
  2940                           ; 1 bytes @ 0x1
  2941                           
  2942  0021                     setLoad_AH_AL_Restore@i:	
  2943                           ; 1 bytes @ 0x1
  2944                           
  2945  0021                     RfPointSelect@rf:	
  2946                           ; 1 bytes @ 0x1
  2947                           
  2948  0021                     RfSWPointSelect@sw:	
  2949                           ; 1 bytes @ 0x1
  2950                           
  2951  0021                     SwPointSelect@sw:	
  2952                           ; 1 bytes @ 0x1
  2953                           
  2954                           
  2955                           ; 1 bytes @ 0x1
  2956  0021                     	ds	1
  2957  0022                     ??_CC2500_WriteCommand:	
  2958  0022                     ??_CC2500_ReadStatus:	
  2959                           ; 0 bytes @ 0x2
  2960                           
  2961  0022                     ?_setRF_RxStatus:	
  2962                           ; 0 bytes @ 0x2
  2963                           
  2964  0022                     ??_DelayTime_1us:	
  2965                           ; 0 bytes @ 0x2
  2966                           
  2967  0022                     ?_CC2500_WriteREG:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0022                     ??_DlyOff_Initialization:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0022                     ?_setSw_Status:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976  0022                     ?_setRFSW_Status:	
  2977                           ; 0 bytes @ 0x2
  2978                           
  2979  0022                     ?_setDimmerLights_Trigger:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0022                     ?_setDimmerLights_Switch:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0022                     ??_setTxData:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988  0022                     ??_setDimmerLights_Initialization:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0022                     ?_setDimmerLights_TriggerERROR:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0022                     ?_setLED:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0022                     ??_setLED_Main:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0022                     ??_Load_Initialization:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0022                     ??_setSw_Enable:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0022                     ?_setRF_Enable:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0022                     ?_setDimmerLights_AdjGo:	
  3010                           ; 0 bytes @ 0x2
  3011                           
  3012  0022                     ?_setDimmerLights_TriggerAdj:	
  3013                           ; 0 bytes @ 0x2
  3014                           
  3015  0022                     ?_setDimmerLights_Clear:	
  3016                           ; 0 bytes @ 0x2
  3017                           
  3018  0022                     ?_setRF_Learn:	
  3019                           ; 0 bytes @ 0x2
  3020                           
  3021  0022                     CC2500_WriteREG@value:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0022                     DlyOff_Initialization@sw:	
  3025                           ; 1 bytes @ 0x2
  3026                           
  3027  0022                     DelayTimejudge@value:	
  3028                           ; 1 bytes @ 0x2
  3029                           
  3030  0022                     setDimmerLights_TriggerERROR@command:	
  3031                           ; 1 bytes @ 0x2
  3032                           
  3033  0022                     setDimmerLights_Switch@command:	
  3034                           ; 1 bytes @ 0x2
  3035                           
  3036  0022                     setDimmerLights_AdjGo@command:	
  3037                           ; 1 bytes @ 0x2
  3038                           
  3039  0022                     setDimmerLights_Trigger@command:	
  3040                           ; 1 bytes @ 0x2
  3041                           
  3042  0022                     setDimmerLights_TriggerAdj@command:	
  3043                           ; 1 bytes @ 0x2
  3044                           
  3045  0022                     setDimmerLights_Clear@command:	
  3046                           ; 1 bytes @ 0x2
  3047                           
  3048  0022                     setLED@command:	
  3049                           ; 1 bytes @ 0x2
  3050                           
  3051  0022                     Flash_Memory_Read@address:	
  3052                           ; 1 bytes @ 0x2
  3053                           
  3054  0022                     setRF_Learn@command:	
  3055                           ; 1 bytes @ 0x2
  3056                           
  3057  0022                     setRF_RxStatus@command:	
  3058                           ; 1 bytes @ 0x2
  3059                           
  3060  0022                     setRF_Enable@command:	
  3061                           ; 1 bytes @ 0x2
  3062                           
  3063  0022                     setRFSW_Status@command:	
  3064                           ; 1 bytes @ 0x2
  3065                           
  3066  0022                     setSw_Enable@command:	
  3067                           ; 1 bytes @ 0x2
  3068                           
  3069  0022                     setSw_Status@command:	
  3070                           ; 1 bytes @ 0x2
  3071                           
  3072  0022                     DelayTime_1us@i:	
  3073                           ; 1 bytes @ 0x2
  3074                           
  3075  0022                     ___wmul@multiplicand:	
  3076                           ; 2 bytes @ 0x2
  3077                           
  3078  0022                     ___lwdiv@dividend:	
  3079                           ; 2 bytes @ 0x2
  3080                           
  3081                           
  3082                           ; 2 bytes @ 0x2
  3083  0022                     	ds	1
  3084  0023                     ??_setRF_RxStatus:	
  3085  0023                     ??_CC2500_WriteREG:	
  3086                           ; 0 bytes @ 0x3
  3087                           
  3088  0023                     ??_setSw_Status:	
  3089                           ; 0 bytes @ 0x3
  3090                           
  3091  0023                     ??_setRFSW_Status:	
  3092                           ; 0 bytes @ 0x3
  3093                           
  3094  0023                     ??_setDimmerLights_Trigger:	
  3095                           ; 0 bytes @ 0x3
  3096                           
  3097  0023                     ??_setDimmerLights_Switch:	
  3098                           ; 0 bytes @ 0x3
  3099                           
  3100  0023                     ??_setDimmerLights_TriggerERROR:	
  3101                           ; 0 bytes @ 0x3
  3102                           
  3103  0023                     ??_setLED:	
  3104                           ; 0 bytes @ 0x3
  3105                           
  3106  0023                     ??_setRF_Enable:	
  3107                           ; 0 bytes @ 0x3
  3108                           
  3109  0023                     ??_DelayOff_Initialization:	
  3110                           ; 0 bytes @ 0x3
  3111                           
  3112  0023                     ?_setDelayOff_GO:	
  3113                           ; 0 bytes @ 0x3
  3114                           
  3115  0023                     ??_setDimmerLights_AdjGo:	
  3116                           ; 0 bytes @ 0x3
  3117                           
  3118  0023                     ??_setDimmerLights_TriggerAdj:	
  3119                           ; 0 bytes @ 0x3
  3120                           
  3121  0023                     ??_setDimmerLights_Clear:	
  3122                           ; 0 bytes @ 0x3
  3123                           
  3124  0023                     ??_getAD:	
  3125                           ; 0 bytes @ 0x3
  3126                           
  3127  0023                     ??_setRF_Learn:	
  3128                           ; 0 bytes @ 0x3
  3129                           
  3130  0023                     CC2500_WriteCommand@command:	
  3131                           ; 0 bytes @ 0x3
  3132                           
  3133  0023                     CC2500_ReadStatus@status_addr:	
  3134                           ; 1 bytes @ 0x3
  3135                           
  3136  0023                     setDelayOff_GO@command:	
  3137                           ; 1 bytes @ 0x3
  3138                           
  3139  0023                     setDimmerLights_Initialization@lights:	
  3140                           ; 1 bytes @ 0x3
  3141                           
  3142  0023                     setDimmerLights_TriggerERROR@lights:	
  3143                           ; 1 bytes @ 0x3
  3144                           
  3145  0023                     setDimmerLights_Switch@lights:	
  3146                           ; 1 bytes @ 0x3
  3147                           
  3148  0023                     setDimmerLights_AdjGo@lights:	
  3149                           ; 1 bytes @ 0x3
  3150                           
  3151  0023                     setDimmerLights_Trigger@lights:	
  3152                           ; 1 bytes @ 0x3
  3153                           
  3154  0023                     setDimmerLights_TriggerAdj@lights:	
  3155                           ; 1 bytes @ 0x3
  3156                           
  3157  0023                     setDimmerLights_Clear@lights:	
  3158                           ; 1 bytes @ 0x3
  3159                           
  3160  0023                     setLED@led:	
  3161                           ; 1 bytes @ 0x3
  3162                           
  3163  0023                     getAD@adcon0:	
  3164                           ; 1 bytes @ 0x3
  3165                           
  3166  0023                     Flash_Memory_Read@ret:	
  3167                           ; 1 bytes @ 0x3
  3168                           
  3169  0023                     setRF_Learn@rf:	
  3170                           ; 1 bytes @ 0x3
  3171                           
  3172  0023                     setRF_RxStatus@rf:	
  3173                           ; 1 bytes @ 0x3
  3174                           
  3175  0023                     setTxData@rf:	
  3176                           ; 1 bytes @ 0x3
  3177                           
  3178  0023                     setRF_Enable@rf:	
  3179                           ; 1 bytes @ 0x3
  3180                           
  3181  0023                     setRFSW_Status@sw:	
  3182                           ; 1 bytes @ 0x3
  3183                           
  3184  0023                     setSw_Status@sw:	
  3185                           ; 1 bytes @ 0x3
  3186                           
  3187  0023                     ___ftpack@exp:	
  3188                           ; 1 bytes @ 0x3
  3189                           
  3190                           
  3191                           ; 1 bytes @ 0x3
  3192  0023                     	ds	1
  3193  0024                     ??_CC2500_ClearTXFIFO:	
  3194  0024                     ??_CC2500_ClearRXFIFO:	
  3195                           ; 0 bytes @ 0x4
  3196                           
  3197  0024                     ??_CC2500_SIDLEMode:	
  3198                           ; 0 bytes @ 0x4
  3199                           
  3200  0024                     ?_setDimmerLights:	
  3201                           ; 0 bytes @ 0x4
  3202                           
  3203  0024                     ??_setDimmerLights_ERROR:	
  3204                           ; 0 bytes @ 0x4
  3205                           
  3206  0024                     ??_setLED_Initialization:	
  3207                           ; 0 bytes @ 0x4
  3208                           
  3209  0024                     ??_getLoad_AD:	
  3210                           ; 0 bytes @ 0x4
  3211                           
  3212  0024                     ??_getPowerFault_AD:	
  3213                           ; 0 bytes @ 0x4
  3214                           
  3215  0024                     ??_Flash_Memory_Modify:	
  3216                           ; 0 bytes @ 0x4
  3217                           
  3218  0024                     ??_RF_RxDisable:	
  3219                           ; 0 bytes @ 0x4
  3220                           
  3221  0024                     ??_setSw_Initialization:	
  3222                           ; 0 bytes @ 0x4
  3223                           
  3224  0024                     ??_Sw_DimmerAdjFunc:	
  3225                           ; 0 bytes @ 0x4
  3226                           
  3227  0024                     ??_CC2500_TxData:	
  3228                           ; 0 bytes @ 0x4
  3229                           
  3230  0024                     ??_CC2500_RxData:	
  3231                           ; 0 bytes @ 0x4
  3232                           
  3233  0024                     ??_DimmerLights_Initialization:	
  3234                           ; 0 bytes @ 0x4
  3235                           
  3236  0024                     ??___wmul:	
  3237                           ; 0 bytes @ 0x4
  3238                           
  3239  0024                     ??___lwdiv:	
  3240                           ; 0 bytes @ 0x4
  3241                           
  3242  0024                     CC2500_WriteREG@w_addr:	
  3243                           ; 0 bytes @ 0x4
  3244                           
  3245  0024                     setDelayOff_GO@value:	
  3246                           ; 1 bytes @ 0x4
  3247                           
  3248  0024                     setDimmerLights@status:	
  3249                           ; 1 bytes @ 0x4
  3250                           
  3251  0024                     setLED_Initialization@led:	
  3252                           ; 1 bytes @ 0x4
  3253                           
  3254  0024                     setLED_Main@led:	
  3255                           ; 1 bytes @ 0x4
  3256                           
  3257  0024                     RF_RxDisable@rf:	
  3258                           ; 1 bytes @ 0x4
  3259                           
  3260  0024                     setSw_Initialization@sw:	
  3261                           ; 1 bytes @ 0x4
  3262                           
  3263  0024                     Sw_DimmerAdjFunc@sw:	
  3264                           ; 1 bytes @ 0x4
  3265                           
  3266  0024                     ___ftpack@sign:	
  3267                           ; 1 bytes @ 0x4
  3268                           
  3269  0024                     DelayTime_1us@j:	
  3270                           ; 1 bytes @ 0x4
  3271                           
  3272  0024                     ___wmul@product:	
  3273                           ; 2 bytes @ 0x4
  3274                           
  3275                           
  3276                           ; 2 bytes @ 0x4
  3277  0024                     	ds	1
  3278  0025                     ??_CC2500_InitSetREG:	
  3279  0025                     ??_CC2500_InitPATable:	
  3280                           ; 0 bytes @ 0x5
  3281                           
  3282  0025                     ??_setDimmerLights:	
  3283                           ; 0 bytes @ 0x5
  3284                           
  3285  0025                     ??_Switch_Initialization:	
  3286                           ; 0 bytes @ 0x5
  3287                           
  3288  0025                     ??___ftpack:	
  3289                           ; 0 bytes @ 0x5
  3290                           
  3291  0025                     ??_setDelayOff_GO:	
  3292                           ; 0 bytes @ 0x5
  3293                           
  3294  0025                     ??_LED_Initialization:	
  3295                           ; 0 bytes @ 0x5
  3296                           
  3297  0025                     ??_LED_Main:	
  3298                           ; 0 bytes @ 0x5
  3299                           
  3300  0025                     CC2500_TxData@loop_e:	
  3301                           ; 0 bytes @ 0x5
  3302                           
  3303  0025                     CC2500_RxData@loop_f:	
  3304                           ; 1 bytes @ 0x5
  3305                           
  3306  0025                     setDimmerLights_ERROR@lights:	
  3307                           ; 1 bytes @ 0x5
  3308                           
  3309  0025                     ___lwdiv@quotient:	
  3310                           ; 1 bytes @ 0x5
  3311                           
  3312                           
  3313                           ; 2 bytes @ 0x5
  3314  0025                     	ds	1
  3315  0026                     ??_CC2500_PowerRST:	
  3316  0026                     ??_CC2500_FrequencyCabr:	
  3317                           ; 0 bytes @ 0x6
  3318                           
  3319  0026                     ?_setBuz:	
  3320                           ; 0 bytes @ 0x6
  3321                           
  3322  0026                     CC2500_InitSetREG@temp1:	
  3323                           ; 0 bytes @ 0x6
  3324                           
  3325  0026                     CC2500_InitPATable@temp:	
  3326                           ; 1 bytes @ 0x6
  3327                           
  3328  0026                     setDimmerLights@lights:	
  3329                           ; 1 bytes @ 0x6
  3330                           
  3331  0026                     Flash_Memory_Modify@i:	
  3332                           ; 1 bytes @ 0x6
  3333                           
  3334  0026                     setBuz@time:	
  3335                           ; 1 bytes @ 0x6
  3336                           
  3337                           
  3338                           ; 2 bytes @ 0x6
  3339  0026                     	ds	1
  3340  0027                     ??_Flash_Memory_Main:	
  3341  0027                     CC2500_InitSetREG@temp2:	
  3342                           ; 0 bytes @ 0x7
  3343                           
  3344  0027                     CC2500_InitPATable@loop_d:	
  3345                           ; 1 bytes @ 0x7
  3346                           
  3347  0027                     setDelayOff_GO@sw:	
  3348                           ; 1 bytes @ 0x7
  3349                           
  3350  0027                     ___lwdiv@counter:	
  3351                           ; 1 bytes @ 0x7
  3352                           
  3353                           
  3354                           ; 1 bytes @ 0x7
  3355  0027                     	ds	1
  3356  0028                     ??_setBuz:	
  3357  0028                     ?___awtoft:	
  3358                           ; 0 bytes @ 0x8
  3359                           
  3360  0028                     CC2500_InitSetREG@loop_c:	
  3361                           ; 3 bytes @ 0x8
  3362                           
  3363  0028                     getPowerFault_AD@channel:	
  3364                           ; 1 bytes @ 0x8
  3365                           
  3366  0028                     ___awtoft@c:	
  3367                           ; 1 bytes @ 0x8
  3368                           
  3369                           
  3370                           ; 2 bytes @ 0x8
  3371  0028                     	ds	1
  3372  0029                     ??_CC2500_PowerOnInitial:	
  3373  0029                     setBuz@count:	
  3374                           ; 0 bytes @ 0x9
  3375                           
  3376  0029                     getLoad_AD@channel:	
  3377                           ; 1 bytes @ 0x9
  3378                           
  3379                           
  3380                           ; 1 bytes @ 0x9
  3381  0029                     	ds	1
  3382  002A                     ??_MainT:	
  3383  002A                     ??_setLog_Code:	
  3384                           ; 0 bytes @ 0xA
  3385                           
  3386  002A                     ??_DimmerLights_Exceptions:	
  3387                           ; 0 bytes @ 0xA
  3388                           
  3389  002A                     DimmerLights_Exceptions@status:	
  3390                           ; 0 bytes @ 0xA
  3391                           
  3392  002A                     getLoad_AD@j:	
  3393                           ; 1 bytes @ 0xA
  3394                           
  3395                           
  3396                           ; 1 bytes @ 0xA
  3397  002A                     	ds	1
  3398  002B                     ??_setLoad_Exceptions:	
  3399  002B                     ??_setPowerFault_Exceptions:	
  3400                           ; 0 bytes @ 0xB
  3401                           
  3402  002B                     ??___awtoft:	
  3403                           ; 0 bytes @ 0xB
  3404                           
  3405  002B                     getLoad_AD@i:	
  3406                           ; 0 bytes @ 0xB
  3407                           
  3408  002B                     setLog_Code@rf:	
  3409                           ; 1 bytes @ 0xB
  3410                           
  3411                           
  3412                           ; 1 bytes @ 0xB
  3413  002B                     	ds	1
  3414  002C                     setLoad_Exceptions@command:	
  3415  002C                     setPowerFault_Exceptions@command:	
  3416                           ; 1 bytes @ 0xC
  3417                           
  3418                           
  3419                           ; 1 bytes @ 0xC
  3420  002C                     	ds	1
  3421  002D                     ??_Load_Main:	
  3422  002D                     ??_setPowerFault_Main:	
  3423                           ; 0 bytes @ 0xD
  3424                           
  3425  002D                     ___awtoft@sign:	
  3426                           ; 0 bytes @ 0xD
  3427                           
  3428                           
  3429                           ; 1 bytes @ 0xD
  3430  002D                     	ds	1
  3431  002E                     ?___ftdiv:	
  3432  002E                     ?___ftmul:	
  3433                           ; 3 bytes @ 0xE
  3434                           
  3435  002E                     ___ftdiv@f2:	
  3436                           ; 3 bytes @ 0xE
  3437                           
  3438  002E                     ___ftmul@f1:	
  3439                           ; 3 bytes @ 0xE
  3440                           
  3441                           
  3442                           ; 3 bytes @ 0xE
  3443  002E                     	ds	1
  3444  002F                     ??_PowerFault_Main:	
  3445                           
  3446                           ; 0 bytes @ 0xF
  3447  002F                     	ds	2
  3448  0031                     Load_Main@i:	
  3449  0031                     ___ftdiv@f1:	
  3450                           ; 1 bytes @ 0x11
  3451                           
  3452  0031                     ___ftmul@f2:	
  3453                           ; 3 bytes @ 0x11
  3454                           
  3455                           
  3456                           ; 3 bytes @ 0x11
  3457  0031                     	ds	3
  3458  0034                     ??___ftdiv:	
  3459  0034                     ??___ftmul:	
  3460                           ; 0 bytes @ 0x14
  3461                           
  3462                           
  3463                           ; 0 bytes @ 0x14
  3464  0034                     	ds	4
  3465  0038                     ___ftdiv@cntr:	
  3466  0038                     ___ftmul@exp:	
  3467                           ; 1 bytes @ 0x18
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0x18
  3471  0038                     	ds	1
  3472  0039                     ___ftdiv@f3:	
  3473  0039                     ___ftmul@f3_as_product:	
  3474                           ; 3 bytes @ 0x19
  3475                           
  3476                           
  3477                           ; 3 bytes @ 0x19
  3478  0039                     	ds	3
  3479  003C                     ___ftdiv@exp:	
  3480  003C                     ___ftmul@cntr:	
  3481                           ; 1 bytes @ 0x1C
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0x1C
  3485  003C                     	ds	1
  3486  003D                     ___ftdiv@sign:	
  3487  003D                     ___ftmul@sign:	
  3488                           ; 1 bytes @ 0x1D
  3489                           
  3490                           
  3491                           ; 1 bytes @ 0x1D
  3492  003D                     	ds	1
  3493  003E                     ?___ftadd:	
  3494  003E                     ___ftadd@f1:	
  3495                           ; 3 bytes @ 0x1E
  3496                           
  3497                           
  3498                           ; 3 bytes @ 0x1E
  3499  003E                     	ds	3
  3500  0041                     ___ftadd@f2:	
  3501                           
  3502                           ; 3 bytes @ 0x21
  3503  0041                     	ds	3
  3504  0044                     ??___ftadd:	
  3505                           
  3506                           ; 0 bytes @ 0x24
  3507  0044                     	ds	4
  3508  0048                     ___ftadd@sign:	
  3509                           
  3510                           ; 1 bytes @ 0x28
  3511  0048                     	ds	1
  3512  0049                     ___ftadd@exp2:	
  3513                           
  3514                           ; 1 bytes @ 0x29
  3515  0049                     	ds	1
  3516  004A                     ___ftadd@exp1:	
  3517                           
  3518                           ; 1 bytes @ 0x2A
  3519  004A                     	ds	1
  3520  004B                     ?___fttol:	
  3521  004B                     ___fttol@f1:	
  3522                           ; 4 bytes @ 0x2B
  3523                           
  3524                           
  3525                           ; 3 bytes @ 0x2B
  3526  004B                     	ds	4
  3527  004F                     ??___fttol:	
  3528                           
  3529                           ; 0 bytes @ 0x2F
  3530  004F                     	ds	4
  3531  0053                     ___fttol@sign1:	
  3532                           
  3533                           ; 1 bytes @ 0x33
  3534  0053                     	ds	1
  3535  0054                     ___fttol@lval:	
  3536                           
  3537                           ; 4 bytes @ 0x34
  3538  0054                     	ds	4
  3539  0058                     ___fttol@exp1:	
  3540                           
  3541                           ; 1 bytes @ 0x38
  3542  0058                     	ds	1
  3543  0059                     ??_getPercentValue:	
  3544  0059                     ??_setPercentValue:	
  3545                           ; 0 bytes @ 0x39
  3546                           
  3547  0059                     setPercentValue@value:	
  3548                           ; 0 bytes @ 0x39
  3549                           
  3550                           
  3551                           ; 1 bytes @ 0x39
  3552  0059                     	ds	1
  3553  005A                     setPercentValue@i:	
  3554                           
  3555                           ; 3 bytes @ 0x3A
  3556  005A                     	ds	1
  3557  005B                     getPercentValue@value:	
  3558                           
  3559                           ; 1 bytes @ 0x3B
  3560  005B                     	ds	1
  3561  005C                     getPercentValue@i:	
  3562                           
  3563                           ; 3 bytes @ 0x3C
  3564  005C                     	ds	1
  3565  005D                     ?_setRF_DimmerLights:	
  3566  005D                     ??_Flash_Memory_Initialization:	
  3567                           ; 0 bytes @ 0x3D
  3568                           
  3569  005D                     setRF_DimmerLights@on:	
  3570                           ; 0 bytes @ 0x3D
  3571                           
  3572                           
  3573                           ; 1 bytes @ 0x3D
  3574  005D                     	ds	1
  3575  005E                     ??_setRF_DimmerLights:	
  3576  005E                     Flash_Memory_Initialization@i:	
  3577                           ; 0 bytes @ 0x3E
  3578                           
  3579                           
  3580                           ; 1 bytes @ 0x3E
  3581  005E                     	ds	1
  3582  005F                     ??_setDimmerLights_AdjRF:	
  3583                           
  3584                           ; 0 bytes @ 0x3F
  3585  005F                     	ds	1
  3586  0060                     setDimmerLights_AdjRF@lights:	
  3587  0060                     setRF_DimmerLights@status:	
  3588                           ; 1 bytes @ 0x40
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0x40
  3592  0060                     	ds	1
  3593  0061                     ??_setRF_DimmerValue:	
  3594  0061                     setRF_DimmerLights@lights:	
  3595                           ; 0 bytes @ 0x41
  3596                           
  3597                           
  3598                           ; 1 bytes @ 0x41
  3599  0061                     	ds	1
  3600  0062                     ??_DlyOff_Main:	
  3601  0062                     ?_setDimmerLights_Adj:	
  3602                           ; 0 bytes @ 0x42
  3603                           
  3604  0062                     ??_setRFSW_Control:	
  3605                           ; 0 bytes @ 0x42
  3606                           
  3607  0062                     ??_Sw_DimmerOnFunc:	
  3608                           ; 0 bytes @ 0x42
  3609                           
  3610  0062                     ??_Sw_DimmerOffFunc:	
  3611                           ; 0 bytes @ 0x42
  3612                           
  3613  0062                     setDimmerLights_Adj@status:	
  3614                           ; 0 bytes @ 0x42
  3615                           
  3616  0062                     Sw_DimmerOnFunc@Idle:	
  3617                           ; 1 bytes @ 0x42
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x42
  3621  0062                     	ds	1
  3622  0063                     ??_setDimmerLights_Adj:	
  3623  0063                     setRFSW_Control@sw:	
  3624                           ; 0 bytes @ 0x43
  3625                           
  3626  0063                     setRF_DimmerValue@lights:	
  3627                           ; 1 bytes @ 0x43
  3628                           
  3629  0063                     Sw_DimmerOnFunc@sw:	
  3630                           ; 1 bytes @ 0x43
  3631                           
  3632                           
  3633                           ; 1 bytes @ 0x43
  3634  0063                     	ds	1
  3635  0064                     ??_setRFSW_AdjControl:	
  3636  0064                     DlyOff_Main@sw:	
  3637                           ; 0 bytes @ 0x44
  3638                           
  3639  0064                     setDimmerLights_Adj@lights:	
  3640                           ; 1 bytes @ 0x44
  3641                           
  3642  0064                     Sw_DimmerOffFunc@sw:	
  3643                           ; 1 bytes @ 0x44
  3644                           
  3645                           
  3646                           ; 1 bytes @ 0x44
  3647  0064                     	ds	1
  3648  0065                     ??_setDimmerLights_Main:	
  3649  0065                     ??_setSw_Main:	
  3650                           ; 0 bytes @ 0x45
  3651                           
  3652  0065                     ??_DelayOff_Main:	
  3653                           ; 0 bytes @ 0x45
  3654                           
  3655  0065                     setDimmerLights_Main@clear:	
  3656                           ; 0 bytes @ 0x45
  3657                           
  3658                           
  3659                           ; 1 bytes @ 0x45
  3660  0065                     	ds	1
  3661  0066                     setDimmerLights_Main@lights:	
  3662  0066                     setRFSW_AdjControl@sw:	
  3663                           ; 1 bytes @ 0x46
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0x46
  3667  0066                     	ds	1
  3668  0067                     ??_setControl_Lights_Table:	
  3669  0067                     ??_DimmerLights_Main:	
  3670                           ; 0 bytes @ 0x47
  3671                           
  3672  0067                     setControl_Lights_Table@rf:	
  3673                           ; 0 bytes @ 0x47
  3674                           
  3675  0067                     _setSw_Main$4352:	
  3676                           ; 1 bytes @ 0x47
  3677                           
  3678                           
  3679                           ; 1 bytes @ 0x47
  3680  0067                     	ds	1
  3681  0068                     ??_getRxData:	
  3682  0068                     getRxData@rf:	
  3683                           ; 0 bytes @ 0x48
  3684                           
  3685  0068                     setSw_Main@sw:	
  3686                           ; 1 bytes @ 0x48
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0x48
  3690  0068                     	ds	1
  3691  0069                     ??_Switch_Main:	
  3692  0069                     ??_setRF_Main:	
  3693                           ; 0 bytes @ 0x49
  3694                           
  3695                           
  3696                           ; 0 bytes @ 0x49
  3697  0069                     	ds	1
  3698  006A                     setRF_Main@rf:	
  3699                           
  3700                           ; 1 bytes @ 0x4A
  3701  006A                     	ds	1
  3702  006B                     _setRF_Main$4017:	
  3703                           
  3704                           ; 1 bytes @ 0x4B
  3705  006B                     	ds	1
  3706  006C                     ??_RF_Main:	
  3707  006C                     ??_main:	
  3708                           ; 0 bytes @ 0x4C
  3709                           
  3710                           
  3711                           	psect	maintext
  3712  1431                     __pmaintext:	
  3713                           ; 0 bytes @ 0x4C
  3714 ;;
  3715 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3716 ;;
  3717 ;; *************** function _main *****************
  3718 ;; Defined at:
  3719 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;		None
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;		None
  3724 ;; Return value:  Size  Location     Type
  3725 ;;		None               void
  3726 ;; Registers used:
  3727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 17F/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;Total ram usage:        0 bytes
  3738 ;; Hardware stack levels required when called:   14
  3739 ;; This function calls:
  3740 ;;		_Buzzer_Initialization
  3741 ;;		_Buzzer_Main
  3742 ;;		_CC2500_PowerOnInitial
  3743 ;;		_DelayOff_Initialization
  3744 ;;		_DelayOff_Main
  3745 ;;		_DimmerLights_Initialization
  3746 ;;		_DimmerLights_Main
  3747 ;;		_Flash_Memory_Initialization
  3748 ;;		_Flash_Memory_Main
  3749 ;;		_LED_Initialization
  3750 ;;		_LED_Main
  3751 ;;		_Load_Initialization
  3752 ;;		_Load_Main
  3753 ;;		_MainT
  3754 ;;		_MainT_Initialization
  3755 ;;		_Mcu_Initialization
  3756 ;;		_PowerFault_Initialization
  3757 ;;		_PowerFault_Main
  3758 ;;		_RF_Initialization
  3759 ;;		_RF_Main
  3760 ;;		_Switch_Initialization
  3761 ;;		_Switch_Main
  3762 ;;		_getLoad_AD
  3763 ;;		_getPowerFault_AD
  3764 ;; This function is called by:
  3765 ;;		Startup code after reset
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           
  3770                           ;psect for function _main
  3771  1431                     _main:	
  3772                           
  3773                           ;main.c: 9: MainT_Initialization();
  3774                           
  3775                           ;incstack = 0
  3776                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3777  1431  3198  2066  3194   	fcall	_MainT_Initialization
  3778                           
  3779                           ;main.c: 10: Mcu_Initialization();
  3780  1434  3188  2001  3194   	fcall	_Mcu_Initialization
  3781                           
  3782                           ;main.c: 11: Flash_Memory_Initialization();
  3783  1437  318E  262B  3194   	fcall	_Flash_Memory_Initialization
  3784                           
  3785                           ;main.c: 12: LED_Initialization();
  3786  143A  3198  20F1  3194   	fcall	_LED_Initialization
  3787                           
  3788                           ;main.c: 13: Buzzer_Initialization();
  3789  143D  31A7  27D4  3194   	fcall	_Buzzer_Initialization
  3790                           
  3791                           ;main.c: 15: ;;
  3792                           ;main.c: 16: ;;
  3793                           ;main.c: 17: Load_Initialization();
  3794  1440  3199  2109  3194   	fcall	_Load_Initialization
  3795                           
  3796                           ;main.c: 18: PowerFault_Initialization();
  3797  1443  31A7  274F  3194   	fcall	_PowerFault_Initialization
  3798                           
  3799                           ;main.c: 19: DelayOff_Initialization();
  3800  1446  31A7  2761  3194   	fcall	_DelayOff_Initialization
  3801                           
  3802                           ;main.c: 21: DimmerLights_Initialization();
  3803  1449  3198  20CD  3194   	fcall	_DimmerLights_Initialization
  3804                           
  3805                           ;main.c: 22: ;;
  3806                           ;main.c: 23: ;;
  3807                           ;main.c: 24: ;;
  3808                           ;main.c: 26: Switch_Initialization();
  3809  144C  31A7  27C1  3194   	fcall	_Switch_Initialization
  3810                           
  3811                           ;main.c: 27: RF_Initialization();
  3812  144F  31A7  2769  3194   	fcall	_RF_Initialization
  3813                           
  3814                           ;main.c: 28: CC2500_PowerOnInitial();
  3815  1452  319A  2207  3194   	fcall	_CC2500_PowerOnInitial
  3816  1455                     l9141:	
  3817                           ;main.c: 30: while(1)
  3818                           
  3819                           
  3820                           ;main.c: 31: {
  3821                           ;main.c: 32: if(TMain->PowerON)
  3822  1455  087D               	movf	_TMain,w
  3823  1456  0086               	movwf	6
  3824  1457  3001               	movlw	1	; select bank2/3
  3825  1458  0087               	movwf	7
  3826  1459  1C01               	btfss	1,0
  3827  145A  2C66               	goto	l9145
  3828                           
  3829                           ;main.c: 33: {
  3830                           ;main.c: 35: ;;
  3831                           ;main.c: 39: getLoad_AD(0x05);
  3832  145B  3005               	movlw	5
  3833  145C  318A  2230  3194   	fcall	_getLoad_AD
  3834                           
  3835                           ;main.c: 43: ;;
  3836                           ;main.c: 47: getPowerFault_AD(0x11);
  3837  145F  3011               	movlw	17
  3838  1460  319E  26C3  3194   	fcall	_getPowerFault_AD
  3839                           
  3840                           ;main.c: 59: Buzzer_Main();
  3841  1463  318B  2361  3194   	fcall	_Buzzer_Main
  3842  1466                     l9145:	
  3843                           
  3844                           ;main.c: 61: }
  3845                           ;main.c: 63: if(TMain->T0_Timerout)
  3846  1466  087D               	movf	_TMain,w
  3847  1467  0086               	movwf	6
  3848  1468  3001               	movlw	1	; select bank2/3
  3849  1469  0087               	movwf	7
  3850  146A  1C81               	btfss	1,1
  3851  146B  2C55               	goto	l9141
  3852                           
  3853                           ;main.c: 64: {
  3854                           ;main.c: 65: TMain->T0_Timerout = 0;
  3855  146C  087D               	movf	_TMain,w
  3856  146D  0086               	movwf	6
  3857  146E  3001               	movlw	1	; select bank2/3
  3858  146F  0087               	movwf	7
  3859  1470  1081               	bcf	1,1
  3860                           
  3861                           ;main.c: 66: MainT();
  3862  1471  3196  2636  3194   	fcall	_MainT
  3863                           
  3864                           ;main.c: 67: if(TMain->PowerON)
  3865  1474  087D               	movf	_TMain,w
  3866  1475  0086               	movwf	6
  3867  1476  3001               	movlw	1	; select bank2/3
  3868  1477  0087               	movwf	7
  3869  1478  1C01               	btfss	1,0
  3870  1479  2C55               	goto	l9141
  3871                           
  3872                           ;main.c: 68: {
  3873                           ;main.c: 69: Flash_Memory_Main();
  3874  147A  319F  27BD  3194   	fcall	_Flash_Memory_Main
  3875                           
  3876                           ;main.c: 71: LED_Main();
  3877  147D  3198  20FD  3194   	fcall	_LED_Main
  3878                           
  3879                           ;main.c: 73: ;;
  3880                           ;main.c: 74: ;;
  3881                           ;main.c: 75: Load_Main();
  3882  1480  3180  204F  3194   	fcall	_Load_Main
  3883                           
  3884                           ;main.c: 76: PowerFault_Main();
  3885  1483  31A7  2752  3194   	fcall	_PowerFault_Main
  3886                           
  3887                           ;main.c: 78: ;;
  3888                           ;main.c: 79: DimmerLights_Main();
  3889  1486  31A7  2793  3194   	fcall	_DimmerLights_Main
  3890                           
  3891                           ;main.c: 80: Switch_Main();
  3892  1489  31A7  2771  3194   	fcall	_Switch_Main
  3893                           
  3894                           ;main.c: 81: ;;
  3895                           ;main.c: 82: ;;
  3896                           ;main.c: 84: RF_Main();
  3897  148C  31A7  276D  3194   	fcall	_RF_Main
  3898                           
  3899                           ;main.c: 85: DelayOff_Main();
  3900  148F  31A7  2765  3194   	fcall	_DelayOff_Main
  3901  1492  2C55               	goto	l9141
  3902  1493                     __end_of_main:	
  3903                           
  3904                           	psect	text1
  3905  1EC3                     __ptext1:	
  3906 ;; *************** function _getPowerFault_AD *****************
  3907 ;; Defined at:
  3908 ;;		line 49 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  channel         1    wreg     unsigned char 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  channel         1    8[BANK0 ] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;		None               void
  3915 ;; Registers used:
  3916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3924 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3925 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3926 ;;Total ram usage:        5 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    5
  3929 ;; This function calls:
  3930 ;;		_getAD
  3931 ;; This function is called by:
  3932 ;;		_main
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           
  3937                           ;psect for function _getPowerFault_AD
  3938  1EC3                     _getPowerFault_AD:	
  3939                           
  3940                           ;incstack = 0
  3941                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3942                           ;getPowerFault_AD@channel stored from wreg
  3943  1EC3  0020               	movlb	0	; select bank0
  3944  1EC4  00A8               	movwf	getPowerFault_AD@channel
  3945                           
  3946                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  3947  1EC5  087A               	movf	_PF,w
  3948  1EC6  0086               	movwf	6
  3949  1EC7  0187               	clrf	7
  3950  1EC8  1D81               	btfss	1,3
  3951  1EC9  0008               	return
  3952                           
  3953                           ;PowerFault_B1.c: 52: {
  3954                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  3955  1ECA  30F0               	movlw	240
  3956  1ECB  00A4               	movwf	??_getPowerFault_AD
  3957  1ECC  0824               	movf	??_getPowerFault_AD,w
  3958  1ECD  00A0               	movwf	getAD@adcon1
  3959  1ECE  0828               	movf	getPowerFault_AD@channel,w
  3960  1ECF  319A  2247  319E   	fcall	_getAD
  3961  1ED2  087A               	movf	_PF,w
  3962  1ED3  3E03               	addlw	3
  3963  1ED4  0086               	movwf	6
  3964  1ED5  0187               	clrf	7
  3965  1ED6  0020               	movlb	0	; select bank0
  3966  1ED7  0820               	movf	?_getAD,w
  3967  1ED8  3FC0               	movwi [0]fsr1
  3968  1ED9  0821               	movf	?_getAD+1,w
  3969  1EDA  3FC1               	movwi [1]fsr1
  3970                           
  3971                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  3972  1EDB  087A               	movf	_PF,w
  3973  1EDC  3E03               	addlw	3
  3974  1EDD  0086               	movwf	6
  3975  1EDE  0187               	clrf	7
  3976  1EDF  3F40               	moviw [0]fsr1
  3977  1EE0  00A4               	movwf	??_getPowerFault_AD
  3978  1EE1  3F41               	moviw [1]fsr1
  3979  1EE2  00A5               	movwf	??_getPowerFault_AD+1
  3980  1EE3  0A7A               	incf	_PF,w
  3981  1EE4  0086               	movwf	6
  3982  1EE5  0187               	clrf	7
  3983  1EE6  3F40               	moviw [0]fsr1
  3984  1EE7  00A6               	movwf	??_getPowerFault_AD+2
  3985  1EE8  3F41               	moviw [1]fsr1
  3986  1EE9  00A7               	movwf	??_getPowerFault_AD+3
  3987  1EEA  0825               	movf	??_getPowerFault_AD+1,w
  3988  1EEB  0227               	subwf	??_getPowerFault_AD+3,w
  3989  1EEC  1D03               	skipz
  3990  1EED  2EF0               	goto	u8575
  3991  1EEE  0824               	movf	??_getPowerFault_AD,w
  3992  1EEF  0226               	subwf	??_getPowerFault_AD+2,w
  3993  1EF0                     u8575:	
  3994  1EF0  1803               	skipnc
  3995  1EF1  0008               	return
  3996                           
  3997                           ;PowerFault_B1.c: 55: {
  3998                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  3999  1EF2  087A               	movf	_PF,w
  4000  1EF3  3E03               	addlw	3
  4001  1EF4  0086               	movwf	6
  4002  1EF5  0187               	clrf	7
  4003  1EF6  0A7A               	incf	_PF,w
  4004  1EF7  0084               	movwf	4
  4005  1EF8  0185               	clrf	5
  4006  1EF9  3F40               	moviw [0]fsr1
  4007  1EFA  3F80               	movwi [0]fsr0
  4008  1EFB  3F41               	moviw [1]fsr1
  4009  1EFC  3F81               	movwi [1]fsr0
  4010  1EFD  0008               	return
  4011  1EFE                     __end_of_getPowerFault_AD:	
  4012                           
  4013                           	psect	text2
  4014  0A30                     __ptext2:	
  4015 ;; *************** function _getLoad_AD *****************
  4016 ;; Defined at:
  4017 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  channel         1    wreg     unsigned char 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  channel         1    9[BANK0 ] unsigned char 
  4022 ;;  i               1   11[BANK0 ] unsigned char 
  4023 ;;  j               1   10[BANK0 ] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;		None               void
  4026 ;; Registers used:
  4027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;Total ram usage:        8 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    5
  4040 ;; This function calls:
  4041 ;;		_getAD
  4042 ;; This function is called by:
  4043 ;;		_main
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _getLoad_AD
  4049  0A30                     _getLoad_AD:	
  4050                           
  4051                           ;incstack = 0
  4052                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4053                           ;getLoad_AD@channel stored from wreg
  4054  0A30  0020               	movlb	0	; select bank0
  4055  0A31  00A9               	movwf	getLoad_AD@channel
  4056                           
  4057                           ;OverLoad_B1.c: 17: char i=0,j=0;
  4058  0A32  01AB               	clrf	getLoad_AD@i
  4059  0A33  01AA               	clrf	getLoad_AD@j
  4060                           
  4061                           ;OverLoad_B1.c: 19: if(Load->ADtoGO)
  4062  0A34  086E               	movf	_Load,w
  4063  0A35  0086               	movwf	6
  4064  0A36  3002               	movlw	2	; select bank4/5
  4065  0A37  0087               	movwf	7
  4066  0A38  1E01               	btfss	1,4
  4067  0A39  0008               	return
  4068                           
  4069                           ;OverLoad_B1.c: 20: {
  4070                           ;OverLoad_B1.c: 21: Load->ADRES=getAD(channel,0xc0);
  4071  0A3A  30C0               	movlw	192
  4072  0A3B  00A4               	movwf	??_getLoad_AD
  4073  0A3C  0824               	movf	??_getLoad_AD,w
  4074  0A3D  00A0               	movwf	getAD@adcon1
  4075  0A3E  0829               	movf	getLoad_AD@channel,w
  4076  0A3F  319A  2247  318A   	fcall	_getAD
  4077  0A42  0020               	movlb	0	; select bank0
  4078  0A43  086E               	movf	_Load,w
  4079  0A44  3E32               	addlw	50
  4080  0A45  0086               	movwf	6
  4081  0A46  3002               	movlw	2	; select bank4/5
  4082  0A47  0087               	movwf	7
  4083  0A48  0820               	movf	?_getAD,w
  4084  0A49  3FC0               	movwi [0]fsr1
  4085  0A4A  0821               	movf	?_getAD+1,w
  4086  0A4B  3FC1               	movwi [1]fsr1
  4087                           
  4088                           ;OverLoad_B1.c: 22: for(i=0 ; i<5 ;i++)
  4089  0A4C  01AB               	clrf	getLoad_AD@i
  4090  0A4D  3005               	movlw	5
  4091  0A4E  022B               	subwf	getLoad_AD@i,w
  4092  0A4F  1803               	btfsc	3,0
  4093  0A50  2A8A               	goto	l8895
  4094  0A51                     l8885:	
  4095                           
  4096                           ;OverLoad_B1.c: 23: {
  4097                           ;OverLoad_B1.c: 24: if(Load->AH[i] < Load->ADRES)
  4098  0A51  086E               	movf	_Load,w
  4099  0A52  3E32               	addlw	50
  4100  0A53  0086               	movwf	6
  4101  0A54  3002               	movlw	2	; select bank4/5
  4102  0A55  0087               	movwf	7
  4103  0A56  3F40               	moviw [0]fsr1
  4104  0A57  00A4               	movwf	??_getLoad_AD
  4105  0A58  3F41               	moviw [1]fsr1
  4106  0A59  00A5               	movwf	??_getLoad_AD+1
  4107  0A5A  352B               	lslf	getLoad_AD@i,w
  4108  0A5B  3E08               	addlw	8
  4109  0A5C  076E               	addwf	_Load,w
  4110  0A5D  00A6               	movwf	??_getLoad_AD+2
  4111  0A5E  0826               	movf	??_getLoad_AD+2,w
  4112  0A5F  0086               	movwf	6
  4113  0A60  3002               	movlw	2	; select bank4/5
  4114  0A61  0087               	movwf	7
  4115  0A62  3F40               	moviw [0]fsr1
  4116  0A63  00A7               	movwf	??_getLoad_AD+3
  4117  0A64  3F41               	moviw [1]fsr1
  4118  0A65  00A8               	movwf	??_getLoad_AD+4
  4119  0A66  0825               	movf	??_getLoad_AD+1,w
  4120  0A67  0228               	subwf	??_getLoad_AD+4,w
  4121  0A68  1D03               	skipz
  4122  0A69  2A6C               	goto	u8505
  4123  0A6A  0824               	movf	??_getLoad_AD,w
  4124  0A6B  0227               	subwf	??_getLoad_AD+3,w
  4125  0A6C                     u8505:	
  4126  0A6C  1803               	skipnc
  4127  0A6D  2A82               	goto	l8891
  4128                           
  4129                           ;OverLoad_B1.c: 25: {
  4130                           ;OverLoad_B1.c: 26: Load->AH[i]=Load->ADRES;
  4131  0A6E  086E               	movf	_Load,w
  4132  0A6F  3E32               	addlw	50
  4133  0A70  0086               	movwf	6
  4134  0A71  3002               	movlw	2	; select bank4/5
  4135  0A72  0087               	movwf	7
  4136  0A73  352B               	lslf	getLoad_AD@i,w
  4137  0A74  3E08               	addlw	8
  4138  0A75  076E               	addwf	_Load,w
  4139  0A76  00A4               	movwf	??_getLoad_AD
  4140  0A77  0824               	movf	??_getLoad_AD,w
  4141  0A78  0084               	movwf	4
  4142  0A79  3002               	movlw	2	; select bank4/5
  4143  0A7A  0085               	movwf	5
  4144  0A7B  3F40               	moviw [0]fsr1
  4145  0A7C  3F80               	movwi [0]fsr0
  4146  0A7D  3F41               	moviw [1]fsr1
  4147  0A7E  3F81               	movwi [1]fsr0
  4148                           
  4149                           ;OverLoad_B1.c: 27: j=1;
  4150  0A7F  01AA               	clrf	getLoad_AD@j
  4151  0A80  0AAA               	incf	getLoad_AD@j,f
  4152                           
  4153                           ;OverLoad_B1.c: 28: break;
  4154  0A81  2A8A               	goto	l8895
  4155  0A82                     l8891:	
  4156  0A82  3001               	movlw	1
  4157  0A83  00A4               	movwf	??_getLoad_AD
  4158  0A84  0824               	movf	??_getLoad_AD,w
  4159  0A85  07AB               	addwf	getLoad_AD@i,f
  4160  0A86  3005               	movlw	5
  4161  0A87  022B               	subwf	getLoad_AD@i,w
  4162  0A88  1C03               	skipc
  4163  0A89  2A51               	goto	l8885
  4164  0A8A                     l8895:	
  4165                           
  4166                           ;OverLoad_B1.c: 29: }
  4167                           ;OverLoad_B1.c: 30: }
  4168                           ;OverLoad_B1.c: 31: if(!j)
  4169  0A8A  08AA               	movf	getLoad_AD@j,f
  4170  0A8B  1D03               	skipz
  4171  0A8C  0008               	return
  4172                           
  4173                           ;OverLoad_B1.c: 32: {
  4174                           ;OverLoad_B1.c: 33: for(i=0 ; i<5 ;i++)
  4175  0A8D  01AB               	clrf	getLoad_AD@i
  4176  0A8E                     L1:	
  4177  0A8E  3005               	movlw	5
  4178  0A8F  022B               	subwf	getLoad_AD@i,w
  4179  0A90  1803               	btfsc	3,0
  4180  0A91  0008               	return
  4181                           
  4182                           ;OverLoad_B1.c: 34: {
  4183                           ;OverLoad_B1.c: 35: if(Load->AL[i] > Load->ADRES)
  4184  0A92  352B               	lslf	getLoad_AD@i,w
  4185  0A93  3E1A               	addlw	26
  4186  0A94  076E               	addwf	_Load,w
  4187  0A95  00A4               	movwf	??_getLoad_AD
  4188  0A96  0824               	movf	??_getLoad_AD,w
  4189  0A97  0086               	movwf	6
  4190  0A98  3002               	movlw	2	; select bank4/5
  4191  0A99  0087               	movwf	7
  4192  0A9A  3F40               	moviw [0]fsr1
  4193  0A9B  00A5               	movwf	??_getLoad_AD+1
  4194  0A9C  3F41               	moviw [1]fsr1
  4195  0A9D  00A6               	movwf	??_getLoad_AD+2
  4196  0A9E  086E               	movf	_Load,w
  4197  0A9F  3E32               	addlw	50
  4198  0AA0  0086               	movwf	6
  4199  0AA1  3002               	movlw	2	; select bank4/5
  4200  0AA2  0087               	movwf	7
  4201  0AA3  3F40               	moviw [0]fsr1
  4202  0AA4  00A7               	movwf	??_getLoad_AD+3
  4203  0AA5  3F41               	moviw [1]fsr1
  4204  0AA6  00A8               	movwf	??_getLoad_AD+4
  4205  0AA7  0826               	movf	??_getLoad_AD+2,w
  4206  0AA8  0228               	subwf	??_getLoad_AD+4,w
  4207  0AA9  1D03               	skipz
  4208  0AAA  2AAD               	goto	u8545
  4209  0AAB  0825               	movf	??_getLoad_AD+1,w
  4210  0AAC  0227               	subwf	??_getLoad_AD+3,w
  4211  0AAD                     u8545:	
  4212  0AAD  1803               	skipnc
  4213  0AAE  2AC1               	goto	l8907
  4214                           
  4215                           ;OverLoad_B1.c: 36: {
  4216                           ;OverLoad_B1.c: 37: Load->AL[i]=Load->ADRES;
  4217  0AAF  086E               	movf	_Load,w
  4218  0AB0  3E32               	addlw	50
  4219  0AB1  0086               	movwf	6
  4220  0AB2  3002               	movlw	2	; select bank4/5
  4221  0AB3  0087               	movwf	7
  4222  0AB4  352B               	lslf	getLoad_AD@i,w
  4223  0AB5  3E1A               	addlw	26
  4224  0AB6  076E               	addwf	_Load,w
  4225  0AB7  00A4               	movwf	??_getLoad_AD
  4226  0AB8  0824               	movf	??_getLoad_AD,w
  4227  0AB9  0084               	movwf	4
  4228  0ABA  3002               	movlw	2	; select bank4/5
  4229  0ABB  0085               	movwf	5
  4230  0ABC  3F40               	moviw [0]fsr1
  4231  0ABD  3F80               	movwi [0]fsr0
  4232  0ABE  3F41               	moviw [1]fsr1
  4233  0ABF  3F81               	movwi [1]fsr0
  4234                           
  4235                           ;OverLoad_B1.c: 38: break;
  4236  0AC0  0008               	return
  4237  0AC1                     l8907:	
  4238  0AC1  3001               	movlw	1
  4239  0AC2  00A4               	movwf	??_getLoad_AD
  4240  0AC3  0824               	movf	??_getLoad_AD,w
  4241  0AC4  07AB               	addwf	getLoad_AD@i,f
  4242  0AC5  2A8E               	goto	L1
  4243  0AC6                     __end_of_getLoad_AD:	
  4244                           
  4245                           	psect	text3
  4246  1A47                     __ptext3:	
  4247 ;; *************** function _getAD *****************
  4248 ;; Defined at:
  4249 ;;		line 328 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  adcon0          1    wreg     unsigned char 
  4252 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  2    0[BANK0 ] int 
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4264 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;Total ram usage:        4 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    4
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_getLoad_AD
  4275 ;;		_getPowerFault_AD
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           
  4280                           ;psect for function _getAD
  4281  1A47                     _getAD:	
  4282                           
  4283                           ;incstack = 0
  4284                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4285                           ;getAD@adcon0 stored from wreg
  4286  1A47  0020               	movlb	0	; select bank0
  4287  1A48  00A3               	movwf	getAD@adcon0
  4288                           
  4289                           ;MCU_16f1518_B1.c: 330: ADCON0=adcon0;
  4290  1A49  0823               	movf	getAD@adcon0,w
  4291  1A4A  0021               	movlb	1	; select bank1
  4292  1A4B  009D               	movwf	29	;volatile
  4293                           
  4294                           ;MCU_16f1518_B1.c: 331: ADCON1=adcon1;
  4295  1A4C  0020               	movlb	0	; select bank0
  4296  1A4D  0820               	movf	getAD@adcon1,w
  4297  1A4E  0021               	movlb	1	; select bank1
  4298  1A4F  009E               	movwf	30	;volatile
  4299                           
  4300                           ;MCU_16f1518_B1.c: 332: GO_nDONE=1;
  4301  1A50  149D               	bsf	29,1	;volatile
  4302  1A51                     l1556:	
  4303                           ;MCU_16f1518_B1.c: 333: while(GO_nDONE);
  4304                           
  4305  1A51  189D               	btfsc	29,1	;volatile
  4306  1A52  2A51               	goto	l1556
  4307                           
  4308                           ;MCU_16f1518_B1.c: 334: return ((ADRESH*256)+ADRESL);
  4309  1A53  081C               	movf	28,w	;volatile
  4310  1A54  0020               	movlb	0	; select bank0
  4311  1A55  01A1               	clrf	?_getAD+1
  4312  1A56  07A1               	addwf	?_getAD+1,f
  4313  1A57  0021               	movlb	1	; select bank1
  4314  1A58  081B               	movf	27,w	;volatile
  4315  1A59  0020               	movlb	0	; select bank0
  4316  1A5A  01A0               	clrf	?_getAD
  4317  1A5B  07A0               	addwf	?_getAD,f
  4318  1A5C  0008               	return
  4319  1A5D                     __end_of_getAD:	
  4320                           
  4321                           	psect	text4
  4322  2771                     __ptext4:	
  4323 ;; *************** function _Switch_Main *****************
  4324 ;; Defined at:
  4325 ;;		line 62 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;		None
  4330 ;; Return value:  Size  Location     Type
  4331 ;;		None               void
  4332 ;; Registers used:
  4333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;Total ram usage:        0 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:   10
  4346 ;; This function calls:
  4347 ;;		_setSw_Main
  4348 ;; This function is called by:
  4349 ;;		_main
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           
  4354                           ;psect for function _Switch_Main
  4355  2771                     _Switch_Main:	
  4356                           
  4357                           ;Switch_B1.c: 65: setSw_Main(1);
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4361  2771  3001               	movlw	1
  4362  2772  3185  25AE         	fcall	_setSw_Main
  4363  2774  0008               	return
  4364  2775                     __end_of_Switch_Main:	
  4365                           
  4366                           	psect	text5
  4367  05AE                     __ptext5:	
  4368 ;; *************** function _setSw_Main *****************
  4369 ;; Defined at:
  4370 ;;		line 112 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  sw              1    wreg     unsigned char 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  sw              1   72[BANK0 ] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;		None               void
  4377 ;; Registers used:
  4378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;Total ram usage:        4 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    9
  4391 ;; This function calls:
  4392 ;;		_SwPointSelect
  4393 ;;		_Sw_DimmerAdjFunc
  4394 ;;		_Sw_DimmerOffFunc
  4395 ;;		_Sw_DimmerOnFunc
  4396 ;;		_setBuz
  4397 ;;		_setRF_Learn
  4398 ;; This function is called by:
  4399 ;;		_Switch_Main
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           
  4404                           ;psect for function _setSw_Main
  4405  05AE                     _setSw_Main:	
  4406                           
  4407                           ;incstack = 0
  4408                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4409                           ;setSw_Main@sw stored from wreg
  4410  05AE  0020               	movlb	0	; select bank0
  4411  05AF  00E8               	movwf	setSw_Main@sw
  4412                           
  4413                           ;Switch_B1.c: 114: if(Sw->Enable)
  4414  05B0  086D               	movf	_Sw,w
  4415  05B1  0086               	movwf	6
  4416  05B2  3001               	movlw	1	; select bank2/3
  4417  05B3  0087               	movwf	7
  4418  05B4  1C01               	btfss	1,0
  4419  05B5  0008               	return
  4420                           
  4421                           ;Switch_B1.c: 115: {
  4422                           ;Switch_B1.c: 116: SwPointSelect(sw);
  4423  05B6  0868               	movf	setSw_Main@sw,w
  4424  05B7  31A7  27F5  3185   	fcall	_SwPointSelect
  4425                           
  4426                           ;Switch_B1.c: 144: Sw->Touch=(RA6 || RA4 || RA0 || RB1)?1:0;
  4427  05BA  0020               	movlb	0	; select bank0
  4428  05BB  01E7               	clrf	_setSw_Main$4352
  4429  05BC  0AE7               	incf	_setSw_Main$4352,f
  4430  05BD  1F0C               	btfss	12,6	;volatile
  4431  05BE  1A0C               	btfsc	12,4	;volatile
  4432  05BF  2DC4               	goto	l8709
  4433  05C0  1C0C               	btfss	12,0	;volatile
  4434  05C1  188D               	btfsc	13,1	;volatile
  4435  05C2  2DC4               	goto	l8709
  4436  05C3  01E7               	clrf	_setSw_Main$4352
  4437  05C4                     l8709:	
  4438  05C4  086D               	movf	_Sw,w
  4439  05C5  0086               	movwf	6
  4440  05C6  3001               	movlw	1	; select bank2/3
  4441  05C7  0087               	movwf	7
  4442  05C8  0867               	movf	_setSw_Main$4352,w
  4443  05C9  1081               	bcf	1,1
  4444  05CA  1D03               	skipz
  4445  05CB  1481               	bsf	1,1
  4446                           
  4447                           ;Switch_B1.c: 148: if(Sw->Touch)
  4448  05CC  086D               	movf	_Sw,w
  4449  05CD  0086               	movwf	6
  4450  05CE  3001               	movlw	1	; select bank2/3
  4451  05CF  0087               	movwf	7
  4452  05D0  1C81               	btfss	1,1
  4453  05D1  2EA2               	goto	l8759
  4454                           
  4455                           ;Switch_B1.c: 149: {
  4456                           ;Switch_B1.c: 150: if(!Sw->Debounce)
  4457  05D2  086D               	movf	_Sw,w
  4458  05D3  0086               	movwf	6
  4459  05D4  3001               	movlw	1	; select bank2/3
  4460  05D5  0087               	movwf	7
  4461  05D6  1901               	btfsc	1,2
  4462  05D7  2DF9               	goto	l8725
  4463                           
  4464                           ;Switch_B1.c: 151: {
  4465                           ;Switch_B1.c: 152: Sw->DebounceTime++;
  4466  05D8  3001               	movlw	1
  4467  05D9  00E5               	movwf	??_setSw_Main
  4468  05DA  086D               	movf	_Sw,w
  4469  05DB  3E02               	addlw	2
  4470  05DC  0086               	movwf	6
  4471  05DD  3001               	movlw	1	; select bank2/3
  4472  05DE  0087               	movwf	7
  4473  05DF  0865               	movf	??_setSw_Main,w
  4474  05E0  0781               	addwf	1,f
  4475                           
  4476                           ;Switch_B1.c: 153: if(Sw->DebounceTime >= 5)
  4477  05E1  086D               	movf	_Sw,w
  4478  05E2  3E02               	addlw	2
  4479  05E3  0086               	movwf	6
  4480  05E4  3001               	movlw	1	; select bank2/3
  4481  05E5  0087               	movwf	7
  4482  05E6  3005               	movlw	5
  4483  05E7  0201               	subwf	1,w
  4484  05E8  1C03               	skipc
  4485  05E9  0008               	return
  4486                           
  4487                           ;Switch_B1.c: 154: {
  4488                           ;Switch_B1.c: 155: Sw->DebounceTime=0;
  4489  05EA  086D               	movf	_Sw,w
  4490  05EB  3E02               	addlw	2
  4491  05EC  0086               	movwf	6
  4492  05ED  3001               	movlw	1	; select bank2/3
  4493  05EE  0087               	movwf	7
  4494  05EF  0181               	clrf	1
  4495                           
  4496                           ;Switch_B1.c: 156: Sw->Debounce=1;
  4497  05F0  086D               	movf	_Sw,w
  4498  05F1  0086               	movwf	6
  4499  05F2  3001               	movlw	1	; select bank2/3
  4500  05F3  0087               	movwf	7
  4501  05F4  1501               	bsf	1,2
  4502                           
  4503                           ;Switch_B1.c: 159: Sw_DimmerOnFunc(sw);
  4504  05F5  0868               	movf	setSw_Main@sw,w
  4505  05F6  3192  2208         	fcall	_Sw_DimmerOnFunc
  4506                           
  4507                           ;Switch_B1.c: 162: }
  4508                           ;Switch_B1.c: 163: }
  4509  05F8  0008               	return
  4510  05F9                     l8725:	
  4511                           
  4512                           ;Switch_B1.c: 164: else
  4513                           ;Switch_B1.c: 165: {
  4514                           ;Switch_B1.c: 166: if(!Sw->Hold1)
  4515  05F9  0020               	movlb	0	; select bank0
  4516  05FA  086D               	movf	_Sw,w
  4517  05FB  0086               	movwf	6
  4518  05FC  3001               	movlw	1	; select bank2/3
  4519  05FD  0087               	movwf	7
  4520  05FE  1981               	btfsc	1,3
  4521  05FF  2E2B               	goto	l8735
  4522                           
  4523                           ;Switch_B1.c: 167: {
  4524                           ;Switch_B1.c: 168: Sw->Hold1Time++;
  4525  0600  086D               	movf	_Sw,w
  4526  0601  3E03               	addlw	3
  4527  0602  0086               	movwf	6
  4528  0603  3001               	movlw	1	; select bank2/3
  4529  0604  0087               	movwf	7
  4530  0605  3001               	movlw	1
  4531  0606  0781               	addwf	1,f
  4532  0607  3141               	addfsr 1,1
  4533  0608  1803               	skipnc
  4534  0609  0A81               	incf	1,f
  4535                           
  4536                           ;Switch_B1.c: 169: if(Sw->Hold1Time >= 150)
  4537  060A  086D               	movf	_Sw,w
  4538  060B  3E03               	addlw	3
  4539  060C  0086               	movwf	6
  4540  060D  3001               	movlw	1	; select bank2/3
  4541  060E  0087               	movwf	7
  4542  060F  3F40               	moviw [0]fsr1
  4543  0610  00E5               	movwf	??_setSw_Main
  4544  0611  3F41               	moviw [1]fsr1
  4545  0612  00E6               	movwf	??_setSw_Main+1
  4546  0613  3000               	movlw	0
  4547  0614  0266               	subwf	??_setSw_Main+1,w
  4548  0615  3096               	movlw	150
  4549  0616  1903               	skipnz
  4550  0617  0265               	subwf	??_setSw_Main,w
  4551  0618  1C03               	skipc
  4552  0619  0008               	return
  4553                           
  4554                           ;Switch_B1.c: 170: {
  4555                           ;Switch_B1.c: 171: Sw->Hold1Time=0;
  4556  061A  086D               	movf	_Sw,w
  4557  061B  3E03               	addlw	3
  4558  061C  0086               	movwf	6
  4559  061D  3001               	movlw	1	; select bank2/3
  4560  061E  0087               	movwf	7
  4561  061F  3000               	movlw	0
  4562  0620  3FC0               	movwi [0]fsr1
  4563  0621  3FC1               	movwi [1]fsr1
  4564                           
  4565                           ;Switch_B1.c: 172: Sw->Hold1=1;
  4566  0622  086D               	movf	_Sw,w
  4567  0623  0086               	movwf	6
  4568  0624  3001               	movlw	1	; select bank2/3
  4569  0625  0087               	movwf	7
  4570  0626  1581               	bsf	1,3
  4571                           
  4572                           ;Switch_B1.c: 175: Sw_DimmerAdjFunc(sw);
  4573  0627  0868               	movf	setSw_Main@sw,w
  4574  0628  319C  243D         	fcall	_Sw_DimmerAdjFunc
  4575                           
  4576                           ;Switch_B1.c: 178: }
  4577                           ;Switch_B1.c: 179: }
  4578  062A  0008               	return
  4579  062B                     l8735:	
  4580                           
  4581                           ;Switch_B1.c: 180: else
  4582                           ;Switch_B1.c: 181: {
  4583                           ;Switch_B1.c: 182: if(!Sw->Hold2)
  4584  062B  0020               	movlb	0	; select bank0
  4585  062C  086D               	movf	_Sw,w
  4586  062D  0086               	movwf	6
  4587  062E  3001               	movlw	1	; select bank2/3
  4588  062F  0087               	movwf	7
  4589  0630  1A01               	btfsc	1,4
  4590  0631  2E6F               	goto	l8749
  4591                           
  4592                           ;Switch_B1.c: 183: {
  4593                           ;Switch_B1.c: 184: Sw->Hold2Time++;
  4594  0632  086D               	movf	_Sw,w
  4595  0633  3E05               	addlw	5
  4596  0634  0086               	movwf	6
  4597  0635  3001               	movlw	1	; select bank2/3
  4598  0636  0087               	movwf	7
  4599  0637  3001               	movlw	1
  4600  0638  0781               	addwf	1,f
  4601  0639  3141               	addfsr 1,1
  4602  063A  1803               	skipnc
  4603  063B  0A81               	incf	1,f
  4604                           
  4605                           ;Switch_B1.c: 185: if(Sw->Hold2Time >= 150)
  4606  063C  086D               	movf	_Sw,w
  4607  063D  3E05               	addlw	5
  4608  063E  0086               	movwf	6
  4609  063F  3001               	movlw	1	; select bank2/3
  4610  0640  0087               	movwf	7
  4611  0641  3F40               	moviw [0]fsr1
  4612  0642  00E5               	movwf	??_setSw_Main
  4613  0643  3F41               	moviw [1]fsr1
  4614  0644  00E6               	movwf	??_setSw_Main+1
  4615  0645  3000               	movlw	0
  4616  0646  0266               	subwf	??_setSw_Main+1,w
  4617  0647  3096               	movlw	150
  4618  0648  1903               	skipnz
  4619  0649  0265               	subwf	??_setSw_Main,w
  4620  064A  1C03               	skipc
  4621  064B  0008               	return
  4622                           
  4623                           ;Switch_B1.c: 186: {
  4624                           ;Switch_B1.c: 187: Sw->Hold2Time=0;
  4625  064C  086D               	movf	_Sw,w
  4626  064D  3E05               	addlw	5
  4627  064E  0086               	movwf	6
  4628  064F  3001               	movlw	1	; select bank2/3
  4629  0650  0087               	movwf	7
  4630  0651  3000               	movlw	0
  4631  0652  3FC0               	movwi [0]fsr1
  4632  0653  3FC1               	movwi [1]fsr1
  4633                           
  4634                           ;Switch_B1.c: 188: Sw->Hold2=1;
  4635  0654  086D               	movf	_Sw,w
  4636  0655  0086               	movwf	6
  4637  0656  3001               	movlw	1	; select bank2/3
  4638  0657  0087               	movwf	7
  4639  0658  1601               	bsf	1,4
  4640                           
  4641                           ;Switch_B1.c: 192: setRF_Learn(1,1);
  4642  0659  01A2               	clrf	setRF_Learn@command
  4643  065A  0AA2               	incf	setRF_Learn@command,f
  4644  065B  3001               	movlw	1
  4645  065C  3199  214C  3185   	fcall	_setRF_Learn
  4646                           
  4647                           ;Switch_B1.c: 194: if(TMain->First)
  4648  065F  087D               	movf	_TMain,w
  4649  0660  3E03               	addlw	3
  4650  0661  0086               	movwf	6
  4651  0662  3001               	movlw	1	; select bank2/3
  4652  0663  0087               	movwf	7
  4653  0664  1C81               	btfss	1,1
  4654  0665  0008               	return
  4655                           
  4656                           ;Switch_B1.c: 195: {
  4657                           ;Switch_B1.c: 196: setBuz(2,100);
  4658  0666  3064               	movlw	100
  4659  0667  0020               	movlb	0	; select bank0
  4660  0668  00A6               	movwf	setBuz@time
  4661  0669  3000               	movlw	0
  4662  066A  00A7               	movwf	setBuz@time+1
  4663  066B  3002               	movlw	2
  4664  066C  3197  2789         	fcall	_setBuz
  4665                           
  4666                           ;Switch_B1.c: 197: }
  4667                           ;Switch_B1.c: 199: }
  4668                           ;Switch_B1.c: 200: }
  4669  066E  0008               	return
  4670  066F                     l8749:	
  4671                           
  4672                           ;Switch_B1.c: 201: else
  4673                           ;Switch_B1.c: 202: {
  4674                           ;Switch_B1.c: 203: if(!Sw->Hold3)
  4675  066F  0020               	movlb	0	; select bank0
  4676  0670  086D               	movf	_Sw,w
  4677  0671  0086               	movwf	6
  4678  0672  3001               	movlw	1	; select bank2/3
  4679  0673  0087               	movwf	7
  4680  0674  1A81               	btfsc	1,5
  4681  0675  0008               	return
  4682                           
  4683                           ;Switch_B1.c: 204: {
  4684                           ;Switch_B1.c: 205: Sw->Hold3Time++;
  4685  0676  086D               	movf	_Sw,w
  4686  0677  3E07               	addlw	7
  4687  0678  0086               	movwf	6
  4688  0679  3001               	movlw	1	; select bank2/3
  4689  067A  0087               	movwf	7
  4690  067B  3001               	movlw	1
  4691  067C  0781               	addwf	1,f
  4692  067D  3141               	addfsr 1,1
  4693  067E  1803               	skipnc
  4694  067F  0A81               	incf	1,f
  4695                           
  4696                           ;Switch_B1.c: 206: if(Sw->Hold3Time >= 300)
  4697  0680  086D               	movf	_Sw,w
  4698  0681  3E07               	addlw	7
  4699  0682  0086               	movwf	6
  4700  0683  3001               	movlw	1	; select bank2/3
  4701  0684  0087               	movwf	7
  4702  0685  3F40               	moviw [0]fsr1
  4703  0686  00E5               	movwf	??_setSw_Main
  4704  0687  3F41               	moviw [1]fsr1
  4705  0688  00E6               	movwf	??_setSw_Main+1
  4706  0689  3001               	movlw	1
  4707  068A  0266               	subwf	??_setSw_Main+1,w
  4708  068B  302C               	movlw	44
  4709  068C  1903               	skipnz
  4710  068D  0265               	subwf	??_setSw_Main,w
  4711  068E  1C03               	skipc
  4712  068F  0008               	return
  4713                           
  4714                           ;Switch_B1.c: 207: {
  4715                           ;Switch_B1.c: 208: Sw->Hold3Time=0;
  4716  0690  086D               	movf	_Sw,w
  4717  0691  3E07               	addlw	7
  4718  0692  0086               	movwf	6
  4719  0693  3001               	movlw	1	; select bank2/3
  4720  0694  0087               	movwf	7
  4721  0695  3000               	movlw	0
  4722  0696  3FC0               	movwi [0]fsr1
  4723  0697  3FC1               	movwi [1]fsr1
  4724                           
  4725                           ;Switch_B1.c: 209: Sw->Hold3=1;
  4726  0698  086D               	movf	_Sw,w
  4727  0699  0086               	movwf	6
  4728  069A  3001               	movlw	1	; select bank2/3
  4729  069B  0087               	movwf	7
  4730  069C  1681               	bsf	1,5
  4731                           
  4732                           ;Switch_B1.c: 212: setRF_Learn(1,0);
  4733  069D  01A2               	clrf	setRF_Learn@command
  4734  069E  3001               	movlw	1
  4735  069F  3199  214C         	fcall	_setRF_Learn
  4736                           
  4737                           ;Switch_B1.c: 215: }
  4738                           ;Switch_B1.c: 216: }
  4739                           ;Switch_B1.c: 217: }
  4740                           ;Switch_B1.c: 218: }
  4741                           ;Switch_B1.c: 219: }
  4742                           ;Switch_B1.c: 220: }
  4743  06A1  0008               	return
  4744  06A2                     l8759:	
  4745                           
  4746                           ;Switch_B1.c: 221: else
  4747                           ;Switch_B1.c: 222: {
  4748                           ;Switch_B1.c: 223: if(Sw->Debounce)
  4749  06A2  0020               	movlb	0	; select bank0
  4750  06A3  086D               	movf	_Sw,w
  4751  06A4  0086               	movwf	6
  4752  06A5  3001               	movlw	1	; select bank2/3
  4753  06A6  0087               	movwf	7
  4754  06A7  1D01               	btfss	1,2
  4755  06A8  0008               	return
  4756                           
  4757                           ;Switch_B1.c: 224: {
  4758                           ;Switch_B1.c: 225: Sw->DebounceTime++;
  4759  06A9  3001               	movlw	1
  4760  06AA  00E5               	movwf	??_setSw_Main
  4761  06AB  086D               	movf	_Sw,w
  4762  06AC  3E02               	addlw	2
  4763  06AD  0086               	movwf	6
  4764  06AE  3001               	movlw	1	; select bank2/3
  4765  06AF  0087               	movwf	7
  4766  06B0  0865               	movf	??_setSw_Main,w
  4767  06B1  0781               	addwf	1,f
  4768                           
  4769                           ;Switch_B1.c: 226: if(Sw->DebounceTime >= 5)
  4770  06B2  086D               	movf	_Sw,w
  4771  06B3  3E02               	addlw	2
  4772  06B4  0086               	movwf	6
  4773  06B5  3001               	movlw	1	; select bank2/3
  4774  06B6  0087               	movwf	7
  4775  06B7  3005               	movlw	5
  4776  06B8  0201               	subwf	1,w
  4777  06B9  1C03               	skipc
  4778  06BA  0008               	return
  4779                           
  4780                           ;Switch_B1.c: 227: {
  4781                           ;Switch_B1.c: 228: Sw->DebounceTime=0;
  4782  06BB  086D               	movf	_Sw,w
  4783  06BC  3E02               	addlw	2
  4784  06BD  0086               	movwf	6
  4785  06BE  3001               	movlw	1	; select bank2/3
  4786  06BF  0087               	movwf	7
  4787  06C0  0181               	clrf	1
  4788                           
  4789                           ;Switch_B1.c: 229: Sw->Debounce=0;
  4790  06C1  086D               	movf	_Sw,w
  4791  06C2  0086               	movwf	6
  4792  06C3  3001               	movlw	1	; select bank2/3
  4793  06C4  0087               	movwf	7
  4794  06C5  1101               	bcf	1,2
  4795                           
  4796                           ;Switch_B1.c: 230: Sw->Hold1Time=0;
  4797  06C6  086D               	movf	_Sw,w
  4798  06C7  3E03               	addlw	3
  4799  06C8  0086               	movwf	6
  4800  06C9  3001               	movlw	1	; select bank2/3
  4801  06CA  0087               	movwf	7
  4802  06CB  3000               	movlw	0
  4803  06CC  3FC0               	movwi [0]fsr1
  4804  06CD  3FC1               	movwi [1]fsr1
  4805                           
  4806                           ;Switch_B1.c: 231: Sw->Hold1=0;
  4807  06CE  086D               	movf	_Sw,w
  4808  06CF  0086               	movwf	6
  4809  06D0  3001               	movlw	1	; select bank2/3
  4810  06D1  0087               	movwf	7
  4811  06D2  1181               	bcf	1,3
  4812                           
  4813                           ;Switch_B1.c: 232: Sw->Hold2Time=0;
  4814  06D3  086D               	movf	_Sw,w
  4815  06D4  3E05               	addlw	5
  4816  06D5  0086               	movwf	6
  4817  06D6  3001               	movlw	1	; select bank2/3
  4818  06D7  0087               	movwf	7
  4819  06D8  3000               	movlw	0
  4820  06D9  3FC0               	movwi [0]fsr1
  4821  06DA  3FC1               	movwi [1]fsr1
  4822                           
  4823                           ;Switch_B1.c: 233: Sw->Hold2=0;
  4824  06DB  086D               	movf	_Sw,w
  4825  06DC  0086               	movwf	6
  4826  06DD  3001               	movlw	1	; select bank2/3
  4827  06DE  0087               	movwf	7
  4828  06DF  1201               	bcf	1,4
  4829                           
  4830                           ;Switch_B1.c: 234: Sw->Hold3Time=0;
  4831  06E0  086D               	movf	_Sw,w
  4832  06E1  3E07               	addlw	7
  4833  06E2  0086               	movwf	6
  4834  06E3  3001               	movlw	1	; select bank2/3
  4835  06E4  0087               	movwf	7
  4836  06E5  3000               	movlw	0
  4837  06E6  3FC0               	movwi [0]fsr1
  4838  06E7  3FC1               	movwi [1]fsr1
  4839                           
  4840                           ;Switch_B1.c: 235: Sw->Hold3=0;
  4841  06E8  086D               	movf	_Sw,w
  4842  06E9  0086               	movwf	6
  4843  06EA  3001               	movlw	1	; select bank2/3
  4844  06EB  0087               	movwf	7
  4845  06EC  1281               	bcf	1,5
  4846                           
  4847                           ;Switch_B1.c: 238: Sw_DimmerOffFunc(sw);
  4848  06ED  0868               	movf	setSw_Main@sw,w
  4849  06EE  3196  26A6  3185   	fcall	_Sw_DimmerOffFunc
  4850                           
  4851                           ;Switch_B1.c: 243: setRF_Learn(1,0);
  4852  06F1  0020               	movlb	0	; select bank0
  4853  06F2  01A2               	clrf	setRF_Learn@command
  4854  06F3  3001               	movlw	1
  4855  06F4  3199  214C         	fcall	_setRF_Learn
  4856  06F6  0008               	return
  4857  06F7                     __end_of_setSw_Main:	
  4858                           
  4859                           	psect	text6
  4860  194C                     __ptext6:	
  4861 ;; *************** function _setRF_Learn *****************
  4862 ;; Defined at:
  4863 ;;		line 31 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  rf              1    wreg     unsigned char 
  4866 ;;  command         1    2[BANK0 ] unsigned char 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  rf              1    3[BANK0 ] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;		None               void
  4871 ;; Registers used:
  4872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4878 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4879 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;Total ram usage:        2 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    5
  4885 ;; This function calls:
  4886 ;;		_RfPointSelect
  4887 ;; This function is called by:
  4888 ;;		_setSw_Main
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function _setRF_Learn
  4894  194C                     _setRF_Learn:	
  4895                           
  4896                           ;incstack = 0
  4897                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4898                           ;setRF_Learn@rf stored from wreg
  4899  194C  0020               	movlb	0	; select bank0
  4900  194D  00A3               	movwf	setRF_Learn@rf
  4901                           
  4902                           ;RF_Control_B1.c: 33: RfPointSelect(rf);
  4903  194E  0823               	movf	setRF_Learn@rf,w
  4904  194F  3198  2070         	fcall	_RfPointSelect
  4905                           
  4906                           ;RF_Control_B1.c: 34: RF->Learn=command;
  4907  1951  087B               	movf	_RF,w
  4908  1952  0086               	movwf	6
  4909  1953  0187               	clrf	7
  4910  1954  0020               	movlb	0	; select bank0
  4911  1955  0822               	movf	setRF_Learn@command,w
  4912  1956  1301               	bcf	1,6
  4913  1957  1D03               	skipz
  4914  1958  1701               	bsf	1,6
  4915  1959  0008               	return
  4916  195A                     __end_of_setRF_Learn:	
  4917                           
  4918                           	psect	text7
  4919  1208                     __ptext7:	
  4920 ;; *************** function _Sw_DimmerOnFunc *****************
  4921 ;; Defined at:
  4922 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;  sw              1    wreg     unsigned char 
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;  sw              1   67[BANK0 ] unsigned char 
  4927 ;;  Idle            1   66[BANK0 ] unsigned char 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;		None               void
  4930 ;; Registers used:
  4931 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;Total ram usage:        2 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    8
  4944 ;; This function calls:
  4945 ;;		_setBuz
  4946 ;;		_setDimmerLights_Switch
  4947 ;;		_setDimmerLights_Trigger
  4948 ;;		_setRFSW_Status
  4949 ;;		_setRF_DimmerLights
  4950 ;;		_setTxData
  4951 ;; This function is called by:
  4952 ;;		_setSw_Main
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           
  4957                           ;psect for function _Sw_DimmerOnFunc
  4958  1208                     _Sw_DimmerOnFunc:	
  4959                           
  4960                           ;incstack = 0
  4961                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4962                           ;Sw_DimmerOnFunc@sw stored from wreg
  4963  1208  0020               	movlb	0	; select bank0
  4964  1209  00E3               	movwf	Sw_DimmerOnFunc@sw
  4965                           
  4966                           ;Switch_B1.c: 253: char Idle=1;
  4967  120A  01E2               	clrf	Sw_DimmerOnFunc@Idle
  4968  120B  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  4969                           
  4970                           ;Switch_B1.c: 280: if(Idle)
  4971  120C  0862               	movf	Sw_DimmerOnFunc@Idle,w
  4972  120D  1903               	btfsc	3,2
  4973  120E  0008               	return
  4974                           
  4975                           ;Switch_B1.c: 281: {
  4976                           ;Switch_B1.c: 282: Sw->Flag=1;
  4977  120F  086D               	movf	_Sw,w
  4978  1210  0086               	movwf	6
  4979  1211  3001               	movlw	1	; select bank2/3
  4980  1212  0087               	movwf	7
  4981  1213  1781               	bsf	1,7
  4982                           
  4983                           ;Switch_B1.c: 283: setBuz(1,100);
  4984  1214  3064               	movlw	100
  4985  1215  00A6               	movwf	setBuz@time
  4986  1216  3000               	movlw	0
  4987  1217  00A7               	movwf	setBuz@time+1
  4988  1218  3001               	movlw	1
  4989  1219  3197  2789  3192   	fcall	_setBuz
  4990                           
  4991                           ;Switch_B1.c: 284: if(!Sw->Status)
  4992  121C  0020               	movlb	0	; select bank0
  4993  121D  086D               	movf	_Sw,w
  4994  121E  0086               	movwf	6
  4995  121F  3001               	movlw	1	; select bank2/3
  4996  1220  0087               	movwf	7
  4997  1221  1B01               	btfsc	1,6
  4998  1222  2A4E               	goto	l8343
  4999                           
  5000                           ;Switch_B1.c: 285: {
  5001                           ;Switch_B1.c: 286: Sw->Status=1;
  5002  1223  086D               	movf	_Sw,w
  5003  1224  0086               	movwf	6
  5004  1225  3001               	movlw	1	; select bank2/3
  5005  1226  0087               	movwf	7
  5006  1227  1701               	bsf	1,6
  5007                           
  5008                           ;Switch_B1.c: 287: setRFSW_Status(sw,1);
  5009  1228  01A2               	clrf	setRFSW_Status@command
  5010  1229  0AA2               	incf	setRFSW_Status@command,f
  5011  122A  0863               	movf	Sw_DimmerOnFunc@sw,w
  5012  122B  3199  215A  3192   	fcall	_setRFSW_Status
  5013                           
  5014                           ;Switch_B1.c: 289: setDimmerLights_Trigger(sw,1);
  5015  122E  0020               	movlb	0	; select bank0
  5016  122F  01A2               	clrf	setDimmerLights_Trigger@command
  5017  1230  0AA2               	incf	setDimmerLights_Trigger@command,f
  5018  1231  0863               	movf	Sw_DimmerOnFunc@sw,w
  5019  1232  3199  21A7  3192   	fcall	_setDimmerLights_Trigger
  5020                           
  5021                           ;Switch_B1.c: 290: setDimmerLights_Switch(sw,1);
  5022  1235  0020               	movlb	0	; select bank0
  5023  1236  01A2               	clrf	setDimmerLights_Switch@command
  5024  1237  0AA2               	incf	setDimmerLights_Switch@command,f
  5025  1238  0863               	movf	Sw_DimmerOnFunc@sw,w
  5026  1239  3199  2197  3192   	fcall	_setDimmerLights_Switch
  5027                           
  5028                           ;Switch_B1.c: 292: setRF_DimmerLights(sw,Sw->Status);
  5029  123C  0020               	movlb	0	; select bank0
  5030  123D  086D               	movf	_Sw,w
  5031  123E  0086               	movwf	6
  5032  123F  3001               	movlw	1	; select bank2/3
  5033  1240  0087               	movwf	7
  5034  1241  3000               	movlw	0
  5035  1242  1B01               	btfsc	1,6
  5036  1243  3001               	movlw	1
  5037  1244  00DD               	movwf	setRF_DimmerLights@on
  5038  1245  0863               	movf	Sw_DimmerOnFunc@sw,w
  5039  1246  3195  255C  3192   	fcall	_setRF_DimmerLights
  5040                           
  5041                           ;Switch_B1.c: 293: setTxData(1);
  5042  1249  3001               	movlw	1
  5043  124A  318D  2566         	fcall	_setTxData
  5044                           
  5045                           ;Switch_B1.c: 294: }
  5046  124C  0020               	movlb	0	; select bank0
  5047  124D  0008               	return
  5048  124E                     l8343:	
  5049                           
  5050                           ;Switch_B1.c: 295: else
  5051                           ;Switch_B1.c: 296: {
  5052                           ;Switch_B1.c: 297: Sw->Status=0;
  5053  124E  0020               	movlb	0	; select bank0
  5054  124F  086D               	movf	_Sw,w
  5055  1250  0086               	movwf	6
  5056  1251  3001               	movlw	1	; select bank2/3
  5057  1252  0087               	movwf	7
  5058  1253  1301               	bcf	1,6
  5059                           
  5060                           ;Switch_B1.c: 298: setRFSW_Status(sw,Sw->Status);
  5061  1254  086D               	movf	_Sw,w
  5062  1255  0086               	movwf	6
  5063  1256  3001               	movlw	1	; select bank2/3
  5064  1257  0087               	movwf	7
  5065  1258  3000               	movlw	0
  5066  1259  1B01               	btfsc	1,6
  5067  125A  3001               	movlw	1
  5068  125B  00A2               	movwf	setRFSW_Status@command
  5069  125C  0863               	movf	Sw_DimmerOnFunc@sw,w
  5070  125D  3199  215A         	fcall	_setRFSW_Status
  5071  125F  0020               	movlb	0	; select bank0
  5072  1260  0008               	return
  5073  1261                     __end_of_Sw_DimmerOnFunc:	
  5074                           
  5075                           	psect	text8
  5076  16A6                     __ptext8:	
  5077 ;; *************** function _Sw_DimmerOffFunc *****************
  5078 ;; Defined at:
  5079 ;;		line 303 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  sw              1    wreg     unsigned char 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  sw              1   68[BANK0 ] unsigned char 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;		None               void
  5086 ;; Registers used:
  5087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;Total ram usage:        3 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    8
  5100 ;; This function calls:
  5101 ;;		_setDelayOff_GO
  5102 ;;		_setDimmerLights_AdjGo
  5103 ;;		_setDimmerLights_Switch
  5104 ;;		_setDimmerLights_Trigger
  5105 ;;		_setDimmerLights_TriggerAdj
  5106 ;;		_setRF_DimmerLights
  5107 ;;		_setTxData
  5108 ;; This function is called by:
  5109 ;;		_setSw_Main
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _Sw_DimmerOffFunc
  5115  16A6                     _Sw_DimmerOffFunc:	
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5119                           ;Sw_DimmerOffFunc@sw stored from wreg
  5120  16A6  0020               	movlb	0	; select bank0
  5121  16A7  00E4               	movwf	Sw_DimmerOffFunc@sw
  5122                           
  5123                           ;Switch_B1.c: 305: if(Sw->Flag)
  5124  16A8  086D               	movf	_Sw,w
  5125  16A9  0086               	movwf	6
  5126  16AA  3001               	movlw	1	; select bank2/3
  5127  16AB  0087               	movwf	7
  5128  16AC  1F81               	btfss	1,7
  5129  16AD  0008               	return
  5130                           
  5131                           ;Switch_B1.c: 306: {
  5132                           ;Switch_B1.c: 307: Sw->Flag=0;
  5133  16AE  086D               	movf	_Sw,w
  5134  16AF  0086               	movwf	6
  5135  16B0  3001               	movlw	1	; select bank2/3
  5136  16B1  0087               	movwf	7
  5137  16B2  1381               	bcf	1,7
  5138                           
  5139                           ;Switch_B1.c: 308: if(Sw->Status)
  5140  16B3  086D               	movf	_Sw,w
  5141  16B4  0086               	movwf	6
  5142  16B5  3001               	movlw	1	; select bank2/3
  5143  16B6  0087               	movwf	7
  5144  16B7  1F01               	btfss	1,6
  5145  16B8  2EF2               	goto	l8375
  5146                           
  5147                           ;Switch_B1.c: 309: {
  5148                           ;Switch_B1.c: 310: if(Sw->Adj)
  5149  16B9  0A6D               	incf	_Sw,w
  5150  16BA  0086               	movwf	6
  5151  16BB  3001               	movlw	1	; select bank2/3
  5152  16BC  0087               	movwf	7
  5153  16BD  1C01               	btfss	1,0
  5154  16BE  0008               	return
  5155                           
  5156                           ;Switch_B1.c: 311: {
  5157                           ;Switch_B1.c: 312: Sw->Adj=0;
  5158  16BF  0A6D               	incf	_Sw,w
  5159  16C0  0086               	movwf	6
  5160  16C1  3001               	movlw	1	; select bank2/3
  5161  16C2  0087               	movwf	7
  5162  16C3  1001               	bcf	1,0
  5163                           
  5164                           ;Switch_B1.c: 313: setDimmerLights_TriggerAdj(sw,1);
  5165  16C4  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5166  16C5  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5167  16C6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5168  16C7  3199  21F7  3196   	fcall	_setDimmerLights_TriggerAdj
  5169                           
  5170                           ;Switch_B1.c: 314: setDimmerLights_AdjGo(sw,0);
  5171  16CA  0020               	movlb	0	; select bank0
  5172  16CB  01A2               	clrf	setDimmerLights_AdjGo@command
  5173  16CC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5174  16CD  3199  21E7  3196   	fcall	_setDimmerLights_AdjGo
  5175                           
  5176                           ;Switch_B1.c: 316: Product->Data[17]=Product->Data[26+sw];
  5177  16D0  0020               	movlb	0	; select bank0
  5178  16D1  0864               	movf	Sw_DimmerOffFunc@sw,w
  5179  16D2  3E1A               	addlw	26
  5180  16D3  076F               	addwf	_Product,w
  5181  16D4  00E2               	movwf	??_Sw_DimmerOffFunc
  5182  16D5  0862               	movf	??_Sw_DimmerOffFunc,w
  5183  16D6  0086               	movwf	6
  5184  16D7  3001               	movlw	1	; select bank2/3
  5185  16D8  0087               	movwf	7
  5186  16D9  0801               	movf	1,w
  5187  16DA  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5188  16DB  086F               	movf	_Product,w
  5189  16DC  3E11               	addlw	17
  5190  16DD  0086               	movwf	6
  5191  16DE  3001               	movlw	1	; select bank2/3
  5192  16DF  0087               	movwf	7
  5193  16E0  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5194  16E1  0081               	movwf	1
  5195                           
  5196                           ;Switch_B1.c: 317: setRF_DimmerLights(sw,Sw->Status);
  5197  16E2  086D               	movf	_Sw,w
  5198  16E3  0086               	movwf	6
  5199  16E4  3001               	movlw	1	; select bank2/3
  5200  16E5  0087               	movwf	7
  5201  16E6  3000               	movlw	0
  5202  16E7  1B01               	btfsc	1,6
  5203  16E8  3001               	movlw	1
  5204  16E9  00DD               	movwf	setRF_DimmerLights@on
  5205  16EA  0864               	movf	Sw_DimmerOffFunc@sw,w
  5206  16EB  3195  255C  3196   	fcall	_setRF_DimmerLights
  5207                           
  5208                           ;Switch_B1.c: 318: setTxData(1);
  5209  16EE  3001               	movlw	1
  5210  16EF  318D  2566         	fcall	_setTxData
  5211                           
  5212                           ;Switch_B1.c: 320: }
  5213                           ;Switch_B1.c: 321: }
  5214  16F1  0008               	return
  5215  16F2                     l8375:	
  5216                           
  5217                           ;Switch_B1.c: 322: else
  5218                           ;Switch_B1.c: 323: {
  5219                           ;Switch_B1.c: 324: setDimmerLights_Trigger(sw,1);
  5220  16F2  0020               	movlb	0	; select bank0
  5221  16F3  01A2               	clrf	setDimmerLights_Trigger@command
  5222  16F4  0AA2               	incf	setDimmerLights_Trigger@command,f
  5223  16F5  0864               	movf	Sw_DimmerOffFunc@sw,w
  5224  16F6  3199  21A7  3196   	fcall	_setDimmerLights_Trigger
  5225                           
  5226                           ;Switch_B1.c: 325: setDimmerLights_Switch(sw,0);
  5227  16F9  0020               	movlb	0	; select bank0
  5228  16FA  01A2               	clrf	setDimmerLights_Switch@command
  5229  16FB  0864               	movf	Sw_DimmerOffFunc@sw,w
  5230  16FC  3199  2197  3196   	fcall	_setDimmerLights_Switch
  5231                           
  5232                           ;Switch_B1.c: 327: setDelayOff_GO(sw,0,0);
  5233  16FF  0020               	movlb	0	; select bank0
  5234  1700  01A3               	clrf	setDelayOff_GO@command
  5235  1701  01A4               	clrf	setDelayOff_GO@value
  5236  1702  0864               	movf	Sw_DimmerOffFunc@sw,w
  5237  1703  3193  2316  3196   	fcall	_setDelayOff_GO
  5238                           
  5239                           ;Switch_B1.c: 328: setRF_DimmerLights(sw,Sw->Status);
  5240  1706  0020               	movlb	0	; select bank0
  5241  1707  086D               	movf	_Sw,w
  5242  1708  0086               	movwf	6
  5243  1709  3001               	movlw	1	; select bank2/3
  5244  170A  0087               	movwf	7
  5245  170B  3000               	movlw	0
  5246  170C  1B01               	btfsc	1,6
  5247  170D  3001               	movlw	1
  5248  170E  00DD               	movwf	setRF_DimmerLights@on
  5249  170F  0864               	movf	Sw_DimmerOffFunc@sw,w
  5250  1710  3195  255C  3196   	fcall	_setRF_DimmerLights
  5251                           
  5252                           ;Switch_B1.c: 329: setTxData(1);
  5253  1713  3001               	movlw	1
  5254  1714  318D  2566         	fcall	_setTxData
  5255  1716  0008               	return
  5256  1717                     __end_of_Sw_DimmerOffFunc:	
  5257                           
  5258                           	psect	text9
  5259  1C3D                     __ptext9:	
  5260 ;; *************** function _Sw_DimmerAdjFunc *****************
  5261 ;; Defined at:
  5262 ;;		line 334 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  sw              1    wreg     unsigned char 
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;  sw              1    4[BANK0 ] unsigned char 
  5267 ;; Return value:  Size  Location     Type
  5268 ;;		None               void
  5269 ;; Registers used:
  5270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5279 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5280 ;;Total ram usage:        1 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    6
  5283 ;; This function calls:
  5284 ;;		_setDimmerLights_AdjGo
  5285 ;;		_setDimmerLights_TriggerAdj
  5286 ;;		_setRFSW_Status
  5287 ;; This function is called by:
  5288 ;;		_setSw_Main
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           
  5293                           ;psect for function _Sw_DimmerAdjFunc
  5294  1C3D                     _Sw_DimmerAdjFunc:	
  5295                           
  5296                           ;incstack = 0
  5297                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5298                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5299  1C3D  0020               	movlb	0	; select bank0
  5300  1C3E  00A4               	movwf	Sw_DimmerAdjFunc@sw
  5301                           
  5302                           ;Switch_B1.c: 336: if(Sw->Flag)
  5303  1C3F  086D               	movf	_Sw,w
  5304  1C40  0086               	movwf	6
  5305  1C41  3001               	movlw	1	; select bank2/3
  5306  1C42  0087               	movwf	7
  5307  1C43  1F81               	btfss	1,7
  5308  1C44  0008               	return
  5309                           
  5310                           ;Switch_B1.c: 337: {
  5311                           ;Switch_B1.c: 338: Sw->Adj=1;
  5312  1C45  0A6D               	incf	_Sw,w
  5313  1C46  0086               	movwf	6
  5314  1C47  3001               	movlw	1	; select bank2/3
  5315  1C48  0087               	movwf	7
  5316  1C49  1401               	bsf	1,0
  5317                           
  5318                           ;Switch_B1.c: 339: Sw->Status=1;
  5319  1C4A  086D               	movf	_Sw,w
  5320  1C4B  0086               	movwf	6
  5321  1C4C  3001               	movlw	1	; select bank2/3
  5322  1C4D  0087               	movwf	7
  5323  1C4E  1701               	bsf	1,6
  5324                           
  5325                           ;Switch_B1.c: 340: setRFSW_Status(sw,1);
  5326  1C4F  01A2               	clrf	setRFSW_Status@command
  5327  1C50  0AA2               	incf	setRFSW_Status@command,f
  5328  1C51  0824               	movf	Sw_DimmerAdjFunc@sw,w
  5329  1C52  3199  215A  319C   	fcall	_setRFSW_Status
  5330                           
  5331                           ;Switch_B1.c: 342: setDimmerLights_TriggerAdj(sw,1);
  5332  1C55  0020               	movlb	0	; select bank0
  5333  1C56  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5334  1C57  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5335  1C58  0824               	movf	Sw_DimmerAdjFunc@sw,w
  5336  1C59  3199  21F7  319C   	fcall	_setDimmerLights_TriggerAdj
  5337                           
  5338                           ;Switch_B1.c: 343: setDimmerLights_AdjGo(sw,1);
  5339  1C5C  0020               	movlb	0	; select bank0
  5340  1C5D  01A2               	clrf	setDimmerLights_AdjGo@command
  5341  1C5E  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5342  1C5F  0824               	movf	Sw_DimmerAdjFunc@sw,w
  5343  1C60  3199  21E7         	fcall	_setDimmerLights_AdjGo
  5344  1C62  0008               	return
  5345  1C63                     __end_of_Sw_DimmerAdjFunc:	
  5346                           
  5347                           	psect	text10
  5348  19F7                     __ptext10:	
  5349 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5350 ;; Defined at:
  5351 ;;		line 441 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;  lights          1    wreg     unsigned char 
  5354 ;;  command         1    2[BANK0 ] unsigned char 
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;  lights          1    3[BANK0 ] unsigned char 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;		None               void
  5359 ;; Registers used:
  5360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5366 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;Total ram usage:        2 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    5
  5373 ;; This function calls:
  5374 ;;		_DimmerLightsPointSelect
  5375 ;; This function is called by:
  5376 ;;		_Sw_DimmerOffFunc
  5377 ;;		_Sw_DimmerAdjFunc
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           
  5382                           ;psect for function _setDimmerLights_TriggerAdj
  5383  19F7                     _setDimmerLights_TriggerAdj:	
  5384                           
  5385                           ;incstack = 0
  5386                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5387                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5388  19F7  0020               	movlb	0	; select bank0
  5389  19F8  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5390                           
  5391                           ;Dimmer_B1.c: 443: DimmerLightsPointSelect(lights);
  5392  19F9  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5393  19FA  31A7  27EA         	fcall	_DimmerLightsPointSelect
  5394                           
  5395                           ;Dimmer_B1.c: 444: DimmerLights->TriggerAdj=command;
  5396  19FC  0020               	movlb	0	; select bank0
  5397  19FD  086C               	movf	_DimmerLights,w
  5398  19FE  3E09               	addlw	9
  5399  19FF  0086               	movwf	6
  5400  1A00  3001               	movlw	1	; select bank2/3
  5401  1A01  0087               	movwf	7
  5402  1A02  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5403  1A03  1181               	bcf	1,3
  5404  1A04  1D03               	skipz
  5405  1A05  1581               	bsf	1,3
  5406  1A06  0008               	return
  5407  1A07                     __end_of_setDimmerLights_TriggerAdj:	
  5408                           
  5409                           	psect	text11
  5410  19E7                     __ptext11:	
  5411 ;; *************** function _setDimmerLights_AdjGo *****************
  5412 ;; Defined at:
  5413 ;;		line 431 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;  lights          1    wreg     unsigned char 
  5416 ;;  command         1    2[BANK0 ] unsigned char 
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;  lights          1    3[BANK0 ] unsigned char 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;		None               void
  5421 ;; Registers used:
  5422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5428 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5432 ;;Total ram usage:        2 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    5
  5435 ;; This function calls:
  5436 ;;		_DimmerLightsPointSelect
  5437 ;; This function is called by:
  5438 ;;		_Sw_DimmerOffFunc
  5439 ;;		_Sw_DimmerAdjFunc
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _setDimmerLights_AdjGo
  5445  19E7                     _setDimmerLights_AdjGo:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5449                           ;setDimmerLights_AdjGo@lights stored from wreg
  5450  19E7  0020               	movlb	0	; select bank0
  5451  19E8  00A3               	movwf	setDimmerLights_AdjGo@lights
  5452                           
  5453                           ;Dimmer_B1.c: 433: DimmerLightsPointSelect(lights);
  5454  19E9  0823               	movf	setDimmerLights_AdjGo@lights,w
  5455  19EA  31A7  27EA         	fcall	_DimmerLightsPointSelect
  5456                           
  5457                           ;Dimmer_B1.c: 434: DimmerLights->AdjGo=command;
  5458  19EC  0020               	movlb	0	; select bank0
  5459  19ED  086C               	movf	_DimmerLights,w
  5460  19EE  3E09               	addlw	9
  5461  19EF  0086               	movwf	6
  5462  19F0  3001               	movlw	1	; select bank2/3
  5463  19F1  0087               	movwf	7
  5464  19F2  0822               	movf	setDimmerLights_AdjGo@command,w
  5465  19F3  1101               	bcf	1,2
  5466  19F4  1D03               	skipz
  5467  19F5  1501               	bsf	1,2
  5468  19F6  0008               	return
  5469  19F7                     __end_of_setDimmerLights_AdjGo:	
  5470                           
  5471                           	psect	text12
  5472  27C1                     __ptext12:	
  5473 ;; *************** function _Switch_Initialization *****************
  5474 ;; Defined at:
  5475 ;;		line 38 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;		None               void
  5482 ;; Registers used:
  5483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;Total ram usage:        0 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:    7
  5496 ;; This function calls:
  5497 ;;		_TouchPower
  5498 ;;		_setSw_Initialization
  5499 ;; This function is called by:
  5500 ;;		_main
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           
  5505                           ;psect for function _Switch_Initialization
  5506  27C1                     _Switch_Initialization:	
  5507                           
  5508                           ;Switch_B1.c: 40: TouchPower();
  5509                           
  5510                           ;incstack = 0
  5511                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5512  27C1  31A7  2775  31A7   	fcall	_TouchPower
  5513                           
  5514                           ;Switch_B1.c: 42: WPUB1=0;
  5515  27C4  0024               	movlb	4	; select bank4
  5516  27C5  108D               	bcf	13,1	;volatile
  5517                           
  5518                           ;Switch_B1.c: 51: setSw_Initialization(1);
  5519  27C6  3001               	movlw	1
  5520  27C7  3199  21D7         	fcall	_setSw_Initialization
  5521  27C9  0008               	return
  5522  27CA                     __end_of_Switch_Initialization:	
  5523                           
  5524                           	psect	text13
  5525  19D7                     __ptext13:	
  5526 ;; *************** function _setSw_Initialization *****************
  5527 ;; Defined at:
  5528 ;;		line 78 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  sw              1    wreg     unsigned char 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  sw              1    4[BANK0 ] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;		None               void
  5535 ;; Registers used:
  5536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;Total ram usage:        1 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    6
  5549 ;; This function calls:
  5550 ;;		_setLED
  5551 ;; This function is called by:
  5552 ;;		_Switch_Initialization
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           
  5557                           ;psect for function _setSw_Initialization
  5558  19D7                     _setSw_Initialization:	
  5559                           
  5560                           ;incstack = 0
  5561                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5562                           ;setSw_Initialization@sw stored from wreg
  5563  19D7  0020               	movlb	0	; select bank0
  5564  19D8  00A4               	movwf	setSw_Initialization@sw
  5565                           
  5566                           ;Switch_B1.c: 80: setLED(sw,1);
  5567  19D9  01A2               	clrf	setLED@command
  5568  19DA  0AA2               	incf	setLED@command,f
  5569  19DB  0824               	movf	setSw_Initialization@sw,w
  5570  19DC  3193  2372  3199   	fcall	_setLED
  5571                           
  5572                           ;Switch_B1.c: 82: setLED(sw+1,1);
  5573  19DF  0020               	movlb	0	; select bank0
  5574  19E0  01A2               	clrf	setLED@command
  5575  19E1  0AA2               	incf	setLED@command,f
  5576  19E2  0824               	movf	setSw_Initialization@sw,w
  5577  19E3  3E01               	addlw	1
  5578  19E4  3193  2372         	fcall	_setLED
  5579  19E6  0008               	return
  5580  19E7                     __end_of_setSw_Initialization:	
  5581                           
  5582                           	psect	text14
  5583  2775                     __ptext14:	
  5584 ;; *************** function _TouchPower *****************
  5585 ;; Defined at:
  5586 ;;		line 9 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;		None
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;		None
  5591 ;; Return value:  Size  Location     Type
  5592 ;;		None               void
  5593 ;; Registers used:
  5594 ;;		None
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;Total ram usage:        0 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    4
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_Switch_Initialization
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _TouchPower
  5616  2775                     _TouchPower:	
  5617  2775                     l2594:	
  5618                           ;Switch_B1.c: 11: while(!RC5)
  5619                           
  5620                           ;incstack = 0
  5621                           ; Regs used in _TouchPower: []
  5622                           
  5623  2775  0020               	movlb	0	; select bank0
  5624  2776  1A8E               	btfsc	14,5	;volatile
  5625  2777  0008               	return
  5626                           
  5627                           ;Switch_B1.c: 12: RC5=1;
  5628  2778  168E               	bsf	14,5	;volatile
  5629  2779  2F75               	goto	l2594
  5630  277A                     __end_of_TouchPower:	
  5631                           
  5632                           	psect	text15
  5633  276D                     __ptext15:	
  5634 ;; *************** function _RF_Main *****************
  5635 ;; Defined at:
  5636 ;;		line 24 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;		None               void
  5643 ;; Registers used:
  5644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;Total ram usage:        0 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:   13
  5657 ;; This function calls:
  5658 ;;		_setRF_Main
  5659 ;; This function is called by:
  5660 ;;		_main
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           
  5665                           ;psect for function _RF_Main
  5666  276D                     _RF_Main:	
  5667                           
  5668                           ;RF_Control_B1.c: 27: setRF_Main(1);
  5669                           
  5670                           ;incstack = 0
  5671                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5672  276D  3001               	movlw	1
  5673  276E  3189  2118         	fcall	_setRF_Main
  5674  2770  0008               	return
  5675  2771                     __end_of_RF_Main:	
  5676                           
  5677                           	psect	text16
  5678  0918                     __ptext16:	
  5679 ;; *************** function _setRF_Main *****************
  5680 ;; Defined at:
  5681 ;;		line 58 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  rf              1    wreg     unsigned char 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  rf              1   74[BANK0 ] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;		None               void
  5688 ;; Registers used:
  5689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;Total ram usage:        3 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:   12
  5702 ;; This function calls:
  5703 ;;		_CC2500_RxData
  5704 ;;		_CC2500_TxData
  5705 ;;		_CC2500_WriteCommand
  5706 ;;		_RF_RxDisable
  5707 ;;		_RfPointSelect
  5708 ;;		_getRxData
  5709 ;;		_setINT_GO
  5710 ;; This function is called by:
  5711 ;;		_RF_Main
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _setRF_Main
  5717  0918                     _setRF_Main:	
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5721                           ;setRF_Main@rf stored from wreg
  5722  0918  0020               	movlb	0	; select bank0
  5723  0919  00EA               	movwf	setRF_Main@rf
  5724                           
  5725                           ;RF_Control_B1.c: 60: RfPointSelect(rf);
  5726  091A  086A               	movf	setRF_Main@rf,w
  5727  091B  3198  2070  3189   	fcall	_RfPointSelect
  5728                           
  5729                           ;RF_Control_B1.c: 61: if(RF->Enable)
  5730  091E  087B               	movf	_RF,w
  5731  091F  0086               	movwf	6
  5732  0920  0187               	clrf	7
  5733  0921  1C01               	btfss	1,0
  5734  0922  0008               	return
  5735                           
  5736                           ;RF_Control_B1.c: 62: {
  5737                           ;RF_Control_B1.c: 73: RF->Key=((RA6 || RA4 || RA0 || RB1) && !RF->Learn)?1:0;
  5738  0923  0020               	movlb	0	; select bank0
  5739  0924  01EB               	clrf	_setRF_Main$4017
  5740  0925  1F0C               	btfss	12,6	;volatile
  5741  0926  1A0C               	btfsc	12,4	;volatile
  5742  0927  292C               	goto	l8643
  5743  0928  180C               	btfsc	12,0	;volatile
  5744  0929  292C               	goto	l8643
  5745  092A  1C8D               	btfss	13,1	;volatile
  5746  092B  2933               	goto	l8647
  5747  092C                     l8643:	
  5748  092C  087B               	movf	_RF,w
  5749  092D  0086               	movwf	6
  5750  092E  0187               	clrf	7
  5751  092F  1B01               	btfsc	1,6
  5752  0930  2933               	goto	l8647
  5753  0931  01EB               	clrf	_setRF_Main$4017
  5754  0932  0AEB               	incf	_setRF_Main$4017,f
  5755  0933                     l8647:	
  5756  0933  087B               	movf	_RF,w
  5757  0934  0086               	movwf	6
  5758  0935  0187               	clrf	7
  5759  0936  086B               	movf	_setRF_Main$4017,w
  5760  0937  1381               	bcf	1,7
  5761  0938  1D03               	skipz
  5762  0939  1781               	bsf	1,7
  5763                           
  5764                           ;RF_Control_B1.c: 77: if(!RF->Key)
  5765  093A  087B               	movf	_RF,w
  5766  093B  0086               	movwf	6
  5767  093C  0187               	clrf	7
  5768  093D  1B81               	btfsc	1,7
  5769  093E  296B               	goto	l8669
  5770                           
  5771                           ;RF_Control_B1.c: 78: {
  5772                           ;RF_Control_B1.c: 79: if(RF->ReceiveGO)
  5773  093F  087B               	movf	_RF,w
  5774  0940  0086               	movwf	6
  5775  0941  0187               	clrf	7
  5776  0942  1C81               	btfss	1,1
  5777  0943  2950               	goto	l8657
  5778                           
  5779                           ;RF_Control_B1.c: 80: {
  5780                           ;RF_Control_B1.c: 81: RF->ReceiveGO=0;
  5781  0944  087B               	movf	_RF,w
  5782  0945  0086               	movwf	6
  5783  0946  0187               	clrf	7
  5784  0947  1081               	bcf	1,1
  5785                           
  5786                           ;RF_Control_B1.c: 82: CC2500_RxData();
  5787  0948  3194  2493  3189   	fcall	_CC2500_RxData
  5788                           
  5789                           ;RF_Control_B1.c: 88: getRxData(1);
  5790  094B  3001               	movlw	1
  5791  094C  3191  215F  3189   	fcall	_getRxData
  5792                           
  5793                           ;RF_Control_B1.c: 91: }
  5794  094F  296F               	goto	l8671
  5795  0950                     l8657:	
  5796                           
  5797                           ;RF_Control_B1.c: 92: else
  5798                           ;RF_Control_B1.c: 93: {
  5799                           ;RF_Control_B1.c: 94: if(!RF->TransceiveGO)
  5800  0950  087B               	movf	_RF,w
  5801  0951  0086               	movwf	6
  5802  0952  0187               	clrf	7
  5803  0953  1901               	btfsc	1,2
  5804  0954  296F               	goto	l8671
  5805                           
  5806                           ;RF_Control_B1.c: 95: {
  5807                           ;RF_Control_B1.c: 97: if(!RF->RxStatus)
  5808  0955  087B               	movf	_RF,w
  5809  0956  0086               	movwf	6
  5810  0957  0187               	clrf	7
  5811  0958  1981               	btfsc	1,3
  5812  0959  296F               	goto	l8671
  5813                           
  5814                           ;RF_Control_B1.c: 98: {
  5815                           ;RF_Control_B1.c: 99: RF->RxStatus=1;
  5816  095A  087B               	movf	_RF,w
  5817  095B  0086               	movwf	6
  5818  095C  0187               	clrf	7
  5819  095D  1581               	bsf	1,3
  5820                           
  5821                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x36);
  5822  095E  3036               	movlw	54
  5823  095F  3199  2187  3189   	fcall	_CC2500_WriteCommand
  5824                           
  5825                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x34);
  5826  0962  3034               	movlw	52
  5827  0963  3199  2187  3189   	fcall	_CC2500_WriteCommand
  5828                           
  5829                           ;RF_Control_B1.c: 102: setINT_GO(1);
  5830  0966  3001               	movlw	1
  5831  0967  31A7  27B8  3189   	fcall	_setINT_GO
  5832                           
  5833                           ;RF_Control_B1.c: 103: }
  5834                           ;RF_Control_B1.c: 105: }
  5835                           ;RF_Control_B1.c: 106: }
  5836                           ;RF_Control_B1.c: 107: }
  5837  096A  296F               	goto	l8671
  5838  096B                     l8669:	
  5839                           
  5840                           ;RF_Control_B1.c: 108: else
  5841                           ;RF_Control_B1.c: 109: {
  5842                           ;RF_Control_B1.c: 110: RF_RxDisable(1);
  5843  096B  3001               	movlw	1
  5844  096C  319C  2463  3189   	fcall	_RF_RxDisable
  5845  096F                     l8671:	
  5846                           
  5847                           ;RF_Control_B1.c: 111: }
  5848                           ;RF_Control_B1.c: 112: if(RF->TransceiveGO)
  5849  096F  087B               	movf	_RF,w
  5850  0970  0086               	movwf	6
  5851  0971  0187               	clrf	7
  5852  0972  1D01               	btfss	1,2
  5853  0973  0008               	return
  5854                           
  5855                           ;RF_Control_B1.c: 113: {
  5856                           ;RF_Control_B1.c: 114: RF_RxDisable(1);
  5857  0974  3001               	movlw	1
  5858  0975  319C  2463  3189   	fcall	_RF_RxDisable
  5859                           
  5860                           ;RF_Control_B1.c: 115: if(!RF->Debounce)
  5861  0978  087B               	movf	_RF,w
  5862  0979  0086               	movwf	6
  5863  097A  0187               	clrf	7
  5864  097B  1A81               	btfsc	1,5
  5865  097C  2995               	goto	l8685
  5866                           
  5867                           ;RF_Control_B1.c: 116: {
  5868                           ;RF_Control_B1.c: 117: RF->DebounceTime++;
  5869  097D  3001               	movlw	1
  5870  097E  0020               	movlb	0	; select bank0
  5871  097F  00E9               	movwf	??_setRF_Main
  5872  0980  0A7B               	incf	_RF,w
  5873  0981  0086               	movwf	6
  5874  0982  0187               	clrf	7
  5875  0983  0869               	movf	??_setRF_Main,w
  5876  0984  0781               	addwf	1,f
  5877                           
  5878                           ;RF_Control_B1.c: 118: if(RF->DebounceTime == 25)
  5879  0985  0A7B               	incf	_RF,w
  5880  0986  0086               	movwf	6
  5881  0987  0187               	clrf	7
  5882  0988  0801               	movf	1,w
  5883  0989  3A19               	xorlw	25
  5884  098A  1D03               	skipz
  5885  098B  0008               	return
  5886                           
  5887                           ;RF_Control_B1.c: 119: {
  5888                           ;RF_Control_B1.c: 120: RF->DebounceTime=0;
  5889  098C  0A7B               	incf	_RF,w
  5890  098D  0086               	movwf	6
  5891  098E  0187               	clrf	7
  5892  098F  0181               	clrf	1
  5893                           
  5894                           ;RF_Control_B1.c: 121: RF->Debounce=1;
  5895  0990  087B               	movf	_RF,w
  5896  0991  0086               	movwf	6
  5897  0992  0187               	clrf	7
  5898  0993  1681               	bsf	1,5
  5899                           
  5900                           ;RF_Control_B1.c: 122: }
  5901                           ;RF_Control_B1.c: 123: }
  5902  0994  0008               	return
  5903  0995                     l8685:	
  5904                           
  5905                           ;RF_Control_B1.c: 124: else
  5906                           ;RF_Control_B1.c: 125: {
  5907                           ;RF_Control_B1.c: 126: RF->Debounce=0;
  5908  0995  087B               	movf	_RF,w
  5909  0996  0086               	movwf	6
  5910  0997  0187               	clrf	7
  5911  0998  1281               	bcf	1,5
  5912                           
  5913                           ;RF_Control_B1.c: 127: RF->TransceiveGO=0;
  5914  0999  087B               	movf	_RF,w
  5915  099A  0086               	movwf	6
  5916  099B  0187               	clrf	7
  5917  099C  1101               	bcf	1,2
  5918                           
  5919                           ;RF_Control_B1.c: 128: CC2500_TxData();
  5920  099D  3190  2044         	fcall	_CC2500_TxData
  5921  099F  0008               	return
  5922  09A0                     __end_of_setRF_Main:	
  5923                           
  5924                           	psect	text17
  5925  115F                     __ptext17:	
  5926 ;; *************** function _getRxData *****************
  5927 ;; Defined at:
  5928 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;  rf              1    wreg     unsigned char 
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  rf              1   72[BANK0 ] unsigned char 
  5933 ;;  i               1    0        unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;		None               void
  5936 ;; Registers used:
  5937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;Total ram usage:        1 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:   11
  5950 ;; This function calls:
  5951 ;;		_RfPointSelect
  5952 ;;		_setControl_Lights_Table
  5953 ;;		_setLog_Code
  5954 ;; This function is called by:
  5955 ;;		_setRF_Main
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           
  5960                           ;psect for function _getRxData
  5961  115F                     _getRxData:	
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5965                           ;getRxData@rf stored from wreg
  5966  115F  0020               	movlb	0	; select bank0
  5967  1160  00E8               	movwf	getRxData@rf
  5968                           
  5969                           ;RF_Control_B1.c: 216: unsigned char i;
  5970                           ;RF_Control_B1.c: 217: RfPointSelect(rf);
  5971  1161  0868               	movf	getRxData@rf,w
  5972  1162  3198  2070  3191   	fcall	_RfPointSelect
  5973                           
  5974                           ;RF_Control_B1.c: 218: if(RF->Learn)
  5975  1165  087B               	movf	_RF,w
  5976  1166  0086               	movwf	6
  5977  1167  0187               	clrf	7
  5978  1168  1F01               	btfss	1,6
  5979  1169  2976               	goto	l8277
  5980                           
  5981                           ;RF_Control_B1.c: 219: {
  5982                           ;RF_Control_B1.c: 220: if(RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  5983  116A  0021               	movlb	1	; select bank1
  5984  116B  08A0               	movf	_RF_Data^(0+128),f
  5985  116C  1D03               	skipz
  5986  116D  0008               	return
  5987  116E  0821               	movf	(_RF_Data^(0+128)+1),w
  5988  116F  3A64               	xorlw	100
  5989  1170  1D03               	skipz
  5990  1171  0008               	return
  5991                           
  5992                           ;RF_Control_B1.c: 221: {
  5993                           ;RF_Control_B1.c: 222: setLog_Code(1);
  5994  1172  3001               	movlw	1
  5995  1173  3190  20CE         	fcall	_setLog_Code
  5996                           
  5997                           ;RF_Control_B1.c: 223: }
  5998                           ;RF_Control_B1.c: 224: }
  5999  1175  0008               	return
  6000  1176                     l8277:	
  6001                           
  6002                           ;RF_Control_B1.c: 225: else
  6003                           ;RF_Control_B1.c: 226: {
  6004                           ;RF_Control_B1.c: 227: if(RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6005  1176  0021               	movlb	1	; select bank1
  6006  1177  08A0               	movf	_RF_Data^(0+128),f
  6007  1178  1D03               	skipz
  6008  1179  0008               	return
  6009  117A  0821               	movf	(_RF_Data^(0+128)+1),w
  6010  117B  3A02               	xorlw	2
  6011  117C  1D03               	skipz
  6012  117D  0008               	return
  6013                           
  6014                           ;RF_Control_B1.c: 228: {
  6015                           ;RF_Control_B1.c: 229: if(RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 0
      +                          xff)
  6016  117E  082C               	movf	(_RF_Data^(0+128)+12),w
  6017  117F  3AFF               	xorlw	255
  6018  1180  1D03               	skipz
  6019  1181  298C               	goto	l8289
  6020  1182  082D               	movf	(_RF_Data^(0+128)+13),w
  6021  1183  3AFF               	xorlw	255
  6022  1184  1D03               	skipz
  6023  1185  298C               	goto	l8289
  6024  1186  082E               	movf	(_RF_Data^(0+128)+14),w
  6025  1187  3AFF               	xorlw	255
  6026  1188  1D03               	skipz
  6027  1189  298C               	goto	l8289
  6028                           
  6029                           ;RF_Control_B1.c: 230: {
  6030                           ;RF_Control_B1.c: 231: __nop();
  6031  118A  0000               	nop
  6032                           
  6033                           ;RF_Control_B1.c: 232: }
  6034  118B  0008               	return
  6035  118C                     l8289:	
  6036                           
  6037                           ;RF_Control_B1.c: 233: else
  6038                           ;RF_Control_B1.c: 234: {
  6039                           ;RF_Control_B1.c: 235: if(RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->Da
      +                          ta[13] && RF_Data[14] == Product->Data[14])
  6040  118C  0020               	movlb	0	; select bank0
  6041  118D  086F               	movf	_Product,w
  6042  118E  3E0C               	addlw	12
  6043  118F  0086               	movwf	6
  6044  1190  3001               	movlw	1	; select bank2/3
  6045  1191  0087               	movwf	7
  6046  1192  0021               	movlb	1	; select bank1
  6047  1193  082C               	movf	(_RF_Data^(0+128)+12),w
  6048  1194  0601               	xorwf	1,w
  6049  1195  1D03               	skipz
  6050  1196  0008               	return
  6051  1197  0020               	movlb	0	; select bank0
  6052  1198  086F               	movf	_Product,w
  6053  1199  3E0D               	addlw	13
  6054  119A  0086               	movwf	6
  6055  119B  3001               	movlw	1	; select bank2/3
  6056  119C  0087               	movwf	7
  6057  119D  0021               	movlb	1	; select bank1
  6058  119E  082D               	movf	(_RF_Data^(0+128)+13),w
  6059  119F  0601               	xorwf	1,w
  6060  11A0  1D03               	skipz
  6061  11A1  0008               	return
  6062  11A2  0020               	movlb	0	; select bank0
  6063  11A3  086F               	movf	_Product,w
  6064  11A4  3E0E               	addlw	14
  6065  11A5  0086               	movwf	6
  6066  11A6  3001               	movlw	1	; select bank2/3
  6067  11A7  0087               	movwf	7
  6068  11A8  0021               	movlb	1	; select bank1
  6069  11A9  082E               	movf	(_RF_Data^(0+128)+14),w
  6070  11AA  0601               	xorwf	1,w
  6071  11AB  1D03               	skipz
  6072  11AC  0008               	return
  6073                           
  6074                           ;RF_Control_B1.c: 236: {
  6075                           ;RF_Control_B1.c: 237: setControl_Lights_Table(1);
  6076  11AD  3001               	movlw	1
  6077  11AE  3195  25C7         	fcall	_setControl_Lights_Table
  6078                           
  6079                           ;RF_Control_B1.c: 246: {
  6080                           ;RF_Control_B1.c: 247: ;
  6081                           
  6082                           ;RF_Control_B1.c: 242: {
  6083                           ;RF_Control_B1.c: 243: ;
  6084                           ;RF_Control_B1.c: 244: }
  6085                           
  6086                           ;RF_Control_B1.c: 238: }
  6087                           ;RF_Control_B1.c: 239: }
  6088                           ;RF_Control_B1.c: 240: }
  6089  11B0  0008               	return
  6090  11B1                     __end_of_getRxData:	
  6091                           
  6092                           	psect	text18
  6093  10CE                     __ptext18:	
  6094 ;; *************** function _setLog_Code *****************
  6095 ;; Defined at:
  6096 ;;		line 256 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  rf              1    wreg     unsigned char 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  rf              1   11[BANK0 ] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;Total ram usage:        2 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    6
  6117 ;; This function calls:
  6118 ;;		_RfPointSelect
  6119 ;;		_setBuz
  6120 ;; This function is called by:
  6121 ;;		_getRxData
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           
  6126                           ;psect for function _setLog_Code
  6127  10CE                     _setLog_Code:	
  6128                           
  6129                           ;incstack = 0
  6130                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6131                           ;setLog_Code@rf stored from wreg
  6132  10CE  0020               	movlb	0	; select bank0
  6133  10CF  00AB               	movwf	setLog_Code@rf
  6134                           
  6135                           ;RF_Control_B1.c: 258: RfPointSelect(rf);
  6136  10D0  082B               	movf	setLog_Code@rf,w
  6137  10D1  3198  2070  3190   	fcall	_RfPointSelect
  6138                           
  6139                           ;RF_Control_B1.c: 259: Product->Data[12]=RF_Data[12];
  6140  10D4  0021               	movlb	1	; select bank1
  6141  10D5  082C               	movf	(_RF_Data^(0+128)+12),w
  6142  10D6  0020               	movlb	0	; select bank0
  6143  10D7  00AA               	movwf	??_setLog_Code
  6144  10D8  086F               	movf	_Product,w
  6145  10D9  3E0C               	addlw	12
  6146  10DA  0086               	movwf	6
  6147  10DB  3001               	movlw	1	; select bank2/3
  6148  10DC  0087               	movwf	7
  6149  10DD  082A               	movf	??_setLog_Code,w
  6150  10DE  0081               	movwf	1
  6151                           
  6152                           ;RF_Control_B1.c: 260: Product->Data[13]=RF_Data[13];
  6153  10DF  0021               	movlb	1	; select bank1
  6154  10E0  082D               	movf	(_RF_Data^(0+128)+13),w
  6155  10E1  0020               	movlb	0	; select bank0
  6156  10E2  00AA               	movwf	??_setLog_Code
  6157  10E3  086F               	movf	_Product,w
  6158  10E4  3E0D               	addlw	13
  6159  10E5  0086               	movwf	6
  6160  10E6  3001               	movlw	1	; select bank2/3
  6161  10E7  0087               	movwf	7
  6162  10E8  082A               	movf	??_setLog_Code,w
  6163  10E9  0081               	movwf	1
  6164                           
  6165                           ;RF_Control_B1.c: 261: Product->Data[14]=RF_Data[14];
  6166  10EA  0021               	movlb	1	; select bank1
  6167  10EB  082E               	movf	(_RF_Data^(0+128)+14),w
  6168  10EC  0020               	movlb	0	; select bank0
  6169  10ED  00AA               	movwf	??_setLog_Code
  6170  10EE  086F               	movf	_Product,w
  6171  10EF  3E0E               	addlw	14
  6172  10F0  0086               	movwf	6
  6173  10F1  3001               	movlw	1	; select bank2/3
  6174  10F2  0087               	movwf	7
  6175  10F3  082A               	movf	??_setLog_Code,w
  6176  10F4  0081               	movwf	1
  6177                           
  6178                           ;RF_Control_B1.c: 262: setBuz(1,100);
  6179  10F5  3064               	movlw	100
  6180  10F6  00A6               	movwf	setBuz@time
  6181  10F7  3000               	movlw	0
  6182  10F8  00A7               	movwf	setBuz@time+1
  6183  10F9  3001               	movlw	1
  6184  10FA  3197  2789  3190   	fcall	_setBuz
  6185                           
  6186                           ;RF_Control_B1.c: 263: RF->Learn=0;
  6187  10FD  087B               	movf	_RF,w
  6188  10FE  0086               	movwf	6
  6189  10FF  0187               	clrf	7
  6190  1100  1301               	bcf	1,6
  6191                           
  6192                           ;RF_Control_B1.c: 264: if(TMain->First)
  6193  1101  087D               	movf	_TMain,w
  6194  1102  3E03               	addlw	3
  6195  1103  0086               	movwf	6
  6196  1104  3001               	movlw	1	; select bank2/3
  6197  1105  0087               	movwf	7
  6198  1106  1C81               	btfss	1,1
  6199  1107  290E               	goto	l2399
  6200                           
  6201                           ;RF_Control_B1.c: 265: {
  6202                           ;RF_Control_B1.c: 266: Memory->LoopSave=1;
  6203  1108  087C               	movf	_Memory,w
  6204  1109  3E22               	addlw	34
  6205  110A  0086               	movwf	6
  6206  110B  3001               	movlw	1	; select bank2/3
  6207  110C  0087               	movwf	7
  6208  110D  1501               	bsf	1,2
  6209  110E                     l2399:	
  6210                           
  6211                           ;RF_Control_B1.c: 267: }
  6212                           ;RF_Control_B1.c: 268: Memory->Modify=1;
  6213  110E  087C               	movf	_Memory,w
  6214  110F  3E22               	addlw	34
  6215  1110  0086               	movwf	6
  6216  1111  3001               	movlw	1	; select bank2/3
  6217  1112  0087               	movwf	7
  6218  1113  1401               	bsf	1,0
  6219  1114  0008               	return
  6220  1115                     __end_of_setLog_Code:	
  6221                           
  6222                           	psect	text19
  6223  15C7                     __ptext19:	
  6224 ;; *************** function _setControl_Lights_Table *****************
  6225 ;; Defined at:
  6226 ;;		line 271 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;  rf              1    wreg     unsigned char 
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  rf              1   71[BANK0 ] unsigned char 
  6231 ;; Return value:  Size  Location     Type
  6232 ;;		None               void
  6233 ;; Registers used:
  6234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;Total ram usage:        1 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:   10
  6247 ;; This function calls:
  6248 ;;		_RfPointSelect
  6249 ;;		_setBuz
  6250 ;;		_setDimmerLights
  6251 ;;		_setRFSW_AdjControl
  6252 ;;		_setRFSW_Control
  6253 ;;		_setRFSW_Status
  6254 ;;		_setSw_Status
  6255 ;;		_setTxData
  6256 ;; This function is called by:
  6257 ;;		_getRxData
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           
  6262                           ;psect for function _setControl_Lights_Table
  6263  15C7                     _setControl_Lights_Table:	
  6264                           
  6265                           ;incstack = 0
  6266                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6267                           ;setControl_Lights_Table@rf stored from wreg
  6268  15C7  0020               	movlb	0	; select bank0
  6269  15C8  00E7               	movwf	setControl_Lights_Table@rf
  6270                           
  6271                           ;RF_Control_B1.c: 273: RfPointSelect(rf);
  6272  15C9  0867               	movf	setControl_Lights_Table@rf,w
  6273  15CA  3198  2070  3195   	fcall	_RfPointSelect
  6274                           
  6275                           ;RF_Control_B1.c: 274: if(RF_Data[15] == 0x00)
  6276  15CD  0021               	movlb	1	; select bank1
  6277  15CE  08AF               	movf	(_RF_Data^(0+128)+15),f
  6278  15CF  1D03               	skipz
  6279  15D0  2E08               	goto	l8127
  6280                           
  6281                           ;RF_Control_B1.c: 275: {
  6282                           ;RF_Control_B1.c: 277: setDimmerLights(1,0);
  6283  15D1  0020               	movlb	0	; select bank0
  6284  15D2  01A4               	clrf	setDimmerLights@status
  6285  15D3  3001               	movlw	1
  6286  15D4  318A  22C6  3195   	fcall	_setDimmerLights
  6287                           
  6288                           ;RF_Control_B1.c: 278: setRFSW_Status(1,0);
  6289  15D7  0020               	movlb	0	; select bank0
  6290  15D8  01A2               	clrf	setRFSW_Status@command
  6291  15D9  3001               	movlw	1
  6292  15DA  3199  215A  3195   	fcall	_setRFSW_Status
  6293                           
  6294                           ;RF_Control_B1.c: 279: setSw_Status(1,0);
  6295  15DD  0020               	movlb	0	; select bank0
  6296  15DE  01A2               	clrf	setSw_Status@command
  6297  15DF  3001               	movlw	1
  6298  15E0  3199  2169  3195   	fcall	_setSw_Status
  6299                           
  6300                           ;RF_Control_B1.c: 292: Product->Data[9]=0;
  6301  15E3  0020               	movlb	0	; select bank0
  6302  15E4  086F               	movf	_Product,w
  6303  15E5  3E09               	addlw	9
  6304  15E6  0086               	movwf	6
  6305  15E7  3001               	movlw	1	; select bank2/3
  6306  15E8  0087               	movwf	7
  6307  15E9  0181               	clrf	1
  6308                           
  6309                           ;RF_Control_B1.c: 293: Product->Data[11]=0;
  6310  15EA  086F               	movf	_Product,w
  6311  15EB  3E0B               	addlw	11
  6312  15EC  0086               	movwf	6
  6313  15ED  3001               	movlw	1	; select bank2/3
  6314  15EE  0087               	movwf	7
  6315  15EF  0181               	clrf	1
  6316                           
  6317                           ;RF_Control_B1.c: 294: Product->Data[15]=0;
  6318  15F0  086F               	movf	_Product,w
  6319  15F1  3E0F               	addlw	15
  6320  15F2  0086               	movwf	6
  6321  15F3  3001               	movlw	1	; select bank2/3
  6322  15F4  0087               	movwf	7
  6323  15F5  0181               	clrf	1
  6324                           
  6325                           ;RF_Control_B1.c: 295: Product->Data[17]=0;
  6326  15F6  086F               	movf	_Product,w
  6327  15F7  3E11               	addlw	17
  6328  15F8  0086               	movwf	6
  6329  15F9  3001               	movlw	1	; select bank2/3
  6330  15FA  0087               	movwf	7
  6331  15FB  0181               	clrf	1
  6332                           
  6333                           ;RF_Control_B1.c: 296: setBuz(1,100);
  6334  15FC  3064               	movlw	100
  6335  15FD  00A6               	movwf	setBuz@time
  6336  15FE  3000               	movlw	0
  6337  15FF  00A7               	movwf	setBuz@time+1
  6338  1600  3001               	movlw	1
  6339  1601  3197  2789  3195   	fcall	_setBuz
  6340                           
  6341                           ;RF_Control_B1.c: 297: setTxData(1);
  6342  1604  3001               	movlw	1
  6343  1605  318D  2566         	fcall	_setTxData
  6344                           
  6345                           ;RF_Control_B1.c: 298: }
  6346  1607  0008               	return
  6347  1608                     l8127:	
  6348                           
  6349                           ;RF_Control_B1.c: 299: else if(RF_Data[15] == 0x20)
  6350  1608  0021               	movlb	1	; select bank1
  6351  1609  082F               	movf	(_RF_Data^(0+128)+15),w
  6352  160A  3A20               	xorlw	32
  6353  160B  1D03               	skipz
  6354  160C  2E24               	goto	l8133
  6355                           
  6356                           ;RF_Control_B1.c: 300: {
  6357                           ;RF_Control_B1.c: 301: Product->Data[9]=0;
  6358  160D  0020               	movlb	0	; select bank0
  6359  160E  086F               	movf	_Product,w
  6360  160F  3E09               	addlw	9
  6361  1610  0086               	movwf	6
  6362  1611  3001               	movlw	1	; select bank2/3
  6363  1612  0087               	movwf	7
  6364  1613  0181               	clrf	1
  6365                           
  6366                           ;RF_Control_B1.c: 302: Product->Data[11]=0;
  6367  1614  086F               	movf	_Product,w
  6368  1615  3E0B               	addlw	11
  6369  1616  0086               	movwf	6
  6370  1617  3001               	movlw	1	; select bank2/3
  6371  1618  0087               	movwf	7
  6372  1619  0181               	clrf	1
  6373                           
  6374                           ;RF_Control_B1.c: 303: Product->Data[17]=0;
  6375  161A  086F               	movf	_Product,w
  6376  161B  3E11               	addlw	17
  6377  161C  0086               	movwf	6
  6378  161D  3001               	movlw	1	; select bank2/3
  6379  161E  0087               	movwf	7
  6380  161F  0181               	clrf	1
  6381                           
  6382                           ;RF_Control_B1.c: 304: setTxData(1);
  6383  1620  3001               	movlw	1
  6384  1621  318D  2566         	fcall	_setTxData
  6385                           
  6386                           ;RF_Control_B1.c: 305: }
  6387  1623  0008               	return
  6388  1624                     l8133:	
  6389                           
  6390                           ;RF_Control_B1.c: 307: else if(RF_Data[15] == 0x01)
  6391  1624  0021               	movlb	1	; select bank1
  6392  1625  082F               	movf	(_RF_Data^(0+128)+15),w
  6393  1626  3A01               	xorlw	1
  6394  1627  1D03               	skipz
  6395  1628  2E2D               	goto	l8137
  6396                           
  6397                           ;RF_Control_B1.c: 308: {
  6398                           ;RF_Control_B1.c: 309: setRFSW_Control(1);
  6399  1629  3001               	movlw	1
  6400  162A  3189  21A0         	fcall	_setRFSW_Control
  6401                           
  6402                           ;RF_Control_B1.c: 310: }
  6403  162C  0008               	return
  6404  162D                     l8137:	
  6405                           
  6406                           ;RF_Control_B1.c: 312: else if(RF_Data[15] == 0x11)
  6407  162D  0021               	movlb	1	; select bank1
  6408  162E  082F               	movf	(_RF_Data^(0+128)+15),w
  6409  162F  3A11               	xorlw	17
  6410  1630  1D03               	skipz
  6411  1631  0008               	return
  6412                           
  6413                           ;RF_Control_B1.c: 313: {
  6414                           ;RF_Control_B1.c: 314: setRFSW_AdjControl(1);
  6415  1632  3001               	movlw	1
  6416  1633  319F  277D         	fcall	_setRFSW_AdjControl
  6417  1635  0008               	return
  6418  1636                     __end_of_setControl_Lights_Table:	
  6419                           
  6420                           	psect	text20
  6421  09A0                     __ptext20:	
  6422 ;; *************** function _setRFSW_Control *****************
  6423 ;; Defined at:
  6424 ;;		line 368 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  sw              1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  sw              1   67[BANK0 ] unsigned char 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;		None               void
  6431 ;; Registers used:
  6432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;Total ram usage:        2 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    8
  6445 ;; This function calls:
  6446 ;;		_RfSWPointSelect
  6447 ;;		_setBuz
  6448 ;;		_setDelayOff_GO
  6449 ;;		_setDimmerLights_Switch
  6450 ;;		_setDimmerLights_Trigger
  6451 ;;		_setRF_DimmerLights
  6452 ;;		_setSw_Status
  6453 ;;		_setTxData
  6454 ;; This function is called by:
  6455 ;;		_setControl_Lights_Table
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           
  6460                           ;psect for function _setRFSW_Control
  6461  09A0                     _setRFSW_Control:	
  6462                           
  6463                           ;incstack = 0
  6464                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6465                           ;setRFSW_Control@sw stored from wreg
  6466  09A0  0020               	movlb	0	; select bank0
  6467  09A1  00E3               	movwf	setRFSW_Control@sw
  6468                           
  6469                           ;RF_Control_B1.c: 370: RfSWPointSelect(sw);
  6470  09A2  0863               	movf	setRFSW_Control@sw,w
  6471  09A3  3198  20C1  3189   	fcall	_RfSWPointSelect
  6472                           
  6473                           ;RF_Control_B1.c: 371: if(!RFSW->Status)
  6474  09A6  0021               	movlb	1	; select bank1
  6475  09A7  083C               	movf	_RFSW^(0+128),w
  6476  09A8  0086               	movwf	6
  6477  09A9  0187               	clrf	7
  6478  09AA  1801               	btfsc	1,0
  6479  09AB  29E1               	goto	l8017
  6480                           
  6481                           ;RF_Control_B1.c: 372: {
  6482                           ;RF_Control_B1.c: 373: if(RF_Data[16] == 0x80)
  6483  09AC  0830               	movf	(_RF_Data^(0+128)+16),w
  6484  09AD  3A80               	xorlw	128
  6485  09AE  1D03               	skipz
  6486  09AF  29BD               	goto	l8007
  6487                           
  6488                           ;RF_Control_B1.c: 374: {
  6489                           ;RF_Control_B1.c: 375: setDelayOff_GO(sw,1,RF_Data[17]);
  6490  09B0  0020               	movlb	0	; select bank0
  6491  09B1  01A3               	clrf	setDelayOff_GO@command
  6492  09B2  0AA3               	incf	setDelayOff_GO@command,f
  6493  09B3  0021               	movlb	1	; select bank1
  6494  09B4  0831               	movf	(_RF_Data^(0+128)+17),w
  6495  09B5  0020               	movlb	0	; select bank0
  6496  09B6  00E2               	movwf	??_setRFSW_Control
  6497  09B7  0862               	movf	??_setRFSW_Control,w
  6498  09B8  00A4               	movwf	setDelayOff_GO@value
  6499  09B9  0863               	movf	setRFSW_Control@sw,w
  6500  09BA  3193  2316  3189   	fcall	_setDelayOff_GO
  6501  09BD                     l8007:	
  6502                           
  6503                           ;RF_Control_B1.c: 376: }
  6504                           ;RF_Control_B1.c: 377: RFSW->Status=1;
  6505  09BD  0021               	movlb	1	; select bank1
  6506  09BE  083C               	movf	_RFSW^(0+128),w
  6507  09BF  0086               	movwf	6
  6508  09C0  0187               	clrf	7
  6509  09C1  1401               	bsf	1,0
  6510                           
  6511                           ;RF_Control_B1.c: 378: setSw_Status(sw,1);
  6512  09C2  0020               	movlb	0	; select bank0
  6513  09C3  01A2               	clrf	setSw_Status@command
  6514  09C4  0AA2               	incf	setSw_Status@command,f
  6515  09C5  0863               	movf	setRFSW_Control@sw,w
  6516  09C6  3199  2169  3189   	fcall	_setSw_Status
  6517                           
  6518                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw,1);
  6519  09C9  0020               	movlb	0	; select bank0
  6520  09CA  01A2               	clrf	setDimmerLights_Trigger@command
  6521  09CB  0AA2               	incf	setDimmerLights_Trigger@command,f
  6522  09CC  0863               	movf	setRFSW_Control@sw,w
  6523  09CD  3199  21A7  3189   	fcall	_setDimmerLights_Trigger
  6524                           
  6525                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw,1);
  6526  09D0  0020               	movlb	0	; select bank0
  6527  09D1  01A2               	clrf	setDimmerLights_Switch@command
  6528  09D2  0AA2               	incf	setDimmerLights_Switch@command,f
  6529  09D3  0863               	movf	setRFSW_Control@sw,w
  6530  09D4  3199  2197  3189   	fcall	_setDimmerLights_Switch
  6531                           
  6532                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw,RFSW->Status);
  6533  09D7  0021               	movlb	1	; select bank1
  6534  09D8  083C               	movf	_RFSW^(0+128),w
  6535  09D9  0086               	movwf	6
  6536  09DA  0187               	clrf	7
  6537  09DB  3000               	movlw	0
  6538  09DC  1801               	btfsc	1,0
  6539  09DD  3001               	movlw	1
  6540  09DE  0020               	movlb	0	; select bank0
  6541  09DF  00DD               	movwf	setRF_DimmerLights@on
  6542  09E0  2A1F               	goto	L2
  6543  09E1                     l8017:	
  6544                           ;RF_Control_B1.c: 384: }
  6545                           
  6546                           
  6547                           ;RF_Control_B1.c: 385: else
  6548                           ;RF_Control_B1.c: 386: {
  6549                           ;RF_Control_B1.c: 387: if(RF_Data[16] == 0x80)
  6550  09E1  0021               	movlb	1	; select bank1
  6551  09E2  0830               	movf	(_RF_Data^(0+128)+16),w
  6552  09E3  3A80               	xorlw	128
  6553  09E4  1D03               	skipz
  6554  09E5  29F7               	goto	l8021
  6555                           
  6556                           ;RF_Control_B1.c: 388: {
  6557                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw,1,RF_Data[17]);
  6558  09E6  0020               	movlb	0	; select bank0
  6559  09E7  01A3               	clrf	setDelayOff_GO@command
  6560  09E8  0AA3               	incf	setDelayOff_GO@command,f
  6561  09E9  0021               	movlb	1	; select bank1
  6562  09EA  0831               	movf	(_RF_Data^(0+128)+17),w
  6563  09EB  0020               	movlb	0	; select bank0
  6564  09EC  00E2               	movwf	??_setRFSW_Control
  6565  09ED  0862               	movf	??_setRFSW_Control,w
  6566  09EE  00A4               	movwf	setDelayOff_GO@value
  6567  09EF  0863               	movf	setRFSW_Control@sw,w
  6568  09F0  3193  2316  3189   	fcall	_setDelayOff_GO
  6569                           
  6570                           ;RF_Control_B1.c: 390: setRF_DimmerLights(sw,1);
  6571  09F3  0020               	movlb	0	; select bank0
  6572  09F4  01DD               	clrf	setRF_DimmerLights@on
  6573  09F5  0ADD               	incf	setRF_DimmerLights@on,f
  6574  09F6  2A1F               	goto	L2
  6575  09F7                     l8021:	
  6576                           ;RF_Control_B1.c: 391: }
  6577                           
  6578                           
  6579                           ;RF_Control_B1.c: 392: else
  6580                           ;RF_Control_B1.c: 393: {
  6581                           ;RF_Control_B1.c: 394: RFSW->Status=0;
  6582  09F7  0021               	movlb	1	; select bank1
  6583  09F8  083C               	movf	_RFSW^(0+128),w
  6584  09F9  0086               	movwf	6
  6585  09FA  0187               	clrf	7
  6586  09FB  1001               	bcf	1,0
  6587                           
  6588                           ;RF_Control_B1.c: 395: setSw_Status(sw,0);
  6589  09FC  0020               	movlb	0	; select bank0
  6590  09FD  01A2               	clrf	setSw_Status@command
  6591  09FE  0863               	movf	setRFSW_Control@sw,w
  6592  09FF  3199  2169  3189   	fcall	_setSw_Status
  6593                           
  6594                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw,1);
  6595  0A02  0020               	movlb	0	; select bank0
  6596  0A03  01A2               	clrf	setDimmerLights_Trigger@command
  6597  0A04  0AA2               	incf	setDimmerLights_Trigger@command,f
  6598  0A05  0863               	movf	setRFSW_Control@sw,w
  6599  0A06  3199  21A7  3189   	fcall	_setDimmerLights_Trigger
  6600                           
  6601                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw,RFSW->Status);
  6602  0A09  0021               	movlb	1	; select bank1
  6603  0A0A  083C               	movf	_RFSW^(0+128),w
  6604  0A0B  0086               	movwf	6
  6605  0A0C  0187               	clrf	7
  6606  0A0D  3000               	movlw	0
  6607  0A0E  1801               	btfsc	1,0
  6608  0A0F  3001               	movlw	1
  6609  0A10  0020               	movlb	0	; select bank0
  6610  0A11  00A2               	movwf	setDimmerLights_Switch@command
  6611  0A12  0863               	movf	setRFSW_Control@sw,w
  6612  0A13  3199  2197  3189   	fcall	_setDimmerLights_Switch
  6613                           
  6614                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw,0,0);
  6615  0A16  0020               	movlb	0	; select bank0
  6616  0A17  01A3               	clrf	setDelayOff_GO@command
  6617  0A18  01A4               	clrf	setDelayOff_GO@value
  6618  0A19  0863               	movf	setRFSW_Control@sw,w
  6619  0A1A  3193  2316  3189   	fcall	_setDelayOff_GO
  6620                           
  6621                           ;RF_Control_B1.c: 401: setRF_DimmerLights(sw,0);
  6622  0A1D  0020               	movlb	0	; select bank0
  6623  0A1E  01DD               	clrf	setRF_DimmerLights@on
  6624  0A1F                     L2:	
  6625  0A1F  0863               	movf	setRFSW_Control@sw,w
  6626  0A20  3195  255C  3189   	fcall	_setRF_DimmerLights
  6627                           
  6628                           ;RF_Control_B1.c: 402: }
  6629                           ;RF_Control_B1.c: 403: }
  6630                           ;RF_Control_B1.c: 404: setBuz(1,100);
  6631  0A23  3064               	movlw	100
  6632  0A24  0020               	movlb	0	; select bank0
  6633  0A25  00A6               	movwf	setBuz@time
  6634  0A26  3000               	movlw	0
  6635  0A27  00A7               	movwf	setBuz@time+1
  6636  0A28  3001               	movlw	1
  6637  0A29  3197  2789  3189   	fcall	_setBuz
  6638                           
  6639                           ;RF_Control_B1.c: 405: setTxData(1);
  6640  0A2C  3001               	movlw	1
  6641  0A2D  318D  2566         	fcall	_setTxData
  6642  0A2F  0008               	return
  6643  0A30                     __end_of_setRFSW_Control:	
  6644                           
  6645                           	psect	text21
  6646  1316                     __ptext21:	
  6647 ;; *************** function _setDelayOff_GO *****************
  6648 ;; Defined at:
  6649 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;  sw              1    wreg     unsigned char 
  6652 ;;  command         1    3[BANK0 ] unsigned char 
  6653 ;;  value           1    4[BANK0 ] unsigned char 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  sw              1    7[BANK0 ] unsigned char 
  6656 ;; Return value:  Size  Location     Type
  6657 ;;		None               void
  6658 ;; Registers used:
  6659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6665 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;Total ram usage:        5 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    5
  6672 ;; This function calls:
  6673 ;;		_DelayOffPointSelect
  6674 ;;		_DelayTimejudge
  6675 ;; This function is called by:
  6676 ;;		_setRFSW_Control
  6677 ;;		_Sw_DimmerOffFunc
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           
  6682                           ;psect for function _setDelayOff_GO
  6683  1316                     _setDelayOff_GO:	
  6684                           
  6685                           ;incstack = 0
  6686                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6687                           ;setDelayOff_GO@sw stored from wreg
  6688  1316  0020               	movlb	0	; select bank0
  6689  1317  00A7               	movwf	setDelayOff_GO@sw
  6690                           
  6691                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  6692  1318  0827               	movf	setDelayOff_GO@sw,w
  6693  1319  3198  20B5  3193   	fcall	_DelayOffPointSelect
  6694                           
  6695                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  6696  131C  0021               	movlb	1	; select bank1
  6697  131D  0838               	movf	_DelayOff^(0+128),w
  6698  131E  0086               	movwf	6
  6699  131F  0187               	clrf	7
  6700  1320  1C01               	btfss	1,0
  6701  1321  0008               	return
  6702                           
  6703                           ;DelayOff_B1.c: 96: {
  6704                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  6705  1322  0838               	movf	_DelayOff^(0+128),w
  6706  1323  0086               	movwf	6
  6707  1324  0187               	clrf	7
  6708  1325  0020               	movlb	0	; select bank0
  6709  1326  0823               	movf	setDelayOff_GO@command,w
  6710  1327  1081               	bcf	1,1
  6711  1328  1D03               	skipz
  6712  1329  1481               	bsf	1,1
  6713                           
  6714                           ;DelayOff_B1.c: 98: if(command)
  6715  132A  0823               	movf	setDelayOff_GO@command,w
  6716  132B  1903               	btfsc	3,2
  6717  132C  2B58               	goto	l5955
  6718                           
  6719                           ;DelayOff_B1.c: 99: {
  6720                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  6721  132D  0824               	movf	setDelayOff_GO@value,w
  6722  132E  319D  2536  3193   	fcall	_DelayTimejudge
  6723  1331  0020               	movlb	0	; select bank0
  6724  1332  00A5               	movwf	??_setDelayOff_GO
  6725  1333  0021               	movlb	1	; select bank1
  6726  1334  0A38               	incf	_DelayOff^(0+128),w
  6727  1335  0086               	movwf	6
  6728  1336  0187               	clrf	7
  6729  1337  0020               	movlb	0	; select bank0
  6730  1338  0825               	movf	??_setDelayOff_GO,w
  6731  1339  0081               	movwf	1
  6732                           
  6733                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  6734  133A  300F               	movlw	15
  6735  133B  0524               	andwf	setDelayOff_GO@value,w
  6736  133C  00A5               	movwf	??_setDelayOff_GO
  6737  133D  0825               	movf	??_setDelayOff_GO,w
  6738  133E  3A05               	xorlw	5
  6739  133F  1903               	skipnz
  6740  1340  2B45               	goto	l5949
  6741  1341  0824               	movf	setDelayOff_GO@value,w
  6742  1342  390F               	andlw	15
  6743  1343  1D03               	btfss	3,2
  6744  1344  2B4B               	goto	l5953
  6745  1345                     l5949:	
  6746  1345  3026               	movlw	38
  6747  1346  0224               	subwf	setDelayOff_GO@value,w
  6748  1347  1803               	skipnc
  6749  1348  2B4B               	goto	l5953
  6750                           
  6751                           ;DelayOff_B1.c: 102: {
  6752                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  6753  1349  0824               	movf	setDelayOff_GO@value,w
  6754  134A  2B4C               	goto	L3
  6755  134B                     l5953:	
  6756                           ;DelayOff_B1.c: 104: }
  6757                           
  6758                           
  6759                           ;DelayOff_B1.c: 105: else
  6760                           ;DelayOff_B1.c: 106: {
  6761                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  6762  134B  3005               	movlw	5
  6763  134C                     L3:	
  6764  134C  00A5               	movwf	??_setDelayOff_GO
  6765  134D  0827               	movf	setDelayOff_GO@sw,w
  6766  134E  3E1A               	addlw	26
  6767  134F  076F               	addwf	_Product,w
  6768  1350  00A6               	movwf	??_setDelayOff_GO+1
  6769  1351  0826               	movf	??_setDelayOff_GO+1,w
  6770  1352  0086               	movwf	6
  6771  1353  3001               	movlw	1	; select bank2/3
  6772  1354  0087               	movwf	7
  6773  1355  0825               	movf	??_setDelayOff_GO,w
  6774  1356  0081               	movwf	1
  6775                           
  6776                           ;DelayOff_B1.c: 108: }
  6777                           ;DelayOff_B1.c: 109: }
  6778  1357  2B64               	goto	l5959
  6779  1358                     l5955:	
  6780                           
  6781                           ;DelayOff_B1.c: 110: else if(!command)
  6782  1358  08A3               	movf	setDelayOff_GO@command,f
  6783  1359  1D03               	skipz
  6784  135A  2B64               	goto	l5959
  6785                           
  6786                           ;DelayOff_B1.c: 111: {
  6787                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  6788  135B  0827               	movf	setDelayOff_GO@sw,w
  6789  135C  3E1A               	addlw	26
  6790  135D  076F               	addwf	_Product,w
  6791  135E  00A5               	movwf	??_setDelayOff_GO
  6792  135F  0825               	movf	??_setDelayOff_GO,w
  6793  1360  0086               	movwf	6
  6794  1361  3001               	movlw	1	; select bank2/3
  6795  1362  0087               	movwf	7
  6796  1363  0181               	clrf	1
  6797  1364                     l5959:	
  6798                           
  6799                           ;DelayOff_B1.c: 113: }
  6800                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  6801  1364  0021               	movlb	1	; select bank1
  6802  1365  0838               	movf	_DelayOff^(0+128),w
  6803  1366  3E02               	addlw	2
  6804  1367  0086               	movwf	6
  6805  1368  0187               	clrf	7
  6806  1369  3000               	movlw	0
  6807  136A  3FC0               	movwi [0]fsr1
  6808  136B  3FC1               	movwi [1]fsr1
  6809                           
  6810                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  6811  136C  0838               	movf	_DelayOff^(0+128),w
  6812  136D  3E04               	addlw	4
  6813  136E  0086               	movwf	6
  6814  136F  0187               	clrf	7
  6815  1370  0181               	clrf	1
  6816  1371  0008               	return
  6817  1372                     __end_of_setDelayOff_GO:	
  6818                           
  6819                           	psect	text22
  6820  1D36                     __ptext22:	
  6821 ;; *************** function _DelayTimejudge *****************
  6822 ;; Defined at:
  6823 ;;		line 119 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  value           1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  value           1    2[BANK0 ] unsigned char 
  6828 ;;  i               1    1[BANK0 ] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      unsigned char 
  6831 ;; Registers used:
  6832 ;;		wreg
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;Total ram usage:        3 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    4
  6845 ;; This function calls:
  6846 ;;		Nothing
  6847 ;; This function is called by:
  6848 ;;		_setDelayOff_GO
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           
  6853                           ;psect for function _DelayTimejudge
  6854  1D36                     _DelayTimejudge:	
  6855                           
  6856                           ;incstack = 0
  6857                           ; Regs used in _DelayTimejudge: [wreg]
  6858                           ;DelayTimejudge@value stored from wreg
  6859  1D36  0020               	movlb	0	; select bank0
  6860  1D37  00A2               	movwf	DelayTimejudge@value
  6861                           
  6862                           ;DelayOff_B1.c: 121: char i=5;
  6863  1D38  3005               	movlw	5
  6864  1D39  00A0               	movwf	??_DelayTimejudge
  6865  1D3A  0820               	movf	??_DelayTimejudge,w
  6866  1D3B  00A1               	movwf	DelayTimejudge@i
  6867                           
  6868                           ;DelayOff_B1.c: 122: if(value == 0x05)
  6869  1D3C  0822               	movf	DelayTimejudge@value,w
  6870  1D3D  3A05               	xorlw	5
  6871  1D3E  1D03               	skipz
  6872  1D3F  2D42               	goto	l5795
  6873                           
  6874                           ;DelayOff_B1.c: 123: {
  6875                           ;DelayOff_B1.c: 124: i=5;
  6876  1D40  3005               	movlw	5
  6877  1D41  2D5F               	goto	L8
  6878  1D42                     l5795:	
  6879                           ;DelayOff_B1.c: 125: }
  6880                           
  6881                           
  6882                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  6883  1D42  0822               	movf	DelayTimejudge@value,w
  6884  1D43  3A10               	xorlw	16
  6885  1D44  1D03               	skipz
  6886  1D45  2D48               	goto	l5799
  6887                           
  6888                           ;DelayOff_B1.c: 127: {
  6889                           ;DelayOff_B1.c: 128: i=10;
  6890  1D46  300A               	movlw	10
  6891  1D47  2D5F               	goto	L8
  6892  1D48                     l5799:	
  6893                           ;DelayOff_B1.c: 129: }
  6894                           
  6895                           
  6896                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  6897  1D48  0822               	movf	DelayTimejudge@value,w
  6898  1D49  3A15               	xorlw	21
  6899  1D4A  1D03               	skipz
  6900  1D4B  2D4E               	goto	l5803
  6901                           
  6902                           ;DelayOff_B1.c: 131: {
  6903                           ;DelayOff_B1.c: 132: i=15;
  6904  1D4C  300F               	movlw	15
  6905  1D4D  2D5F               	goto	L8
  6906  1D4E                     l5803:	
  6907                           ;DelayOff_B1.c: 133: }
  6908                           
  6909                           
  6910                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  6911  1D4E  0822               	movf	DelayTimejudge@value,w
  6912  1D4F  3A20               	xorlw	32
  6913  1D50  1D03               	skipz
  6914  1D51  2D54               	goto	l5807
  6915                           
  6916                           ;DelayOff_B1.c: 135: {
  6917                           ;DelayOff_B1.c: 136: i=20;
  6918  1D52  3014               	movlw	20
  6919  1D53  2D5F               	goto	L8
  6920  1D54                     l5807:	
  6921                           ;DelayOff_B1.c: 137: }
  6922                           
  6923                           
  6924                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  6925  1D54  0822               	movf	DelayTimejudge@value,w
  6926  1D55  3A25               	xorlw	37
  6927  1D56  1D03               	skipz
  6928  1D57  2D5A               	goto	l5811
  6929                           
  6930                           ;DelayOff_B1.c: 139: {
  6931                           ;DelayOff_B1.c: 140: i=25;
  6932  1D58  3019               	movlw	25
  6933  1D59  2D5F               	goto	L8
  6934  1D5A                     l5811:	
  6935                           ;DelayOff_B1.c: 141: }
  6936                           
  6937                           
  6938                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  6939  1D5A  0822               	movf	DelayTimejudge@value,w
  6940  1D5B  3A30               	xorlw	48
  6941  1D5C  1D03               	skipz
  6942  1D5D  2D62               	goto	l648
  6943                           
  6944                           ;DelayOff_B1.c: 143: {
  6945                           ;DelayOff_B1.c: 144: i=30;
  6946  1D5E  301E               	movlw	30
  6947  1D5F                     L8:	
  6948  1D5F  00A0               	movwf	??_DelayTimejudge
  6949  1D60  0820               	movf	??_DelayTimejudge,w
  6950  1D61  00A1               	movwf	DelayTimejudge@i
  6951  1D62                     l648:	
  6952                           
  6953                           ;DelayOff_B1.c: 145: }
  6954                           ;DelayOff_B1.c: 146: return i;
  6955  1D62  0821               	movf	DelayTimejudge@i,w
  6956  1D63  0008               	return
  6957  1D64                     __end_of_DelayTimejudge:	
  6958                           
  6959                           	psect	text23
  6960  1F7D                     __ptext23:	
  6961 ;; *************** function _setRFSW_AdjControl *****************
  6962 ;; Defined at:
  6963 ;;		line 408 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  sw              1    wreg     unsigned char 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;  sw              1   70[BANK0 ] unsigned char 
  6968 ;; Return value:  Size  Location     Type
  6969 ;;		None               void
  6970 ;; Registers used:
  6971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;Total ram usage:        3 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    9
  6984 ;; This function calls:
  6985 ;;		_RfSWPointSelect
  6986 ;;		_setRF_DimmerValue
  6987 ;;		_setTxData
  6988 ;; This function is called by:
  6989 ;;		_setControl_Lights_Table
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _setRFSW_AdjControl
  6995  1F7D                     _setRFSW_AdjControl:	
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6999                           ;setRFSW_AdjControl@sw stored from wreg
  7000  1F7D  0020               	movlb	0	; select bank0
  7001  1F7E  00E6               	movwf	setRFSW_AdjControl@sw
  7002                           
  7003                           ;RF_Control_B1.c: 410: RfSWPointSelect(sw);
  7004  1F7F  0866               	movf	setRFSW_AdjControl@sw,w
  7005  1F80  3198  20C1  319F   	fcall	_RfSWPointSelect
  7006                           
  7007                           ;RF_Control_B1.c: 411: if(RFSW->Status)
  7008  1F83  0021               	movlb	1	; select bank1
  7009  1F84  083C               	movf	_RFSW^(0+128),w
  7010  1F85  0086               	movwf	6
  7011  1F86  0187               	clrf	7
  7012  1F87  1C01               	btfss	1,0
  7013  1F88  2F95               	goto	l6201
  7014                           
  7015                           ;RF_Control_B1.c: 412: {
  7016                           ;RF_Control_B1.c: 413: Memory->Modify=1;
  7017  1F89  087C               	movf	_Memory,w
  7018  1F8A  3E22               	addlw	34
  7019  1F8B  0086               	movwf	6
  7020  1F8C  3001               	movlw	1	; select bank2/3
  7021  1F8D  0087               	movwf	7
  7022  1F8E  1401               	bsf	1,0
  7023                           
  7024                           ;RF_Control_B1.c: 414: setRF_DimmerValue(sw);
  7025  1F8F  0020               	movlb	0	; select bank0
  7026  1F90  0866               	movf	setRFSW_AdjControl@sw,w
  7027  1F91  319E  2657  319F   	fcall	_setRF_DimmerValue
  7028                           
  7029                           ;RF_Control_B1.c: 415: }
  7030  1F94  2FA7               	goto	l2426
  7031  1F95                     l6201:	
  7032                           
  7033                           ;RF_Control_B1.c: 416: else
  7034                           ;RF_Control_B1.c: 417: {
  7035                           ;RF_Control_B1.c: 418: Product->Data[9]=Product->Data[20+sw];
  7036  1F95  0020               	movlb	0	; select bank0
  7037  1F96  0866               	movf	setRFSW_AdjControl@sw,w
  7038  1F97  3E14               	addlw	20
  7039  1F98  076F               	addwf	_Product,w
  7040  1F99  00E4               	movwf	??_setRFSW_AdjControl
  7041  1F9A  0864               	movf	??_setRFSW_AdjControl,w
  7042  1F9B  0086               	movwf	6
  7043  1F9C  3001               	movlw	1	; select bank2/3
  7044  1F9D  0087               	movwf	7
  7045  1F9E  0801               	movf	1,w
  7046  1F9F  00E5               	movwf	??_setRFSW_AdjControl+1
  7047  1FA0  086F               	movf	_Product,w
  7048  1FA1  3E09               	addlw	9
  7049  1FA2  0086               	movwf	6
  7050  1FA3  3001               	movlw	1	; select bank2/3
  7051  1FA4  0087               	movwf	7
  7052  1FA5  0865               	movf	??_setRFSW_AdjControl+1,w
  7053  1FA6  0081               	movwf	1
  7054  1FA7                     l2426:	
  7055                           
  7056                           ;RF_Control_B1.c: 419: }
  7057                           ;RF_Control_B1.c: 420: Product->Data[17]=Product->Data[26+sw];
  7058  1FA7  0020               	movlb	0	; select bank0
  7059  1FA8  0866               	movf	setRFSW_AdjControl@sw,w
  7060  1FA9  3E1A               	addlw	26
  7061  1FAA  076F               	addwf	_Product,w
  7062  1FAB  00E4               	movwf	??_setRFSW_AdjControl
  7063  1FAC  0864               	movf	??_setRFSW_AdjControl,w
  7064  1FAD  0086               	movwf	6
  7065  1FAE  3001               	movlw	1	; select bank2/3
  7066  1FAF  0087               	movwf	7
  7067  1FB0  0801               	movf	1,w
  7068  1FB1  00E5               	movwf	??_setRFSW_AdjControl+1
  7069  1FB2  086F               	movf	_Product,w
  7070  1FB3  3E11               	addlw	17
  7071  1FB4  0086               	movwf	6
  7072  1FB5  3001               	movlw	1	; select bank2/3
  7073  1FB6  0087               	movwf	7
  7074  1FB7  0865               	movf	??_setRFSW_AdjControl+1,w
  7075  1FB8  0081               	movwf	1
  7076                           
  7077                           ;RF_Control_B1.c: 421: setTxData(1);
  7078  1FB9  3001               	movlw	1
  7079  1FBA  318D  2566         	fcall	_setTxData
  7080  1FBC  0008               	return
  7081  1FBD                     __end_of_setRFSW_AdjControl:	
  7082                           
  7083                           	psect	text24
  7084  1E57                     __ptext24:	
  7085 ;; *************** function _setRF_DimmerValue *****************
  7086 ;; Defined at:
  7087 ;;		line 432 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;  lights          1    wreg     unsigned char 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;  lights          1   67[BANK0 ] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;		None               void
  7094 ;; Registers used:
  7095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;Total ram usage:        3 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    8
  7108 ;; This function calls:
  7109 ;;		_setDimmerLights_AdjRF
  7110 ;; This function is called by:
  7111 ;;		_setRFSW_AdjControl
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           
  7116                           ;psect for function _setRF_DimmerValue
  7117  1E57                     _setRF_DimmerValue:	
  7118                           
  7119                           ;incstack = 0
  7120                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7121                           ;setRF_DimmerValue@lights stored from wreg
  7122  1E57  0020               	movlb	0	; select bank0
  7123  1E58  00E3               	movwf	setRF_DimmerValue@lights
  7124                           
  7125                           ;RF_Control_B1.c: 434: if(RF_Data[9] > 0x64)
  7126  1E59  3065               	movlw	101
  7127  1E5A  0021               	movlb	1	; select bank1
  7128  1E5B  0229               	subwf	(_RF_Data^(0+128)+9),w
  7129  1E5C  1C03               	skipc
  7130  1E5D  2E64               	goto	l6049
  7131                           
  7132                           ;RF_Control_B1.c: 435: {
  7133                           ;RF_Control_B1.c: 436: RF_Data[9]=0x64;
  7134  1E5E  3064               	movlw	100
  7135  1E5F  0020               	movlb	0	; select bank0
  7136  1E60  00E1               	movwf	??_setRF_DimmerValue
  7137  1E61  0861               	movf	??_setRF_DimmerValue,w
  7138  1E62  0021               	movlb	1	; select bank1
  7139  1E63  00A9               	movwf	(_RF_Data^(0+128)+9)
  7140  1E64                     l6049:	
  7141                           
  7142                           ;RF_Control_B1.c: 437: }
  7143                           ;RF_Control_B1.c: 438: Product->Data[9]=RF_Data[9];
  7144  1E64  0829               	movf	(_RF_Data^(0+128)+9),w
  7145  1E65  0020               	movlb	0	; select bank0
  7146  1E66  00E1               	movwf	??_setRF_DimmerValue
  7147  1E67  086F               	movf	_Product,w
  7148  1E68  3E09               	addlw	9
  7149  1E69  0086               	movwf	6
  7150  1E6A  3001               	movlw	1	; select bank2/3
  7151  1E6B  0087               	movwf	7
  7152  1E6C  0861               	movf	??_setRF_DimmerValue,w
  7153  1E6D  0081               	movwf	1
  7154                           
  7155                           ;RF_Control_B1.c: 439: Product->Data[11]=lights;
  7156  1E6E  0863               	movf	setRF_DimmerValue@lights,w
  7157  1E6F  00E1               	movwf	??_setRF_DimmerValue
  7158  1E70  086F               	movf	_Product,w
  7159  1E71  3E0B               	addlw	11
  7160  1E72  0086               	movwf	6
  7161  1E73  3001               	movlw	1	; select bank2/3
  7162  1E74  0087               	movwf	7
  7163  1E75  0861               	movf	??_setRF_DimmerValue,w
  7164  1E76  0081               	movwf	1
  7165                           
  7166                           ;RF_Control_B1.c: 440: Product->Data[(20+lights)]=Product->Data[9];
  7167  1E77  086F               	movf	_Product,w
  7168  1E78  3E09               	addlw	9
  7169  1E79  0086               	movwf	6
  7170  1E7A  3001               	movlw	1	; select bank2/3
  7171  1E7B  0087               	movwf	7
  7172  1E7C  0801               	movf	1,w
  7173  1E7D  00E1               	movwf	??_setRF_DimmerValue
  7174  1E7E  0863               	movf	setRF_DimmerValue@lights,w
  7175  1E7F  3E14               	addlw	20
  7176  1E80  076F               	addwf	_Product,w
  7177  1E81  00E2               	movwf	??_setRF_DimmerValue+1
  7178  1E82  0862               	movf	??_setRF_DimmerValue+1,w
  7179  1E83  0086               	movwf	6
  7180  1E84  3001               	movlw	1	; select bank2/3
  7181  1E85  0087               	movwf	7
  7182  1E86  0861               	movf	??_setRF_DimmerValue,w
  7183  1E87  0081               	movwf	1
  7184                           
  7185                           ;RF_Control_B1.c: 441: setDimmerLights_AdjRF(lights);
  7186  1E88  0863               	movf	setRF_DimmerValue@lights,w
  7187  1E89  319B  23F4         	fcall	_setDimmerLights_AdjRF
  7188  1E8B  0008               	return
  7189  1E8C                     __end_of_setRF_DimmerValue:	
  7190                           
  7191                           	psect	text25
  7192  1BF4                     __ptext25:	
  7193 ;; *************** function _setDimmerLights_AdjRF *****************
  7194 ;; Defined at:
  7195 ;;		line 414 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  lights          1    wreg     unsigned char 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  lights          1   64[BANK0 ] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;		None               void
  7202 ;; Registers used:
  7203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7213 ;;Total ram usage:        2 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    7
  7216 ;; This function calls:
  7217 ;;		_DimmerLightsPointSelect
  7218 ;;		_getPercentValue
  7219 ;; This function is called by:
  7220 ;;		_setRF_DimmerValue
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           
  7225                           ;psect for function _setDimmerLights_AdjRF
  7226  1BF4                     _setDimmerLights_AdjRF:	
  7227                           
  7228                           ;incstack = 0
  7229                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7230                           ;setDimmerLights_AdjRF@lights stored from wreg
  7231  1BF4  0020               	movlb	0	; select bank0
  7232  1BF5  00E0               	movwf	setDimmerLights_AdjRF@lights
  7233                           
  7234                           ;Dimmer_B1.c: 416: DimmerLightsPointSelect(lights);
  7235  1BF6  0860               	movf	setDimmerLights_AdjRF@lights,w
  7236  1BF7  31A7  27EA  319B   	fcall	_DimmerLightsPointSelect
  7237                           
  7238                           ;Dimmer_B1.c: 417: DimmerLights->AdjRF=1;
  7239  1BFA  0020               	movlb	0	; select bank0
  7240  1BFB  086C               	movf	_DimmerLights,w
  7241  1BFC  0086               	movwf	6
  7242  1BFD  3001               	movlw	1	; select bank2/3
  7243  1BFE  0087               	movwf	7
  7244  1BFF  1501               	bsf	1,2
  7245                           
  7246                           ;Dimmer_B1.c: 418: DimmerLights->Signal=1;
  7247  1C00  086C               	movf	_DimmerLights,w
  7248  1C01  0086               	movwf	6
  7249  1C02  3001               	movlw	1	; select bank2/3
  7250  1C03  0087               	movwf	7
  7251  1C04  1481               	bsf	1,1
  7252                           
  7253                           ;Dimmer_B1.c: 419: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  7254  1C05  086F               	movf	_Product,w
  7255  1C06  3E09               	addlw	9
  7256  1C07  0086               	movwf	6
  7257  1C08  3001               	movlw	1	; select bank2/3
  7258  1C09  0087               	movwf	7
  7259  1C0A  0801               	movf	1,w
  7260  1C0B  3192  22BB         	fcall	_getPercentValue
  7261  1C0D  0020               	movlb	0	; select bank0
  7262  1C0E  00DF               	movwf	??_setDimmerLights_AdjRF
  7263  1C0F  086C               	movf	_DimmerLights,w
  7264  1C10  3E05               	addlw	5
  7265  1C11  0086               	movwf	6
  7266  1C12  3001               	movlw	1	; select bank2/3
  7267  1C13  0087               	movwf	7
  7268  1C14  085F               	movf	??_setDimmerLights_AdjRF,w
  7269  1C15  0081               	movwf	1
  7270  1C16  0008               	return
  7271  1C17                     __end_of_setDimmerLights_AdjRF:	
  7272                           
  7273                           	psect	text26
  7274  12BB                     __ptext26:	
  7275 ;; *************** function _getPercentValue *****************
  7276 ;; Defined at:
  7277 ;;		line 481 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  value           1    wreg     unsigned char 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  value           1   59[BANK0 ] unsigned char 
  7282 ;;  i               3   60[BANK0 ] float 
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  1    wreg      unsigned char 
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0, pclath, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;Total ram usage:        6 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    6
  7299 ;; This function calls:
  7300 ;;		___awtoft
  7301 ;;		___ftadd
  7302 ;;		___ftdiv
  7303 ;;		___ftmul
  7304 ;;		___fttol
  7305 ;; This function is called by:
  7306 ;;		_setDimmerLights_AdjRF
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           
  7311                           ;psect for function _getPercentValue
  7312  12BB                     _getPercentValue:	
  7313                           
  7314                           ;incstack = 0
  7315                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7316                           ;getPercentValue@value stored from wreg
  7317  12BB  0020               	movlb	0	; select bank0
  7318  12BC  00DB               	movwf	getPercentValue@value
  7319                           
  7320                           ;Dimmer_B1.c: 490: float i=((char)(65*1.5))-((char)(20*1.5));
  7321  12BD  3000               	movlw	0
  7322  12BE  00DC               	movwf	getPercentValue@i
  7323  12BF  3086               	movlw	134
  7324  12C0  00DD               	movwf	getPercentValue@i+1
  7325  12C1  3042               	movlw	66
  7326  12C2  00DE               	movwf	getPercentValue@i+2
  7327                           
  7328                           ;Dimmer_B1.c: 491: i/=100;
  7329  12C3  3000               	movlw	0
  7330  12C4  00AE               	movwf	___ftdiv@f2
  7331  12C5  30C8               	movlw	200
  7332  12C6  00AF               	movwf	___ftdiv@f2+1
  7333  12C7  3042               	movlw	66
  7334  12C8  00B0               	movwf	___ftdiv@f2+2
  7335  12C9  085C               	movf	getPercentValue@i,w
  7336  12CA  00B1               	movwf	___ftdiv@f1
  7337  12CB  085D               	movf	getPercentValue@i+1,w
  7338  12CC  00B2               	movwf	___ftdiv@f1+1
  7339  12CD  085E               	movf	getPercentValue@i+2,w
  7340  12CE  00B3               	movwf	___ftdiv@f1+2
  7341  12CF  318C  2409  3192   	fcall	___ftdiv
  7342  12D2  0020               	movlb	0	; select bank0
  7343  12D3  082E               	movf	?___ftdiv,w
  7344  12D4  00DC               	movwf	getPercentValue@i
  7345  12D5  082F               	movf	?___ftdiv+1,w
  7346  12D6  00DD               	movwf	getPercentValue@i+1
  7347  12D7  0830               	movf	?___ftdiv+2,w
  7348  12D8  00DE               	movwf	getPercentValue@i+2
  7349                           
  7350                           ;Dimmer_B1.c: 492: return (char)(((100-value)*i)+((char)(65*1.5)));
  7351  12D9  085B               	movf	getPercentValue@value,w
  7352  12DA  00D9               	movwf	??_getPercentValue
  7353  12DB  01DA               	clrf	??_getPercentValue+1
  7354  12DC  09D9               	comf	??_getPercentValue,f
  7355  12DD  09DA               	comf	??_getPercentValue+1,f
  7356  12DE  0AD9               	incf	??_getPercentValue,f
  7357  12DF  1903               	skipnz
  7358  12E0  0ADA               	incf	??_getPercentValue+1,f
  7359  12E1  0859               	movf	??_getPercentValue,w
  7360  12E2  3E64               	addlw	100
  7361  12E3  00A8               	movwf	___awtoft@c
  7362  12E4  3000               	movlw	0
  7363  12E5  3D5A               	addwfc	??_getPercentValue+1,w
  7364  12E6  00A9               	movwf	___awtoft@c+1
  7365  12E7  319B  238E  3192   	fcall	___awtoft
  7366  12EA  0020               	movlb	0	; select bank0
  7367  12EB  0828               	movf	?___awtoft,w
  7368  12EC  00B1               	movwf	___ftmul@f2
  7369  12ED  0829               	movf	?___awtoft+1,w
  7370  12EE  00B2               	movwf	___ftmul@f2+1
  7371  12EF  082A               	movf	?___awtoft+2,w
  7372  12F0  00B3               	movwf	___ftmul@f2+2
  7373  12F1  085C               	movf	getPercentValue@i,w
  7374  12F2  00AE               	movwf	___ftmul@f1
  7375  12F3  085D               	movf	getPercentValue@i+1,w
  7376  12F4  00AF               	movwf	___ftmul@f1+1
  7377  12F5  085E               	movf	getPercentValue@i+2,w
  7378  12F6  00B0               	movwf	___ftmul@f1+2
  7379  12F7  318C  24B2  3192   	fcall	___ftmul
  7380  12FA  0020               	movlb	0	; select bank0
  7381  12FB  082E               	movf	?___ftmul,w
  7382  12FC  00C1               	movwf	___ftadd@f2
  7383  12FD  082F               	movf	?___ftmul+1,w
  7384  12FE  00C2               	movwf	___ftadd@f2+1
  7385  12FF  0830               	movf	?___ftmul+2,w
  7386  1300  00C3               	movwf	___ftadd@f2+2
  7387  1301  3000               	movlw	0
  7388  1302  00BE               	movwf	___ftadd@f1
  7389  1303  30C2               	movlw	194
  7390  1304  00BF               	movwf	___ftadd@f1+1
  7391  1305  3042               	movlw	66
  7392  1306  00C0               	movwf	___ftadd@f1+2
  7393  1307  3186  26F7  3192   	fcall	___ftadd
  7394  130A  0020               	movlb	0	; select bank0
  7395  130B  083E               	movf	?___ftadd,w
  7396  130C  00CB               	movwf	___fttol@f1
  7397  130D  083F               	movf	?___ftadd+1,w
  7398  130E  00CC               	movwf	___fttol@f1+1
  7399  130F  0840               	movf	?___ftadd+2,w
  7400  1310  00CD               	movwf	___fttol@f1+2
  7401  1311  3188  2091         	fcall	___fttol
  7402  1313  0020               	movlb	0	; select bank0
  7403  1314  084B               	movf	?___fttol,w
  7404  1315  0008               	return
  7405  1316                     __end_of_getPercentValue:	
  7406                           
  7407                           	psect	text27
  7408  0CB2                     __ptext27:	
  7409 ;; *************** function ___ftmul *****************
  7410 ;; Defined at:
  7411 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  f1              3   14[BANK0 ] float 
  7414 ;;  f2              3   17[BANK0 ] float 
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7417 ;;  sign            1   29[BANK0 ] unsigned char 
  7418 ;;  cntr            1   28[BANK0 ] unsigned char 
  7419 ;;  exp             1   24[BANK0 ] unsigned char 
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  3   14[BANK0 ] float 
  7422 ;; Registers used:
  7423 ;;		wreg, status,2, status,0, pclath, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7429 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;Total ram usage:       16 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    5
  7436 ;; This function calls:
  7437 ;;		___ftpack
  7438 ;; This function is called by:
  7439 ;;		_getPercentValue
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           
  7444                           ;psect for function ___ftmul
  7445  0CB2                     ___ftmul:	
  7446                           
  7447                           ;incstack = 0
  7448                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7449  0CB2  0020               	movlb	0	; select bank0
  7450  0CB3  082E               	movf	___ftmul@f1,w
  7451  0CB4  00B4               	movwf	??___ftmul
  7452  0CB5  082F               	movf	___ftmul@f1+1,w
  7453  0CB6  00B5               	movwf	??___ftmul+1
  7454  0CB7  0830               	movf	___ftmul@f1+2,w
  7455  0CB8  00B6               	movwf	??___ftmul+2
  7456  0CB9  1003               	clrc
  7457  0CBA  0D35               	rlf	??___ftmul+1,w
  7458  0CBB  0D36               	rlf	??___ftmul+2,w
  7459  0CBC  00B7               	movwf	??___ftmul+3
  7460  0CBD  0837               	movf	??___ftmul+3,w
  7461  0CBE  00B8               	movwf	___ftmul@exp
  7462  0CBF  08B8               	movf	___ftmul@exp,f
  7463  0CC0  1D03               	skipz
  7464  0CC1  2CC9               	goto	l5687
  7465  0CC2  3000               	movlw	0
  7466  0CC3  00AE               	movwf	?___ftmul
  7467  0CC4  3000               	movlw	0
  7468  0CC5  00AF               	movwf	?___ftmul+1
  7469  0CC6  3000               	movlw	0
  7470  0CC7  00B0               	movwf	?___ftmul+2
  7471  0CC8  0008               	return
  7472  0CC9                     l5687:	
  7473  0CC9  0831               	movf	___ftmul@f2,w
  7474  0CCA  00B4               	movwf	??___ftmul
  7475  0CCB  0832               	movf	___ftmul@f2+1,w
  7476  0CCC  00B5               	movwf	??___ftmul+1
  7477  0CCD  0833               	movf	___ftmul@f2+2,w
  7478  0CCE  00B6               	movwf	??___ftmul+2
  7479  0CCF  1003               	clrc
  7480  0CD0  0D35               	rlf	??___ftmul+1,w
  7481  0CD1  0D36               	rlf	??___ftmul+2,w
  7482  0CD2  00B7               	movwf	??___ftmul+3
  7483  0CD3  0837               	movf	??___ftmul+3,w
  7484  0CD4  00BD               	movwf	___ftmul@sign
  7485  0CD5  08BD               	movf	___ftmul@sign,f
  7486  0CD6  1D03               	skipz
  7487  0CD7  2CDF               	goto	l5693
  7488  0CD8  3000               	movlw	0
  7489  0CD9  00AE               	movwf	?___ftmul
  7490  0CDA  3000               	movlw	0
  7491  0CDB  00AF               	movwf	?___ftmul+1
  7492  0CDC  3000               	movlw	0
  7493  0CDD  00B0               	movwf	?___ftmul+2
  7494  0CDE  0008               	return
  7495  0CDF                     l5693:	
  7496  0CDF  083D               	movf	___ftmul@sign,w
  7497  0CE0  3E7B               	addlw	123
  7498  0CE1  00B4               	movwf	??___ftmul
  7499  0CE2  0834               	movf	??___ftmul,w
  7500  0CE3  07B8               	addwf	___ftmul@exp,f
  7501  0CE4  082E               	movf	___ftmul@f1,w
  7502  0CE5  00B4               	movwf	??___ftmul
  7503  0CE6  082F               	movf	___ftmul@f1+1,w
  7504  0CE7  00B5               	movwf	??___ftmul+1
  7505  0CE8  0830               	movf	___ftmul@f1+2,w
  7506  0CE9  00B6               	movwf	??___ftmul+2
  7507  0CEA  3010               	movlw	16
  7508  0CEB                     u3975:	
  7509  0CEB  36B6               	lsrf	??___ftmul+2,f
  7510  0CEC  0CB5               	rrf	??___ftmul+1,f
  7511  0CED  0CB4               	rrf	??___ftmul,f
  7512  0CEE  0B89               	decfsz	9,f
  7513  0CEF  2CEB               	goto	u3975
  7514  0CF0  0834               	movf	??___ftmul,w
  7515  0CF1  00B7               	movwf	??___ftmul+3
  7516  0CF2  0837               	movf	??___ftmul+3,w
  7517  0CF3  00BD               	movwf	___ftmul@sign
  7518  0CF4  0831               	movf	___ftmul@f2,w
  7519  0CF5  00B4               	movwf	??___ftmul
  7520  0CF6  0832               	movf	___ftmul@f2+1,w
  7521  0CF7  00B5               	movwf	??___ftmul+1
  7522  0CF8  0833               	movf	___ftmul@f2+2,w
  7523  0CF9  00B6               	movwf	??___ftmul+2
  7524  0CFA  3010               	movlw	16
  7525  0CFB                     u3985:	
  7526  0CFB  36B6               	lsrf	??___ftmul+2,f
  7527  0CFC  0CB5               	rrf	??___ftmul+1,f
  7528  0CFD  0CB4               	rrf	??___ftmul,f
  7529  0CFE  0B89               	decfsz	9,f
  7530  0CFF  2CFB               	goto	u3985
  7531  0D00  0834               	movf	??___ftmul,w
  7532  0D01  00B7               	movwf	??___ftmul+3
  7533  0D02  0837               	movf	??___ftmul+3,w
  7534  0D03  06BD               	xorwf	___ftmul@sign,f
  7535  0D04  3080               	movlw	128
  7536  0D05  00B4               	movwf	??___ftmul
  7537  0D06  0834               	movf	??___ftmul,w
  7538  0D07  05BD               	andwf	___ftmul@sign,f
  7539  0D08  17AF               	bsf	___ftmul@f1+1,7
  7540  0D09  17B2               	bsf	___ftmul@f2+1,7
  7541  0D0A  30FF               	movlw	255
  7542  0D0B  05B1               	andwf	___ftmul@f2,f
  7543  0D0C  30FF               	movlw	255
  7544  0D0D  05B2               	andwf	___ftmul@f2+1,f
  7545  0D0E  3000               	movlw	0
  7546  0D0F  05B3               	andwf	___ftmul@f2+2,f
  7547  0D10  3000               	movlw	0
  7548  0D11  00B9               	movwf	___ftmul@f3_as_product
  7549  0D12  3000               	movlw	0
  7550  0D13  00BA               	movwf	___ftmul@f3_as_product+1
  7551  0D14  3000               	movlw	0
  7552  0D15  00BB               	movwf	___ftmul@f3_as_product+2
  7553  0D16  3007               	movlw	7
  7554  0D17  00B4               	movwf	??___ftmul
  7555  0D18  0834               	movf	??___ftmul,w
  7556  0D19  00BC               	movwf	___ftmul@cntr
  7557  0D1A                     l5705:	
  7558  0D1A  1C2E               	btfss	___ftmul@f1,0
  7559  0D1B  2D22               	goto	l5709
  7560  0D1C  0831               	movf	___ftmul@f2,w
  7561  0D1D  07B9               	addwf	___ftmul@f3_as_product,f
  7562  0D1E  0832               	movf	___ftmul@f2+1,w
  7563  0D1F  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7564  0D20  0833               	movf	___ftmul@f2+2,w
  7565  0D21  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7566  0D22                     l5709:	
  7567  0D22  3001               	movlw	1
  7568  0D23                     u4005:	
  7569  0D23  36B0               	lsrf	___ftmul@f1+2,f
  7570  0D24  0CAF               	rrf	___ftmul@f1+1,f
  7571  0D25  0CAE               	rrf	___ftmul@f1,f
  7572  0D26  0B89               	decfsz	9,f
  7573  0D27  2D23               	goto	u4005
  7574  0D28  3001               	movlw	1
  7575  0D29                     u4015:	
  7576  0D29  35B1               	lslf	___ftmul@f2,f
  7577  0D2A  0DB2               	rlf	___ftmul@f2+1,f
  7578  0D2B  0DB3               	rlf	___ftmul@f2+2,f
  7579  0D2C  0B89               	decfsz	9,f
  7580  0D2D  2D29               	goto	u4015
  7581  0D2E  3001               	movlw	1
  7582  0D2F  02BC               	subwf	___ftmul@cntr,f
  7583  0D30  1D03               	btfss	3,2
  7584  0D31  2D1A               	goto	l5705
  7585  0D32  3009               	movlw	9
  7586  0D33  00B4               	movwf	??___ftmul
  7587  0D34  0834               	movf	??___ftmul,w
  7588  0D35  00BC               	movwf	___ftmul@cntr
  7589  0D36                     l5717:	
  7590  0D36  1C2E               	btfss	___ftmul@f1,0
  7591  0D37  2D3E               	goto	l5721
  7592  0D38  0831               	movf	___ftmul@f2,w
  7593  0D39  07B9               	addwf	___ftmul@f3_as_product,f
  7594  0D3A  0832               	movf	___ftmul@f2+1,w
  7595  0D3B  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7596  0D3C  0833               	movf	___ftmul@f2+2,w
  7597  0D3D  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7598  0D3E                     l5721:	
  7599  0D3E  3001               	movlw	1
  7600  0D3F                     u4045:	
  7601  0D3F  36B0               	lsrf	___ftmul@f1+2,f
  7602  0D40  0CAF               	rrf	___ftmul@f1+1,f
  7603  0D41  0CAE               	rrf	___ftmul@f1,f
  7604  0D42  0B89               	decfsz	9,f
  7605  0D43  2D3F               	goto	u4045
  7606  0D44  3001               	movlw	1
  7607  0D45                     u4055:	
  7608  0D45  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7609  0D46  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7610  0D47  0CB9               	rrf	___ftmul@f3_as_product,f
  7611  0D48  0B89               	decfsz	9,f
  7612  0D49  2D45               	goto	u4055
  7613  0D4A  3001               	movlw	1
  7614  0D4B  02BC               	subwf	___ftmul@cntr,f
  7615  0D4C  1D03               	btfss	3,2
  7616  0D4D  2D36               	goto	l5717
  7617  0D4E  0839               	movf	___ftmul@f3_as_product,w
  7618  0D4F  00A0               	movwf	___ftpack@arg
  7619  0D50  083A               	movf	___ftmul@f3_as_product+1,w
  7620  0D51  00A1               	movwf	___ftpack@arg+1
  7621  0D52  083B               	movf	___ftmul@f3_as_product+2,w
  7622  0D53  00A2               	movwf	___ftpack@arg+2
  7623  0D54  0838               	movf	___ftmul@exp,w
  7624  0D55  00B4               	movwf	??___ftmul
  7625  0D56  0834               	movf	??___ftmul,w
  7626  0D57  00A3               	movwf	___ftpack@exp
  7627  0D58  083D               	movf	___ftmul@sign,w
  7628  0D59  00B5               	movwf	??___ftmul+1
  7629  0D5A  0835               	movf	??___ftmul+1,w
  7630  0D5B  00A4               	movwf	___ftpack@sign
  7631  0D5C  3193  23D0         	fcall	___ftpack
  7632  0D5E  0020               	movlb	0	; select bank0
  7633  0D5F  0820               	movf	?___ftpack,w
  7634  0D60  00AE               	movwf	?___ftmul
  7635  0D61  0821               	movf	?___ftpack+1,w
  7636  0D62  00AF               	movwf	?___ftmul+1
  7637  0D63  0822               	movf	?___ftpack+2,w
  7638  0D64  00B0               	movwf	?___ftmul+2
  7639  0D65  0008               	return
  7640  0D66                     __end_of___ftmul:	
  7641                           
  7642                           	psect	text28
  7643  06F7                     __ptext28:	
  7644 ;; *************** function ___ftadd *****************
  7645 ;; Defined at:
  7646 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;  f1              3   30[BANK0 ] float 
  7649 ;;  f2              3   33[BANK0 ] float 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  exp1            1   42[BANK0 ] unsigned char 
  7652 ;;  exp2            1   41[BANK0 ] unsigned char 
  7653 ;;  sign            1   40[BANK0 ] unsigned char 
  7654 ;; Return value:  Size  Location     Type
  7655 ;;                  3   30[BANK0 ] float 
  7656 ;; Registers used:
  7657 ;;		wreg, status,2, status,0, pclath, cstack
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7663 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7666 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;Total ram usage:       13 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    5
  7670 ;; This function calls:
  7671 ;;		___ftpack
  7672 ;; This function is called by:
  7673 ;;		_getPercentValue
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           
  7678                           ;psect for function ___ftadd
  7679  06F7                     ___ftadd:	
  7680                           
  7681                           ;incstack = 0
  7682                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7683  06F7  0020               	movlb	0	; select bank0
  7684  06F8  083E               	movf	___ftadd@f1,w
  7685  06F9  00C4               	movwf	??___ftadd
  7686  06FA  083F               	movf	___ftadd@f1+1,w
  7687  06FB  00C5               	movwf	??___ftadd+1
  7688  06FC  0840               	movf	___ftadd@f1+2,w
  7689  06FD  00C6               	movwf	??___ftadd+2
  7690  06FE  1003               	clrc
  7691  06FF  0D45               	rlf	??___ftadd+1,w
  7692  0700  0D46               	rlf	??___ftadd+2,w
  7693  0701  00C7               	movwf	??___ftadd+3
  7694  0702  0847               	movf	??___ftadd+3,w
  7695  0703  00CA               	movwf	___ftadd@exp1
  7696  0704  0841               	movf	___ftadd@f2,w
  7697  0705  00C4               	movwf	??___ftadd
  7698  0706  0842               	movf	___ftadd@f2+1,w
  7699  0707  00C5               	movwf	??___ftadd+1
  7700  0708  0843               	movf	___ftadd@f2+2,w
  7701  0709  00C6               	movwf	??___ftadd+2
  7702  070A  1003               	clrc
  7703  070B  0D45               	rlf	??___ftadd+1,w
  7704  070C  0D46               	rlf	??___ftadd+2,w
  7705  070D  00C7               	movwf	??___ftadd+3
  7706  070E  0847               	movf	??___ftadd+3,w
  7707  070F  00C9               	movwf	___ftadd@exp2
  7708  0710  084A               	movf	___ftadd@exp1,w
  7709  0711  1903               	btfsc	3,2
  7710  0712  2F1F               	goto	l5575
  7711  0713  0849               	movf	___ftadd@exp2,w
  7712  0714  024A               	subwf	___ftadd@exp1,w
  7713  0715  1803               	skipnc
  7714  0716  2F26               	goto	l5579
  7715  0717  034A               	decf	___ftadd@exp1,w
  7716  0718  3AFF               	xorlw	255
  7717  0719  0749               	addwf	___ftadd@exp2,w
  7718  071A  00C4               	movwf	??___ftadd
  7719  071B  3019               	movlw	25
  7720  071C  0244               	subwf	??___ftadd,w
  7721  071D  1C03               	skipc
  7722  071E  2F26               	goto	l5579
  7723  071F                     l5575:	
  7724  071F  0841               	movf	___ftadd@f2,w
  7725  0720  00BE               	movwf	?___ftadd
  7726  0721  0842               	movf	___ftadd@f2+1,w
  7727  0722  00BF               	movwf	?___ftadd+1
  7728  0723  0843               	movf	___ftadd@f2+2,w
  7729  0724  00C0               	movwf	?___ftadd+2
  7730  0725  0008               	return
  7731  0726                     l5579:	
  7732  0726  0849               	movf	___ftadd@exp2,w
  7733  0727  1903               	btfsc	3,2
  7734  0728  0008               	return
  7735  0729  084A               	movf	___ftadd@exp1,w
  7736  072A  0249               	subwf	___ftadd@exp2,w
  7737  072B  1803               	skipnc
  7738  072C  2F35               	goto	l5585
  7739  072D  0349               	decf	___ftadd@exp2,w
  7740  072E  3AFF               	xorlw	255
  7741  072F  074A               	addwf	___ftadd@exp1,w
  7742  0730  00C4               	movwf	??___ftadd
  7743  0731  3019               	movlw	25
  7744  0732  0244               	subwf	??___ftadd,w
  7745  0733  1803               	btfsc	3,0
  7746  0734  0008               	return
  7747  0735                     l5585:	
  7748  0735  3006               	movlw	6
  7749  0736  00C4               	movwf	??___ftadd
  7750  0737  0844               	movf	??___ftadd,w
  7751  0738  00C8               	movwf	___ftadd@sign
  7752  0739  1BC0               	btfsc	___ftadd@f1+2,7
  7753  073A  17C8               	bsf	___ftadd@sign,7
  7754  073B  1BC3               	btfsc	___ftadd@f2+2,7
  7755  073C  1748               	bsf	___ftadd@sign,6
  7756  073D  17BF               	bsf	___ftadd@f1+1,7
  7757  073E  30FF               	movlw	255
  7758  073F  05BE               	andwf	___ftadd@f1,f
  7759  0740  30FF               	movlw	255
  7760  0741  05BF               	andwf	___ftadd@f1+1,f
  7761  0742  3000               	movlw	0
  7762  0743  05C0               	andwf	___ftadd@f1+2,f
  7763  0744  17C2               	bsf	___ftadd@f2+1,7
  7764  0745  30FF               	movlw	255
  7765  0746  05C1               	andwf	___ftadd@f2,f
  7766  0747  30FF               	movlw	255
  7767  0748  05C2               	andwf	___ftadd@f2+1,f
  7768  0749  3000               	movlw	0
  7769  074A  05C3               	andwf	___ftadd@f2+2,f
  7770  074B  0849               	movf	___ftadd@exp2,w
  7771  074C  024A               	subwf	___ftadd@exp1,w
  7772  074D  1803               	skipnc
  7773  074E  2F71               	goto	l5607
  7774  074F                     l5597:	
  7775  074F  3001               	movlw	1
  7776  0750                     u3735:	
  7777  0750  35C1               	lslf	___ftadd@f2,f
  7778  0751  0DC2               	rlf	___ftadd@f2+1,f
  7779  0752  0DC3               	rlf	___ftadd@f2+2,f
  7780  0753  0B89               	decfsz	9,f
  7781  0754  2F50               	goto	u3735
  7782  0755  3001               	movlw	1
  7783  0756  02C9               	subwf	___ftadd@exp2,f
  7784  0757  0849               	movf	___ftadd@exp2,w
  7785  0758  064A               	xorwf	___ftadd@exp1,w
  7786  0759  1903               	skipnz
  7787  075A  2F6C               	goto	l5605
  7788  075B  3001               	movlw	1
  7789  075C  02C8               	subwf	___ftadd@sign,f
  7790  075D  0848               	movf	___ftadd@sign,w
  7791  075E  3907               	andlw	7
  7792  075F  1903               	btfsc	3,2
  7793  0760  2F6C               	goto	l5605
  7794  0761  2F4F               	goto	l5597
  7795  0762                     l5603:	
  7796  0762  3001               	movlw	1
  7797  0763                     u3765:	
  7798  0763  36C0               	lsrf	___ftadd@f1+2,f
  7799  0764  0CBF               	rrf	___ftadd@f1+1,f
  7800  0765  0CBE               	rrf	___ftadd@f1,f
  7801  0766  0B89               	decfsz	9,f
  7802  0767  2F63               	goto	u3765
  7803  0768  3001               	movlw	1
  7804  0769  00C4               	movwf	??___ftadd
  7805  076A  0844               	movf	??___ftadd,w
  7806  076B  07CA               	addwf	___ftadd@exp1,f
  7807  076C                     l5605:	
  7808  076C  084A               	movf	___ftadd@exp1,w
  7809  076D  0649               	xorwf	___ftadd@exp2,w
  7810  076E  1903               	btfsc	3,2
  7811  076F  2F96               	goto	l3062
  7812  0770  2F62               	goto	l5603
  7813  0771                     l5607:	
  7814  0771  084A               	movf	___ftadd@exp1,w
  7815  0772  0249               	subwf	___ftadd@exp2,w
  7816  0773  1803               	skipnc
  7817  0774  2F96               	goto	l3062
  7818  0775                     l5609:	
  7819  0775  3001               	movlw	1
  7820  0776                     u3795:	
  7821  0776  35BE               	lslf	___ftadd@f1,f
  7822  0777  0DBF               	rlf	___ftadd@f1+1,f
  7823  0778  0DC0               	rlf	___ftadd@f1+2,f
  7824  0779  0B89               	decfsz	9,f
  7825  077A  2F76               	goto	u3795
  7826  077B  3001               	movlw	1
  7827  077C  02CA               	subwf	___ftadd@exp1,f
  7828  077D  0849               	movf	___ftadd@exp2,w
  7829  077E  064A               	xorwf	___ftadd@exp1,w
  7830  077F  1903               	skipnz
  7831  0780  2F92               	goto	l5617
  7832  0781  3001               	movlw	1
  7833  0782  02C8               	subwf	___ftadd@sign,f
  7834  0783  0848               	movf	___ftadd@sign,w
  7835  0784  3907               	andlw	7
  7836  0785  1903               	btfsc	3,2
  7837  0786  2F92               	goto	l5617
  7838  0787  2F75               	goto	l5609
  7839  0788                     l5615:	
  7840  0788  3001               	movlw	1
  7841  0789                     u3825:	
  7842  0789  36C3               	lsrf	___ftadd@f2+2,f
  7843  078A  0CC2               	rrf	___ftadd@f2+1,f
  7844  078B  0CC1               	rrf	___ftadd@f2,f
  7845  078C  0B89               	decfsz	9,f
  7846  078D  2F89               	goto	u3825
  7847  078E  3001               	movlw	1
  7848  078F  00C4               	movwf	??___ftadd
  7849  0790  0844               	movf	??___ftadd,w
  7850  0791  07C9               	addwf	___ftadd@exp2,f
  7851  0792                     l5617:	
  7852  0792  084A               	movf	___ftadd@exp1,w
  7853  0793  0649               	xorwf	___ftadd@exp2,w
  7854  0794  1D03               	skipz
  7855  0795  2F88               	goto	l5615
  7856  0796                     l3062:	
  7857  0796  1FC8               	btfss	___ftadd@sign,7
  7858  0797  2FA8               	goto	l5621
  7859  0798  30FF               	movlw	255
  7860  0799  06BE               	xorwf	___ftadd@f1,f
  7861  079A  30FF               	movlw	255
  7862  079B  06BF               	xorwf	___ftadd@f1+1,f
  7863  079C  30FF               	movlw	255
  7864  079D  06C0               	xorwf	___ftadd@f1+2,f
  7865  079E  3001               	movlw	1
  7866  079F  07BE               	addwf	___ftadd@f1,f
  7867  07A0  3000               	movlw	0
  7868  07A1  1803               	skipnc
  7869  07A2  3001               	movlw	1
  7870  07A3  07BF               	addwf	___ftadd@f1+1,f
  7871  07A4  3000               	movlw	0
  7872  07A5  1803               	skipnc
  7873  07A6  3001               	movlw	1
  7874  07A7  07C0               	addwf	___ftadd@f1+2,f
  7875  07A8                     l5621:	
  7876  07A8  1F48               	btfss	___ftadd@sign,6
  7877  07A9  2FBA               	goto	l5625
  7878  07AA  30FF               	movlw	255
  7879  07AB  06C1               	xorwf	___ftadd@f2,f
  7880  07AC  30FF               	movlw	255
  7881  07AD  06C2               	xorwf	___ftadd@f2+1,f
  7882  07AE  30FF               	movlw	255
  7883  07AF  06C3               	xorwf	___ftadd@f2+2,f
  7884  07B0  3001               	movlw	1
  7885  07B1  07C1               	addwf	___ftadd@f2,f
  7886  07B2  3000               	movlw	0
  7887  07B3  1803               	skipnc
  7888  07B4  3001               	movlw	1
  7889  07B5  07C2               	addwf	___ftadd@f2+1,f
  7890  07B6  3000               	movlw	0
  7891  07B7  1803               	skipnc
  7892  07B8  3001               	movlw	1
  7893  07B9  07C3               	addwf	___ftadd@f2+2,f
  7894  07BA                     l5625:	
  7895  07BA  01C8               	clrf	___ftadd@sign
  7896  07BB  083E               	movf	___ftadd@f1,w
  7897  07BC  07C1               	addwf	___ftadd@f2,f
  7898  07BD  083F               	movf	___ftadd@f1+1,w
  7899  07BE  3DC2               	addwfc	___ftadd@f2+1,f
  7900  07BF  0840               	movf	___ftadd@f1+2,w
  7901  07C0  3DC3               	addwfc	___ftadd@f2+2,f
  7902  07C1  1FC3               	btfss	___ftadd@f2+2,7
  7903  07C2  2FD5               	goto	l5635
  7904  07C3  30FF               	movlw	255
  7905  07C4  06C1               	xorwf	___ftadd@f2,f
  7906  07C5  30FF               	movlw	255
  7907  07C6  06C2               	xorwf	___ftadd@f2+1,f
  7908  07C7  30FF               	movlw	255
  7909  07C8  06C3               	xorwf	___ftadd@f2+2,f
  7910  07C9  3001               	movlw	1
  7911  07CA  07C1               	addwf	___ftadd@f2,f
  7912  07CB  3000               	movlw	0
  7913  07CC  1803               	skipnc
  7914  07CD  3001               	movlw	1
  7915  07CE  07C2               	addwf	___ftadd@f2+1,f
  7916  07CF  3000               	movlw	0
  7917  07D0  1803               	skipnc
  7918  07D1  3001               	movlw	1
  7919  07D2  07C3               	addwf	___ftadd@f2+2,f
  7920  07D3  01C8               	clrf	___ftadd@sign
  7921  07D4  0AC8               	incf	___ftadd@sign,f
  7922  07D5                     l5635:	
  7923  07D5  0841               	movf	___ftadd@f2,w
  7924  07D6  00A0               	movwf	___ftpack@arg
  7925  07D7  0842               	movf	___ftadd@f2+1,w
  7926  07D8  00A1               	movwf	___ftpack@arg+1
  7927  07D9  0843               	movf	___ftadd@f2+2,w
  7928  07DA  00A2               	movwf	___ftpack@arg+2
  7929  07DB  084A               	movf	___ftadd@exp1,w
  7930  07DC  00C4               	movwf	??___ftadd
  7931  07DD  0844               	movf	??___ftadd,w
  7932  07DE  00A3               	movwf	___ftpack@exp
  7933  07DF  0848               	movf	___ftadd@sign,w
  7934  07E0  00C5               	movwf	??___ftadd+1
  7935  07E1  0845               	movf	??___ftadd+1,w
  7936  07E2  00A4               	movwf	___ftpack@sign
  7937  07E3  3193  23D0         	fcall	___ftpack
  7938  07E5  0020               	movlb	0	; select bank0
  7939  07E6  0820               	movf	?___ftpack,w
  7940  07E7  00BE               	movwf	?___ftadd
  7941  07E8  0821               	movf	?___ftpack+1,w
  7942  07E9  00BF               	movwf	?___ftadd+1
  7943  07EA  0822               	movf	?___ftpack+2,w
  7944  07EB  00C0               	movwf	?___ftadd+2
  7945  07EC  0008               	return
  7946  07ED                     __end_of___ftadd:	
  7947                           
  7948                           	psect	text29
  7949  1C63                     __ptext29:	
  7950 ;; *************** function _RF_RxDisable *****************
  7951 ;; Defined at:
  7952 ;;		line 198 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;  rf              1    wreg     unsigned char 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  rf              1    4[BANK0 ] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;		None               void
  7959 ;; Registers used:
  7960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;Total ram usage:        1 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    6
  7973 ;; This function calls:
  7974 ;;		_CC2500_WriteCommand
  7975 ;;		_RfPointSelect
  7976 ;;		_setINT_GO
  7977 ;; This function is called by:
  7978 ;;		_setRF_Main
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           
  7983                           ;psect for function _RF_RxDisable
  7984  1C63                     _RF_RxDisable:	
  7985                           
  7986                           ;incstack = 0
  7987                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7988                           ;RF_RxDisable@rf stored from wreg
  7989  1C63  0020               	movlb	0	; select bank0
  7990  1C64  00A4               	movwf	RF_RxDisable@rf
  7991                           
  7992                           ;RF_Control_B1.c: 200: RfPointSelect(rf);
  7993  1C65  0824               	movf	RF_RxDisable@rf,w
  7994  1C66  3198  2070  319C   	fcall	_RfPointSelect
  7995                           
  7996                           ;RF_Control_B1.c: 202: if(RF->RxStatus)
  7997  1C69  087B               	movf	_RF,w
  7998  1C6A  0086               	movwf	6
  7999  1C6B  0187               	clrf	7
  8000  1C6C  1D81               	btfss	1,3
  8001  1C6D  0008               	return
  8002                           
  8003                           ;RF_Control_B1.c: 203: {
  8004                           ;RF_Control_B1.c: 204: RF->RxStatus=0;
  8005  1C6E  087B               	movf	_RF,w
  8006  1C6F  0086               	movwf	6
  8007  1C70  0187               	clrf	7
  8008  1C71  1181               	bcf	1,3
  8009                           
  8010                           ;RF_Control_B1.c: 205: RF->ReceiveGO=0;
  8011  1C72  087B               	movf	_RF,w
  8012  1C73  0086               	movwf	6
  8013  1C74  0187               	clrf	7
  8014  1C75  1081               	bcf	1,1
  8015                           
  8016                           ;RF_Control_B1.c: 206: RF->DebounceTime=0;
  8017  1C76  0A7B               	incf	_RF,w
  8018  1C77  0086               	movwf	6
  8019  1C78  0187               	clrf	7
  8020  1C79  0181               	clrf	1
  8021                           
  8022                           ;RF_Control_B1.c: 207: RF->Debounce=0;
  8023  1C7A  087B               	movf	_RF,w
  8024  1C7B  0086               	movwf	6
  8025  1C7C  0187               	clrf	7
  8026  1C7D  1281               	bcf	1,5
  8027                           
  8028                           ;RF_Control_B1.c: 208: CC2500_WriteCommand(0x36);
  8029  1C7E  3036               	movlw	54
  8030  1C7F  3199  2187  319C   	fcall	_CC2500_WriteCommand
  8031                           
  8032                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x3A);
  8033  1C82  303A               	movlw	58
  8034  1C83  3199  2187  319C   	fcall	_CC2500_WriteCommand
  8035                           
  8036                           ;RF_Control_B1.c: 210: setINT_GO(0);
  8037  1C86  3000               	movlw	0
  8038  1C87  31A7  27B8         	fcall	_setINT_GO
  8039  1C89  0008               	return
  8040  1C8A                     __end_of_RF_RxDisable:	
  8041                           
  8042                           	psect	text30
  8043  1044                     __ptext30:	
  8044 ;; *************** function _CC2500_TxData *****************
  8045 ;; Defined at:
  8046 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8051 ;; Return value:  Size  Location     Type
  8052 ;;		None               void
  8053 ;; Registers used:
  8054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;Total ram usage:        2 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    6
  8067 ;; This function calls:
  8068 ;;		_CC2500_WriteByte
  8069 ;;		_CC2500_WriteCommand
  8070 ;; This function is called by:
  8071 ;;		_setRF_Main
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           
  8076                           ;psect for function _CC2500_TxData
  8077  1044                     _CC2500_TxData:	
  8078                           
  8079                           ;CC2500_B1.c: 32: unsigned char loop_e;
  8080                           ;CC2500_B1.c: 34: RC4=0;
  8081                           
  8082                           ;incstack = 0
  8083                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8084  1044  0020               	movlb	0	; select bank0
  8085  1045  120E               	bcf	14,4	;volatile
  8086                           
  8087                           ;CC2500_B1.c: 35: SPI0Buffer=0x3F+0x40;
  8088  1046  307F               	movlw	127
  8089  1047  00A4               	movwf	??_CC2500_TxData
  8090  1048  0824               	movf	??_CC2500_TxData,w
  8091  1049  0021               	movlb	1	; select bank1
  8092  104A  00BF               	movwf	_SPI0Buffer^(0+128)
  8093  104B                     l279:	
  8094                           ;CC2500_B1.c: 36: while(RC2==1);
  8095                           
  8096  104B  0020               	movlb	0	; select bank0
  8097  104C  190E               	btfsc	14,2	;volatile
  8098  104D  284B               	goto	l279
  8099                           
  8100                           ;CC2500_B1.c: 37: CC2500_WriteByte();
  8101  104E  319A  225D  3190   	fcall	_CC2500_WriteByte
  8102                           
  8103                           ;CC2500_B1.c: 38: SPI0Buffer=Tx_Length;
  8104  1051  0021               	movlb	1	; select bank1
  8105  1052  0840               	movf	_Tx_Length^(0+128),w
  8106  1053  0020               	movlb	0	; select bank0
  8107  1054  00A4               	movwf	??_CC2500_TxData
  8108  1055  0824               	movf	??_CC2500_TxData,w
  8109  1056  0021               	movlb	1	; select bank1
  8110  1057  00BF               	movwf	_SPI0Buffer^(0+128)
  8111                           
  8112                           ;CC2500_B1.c: 39: CC2500_WriteByte();
  8113  1058  319A  225D  3190   	fcall	_CC2500_WriteByte
  8114                           
  8115                           ;CC2500_B1.c: 40: for(loop_e=0;loop_e<Tx_Length;loop_e++)
  8116  105B  0020               	movlb	0	; select bank0
  8117  105C  01A5               	clrf	CC2500_TxData@loop_e
  8118  105D                     l6345:	
  8119  105D  0021               	movlb	1	; select bank1
  8120  105E  0840               	movf	_Tx_Length^(0+128),w
  8121  105F  0020               	movlb	0	; select bank0
  8122  1060  0225               	subwf	CC2500_TxData@loop_e,w
  8123  1061  1803               	btfsc	3,0
  8124  1062  2875               	goto	l284
  8125                           
  8126                           ;CC2500_B1.c: 41: {
  8127                           ;CC2500_B1.c: 42: SPI0Buffer=RF_Data[loop_e];
  8128  1063  0825               	movf	CC2500_TxData@loop_e,w
  8129  1064  3EA0               	addlw	_RF_Data& (0+255)
  8130  1065  0086               	movwf	6
  8131  1066  0187               	clrf	7
  8132  1067  0801               	movf	1,w
  8133  1068  00A4               	movwf	??_CC2500_TxData
  8134  1069  0824               	movf	??_CC2500_TxData,w
  8135  106A  0021               	movlb	1	; select bank1
  8136  106B  00BF               	movwf	_SPI0Buffer^(0+128)
  8137                           
  8138                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8139  106C  319A  225D  3190   	fcall	_CC2500_WriteByte
  8140  106F  3001               	movlw	1
  8141  1070  0020               	movlb	0	; select bank0
  8142  1071  00A4               	movwf	??_CC2500_TxData
  8143  1072  0824               	movf	??_CC2500_TxData,w
  8144  1073  07A5               	addwf	CC2500_TxData@loop_e,f
  8145  1074  285D               	goto	l6345
  8146  1075                     l284:	
  8147                           
  8148                           ;CC2500_B1.c: 44: }
  8149                           ;CC2500_B1.c: 45: RC4=1;
  8150  1075  160E               	bsf	14,4	;volatile
  8151                           
  8152                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8153  1076  3035               	movlw	53
  8154  1077  3199  2187  3190   	fcall	_CC2500_WriteCommand
  8155  107A                     l285:	
  8156                           ;CC2500_B1.c: 47: while(RB0==0);
  8157                           
  8158  107A  0020               	movlb	0	; select bank0
  8159  107B  1C0D               	btfss	13,0	;volatile
  8160  107C  287A               	goto	l285
  8161  107D                     l288:	
  8162                           ;CC2500_B1.c: 48: while(RB0==1);
  8163                           
  8164  107D  180D               	btfsc	13,0	;volatile
  8165  107E  287D               	goto	l288
  8166                           
  8167                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8168  107F  3036               	movlw	54
  8169  1080  3199  2187  3190   	fcall	_CC2500_WriteCommand
  8170                           
  8171                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8172  1083  303B               	movlw	59
  8173  1084  3199  2187         	fcall	_CC2500_WriteCommand
  8174                           
  8175                           ;CC2500_B1.c: 51: Transceive_OK=1;
  8176  1086  16F0               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8177  1087  0008               	return
  8178  1088                     __end_of_CC2500_TxData:	
  8179                           
  8180                           	psect	text31
  8181  1493                     __ptext31:	
  8182 ;; *************** function _CC2500_RxData *****************
  8183 ;; Defined at:
  8184 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;		None               void
  8191 ;; Registers used:
  8192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;Total ram usage:        2 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    6
  8205 ;; This function calls:
  8206 ;;		_CC2500_ReadByte
  8207 ;;		_CC2500_ReadStatus
  8208 ;;		_CC2500_WriteByte
  8209 ;;		_CC2500_WriteCommand
  8210 ;;		_setRF_RxStatus
  8211 ;; This function is called by:
  8212 ;;		_setRF_Main
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           
  8217                           ;psect for function _CC2500_RxData
  8218  1493                     _CC2500_RxData:	
  8219                           
  8220                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8221                           ;CC2500_B1.c: 62: if(RB0 == 1)
  8222                           
  8223                           ;incstack = 0
  8224                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8225  1493  0020               	movlb	0	; select bank0
  8226  1494  180D               	btfsc	13,0	;volatile
  8227  1495                     l295:	
  8228                           ;CC2500_B1.c: 63: {
  8229                           ;CC2500_B1.c: 64: while(RB0 == 1);
  8230                           
  8231  1495  180D               	btfsc	13,0	;volatile
  8232  1496  2C95               	goto	l295
  8233                           
  8234                           ;CC2500_B1.c: 65: }
  8235                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8236  1497  303B               	movlw	59
  8237  1498  319A  22DB  3194   	fcall	_CC2500_ReadStatus
  8238                           
  8239                           ;CC2500_B1.c: 67: if(s_data != 0)
  8240  149B  0021               	movlb	1	; select bank1
  8241  149C  0843               	movf	_s_data^(0+128),w
  8242  149D  1903               	btfsc	3,2
  8243  149E  2CE9               	goto	l8179
  8244                           
  8245                           ;CC2500_B1.c: 69: {
  8246                           ;CC2500_B1.c: 70: RC4=0;
  8247  149F  0020               	movlb	0	; select bank0
  8248  14A0  120E               	bcf	14,4	;volatile
  8249                           
  8250                           ;CC2500_B1.c: 71: SPI0Buffer=0x3F+0xC0;
  8251  14A1  30FF               	movlw	255
  8252  14A2  00A4               	movwf	??_CC2500_RxData
  8253  14A3  0824               	movf	??_CC2500_RxData,w
  8254  14A4  0021               	movlb	1	; select bank1
  8255  14A5  00BF               	movwf	_SPI0Buffer^(0+128)
  8256  14A6                     l299:	
  8257                           ;CC2500_B1.c: 72: while(RC2==1);
  8258                           
  8259  14A6  0020               	movlb	0	; select bank0
  8260  14A7  190E               	btfsc	14,2	;volatile
  8261  14A8  2CA6               	goto	l299
  8262                           
  8263                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8264  14A9  319A  225D  3194   	fcall	_CC2500_WriteByte
  8265                           
  8266                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8267  14AC  319A  22F6  3194   	fcall	_CC2500_ReadByte
  8268                           
  8269                           ;CC2500_B1.c: 76: Rx_Length=SPI0Buffer;
  8270  14AF  0021               	movlb	1	; select bank1
  8271  14B0  083F               	movf	_SPI0Buffer^(0+128),w
  8272  14B1  0020               	movlb	0	; select bank0
  8273  14B2  00A4               	movwf	??_CC2500_RxData
  8274  14B3  0824               	movf	??_CC2500_RxData,w
  8275  14B4  0021               	movlb	1	; select bank1
  8276  14B5  00BE               	movwf	_Rx_Length^(0+128)
  8277                           
  8278                           ;CC2500_B1.c: 77: for(loop_f=0;loop_f<Rx_Length;loop_f++)
  8279  14B6  0020               	movlb	0	; select bank0
  8280  14B7  01A5               	clrf	CC2500_RxData@loop_f
  8281  14B8                     l8165:	
  8282  14B8  0021               	movlb	1	; select bank1
  8283  14B9  083E               	movf	_Rx_Length^(0+128),w
  8284  14BA  0020               	movlb	0	; select bank0
  8285  14BB  0225               	subwf	CC2500_RxData@loop_f,w
  8286  14BC  1803               	btfsc	3,0
  8287  14BD  2CD0               	goto	l8167
  8288                           
  8289                           ;CC2500_B1.c: 78: {
  8290                           ;CC2500_B1.c: 79: CC2500_ReadByte();
  8291  14BE  319A  22F6  3194   	fcall	_CC2500_ReadByte
  8292                           
  8293                           ;CC2500_B1.c: 80: RF_Data[loop_f]=SPI0Buffer;
  8294  14C1  0021               	movlb	1	; select bank1
  8295  14C2  083F               	movf	_SPI0Buffer^(0+128),w
  8296  14C3  0020               	movlb	0	; select bank0
  8297  14C4  00A4               	movwf	??_CC2500_RxData
  8298  14C5  0825               	movf	CC2500_RxData@loop_f,w
  8299  14C6  3EA0               	addlw	_RF_Data& (0+255)
  8300  14C7  0086               	movwf	6
  8301  14C8  0187               	clrf	7
  8302  14C9  0824               	movf	??_CC2500_RxData,w
  8303  14CA  0081               	movwf	1
  8304  14CB  3001               	movlw	1
  8305  14CC  00A4               	movwf	??_CC2500_RxData
  8306  14CD  0824               	movf	??_CC2500_RxData,w
  8307  14CE  07A5               	addwf	CC2500_RxData@loop_f,f
  8308  14CF  2CB8               	goto	l8165
  8309  14D0                     l8167:	
  8310                           
  8311                           ;CC2500_B1.c: 81: }
  8312                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  8313  14D0  319A  22F6  3194   	fcall	_CC2500_ReadByte
  8314                           
  8315                           ;CC2500_B1.c: 83: RSSI=SPI0Buffer;
  8316  14D3  0021               	movlb	1	; select bank1
  8317  14D4  083F               	movf	_SPI0Buffer^(0+128),w
  8318  14D5  0020               	movlb	0	; select bank0
  8319  14D6  00A4               	movwf	??_CC2500_RxData
  8320  14D7  0824               	movf	??_CC2500_RxData,w
  8321  14D8  0021               	movlb	1	; select bank1
  8322  14D9  00BD               	movwf	_RSSI^(0+128)
  8323                           
  8324                           ;CC2500_B1.c: 84: CC2500_ReadByte();
  8325  14DA  319A  22F6  3194   	fcall	_CC2500_ReadByte
  8326                           
  8327                           ;CC2500_B1.c: 85: CRC=SPI0Buffer;
  8328  14DD  0021               	movlb	1	; select bank1
  8329  14DE  083F               	movf	_SPI0Buffer^(0+128),w
  8330  14DF  0020               	movlb	0	; select bank0
  8331  14E0  00A4               	movwf	??_CC2500_RxData
  8332  14E1  0824               	movf	??_CC2500_RxData,w
  8333  14E2  0021               	movlb	1	; select bank1
  8334  14E3  00B7               	movwf	_CRC^(0+128)
  8335                           
  8336                           ;CC2500_B1.c: 86: RC4=1;
  8337  14E4  0020               	movlb	0	; select bank0
  8338  14E5  160E               	bsf	14,4	;volatile
  8339                           
  8340                           ;CC2500_B1.c: 87: if(CRC & 0x80)
  8341  14E6  0021               	movlb	1	; select bank1
  8342  14E7  1BB7               	btfsc	_CRC^(0+128),7
  8343                           
  8344                           ;CC2500_B1.c: 88: Receive_OK=1;
  8345  14E8  1570               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8346  14E9                     l8179:	
  8347                           
  8348                           ;CC2500_B1.c: 89: }
  8349                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x36);
  8350  14E9  3036               	movlw	54
  8351  14EA  3199  2187  3194   	fcall	_CC2500_WriteCommand
  8352                           
  8353                           ;CC2500_B1.c: 91: CC2500_WriteCommand(0x3A);
  8354  14ED  303A               	movlw	58
  8355  14EE  3199  2187  3194   	fcall	_CC2500_WriteCommand
  8356                           
  8357                           ;CC2500_B1.c: 92: setRF_RxStatus(1,0);
  8358  14F1  0020               	movlb	0	; select bank0
  8359  14F2  01A2               	clrf	setRF_RxStatus@command
  8360  14F3  3001               	movlw	1
  8361  14F4  3199  213E         	fcall	_setRF_RxStatus
  8362  14F6  0008               	return
  8363  14F7                     __end_of_CC2500_RxData:	
  8364                           
  8365                           	psect	text32
  8366  193E                     __ptext32:	
  8367 ;; *************** function _setRF_RxStatus *****************
  8368 ;; Defined at:
  8369 ;;		line 43 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;  rf              1    wreg     unsigned char 
  8372 ;;  command         1    2[BANK0 ] unsigned char 
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  rf              1    3[BANK0 ] unsigned char 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;		None               void
  8377 ;; Registers used:
  8378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8384 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;Total ram usage:        2 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    5
  8391 ;; This function calls:
  8392 ;;		_RfPointSelect
  8393 ;; This function is called by:
  8394 ;;		_CC2500_RxData
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           
  8399                           ;psect for function _setRF_RxStatus
  8400  193E                     _setRF_RxStatus:	
  8401                           
  8402                           ;incstack = 0
  8403                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8404                           ;setRF_RxStatus@rf stored from wreg
  8405  193E  0020               	movlb	0	; select bank0
  8406  193F  00A3               	movwf	setRF_RxStatus@rf
  8407                           
  8408                           ;RF_Control_B1.c: 45: RfPointSelect(rf);
  8409  1940  0823               	movf	setRF_RxStatus@rf,w
  8410  1941  3198  2070         	fcall	_RfPointSelect
  8411                           
  8412                           ;RF_Control_B1.c: 46: RF->RxStatus=command;
  8413  1943  087B               	movf	_RF,w
  8414  1944  0086               	movwf	6
  8415  1945  0187               	clrf	7
  8416  1946  0020               	movlb	0	; select bank0
  8417  1947  0822               	movf	setRF_RxStatus@command,w
  8418  1948  1181               	bcf	1,3
  8419  1949  1D03               	skipz
  8420  194A  1581               	bsf	1,3
  8421  194B  0008               	return
  8422  194C                     __end_of_setRF_RxStatus:	
  8423                           
  8424                           	psect	text33
  8425  1ADB                     __ptext33:	
  8426 ;; *************** function _CC2500_ReadStatus *****************
  8427 ;; Defined at:
  8428 ;;		line 267 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;  status_addr     1    wreg     unsigned char 
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;		None               void
  8435 ;; Registers used:
  8436 ;;		wreg, status,2, status,0, pclath, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;Total ram usage:        2 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    5
  8449 ;; This function calls:
  8450 ;;		_CC2500_ReadByte
  8451 ;;		_CC2500_WriteByte
  8452 ;; This function is called by:
  8453 ;;		_CC2500_RxData
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _CC2500_ReadStatus
  8459  1ADB                     _CC2500_ReadStatus:	
  8460                           
  8461                           ;incstack = 0
  8462                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8463                           ;CC2500_ReadStatus@status_addr stored from wreg
  8464  1ADB  0020               	movlb	0	; select bank0
  8465  1ADC  00A3               	movwf	CC2500_ReadStatus@status_addr
  8466                           
  8467                           ;CC2500_B1.c: 269: RC4=0;
  8468  1ADD  120E               	bcf	14,4	;volatile
  8469                           
  8470                           ;CC2500_B1.c: 270: SPI0Buffer=status_addr+0xC0;
  8471  1ADE  0823               	movf	CC2500_ReadStatus@status_addr,w
  8472  1ADF  3EC0               	addlw	192
  8473  1AE0  00A2               	movwf	??_CC2500_ReadStatus
  8474  1AE1  0822               	movf	??_CC2500_ReadStatus,w
  8475  1AE2  0021               	movlb	1	; select bank1
  8476  1AE3  00BF               	movwf	_SPI0Buffer^(0+128)
  8477  1AE4                     l375:	
  8478                           ;CC2500_B1.c: 272: while(RC2==1);
  8479                           
  8480  1AE4  0020               	movlb	0	; select bank0
  8481  1AE5  190E               	btfsc	14,2	;volatile
  8482  1AE6  2AE4               	goto	l375
  8483                           
  8484                           ;CC2500_B1.c: 274: CC2500_WriteByte();
  8485  1AE7  319A  225D  319A   	fcall	_CC2500_WriteByte
  8486                           
  8487                           ;CC2500_B1.c: 275: CC2500_ReadByte();
  8488  1AEA  319A  22F6         	fcall	_CC2500_ReadByte
  8489                           
  8490                           ;CC2500_B1.c: 276: RC4=1;
  8491  1AEC  0020               	movlb	0	; select bank0
  8492  1AED  160E               	bsf	14,4	;volatile
  8493                           
  8494                           ;CC2500_B1.c: 278: s_data=SPI0Buffer;
  8495  1AEE  0021               	movlb	1	; select bank1
  8496  1AEF  083F               	movf	_SPI0Buffer^(0+128),w
  8497  1AF0  0020               	movlb	0	; select bank0
  8498  1AF1  00A2               	movwf	??_CC2500_ReadStatus
  8499  1AF2  0822               	movf	??_CC2500_ReadStatus,w
  8500  1AF3  0021               	movlb	1	; select bank1
  8501  1AF4  00C3               	movwf	_s_data^(0+128)
  8502  1AF5  0008               	return
  8503  1AF6                     __end_of_CC2500_ReadStatus:	
  8504                           
  8505                           	psect	text34
  8506  1AF6                     __ptext34:	
  8507 ;; *************** function _CC2500_ReadByte *****************
  8508 ;; Defined at:
  8509 ;;		line 210 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;		None
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;		None               void
  8516 ;; Registers used:
  8517 ;;		wreg, status,2, status,0
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;Total ram usage:        2 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    4
  8530 ;; This function calls:
  8531 ;;		Nothing
  8532 ;; This function is called by:
  8533 ;;		_CC2500_RxData
  8534 ;;		_CC2500_ReadStatus
  8535 ;;		_CC2500_ReadREG
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           
  8540                           ;psect for function _CC2500_ReadByte
  8541  1AF6                     _CC2500_ReadByte:	
  8542                           
  8543                           ;CC2500_B1.c: 212: unsigned char loop_b;
  8544                           ;CC2500_B1.c: 213: for(loop_b=0;loop_b<8;loop_b++)
  8545                           
  8546                           ;incstack = 0
  8547                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8548  1AF6  0020               	movlb	0	; select bank0
  8549  1AF7  01A1               	clrf	CC2500_ReadByte@loop_b
  8550  1AF8                     L9:	
  8551  1AF8  3008               	movlw	8
  8552  1AF9  0221               	subwf	CC2500_ReadByte@loop_b,w
  8553  1AFA  1803               	btfsc	3,0
  8554  1AFB  0008               	return
  8555                           
  8556                           ;CC2500_B1.c: 214: {
  8557                           ;CC2500_B1.c: 215: RC1=1;
  8558  1AFC  148E               	bsf	14,1	;volatile
  8559                           
  8560                           ;CC2500_B1.c: 216: SPI0Buffer<<=1;
  8561  1AFD  1003               	clrc
  8562  1AFE  0021               	movlb	1	; select bank1
  8563  1AFF  0DBF               	rlf	_SPI0Buffer^(0+128),f
  8564                           
  8565                           ;CC2500_B1.c: 217: if(RC2 == 1)
  8566  1B00  0020               	movlb	0	; select bank0
  8567  1B01  1D0E               	btfss	14,2	;volatile
  8568  1B02  2B06               	goto	l6085
  8569                           
  8570                           ;CC2500_B1.c: 218: SPI0Buffer |= 0x01;
  8571  1B03  0021               	movlb	1	; select bank1
  8572  1B04  143F               	bsf	_SPI0Buffer^(0+128),0
  8573  1B05  2B0C               	goto	l6087
  8574  1B06                     l6085:	
  8575                           
  8576                           ;CC2500_B1.c: 219: else
  8577                           ;CC2500_B1.c: 220: SPI0Buffer &= 0xFE;
  8578  1B06  30FE               	movlw	254
  8579  1B07  0020               	movlb	0	; select bank0
  8580  1B08  00A0               	movwf	??_CC2500_ReadByte
  8581  1B09  0820               	movf	??_CC2500_ReadByte,w
  8582  1B0A  0021               	movlb	1	; select bank1
  8583  1B0B  05BF               	andwf	_SPI0Buffer^(0+128),f
  8584  1B0C                     l6087:	
  8585                           
  8586                           ;CC2500_B1.c: 221: RC1=0;
  8587  1B0C  0020               	movlb	0	; select bank0
  8588  1B0D  108E               	bcf	14,1	;volatile
  8589  1B0E  3001               	movlw	1
  8590  1B0F  00A0               	movwf	??_CC2500_ReadByte
  8591  1B10  0820               	movf	??_CC2500_ReadByte,w
  8592  1B11  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8593  1B12  2AF8               	goto	L9
  8594  1B13                     __end_of_CC2500_ReadByte:	
  8595                           
  8596                           	psect	text35
  8597  2769                     __ptext35:	
  8598 ;; *************** function _RF_Initialization *****************
  8599 ;; Defined at:
  8600 ;;		line 17 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;		None
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;		None
  8605 ;; Return value:  Size  Location     Type
  8606 ;;		None               void
  8607 ;; Registers used:
  8608 ;;		wreg, status,2, status,0, pclath, cstack
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;Total ram usage:        0 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    5
  8621 ;; This function calls:
  8622 ;;		_setRF_Initialization
  8623 ;; This function is called by:
  8624 ;;		_main
  8625 ;; This function uses a non-reentrant model
  8626 ;;
  8627                           
  8628                           
  8629                           ;psect for function _RF_Initialization
  8630  2769                     _RF_Initialization:	
  8631                           
  8632                           ;RF_Control_B1.c: 20: setRF_Initialization(1);
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8636  2769  3001               	movlw	1
  8637  276A  31A7  27A8         	fcall	_setRF_Initialization
  8638  276C  0008               	return
  8639  276D                     __end_of_RF_Initialization:	
  8640                           
  8641                           	psect	text36
  8642  27A8                     __ptext36:	
  8643 ;; *************** function _setRF_Initialization *****************
  8644 ;; Defined at:
  8645 ;;		line 50 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  rf              1    wreg     unsigned char 
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;  rf              1    0[COMMON] unsigned char 
  8650 ;; Return value:  Size  Location     Type
  8651 ;;		None               void
  8652 ;; Registers used:
  8653 ;;		wreg
  8654 ;; Tracked objects:
  8655 ;;		On entry : 0/0
  8656 ;;		On exit  : 0/0
  8657 ;;		Unchanged: 0/0
  8658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8662 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;Total ram usage:        1 bytes
  8664 ;; Hardware stack levels used:    1
  8665 ;; Hardware stack levels required when called:    4
  8666 ;; This function calls:
  8667 ;;		Nothing
  8668 ;; This function is called by:
  8669 ;;		_RF_Initialization
  8670 ;; This function uses a non-reentrant model
  8671 ;;
  8672                           
  8673                           
  8674                           ;psect for function _setRF_Initialization
  8675  27A8                     _setRF_Initialization:	
  8676                           
  8677                           ;RF_Control_B1.c: 54: Tx_Length=21;
  8678                           
  8679                           ;incstack = 0
  8680                           ; Regs used in _setRF_Initialization: [wreg]
  8681  27A8  3015               	movlw	21
  8682  27A9  0020               	movlb	0	; select bank0
  8683  27AA  00A0               	movwf	??_setRF_Initialization
  8684  27AB  0820               	movf	??_setRF_Initialization,w
  8685  27AC  0021               	movlb	1	; select bank1
  8686  27AD  00C0               	movwf	_Tx_Length^(0+128)
  8687  27AE  0008               	return
  8688  27AF                     __end_of_setRF_Initialization:	
  8689                           
  8690                           	psect	text37
  8691  2752                     __ptext37:	
  8692 ;; *************** function _PowerFault_Main *****************
  8693 ;; Defined at:
  8694 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;		None
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;		None
  8699 ;; Return value:  Size  Location     Type
  8700 ;;		None               void
  8701 ;; Registers used:
  8702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;Total ram usage:        0 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:   10
  8715 ;; This function calls:
  8716 ;;		_setPowerFault_Main
  8717 ;; This function is called by:
  8718 ;;		_main
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function _PowerFault_Main
  8724  2752                     _PowerFault_Main:	
  8725                           
  8726                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  8727                           
  8728                           ;incstack = 0
  8729                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8730  2752  318F  2713         	fcall	_setPowerFault_Main
  8731  2754  0008               	return
  8732  2755                     __end_of_PowerFault_Main:	
  8733                           
  8734                           	psect	text38
  8735  0F13                     __ptext38:	
  8736 ;; *************** function _setPowerFault_Main *****************
  8737 ;; Defined at:
  8738 ;;		line 61 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;		None
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;		None
  8743 ;; Return value:  Size  Location     Type
  8744 ;;		None               void
  8745 ;; Registers used:
  8746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;Total ram usage:        2 bytes
  8757 ;; Hardware stack levels used:    1
  8758 ;; Hardware stack levels required when called:    9
  8759 ;; This function calls:
  8760 ;;		_getLoad_Safe
  8761 ;;		_setPowerFault_Exceptions
  8762 ;; This function is called by:
  8763 ;;		_PowerFault_Main
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           
  8768                           ;psect for function _setPowerFault_Main
  8769  0F13                     _setPowerFault_Main:	
  8770                           
  8771                           ;PowerFault_B1.c: 63: if(PF->Enable)
  8772                           
  8773                           ;incstack = 0
  8774                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8775  0F13  087A               	movf	_PF,w
  8776  0F14  0086               	movwf	6
  8777  0F15  0187               	clrf	7
  8778  0F16  1C01               	btfss	1,0
  8779  0F17  0008               	return
  8780                           
  8781                           ;PowerFault_B1.c: 64: {
  8782                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  8783  0F18  087A               	movf	_PF,w
  8784  0F19  0086               	movwf	6
  8785  0F1A  0187               	clrf	7
  8786  0F1B  1981               	btfsc	1,3
  8787  0F1C  2F55               	goto	l8591
  8788                           
  8789                           ;PowerFault_B1.c: 66: {
  8790                           ;PowerFault_B1.c: 67: PF->Time++;
  8791  0F1D  087A               	movf	_PF,w
  8792  0F1E  3E06               	addlw	6
  8793  0F1F  0086               	movwf	6
  8794  0F20  0187               	clrf	7
  8795  0F21  3001               	movlw	1
  8796  0F22  0781               	addwf	1,f
  8797  0F23  3141               	addfsr 1,1
  8798  0F24  1803               	skipnc
  8799  0F25  0A81               	incf	1,f
  8800                           
  8801                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  8802  0F26  087A               	movf	_PF,w
  8803  0F27  3E06               	addlw	6
  8804  0F28  0086               	movwf	6
  8805  0F29  0187               	clrf	7
  8806  0F2A  3F40               	moviw [0]fsr1
  8807  0F2B  0020               	movlb	0	; select bank0
  8808  0F2C  00AD               	movwf	??_setPowerFault_Main
  8809  0F2D  3F41               	moviw [1]fsr1
  8810  0F2E  00AE               	movwf	??_setPowerFault_Main+1
  8811  0F2F  3002               	movlw	2
  8812  0F30  022E               	subwf	??_setPowerFault_Main+1,w
  8813  0F31  30BC               	movlw	188
  8814  0F32  1903               	skipnz
  8815  0F33  022D               	subwf	??_setPowerFault_Main,w
  8816  0F34  1C03               	skipc
  8817  0F35  0008               	return
  8818                           
  8819                           ;PowerFault_B1.c: 69: {
  8820                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && 1)
  8821  0F36  3198  2086  318F   	fcall	_getLoad_Safe
  8822  0F39  3A00               	xorlw	0
  8823  0F3A  1903               	skipnz
  8824  0F3B  2F4C               	goto	l8589
  8825                           
  8826                           ;PowerFault_B1.c: 71: {
  8827                           ;PowerFault_B1.c: 72: PF->Time=0;
  8828  0F3C  087A               	movf	_PF,w
  8829  0F3D  3E06               	addlw	6
  8830  0F3E  0086               	movwf	6
  8831  0F3F  0187               	clrf	7
  8832  0F40  3000               	movlw	0
  8833  0F41  3FC0               	movwi [0]fsr1
  8834  0F42  3FC1               	movwi [1]fsr1
  8835                           
  8836                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  8837  0F43  087A               	movf	_PF,w
  8838  0F44  0086               	movwf	6
  8839  0F45  0187               	clrf	7
  8840  0F46  1581               	bsf	1,3
  8841                           
  8842                           ;PowerFault_B1.c: 74: PF->Safe=0;
  8843  0F47  087A               	movf	_PF,w
  8844  0F48  0086               	movwf	6
  8845  0F49  0187               	clrf	7
  8846  0F4A  1101               	bcf	1,2
  8847                           
  8848                           ;PowerFault_B1.c: 75: }
  8849  0F4B  0008               	return
  8850  0F4C                     l8589:	
  8851                           
  8852                           ;PowerFault_B1.c: 76: else
  8853                           ;PowerFault_B1.c: 77: {
  8854                           ;PowerFault_B1.c: 78: PF->Time=700;
  8855  0F4C  087A               	movf	_PF,w
  8856  0F4D  3E06               	addlw	6
  8857  0F4E  0086               	movwf	6
  8858  0F4F  0187               	clrf	7
  8859  0F50  30BC               	movlw	188
  8860  0F51  3FC0               	movwi [0]fsr1
  8861  0F52  3002               	movlw	2
  8862  0F53  3FC1               	movwi [1]fsr1
  8863                           
  8864                           ;PowerFault_B1.c: 79: }
  8865                           ;PowerFault_B1.c: 80: }
  8866                           ;PowerFault_B1.c: 81: }
  8867  0F54  0008               	return
  8868  0F55                     l8591:	
  8869                           
  8870                           ;PowerFault_B1.c: 82: else
  8871                           ;PowerFault_B1.c: 83: {
  8872                           ;PowerFault_B1.c: 84: PF->Time++;
  8873  0F55  087A               	movf	_PF,w
  8874  0F56  3E06               	addlw	6
  8875  0F57  0086               	movwf	6
  8876  0F58  0187               	clrf	7
  8877  0F59  3001               	movlw	1
  8878  0F5A  0781               	addwf	1,f
  8879  0F5B  3141               	addfsr 1,1
  8880  0F5C  1803               	skipnc
  8881  0F5D  0A81               	incf	1,f
  8882                           
  8883                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  8884  0F5E  087A               	movf	_PF,w
  8885  0F5F  3E06               	addlw	6
  8886  0F60  0086               	movwf	6
  8887  0F61  0187               	clrf	7
  8888  0F62  3F40               	moviw [0]fsr1
  8889  0F63  0020               	movlb	0	; select bank0
  8890  0F64  00AD               	movwf	??_setPowerFault_Main
  8891  0F65  3F41               	moviw [1]fsr1
  8892  0F66  00AE               	movwf	??_setPowerFault_Main+1
  8893  0F67  3000               	movlw	0
  8894  0F68  022E               	subwf	??_setPowerFault_Main+1,w
  8895  0F69  3002               	movlw	2
  8896  0F6A  1903               	skipnz
  8897  0F6B  022D               	subwf	??_setPowerFault_Main,w
  8898  0F6C  1C03               	skipc
  8899  0F6D  0008               	return
  8900                           
  8901                           ;PowerFault_B1.c: 86: {
  8902                           ;PowerFault_B1.c: 87: PF->Time=0;
  8903  0F6E  087A               	movf	_PF,w
  8904  0F6F  3E06               	addlw	6
  8905  0F70  0086               	movwf	6
  8906  0F71  0187               	clrf	7
  8907  0F72  3000               	movlw	0
  8908  0F73  3FC0               	movwi [0]fsr1
  8909  0F74  3FC1               	movwi [1]fsr1
  8910                           
  8911                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  8912  0F75  087A               	movf	_PF,w
  8913  0F76  0086               	movwf	6
  8914  0F77  0187               	clrf	7
  8915  0F78  1181               	bcf	1,3
  8916                           
  8917                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  8918  0F79  087A               	movf	_PF,w
  8919  0F7A  0086               	movwf	6
  8920  0F7B  0187               	clrf	7
  8921  0F7C  1C81               	btfss	1,1
  8922  0F7D  2FB4               	goto	l8611
  8923                           
  8924                           ;PowerFault_B1.c: 91: {
  8925                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  8926  0F7E  0A7A               	incf	_PF,w
  8927  0F7F  0086               	movwf	6
  8928  0F80  0187               	clrf	7
  8929  0F81  3F40               	moviw [0]fsr1
  8930  0F82  00AD               	movwf	??_setPowerFault_Main
  8931  0F83  3F41               	moviw [1]fsr1
  8932  0F84  00AE               	movwf	??_setPowerFault_Main+1
  8933  0F85  3001               	movlw	1
  8934  0F86  022E               	subwf	??_setPowerFault_Main+1,w
  8935  0F87  3091               	movlw	145
  8936  0F88  1903               	skipnz
  8937  0F89  022D               	subwf	??_setPowerFault_Main,w
  8938  0F8A  1803               	skipnc
  8939  0F8B  2FEB               	goto	l8623
  8940  0F8C  0A7A               	incf	_PF,w
  8941  0F8D  0086               	movwf	6
  8942  0F8E  0187               	clrf	7
  8943  0F8F  3F40               	moviw [0]fsr1
  8944  0F90  00AD               	movwf	??_setPowerFault_Main
  8945  0F91  3F41               	moviw [1]fsr1
  8946  0F92  00AE               	movwf	??_setPowerFault_Main+1
  8947  0F93  3000               	movlw	0
  8948  0F94  022E               	subwf	??_setPowerFault_Main+1,w
  8949  0F95  30C8               	movlw	200
  8950  0F96  1903               	skipnz
  8951  0F97  022D               	subwf	??_setPowerFault_Main,w
  8952  0F98  1C03               	skipc
  8953  0F99  2FEB               	goto	l8623
  8954                           
  8955                           ;PowerFault_B1.c: 93: {
  8956                           ;PowerFault_B1.c: 94: PF->Count++;
  8957  0F9A  3001               	movlw	1
  8958  0F9B  00AD               	movwf	??_setPowerFault_Main
  8959  0F9C  087A               	movf	_PF,w
  8960  0F9D  3E05               	addlw	5
  8961  0F9E  0086               	movwf	6
  8962  0F9F  0187               	clrf	7
  8963  0FA0  082D               	movf	??_setPowerFault_Main,w
  8964  0FA1  0781               	addwf	1,f
  8965                           
  8966                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  8967  0FA2  087A               	movf	_PF,w
  8968  0FA3  3E05               	addlw	5
  8969  0FA4  0086               	movwf	6
  8970  0FA5  0187               	clrf	7
  8971  0FA6  3002               	movlw	2
  8972  0FA7  0201               	subwf	1,w
  8973  0FA8  1C03               	skipc
  8974  0FA9  2FF0               	goto	l8625
  8975                           
  8976                           ;PowerFault_B1.c: 96: {
  8977                           ;PowerFault_B1.c: 97: PF->Count=0;
  8978  0FAA  087A               	movf	_PF,w
  8979  0FAB  3E05               	addlw	5
  8980  0FAC  0086               	movwf	6
  8981  0FAD  0187               	clrf	7
  8982  0FAE  0181               	clrf	1
  8983                           
  8984                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  8985  0FAF  3000               	movlw	0
  8986  0FB0  319E  26FE  318F   	fcall	_setPowerFault_Exceptions
  8987                           
  8988                           ;PowerFault_B1.c: 99: }
  8989                           ;PowerFault_B1.c: 100: }
  8990  0FB3  2FF0               	goto	l8625
  8991  0FB4                     l8611:	
  8992                           ;PowerFault_B1.c: 104: }
  8993                           ;PowerFault_B1.c: 105: }
  8994                           
  8995                           ;PowerFault_B1.c: 101: else
  8996                           ;PowerFault_B1.c: 102: {
  8997                           ;PowerFault_B1.c: 103: PF->Count=0;
  8998                           
  8999                           
  9000                           ;PowerFault_B1.c: 106: else
  9001                           ;PowerFault_B1.c: 107: {
  9002                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
  9003  0FB4  0A7A               	incf	_PF,w
  9004  0FB5  0086               	movwf	6
  9005  0FB6  0187               	clrf	7
  9006  0FB7  3F40               	moviw [0]fsr1
  9007  0FB8  0020               	movlb	0	; select bank0
  9008  0FB9  00AD               	movwf	??_setPowerFault_Main
  9009  0FBA  3F41               	moviw [1]fsr1
  9010  0FBB  00AE               	movwf	??_setPowerFault_Main+1
  9011  0FBC  3001               	movlw	1
  9012  0FBD  022E               	subwf	??_setPowerFault_Main+1,w
  9013  0FBE  3090               	movlw	144
  9014  0FBF  1903               	skipnz
  9015  0FC0  022D               	subwf	??_setPowerFault_Main,w
  9016  0FC1  1803               	skipnc
  9017  0FC2  2FD1               	goto	l8615
  9018  0FC3  0A7A               	incf	_PF,w
  9019  0FC4  0086               	movwf	6
  9020  0FC5  0187               	clrf	7
  9021  0FC6  3F40               	moviw [0]fsr1
  9022  0FC7  00AD               	movwf	??_setPowerFault_Main
  9023  0FC8  3F41               	moviw [1]fsr1
  9024  0FC9  00AE               	movwf	??_setPowerFault_Main+1
  9025  0FCA  3000               	movlw	0
  9026  0FCB  022E               	subwf	??_setPowerFault_Main+1,w
  9027  0FCC  30D3               	movlw	211
  9028  0FCD  1903               	skipnz
  9029  0FCE  022D               	subwf	??_setPowerFault_Main,w
  9030  0FCF  1803               	skipnc
  9031  0FD0  2FEB               	goto	l8623
  9032  0FD1                     l8615:	
  9033                           
  9034                           ;PowerFault_B1.c: 109: {
  9035                           ;PowerFault_B1.c: 110: PF->Count++;
  9036  0FD1  3001               	movlw	1
  9037  0FD2  00AD               	movwf	??_setPowerFault_Main
  9038  0FD3  087A               	movf	_PF,w
  9039  0FD4  3E05               	addlw	5
  9040  0FD5  0086               	movwf	6
  9041  0FD6  0187               	clrf	7
  9042  0FD7  082D               	movf	??_setPowerFault_Main,w
  9043  0FD8  0781               	addwf	1,f
  9044                           
  9045                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
  9046  0FD9  087A               	movf	_PF,w
  9047  0FDA  3E05               	addlw	5
  9048  0FDB  0086               	movwf	6
  9049  0FDC  0187               	clrf	7
  9050  0FDD  3002               	movlw	2
  9051  0FDE  0201               	subwf	1,w
  9052  0FDF  1C03               	skipc
  9053  0FE0  2FF0               	goto	l8625
  9054                           
  9055                           ;PowerFault_B1.c: 112: {
  9056                           ;PowerFault_B1.c: 113: PF->Count=0;
  9057  0FE1  087A               	movf	_PF,w
  9058  0FE2  3E05               	addlw	5
  9059  0FE3  0086               	movwf	6
  9060  0FE4  0187               	clrf	7
  9061  0FE5  0181               	clrf	1
  9062                           
  9063                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
  9064  0FE6  3001               	movlw	1
  9065  0FE7  319E  26FE  318F   	fcall	_setPowerFault_Exceptions
  9066                           
  9067                           ;PowerFault_B1.c: 115: }
  9068                           ;PowerFault_B1.c: 116: }
  9069  0FEA  2FF0               	goto	l8625
  9070  0FEB                     l8623:	
  9071                           
  9072                           ;PowerFault_B1.c: 117: else
  9073                           ;PowerFault_B1.c: 118: {
  9074                           ;PowerFault_B1.c: 119: PF->Count=0;
  9075  0FEB  087A               	movf	_PF,w
  9076  0FEC  3E05               	addlw	5
  9077  0FED  0086               	movwf	6
  9078  0FEE  0187               	clrf	7
  9079  0FEF  0181               	clrf	1
  9080  0FF0                     l8625:	
  9081                           
  9082                           ;PowerFault_B1.c: 120: }
  9083                           ;PowerFault_B1.c: 122: }
  9084                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
  9085  0FF0  087A               	movf	_PF,w
  9086  0FF1  0086               	movwf	6
  9087  0FF2  0187               	clrf	7
  9088  0FF3  1881               	btfsc	1,1
  9089  0FF4  2FF9               	goto	l2167
  9090                           
  9091                           ;PowerFault_B1.c: 124: {
  9092                           ;PowerFault_B1.c: 125: PF->Safe=1;
  9093  0FF5  087A               	movf	_PF,w
  9094  0FF6  0086               	movwf	6
  9095  0FF7  0187               	clrf	7
  9096  0FF8  1501               	bsf	1,2
  9097  0FF9                     l2167:	
  9098                           
  9099                           ;PowerFault_B1.c: 126: }
  9100                           ;PowerFault_B1.c: 127: PF->AD=0;
  9101  0FF9  0A7A               	incf	_PF,w
  9102  0FFA  0086               	movwf	6
  9103  0FFB  0187               	clrf	7
  9104  0FFC  3000               	movlw	0
  9105  0FFD  3FC0               	movwi [0]fsr1
  9106  0FFE  3FC1               	movwi [1]fsr1
  9107  0FFF  0008               	return
  9108  1000                     __end_of_setPowerFault_Main:	
  9109                           
  9110                           	psect	text39
  9111  1EFE                     __ptext39:	
  9112 ;; *************** function _setPowerFault_Exceptions *****************
  9113 ;; Defined at:
  9114 ;;		line 133 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;  command         1    wreg     unsigned char 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  command         1   12[BANK0 ] unsigned char 
  9119 ;; Return value:  Size  Location     Type
  9120 ;;		None               void
  9121 ;; Registers used:
  9122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;Total ram usage:        2 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:    8
  9135 ;; This function calls:
  9136 ;;		_DimmerLights_Exceptions
  9137 ;;		_setLED
  9138 ;;		_setRF_Enable
  9139 ;;		_setSw_Enable
  9140 ;; This function is called by:
  9141 ;;		_setPowerFault_Main
  9142 ;; This function uses a non-reentrant model
  9143 ;;
  9144                           
  9145                           
  9146                           ;psect for function _setPowerFault_Exceptions
  9147  1EFE                     _setPowerFault_Exceptions:	
  9148                           
  9149                           ;incstack = 0
  9150                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9151                           ;setPowerFault_Exceptions@command stored from wreg
  9152  1EFE  0020               	movlb	0	; select bank0
  9153  1EFF  00AC               	movwf	setPowerFault_Exceptions@command
  9154                           
  9155                           ;PowerFault_B1.c: 135: PF->ERROR=command;
  9156  1F00  087A               	movf	_PF,w
  9157  1F01  0086               	movwf	6
  9158  1F02  0187               	clrf	7
  9159  1F03  082C               	movf	setPowerFault_Exceptions@command,w
  9160  1F04  1081               	bcf	1,1
  9161  1F05  1D03               	skipz
  9162  1F06  1481               	bsf	1,1
  9163                           
  9164                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
  9165  1F07  092C               	comf	setPowerFault_Exceptions@command,w
  9166  1F08  3901               	andlw	1
  9167  1F09  00AB               	movwf	??_setPowerFault_Exceptions
  9168  1F0A  087A               	movf	_PF,w
  9169  1F0B  0086               	movwf	6
  9170  1F0C  0187               	clrf	7
  9171  1F0D  0DAB               	rlf	??_setPowerFault_Exceptions,f
  9172  1F0E  0DAB               	rlf	??_setPowerFault_Exceptions,f
  9173  1F0F  0801               	movf	1,w
  9174  1F10  062B               	xorwf	??_setPowerFault_Exceptions,w
  9175  1F11  39FB               	andlw	-5
  9176  1F12  062B               	xorwf	??_setPowerFault_Exceptions,w
  9177  1F13  0081               	movwf	1
  9178                           
  9179                           ;PowerFault_B1.c: 137: if(command == 1)
  9180  1F14  082C               	movf	setPowerFault_Exceptions@command,w
  9181  1F15  3A01               	xorlw	1
  9182  1F16  1D03               	skipz
  9183  1F17  2F23               	goto	l2171
  9184                           
  9185                           ;PowerFault_B1.c: 138: {
  9186                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
  9187  1F18  3003               	movlw	3
  9188  1F19  3192  2261  319E   	fcall	_DimmerLights_Exceptions
  9189                           
  9190                           ;PowerFault_B1.c: 141: setLED(2,1);
  9191  1F1C  0020               	movlb	0	; select bank0
  9192  1F1D  01A2               	clrf	setLED@command
  9193  1F1E  0AA2               	incf	setLED@command,f
  9194  1F1F  3002               	movlw	2
  9195  1F20  3193  2372  319E   	fcall	_setLED
  9196  1F23                     l2171:	
  9197                           
  9198                           ;PowerFault_B1.c: 143: }
  9199                           ;PowerFault_B1.c: 144: setLED(99,command+10);
  9200  1F23  0020               	movlb	0	; select bank0
  9201  1F24  082C               	movf	setPowerFault_Exceptions@command,w
  9202  1F25  3E0A               	addlw	10
  9203  1F26  00AB               	movwf	??_setPowerFault_Exceptions
  9204  1F27  082B               	movf	??_setPowerFault_Exceptions,w
  9205  1F28  00A2               	movwf	setLED@command
  9206  1F29  3063               	movlw	99
  9207  1F2A  3193  2372  319E   	fcall	_setLED
  9208                           
  9209                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
  9210  1F2D  0020               	movlb	0	; select bank0
  9211  1F2E  092C               	comf	setPowerFault_Exceptions@command,w
  9212  1F2F  3901               	andlw	1
  9213  1F30  3199  2178  319E   	fcall	_setSw_Enable
  9214                           
  9215                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
  9216  1F33  0020               	movlb	0	; select bank0
  9217  1F34  092C               	comf	setPowerFault_Exceptions@command,w
  9218  1F35  3901               	andlw	1
  9219  1F36  00AB               	movwf	??_setPowerFault_Exceptions
  9220  1F37  082B               	movf	??_setPowerFault_Exceptions,w
  9221  1F38  00A2               	movwf	setRF_Enable@command
  9222  1F39  3001               	movlw	1
  9223  1F3A  319C  24B4         	fcall	_setRF_Enable
  9224  1F3C  0008               	return
  9225  1F3D                     __end_of_setPowerFault_Exceptions:	
  9226                           
  9227                           	psect	text40
  9228  1886                     __ptext40:	
  9229 ;; *************** function _getLoad_Safe *****************
  9230 ;; Defined at:
  9231 ;;		line 301 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;		None
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  1    wreg      unsigned char 
  9238 ;; Registers used:
  9239 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;Total ram usage:        1 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    4
  9252 ;; This function calls:
  9253 ;;		Nothing
  9254 ;; This function is called by:
  9255 ;;		_setPowerFault_Main
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           
  9260                           ;psect for function _getLoad_Safe
  9261  1886                     _getLoad_Safe:	
  9262                           
  9263                           ;OverLoad_B1.c: 303: return Load->Safe;
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
  9267  1886  0020               	movlb	0	; select bank0
  9268  1887  086E               	movf	_Load,w
  9269  1888  0086               	movwf	6
  9270  1889  3002               	movlw	2	; select bank4/5
  9271  188A  0087               	movwf	7
  9272  188B  0C01               	rrf	1,w
  9273  188C  00A0               	movwf	??_getLoad_Safe
  9274  188D  0CA0               	rrf	??_getLoad_Safe,f
  9275  188E  0C20               	rrf	??_getLoad_Safe,w
  9276  188F  3901               	andlw	1
  9277  1890  0008               	return
  9278  1891                     __end_of_getLoad_Safe:	
  9279                           
  9280                           	psect	text41
  9281  274F                     __ptext41:	
  9282 ;; *************** function _PowerFault_Initialization *****************
  9283 ;; Defined at:
  9284 ;;		line 15 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;		None               void
  9291 ;; Registers used:
  9292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;Total ram usage:        0 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:    5
  9305 ;; This function calls:
  9306 ;;		_setPowerFault_Initialization
  9307 ;; This function is called by:
  9308 ;;		_main
  9309 ;; This function uses a non-reentrant model
  9310 ;;
  9311                           
  9312                           
  9313                           ;psect for function _PowerFault_Initialization
  9314  274F                     _PowerFault_Initialization:	
  9315                           
  9316                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
  9317                           
  9318                           ;incstack = 0
  9319                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9320  274F  3199  2130         	fcall	_setPowerFault_Initialization
  9321  2751  0008               	return
  9322  2752                     __end_of_PowerFault_Initialization:	
  9323                           
  9324                           	psect	text42
  9325  1930                     __ptext42:	
  9326 ;; *************** function _setPowerFault_Initialization *****************
  9327 ;; Defined at:
  9328 ;;		line 29 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;		None
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;		None
  9333 ;; Return value:  Size  Location     Type
  9334 ;;		None               void
  9335 ;; Registers used:
  9336 ;;		wreg, fsr1l, fsr1h
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;Total ram usage:        1 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    4
  9349 ;; This function calls:
  9350 ;;		Nothing
  9351 ;; This function is called by:
  9352 ;;		_PowerFault_Initialization
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function _setPowerFault_Initialization
  9358  1930                     _setPowerFault_Initialization:	
  9359                           
  9360                           ;PowerFault_B1.c: 31: PF=&PF1;
  9361                           
  9362                           ;incstack = 0
  9363                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
  9364  1930  30C4               	movlw	_PF1& (0+255)
  9365  1931  0020               	movlb	0	; select bank0
  9366  1932  00A0               	movwf	??_setPowerFault_Initialization
  9367  1933  0820               	movf	??_setPowerFault_Initialization,w
  9368  1934  00FA               	movwf	_PF
  9369                           
  9370                           ;PowerFault_B1.c: 32: PF->Enable=1;
  9371  1935  087A               	movf	_PF,w
  9372  1936  0086               	movwf	6
  9373  1937  0187               	clrf	7
  9374  1938  1401               	bsf	1,0
  9375                           
  9376                           ;PowerFault_B1.c: 33: PF->Safe=1;
  9377  1939  087A               	movf	_PF,w
  9378  193A  0086               	movwf	6
  9379  193B  0187               	clrf	7
  9380  193C  1501               	bsf	1,2
  9381  193D  0008               	return
  9382  193E                     __end_of_setPowerFault_Initialization:	
  9383                           
  9384                           	psect	text43
  9385  0801                     __ptext43:	
  9386 ;; *************** function _Mcu_Initialization *****************
  9387 ;; Defined at:
  9388 ;;		line 11 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;		None
  9391 ;; Auto vars:     Size  Location     Type
  9392 ;;		None
  9393 ;; Return value:  Size  Location     Type
  9394 ;;		None               void
  9395 ;; Registers used:
  9396 ;;		wreg, status,2, status,0, pclath, cstack
  9397 ;; Tracked objects:
  9398 ;;		On entry : 0/0
  9399 ;;		On exit  : 0/0
  9400 ;;		Unchanged: 0/0
  9401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;Total ram usage:        1 bytes
  9407 ;; Hardware stack levels used:    1
  9408 ;; Hardware stack levels required when called:    5
  9409 ;; This function calls:
  9410 ;;		_ADC_Set
  9411 ;;		_INT_Set
  9412 ;;		_IOC_Set
  9413 ;;		_IO_Set
  9414 ;;		_TMR0_Set
  9415 ;; This function is called by:
  9416 ;;		_main
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function _Mcu_Initialization
  9422  0801                     _Mcu_Initialization:	
  9423                           
  9424                           ;MCU_16f1518_B1.c: 14: OSCCON=0x78; ;;
  9425                           
  9426                           ;incstack = 0
  9427                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9428  0801  3078               	movlw	120
  9429  0802  0021               	movlb	1	; select bank1
  9430  0803  0099               	movwf	25	;volatile
  9431                           
  9432                           ;MCU_16f1518_B1.c: 16: IO_Set();
  9433  0804  319A  22A8  3188   	fcall	_IO_Set
  9434                           
  9435                           ;MCU_16f1518_B1.c: 18: TMR0_Set();
  9436  0807  3199  2123  3188   	fcall	_TMR0_Set
  9437                           
  9438                           ;MCU_16f1518_B1.c: 20: ;;
  9439                           ;MCU_16f1518_B1.c: 22: ADC_Set();
  9440  080A  31A7  27A1  3188   	fcall	_ADC_Set
  9441                           
  9442                           ;MCU_16f1518_B1.c: 26: INT_Set();
  9443  080D  31A7  277A  3188   	fcall	_INT_Set
  9444                           
  9445                           ;MCU_16f1518_B1.c: 28: IOC_Set();
  9446  0810  3199  2116         	fcall	_IOC_Set
  9447                           
  9448                           ;MCU_16f1518_B1.c: 30: ;;
  9449                           ;MCU_16f1518_B1.c: 32: ;;
  9450                           ;MCU_16f1518_B1.c: 34: Memory=&VarMemory;
  9451  0812  30A0               	movlw	_VarMemory& (0+255)
  9452  0813  0020               	movlb	0	; select bank0
  9453  0814  00A1               	movwf	??_Mcu_Initialization
  9454  0815  0821               	movf	??_Mcu_Initialization,w
  9455  0816  00FC               	movwf	_Memory
  9456  0817  0008               	return
  9457  0818                     __end_of_Mcu_Initialization:	
  9458                           
  9459                           	psect	text44
  9460  1923                     __ptext44:	
  9461 ;; *************** function _TMR0_Set *****************
  9462 ;; Defined at:
  9463 ;;		line 73 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;		None
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;		None
  9468 ;; Return value:  Size  Location     Type
  9469 ;;		None               void
  9470 ;; Registers used:
  9471 ;;		wreg, status,2
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;Total ram usage:        1 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:    4
  9484 ;; This function calls:
  9485 ;;		Nothing
  9486 ;; This function is called by:
  9487 ;;		_Mcu_Initialization
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           
  9492                           ;psect for function _TMR0_Set
  9493  1923                     _TMR0_Set:	
  9494                           
  9495                           ;MCU_16f1518_B1.c: 75: Timer0=&VarTimer0;
  9496                           
  9497                           ;incstack = 0
  9498                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9499  1923  30CC               	movlw	_VarTimer0& (0+255)
  9500  1924  0020               	movlb	0	; select bank0
  9501  1925  00A0               	movwf	??_TMR0_Set
  9502  1926  0820               	movf	??_TMR0_Set,w
  9503  1927  0021               	movlb	1	; select bank1
  9504  1928  00EB               	movwf	_Timer0^(0+128)
  9505                           
  9506                           ;MCU_16f1518_B1.c: 76: OPTION_REG=0x00;
  9507  1929  0195               	clrf	21	;volatile
  9508                           
  9509                           ;MCU_16f1518_B1.c: 77: TMR0=(256-90);
  9510  192A  30A6               	movlw	166
  9511  192B  0020               	movlb	0	; select bank0
  9512  192C  0095               	movwf	21	;volatile
  9513                           
  9514                           ;MCU_16f1518_B1.c: 78: TMR0IE=1;
  9515  192D  168B               	bsf	11,5	;volatile
  9516                           
  9517                           ;MCU_16f1518_B1.c: 79: GIE=1;
  9518  192E  178B               	bsf	11,7	;volatile
  9519  192F  0008               	return
  9520  1930                     __end_of_TMR0_Set:	
  9521                           
  9522                           	psect	text45
  9523  1AA8                     __ptext45:	
  9524 ;; *************** function _IO_Set *****************
  9525 ;; Defined at:
  9526 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;		None
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;		None
  9531 ;; Return value:  Size  Location     Type
  9532 ;;		None               void
  9533 ;; Registers used:
  9534 ;;		wreg, status,2
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;Total ram usage:        0 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    4
  9547 ;; This function calls:
  9548 ;;		Nothing
  9549 ;; This function is called by:
  9550 ;;		_Mcu_Initialization
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           
  9555                           ;psect for function _IO_Set
  9556  1AA8                     _IO_Set:	
  9557                           
  9558                           ;MCU_16f1518_B1.c: 39: TRISA=0b01110111;;
  9559                           
  9560                           ;incstack = 0
  9561                           ; Regs used in _IO_Set: [wreg+status,2]
  9562  1AA8  3077               	movlw	119
  9563  1AA9  0021               	movlb	1	; select bank1
  9564  1AAA  008C               	movwf	12	;volatile
  9565                           
  9566                           ;MCU_16f1518_B1.c: 40: TRISB=0b00000111;;
  9567  1AAB  3007               	movlw	7
  9568  1AAC  008D               	movwf	13	;volatile
  9569                           
  9570                           ;MCU_16f1518_B1.c: 41: TRISC=0b00001100;;
  9571  1AAD  300C               	movlw	12
  9572  1AAE  008E               	movwf	14	;volatile
  9573                           
  9574                           ;MCU_16f1518_B1.c: 42: LATA=0b00000000;;
  9575  1AAF  0022               	movlb	2	; select bank2
  9576  1AB0  018C               	clrf	12	;volatile
  9577                           
  9578                           ;MCU_16f1518_B1.c: 43: LATB=0b00000010;;
  9579  1AB1  3002               	movlw	2
  9580  1AB2  008D               	movwf	13	;volatile
  9581                           
  9582                           ;MCU_16f1518_B1.c: 44: LATC=0b00000000;;
  9583  1AB3  018E               	clrf	14	;volatile
  9584                           
  9585                           ;MCU_16f1518_B1.c: 45: ANSELA=0b00100010;;
  9586  1AB4  3022               	movlw	34
  9587  1AB5  0023               	movlb	3	; select bank3
  9588  1AB6  008C               	movwf	12	;volatile
  9589                           
  9590                           ;MCU_16f1518_B1.c: 46: ANSELB=0b00000000;;
  9591  1AB7  018D               	clrf	13	;volatile
  9592                           
  9593                           ;MCU_16f1518_B1.c: 47: ANSELC=0b00000000;;
  9594  1AB8  018E               	clrf	14	;volatile
  9595                           
  9596                           ;MCU_16f1518_B1.c: 48: PORTA=0b01110111;;
  9597  1AB9  3077               	movlw	119
  9598  1ABA  0020               	movlb	0	; select bank0
  9599  1ABB  008C               	movwf	12	;volatile
  9600                           
  9601                           ;MCU_16f1518_B1.c: 49: PORTB=0b00000111;;
  9602  1ABC  3007               	movlw	7
  9603  1ABD  008D               	movwf	13	;volatile
  9604                           
  9605                           ;MCU_16f1518_B1.c: 50: PORTC=0b00001100;;
  9606  1ABE  300C               	movlw	12
  9607  1ABF  008E               	movwf	14	;volatile
  9608  1AC0  0008               	return
  9609  1AC1                     __end_of_IO_Set:	
  9610                           
  9611                           	psect	text46
  9612  1916                     __ptext46:	
  9613 ;; *************** function _IOC_Set *****************
  9614 ;; Defined at:
  9615 ;;		line 257 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;		None
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;		None
  9620 ;; Return value:  Size  Location     Type
  9621 ;;		None               void
  9622 ;; Registers used:
  9623 ;;		wreg, status,2
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;Total ram usage:        0 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    4
  9636 ;; This function calls:
  9637 ;;		Nothing
  9638 ;; This function is called by:
  9639 ;;		_Mcu_Initialization
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           
  9644                           ;psect for function _IOC_Set
  9645  1916                     _IOC_Set:	
  9646                           
  9647                           ;MCU_16f1518_B1.c: 259: WPUB2=0;
  9648                           
  9649                           ;incstack = 0
  9650                           ; Regs used in _IOC_Set: [wreg+status,2]
  9651  1916  0024               	movlb	4	; select bank4
  9652  1917  110D               	bcf	13,2	;volatile
  9653                           
  9654                           ;MCU_16f1518_B1.c: 267: IOCBP=0b00000100;
  9655  1918  3004               	movlw	4
  9656  1919  0027               	movlb	7	; select bank7
  9657  191A  0094               	movwf	20	;volatile
  9658                           
  9659                           ;MCU_16f1518_B1.c: 268: IOCBN=0b00000100;
  9660  191B  3004               	movlw	4
  9661  191C  0095               	movwf	21	;volatile
  9662                           
  9663                           ;MCU_16f1518_B1.c: 277: IOCBF=0b00000000;
  9664  191D  0196               	clrf	22	;volatile
  9665                           
  9666                           ;MCU_16f1518_B1.c: 279: IOCIE=1;
  9667  191E  158B               	bsf	11,3	;volatile
  9668                           
  9669                           ;MCU_16f1518_B1.c: 280: IOCIF=0;
  9670  191F  100B               	bcf	11,0	;volatile
  9671                           
  9672                           ;MCU_16f1518_B1.c: 281: PEIE=1;
  9673  1920  170B               	bsf	11,6	;volatile
  9674                           
  9675                           ;MCU_16f1518_B1.c: 282: GIE=1;
  9676  1921  178B               	bsf	11,7	;volatile
  9677  1922  0008               	return
  9678  1923                     __end_of_IOC_Set:	
  9679                           
  9680                           	psect	text47
  9681  277A                     __ptext47:	
  9682 ;; *************** function _INT_Set *****************
  9683 ;; Defined at:
  9684 ;;		line 228 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;		None
  9687 ;; Auto vars:     Size  Location     Type
  9688 ;;		None
  9689 ;; Return value:  Size  Location     Type
  9690 ;;		None               void
  9691 ;; Registers used:
  9692 ;;		None
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;Total ram usage:        0 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    4
  9705 ;; This function calls:
  9706 ;;		Nothing
  9707 ;; This function is called by:
  9708 ;;		_Mcu_Initialization
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           
  9713                           ;psect for function _INT_Set
  9714  277A                     _INT_Set:	
  9715                           
  9716                           ;MCU_16f1518_B1.c: 230: WPUB0=0;
  9717                           
  9718                           ;incstack = 0
  9719                           ; Regs used in _INT_Set: []
  9720  277A  0024               	movlb	4	; select bank4
  9721  277B  100D               	bcf	13,0	;volatile
  9722                           
  9723                           ;MCU_16f1518_B1.c: 231: INTE=1;
  9724  277C  160B               	bsf	11,4	;volatile
  9725                           
  9726                           ;MCU_16f1518_B1.c: 232: PEIE=1;
  9727  277D  170B               	bsf	11,6	;volatile
  9728                           
  9729                           ;MCU_16f1518_B1.c: 233: GIE=1;
  9730  277E  178B               	bsf	11,7	;volatile
  9731  277F  0008               	return
  9732  2780                     __end_of_INT_Set:	
  9733                           
  9734                           	psect	text48
  9735  27A1                     __ptext48:	
  9736 ;; *************** function _ADC_Set *****************
  9737 ;; Defined at:
  9738 ;;		line 322 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
  9739 ;; Parameters:    Size  Location     Type
  9740 ;;		None
  9741 ;; Auto vars:     Size  Location     Type
  9742 ;;		None
  9743 ;; Return value:  Size  Location     Type
  9744 ;;		None               void
  9745 ;; Registers used:
  9746 ;;		wreg
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/0
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;Total ram usage:        0 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    4
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		_Mcu_Initialization
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           
  9767                           ;psect for function _ADC_Set
  9768  27A1                     _ADC_Set:	
  9769                           
  9770                           ;MCU_16f1518_B1.c: 324: ADCON1=0xf2;
  9771                           
  9772                           ;incstack = 0
  9773                           ; Regs used in _ADC_Set: [wreg]
  9774  27A1  30F2               	movlw	242
  9775  27A2  0021               	movlb	1	; select bank1
  9776  27A3  009E               	movwf	30	;volatile
  9777                           
  9778                           ;MCU_16f1518_B1.c: 325: FVRCON=0xc0;
  9779  27A4  30C0               	movlw	192
  9780  27A5  0022               	movlb	2	; select bank2
  9781  27A6  0097               	movwf	23	;volatile
  9782  27A7  0008               	return
  9783  27A8                     __end_of_ADC_Set:	
  9784                           
  9785                           	psect	text49
  9786  1866                     __ptext49:	
  9787 ;; *************** function _MainT_Initialization *****************
  9788 ;; Defined at:
  9789 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  9790 ;; Parameters:    Size  Location     Type
  9791 ;;		None
  9792 ;; Auto vars:     Size  Location     Type
  9793 ;;		None
  9794 ;; Return value:  Size  Location     Type
  9795 ;;		None               void
  9796 ;; Registers used:
  9797 ;;		wreg
  9798 ;; Tracked objects:
  9799 ;;		On entry : 0/0
  9800 ;;		On exit  : 0/0
  9801 ;;		Unchanged: 0/0
  9802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;Total ram usage:        1 bytes
  9808 ;; Hardware stack levels used:    1
  9809 ;; Hardware stack levels required when called:    4
  9810 ;; This function calls:
  9811 ;;		Nothing
  9812 ;; This function is called by:
  9813 ;;		_main
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           
  9818                           ;psect for function _MainT_Initialization
  9819  1866                     _MainT_Initialization:	
  9820                           
  9821                           ;main.c: 95: Product=&VarProduct;
  9822                           
  9823                           ;incstack = 0
  9824                           ; Regs used in _MainT_Initialization: [wreg]
  9825  1866  30C5               	movlw	_VarProduct& (0+255)
  9826  1867  0020               	movlb	0	; select bank0
  9827  1868  00A0               	movwf	??_MainT_Initialization
  9828  1869  0820               	movf	??_MainT_Initialization,w
  9829  186A  00EF               	movwf	_Product
  9830                           
  9831                           ;main.c: 98: TMain=&VarTMain;
  9832  186B  3020               	movlw	_VarTMain& (0+255)
  9833  186C  00A0               	movwf	??_MainT_Initialization
  9834  186D  0820               	movf	??_MainT_Initialization,w
  9835  186E  00FD               	movwf	_TMain
  9836  186F  0008               	return
  9837  1870                     __end_of_MainT_Initialization:	
  9838                           
  9839                           	psect	text50
  9840  1636                     __ptext50:	
  9841 ;; *************** function _MainT *****************
  9842 ;; Defined at:
  9843 ;;		line 103 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\main.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;		None
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;		None
  9848 ;; Return value:  Size  Location     Type
  9849 ;;		None               void
  9850 ;; Registers used:
  9851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9852 ;; Tracked objects:
  9853 ;;		On entry : 0/0
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;Total ram usage:        0 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    6
  9864 ;; This function calls:
  9865 ;;		_setBuz
  9866 ;;		_setLoad_Enable
  9867 ;;		_setRF_Enable
  9868 ;;		_setSw_Enable
  9869 ;; This function is called by:
  9870 ;;		_main
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           
  9875                           ;psect for function _MainT
  9876  1636                     _MainT:	
  9877                           
  9878                           ;main.c: 106: if(!TMain->PowerON)
  9879                           
  9880                           ;incstack = 0
  9881                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9882  1636  087D               	movf	_TMain,w
  9883  1637  0086               	movwf	6
  9884  1638  3001               	movlw	1	; select bank2/3
  9885  1639  0087               	movwf	7
  9886  163A  1801               	btfsc	1,0
  9887  163B  2E7B               	goto	l8935
  9888                           
  9889                           ;main.c: 107: {
  9890                           ;main.c: 108: TMain->PowerCount++;
  9891  163C  0A7D               	incf	_TMain,w
  9892  163D  0086               	movwf	6
  9893  163E  3001               	movlw	1	; select bank2/3
  9894  163F  0087               	movwf	7
  9895  1640  3001               	movlw	1
  9896  1641  0781               	addwf	1,f
  9897  1642  3141               	addfsr 1,1
  9898  1643  1803               	skipnc
  9899  1644  0A81               	incf	1,f
  9900                           
  9901                           ;main.c: 109: if(TMain->PowerCount == 150)
  9902  1645  0A7D               	incf	_TMain,w
  9903  1646  0086               	movwf	6
  9904  1647  3001               	movlw	1	; select bank2/3
  9905  1648  0087               	movwf	7
  9906  1649  3F40               	moviw [0]fsr1
  9907  164A  3A96               	xorlw	150
  9908  164B  1D03               	skipz
  9909  164C  2E4F               	goto	u8595
  9910  164D  3F41               	moviw [1]fsr1
  9911  164E  3A00               	xorlw	0
  9912  164F                     u8595:	
  9913  164F  1D03               	skipz
  9914  1650  0008               	return
  9915                           
  9916                           ;main.c: 110: {
  9917                           ;main.c: 111: TMain->PowerCount=0;
  9918  1651  0A7D               	incf	_TMain,w
  9919  1652  0086               	movwf	6
  9920  1653  3001               	movlw	1	; select bank2/3
  9921  1654  0087               	movwf	7
  9922  1655  3000               	movlw	0
  9923  1656  3FC0               	movwi [0]fsr1
  9924  1657  3FC1               	movwi [1]fsr1
  9925                           
  9926                           ;main.c: 112: TMain->PowerON=1;
  9927  1658  087D               	movf	_TMain,w
  9928  1659  0086               	movwf	6
  9929  165A  3001               	movlw	1	; select bank2/3
  9930  165B  0087               	movwf	7
  9931  165C  1401               	bsf	1,0
  9932                           
  9933                           ;main.c: 115: ;;
  9934                           ;main.c: 119: setLoad_Enable(1);
  9935  165D  3001               	movlw	1
  9936  165E  3199  21C7  3196   	fcall	_setLoad_Enable
  9937                           
  9938                           ;main.c: 125: setBuz(3,50);
  9939  1661  3032               	movlw	50
  9940  1662  0020               	movlb	0	; select bank0
  9941  1663  00A6               	movwf	setBuz@time
  9942  1664  3000               	movlw	0
  9943  1665  00A7               	movwf	setBuz@time+1
  9944  1666  3003               	movlw	3
  9945  1667  3197  2789  3196   	fcall	_setBuz
  9946                           
  9947                           ;main.c: 126: TMain->SelfTest=1;
  9948  166A  087D               	movf	_TMain,w
  9949  166B  3E03               	addlw	3
  9950  166C  0086               	movwf	6
  9951  166D  3001               	movlw	1	; select bank2/3
  9952  166E  0087               	movwf	7
  9953  166F  1401               	bsf	1,0
  9954                           
  9955                           ;main.c: 128: setSw_Enable(1);
  9956  1670  3001               	movlw	1
  9957  1671  3199  2178  3196   	fcall	_setSw_Enable
  9958                           
  9959                           ;main.c: 131: setRF_Enable(1,1);
  9960  1674  0020               	movlb	0	; select bank0
  9961  1675  01A2               	clrf	setRF_Enable@command
  9962  1676  0AA2               	incf	setRF_Enable@command,f
  9963  1677  3001               	movlw	1
  9964  1678  319C  24B4         	fcall	_setRF_Enable
  9965                           
  9966                           ;main.c: 135: }
  9967                           ;main.c: 136: }
  9968  167A  0008               	return
  9969  167B                     l8935:	
  9970                           
  9971                           ;main.c: 137: else
  9972                           ;main.c: 138: {
  9973                           ;main.c: 146: TMain->Count1++;
  9974  167B  087D               	movf	_TMain,w
  9975  167C  3E06               	addlw	6
  9976  167D  0086               	movwf	6
  9977  167E  3001               	movlw	1	; select bank2/3
  9978  167F  0087               	movwf	7
  9979  1680  3001               	movlw	1
  9980  1681  0781               	addwf	1,f
  9981  1682  3141               	addfsr 1,1
  9982  1683  1803               	skipnc
  9983  1684  0A81               	incf	1,f
  9984                           
  9985                           ;main.c: 147: if(TMain->Count1 == 100)
  9986  1685  087D               	movf	_TMain,w
  9987  1686  3E06               	addlw	6
  9988  1687  0086               	movwf	6
  9989  1688  3001               	movlw	1	; select bank2/3
  9990  1689  0087               	movwf	7
  9991  168A  3F40               	moviw [0]fsr1
  9992  168B  3A64               	xorlw	100
  9993  168C  1D03               	skipz
  9994  168D  2E90               	goto	u8605
  9995  168E  3F41               	moviw [1]fsr1
  9996  168F  3A00               	xorlw	0
  9997  1690                     u8605:	
  9998  1690  1D03               	skipz
  9999  1691  0008               	return
 10000                           
 10001                           ;main.c: 148: {
 10002                           ;main.c: 149: TMain->Count1=0;
 10003  1692  087D               	movf	_TMain,w
 10004  1693  3E06               	addlw	6
 10005  1694  0086               	movwf	6
 10006  1695  3001               	movlw	1	; select bank2/3
 10007  1696  0087               	movwf	7
 10008  1697  3000               	movlw	0
 10009  1698  3FC0               	movwi [0]fsr1
 10010  1699  3FC1               	movwi [1]fsr1
 10011                           
 10012                           ;main.c: 160: if(TMain->Flag)
 10013  169A  087D               	movf	_TMain,w
 10014  169B  0086               	movwf	6
 10015  169C  3001               	movlw	1	; select bank2/3
 10016  169D  0087               	movwf	7
 10017  169E  1981               	btfsc	1,3
 10018  169F  0008               	return
 10019                           
 10020                           ;main.c: 170: else
 10021                           ;main.c: 171: {
 10022                           ;main.c: 172: TMain->Flag=1;
 10023                           
 10024                           ;main.c: 161: {
 10025                           ;main.c: 169: }
 10026  16A0  087D               	movf	_TMain,w
 10027  16A1  0086               	movwf	6
 10028  16A2  3001               	movlw	1	; select bank2/3
 10029  16A3  0087               	movwf	7
 10030  16A4  1581               	bsf	1,3
 10031  16A5  0008               	return
 10032  16A6                     __end_of_MainT:	
 10033                           
 10034                           	psect	text51
 10035  19C7                     __ptext51:	
 10036 ;; *************** function _setLoad_Enable *****************
 10037 ;; Defined at:
 10038 ;;		line 257 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10039 ;; Parameters:    Size  Location     Type
 10040 ;;  command         1    wreg     unsigned char 
 10041 ;; Auto vars:     Size  Location     Type
 10042 ;;  command         1    0[BANK0 ] unsigned char 
 10043 ;; Return value:  Size  Location     Type
 10044 ;;		None               void
 10045 ;; Registers used:
 10046 ;;		wreg, fsr1l, fsr1h
 10047 ;; Tracked objects:
 10048 ;;		On entry : 0/0
 10049 ;;		On exit  : 0/0
 10050 ;;		Unchanged: 0/0
 10051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;Total ram usage:        1 bytes
 10057 ;; Hardware stack levels used:    1
 10058 ;; Hardware stack levels required when called:    4
 10059 ;; This function calls:
 10060 ;;		Nothing
 10061 ;; This function is called by:
 10062 ;;		_MainT
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           
 10067                           ;psect for function _setLoad_Enable
 10068  19C7                     _setLoad_Enable:	
 10069                           
 10070                           ;incstack = 0
 10071                           ; Regs used in _setLoad_Enable: [wregfsr1]
 10072                           ;setLoad_Enable@command stored from wreg
 10073  19C7  0020               	movlb	0	; select bank0
 10074  19C8  00A0               	movwf	setLoad_Enable@command
 10075                           
 10076                           ;OverLoad_B1.c: 259: Load->Enable=command;
 10077  19C9  086E               	movf	_Load,w
 10078  19CA  0086               	movwf	6
 10079  19CB  3002               	movlw	2	; select bank4/5
 10080  19CC  0087               	movwf	7
 10081  19CD  0820               	movf	setLoad_Enable@command,w
 10082  19CE  1001               	bcf	1,0
 10083  19CF  1D03               	skipz
 10084  19D0  1401               	bsf	1,0
 10085                           
 10086                           ;OverLoad_B1.c: 260: Load->GO=0;
 10087  19D1  086E               	movf	_Load,w
 10088  19D2  0086               	movwf	6
 10089  19D3  3002               	movlw	2	; select bank4/5
 10090  19D4  0087               	movwf	7
 10091  19D5  1081               	bcf	1,1
 10092  19D6  0008               	return
 10093  19D7                     __end_of_setLoad_Enable:	
 10094                           
 10095                           	psect	text52
 10096  004F                     __ptext52:	
 10097 ;; *************** function _Load_Main *****************
 10098 ;; Defined at:
 10099 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;		None
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;  i               1   17[BANK0 ] unsigned char 
 10104 ;; Return value:  Size  Location     Type
 10105 ;;		None               void
 10106 ;; Registers used:
 10107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;Total ram usage:        5 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    9
 10120 ;; This function calls:
 10121 ;;		___lwdiv
 10122 ;;		___wmul
 10123 ;;		_getPF_Safe
 10124 ;;		_setDimmerLights_Clear
 10125 ;;		_setLoad_AH_AL_Restore
 10126 ;;		_setLoad_Exceptions
 10127 ;; This function is called by:
 10128 ;;		_main
 10129 ;; This function uses a non-reentrant model
 10130 ;;
 10131                           
 10132                           
 10133                           ;psect for function _Load_Main
 10134  004F                     _Load_Main:	
 10135                           
 10136                           ;OverLoad_B1.c: 47: char i;
 10137                           ;OverLoad_B1.c: 48: if(Load->ERROR)
 10138                           
 10139                           ;incstack = 0
 10140                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10141  004F  0020               	movlb	0	; select bank0
 10142  0050  086E               	movf	_Load,w
 10143  0051  0086               	movwf	6
 10144  0052  3002               	movlw	2	; select bank4/5
 10145  0053  0087               	movwf	7
 10146  0054  1E81               	btfss	1,5
 10147  0055  287C               	goto	l8969
 10148                           
 10149                           ;OverLoad_B1.c: 49: {
 10150                           ;OverLoad_B1.c: 50: Load->ErrorTime++;
 10151  0056  086E               	movf	_Load,w
 10152  0057  3E03               	addlw	3
 10153  0058  0086               	movwf	6
 10154  0059  3002               	movlw	2	; select bank4/5
 10155  005A  0087               	movwf	7
 10156  005B  3001               	movlw	1
 10157  005C  0781               	addwf	1,f
 10158  005D  3141               	addfsr 1,1
 10159  005E  1803               	skipnc
 10160  005F  0A81               	incf	1,f
 10161                           
 10162                           ;OverLoad_B1.c: 51: if(Load->ErrorTime >= 1000)
 10163  0060  086E               	movf	_Load,w
 10164  0061  3E03               	addlw	3
 10165  0062  0086               	movwf	6
 10166  0063  3002               	movlw	2	; select bank4/5
 10167  0064  0087               	movwf	7
 10168  0065  3F40               	moviw [0]fsr1
 10169  0066  00AD               	movwf	??_Load_Main
 10170  0067  3F41               	moviw [1]fsr1
 10171  0068  00AE               	movwf	??_Load_Main+1
 10172  0069  3003               	movlw	3
 10173  006A  022E               	subwf	??_Load_Main+1,w
 10174  006B  30E8               	movlw	232
 10175  006C  1903               	skipnz
 10176  006D  022D               	subwf	??_Load_Main,w
 10177  006E  1C03               	skipc
 10178  006F  0008               	return
 10179                           
 10180                           ;OverLoad_B1.c: 52: {
 10181                           ;OverLoad_B1.c: 53: Load->ErrorTime=0;
 10182  0070  086E               	movf	_Load,w
 10183  0071  3E03               	addlw	3
 10184  0072  0086               	movwf	6
 10185  0073  3002               	movlw	2	; select bank4/5
 10186  0074  0087               	movwf	7
 10187  0075  3000               	movlw	0
 10188  0076  3FC0               	movwi [0]fsr1
 10189  0077  3FC1               	movwi [1]fsr1
 10190                           
 10191                           ;OverLoad_B1.c: 54: setLoad_Exceptions(0);
 10192  0078  3000               	movlw	0
 10193  0079  3191  2115         	fcall	_setLoad_Exceptions
 10194                           
 10195                           ;OverLoad_B1.c: 55: }
 10196                           ;OverLoad_B1.c: 56: }
 10197  007B  0008               	return
 10198  007C                     l8969:	
 10199                           
 10200                           ;OverLoad_B1.c: 57: else
 10201                           ;OverLoad_B1.c: 58: {
 10202                           ;OverLoad_B1.c: 59: if(Load->ADtoGO)
 10203  007C  0020               	movlb	0	; select bank0
 10204  007D  086E               	movf	_Load,w
 10205  007E  0086               	movwf	6
 10206  007F  3002               	movlw	2	; select bank4/5
 10207  0080  0087               	movwf	7
 10208  0081  1E01               	btfss	1,4
 10209  0082  2B43               	goto	l9077
 10210                           
 10211                           ;OverLoad_B1.c: 60: {
 10212                           ;OverLoad_B1.c: 61: Load->Time++;
 10213  0083  0A6E               	incf	_Load,w
 10214  0084  0086               	movwf	6
 10215  0085  3002               	movlw	2	; select bank4/5
 10216  0086  0087               	movwf	7
 10217  0087  3001               	movlw	1
 10218  0088  0781               	addwf	1,f
 10219  0089  3141               	addfsr 1,1
 10220  008A  1803               	skipnc
 10221  008B  0A81               	incf	1,f
 10222                           
 10223                           ;OverLoad_B1.c: 62: if(Load->Time >= 5)
 10224  008C  0A6E               	incf	_Load,w
 10225  008D  0086               	movwf	6
 10226  008E  3002               	movlw	2	; select bank4/5
 10227  008F  0087               	movwf	7
 10228  0090  3F40               	moviw [0]fsr1
 10229  0091  00AD               	movwf	??_Load_Main
 10230  0092  3F41               	moviw [1]fsr1
 10231  0093  00AE               	movwf	??_Load_Main+1
 10232  0094  3000               	movlw	0
 10233  0095  022E               	subwf	??_Load_Main+1,w
 10234  0096  3005               	movlw	5
 10235  0097  1903               	skipnz
 10236  0098  022D               	subwf	??_Load_Main,w
 10237  0099  1C03               	skipc
 10238  009A  0008               	return
 10239                           
 10240                           ;OverLoad_B1.c: 63: {
 10241                           ;OverLoad_B1.c: 64: Load->Time=0;
 10242  009B  0A6E               	incf	_Load,w
 10243  009C  0086               	movwf	6
 10244  009D  3002               	movlw	2	; select bank4/5
 10245  009E  0087               	movwf	7
 10246  009F  3000               	movlw	0
 10247  00A0  3FC0               	movwi [0]fsr1
 10248  00A1  3FC1               	movwi [1]fsr1
 10249                           
 10250                           ;OverLoad_B1.c: 65: Load->ADtoGO=0;
 10251  00A2  086E               	movf	_Load,w
 10252  00A3  0086               	movwf	6
 10253  00A4  3002               	movlw	2	; select bank4/5
 10254  00A5  0087               	movwf	7
 10255  00A6  1201               	bcf	1,4
 10256                           
 10257                           ;OverLoad_B1.c: 66: Load->LightsCount=Load->Lights1Status+Load->Lights2Status+Load->Ligh
      +                          ts3Status;
 10258  00A7  086E               	movf	_Load,w
 10259  00A8  3E45               	addlw	69
 10260  00A9  0086               	movwf	6
 10261  00AA  3002               	movlw	2	; select bank4/5
 10262  00AB  0087               	movwf	7
 10263  00AC  086E               	movf	_Load,w
 10264  00AD  3E44               	addlw	68
 10265  00AE  0084               	movwf	4
 10266  00AF  3002               	movlw	2	; select bank4/5
 10267  00B0  0085               	movwf	5
 10268  00B1  0800               	movf	0,w
 10269  00B2  00AD               	movwf	??_Load_Main
 10270  00B3  086E               	movf	_Load,w
 10271  00B4  3E43               	addlw	67
 10272  00B5  0084               	movwf	4
 10273  00B6  3002               	movlw	2	; select bank4/5
 10274  00B7  0085               	movwf	5
 10275  00B8  0800               	movf	0,w
 10276  00B9  072D               	addwf	??_Load_Main,w
 10277  00BA  0701               	addwf	1,w
 10278  00BB  00AE               	movwf	??_Load_Main+1
 10279  00BC  086E               	movf	_Load,w
 10280  00BD  3E3E               	addlw	62
 10281  00BE  0086               	movwf	6
 10282  00BF  3002               	movlw	2	; select bank4/5
 10283  00C0  0087               	movwf	7
 10284  00C1  082E               	movf	??_Load_Main+1,w
 10285  00C2  0081               	movwf	1
 10286                           
 10287                           ;OverLoad_B1.c: 67: for(i=1 ; i<4 ; i++)
 10288  00C3  01B1               	clrf	Load_Main@i
 10289  00C4  0AB1               	incf	Load_Main@i,f
 10290  00C5  3004               	movlw	4
 10291  00C6  0231               	subwf	Load_Main@i,w
 10292  00C7  1803               	btfsc	3,0
 10293  00C8  28F7               	goto	l8991
 10294  00C9                     l8985:	
 10295                           
 10296                           ;OverLoad_B1.c: 68: {
 10297                           ;OverLoad_B1.c: 69: Load->ADH+=Load->AH[i];
 10298  00C9  3531               	lslf	Load_Main@i,w
 10299  00CA  3E08               	addlw	8
 10300  00CB  076E               	addwf	_Load,w
 10301  00CC  00AD               	movwf	??_Load_Main
 10302  00CD  082D               	movf	??_Load_Main,w
 10303  00CE  0086               	movwf	6
 10304  00CF  3002               	movlw	2	; select bank4/5
 10305  00D0  0087               	movwf	7
 10306  00D1  086E               	movf	_Load,w
 10307  00D2  3E2E               	addlw	46
 10308  00D3  0084               	movwf	4
 10309  00D4  3002               	movlw	2	; select bank4/5
 10310  00D5  0085               	movwf	5
 10311  00D6  3F40               	moviw [0]fsr1
 10312  00D7  0780               	addwf	0,f
 10313  00D8  3101               	addfsr 0,1
 10314  00D9  3F41               	moviw [1]fsr1
 10315  00DA  3D80               	addwfc	0,f
 10316  00DB  313F               	addfsr 0,-1
 10317                           
 10318                           ;OverLoad_B1.c: 70: Load->ADL+=Load->AL[i];
 10319  00DC  3531               	lslf	Load_Main@i,w
 10320  00DD  3E1A               	addlw	26
 10321  00DE  076E               	addwf	_Load,w
 10322  00DF  00AD               	movwf	??_Load_Main
 10323  00E0  082D               	movf	??_Load_Main,w
 10324  00E1  0086               	movwf	6
 10325  00E2  3002               	movlw	2	; select bank4/5
 10326  00E3  0087               	movwf	7
 10327  00E4  086E               	movf	_Load,w
 10328  00E5  3E30               	addlw	48
 10329  00E6  0084               	movwf	4
 10330  00E7  3002               	movlw	2	; select bank4/5
 10331  00E8  0085               	movwf	5
 10332  00E9  3F40               	moviw [0]fsr1
 10333  00EA  0780               	addwf	0,f
 10334  00EB  3101               	addfsr 0,1
 10335  00EC  3F41               	moviw [1]fsr1
 10336  00ED  3D80               	addwfc	0,f
 10337  00EE  313F               	addfsr 0,-1
 10338  00EF  3001               	movlw	1
 10339  00F0  00AD               	movwf	??_Load_Main
 10340  00F1  082D               	movf	??_Load_Main,w
 10341  00F2  07B1               	addwf	Load_Main@i,f
 10342  00F3  3004               	movlw	4
 10343  00F4  0231               	subwf	Load_Main@i,w
 10344  00F5  1C03               	skipc
 10345  00F6  28C9               	goto	l8985
 10346  00F7                     l8991:	
 10347                           
 10348                           ;OverLoad_B1.c: 71: }
 10349                           ;OverLoad_B1.c: 72: Load->ADH/=3;
 10350  00F7  3003               	movlw	3
 10351  00F8  00A0               	movwf	___lwdiv@divisor
 10352  00F9  3000               	movlw	0
 10353  00FA  00A1               	movwf	___lwdiv@divisor+1
 10354  00FB  086E               	movf	_Load,w
 10355  00FC  3E2E               	addlw	46
 10356  00FD  0086               	movwf	6
 10357  00FE  3002               	movlw	2	; select bank4/5
 10358  00FF  0087               	movwf	7
 10359  0100  3F40               	moviw [0]fsr1
 10360  0101  00A2               	movwf	___lwdiv@dividend
 10361  0102  3F41               	moviw [1]fsr1
 10362  0103  00A3               	movwf	___lwdiv@dividend+1
 10363  0104  319E  268C  3180   	fcall	___lwdiv
 10364  0107  0020               	movlb	0	; select bank0
 10365  0108  086E               	movf	_Load,w
 10366  0109  3E2E               	addlw	46
 10367  010A  0086               	movwf	6
 10368  010B  3002               	movlw	2	; select bank4/5
 10369  010C  0087               	movwf	7
 10370  010D  0820               	movf	?___lwdiv,w
 10371  010E  3FC0               	movwi [0]fsr1
 10372  010F  0821               	movf	?___lwdiv+1,w
 10373  0110  3FC1               	movwi [1]fsr1
 10374                           
 10375                           ;OverLoad_B1.c: 73: Load->ADL/=3;
 10376  0111  3003               	movlw	3
 10377  0112  00A0               	movwf	___lwdiv@divisor
 10378  0113  3000               	movlw	0
 10379  0114  00A1               	movwf	___lwdiv@divisor+1
 10380  0115  086E               	movf	_Load,w
 10381  0116  3E30               	addlw	48
 10382  0117  0086               	movwf	6
 10383  0118  3002               	movlw	2	; select bank4/5
 10384  0119  0087               	movwf	7
 10385  011A  3F40               	moviw [0]fsr1
 10386  011B  00A2               	movwf	___lwdiv@dividend
 10387  011C  3F41               	moviw [1]fsr1
 10388  011D  00A3               	movwf	___lwdiv@dividend+1
 10389  011E  319E  268C  3180   	fcall	___lwdiv
 10390  0121  0020               	movlb	0	; select bank0
 10391  0122  086E               	movf	_Load,w
 10392  0123  3E30               	addlw	48
 10393  0124  0086               	movwf	6
 10394  0125  3002               	movlw	2	; select bank4/5
 10395  0126  0087               	movwf	7
 10396  0127  0820               	movf	?___lwdiv,w
 10397  0128  3FC0               	movwi [0]fsr1
 10398  0129  0821               	movf	?___lwdiv+1,w
 10399  012A  3FC1               	movwi [1]fsr1
 10400                           
 10401                           ;OverLoad_B1.c: 74: if(Load->ADH > Load->ADL)
 10402  012B  086E               	movf	_Load,w
 10403  012C  3E2E               	addlw	46
 10404  012D  0086               	movwf	6
 10405  012E  3002               	movlw	2	; select bank4/5
 10406  012F  0087               	movwf	7
 10407  0130  3F40               	moviw [0]fsr1
 10408  0131  00AD               	movwf	??_Load_Main
 10409  0132  3F41               	moviw [1]fsr1
 10410  0133  00AE               	movwf	??_Load_Main+1
 10411  0134  086E               	movf	_Load,w
 10412  0135  3E30               	addlw	48
 10413  0136  0086               	movwf	6
 10414  0137  3002               	movlw	2	; select bank4/5
 10415  0138  0087               	movwf	7
 10416  0139  3F40               	moviw [0]fsr1
 10417  013A  00AF               	movwf	??_Load_Main+2
 10418  013B  3F41               	moviw [1]fsr1
 10419  013C  00B0               	movwf	??_Load_Main+3
 10420  013D  082E               	movf	??_Load_Main+1,w
 10421  013E  0230               	subwf	??_Load_Main+3,w
 10422  013F  1D03               	skipz
 10423  0140  2943               	goto	u8715
 10424  0141  082D               	movf	??_Load_Main,w
 10425  0142  022F               	subwf	??_Load_Main+2,w
 10426  0143                     u8715:	
 10427  0143  1803               	skipnc
 10428  0144  2AC6               	goto	l9059
 10429                           
 10430                           ;OverLoad_B1.c: 75: {
 10431                           ;OverLoad_B1.c: 76: Load->AD=(Load->ADH-Load->ADL);
 10432  0145  086E               	movf	_Load,w
 10433  0146  3E2E               	addlw	46
 10434  0147  0086               	movwf	6
 10435  0148  3002               	movlw	2	; select bank4/5
 10436  0149  0087               	movwf	7
 10437  014A  086E               	movf	_Load,w
 10438  014B  3E30               	addlw	48
 10439  014C  0084               	movwf	4
 10440  014D  3002               	movlw	2	; select bank4/5
 10441  014E  0085               	movwf	5
 10442  014F  3F00               	moviw [0]fsr0
 10443  0150  00AD               	movwf	??_Load_Main
 10444  0151  3F01               	moviw [1]fsr0
 10445  0152  00AE               	movwf	??_Load_Main+1
 10446  0153  09AD               	comf	??_Load_Main,f
 10447  0154  09AE               	comf	??_Load_Main+1,f
 10448  0155  0AAD               	incf	??_Load_Main,f
 10449  0156  1903               	skipnz
 10450  0157  0AAE               	incf	??_Load_Main+1,f
 10451  0158  3F40               	moviw [0]fsr1
 10452  0159  072D               	addwf	??_Load_Main,w
 10453  015A  00AF               	movwf	??_Load_Main+2
 10454  015B  3F41               	moviw [1]fsr1
 10455  015C  3D2E               	addwfc	??_Load_Main+1,w
 10456  015D  00B0               	movwf	??_Load_Main+3
 10457  015E  086E               	movf	_Load,w
 10458  015F  3E2C               	addlw	44
 10459  0160  0086               	movwf	6
 10460  0161  3002               	movlw	2	; select bank4/5
 10461  0162  0087               	movwf	7
 10462  0163  082F               	movf	??_Load_Main+2,w
 10463  0164  3FC0               	movwi [0]fsr1
 10464  0165  0830               	movf	??_Load_Main+3,w
 10465  0166  3FC1               	movwi [1]fsr1
 10466                           
 10467                           ;OverLoad_B1.c: 78: if(Load->Count < 2)
 10468  0167  086E               	movf	_Load,w
 10469  0168  3E3A               	addlw	58
 10470  0169  0086               	movwf	6
 10471  016A  3002               	movlw	2	; select bank4/5
 10472  016B  0087               	movwf	7
 10473  016C  3002               	movlw	2
 10474  016D  0201               	subwf	1,w
 10475  016E  1803               	skipnc
 10476  016F  29C0               	goto	l9013
 10477                           
 10478                           ;OverLoad_B1.c: 79: {
 10479                           ;OverLoad_B1.c: 80: Load->Count++;
 10480  0170  3001               	movlw	1
 10481  0171  00AD               	movwf	??_Load_Main
 10482  0172  086E               	movf	_Load,w
 10483  0173  3E3A               	addlw	58
 10484  0174  0086               	movwf	6
 10485  0175  3002               	movlw	2	; select bank4/5
 10486  0176  0087               	movwf	7
 10487  0177  082D               	movf	??_Load_Main,w
 10488  0178  0781               	addwf	1,f
 10489                           
 10490                           ;OverLoad_B1.c: 81: if(Load->Count == 1)
 10491  0179  086E               	movf	_Load,w
 10492  017A  3E3A               	addlw	58
 10493  017B  0086               	movwf	6
 10494  017C  3002               	movlw	2	; select bank4/5
 10495  017D  0087               	movwf	7
 10496  017E  0801               	movf	1,w
 10497  017F  3A01               	xorlw	1
 10498  0180  1D03               	skipz
 10499  0181  298C               	goto	l9005
 10500                           
 10501                           ;OverLoad_B1.c: 82: {
 10502                           ;OverLoad_B1.c: 83: Load->JudgeValue=500;
 10503  0182  086E               	movf	_Load,w
 10504  0183  3E36               	addlw	54
 10505  0184  0086               	movwf	6
 10506  0185  3002               	movlw	2	; select bank4/5
 10507  0186  0087               	movwf	7
 10508  0187  30F4               	movlw	244
 10509  0188  3FC0               	movwi [0]fsr1
 10510  0189  3001               	movlw	1
 10511  018A  3FC1               	movwi [1]fsr1
 10512                           
 10513                           ;OverLoad_B1.c: 84: }
 10514  018B  29C0               	goto	l9013
 10515  018C                     l9005:	
 10516                           
 10517                           ;OverLoad_B1.c: 85: else if(Load->Count == 2)
 10518  018C  086E               	movf	_Load,w
 10519  018D  3E3A               	addlw	58
 10520  018E  0086               	movwf	6
 10521  018F  3002               	movlw	2	; select bank4/5
 10522  0190  0087               	movwf	7
 10523  0191  0801               	movf	1,w
 10524  0192  3A02               	xorlw	2
 10525  0193  1D03               	skipz
 10526  0194  29C0               	goto	l9013
 10527                           
 10528                           ;OverLoad_B1.c: 86: {
 10529                           ;OverLoad_B1.c: 87: if(Load->LightsCount == 1)
 10530  0195  086E               	movf	_Load,w
 10531  0196  3E3E               	addlw	62
 10532  0197  0086               	movwf	6
 10533  0198  3002               	movlw	2	; select bank4/5
 10534  0199  0087               	movwf	7
 10535  019A  0801               	movf	1,w
 10536  019B  3A01               	xorlw	1
 10537  019C  1D03               	skipz
 10538  019D  29A8               	goto	l9011
 10539                           
 10540                           ;OverLoad_B1.c: 88: {
 10541                           ;OverLoad_B1.c: 89: Load->JudgeValue=0x42;
 10542  019E  086E               	movf	_Load,w
 10543  019F  3E36               	addlw	54
 10544  01A0  0086               	movwf	6
 10545  01A1  3002               	movlw	2	; select bank4/5
 10546  01A2  0087               	movwf	7
 10547  01A3  3042               	movlw	66
 10548  01A4  3FC0               	movwi [0]fsr1
 10549  01A5  3000               	movlw	0
 10550  01A6  3FC1               	movwi [1]fsr1
 10551                           
 10552                           ;OverLoad_B1.c: 90: }
 10553  01A7  29C0               	goto	l9013
 10554  01A8                     l9011:	
 10555                           
 10556                           ;OverLoad_B1.c: 91: else
 10557                           ;OverLoad_B1.c: 92: {
 10558                           ;OverLoad_B1.c: 93: Load->JudgeValue=(0x42+Load->TotalLoad)-0x08;
 10559  01A8  086E               	movf	_Load,w
 10560  01A9  3E06               	addlw	6
 10561  01AA  0086               	movwf	6
 10562  01AB  3002               	movlw	2	; select bank4/5
 10563  01AC  0087               	movwf	7
 10564  01AD  3F40               	moviw [0]fsr1
 10565  01AE  00AD               	movwf	??_Load_Main
 10566  01AF  3F41               	moviw [1]fsr1
 10567  01B0  00AE               	movwf	??_Load_Main+1
 10568  01B1  082D               	movf	??_Load_Main,w
 10569  01B2  3E3A               	addlw	58
 10570  01B3  00AF               	movwf	??_Load_Main+2
 10571  01B4  3000               	movlw	0
 10572  01B5  3D2E               	addwfc	??_Load_Main+1,w
 10573  01B6  00B0               	movwf	??_Load_Main+3
 10574  01B7  086E               	movf	_Load,w
 10575  01B8  3E36               	addlw	54
 10576  01B9  0086               	movwf	6
 10577  01BA  3002               	movlw	2	; select bank4/5
 10578  01BB  0087               	movwf	7
 10579  01BC  082F               	movf	??_Load_Main+2,w
 10580  01BD  3FC0               	movwi [0]fsr1
 10581  01BE  0830               	movf	??_Load_Main+3,w
 10582  01BF  3FC1               	movwi [1]fsr1
 10583  01C0                     l9013:	
 10584                           
 10585                           ;OverLoad_B1.c: 94: }
 10586                           ;OverLoad_B1.c: 95: }
 10587                           ;OverLoad_B1.c: 96: }
 10588                           ;OverLoad_B1.c: 98: if(Load->AD >= Load->JudgeValue)
 10589  01C0  086E               	movf	_Load,w
 10590  01C1  3E36               	addlw	54
 10591  01C2  0086               	movwf	6
 10592  01C3  3002               	movlw	2	; select bank4/5
 10593  01C4  0087               	movwf	7
 10594  01C5  3F40               	moviw [0]fsr1
 10595  01C6  00AD               	movwf	??_Load_Main
 10596  01C7  3F41               	moviw [1]fsr1
 10597  01C8  00AE               	movwf	??_Load_Main+1
 10598  01C9  086E               	movf	_Load,w
 10599  01CA  3E2C               	addlw	44
 10600  01CB  0086               	movwf	6
 10601  01CC  3002               	movlw	2	; select bank4/5
 10602  01CD  0087               	movwf	7
 10603  01CE  3F40               	moviw [0]fsr1
 10604  01CF  00AF               	movwf	??_Load_Main+2
 10605  01D0  3F41               	moviw [1]fsr1
 10606  01D1  00B0               	movwf	??_Load_Main+3
 10607  01D2  082E               	movf	??_Load_Main+1,w
 10608  01D3  0230               	subwf	??_Load_Main+3,w
 10609  01D4  1D03               	skipz
 10610  01D5  29D8               	goto	u8765
 10611  01D6  082D               	movf	??_Load_Main,w
 10612  01D7  022F               	subwf	??_Load_Main+2,w
 10613  01D8                     u8765:	
 10614  01D8  1C03               	skipc
 10615  01D9  2A46               	goto	l9033
 10616                           
 10617                           ;OverLoad_B1.c: 99: {
 10618                           ;OverLoad_B1.c: 100: Load->ErrorCount++;
 10619  01DA  3001               	movlw	1
 10620  01DB  00AD               	movwf	??_Load_Main
 10621  01DC  086E               	movf	_Load,w
 10622  01DD  3E3C               	addlw	60
 10623  01DE  0086               	movwf	6
 10624  01DF  3002               	movlw	2	; select bank4/5
 10625  01E0  0087               	movwf	7
 10626  01E1  082D               	movf	??_Load_Main,w
 10627  01E2  0781               	addwf	1,f
 10628                           
 10629                           ;OverLoad_B1.c: 101: if(Load->ErrorCount >2)
 10630  01E3  086E               	movf	_Load,w
 10631  01E4  3E3C               	addlw	60
 10632  01E5  0086               	movwf	6
 10633  01E6  3002               	movlw	2	; select bank4/5
 10634  01E7  0087               	movwf	7
 10635  01E8  3003               	movlw	3
 10636  01E9  0201               	subwf	1,w
 10637  01EA  1C03               	skipc
 10638  01EB  2AC6               	goto	l9059
 10639                           
 10640                           ;OverLoad_B1.c: 102: {
 10641                           ;OverLoad_B1.c: 103: Load->ErrorCount=0;
 10642  01EC  086E               	movf	_Load,w
 10643  01ED  3E3C               	addlw	60
 10644  01EE  0086               	movwf	6
 10645  01EF  3002               	movlw	2	; select bank4/5
 10646  01F0  0087               	movwf	7
 10647  01F1  0181               	clrf	1
 10648                           
 10649                           ;OverLoad_B1.c: 104: setLoad_Exceptions(1);
 10650  01F2  3001               	movlw	1
 10651  01F3  3191  2115  3180   	fcall	_setLoad_Exceptions
 10652                           
 10653                           ;OverLoad_B1.c: 106: Product->Data[4]=(Load->AD >> 8);
 10654  01F6  0020               	movlb	0	; select bank0
 10655  01F7  086E               	movf	_Load,w
 10656  01F8  3E2C               	addlw	44
 10657  01F9  0086               	movwf	6
 10658  01FA  3002               	movlw	2	; select bank4/5
 10659  01FB  0087               	movwf	7
 10660  01FC  3F40               	moviw [0]fsr1
 10661  01FD  00AD               	movwf	??_Load_Main
 10662  01FE  3F41               	moviw [1]fsr1
 10663  01FF  00AE               	movwf	??_Load_Main+1
 10664  0200  082E               	movf	??_Load_Main+1,w
 10665  0201  00AF               	movwf	??_Load_Main+2
 10666  0202  086F               	movf	_Product,w
 10667  0203  3E04               	addlw	4
 10668  0204  0086               	movwf	6
 10669  0205  3001               	movlw	1	; select bank2/3
 10670  0206  0087               	movwf	7
 10671  0207  082F               	movf	??_Load_Main+2,w
 10672  0208  0081               	movwf	1
 10673                           
 10674                           ;OverLoad_B1.c: 107: Product->Data[5]=Load->AD;
 10675  0209  086E               	movf	_Load,w
 10676  020A  3E2C               	addlw	44
 10677  020B  0086               	movwf	6
 10678  020C  3002               	movlw	2	; select bank4/5
 10679  020D  0087               	movwf	7
 10680  020E  0801               	movf	1,w
 10681  020F  00AD               	movwf	??_Load_Main
 10682  0210  086F               	movf	_Product,w
 10683  0211  3E05               	addlw	5
 10684  0212  0086               	movwf	6
 10685  0213  3001               	movlw	1	; select bank2/3
 10686  0214  0087               	movwf	7
 10687  0215  082D               	movf	??_Load_Main,w
 10688  0216  0081               	movwf	1
 10689                           
 10690                           ;OverLoad_B1.c: 108: Product->Data[16]=(Load->JudgeValue >> 8);
 10691  0217  086E               	movf	_Load,w
 10692  0218  3E36               	addlw	54
 10693  0219  0086               	movwf	6
 10694  021A  3002               	movlw	2	; select bank4/5
 10695  021B  0087               	movwf	7
 10696  021C  3F40               	moviw [0]fsr1
 10697  021D  00AD               	movwf	??_Load_Main
 10698  021E  3F41               	moviw [1]fsr1
 10699  021F  00AE               	movwf	??_Load_Main+1
 10700  0220  082E               	movf	??_Load_Main+1,w
 10701  0221  00AF               	movwf	??_Load_Main+2
 10702  0222  086F               	movf	_Product,w
 10703  0223  3E10               	addlw	16
 10704  0224  0086               	movwf	6
 10705  0225  3001               	movlw	1	; select bank2/3
 10706  0226  0087               	movwf	7
 10707  0227  082F               	movf	??_Load_Main+2,w
 10708  0228  0081               	movwf	1
 10709                           
 10710                           ;OverLoad_B1.c: 109: Product->Data[17]=Load->JudgeValue;
 10711  0229  086E               	movf	_Load,w
 10712  022A  3E36               	addlw	54
 10713  022B  0086               	movwf	6
 10714  022C  3002               	movlw	2	; select bank4/5
 10715  022D  0087               	movwf	7
 10716  022E  0801               	movf	1,w
 10717  022F  00AD               	movwf	??_Load_Main
 10718  0230  086F               	movf	_Product,w
 10719  0231  3E11               	addlw	17
 10720  0232  0086               	movwf	6
 10721  0233  3001               	movlw	1	; select bank2/3
 10722  0234  0087               	movwf	7
 10723  0235  082D               	movf	??_Load_Main,w
 10724  0236  0081               	movwf	1
 10725                           
 10726                           ;OverLoad_B1.c: 110: Product->Data[8]=Load->LightsCount;
 10727  0237  086E               	movf	_Load,w
 10728  0238  3E3E               	addlw	62
 10729  0239  0086               	movwf	6
 10730  023A  3002               	movlw	2	; select bank4/5
 10731  023B  0087               	movwf	7
 10732  023C  0801               	movf	1,w
 10733  023D  00AD               	movwf	??_Load_Main
 10734  023E  086F               	movf	_Product,w
 10735  023F  3E08               	addlw	8
 10736  0240  0086               	movwf	6
 10737  0241  3001               	movlw	1	; select bank2/3
 10738  0242  0087               	movwf	7
 10739  0243  082D               	movf	??_Load_Main,w
 10740  0244  0081               	movwf	1
 10741                           
 10742                           ;OverLoad_B1.c: 113: }
 10743                           ;OverLoad_B1.c: 114: }
 10744  0245  2AC6               	goto	l9059
 10745  0246                     l9033:	
 10746                           
 10747                           ;OverLoad_B1.c: 115: else
 10748                           ;OverLoad_B1.c: 116: {
 10749                           ;OverLoad_B1.c: 117: Load->ErrorCount=0;
 10750  0246  086E               	movf	_Load,w
 10751  0247  3E3C               	addlw	60
 10752  0248  0086               	movwf	6
 10753  0249  3002               	movlw	2	; select bank4/5
 10754  024A  0087               	movwf	7
 10755  024B  0181               	clrf	1
 10756                           
 10757                           ;OverLoad_B1.c: 118: if(Load->SafeCount < 10)
 10758  024C  086E               	movf	_Load,w
 10759  024D  3E42               	addlw	66
 10760  024E  0086               	movwf	6
 10761  024F  3002               	movlw	2	; select bank4/5
 10762  0250  0087               	movwf	7
 10763  0251  300A               	movlw	10
 10764  0252  0201               	subwf	1,w
 10765  0253  1803               	skipnc
 10766  0254  2A5E               	goto	l9039
 10767                           
 10768                           ;OverLoad_B1.c: 119: {
 10769                           ;OverLoad_B1.c: 120: Load->SafeCount++;
 10770  0255  3001               	movlw	1
 10771  0256  00AD               	movwf	??_Load_Main
 10772  0257  086E               	movf	_Load,w
 10773  0258  3E42               	addlw	66
 10774  0259  0086               	movwf	6
 10775  025A  3002               	movlw	2	; select bank4/5
 10776  025B  0087               	movwf	7
 10777  025C  082D               	movf	??_Load_Main,w
 10778  025D  0781               	addwf	1,f
 10779  025E                     l9039:	
 10780                           
 10781                           ;OverLoad_B1.c: 121: }
 10782                           ;OverLoad_B1.c: 122: if(Load->SafeCount >= 10)
 10783  025E  086E               	movf	_Load,w
 10784  025F  3E42               	addlw	66
 10785  0260  0086               	movwf	6
 10786  0261  3002               	movlw	2	; select bank4/5
 10787  0262  0087               	movwf	7
 10788  0263  300A               	movlw	10
 10789  0264  0201               	subwf	1,w
 10790  0265  1C03               	skipc
 10791  0266  2AC6               	goto	l9059
 10792                           
 10793                           ;OverLoad_B1.c: 123: {
 10794                           ;OverLoad_B1.c: 124: Load->Safe=1;
 10795  0267  086E               	movf	_Load,w
 10796  0268  0086               	movwf	6
 10797  0269  3002               	movlw	2	; select bank4/5
 10798  026A  0087               	movwf	7
 10799  026B  1581               	bsf	1,3
 10800                           
 10801                           ;OverLoad_B1.c: 127: setDimmerLights_Clear(1,1);
 10802  026C  01A2               	clrf	setDimmerLights_Clear@command
 10803  026D  0AA2               	incf	setDimmerLights_Clear@command,f
 10804  026E  3001               	movlw	1
 10805  026F  3199  21B7  3180   	fcall	_setDimmerLights_Clear
 10806                           
 10807                           ;OverLoad_B1.c: 138: if(Load->StatusOn)
 10808  0272  0020               	movlb	0	; select bank0
 10809  0273  086E               	movf	_Load,w
 10810  0274  3E46               	addlw	70
 10811  0275  0086               	movwf	6
 10812  0276  3002               	movlw	2	; select bank4/5
 10813  0277  0087               	movwf	7
 10814  0278  1C01               	btfss	1,0
 10815  0279  2A8E               	goto	l9051
 10816                           
 10817                           ;OverLoad_B1.c: 139: {
 10818                           ;OverLoad_B1.c: 140: Load->StatusOn=0;
 10819  027A  086E               	movf	_Load,w
 10820  027B  3E46               	addlw	70
 10821  027C  0086               	movwf	6
 10822  027D  3002               	movlw	2	; select bank4/5
 10823  027E  0087               	movwf	7
 10824  027F  1001               	bcf	1,0
 10825                           
 10826                           ;OverLoad_B1.c: 141: Load->TotalLoad=Load->AD;
 10827  0280  086E               	movf	_Load,w
 10828  0281  3E2C               	addlw	44
 10829  0282  0086               	movwf	6
 10830  0283  3002               	movlw	2	; select bank4/5
 10831  0284  0087               	movwf	7
 10832  0285  086E               	movf	_Load,w
 10833  0286  3E06               	addlw	6
 10834  0287  0084               	movwf	4
 10835  0288  3002               	movlw	2	; select bank4/5
 10836  0289  0085               	movwf	5
 10837  028A  3F40               	moviw [0]fsr1
 10838  028B  3F80               	movwi [0]fsr0
 10839  028C  3F41               	moviw [1]fsr1
 10840  028D  3F81               	movwi [1]fsr0
 10841  028E                     l9051:	
 10842                           
 10843                           ;OverLoad_B1.c: 143: }
 10844                           ;OverLoad_B1.c: 145: if(Load->StatusOff)
 10845  028E  086E               	movf	_Load,w
 10846  028F  3E46               	addlw	70
 10847  0290  0086               	movwf	6
 10848  0291  3002               	movlw	2	; select bank4/5
 10849  0292  0087               	movwf	7
 10850  0293  1C81               	btfss	1,1
 10851  0294  2AC6               	goto	l9059
 10852                           
 10853                           ;OverLoad_B1.c: 146: {
 10854                           ;OverLoad_B1.c: 147: Load->StatusOff=0;
 10855  0295  086E               	movf	_Load,w
 10856  0296  3E46               	addlw	70
 10857  0297  0086               	movwf	6
 10858  0298  3002               	movlw	2	; select bank4/5
 10859  0299  0087               	movwf	7
 10860  029A  1081               	bcf	1,1
 10861                           
 10862                           ;OverLoad_B1.c: 148: Load->TotalLoad=Load->AD;
 10863  029B  086E               	movf	_Load,w
 10864  029C  3E2C               	addlw	44
 10865  029D  0086               	movwf	6
 10866  029E  3002               	movlw	2	; select bank4/5
 10867  029F  0087               	movwf	7
 10868  02A0  086E               	movf	_Load,w
 10869  02A1  3E06               	addlw	6
 10870  02A2  0084               	movwf	4
 10871  02A3  3002               	movlw	2	; select bank4/5
 10872  02A4  0085               	movwf	5
 10873  02A5  3F40               	moviw [0]fsr1
 10874  02A6  3F80               	movwi [0]fsr0
 10875  02A7  3F41               	moviw [1]fsr1
 10876  02A8  3F81               	movwi [1]fsr0
 10877                           
 10878                           ;OverLoad_B1.c: 149: Load->JudgeValue=0x42*Load->LightsCount;
 10879  02A9  086E               	movf	_Load,w
 10880  02AA  3E3E               	addlw	62
 10881  02AB  0086               	movwf	6
 10882  02AC  3002               	movlw	2	; select bank4/5
 10883  02AD  0087               	movwf	7
 10884  02AE  0801               	movf	1,w
 10885  02AF  00AD               	movwf	??_Load_Main
 10886  02B0  01AE               	clrf	??_Load_Main+1
 10887  02B1  082D               	movf	??_Load_Main,w
 10888  02B2  00A0               	movwf	___wmul@multiplier
 10889  02B3  082E               	movf	??_Load_Main+1,w
 10890  02B4  00A1               	movwf	___wmul@multiplier+1
 10891  02B5  3042               	movlw	66
 10892  02B6  00A2               	movwf	___wmul@multiplicand
 10893  02B7  3000               	movlw	0
 10894  02B8  00A3               	movwf	___wmul@multiplicand+1
 10895  02B9  319B  2331  3180   	fcall	___wmul
 10896  02BC  0020               	movlb	0	; select bank0
 10897  02BD  086E               	movf	_Load,w
 10898  02BE  3E36               	addlw	54
 10899  02BF  0086               	movwf	6
 10900  02C0  3002               	movlw	2	; select bank4/5
 10901  02C1  0087               	movwf	7
 10902  02C2  0820               	movf	?___wmul,w
 10903  02C3  3FC0               	movwi [0]fsr1
 10904  02C4  0821               	movf	?___wmul+1,w
 10905  02C5  3FC1               	movwi [1]fsr1
 10906  02C6                     l9059:	
 10907                           
 10908                           ;OverLoad_B1.c: 150: }
 10909                           ;OverLoad_B1.c: 151: }
 10910                           ;OverLoad_B1.c: 152: }
 10911                           ;OverLoad_B1.c: 153: }
 10912                           ;OverLoad_B1.c: 154: setLoad_AH_AL_Restore();
 10913  02C6  319B  23D2  3180   	fcall	_setLoad_AH_AL_Restore
 10914                           
 10915                           ;OverLoad_B1.c: 156: Product->Data[2]=(Load->AD >> 8);
 10916  02C9  0020               	movlb	0	; select bank0
 10917  02CA  086E               	movf	_Load,w
 10918  02CB  3E2C               	addlw	44
 10919  02CC  0086               	movwf	6
 10920  02CD  3002               	movlw	2	; select bank4/5
 10921  02CE  0087               	movwf	7
 10922  02CF  3F40               	moviw [0]fsr1
 10923  02D0  00AD               	movwf	??_Load_Main
 10924  02D1  3F41               	moviw [1]fsr1
 10925  02D2  00AE               	movwf	??_Load_Main+1
 10926  02D3  082E               	movf	??_Load_Main+1,w
 10927  02D4  00AF               	movwf	??_Load_Main+2
 10928  02D5  086F               	movf	_Product,w
 10929  02D6  3E02               	addlw	2
 10930  02D7  0086               	movwf	6
 10931  02D8  3001               	movlw	1	; select bank2/3
 10932  02D9  0087               	movwf	7
 10933  02DA  082F               	movf	??_Load_Main+2,w
 10934  02DB  0081               	movwf	1
 10935                           
 10936                           ;OverLoad_B1.c: 157: Product->Data[3]=Load->AD;
 10937  02DC  086E               	movf	_Load,w
 10938  02DD  3E2C               	addlw	44
 10939  02DE  0086               	movwf	6
 10940  02DF  3002               	movlw	2	; select bank4/5
 10941  02E0  0087               	movwf	7
 10942  02E1  0801               	movf	1,w
 10943  02E2  00AD               	movwf	??_Load_Main
 10944  02E3  086F               	movf	_Product,w
 10945  02E4  3E03               	addlw	3
 10946  02E5  0086               	movwf	6
 10947  02E6  3001               	movlw	1	; select bank2/3
 10948  02E7  0087               	movwf	7
 10949  02E8  082D               	movf	??_Load_Main,w
 10950  02E9  0081               	movwf	1
 10951                           
 10952                           ;OverLoad_B1.c: 158: Product->Data[8]=Load->LightsCount;
 10953  02EA  086E               	movf	_Load,w
 10954  02EB  3E3E               	addlw	62
 10955  02EC  0086               	movwf	6
 10956  02ED  3002               	movlw	2	; select bank4/5
 10957  02EE  0087               	movwf	7
 10958  02EF  0801               	movf	1,w
 10959  02F0  00AD               	movwf	??_Load_Main
 10960  02F1  086F               	movf	_Product,w
 10961  02F2  3E08               	addlw	8
 10962  02F3  0086               	movwf	6
 10963  02F4  3001               	movlw	1	; select bank2/3
 10964  02F5  0087               	movwf	7
 10965  02F6  082D               	movf	??_Load_Main,w
 10966  02F7  0081               	movwf	1
 10967                           
 10968                           ;OverLoad_B1.c: 159: Product->Data[10]=Load->TotalLoad;
 10969  02F8  086E               	movf	_Load,w
 10970  02F9  3E06               	addlw	6
 10971  02FA  0086               	movwf	6
 10972  02FB  3002               	movlw	2	; select bank4/5
 10973  02FC  0087               	movwf	7
 10974  02FD  0801               	movf	1,w
 10975  02FE  00AD               	movwf	??_Load_Main
 10976  02FF  086F               	movf	_Product,w
 10977  0300  3E0A               	addlw	10
 10978  0301  0086               	movwf	6
 10979  0302  3001               	movlw	1	; select bank2/3
 10980  0303  0087               	movwf	7
 10981  0304  082D               	movf	??_Load_Main,w
 10982  0305  0081               	movwf	1
 10983                           
 10984                           ;OverLoad_B1.c: 160: Product->Data[16]=(Load->JudgeValue >> 8);
 10985  0306  086E               	movf	_Load,w
 10986  0307  3E36               	addlw	54
 10987  0308  0086               	movwf	6
 10988  0309  3002               	movlw	2	; select bank4/5
 10989  030A  0087               	movwf	7
 10990  030B  3F40               	moviw [0]fsr1
 10991  030C  00AD               	movwf	??_Load_Main
 10992  030D  3F41               	moviw [1]fsr1
 10993  030E  00AE               	movwf	??_Load_Main+1
 10994  030F  082E               	movf	??_Load_Main+1,w
 10995  0310  00AF               	movwf	??_Load_Main+2
 10996  0311  086F               	movf	_Product,w
 10997  0312  3E10               	addlw	16
 10998  0313  0086               	movwf	6
 10999  0314  3001               	movlw	1	; select bank2/3
 11000  0315  0087               	movwf	7
 11001  0316  082F               	movf	??_Load_Main+2,w
 11002  0317  0081               	movwf	1
 11003                           
 11004                           ;OverLoad_B1.c: 161: Product->Data[17]=Load->JudgeValue;
 11005  0318  086E               	movf	_Load,w
 11006  0319  3E36               	addlw	54
 11007  031A  0086               	movwf	6
 11008  031B  3002               	movlw	2	; select bank4/5
 11009  031C  0087               	movwf	7
 11010  031D  0801               	movf	1,w
 11011  031E  00AD               	movwf	??_Load_Main
 11012  031F  086F               	movf	_Product,w
 11013  0320  3E11               	addlw	17
 11014  0321  0086               	movwf	6
 11015  0322  3001               	movlw	1	; select bank2/3
 11016  0323  0087               	movwf	7
 11017  0324  082D               	movf	??_Load_Main,w
 11018  0325  0081               	movwf	1
 11019                           
 11020                           ;OverLoad_B1.c: 162: Product->Data[18]=Load->ErrorStatus;
 11021  0326  086E               	movf	_Load,w
 11022  0327  3E05               	addlw	5
 11023  0328  0086               	movwf	6
 11024  0329  3002               	movlw	2	; select bank4/5
 11025  032A  0087               	movwf	7
 11026  032B  0801               	movf	1,w
 11027  032C  00AD               	movwf	??_Load_Main
 11028  032D  086F               	movf	_Product,w
 11029  032E  3E12               	addlw	18
 11030  032F  0086               	movwf	6
 11031  0330  3001               	movlw	1	; select bank2/3
 11032  0331  0087               	movwf	7
 11033  0332  082D               	movf	??_Load_Main,w
 11034  0333  0081               	movwf	1
 11035                           
 11036                           ;OverLoad_B1.c: 163: Product->Data[19]=Load->Count;
 11037  0334  086E               	movf	_Load,w
 11038  0335  3E3A               	addlw	58
 11039  0336  0086               	movwf	6
 11040  0337  3002               	movlw	2	; select bank4/5
 11041  0338  0087               	movwf	7
 11042  0339  0801               	movf	1,w
 11043  033A  00AD               	movwf	??_Load_Main
 11044  033B  086F               	movf	_Product,w
 11045  033C  3E13               	addlw	19
 11046  033D  0086               	movwf	6
 11047  033E  3001               	movlw	1	; select bank2/3
 11048  033F  0087               	movwf	7
 11049  0340  082D               	movf	??_Load_Main,w
 11050  0341  0081               	movwf	1
 11051                           
 11052                           ;OverLoad_B1.c: 166: }
 11053                           ;OverLoad_B1.c: 167: }
 11054  0342  0008               	return
 11055  0343                     l9077:	
 11056                           
 11057                           ;OverLoad_B1.c: 168: else
 11058                           ;OverLoad_B1.c: 169: {
 11059                           ;OverLoad_B1.c: 170: if(Load->GO)
 11060  0343  086E               	movf	_Load,w
 11061  0344  0086               	movwf	6
 11062  0345  3002               	movlw	2	; select bank4/5
 11063  0346  0087               	movwf	7
 11064  0347  1C81               	btfss	1,1
 11065  0348  2B66               	goto	l9087
 11066                           
 11067                           ;OverLoad_B1.c: 171: {
 11068                           ;OverLoad_B1.c: 172: if(!Load->LightsON)
 11069  0349  086E               	movf	_Load,w
 11070  034A  0086               	movwf	6
 11071  034B  3002               	movlw	2	; select bank4/5
 11072  034C  0087               	movwf	7
 11073  034D  1901               	btfsc	1,2
 11074  034E  2B59               	goto	l9083
 11075                           
 11076                           ;OverLoad_B1.c: 173: {
 11077                           ;OverLoad_B1.c: 174: Load->LightsON=1;
 11078  034F  086E               	movf	_Load,w
 11079  0350  0086               	movwf	6
 11080  0351  3002               	movlw	2	; select bank4/5
 11081  0352  0087               	movwf	7
 11082  0353  1501               	bsf	1,2
 11083                           
 11084                           ;OverLoad_B1.c: 175: Load->Safe=0;
 11085  0354  086E               	movf	_Load,w
 11086  0355  0086               	movwf	6
 11087  0356  3002               	movlw	2	; select bank4/5
 11088  0357  0087               	movwf	7
 11089  0358  1181               	bcf	1,3
 11090  0359                     l9083:	
 11091                           ;OverLoad_B1.c: 176: }
 11092                           ;OverLoad_B1.c: 177: if(1 && getPF_Safe())
 11093                           
 11094  0359  31A7  279A  3180   	fcall	_getPF_Safe
 11095  035C  3A00               	xorlw	0
 11096  035D  1903               	skipnz
 11097  035E  0008               	return
 11098                           
 11099                           ;OverLoad_B1.c: 178: {
 11100                           ;OverLoad_B1.c: 179: Load->ADtoGO=1;
 11101  035F  0020               	movlb	0	; select bank0
 11102  0360  086E               	movf	_Load,w
 11103  0361  0086               	movwf	6
 11104  0362  3002               	movlw	2	; select bank4/5
 11105  0363  0087               	movwf	7
 11106  0364  1601               	bsf	1,4
 11107                           
 11108                           ;OverLoad_B1.c: 180: }
 11109                           ;OverLoad_B1.c: 181: }
 11110  0365  0008               	return
 11111  0366                     l9087:	
 11112                           
 11113                           ;OverLoad_B1.c: 182: else
 11114                           ;OverLoad_B1.c: 183: {
 11115                           ;OverLoad_B1.c: 184: if(Load->LightsON)
 11116  0366  086E               	movf	_Load,w
 11117  0367  0086               	movwf	6
 11118  0368  3002               	movlw	2	; select bank4/5
 11119  0369  0087               	movwf	7
 11120  036A  1D01               	btfss	1,2
 11121  036B  0008               	return
 11122                           
 11123                           ;OverLoad_B1.c: 185: {
 11124                           ;OverLoad_B1.c: 186: Load->LightsON=0;
 11125  036C  086E               	movf	_Load,w
 11126  036D  0086               	movwf	6
 11127  036E  3002               	movlw	2	; select bank4/5
 11128  036F  0087               	movwf	7
 11129  0370  1101               	bcf	1,2
 11130                           
 11131                           ;OverLoad_B1.c: 187: Load->Safe=1;
 11132  0371  086E               	movf	_Load,w
 11133  0372  0086               	movwf	6
 11134  0373  3002               	movlw	2	; select bank4/5
 11135  0374  0087               	movwf	7
 11136  0375  1581               	bsf	1,3
 11137                           
 11138                           ;OverLoad_B1.c: 188: Load->ErrorCount=0;
 11139  0376  086E               	movf	_Load,w
 11140  0377  3E3C               	addlw	60
 11141  0378  0086               	movwf	6
 11142  0379  3002               	movlw	2	; select bank4/5
 11143  037A  0087               	movwf	7
 11144  037B  0181               	clrf	1
 11145                           
 11146                           ;OverLoad_B1.c: 189: Load->Count=0;
 11147  037C  086E               	movf	_Load,w
 11148  037D  3E3A               	addlw	58
 11149  037E  0086               	movwf	6
 11150  037F  3002               	movlw	2	; select bank4/5
 11151  0380  0087               	movwf	7
 11152  0381  0181               	clrf	1
 11153                           
 11154                           ;OverLoad_B1.c: 190: Load->TotalLoad=0;
 11155  0382  086E               	movf	_Load,w
 11156  0383  3E06               	addlw	6
 11157  0384  0086               	movwf	6
 11158  0385  3002               	movlw	2	; select bank4/5
 11159  0386  0087               	movwf	7
 11160  0387  3000               	movlw	0
 11161  0388  3FC0               	movwi [0]fsr1
 11162  0389  3FC1               	movwi [1]fsr1
 11163                           
 11164                           ;OverLoad_B1.c: 191: Load->NumberCount=0;
 11165  038A  086E               	movf	_Load,w
 11166  038B  3E3F               	addlw	63
 11167  038C  0086               	movwf	6
 11168  038D  3002               	movlw	2	; select bank4/5
 11169  038E  0087               	movwf	7
 11170  038F  0181               	clrf	1
 11171                           
 11172                           ;OverLoad_B1.c: 192: Load->StatusOn=0;
 11173  0390  086E               	movf	_Load,w
 11174  0391  3E46               	addlw	70
 11175  0392  0086               	movwf	6
 11176  0393  3002               	movlw	2	; select bank4/5
 11177  0394  0087               	movwf	7
 11178  0395  1001               	bcf	1,0
 11179                           
 11180                           ;OverLoad_B1.c: 193: Load->StatusOff=0;
 11181  0396  086E               	movf	_Load,w
 11182  0397  3E46               	addlw	70
 11183  0398  0086               	movwf	6
 11184  0399  3002               	movlw	2	; select bank4/5
 11185  039A  0087               	movwf	7
 11186  039B  1081               	bcf	1,1
 11187                           
 11188                           ;OverLoad_B1.c: 194: Load->AD=0;
 11189  039C  086E               	movf	_Load,w
 11190  039D  3E2C               	addlw	44
 11191  039E  0086               	movwf	6
 11192  039F  3002               	movlw	2	; select bank4/5
 11193  03A0  0087               	movwf	7
 11194  03A1  3000               	movlw	0
 11195  03A2  3FC0               	movwi [0]fsr1
 11196  03A3  3FC1               	movwi [1]fsr1
 11197                           
 11198                           ;OverLoad_B1.c: 195: setLoad_AH_AL_Restore();
 11199  03A4  319B  23D2  3180   	fcall	_setLoad_AH_AL_Restore
 11200                           
 11201                           ;OverLoad_B1.c: 198: setDimmerLights_Clear(1,1);
 11202  03A7  0020               	movlb	0	; select bank0
 11203  03A8  01A2               	clrf	setDimmerLights_Clear@command
 11204  03A9  0AA2               	incf	setDimmerLights_Clear@command,f
 11205  03AA  3001               	movlw	1
 11206  03AB  3199  21B7  3180   	fcall	_setDimmerLights_Clear
 11207                           
 11208                           ;OverLoad_B1.c: 209: Product->Data[2]=(Load->AD >> 8);
 11209  03AE  0020               	movlb	0	; select bank0
 11210  03AF  086E               	movf	_Load,w
 11211  03B0  3E2C               	addlw	44
 11212  03B1  0086               	movwf	6
 11213  03B2  3002               	movlw	2	; select bank4/5
 11214  03B3  0087               	movwf	7
 11215  03B4  3F40               	moviw [0]fsr1
 11216  03B5  00AD               	movwf	??_Load_Main
 11217  03B6  3F41               	moviw [1]fsr1
 11218  03B7  00AE               	movwf	??_Load_Main+1
 11219  03B8  082E               	movf	??_Load_Main+1,w
 11220  03B9  00AF               	movwf	??_Load_Main+2
 11221  03BA  086F               	movf	_Product,w
 11222  03BB  3E02               	addlw	2
 11223  03BC  0086               	movwf	6
 11224  03BD  3001               	movlw	1	; select bank2/3
 11225  03BE  0087               	movwf	7
 11226  03BF  082F               	movf	??_Load_Main+2,w
 11227  03C0  0081               	movwf	1
 11228                           
 11229                           ;OverLoad_B1.c: 210: Product->Data[3]=Load->AD;
 11230  03C1  086E               	movf	_Load,w
 11231  03C2  3E2C               	addlw	44
 11232  03C3  0086               	movwf	6
 11233  03C4  3002               	movlw	2	; select bank4/5
 11234  03C5  0087               	movwf	7
 11235  03C6  0801               	movf	1,w
 11236  03C7  00AD               	movwf	??_Load_Main
 11237  03C8  086F               	movf	_Product,w
 11238  03C9  3E03               	addlw	3
 11239  03CA  0086               	movwf	6
 11240  03CB  3001               	movlw	1	; select bank2/3
 11241  03CC  0087               	movwf	7
 11242  03CD  082D               	movf	??_Load_Main,w
 11243  03CE  0081               	movwf	1
 11244                           
 11245                           ;OverLoad_B1.c: 215: Product->Data[8]=Load->NumberCount;
 11246  03CF  086E               	movf	_Load,w
 11247  03D0  3E3F               	addlw	63
 11248  03D1  0086               	movwf	6
 11249  03D2  3002               	movlw	2	; select bank4/5
 11250  03D3  0087               	movwf	7
 11251  03D4  0801               	movf	1,w
 11252  03D5  00AD               	movwf	??_Load_Main
 11253  03D6  086F               	movf	_Product,w
 11254  03D7  3E08               	addlw	8
 11255  03D8  0086               	movwf	6
 11256  03D9  3001               	movlw	1	; select bank2/3
 11257  03DA  0087               	movwf	7
 11258  03DB  082D               	movf	??_Load_Main,w
 11259  03DC  0081               	movwf	1
 11260                           
 11261                           ;OverLoad_B1.c: 216: Product->Data[10]=Load->TotalLoad;
 11262  03DD  086E               	movf	_Load,w
 11263  03DE  3E06               	addlw	6
 11264  03DF  0086               	movwf	6
 11265  03E0  3002               	movlw	2	; select bank4/5
 11266  03E1  0087               	movwf	7
 11267  03E2  0801               	movf	1,w
 11268  03E3  00AD               	movwf	??_Load_Main
 11269  03E4  086F               	movf	_Product,w
 11270  03E5  3E0A               	addlw	10
 11271  03E6  0086               	movwf	6
 11272  03E7  3001               	movlw	1	; select bank2/3
 11273  03E8  0087               	movwf	7
 11274  03E9  082D               	movf	??_Load_Main,w
 11275  03EA  0081               	movwf	1
 11276                           
 11277                           ;OverLoad_B1.c: 217: Product->Data[16]=(Load->JudgeValue >> 8);
 11278  03EB  086E               	movf	_Load,w
 11279  03EC  3E36               	addlw	54
 11280  03ED  0086               	movwf	6
 11281  03EE  3002               	movlw	2	; select bank4/5
 11282  03EF  0087               	movwf	7
 11283  03F0  3F40               	moviw [0]fsr1
 11284  03F1  00AD               	movwf	??_Load_Main
 11285  03F2  3F41               	moviw [1]fsr1
 11286  03F3  00AE               	movwf	??_Load_Main+1
 11287  03F4  082E               	movf	??_Load_Main+1,w
 11288  03F5  00AF               	movwf	??_Load_Main+2
 11289  03F6  086F               	movf	_Product,w
 11290  03F7  3E10               	addlw	16
 11291  03F8  0086               	movwf	6
 11292  03F9  3001               	movlw	1	; select bank2/3
 11293  03FA  0087               	movwf	7
 11294  03FB  082F               	movf	??_Load_Main+2,w
 11295  03FC  0081               	movwf	1
 11296                           
 11297                           ;OverLoad_B1.c: 218: Product->Data[17]=Load->JudgeValue;
 11298  03FD  086E               	movf	_Load,w
 11299  03FE  3E36               	addlw	54
 11300  03FF  0086               	movwf	6
 11301  0400  3002               	movlw	2	; select bank4/5
 11302  0401  0087               	movwf	7
 11303  0402  0801               	movf	1,w
 11304  0403  00AD               	movwf	??_Load_Main
 11305  0404  086F               	movf	_Product,w
 11306  0405  3E11               	addlw	17
 11307  0406  0086               	movwf	6
 11308  0407  3001               	movlw	1	; select bank2/3
 11309  0408  0087               	movwf	7
 11310  0409  082D               	movf	??_Load_Main,w
 11311  040A  0081               	movwf	1
 11312                           
 11313                           ;OverLoad_B1.c: 219: Product->Data[18]=Load->ErrorStatus;
 11314  040B  086E               	movf	_Load,w
 11315  040C  3E05               	addlw	5
 11316  040D  0086               	movwf	6
 11317  040E  3002               	movlw	2	; select bank4/5
 11318  040F  0087               	movwf	7
 11319  0410  0801               	movf	1,w
 11320  0411  00AD               	movwf	??_Load_Main
 11321  0412  086F               	movf	_Product,w
 11322  0413  3E12               	addlw	18
 11323  0414  0086               	movwf	6
 11324  0415  3001               	movlw	1	; select bank2/3
 11325  0416  0087               	movwf	7
 11326  0417  082D               	movf	??_Load_Main,w
 11327  0418  0081               	movwf	1
 11328                           
 11329                           ;OverLoad_B1.c: 220: Product->Data[19]=Load->Count;
 11330  0419  086E               	movf	_Load,w
 11331  041A  3E3A               	addlw	58
 11332  041B  0086               	movwf	6
 11333  041C  3002               	movlw	2	; select bank4/5
 11334  041D  0087               	movwf	7
 11335  041E  0801               	movf	1,w
 11336  041F  00AD               	movwf	??_Load_Main
 11337  0420  086F               	movf	_Product,w
 11338  0421  3E13               	addlw	19
 11339  0422  0086               	movwf	6
 11340  0423  3001               	movlw	1	; select bank2/3
 11341  0424  0087               	movwf	7
 11342  0425  082D               	movf	??_Load_Main,w
 11343  0426  0081               	movwf	1
 11344  0427  0008               	return
 11345  0428                     __end_of_Load_Main:	
 11346                           
 11347                           	psect	text53
 11348  1115                     __ptext53:	
 11349 ;; *************** function _setLoad_Exceptions *****************
 11350 ;; Defined at:
 11351 ;;		line 228 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 11352 ;; Parameters:    Size  Location     Type
 11353 ;;  command         1    wreg     unsigned char 
 11354 ;; Auto vars:     Size  Location     Type
 11355 ;;  command         1   12[BANK0 ] unsigned char 
 11356 ;; Return value:  Size  Location     Type
 11357 ;;		None               void
 11358 ;; Registers used:
 11359 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11360 ;; Tracked objects:
 11361 ;;		On entry : 0/0
 11362 ;;		On exit  : 0/0
 11363 ;;		Unchanged: 0/0
 11364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;Total ram usage:        2 bytes
 11370 ;; Hardware stack levels used:    1
 11371 ;; Hardware stack levels required when called:    8
 11372 ;; This function calls:
 11373 ;;		_DimmerLights_Exceptions
 11374 ;;		_setLED
 11375 ;;		_setRF_Enable
 11376 ;;		_setSw_Enable
 11377 ;; This function is called by:
 11378 ;;		_Load_Main
 11379 ;; This function uses a non-reentrant model
 11380 ;;
 11381                           
 11382                           
 11383                           ;psect for function _setLoad_Exceptions
 11384  1115                     _setLoad_Exceptions:	
 11385                           
 11386                           ;incstack = 0
 11387                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11388                           ;setLoad_Exceptions@command stored from wreg
 11389  1115  0020               	movlb	0	; select bank0
 11390  1116  00AC               	movwf	setLoad_Exceptions@command
 11391                           
 11392                           ;OverLoad_B1.c: 230: Load->ERROR=command;
 11393  1117  086E               	movf	_Load,w
 11394  1118  0086               	movwf	6
 11395  1119  3002               	movlw	2	; select bank4/5
 11396  111A  0087               	movwf	7
 11397  111B  082C               	movf	setLoad_Exceptions@command,w
 11398  111C  1281               	bcf	1,5
 11399  111D  1D03               	skipz
 11400  111E  1681               	bsf	1,5
 11401                           
 11402                           ;OverLoad_B1.c: 231: Load->Safe=(~command) & 0x01;
 11403  111F  092C               	comf	setLoad_Exceptions@command,w
 11404  1120  3901               	andlw	1
 11405  1121  00AB               	movwf	??_setLoad_Exceptions
 11406  1122  086E               	movf	_Load,w
 11407  1123  0086               	movwf	6
 11408  1124  3002               	movlw	2	; select bank4/5
 11409  1125  0087               	movwf	7
 11410  1126  0DAB               	rlf	??_setLoad_Exceptions,f
 11411  1127  0DAB               	rlf	??_setLoad_Exceptions,f
 11412  1128  0DAB               	rlf	??_setLoad_Exceptions,f
 11413  1129  0801               	movf	1,w
 11414  112A  062B               	xorwf	??_setLoad_Exceptions,w
 11415  112B  39F7               	andlw	-9
 11416  112C  062B               	xorwf	??_setLoad_Exceptions,w
 11417  112D  0081               	movwf	1
 11418                           
 11419                           ;OverLoad_B1.c: 232: Load->ErrorStatus=command;
 11420  112E  082C               	movf	setLoad_Exceptions@command,w
 11421  112F  00AB               	movwf	??_setLoad_Exceptions
 11422  1130  086E               	movf	_Load,w
 11423  1131  3E05               	addlw	5
 11424  1132  0086               	movwf	6
 11425  1133  3002               	movlw	2	; select bank4/5
 11426  1134  0087               	movwf	7
 11427  1135  082B               	movf	??_setLoad_Exceptions,w
 11428  1136  0081               	movwf	1
 11429                           
 11430                           ;OverLoad_B1.c: 234: if(command)
 11431  1137  082C               	movf	setLoad_Exceptions@command,w
 11432  1138  1903               	btfsc	3,2
 11433  1139  2945               	goto	l1761
 11434                           
 11435                           ;OverLoad_B1.c: 235: {
 11436                           ;OverLoad_B1.c: 236: DimmerLights_Exceptions(2);
 11437  113A  3002               	movlw	2
 11438  113B  3192  2261  3191   	fcall	_DimmerLights_Exceptions
 11439                           
 11440                           ;OverLoad_B1.c: 238: setLED(2,1);
 11441  113E  0020               	movlb	0	; select bank0
 11442  113F  01A2               	clrf	setLED@command
 11443  1140  0AA2               	incf	setLED@command,f
 11444  1141  3002               	movlw	2
 11445  1142  3193  2372  3191   	fcall	_setLED
 11446  1145                     l1761:	
 11447                           
 11448                           ;OverLoad_B1.c: 240: }
 11449                           ;OverLoad_B1.c: 241: setLED(99,command+10);
 11450  1145  0020               	movlb	0	; select bank0
 11451  1146  082C               	movf	setLoad_Exceptions@command,w
 11452  1147  3E0A               	addlw	10
 11453  1148  00AB               	movwf	??_setLoad_Exceptions
 11454  1149  082B               	movf	??_setLoad_Exceptions,w
 11455  114A  00A2               	movwf	setLED@command
 11456  114B  3063               	movlw	99
 11457  114C  3193  2372  3191   	fcall	_setLED
 11458                           
 11459                           ;OverLoad_B1.c: 243: setSw_Enable((~command) & 0x01);
 11460  114F  0020               	movlb	0	; select bank0
 11461  1150  092C               	comf	setLoad_Exceptions@command,w
 11462  1151  3901               	andlw	1
 11463  1152  3199  2178  3191   	fcall	_setSw_Enable
 11464                           
 11465                           ;OverLoad_B1.c: 245: setRF_Enable(1,(~command) & 0x01);
 11466  1155  0020               	movlb	0	; select bank0
 11467  1156  092C               	comf	setLoad_Exceptions@command,w
 11468  1157  3901               	andlw	1
 11469  1158  00AB               	movwf	??_setLoad_Exceptions
 11470  1159  082B               	movf	??_setLoad_Exceptions,w
 11471  115A  00A2               	movwf	setRF_Enable@command
 11472  115B  3001               	movlw	1
 11473  115C  319C  24B4         	fcall	_setRF_Enable
 11474  115E  0008               	return
 11475  115F                     __end_of_setLoad_Exceptions:	
 11476                           
 11477                           	psect	text54
 11478  1978                     __ptext54:	
 11479 ;; *************** function _setSw_Enable *****************
 11480 ;; Defined at:
 11481 ;;		line 86 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;  command         1    wreg     unsigned char 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  command         1    2[BANK0 ] unsigned char 
 11486 ;; Return value:  Size  Location     Type
 11487 ;;		None               void
 11488 ;; Registers used:
 11489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;Total ram usage:        1 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    5
 11502 ;; This function calls:
 11503 ;;		_SwPointSelect
 11504 ;; This function is called by:
 11505 ;;		_MainT
 11506 ;;		_setLoad_Exceptions
 11507 ;;		_setPowerFault_Exceptions
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           
 11512                           ;psect for function _setSw_Enable
 11513  1978                     _setSw_Enable:	
 11514                           
 11515                           ;incstack = 0
 11516                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11517                           ;setSw_Enable@command stored from wreg
 11518  1978  0020               	movlb	0	; select bank0
 11519  1979  00A2               	movwf	setSw_Enable@command
 11520                           
 11521                           ;Switch_B1.c: 90: SwPointSelect(1);
 11522  197A  3001               	movlw	1
 11523  197B  31A7  27F5         	fcall	_SwPointSelect
 11524                           
 11525                           ;Switch_B1.c: 91: Sw->Enable=command;
 11526  197D  0020               	movlb	0	; select bank0
 11527  197E  086D               	movf	_Sw,w
 11528  197F  0086               	movwf	6
 11529  1980  3001               	movlw	1	; select bank2/3
 11530  1981  0087               	movwf	7
 11531  1982  0822               	movf	setSw_Enable@command,w
 11532  1983  1001               	bcf	1,0
 11533  1984  1D03               	skipz
 11534  1985  1401               	bsf	1,0
 11535  1986  0008               	return
 11536  1987                     __end_of_setSw_Enable:	
 11537                           
 11538                           	psect	text55
 11539  1CB4                     __ptext55:	
 11540 ;; *************** function _setRF_Enable *****************
 11541 ;; Defined at:
 11542 ;;		line 185 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 11543 ;; Parameters:    Size  Location     Type
 11544 ;;  rf              1    wreg     unsigned char 
 11545 ;;  command         1    2[BANK0 ] unsigned char 
 11546 ;; Auto vars:     Size  Location     Type
 11547 ;;  rf              1    3[BANK0 ] unsigned char 
 11548 ;; Return value:  Size  Location     Type
 11549 ;;		None               void
 11550 ;; Registers used:
 11551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11552 ;; Tracked objects:
 11553 ;;		On entry : 0/0
 11554 ;;		On exit  : 0/0
 11555 ;;		Unchanged: 0/0
 11556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11557 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;Total ram usage:        2 bytes
 11562 ;; Hardware stack levels used:    1
 11563 ;; Hardware stack levels required when called:    5
 11564 ;; This function calls:
 11565 ;;		_RfPointSelect
 11566 ;;		_setINT_GO
 11567 ;; This function is called by:
 11568 ;;		_MainT
 11569 ;;		_setLoad_Exceptions
 11570 ;;		_setPowerFault_Exceptions
 11571 ;; This function uses a non-reentrant model
 11572 ;;
 11573                           
 11574                           
 11575                           ;psect for function _setRF_Enable
 11576  1CB4                     _setRF_Enable:	
 11577                           
 11578                           ;incstack = 0
 11579                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11580                           ;setRF_Enable@rf stored from wreg
 11581  1CB4  0020               	movlb	0	; select bank0
 11582  1CB5  00A3               	movwf	setRF_Enable@rf
 11583                           
 11584                           ;RF_Control_B1.c: 187: RfPointSelect(rf);
 11585  1CB6  0823               	movf	setRF_Enable@rf,w
 11586  1CB7  3198  2070  319C   	fcall	_RfPointSelect
 11587                           
 11588                           ;RF_Control_B1.c: 188: RF->Enable=command;
 11589  1CBA  087B               	movf	_RF,w
 11590  1CBB  0086               	movwf	6
 11591  1CBC  0187               	clrf	7
 11592  1CBD  0020               	movlb	0	; select bank0
 11593  1CBE  0822               	movf	setRF_Enable@command,w
 11594  1CBF  1001               	bcf	1,0
 11595  1CC0  1D03               	skipz
 11596  1CC1  1401               	bsf	1,0
 11597                           
 11598                           ;RF_Control_B1.c: 189: RF->Learn=0;
 11599  1CC2  087B               	movf	_RF,w
 11600  1CC3  0086               	movwf	6
 11601  1CC4  0187               	clrf	7
 11602  1CC5  1301               	bcf	1,6
 11603                           
 11604                           ;RF_Control_B1.c: 190: RF->TransceiveGO=0;
 11605  1CC6  087B               	movf	_RF,w
 11606  1CC7  0086               	movwf	6
 11607  1CC8  0187               	clrf	7
 11608  1CC9  1101               	bcf	1,2
 11609                           
 11610                           ;RF_Control_B1.c: 191: RF->RxStatus=0;
 11611  1CCA  087B               	movf	_RF,w
 11612  1CCB  0086               	movwf	6
 11613  1CCC  0187               	clrf	7
 11614  1CCD  1181               	bcf	1,3
 11615                           
 11616                           ;RF_Control_B1.c: 192: RF->ReceiveGO=0;
 11617  1CCE  087B               	movf	_RF,w
 11618  1CCF  0086               	movwf	6
 11619  1CD0  0187               	clrf	7
 11620  1CD1  1081               	bcf	1,1
 11621                           
 11622                           ;RF_Control_B1.c: 193: RF->DebounceTime=0;
 11623  1CD2  0A7B               	incf	_RF,w
 11624  1CD3  0086               	movwf	6
 11625  1CD4  0187               	clrf	7
 11626  1CD5  0181               	clrf	1
 11627                           
 11628                           ;RF_Control_B1.c: 194: RF->Debounce=0;
 11629  1CD6  087B               	movf	_RF,w
 11630  1CD7  0086               	movwf	6
 11631  1CD8  0187               	clrf	7
 11632  1CD9  1281               	bcf	1,5
 11633                           
 11634                           ;RF_Control_B1.c: 195: setINT_GO(0);
 11635  1CDA  3000               	movlw	0
 11636  1CDB  31A7  27B8         	fcall	_setINT_GO
 11637  1CDD  0008               	return
 11638  1CDE                     __end_of_setRF_Enable:	
 11639                           
 11640                           	psect	text56
 11641  27B8                     __ptext56:	
 11642 ;; *************** function _setINT_GO *****************
 11643 ;; Defined at:
 11644 ;;		line 246 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 11645 ;; Parameters:    Size  Location     Type
 11646 ;;  command         1    wreg     unsigned char 
 11647 ;; Auto vars:     Size  Location     Type
 11648 ;;  command         1    0[BANK0 ] unsigned char 
 11649 ;; Return value:  Size  Location     Type
 11650 ;;		None               void
 11651 ;; Registers used:
 11652 ;;		wreg
 11653 ;; Tracked objects:
 11654 ;;		On entry : 0/0
 11655 ;;		On exit  : 0/0
 11656 ;;		Unchanged: 0/0
 11657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;Total ram usage:        1 bytes
 11663 ;; Hardware stack levels used:    1
 11664 ;; Hardware stack levels required when called:    4
 11665 ;; This function calls:
 11666 ;;		Nothing
 11667 ;; This function is called by:
 11668 ;;		_setRF_Main
 11669 ;;		_setRF_Enable
 11670 ;;		_RF_RxDisable
 11671 ;; This function uses a non-reentrant model
 11672 ;;
 11673                           
 11674                           
 11675                           ;psect for function _setINT_GO
 11676  27B8                     _setINT_GO:	
 11677                           
 11678                           ;incstack = 0
 11679                           ; Regs used in _setINT_GO: [wreg]
 11680                           ;setINT_GO@command stored from wreg
 11681  27B8  0020               	movlb	0	; select bank0
 11682  27B9  00A0               	movwf	setINT_GO@command
 11683                           
 11684                           ;MCU_16f1518_B1.c: 248: INTF=0;
 11685  27BA  108B               	bcf	11,1	;volatile
 11686                           
 11687                           ;MCU_16f1518_B1.c: 249: INTE=command;
 11688  27BB  1C20               	btfss	setINT_GO@command,0
 11689  27BC  2FBF               	goto	u7350
 11690  27BD  160B               	bsf	11,4	;volatile
 11691  27BE  0008               	return
 11692  27BF                     u7350:	
 11693  27BF  120B               	bcf	11,4	;volatile
 11694  27C0  0008               	return
 11695  27C1                     __end_of_setINT_GO:	
 11696                           
 11697                           	psect	text57
 11698  1261                     __ptext57:	
 11699 ;; *************** function _DimmerLights_Exceptions *****************
 11700 ;; Defined at:
 11701 ;;		line 237 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;  status          1    wreg     unsigned char 
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;  status          1   10[BANK0 ] unsigned char 
 11706 ;; Return value:  Size  Location     Type
 11707 ;;		None               void
 11708 ;; Registers used:
 11709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/0
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;Total ram usage:        1 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    7
 11722 ;; This function calls:
 11723 ;;		_getDimmerLights_StatusFlag
 11724 ;;		_setBuz
 11725 ;;		_setDimmerLights_ERROR
 11726 ;;		_setDimmerLights_TriggerERROR
 11727 ;; This function is called by:
 11728 ;;		_setLoad_Exceptions
 11729 ;;		_setPowerFault_Exceptions
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           
 11734                           ;psect for function _DimmerLights_Exceptions
 11735  1261                     _DimmerLights_Exceptions:	
 11736                           
 11737                           ;incstack = 0
 11738                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11739                           ;DimmerLights_Exceptions@status stored from wreg
 11740  1261  0020               	movlb	0	; select bank0
 11741  1262  00AA               	movwf	DimmerLights_Exceptions@status
 11742                           
 11743                           ;Dimmer_B1.c: 239: if(status == 1)
 11744  1263  082A               	movf	DimmerLights_Exceptions@status,w
 11745  1264  3A01               	xorlw	1
 11746  1265  1D03               	skipz
 11747  1266  2A77               	goto	l8047
 11748                           
 11749                           ;Dimmer_B1.c: 240: {
 11750                           ;Dimmer_B1.c: 241: if(getDimmerLights_StatusFlag())
 11751  1267  3198  20D9  3192   	fcall	_getDimmerLights_StatusFlag
 11752  126A  3A00               	xorlw	0
 11753  126B  1903               	skipnz
 11754  126C  2A8F               	goto	l8053
 11755                           
 11756                           ;Dimmer_B1.c: 242: {
 11757                           ;Dimmer_B1.c: 243: setBuz(10,300);
 11758  126D  302C               	movlw	44
 11759  126E  0020               	movlb	0	; select bank0
 11760  126F  00A6               	movwf	setBuz@time
 11761  1270  3001               	movlw	1
 11762  1271  00A7               	movwf	setBuz@time+1
 11763  1272  300A               	movlw	10
 11764  1273  3197  2789  3192   	fcall	_setBuz
 11765  1276  2A8F               	goto	l8053
 11766  1277                     l8047:	
 11767                           ;Dimmer_B1.c: 255: }
 11768                           
 11769                           ;Dimmer_B1.c: 244: }
 11770                           ;Dimmer_B1.c: 247: setDimmerLights_ERROR(1);
 11771                           
 11772                           
 11773                           ;Dimmer_B1.c: 256: else if(status == 2)
 11774  1277  0020               	movlb	0	; select bank0
 11775  1278  082A               	movf	DimmerLights_Exceptions@status,w
 11776  1279  3A02               	xorlw	2
 11777  127A  1D03               	skipz
 11778  127B  2A8A               	goto	l8051
 11779                           
 11780                           ;Dimmer_B1.c: 257: {
 11781                           ;Dimmer_B1.c: 258: setBuz(5,300);
 11782  127C  302C               	movlw	44
 11783  127D  00A6               	movwf	setBuz@time
 11784  127E  3001               	movlw	1
 11785  127F  00A7               	movwf	setBuz@time+1
 11786  1280  3005               	movlw	5
 11787  1281  3197  2789  3192   	fcall	_setBuz
 11788                           
 11789                           ;Dimmer_B1.c: 259: setDimmerLights_ERROR(Dimmer->Load);
 11790  1284  0021               	movlb	1	; select bank1
 11791  1285  0A39               	incf	_Dimmer^(0+128),w
 11792  1286  0086               	movwf	6
 11793  1287  0187               	clrf	7
 11794  1288  0801               	movf	1,w
 11795  1289  2A90               	goto	L10
 11796  128A                     l8051:	
 11797                           ;Dimmer_B1.c: 260: }
 11798                           
 11799                           
 11800                           ;Dimmer_B1.c: 261: else if(status == 3)
 11801  128A  0020               	movlb	0	; select bank0
 11802  128B  082A               	movf	DimmerLights_Exceptions@status,w
 11803  128C  3A03               	xorlw	3
 11804  128D  1D03               	skipz
 11805  128E  2A93               	goto	l844
 11806  128F                     l8053:	
 11807                           
 11808                           ;Dimmer_B1.c: 262: {
 11809                           ;Dimmer_B1.c: 264: setDimmerLights_ERROR(1);
 11810  128F  3001               	movlw	1
 11811  1290                     L10:	
 11812  1290  3191  21B1  3192   	fcall	_setDimmerLights_ERROR
 11813  1293                     l844:	
 11814                           
 11815                           ;Dimmer_B1.c: 272: }
 11816                           ;Dimmer_B1.c: 275: setDimmerLights_TriggerERROR(1,0);
 11817  1293  0020               	movlb	0	; select bank0
 11818  1294  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11819  1295  3001               	movlw	1
 11820  1296  319C  24DE  3192   	fcall	_setDimmerLights_TriggerERROR
 11821                           
 11822                           ;Dimmer_B1.c: 284: if(TMain->SelfTest == 0)
 11823  1299  087D               	movf	_TMain,w
 11824  129A  3E03               	addlw	3
 11825  129B  0086               	movwf	6
 11826  129C  3001               	movlw	1	; select bank2/3
 11827  129D  0087               	movwf	7
 11828  129E  1801               	btfsc	1,0
 11829  129F  0008               	return
 11830                           
 11831                           ;Dimmer_B1.c: 285: {
 11832                           ;Dimmer_B1.c: 286: TMain->i=0;
 11833  12A0  087D               	movf	_TMain,w
 11834  12A1  3E0E               	addlw	14
 11835  12A2  0086               	movwf	6
 11836  12A3  3001               	movlw	1	; select bank2/3
 11837  12A4  0087               	movwf	7
 11838  12A5  1001               	bcf	1,0
 11839                           
 11840                           ;Dimmer_B1.c: 287: TMain->j=0;
 11841  12A6  087D               	movf	_TMain,w
 11842  12A7  3E0E               	addlw	14
 11843  12A8  0086               	movwf	6
 11844  12A9  3001               	movlw	1	; select bank2/3
 11845  12AA  0087               	movwf	7
 11846  12AB  1081               	bcf	1,1
 11847                           
 11848                           ;Dimmer_B1.c: 288: TMain->k=1;
 11849  12AC  087D               	movf	_TMain,w
 11850  12AD  3E0E               	addlw	14
 11851  12AE  0086               	movwf	6
 11852  12AF  3001               	movlw	1	; select bank2/3
 11853  12B0  0087               	movwf	7
 11854  12B1  1501               	bsf	1,2
 11855                           
 11856                           ;Dimmer_B1.c: 289: TMain->Count2=0;
 11857  12B2  087D               	movf	_TMain,w
 11858  12B3  3E08               	addlw	8
 11859  12B4  0086               	movwf	6
 11860  12B5  3001               	movlw	1	; select bank2/3
 11861  12B6  0087               	movwf	7
 11862  12B7  3000               	movlw	0
 11863  12B8  3FC0               	movwi [0]fsr1
 11864  12B9  3FC1               	movwi [1]fsr1
 11865  12BA  0008               	return
 11866  12BB                     __end_of_DimmerLights_Exceptions:	
 11867                           
 11868                           	psect	text58
 11869  1CDE                     __ptext58:	
 11870 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11871 ;; Defined at:
 11872 ;;		line 311 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;  lights          1    wreg     unsigned char 
 11875 ;;  command         1    2[BANK0 ] unsigned char 
 11876 ;; Auto vars:     Size  Location     Type
 11877 ;;  lights          1    3[BANK0 ] unsigned char 
 11878 ;; Return value:  Size  Location     Type
 11879 ;;		None               void
 11880 ;; Registers used:
 11881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11882 ;; Tracked objects:
 11883 ;;		On entry : 0/0
 11884 ;;		On exit  : 0/0
 11885 ;;		Unchanged: 0/0
 11886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11887 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;Total ram usage:        2 bytes
 11892 ;; Hardware stack levels used:    1
 11893 ;; Hardware stack levels required when called:    5
 11894 ;; This function calls:
 11895 ;;		_DimmerLightsPointSelect
 11896 ;; This function is called by:
 11897 ;;		_DimmerLights_Exceptions
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           
 11902                           ;psect for function _setDimmerLights_TriggerERROR
 11903  1CDE                     _setDimmerLights_TriggerERROR:	
 11904                           
 11905                           ;incstack = 0
 11906                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11907                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11908  1CDE  0020               	movlb	0	; select bank0
 11909  1CDF  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11910                           
 11911                           ;Dimmer_B1.c: 313: DimmerLightsPointSelect(lights);
 11912  1CE0  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11913  1CE1  31A7  27EA         	fcall	_DimmerLightsPointSelect
 11914                           
 11915                           ;Dimmer_B1.c: 314: DimmerLights->Trigger=command;
 11916  1CE3  0020               	movlb	0	; select bank0
 11917  1CE4  086C               	movf	_DimmerLights,w
 11918  1CE5  3E09               	addlw	9
 11919  1CE6  0086               	movwf	6
 11920  1CE7  3001               	movlw	1	; select bank2/3
 11921  1CE8  0087               	movwf	7
 11922  1CE9  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11923  1CEA  1081               	bcf	1,1
 11924  1CEB  1D03               	skipz
 11925  1CEC  1481               	bsf	1,1
 11926                           
 11927                           ;Dimmer_B1.c: 315: DimmerLights->Switch=command;
 11928  1CED  086C               	movf	_DimmerLights,w
 11929  1CEE  3E09               	addlw	9
 11930  1CEF  0086               	movwf	6
 11931  1CF0  3001               	movlw	1	; select bank2/3
 11932  1CF1  0087               	movwf	7
 11933  1CF2  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11934  1CF3  1001               	bcf	1,0
 11935  1CF4  1D03               	skipz
 11936  1CF5  1401               	bsf	1,0
 11937                           
 11938                           ;Dimmer_B1.c: 316: DimmerLights->TriggerAdj=command;
 11939  1CF6  086C               	movf	_DimmerLights,w
 11940  1CF7  3E09               	addlw	9
 11941  1CF8  0086               	movwf	6
 11942  1CF9  3001               	movlw	1	; select bank2/3
 11943  1CFA  0087               	movwf	7
 11944  1CFB  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11945  1CFC  1181               	bcf	1,3
 11946  1CFD  1D03               	skipz
 11947  1CFE  1581               	bsf	1,3
 11948                           
 11949                           ;Dimmer_B1.c: 317: DimmerLights->AdjGo=command;
 11950  1CFF  086C               	movf	_DimmerLights,w
 11951  1D00  3E09               	addlw	9
 11952  1D01  0086               	movwf	6
 11953  1D02  3001               	movlw	1	; select bank2/3
 11954  1D03  0087               	movwf	7
 11955  1D04  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11956  1D05  1101               	bcf	1,2
 11957  1D06  1D03               	skipz
 11958  1D07  1501               	bsf	1,2
 11959  1D08  0008               	return
 11960  1D09                     __end_of_setDimmerLights_TriggerERROR:	
 11961                           
 11962                           	psect	text59
 11963  11B1                     __ptext59:	
 11964 ;; *************** function _setDimmerLights_ERROR *****************
 11965 ;; Defined at:
 11966 ;;		line 293 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;  lights          1    wreg     unsigned char 
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;  lights          1    5[BANK0 ] unsigned char 
 11971 ;; Return value:  Size  Location     Type
 11972 ;;		None               void
 11973 ;; Registers used:
 11974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11975 ;; Tracked objects:
 11976 ;;		On entry : 0/0
 11977 ;;		On exit  : 0/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;Total ram usage:        2 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; Hardware stack levels required when called:    6
 11987 ;; This function calls:
 11988 ;;		_DimmerLightsPointSelect
 11989 ;;		_setLED
 11990 ;;		_setLoad_StatusOff
 11991 ;;		_setRFSW_Status
 11992 ;;		_setSw_Status
 11993 ;; This function is called by:
 11994 ;;		_DimmerLights_Exceptions
 11995 ;; This function uses a non-reentrant model
 11996 ;;
 11997                           
 11998                           
 11999                           ;psect for function _setDimmerLights_ERROR
 12000  11B1                     _setDimmerLights_ERROR:	
 12001                           
 12002                           ;incstack = 0
 12003                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12004                           ;setDimmerLights_ERROR@lights stored from wreg
 12005  11B1  0020               	movlb	0	; select bank0
 12006  11B2  00A5               	movwf	setDimmerLights_ERROR@lights
 12007                           
 12008                           ;Dimmer_B1.c: 295: DimmerLightsPointSelect(lights);
 12009  11B3  0825               	movf	setDimmerLights_ERROR@lights,w
 12010  11B4  31A7  27EA  3191   	fcall	_DimmerLightsPointSelect
 12011                           
 12012                           ;Dimmer_B1.c: 296: if(DimmerLights->Status)
 12013  11B7  0020               	movlb	0	; select bank0
 12014  11B8  086C               	movf	_DimmerLights,w
 12015  11B9  0086               	movwf	6
 12016  11BA  3001               	movlw	1	; select bank2/3
 12017  11BB  0087               	movwf	7
 12018  11BC  1E81               	btfss	1,5
 12019  11BD  0008               	return
 12020                           
 12021                           ;Dimmer_B1.c: 297: {
 12022                           ;Dimmer_B1.c: 298: DimmerLights->Signal=0;
 12023  11BE  086C               	movf	_DimmerLights,w
 12024  11BF  0086               	movwf	6
 12025  11C0  3001               	movlw	1	; select bank2/3
 12026  11C1  0087               	movwf	7
 12027  11C2  1081               	bcf	1,1
 12028                           
 12029                           ;Dimmer_B1.c: 299: DimmerLights->AdjFlag=0;
 12030  11C3  086C               	movf	_DimmerLights,w
 12031  11C4  0086               	movwf	6
 12032  11C5  3001               	movlw	1	; select bank2/3
 12033  11C6  0087               	movwf	7
 12034  11C7  1181               	bcf	1,3
 12035                           
 12036                           ;Dimmer_B1.c: 300: DimmerLights->AdjStatus=0;
 12037  11C8  086C               	movf	_DimmerLights,w
 12038  11C9  0086               	movwf	6
 12039  11CA  3001               	movlw	1	; select bank2/3
 12040  11CB  0087               	movwf	7
 12041  11CC  1201               	bcf	1,4
 12042                           
 12043                           ;Dimmer_B1.c: 301: DimmerLights->StatusFlag=0;
 12044  11CD  086C               	movf	_DimmerLights,w
 12045  11CE  0086               	movwf	6
 12046  11CF  3001               	movlw	1	; select bank2/3
 12047  11D0  0087               	movwf	7
 12048  11D1  1301               	bcf	1,6
 12049                           
 12050                           ;Dimmer_B1.c: 302: DimmerLights->DimmingTimeValue=3;
 12051  11D2  3003               	movlw	3
 12052  11D3  00A4               	movwf	??_setDimmerLights_ERROR
 12053  11D4  086C               	movf	_DimmerLights,w
 12054  11D5  3E02               	addlw	2
 12055  11D6  0086               	movwf	6
 12056  11D7  3001               	movlw	1	; select bank2/3
 12057  11D8  0087               	movwf	7
 12058  11D9  0824               	movf	??_setDimmerLights_ERROR,w
 12059  11DA  0081               	movwf	1
 12060                           
 12061                           ;Dimmer_B1.c: 303: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 12062  11DB  086C               	movf	_DimmerLights,w
 12063  11DC  3E06               	addlw	6
 12064  11DD  0086               	movwf	6
 12065  11DE  3001               	movlw	1	; select bank2/3
 12066  11DF  0087               	movwf	7
 12067  11E0  0801               	movf	1,w
 12068  11E1  00A4               	movwf	??_setDimmerLights_ERROR
 12069  11E2  086C               	movf	_DimmerLights,w
 12070  11E3  3E04               	addlw	4
 12071  11E4  0086               	movwf	6
 12072  11E5  3001               	movlw	1	; select bank2/3
 12073  11E6  0087               	movwf	7
 12074  11E7  0824               	movf	??_setDimmerLights_ERROR,w
 12075  11E8  0081               	movwf	1
 12076                           
 12077                           ;Dimmer_B1.c: 304: Dimmer->Detect=1;
 12078  11E9  0021               	movlb	1	; select bank1
 12079  11EA  0839               	movf	_Dimmer^(0+128),w
 12080  11EB  0086               	movwf	6
 12081  11EC  0187               	clrf	7
 12082  11ED  1401               	bsf	1,0
 12083                           
 12084                           ;Dimmer_B1.c: 305: setLoad_StatusOff(lights,1);
 12085  11EE  0020               	movlb	0	; select bank0
 12086  11EF  01A0               	clrf	setLoad_StatusOff@command
 12087  11F0  0AA0               	incf	setLoad_StatusOff@command,f
 12088  11F1  0825               	movf	setDimmerLights_ERROR@lights,w
 12089  11F2  319D  25F4  3191   	fcall	_setLoad_StatusOff
 12090                           
 12091                           ;Dimmer_B1.c: 306: setLED(lights,1);
 12092  11F5  0020               	movlb	0	; select bank0
 12093  11F6  01A2               	clrf	setLED@command
 12094  11F7  0AA2               	incf	setLED@command,f
 12095  11F8  0825               	movf	setDimmerLights_ERROR@lights,w
 12096  11F9  3193  2372  3191   	fcall	_setLED
 12097                           
 12098                           ;Dimmer_B1.c: 307: setSw_Status(lights,0);
 12099  11FC  0020               	movlb	0	; select bank0
 12100  11FD  01A2               	clrf	setSw_Status@command
 12101  11FE  0825               	movf	setDimmerLights_ERROR@lights,w
 12102  11FF  3199  2169  3191   	fcall	_setSw_Status
 12103                           
 12104                           ;Dimmer_B1.c: 308: setRFSW_Status(lights,0);
 12105  1202  0020               	movlb	0	; select bank0
 12106  1203  01A2               	clrf	setRFSW_Status@command
 12107  1204  0825               	movf	setDimmerLights_ERROR@lights,w
 12108  1205  3199  215A         	fcall	_setRFSW_Status
 12109  1207  0008               	return
 12110  1208                     __end_of_setDimmerLights_ERROR:	
 12111                           
 12112                           	psect	text60
 12113  19B7                     __ptext60:	
 12114 ;; *************** function _setDimmerLights_Clear *****************
 12115 ;; Defined at:
 12116 ;;		line 447 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 12117 ;; Parameters:    Size  Location     Type
 12118 ;;  lights          1    wreg     unsigned char 
 12119 ;;  command         1    2[BANK0 ] unsigned char 
 12120 ;; Auto vars:     Size  Location     Type
 12121 ;;  lights          1    3[BANK0 ] unsigned char 
 12122 ;; Return value:  Size  Location     Type
 12123 ;;		None               void
 12124 ;; Registers used:
 12125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12126 ;; Tracked objects:
 12127 ;;		On entry : 0/0
 12128 ;;		On exit  : 0/0
 12129 ;;		Unchanged: 0/0
 12130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12131 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;Total ram usage:        2 bytes
 12136 ;; Hardware stack levels used:    1
 12137 ;; Hardware stack levels required when called:    5
 12138 ;; This function calls:
 12139 ;;		_DimmerLightsPointSelect
 12140 ;; This function is called by:
 12141 ;;		_Load_Main
 12142 ;; This function uses a non-reentrant model
 12143 ;;
 12144                           
 12145                           
 12146                           ;psect for function _setDimmerLights_Clear
 12147  19B7                     _setDimmerLights_Clear:	
 12148                           
 12149                           ;incstack = 0
 12150                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12151                           ;setDimmerLights_Clear@lights stored from wreg
 12152  19B7  0020               	movlb	0	; select bank0
 12153  19B8  00A3               	movwf	setDimmerLights_Clear@lights
 12154                           
 12155                           ;Dimmer_B1.c: 449: DimmerLightsPointSelect(lights);
 12156  19B9  0823               	movf	setDimmerLights_Clear@lights,w
 12157  19BA  31A7  27EA         	fcall	_DimmerLightsPointSelect
 12158                           
 12159                           ;Dimmer_B1.c: 450: DimmerLights->Clear=command;
 12160  19BC  0020               	movlb	0	; select bank0
 12161  19BD  086C               	movf	_DimmerLights,w
 12162  19BE  3E0C               	addlw	12
 12163  19BF  0086               	movwf	6
 12164  19C0  3001               	movlw	1	; select bank2/3
 12165  19C1  0087               	movwf	7
 12166  19C2  0822               	movf	setDimmerLights_Clear@command,w
 12167  19C3  1001               	bcf	1,0
 12168  19C4  1D03               	skipz
 12169  19C5  1401               	bsf	1,0
 12170  19C6  0008               	return
 12171  19C7                     __end_of_setDimmerLights_Clear:	
 12172                           
 12173                           	psect	text61
 12174  279A                     __ptext61:	
 12175 ;; *************** function _getPF_Safe *****************
 12176 ;; Defined at:
 12177 ;;		line 40 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\PowerFault_B1.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;		None
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;		None
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  1    wreg      unsigned char 
 12184 ;; Registers used:
 12185 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;Total ram usage:        0 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    4
 12198 ;; This function calls:
 12199 ;;		Nothing
 12200 ;; This function is called by:
 12201 ;;		_Load_Main
 12202 ;; This function uses a non-reentrant model
 12203 ;;
 12204                           
 12205                           
 12206                           ;psect for function _getPF_Safe
 12207  279A                     _getPF_Safe:	
 12208                           
 12209                           ;PowerFault_B1.c: 42: return PF->Safe;
 12210                           
 12211                           ;incstack = 0
 12212                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 12213  279A  087A               	movf	_PF,w
 12214  279B  0086               	movwf	6
 12215  279C  0187               	clrf	7
 12216  279D  0C01               	rrf	1,w
 12217  279E  0C89               	rrf	9,f
 12218  279F  3901               	andlw	1
 12219  27A0  0008               	return
 12220  27A1                     __end_of_getPF_Safe:	
 12221                           
 12222                           	psect	text62
 12223  1E8C                     __ptext62:	
 12224 ;; *************** function ___lwdiv *****************
 12225 ;; Defined at:
 12226 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;  divisor         2    0[BANK0 ] unsigned int 
 12229 ;;  dividend        2    2[BANK0 ] unsigned int 
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;  quotient        2    5[BANK0 ] unsigned int 
 12232 ;;  counter         1    7[BANK0 ] unsigned char 
 12233 ;; Return value:  Size  Location     Type
 12234 ;;                  2    0[BANK0 ] unsigned int 
 12235 ;; Registers used:
 12236 ;;		wreg, status,2, status,0
 12237 ;; Tracked objects:
 12238 ;;		On entry : 0/0
 12239 ;;		On exit  : 0/0
 12240 ;;		Unchanged: 0/0
 12241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12242 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12245 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;Total ram usage:        8 bytes
 12247 ;; Hardware stack levels used:    1
 12248 ;; Hardware stack levels required when called:    4
 12249 ;; This function calls:
 12250 ;;		Nothing
 12251 ;; This function is called by:
 12252 ;;		_Load_Main
 12253 ;; This function uses a non-reentrant model
 12254 ;;
 12255                           
 12256                           
 12257                           ;psect for function ___lwdiv
 12258  1E8C                     ___lwdiv:	
 12259                           
 12260                           ;incstack = 0
 12261                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12262  1E8C  0020               	movlb	0	; select bank0
 12263  1E8D  01A5               	clrf	___lwdiv@quotient
 12264  1E8E  01A6               	clrf	___lwdiv@quotient+1
 12265  1E8F  0821               	movf	___lwdiv@divisor+1,w
 12266  1E90  0420               	iorwf	___lwdiv@divisor,w
 12267  1E91  1903               	skipnz
 12268  1E92  2EBC               	goto	l7163
 12269  1E93  01A7               	clrf	___lwdiv@counter
 12270  1E94  0AA7               	incf	___lwdiv@counter,f
 12271  1E95                     l7151:	
 12272  1E95  1BA1               	btfsc	___lwdiv@divisor+1,7
 12273  1E96  2EA1               	goto	l7153
 12274  1E97  3001               	movlw	1
 12275  1E98                     u6115:	
 12276  1E98  35A0               	lslf	___lwdiv@divisor,f
 12277  1E99  0DA1               	rlf	___lwdiv@divisor+1,f
 12278  1E9A  0B89               	decfsz	9,f
 12279  1E9B  2E98               	goto	u6115
 12280  1E9C  3001               	movlw	1
 12281  1E9D  00A4               	movwf	??___lwdiv
 12282  1E9E  0824               	movf	??___lwdiv,w
 12283  1E9F  07A7               	addwf	___lwdiv@counter,f
 12284  1EA0  2E95               	goto	l7151
 12285  1EA1                     l7153:	
 12286  1EA1  3001               	movlw	1
 12287  1EA2                     u6135:	
 12288  1EA2  35A5               	lslf	___lwdiv@quotient,f
 12289  1EA3  0DA6               	rlf	___lwdiv@quotient+1,f
 12290  1EA4  0B89               	decfsz	9,f
 12291  1EA5  2EA2               	goto	u6135
 12292  1EA6  0821               	movf	___lwdiv@divisor+1,w
 12293  1EA7  0223               	subwf	___lwdiv@dividend+1,w
 12294  1EA8  1D03               	skipz
 12295  1EA9  2EAC               	goto	u6145
 12296  1EAA  0820               	movf	___lwdiv@divisor,w
 12297  1EAB  0222               	subwf	___lwdiv@dividend,w
 12298  1EAC                     u6145:	
 12299  1EAC  1C03               	skipc
 12300  1EAD  2EB3               	goto	l7159
 12301  1EAE  0820               	movf	___lwdiv@divisor,w
 12302  1EAF  02A2               	subwf	___lwdiv@dividend,f
 12303  1EB0  0821               	movf	___lwdiv@divisor+1,w
 12304  1EB1  3BA3               	subwfb	___lwdiv@dividend+1,f
 12305  1EB2  1425               	bsf	___lwdiv@quotient,0
 12306  1EB3                     l7159:	
 12307  1EB3  3001               	movlw	1
 12308  1EB4                     u6155:	
 12309  1EB4  36A1               	lsrf	___lwdiv@divisor+1,f
 12310  1EB5  0CA0               	rrf	___lwdiv@divisor,f
 12311  1EB6  0B89               	decfsz	9,f
 12312  1EB7  2EB4               	goto	u6155
 12313  1EB8  3001               	movlw	1
 12314  1EB9  02A7               	subwf	___lwdiv@counter,f
 12315  1EBA  1D03               	btfss	3,2
 12316  1EBB  2EA1               	goto	l7153
 12317  1EBC                     l7163:	
 12318  1EBC  0826               	movf	___lwdiv@quotient+1,w
 12319  1EBD  01A1               	clrf	?___lwdiv+1
 12320  1EBE  07A1               	addwf	?___lwdiv+1,f
 12321  1EBF  0825               	movf	___lwdiv@quotient,w
 12322  1EC0  01A0               	clrf	?___lwdiv
 12323  1EC1  07A0               	addwf	?___lwdiv,f
 12324  1EC2  0008               	return
 12325  1EC3                     __end_of___lwdiv:	
 12326                           
 12327                           	psect	text63
 12328  1909                     __ptext63:	
 12329 ;; *************** function _Load_Initialization *****************
 12330 ;; Defined at:
 12331 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12332 ;; Parameters:    Size  Location     Type
 12333 ;;		None
 12334 ;; Auto vars:     Size  Location     Type
 12335 ;;		None
 12336 ;; Return value:  Size  Location     Type
 12337 ;;		None               void
 12338 ;; Registers used:
 12339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12340 ;; Tracked objects:
 12341 ;;		On entry : 0/0
 12342 ;;		On exit  : 0/0
 12343 ;;		Unchanged: 0/0
 12344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;Total ram usage:        1 bytes
 12350 ;; Hardware stack levels used:    1
 12351 ;; Hardware stack levels required when called:    5
 12352 ;; This function calls:
 12353 ;;		_setLoad_AH_AL_Restore
 12354 ;; This function is called by:
 12355 ;;		_main
 12356 ;; This function uses a non-reentrant model
 12357 ;;
 12358                           
 12359                           
 12360                           ;psect for function _Load_Initialization
 12361  1909                     _Load_Initialization:	
 12362                           
 12363                           ;OverLoad_B1.c: 10: Load=&Load1;
 12364                           
 12365                           ;incstack = 0
 12366                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12367  1909  3020               	movlw	_Load1& (0+255)
 12368  190A  0020               	movlb	0	; select bank0
 12369  190B  00A2               	movwf	??_Load_Initialization
 12370  190C  0822               	movf	??_Load_Initialization,w
 12371  190D  00EE               	movwf	_Load
 12372                           
 12373                           ;OverLoad_B1.c: 11: Load->Safe=1;
 12374  190E  086E               	movf	_Load,w
 12375  190F  0086               	movwf	6
 12376  1910  3002               	movlw	2	; select bank4/5
 12377  1911  0087               	movwf	7
 12378  1912  1581               	bsf	1,3
 12379                           
 12380                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 12381  1913  319B  23D2         	fcall	_setLoad_AH_AL_Restore
 12382  1915  0008               	return
 12383  1916                     __end_of_Load_Initialization:	
 12384                           
 12385                           	psect	text64
 12386  1BD2                     __ptext64:	
 12387 ;; *************** function _setLoad_AH_AL_Restore *****************
 12388 ;; Defined at:
 12389 ;;		line 310 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;		None
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;  i               1    1[BANK0 ] unsigned char 
 12394 ;; Return value:  Size  Location     Type
 12395 ;;		None               void
 12396 ;; Registers used:
 12397 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;Total ram usage:        2 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; Hardware stack levels required when called:    4
 12410 ;; This function calls:
 12411 ;;		Nothing
 12412 ;; This function is called by:
 12413 ;;		_Load_Initialization
 12414 ;;		_Load_Main
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           
 12419                           ;psect for function _setLoad_AH_AL_Restore
 12420  1BD2                     _setLoad_AH_AL_Restore:	
 12421                           
 12422                           ;OverLoad_B1.c: 312: char i;
 12423                           ;OverLoad_B1.c: 313: for(i=0 ; i<5 ;i++)
 12424                           
 12425                           ;incstack = 0
 12426                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12427  1BD2  0020               	movlb	0	; select bank0
 12428  1BD3  01A1               	clrf	setLoad_AH_AL_Restore@i
 12429  1BD4                     L11:	
 12430  1BD4  3005               	movlw	5
 12431  1BD5  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12432  1BD6  1803               	btfsc	3,0
 12433  1BD7  0008               	return
 12434                           
 12435                           ;OverLoad_B1.c: 314: {
 12436                           ;OverLoad_B1.c: 315: Load->AH[i]=0;
 12437  1BD8  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12438  1BD9  3E08               	addlw	8
 12439  1BDA  076E               	addwf	_Load,w
 12440  1BDB  00A0               	movwf	??_setLoad_AH_AL_Restore
 12441  1BDC  0820               	movf	??_setLoad_AH_AL_Restore,w
 12442  1BDD  0086               	movwf	6
 12443  1BDE  3002               	movlw	2	; select bank4/5
 12444  1BDF  0087               	movwf	7
 12445  1BE0  3000               	movlw	0
 12446  1BE1  3FC0               	movwi [0]fsr1
 12447  1BE2  3FC1               	movwi [1]fsr1
 12448                           
 12449                           ;OverLoad_B1.c: 316: Load->AL[i]=0xffff;
 12450  1BE3  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12451  1BE4  3E1A               	addlw	26
 12452  1BE5  076E               	addwf	_Load,w
 12453  1BE6  00A0               	movwf	??_setLoad_AH_AL_Restore
 12454  1BE7  0820               	movf	??_setLoad_AH_AL_Restore,w
 12455  1BE8  0086               	movwf	6
 12456  1BE9  3002               	movlw	2	; select bank4/5
 12457  1BEA  0087               	movwf	7
 12458  1BEB  30FF               	movlw	255
 12459  1BEC  3FC0               	movwi [0]fsr1
 12460  1BED  30FF               	movlw	255
 12461  1BEE  3FC1               	movwi [1]fsr1
 12462  1BEF  3001               	movlw	1
 12463  1BF0  00A0               	movwf	??_setLoad_AH_AL_Restore
 12464  1BF1  0820               	movf	??_setLoad_AH_AL_Restore,w
 12465  1BF2  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12466  1BF3  2BD4               	goto	L11
 12467  1BF4                     __end_of_setLoad_AH_AL_Restore:	
 12468                           
 12469                           	psect	text65
 12470  18FD                     __ptext65:	
 12471 ;; *************** function _LED_Main *****************
 12472 ;; Defined at:
 12473 ;;		line 51 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;		None
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;		None
 12478 ;; Return value:  Size  Location     Type
 12479 ;;		None               void
 12480 ;; Registers used:
 12481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12482 ;; Tracked objects:
 12483 ;;		On entry : 0/0
 12484 ;;		On exit  : 0/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;Total ram usage:        0 bytes
 12492 ;; Hardware stack levels used:    1
 12493 ;; Hardware stack levels required when called:    6
 12494 ;; This function calls:
 12495 ;;		_setLED_Main
 12496 ;; This function is called by:
 12497 ;;		_main
 12498 ;; This function uses a non-reentrant model
 12499 ;;
 12500                           
 12501                           
 12502                           ;psect for function _LED_Main
 12503  18FD                     _LED_Main:	
 12504                           
 12505                           ;LED_B1.c: 54: setLED_Main(1);
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12509  18FD  3001               	movlw	1
 12510  18FE  319F  273D  3198   	fcall	_setLED_Main
 12511                           
 12512                           ;LED_B1.c: 57: setLED_Main(2);
 12513  1901  3002               	movlw	2
 12514  1902  319F  273D  3198   	fcall	_setLED_Main
 12515                           
 12516                           ;LED_B1.c: 63: setLED_Main(99);
 12517  1905  3063               	movlw	99
 12518  1906  319F  273D         	fcall	_setLED_Main
 12519  1908  0008               	return
 12520  1909                     __end_of_LED_Main:	
 12521                           
 12522                           	psect	text66
 12523  1F3D                     __ptext66:	
 12524 ;; *************** function _setLED_Main *****************
 12525 ;; Defined at:
 12526 ;;		line 214 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12527 ;; Parameters:    Size  Location     Type
 12528 ;;  led             1    wreg     unsigned char 
 12529 ;; Auto vars:     Size  Location     Type
 12530 ;;  led             1    4[BANK0 ] unsigned char 
 12531 ;; Return value:  Size  Location     Type
 12532 ;;		None               void
 12533 ;; Registers used:
 12534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12535 ;; Tracked objects:
 12536 ;;		On entry : 0/0
 12537 ;;		On exit  : 0/0
 12538 ;;		Unchanged: 0/0
 12539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;Total ram usage:        3 bytes
 12545 ;; Hardware stack levels used:    1
 12546 ;; Hardware stack levels required when called:    5
 12547 ;; This function calls:
 12548 ;;		_LedPointSelect
 12549 ;; This function is called by:
 12550 ;;		_LED_Main
 12551 ;; This function uses a non-reentrant model
 12552 ;;
 12553                           
 12554                           
 12555                           ;psect for function _setLED_Main
 12556  1F3D                     _setLED_Main:	
 12557                           
 12558                           ;incstack = 0
 12559                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12560                           ;setLED_Main@led stored from wreg
 12561  1F3D  0020               	movlb	0	; select bank0
 12562  1F3E  00A4               	movwf	setLED_Main@led
 12563                           
 12564                           ;LED_B1.c: 216: LedPointSelect(led);
 12565  1F3F  0824               	movf	setLED_Main@led,w
 12566  1F40  319B  23B0  319F   	fcall	_LedPointSelect
 12567                           
 12568                           ;LED_B1.c: 217: if(LED->GO)
 12569  1F43  0021               	movlb	1	; select bank1
 12570  1F44  083B               	movf	_LED^(0+128),w
 12571  1F45  0086               	movwf	6
 12572  1F46  0187               	clrf	7
 12573  1F47  1C81               	btfss	1,1
 12574  1F48  0008               	return
 12575                           
 12576                           ;LED_B1.c: 218: {
 12577                           ;LED_B1.c: 219: LED->Time++;
 12578  1F49  0A3B               	incf	_LED^(0+128),w
 12579  1F4A  0086               	movwf	6
 12580  1F4B  0187               	clrf	7
 12581  1F4C  3001               	movlw	1
 12582  1F4D  0781               	addwf	1,f
 12583  1F4E  3141               	addfsr 1,1
 12584  1F4F  1803               	skipnc
 12585  1F50  0A81               	incf	1,f
 12586                           
 12587                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 12588  1F51  0A3B               	incf	_LED^(0+128),w
 12589  1F52  0086               	movwf	6
 12590  1F53  0187               	clrf	7
 12591  1F54  3F40               	moviw [0]fsr1
 12592  1F55  0020               	movlb	0	; select bank0
 12593  1F56  00A2               	movwf	??_setLED_Main
 12594  1F57  3F41               	moviw [1]fsr1
 12595  1F58  00A3               	movwf	??_setLED_Main+1
 12596  1F59  3000               	movlw	0
 12597  1F5A  0223               	subwf	??_setLED_Main+1,w
 12598  1F5B  3032               	movlw	50
 12599  1F5C  1903               	skipnz
 12600  1F5D  0222               	subwf	??_setLED_Main,w
 12601  1F5E  1C03               	skipc
 12602  1F5F  0008               	return
 12603                           
 12604                           ;LED_B1.c: 221: {
 12605                           ;LED_B1.c: 222: LED->Time=0;
 12606  1F60  0021               	movlb	1	; select bank1
 12607  1F61  0A3B               	incf	_LED^(0+128),w
 12608  1F62  0086               	movwf	6
 12609  1F63  0187               	clrf	7
 12610  1F64  3000               	movlw	0
 12611  1F65  3FC0               	movwi [0]fsr1
 12612  1F66  3FC1               	movwi [1]fsr1
 12613                           
 12614                           ;LED_B1.c: 224: if(led == 1)
 12615  1F67  0020               	movlb	0	; select bank0
 12616  1F68  0824               	movf	setLED_Main@led,w
 12617  1F69  3A01               	xorlw	1
 12618  1F6A  1D03               	skipz
 12619  1F6B  2F6F               	goto	l6797
 12620                           
 12621                           ;LED_B1.c: 225: {
 12622                           ;LED_B1.c: 226: RA3=~RA3;
 12623  1F6C  3008               	movlw	8
 12624  1F6D  068C               	xorwf	12,f
 12625                           
 12626                           ;LED_B1.c: 227: }
 12627  1F6E  0008               	return
 12628  1F6F                     l6797:	
 12629                           
 12630                           ;LED_B1.c: 230: else if(led == 2)
 12631  1F6F  0824               	movf	setLED_Main@led,w
 12632  1F70  3A02               	xorlw	2
 12633  1F71  1D03               	skipz
 12634  1F72  2F76               	goto	l6801
 12635                           
 12636                           ;LED_B1.c: 231: {
 12637                           ;LED_B1.c: 232: RC7=~RC7;
 12638  1F73  3080               	movlw	128
 12639  1F74  068E               	xorwf	14,f
 12640                           
 12641                           ;LED_B1.c: 233: }
 12642  1F75  0008               	return
 12643  1F76                     l6801:	
 12644                           
 12645                           ;LED_B1.c: 242: else if(led == 99)
 12646  1F76  0824               	movf	setLED_Main@led,w
 12647  1F77  3A63               	xorlw	99
 12648  1F78  1D03               	skipz
 12649  1F79  0008               	return
 12650                           
 12651                           ;LED_B1.c: 243: {
 12652                           ;LED_B1.c: 244: RB5=~RB5;
 12653  1F7A  3020               	movlw	32
 12654  1F7B  068D               	xorwf	13,f
 12655  1F7C  0008               	return
 12656  1F7D                     __end_of_setLED_Main:	
 12657                           
 12658                           	psect	text67
 12659  18F1                     __ptext67:	
 12660 ;; *************** function _LED_Initialization *****************
 12661 ;; Defined at:
 12662 ;;		line 35 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;		None
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;		None
 12667 ;; Return value:  Size  Location     Type
 12668 ;;		None               void
 12669 ;; Registers used:
 12670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;Total ram usage:        0 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    7
 12683 ;; This function calls:
 12684 ;;		_setLED_Initialization
 12685 ;; This function is called by:
 12686 ;;		_main
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           
 12691                           ;psect for function _LED_Initialization
 12692  18F1                     _LED_Initialization:	
 12693                           
 12694                           ;LED_B1.c: 38: setLED_Initialization(1);
 12695                           
 12696                           ;incstack = 0
 12697                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12698  18F1  3001               	movlw	1
 12699  18F2  3187  27ED  3198   	fcall	_setLED_Initialization
 12700                           
 12701                           ;LED_B1.c: 41: setLED_Initialization(2);
 12702  18F5  3002               	movlw	2
 12703  18F6  3187  27ED  3198   	fcall	_setLED_Initialization
 12704                           
 12705                           ;LED_B1.c: 47: setLED_Initialization(99);
 12706  18F9  3063               	movlw	99
 12707  18FA  3187  27ED         	fcall	_setLED_Initialization
 12708  18FC  0008               	return
 12709  18FD                     __end_of_LED_Initialization:	
 12710                           
 12711                           	psect	text68
 12712  07ED                     __ptext68:	
 12713 ;; *************** function _setLED_Initialization *****************
 12714 ;; Defined at:
 12715 ;;		line 67 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  led             1    wreg     unsigned char 
 12718 ;; Auto vars:     Size  Location     Type
 12719 ;;  led             1    4[BANK0 ] unsigned char 
 12720 ;; Return value:  Size  Location     Type
 12721 ;;		None               void
 12722 ;; Registers used:
 12723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12724 ;; Tracked objects:
 12725 ;;		On entry : 0/0
 12726 ;;		On exit  : 0/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12733 ;;Total ram usage:        1 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; Hardware stack levels required when called:    6
 12736 ;; This function calls:
 12737 ;;		_LedPointSelect
 12738 ;;		_setLED
 12739 ;; This function is called by:
 12740 ;;		_LED_Initialization
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           
 12745                           ;psect for function _setLED_Initialization
 12746  07ED                     _setLED_Initialization:	
 12747                           
 12748                           ;incstack = 0
 12749                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12750                           ;setLED_Initialization@led stored from wreg
 12751  07ED  0020               	movlb	0	; select bank0
 12752  07EE  00A4               	movwf	setLED_Initialization@led
 12753                           
 12754                           ;LED_B1.c: 69: LedPointSelect(led);
 12755  07EF  0824               	movf	setLED_Initialization@led,w
 12756  07F0  319B  23B0  3187   	fcall	_LedPointSelect
 12757                           
 12758                           ;LED_B1.c: 70: LED->Enable=1;
 12759  07F3  0021               	movlb	1	; select bank1
 12760  07F4  083B               	movf	_LED^(0+128),w
 12761  07F5  0086               	movwf	6
 12762  07F6  0187               	clrf	7
 12763  07F7  1401               	bsf	1,0
 12764                           
 12765                           ;LED_B1.c: 71: setLED(led,0);
 12766  07F8  0020               	movlb	0	; select bank0
 12767  07F9  01A2               	clrf	setLED@command
 12768  07FA  0824               	movf	setLED_Initialization@led,w
 12769  07FB  3193  2372         	fcall	_setLED
 12770  07FD  0008               	return
 12771  07FE                     __end_of_setLED_Initialization:	
 12772                           
 12773                           	psect	text69
 12774  1FBD                     __ptext69:	
 12775 ;; *************** function _Flash_Memory_Main *****************
 12776 ;; Defined at:
 12777 ;;		line 493 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12778 ;; Parameters:    Size  Location     Type
 12779 ;;		None
 12780 ;; Auto vars:     Size  Location     Type
 12781 ;;		None
 12782 ;; Return value:  Size  Location     Type
 12783 ;;		None               void
 12784 ;; Registers used:
 12785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12786 ;; Tracked objects:
 12787 ;;		On entry : 0/0
 12788 ;;		On exit  : 0/0
 12789 ;;		Unchanged: 0/0
 12790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12795 ;;Total ram usage:        0 bytes
 12796 ;; Hardware stack levels used:    1
 12797 ;; Hardware stack levels required when called:    7
 12798 ;; This function calls:
 12799 ;;		_Flash_Memory_Modify
 12800 ;; This function is called by:
 12801 ;;		_main
 12802 ;; This function uses a non-reentrant model
 12803 ;;
 12804                           
 12805                           
 12806                           ;psect for function _Flash_Memory_Main
 12807  1FBD                     _Flash_Memory_Main:	
 12808                           
 12809                           ;MCU_16f1518_B1.c: 495: if(Memory->GO)
 12810                           
 12811                           ;incstack = 0
 12812                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12813  1FBD  087C               	movf	_Memory,w
 12814  1FBE  3E22               	addlw	34
 12815  1FBF  0086               	movwf	6
 12816  1FC0  3001               	movlw	1	; select bank2/3
 12817  1FC1  0087               	movwf	7
 12818  1FC2  1C81               	btfss	1,1
 12819  1FC3  0008               	return
 12820                           
 12821                           ;MCU_16f1518_B1.c: 496: {
 12822                           ;MCU_16f1518_B1.c: 497: if(Memory->Modify)
 12823  1FC4  087C               	movf	_Memory,w
 12824  1FC5  3E22               	addlw	34
 12825  1FC6  0086               	movwf	6
 12826  1FC7  3001               	movlw	1	; select bank2/3
 12827  1FC8  0087               	movwf	7
 12828  1FC9  1C01               	btfss	1,0
 12829  1FCA  2FF9               	goto	l8957
 12830                           
 12831                           ;MCU_16f1518_B1.c: 498: {
 12832                           ;MCU_16f1518_B1.c: 499: Memory->Time++;
 12833  1FCB  087C               	movf	_Memory,w
 12834  1FCC  3E23               	addlw	35
 12835  1FCD  0086               	movwf	6
 12836  1FCE  3001               	movlw	1	; select bank2/3
 12837  1FCF  0087               	movwf	7
 12838  1FD0  3001               	movlw	1
 12839  1FD1  0781               	addwf	1,f
 12840  1FD2  3141               	addfsr 1,1
 12841  1FD3  1803               	skipnc
 12842  1FD4  0A81               	incf	1,f
 12843                           
 12844                           ;MCU_16f1518_B1.c: 500: if(Memory->Time == 25)
 12845  1FD5  087C               	movf	_Memory,w
 12846  1FD6  3E23               	addlw	35
 12847  1FD7  0086               	movwf	6
 12848  1FD8  3001               	movlw	1	; select bank2/3
 12849  1FD9  0087               	movwf	7
 12850  1FDA  3F40               	moviw [0]fsr1
 12851  1FDB  3A19               	xorlw	25
 12852  1FDC  1D03               	skipz
 12853  1FDD  2FE0               	goto	u8645
 12854  1FDE  3F41               	moviw [1]fsr1
 12855  1FDF  3A00               	xorlw	0
 12856  1FE0                     u8645:	
 12857  1FE0  1D03               	skipz
 12858  1FE1  0008               	return
 12859                           
 12860                           ;MCU_16f1518_B1.c: 501: {
 12861                           ;MCU_16f1518_B1.c: 502: Memory->Time=0;
 12862  1FE2  087C               	movf	_Memory,w
 12863  1FE3  3E23               	addlw	35
 12864  1FE4  0086               	movwf	6
 12865  1FE5  3001               	movlw	1	; select bank2/3
 12866  1FE6  0087               	movwf	7
 12867  1FE7  3000               	movlw	0
 12868  1FE8  3FC0               	movwi [0]fsr1
 12869  1FE9  3FC1               	movwi [1]fsr1
 12870                           
 12871                           ;MCU_16f1518_B1.c: 503: Memory->Modify=0;
 12872  1FEA  087C               	movf	_Memory,w
 12873  1FEB  3E22               	addlw	34
 12874  1FEC  0086               	movwf	6
 12875  1FED  3001               	movlw	1	; select bank2/3
 12876  1FEE  0087               	movwf	7
 12877  1FEF  1001               	bcf	1,0
 12878                           
 12879                           ;MCU_16f1518_B1.c: 504: Memory->GO=0;
 12880  1FF0  087C               	movf	_Memory,w
 12881  1FF1  3E22               	addlw	34
 12882  1FF2  0086               	movwf	6
 12883  1FF3  3001               	movlw	1	; select bank2/3
 12884  1FF4  0087               	movwf	7
 12885  1FF5  1081               	bcf	1,1
 12886                           
 12887                           ;MCU_16f1518_B1.c: 505: Flash_Memory_Modify();
 12888  1FF6  3194  24F7         	fcall	_Flash_Memory_Modify
 12889                           
 12890                           ;MCU_16f1518_B1.c: 507: }
 12891                           ;MCU_16f1518_B1.c: 508: }
 12892  1FF8  0008               	return
 12893  1FF9                     l8957:	
 12894                           
 12895                           ;MCU_16f1518_B1.c: 509: else
 12896                           ;MCU_16f1518_B1.c: 510: {
 12897                           ;MCU_16f1518_B1.c: 511: Memory->GO=0;
 12898  1FF9  087C               	movf	_Memory,w
 12899  1FFA  3E22               	addlw	34
 12900  1FFB  0086               	movwf	6
 12901  1FFC  3001               	movlw	1	; select bank2/3
 12902  1FFD  0087               	movwf	7
 12903  1FFE  1081               	bcf	1,1
 12904  1FFF  0008               	return
 12905  2000                     __end_of_Flash_Memory_Main:	
 12906                           
 12907                           	psect	text70
 12908  14F7                     __ptext70:	
 12909 ;; *************** function _Flash_Memory_Modify *****************
 12910 ;; Defined at:
 12911 ;;		line 568 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 12912 ;; Parameters:    Size  Location     Type
 12913 ;;		None
 12914 ;; Auto vars:     Size  Location     Type
 12915 ;;  i               1    6[BANK0 ] unsigned char 
 12916 ;; Return value:  Size  Location     Type
 12917 ;;		None               void
 12918 ;; Registers used:
 12919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12920 ;; Tracked objects:
 12921 ;;		On entry : 0/0
 12922 ;;		On exit  : 0/0
 12923 ;;		Unchanged: 0/0
 12924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12929 ;;Total ram usage:        3 bytes
 12930 ;; Hardware stack levels used:    1
 12931 ;; Hardware stack levels required when called:    6
 12932 ;; This function calls:
 12933 ;;		_Flash_Memory_Erasing
 12934 ;;		_Flash_Memory_Read
 12935 ;;		_Flash_Memory_Write
 12936 ;; This function is called by:
 12937 ;;		_Flash_Memory_Main
 12938 ;; This function uses a non-reentrant model
 12939 ;;
 12940                           
 12941                           
 12942                           ;psect for function _Flash_Memory_Modify
 12943  14F7                     _Flash_Memory_Modify:	
 12944                           
 12945                           ;MCU_16f1518_B1.c: 570: char i;
 12946                           ;MCU_16f1518_B1.c: 571: for(i=0;i<32;i++)
 12947                           
 12948                           ;incstack = 0
 12949                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12950  14F7  0020               	movlb	0	; select bank0
 12951  14F8  01A6               	clrf	Flash_Memory_Modify@i
 12952  14F9  3020               	movlw	32
 12953  14FA  0226               	subwf	Flash_Memory_Modify@i,w
 12954  14FB  1803               	btfsc	3,0
 12955  14FC  2D14               	goto	l8551
 12956  14FD                     l8545:	
 12957                           
 12958                           ;MCU_16f1518_B1.c: 572: {
 12959                           ;MCU_16f1518_B1.c: 573: Memory->Data[i]=Flash_Memory_Read(i);
 12960  14FD  0826               	movf	Flash_Memory_Modify@i,w
 12961  14FE  319A  228F  3194   	fcall	_Flash_Memory_Read
 12962  1501  0020               	movlb	0	; select bank0
 12963  1502  00A4               	movwf	??_Flash_Memory_Modify
 12964  1503  0826               	movf	Flash_Memory_Modify@i,w
 12965  1504  077C               	addwf	_Memory,w
 12966  1505  00A5               	movwf	??_Flash_Memory_Modify+1
 12967  1506  0825               	movf	??_Flash_Memory_Modify+1,w
 12968  1507  0086               	movwf	6
 12969  1508  3001               	movlw	1	; select bank2/3
 12970  1509  0087               	movwf	7
 12971  150A  0824               	movf	??_Flash_Memory_Modify,w
 12972  150B  0081               	movwf	1
 12973  150C  3001               	movlw	1
 12974  150D  00A4               	movwf	??_Flash_Memory_Modify
 12975  150E  0824               	movf	??_Flash_Memory_Modify,w
 12976  150F  07A6               	addwf	Flash_Memory_Modify@i,f
 12977  1510  3020               	movlw	32
 12978  1511  0226               	subwf	Flash_Memory_Modify@i,w
 12979  1512  1C03               	skipc
 12980  1513  2CFD               	goto	l8545
 12981  1514                     l8551:	
 12982                           
 12983                           ;MCU_16f1518_B1.c: 574: }
 12984                           ;MCU_16f1518_B1.c: 575: Memory->Data[0]=Product->Data[12];
 12985  1514  086F               	movf	_Product,w
 12986  1515  3E0C               	addlw	12
 12987  1516  0086               	movwf	6
 12988  1517  3001               	movlw	1	; select bank2/3
 12989  1518  0087               	movwf	7
 12990  1519  0801               	movf	1,w
 12991  151A  00A4               	movwf	??_Flash_Memory_Modify
 12992  151B  087C               	movf	_Memory,w
 12993  151C  0086               	movwf	6
 12994  151D  3001               	movlw	1	; select bank2/3
 12995  151E  0087               	movwf	7
 12996  151F  0824               	movf	??_Flash_Memory_Modify,w
 12997  1520  0081               	movwf	1
 12998                           
 12999                           ;MCU_16f1518_B1.c: 576: Memory->Data[1]=Product->Data[13];
 13000  1521  086F               	movf	_Product,w
 13001  1522  3E0D               	addlw	13
 13002  1523  0086               	movwf	6
 13003  1524  3001               	movlw	1	; select bank2/3
 13004  1525  0087               	movwf	7
 13005  1526  0801               	movf	1,w
 13006  1527  00A4               	movwf	??_Flash_Memory_Modify
 13007  1528  0A7C               	incf	_Memory,w
 13008  1529  0086               	movwf	6
 13009  152A  3001               	movlw	1	; select bank2/3
 13010  152B  0087               	movwf	7
 13011  152C  0824               	movf	??_Flash_Memory_Modify,w
 13012  152D  0081               	movwf	1
 13013                           
 13014                           ;MCU_16f1518_B1.c: 577: Memory->Data[2]=Product->Data[14];
 13015  152E  086F               	movf	_Product,w
 13016  152F  3E0E               	addlw	14
 13017  1530  0086               	movwf	6
 13018  1531  3001               	movlw	1	; select bank2/3
 13019  1532  0087               	movwf	7
 13020  1533  0801               	movf	1,w
 13021  1534  00A4               	movwf	??_Flash_Memory_Modify
 13022  1535  087C               	movf	_Memory,w
 13023  1536  3E02               	addlw	2
 13024  1537  0086               	movwf	6
 13025  1538  3001               	movlw	1	; select bank2/3
 13026  1539  0087               	movwf	7
 13027  153A  0824               	movf	??_Flash_Memory_Modify,w
 13028  153B  0081               	movwf	1
 13029                           
 13030                           ;MCU_16f1518_B1.c: 583: if(Memory->LoopSave)
 13031  153C  087C               	movf	_Memory,w
 13032  153D  3E22               	addlw	34
 13033  153E  0086               	movwf	6
 13034  153F  3001               	movlw	1	; select bank2/3
 13035  1540  0087               	movwf	7
 13036  1541  1D01               	btfss	1,2
 13037  1542  2D54               	goto	l8555
 13038                           
 13039                           ;MCU_16f1518_B1.c: 584: {
 13040                           ;MCU_16f1518_B1.c: 585: Memory->LoopSave=0;
 13041  1543  087C               	movf	_Memory,w
 13042  1544  3E22               	addlw	34
 13043  1545  0086               	movwf	6
 13044  1546  3001               	movlw	1	; select bank2/3
 13045  1547  0087               	movwf	7
 13046  1548  1101               	bcf	1,2
 13047                           
 13048                           ;MCU_16f1518_B1.c: 586: TMain->FirstOpen=0;
 13049  1549  087D               	movf	_TMain,w
 13050  154A  0086               	movwf	6
 13051  154B  3001               	movlw	1	; select bank2/3
 13052  154C  0087               	movwf	7
 13053  154D  1281               	bcf	1,5
 13054                           
 13055                           ;MCU_16f1518_B1.c: 587: TMain->First=0;
 13056  154E  087D               	movf	_TMain,w
 13057  154F  3E03               	addlw	3
 13058  1550  0086               	movwf	6
 13059  1551  3001               	movlw	1	; select bank2/3
 13060  1552  0087               	movwf	7
 13061  1553  1081               	bcf	1,1
 13062  1554                     l8555:	
 13063                           
 13064                           ;MCU_16f1518_B1.c: 589: }
 13065                           ;MCU_16f1518_B1.c: 590: GIE=0;
 13066  1554  138B               	bcf	11,7	;volatile
 13067                           
 13068                           ;MCU_16f1518_B1.c: 591: Flash_Memory_Erasing();
 13069  1555  3198  20E5  3194   	fcall	_Flash_Memory_Erasing
 13070                           
 13071                           ;MCU_16f1518_B1.c: 592: Flash_Memory_Write();
 13072  1558  319D  2564         	fcall	_Flash_Memory_Write
 13073                           
 13074                           ;MCU_16f1518_B1.c: 593: GIE=1;
 13075  155A  178B               	bsf	11,7	;volatile
 13076  155B  0008               	return
 13077  155C                     __end_of_Flash_Memory_Modify:	
 13078                           
 13079                           	psect	text71
 13080  18E5                     __ptext71:	
 13081 ;; *************** function _Flash_Memory_Erasing *****************
 13082 ;; Defined at:
 13083 ;;		line 557 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13084 ;; Parameters:    Size  Location     Type
 13085 ;;		None
 13086 ;; Auto vars:     Size  Location     Type
 13087 ;;		None
 13088 ;; Return value:  Size  Location     Type
 13089 ;;		None               void
 13090 ;; Registers used:
 13091 ;;		wreg, status,2, status,0, pclath, cstack
 13092 ;; Tracked objects:
 13093 ;;		On entry : 0/0
 13094 ;;		On exit  : 0/0
 13095 ;;		Unchanged: 0/0
 13096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13101 ;;Total ram usage:        0 bytes
 13102 ;; Hardware stack levels used:    1
 13103 ;; Hardware stack levels required when called:    5
 13104 ;; This function calls:
 13105 ;;		_Flash_Memory_Unlock
 13106 ;; This function is called by:
 13107 ;;		_Flash_Memory_Modify
 13108 ;; This function uses a non-reentrant model
 13109 ;;
 13110                           
 13111                           
 13112                           ;psect for function _Flash_Memory_Erasing
 13113  18E5                     _Flash_Memory_Erasing:	
 13114                           
 13115                           ;MCU_16f1518_B1.c: 559: CFGS=0;
 13116                           
 13117                           ;incstack = 0
 13118                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 13119  18E5  0023               	movlb	3	; select bank3
 13120  18E6  1315               	bcf	21,6	;volatile
 13121                           
 13122                           ;MCU_16f1518_B1.c: 560: PMADRH=0x30;
 13123  18E7  3030               	movlw	48
 13124  18E8  0092               	movwf	18	;volatile
 13125                           
 13126                           ;MCU_16f1518_B1.c: 561: PMADRL=0x00;
 13127  18E9  0191               	clrf	17	;volatile
 13128                           
 13129                           ;MCU_16f1518_B1.c: 562: FREE=1;
 13130  18EA  1615               	bsf	21,4	;volatile
 13131                           
 13132                           ;MCU_16f1518_B1.c: 563: WREN=1;
 13133  18EB  1515               	bsf	21,2	;volatile
 13134                           
 13135                           ;MCU_16f1518_B1.c: 564: Flash_Memory_Unlock();
 13136  18EC  31A7  27AF         	fcall	_Flash_Memory_Unlock
 13137                           
 13138                           ;MCU_16f1518_B1.c: 565: WREN=0;
 13139  18EE  0023               	movlb	3	; select bank3
 13140  18EF  1115               	bcf	21,2	;volatile
 13141  18F0  0008               	return
 13142  18F1                     __end_of_Flash_Memory_Erasing:	
 13143                           
 13144                           	psect	text72
 13145  0E2B                     __ptext72:	
 13146 ;; *************** function _Flash_Memory_Initialization *****************
 13147 ;; Defined at:
 13148 ;;		line 448 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13149 ;; Parameters:    Size  Location     Type
 13150 ;;		None
 13151 ;; Auto vars:     Size  Location     Type
 13152 ;;  i               1   62[BANK0 ] unsigned char 
 13153 ;; Return value:  Size  Location     Type
 13154 ;;		None               void
 13155 ;; Registers used:
 13156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13157 ;; Tracked objects:
 13158 ;;		On entry : 0/0
 13159 ;;		On exit  : 0/0
 13160 ;;		Unchanged: 0/0
 13161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;Total ram usage:        2 bytes
 13167 ;; Hardware stack levels used:    1
 13168 ;; Hardware stack levels required when called:    7
 13169 ;; This function calls:
 13170 ;;		_Flash_Memory_Read
 13171 ;;		_Flash_Memory_Write
 13172 ;;		_setPercentValue
 13173 ;; This function is called by:
 13174 ;;		_main
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           
 13179                           ;psect for function _Flash_Memory_Initialization
 13180  0E2B                     _Flash_Memory_Initialization:	
 13181                           
 13182                           ;MCU_16f1518_B1.c: 450: char i;
 13183                           ;MCU_16f1518_B1.c: 451: if(Flash_Memory_Read(31) == 0xaa)
 13184                           
 13185                           ;incstack = 0
 13186                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13187  0E2B  301F               	movlw	31
 13188  0E2C  319A  228F  318E   	fcall	_Flash_Memory_Read
 13189  0E2F  3AAA               	xorlw	170
 13190  0E30  1D03               	skipz
 13191  0E31  2EA3               	goto	l8831
 13192                           
 13193                           ;MCU_16f1518_B1.c: 452: {
 13194                           ;MCU_16f1518_B1.c: 453: Product->Data[12]=Flash_Memory_Read(0);
 13195  0E32  3000               	movlw	0
 13196  0E33  319A  228F  318E   	fcall	_Flash_Memory_Read
 13197  0E36  0020               	movlb	0	; select bank0
 13198  0E37  00DD               	movwf	??_Flash_Memory_Initialization
 13199  0E38  086F               	movf	_Product,w
 13200  0E39  3E0C               	addlw	12
 13201  0E3A  0086               	movwf	6
 13202  0E3B  3001               	movlw	1	; select bank2/3
 13203  0E3C  0087               	movwf	7
 13204  0E3D  085D               	movf	??_Flash_Memory_Initialization,w
 13205  0E3E  0081               	movwf	1
 13206                           
 13207                           ;MCU_16f1518_B1.c: 454: Product->Data[13]=Flash_Memory_Read(1);
 13208  0E3F  3001               	movlw	1
 13209  0E40  319A  228F  318E   	fcall	_Flash_Memory_Read
 13210  0E43  0020               	movlb	0	; select bank0
 13211  0E44  00DD               	movwf	??_Flash_Memory_Initialization
 13212  0E45  086F               	movf	_Product,w
 13213  0E46  3E0D               	addlw	13
 13214  0E47  0086               	movwf	6
 13215  0E48  3001               	movlw	1	; select bank2/3
 13216  0E49  0087               	movwf	7
 13217  0E4A  085D               	movf	??_Flash_Memory_Initialization,w
 13218  0E4B  0081               	movwf	1
 13219                           
 13220                           ;MCU_16f1518_B1.c: 455: Product->Data[14]=Flash_Memory_Read(2);
 13221  0E4C  3002               	movlw	2
 13222  0E4D  319A  228F  318E   	fcall	_Flash_Memory_Read
 13223  0E50  0020               	movlb	0	; select bank0
 13224  0E51  00DD               	movwf	??_Flash_Memory_Initialization
 13225  0E52  086F               	movf	_Product,w
 13226  0E53  3E0E               	addlw	14
 13227  0E54  0086               	movwf	6
 13228  0E55  3001               	movlw	1	; select bank2/3
 13229  0E56  0087               	movwf	7
 13230  0E57  085D               	movf	??_Flash_Memory_Initialization,w
 13231  0E58  0081               	movwf	1
 13232                           
 13233                           ;MCU_16f1518_B1.c: 461: i=setPercentValue(((char)(65*1.5)));
 13234  0E59  3061               	movlw	97
 13235  0E5A  3190  2088  318E   	fcall	_setPercentValue
 13236  0E5D  0020               	movlb	0	; select bank0
 13237  0E5E  00DD               	movwf	??_Flash_Memory_Initialization
 13238  0E5F  085D               	movf	??_Flash_Memory_Initialization,w
 13239  0E60  00DE               	movwf	Flash_Memory_Initialization@i
 13240                           
 13241                           ;MCU_16f1518_B1.c: 462: Product->Data[21]=i;
 13242  0E61  085E               	movf	Flash_Memory_Initialization@i,w
 13243  0E62  00DD               	movwf	??_Flash_Memory_Initialization
 13244  0E63  086F               	movf	_Product,w
 13245  0E64  3E15               	addlw	21
 13246  0E65  0086               	movwf	6
 13247  0E66  3001               	movlw	1	; select bank2/3
 13248  0E67  0087               	movwf	7
 13249  0E68  085D               	movf	??_Flash_Memory_Initialization,w
 13250  0E69  0081               	movwf	1
 13251                           
 13252                           ;MCU_16f1518_B1.c: 463: Product->Data[22]=i;
 13253  0E6A  085E               	movf	Flash_Memory_Initialization@i,w
 13254  0E6B  00DD               	movwf	??_Flash_Memory_Initialization
 13255  0E6C  086F               	movf	_Product,w
 13256  0E6D  3E16               	addlw	22
 13257  0E6E  0086               	movwf	6
 13258  0E6F  3001               	movlw	1	; select bank2/3
 13259  0E70  0087               	movwf	7
 13260  0E71  085D               	movf	??_Flash_Memory_Initialization,w
 13261  0E72  0081               	movwf	1
 13262                           
 13263                           ;MCU_16f1518_B1.c: 464: Product->Data[23]=i;
 13264  0E73  085E               	movf	Flash_Memory_Initialization@i,w
 13265  0E74  00DD               	movwf	??_Flash_Memory_Initialization
 13266  0E75  086F               	movf	_Product,w
 13267  0E76  3E17               	addlw	23
 13268  0E77  0086               	movwf	6
 13269  0E78  3001               	movlw	1	; select bank2/3
 13270  0E79  0087               	movwf	7
 13271  0E7A  085D               	movf	??_Flash_Memory_Initialization,w
 13272  0E7B  0081               	movwf	1
 13273                           
 13274                           ;MCU_16f1518_B1.c: 466: if(Product->Data[12]==0xff && Product->Data[13]==0xff && Product
      +                          ->Data[14]==0xff)
 13275  0E7C  086F               	movf	_Product,w
 13276  0E7D  3E0C               	addlw	12
 13277  0E7E  0086               	movwf	6
 13278  0E7F  3001               	movlw	1	; select bank2/3
 13279  0E80  0087               	movwf	7
 13280  0E81  0801               	movf	1,w
 13281  0E82  3AFF               	xorlw	255
 13282  0E83  1D03               	skipz
 13283  0E84  0008               	return
 13284  0E85  086F               	movf	_Product,w
 13285  0E86  3E0D               	addlw	13
 13286  0E87  0086               	movwf	6
 13287  0E88  3001               	movlw	1	; select bank2/3
 13288  0E89  0087               	movwf	7
 13289  0E8A  0801               	movf	1,w
 13290  0E8B  3AFF               	xorlw	255
 13291  0E8C  1D03               	skipz
 13292  0E8D  0008               	return
 13293  0E8E  086F               	movf	_Product,w
 13294  0E8F  3E0E               	addlw	14
 13295  0E90  0086               	movwf	6
 13296  0E91  3001               	movlw	1	; select bank2/3
 13297  0E92  0087               	movwf	7
 13298  0E93  0801               	movf	1,w
 13299  0E94  3AFF               	xorlw	255
 13300  0E95  1D03               	skipz
 13301  0E96  0008               	return
 13302                           
 13303                           ;MCU_16f1518_B1.c: 467: {
 13304                           ;MCU_16f1518_B1.c: 468: TMain->FirstOpen=1;
 13305  0E97  087D               	movf	_TMain,w
 13306  0E98  0086               	movwf	6
 13307  0E99  3001               	movlw	1	; select bank2/3
 13308  0E9A  0087               	movwf	7
 13309  0E9B  1681               	bsf	1,5
 13310                           
 13311                           ;MCU_16f1518_B1.c: 469: TMain->First=1;
 13312  0E9C  087D               	movf	_TMain,w
 13313  0E9D  3E03               	addlw	3
 13314  0E9E  0086               	movwf	6
 13315  0E9F  3001               	movlw	1	; select bank2/3
 13316  0EA0  0087               	movwf	7
 13317  0EA1  1481               	bsf	1,1
 13318                           
 13319                           ;MCU_16f1518_B1.c: 470: }
 13320                           ;MCU_16f1518_B1.c: 471: }
 13321  0EA2  0008               	return
 13322  0EA3                     l8831:	
 13323                           
 13324                           ;MCU_16f1518_B1.c: 472: else
 13325                           ;MCU_16f1518_B1.c: 473: {
 13326                           ;MCU_16f1518_B1.c: 474: i=setPercentValue(((char)(65*1.5)));
 13327  0EA3  3061               	movlw	97
 13328  0EA4  3190  2088  318E   	fcall	_setPercentValue
 13329  0EA7  0020               	movlb	0	; select bank0
 13330  0EA8  00DD               	movwf	??_Flash_Memory_Initialization
 13331  0EA9  085D               	movf	??_Flash_Memory_Initialization,w
 13332  0EAA  00DE               	movwf	Flash_Memory_Initialization@i
 13333                           
 13334                           ;MCU_16f1518_B1.c: 475: Memory->Data[0]=0xff;
 13335  0EAB  30FF               	movlw	255
 13336  0EAC  00DD               	movwf	??_Flash_Memory_Initialization
 13337  0EAD  087C               	movf	_Memory,w
 13338  0EAE  0086               	movwf	6
 13339  0EAF  3001               	movlw	1	; select bank2/3
 13340  0EB0  0087               	movwf	7
 13341  0EB1  085D               	movf	??_Flash_Memory_Initialization,w
 13342  0EB2  0081               	movwf	1
 13343                           
 13344                           ;MCU_16f1518_B1.c: 476: Memory->Data[1]=0xff;
 13345  0EB3  30FF               	movlw	255
 13346  0EB4  00DD               	movwf	??_Flash_Memory_Initialization
 13347  0EB5  0A7C               	incf	_Memory,w
 13348  0EB6  0086               	movwf	6
 13349  0EB7  3001               	movlw	1	; select bank2/3
 13350  0EB8  0087               	movwf	7
 13351  0EB9  085D               	movf	??_Flash_Memory_Initialization,w
 13352  0EBA  0081               	movwf	1
 13353                           
 13354                           ;MCU_16f1518_B1.c: 477: Memory->Data[2]=0xff;
 13355  0EBB  30FF               	movlw	255
 13356  0EBC  00DD               	movwf	??_Flash_Memory_Initialization
 13357  0EBD  087C               	movf	_Memory,w
 13358  0EBE  3E02               	addlw	2
 13359  0EBF  0086               	movwf	6
 13360  0EC0  3001               	movlw	1	; select bank2/3
 13361  0EC1  0087               	movwf	7
 13362  0EC2  085D               	movf	??_Flash_Memory_Initialization,w
 13363  0EC3  0081               	movwf	1
 13364                           
 13365                           ;MCU_16f1518_B1.c: 478: Memory->Data[3]=0xff;
 13366  0EC4  30FF               	movlw	255
 13367  0EC5  00DD               	movwf	??_Flash_Memory_Initialization
 13368  0EC6  087C               	movf	_Memory,w
 13369  0EC7  3E03               	addlw	3
 13370  0EC8  0086               	movwf	6
 13371  0EC9  3001               	movlw	1	; select bank2/3
 13372  0ECA  0087               	movwf	7
 13373  0ECB  085D               	movf	??_Flash_Memory_Initialization,w
 13374  0ECC  0081               	movwf	1
 13375                           
 13376                           ;MCU_16f1518_B1.c: 479: Memory->Data[4]=0xff;
 13377  0ECD  30FF               	movlw	255
 13378  0ECE  00DD               	movwf	??_Flash_Memory_Initialization
 13379  0ECF  087C               	movf	_Memory,w
 13380  0ED0  3E04               	addlw	4
 13381  0ED1  0086               	movwf	6
 13382  0ED2  3001               	movlw	1	; select bank2/3
 13383  0ED3  0087               	movwf	7
 13384  0ED4  085D               	movf	??_Flash_Memory_Initialization,w
 13385  0ED5  0081               	movwf	1
 13386                           
 13387                           ;MCU_16f1518_B1.c: 480: Memory->Data[5]=0xff;
 13388  0ED6  30FF               	movlw	255
 13389  0ED7  00DD               	movwf	??_Flash_Memory_Initialization
 13390  0ED8  087C               	movf	_Memory,w
 13391  0ED9  3E05               	addlw	5
 13392  0EDA  0086               	movwf	6
 13393  0EDB  3001               	movlw	1	; select bank2/3
 13394  0EDC  0087               	movwf	7
 13395  0EDD  085D               	movf	??_Flash_Memory_Initialization,w
 13396  0EDE  0081               	movwf	1
 13397                           
 13398                           ;MCU_16f1518_B1.c: 481: Memory->Data[31]=0xaa;
 13399  0EDF  30AA               	movlw	170
 13400  0EE0  00DD               	movwf	??_Flash_Memory_Initialization
 13401  0EE1  087C               	movf	_Memory,w
 13402  0EE2  3E1F               	addlw	31
 13403  0EE3  0086               	movwf	6
 13404  0EE4  3001               	movlw	1	; select bank2/3
 13405  0EE5  0087               	movwf	7
 13406  0EE6  085D               	movf	??_Flash_Memory_Initialization,w
 13407  0EE7  0081               	movwf	1
 13408                           
 13409                           ;MCU_16f1518_B1.c: 482: Product->Data[21]=i;
 13410  0EE8  085E               	movf	Flash_Memory_Initialization@i,w
 13411  0EE9  00DD               	movwf	??_Flash_Memory_Initialization
 13412  0EEA  086F               	movf	_Product,w
 13413  0EEB  3E15               	addlw	21
 13414  0EEC  0086               	movwf	6
 13415  0EED  3001               	movlw	1	; select bank2/3
 13416  0EEE  0087               	movwf	7
 13417  0EEF  085D               	movf	??_Flash_Memory_Initialization,w
 13418  0EF0  0081               	movwf	1
 13419                           
 13420                           ;MCU_16f1518_B1.c: 483: Product->Data[22]=i;
 13421  0EF1  085E               	movf	Flash_Memory_Initialization@i,w
 13422  0EF2  00DD               	movwf	??_Flash_Memory_Initialization
 13423  0EF3  086F               	movf	_Product,w
 13424  0EF4  3E16               	addlw	22
 13425  0EF5  0086               	movwf	6
 13426  0EF6  3001               	movlw	1	; select bank2/3
 13427  0EF7  0087               	movwf	7
 13428  0EF8  085D               	movf	??_Flash_Memory_Initialization,w
 13429  0EF9  0081               	movwf	1
 13430                           
 13431                           ;MCU_16f1518_B1.c: 484: Product->Data[23]=i;
 13432  0EFA  085E               	movf	Flash_Memory_Initialization@i,w
 13433  0EFB  00DD               	movwf	??_Flash_Memory_Initialization
 13434  0EFC  086F               	movf	_Product,w
 13435  0EFD  3E17               	addlw	23
 13436  0EFE  0086               	movwf	6
 13437  0EFF  3001               	movlw	1	; select bank2/3
 13438  0F00  0087               	movwf	7
 13439  0F01  085D               	movf	??_Flash_Memory_Initialization,w
 13440  0F02  0081               	movwf	1
 13441                           
 13442                           ;MCU_16f1518_B1.c: 485: GIE=0;
 13443  0F03  138B               	bcf	11,7	;volatile
 13444                           
 13445                           ;MCU_16f1518_B1.c: 486: Flash_Memory_Write();
 13446  0F04  319D  2564         	fcall	_Flash_Memory_Write
 13447                           
 13448                           ;MCU_16f1518_B1.c: 487: GIE=1;
 13449  0F06  178B               	bsf	11,7	;volatile
 13450                           
 13451                           ;MCU_16f1518_B1.c: 488: TMain->FirstOpen=1;
 13452  0F07  087D               	movf	_TMain,w
 13453  0F08  0086               	movwf	6
 13454  0F09  3001               	movlw	1	; select bank2/3
 13455  0F0A  0087               	movwf	7
 13456  0F0B  1681               	bsf	1,5
 13457                           
 13458                           ;MCU_16f1518_B1.c: 489: TMain->First=1;
 13459  0F0C  087D               	movf	_TMain,w
 13460  0F0D  3E03               	addlw	3
 13461  0F0E  0086               	movwf	6
 13462  0F0F  3001               	movlw	1	; select bank2/3
 13463  0F10  0087               	movwf	7
 13464  0F11  1481               	bsf	1,1
 13465  0F12  0008               	return
 13466  0F13                     __end_of_Flash_Memory_Initialization:	
 13467                           
 13468                           	psect	text73
 13469  1D64                     __ptext73:	
 13470 ;; *************** function _Flash_Memory_Write *****************
 13471 ;; Defined at:
 13472 ;;		line 537 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13473 ;; Parameters:    Size  Location     Type
 13474 ;;		None
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;  i               1    1[BANK0 ] unsigned char 
 13477 ;; Return value:  Size  Location     Type
 13478 ;;		None               void
 13479 ;; Registers used:
 13480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13481 ;; Tracked objects:
 13482 ;;		On entry : 0/0
 13483 ;;		On exit  : 0/0
 13484 ;;		Unchanged: 0/0
 13485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;Total ram usage:        2 bytes
 13491 ;; Hardware stack levels used:    1
 13492 ;; Hardware stack levels required when called:    5
 13493 ;; This function calls:
 13494 ;;		_Flash_Memory_Unlock
 13495 ;; This function is called by:
 13496 ;;		_Flash_Memory_Initialization
 13497 ;;		_Flash_Memory_Modify
 13498 ;; This function uses a non-reentrant model
 13499 ;;
 13500                           
 13501                           
 13502                           ;psect for function _Flash_Memory_Write
 13503  1D64                     _Flash_Memory_Write:	
 13504                           
 13505                           ;MCU_16f1518_B1.c: 539: char i;
 13506                           ;MCU_16f1518_B1.c: 540: CFGS=0;
 13507                           
 13508                           ;incstack = 0
 13509                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13510  1D64  0023               	movlb	3	; select bank3
 13511  1D65  1315               	bcf	21,6	;volatile
 13512                           
 13513                           ;MCU_16f1518_B1.c: 541: PMADRH=0x30;
 13514  1D66  3030               	movlw	48
 13515  1D67  0092               	movwf	18	;volatile
 13516                           
 13517                           ;MCU_16f1518_B1.c: 542: PMDATH=0;
 13518  1D68  0194               	clrf	20	;volatile
 13519                           
 13520                           ;MCU_16f1518_B1.c: 543: FREE=0;
 13521  1D69  1215               	bcf	21,4	;volatile
 13522                           
 13523                           ;MCU_16f1518_B1.c: 544: LWLO=1;
 13524  1D6A  1695               	bsf	21,5	;volatile
 13525                           
 13526                           ;MCU_16f1518_B1.c: 545: WREN=1;
 13527  1D6B  1515               	bsf	21,2	;volatile
 13528                           
 13529                           ;MCU_16f1518_B1.c: 546: for(i=0 ; i<32 ; i++)
 13530  1D6C  0020               	movlb	0	; select bank0
 13531  1D6D  01A1               	clrf	Flash_Memory_Write@i
 13532  1D6E  3020               	movlw	32
 13533  1D6F  0221               	subwf	Flash_Memory_Write@i,w
 13534  1D70  1803               	btfsc	3,0
 13535  1D71  2D8C               	goto	l1582
 13536  1D72                     l8227:	
 13537                           
 13538                           ;MCU_16f1518_B1.c: 547: {
 13539                           ;MCU_16f1518_B1.c: 548: PMADRL=i;
 13540  1D72  0821               	movf	Flash_Memory_Write@i,w
 13541  1D73  0023               	movlb	3	; select bank3
 13542  1D74  0091               	movwf	17	;volatile
 13543                           
 13544                           ;MCU_16f1518_B1.c: 549: PMDATL=Memory->Data[i];
 13545  1D75  0020               	movlb	0	; select bank0
 13546  1D76  0821               	movf	Flash_Memory_Write@i,w
 13547  1D77  077C               	addwf	_Memory,w
 13548  1D78  00A0               	movwf	??_Flash_Memory_Write
 13549  1D79  0820               	movf	??_Flash_Memory_Write,w
 13550  1D7A  0086               	movwf	6
 13551  1D7B  3001               	movlw	1	; select bank2/3
 13552  1D7C  0087               	movwf	7
 13553  1D7D  0801               	movf	1,w
 13554  1D7E  0023               	movlb	3	; select bank3
 13555  1D7F  0093               	movwf	19	;volatile
 13556                           
 13557                           ;MCU_16f1518_B1.c: 550: Flash_Memory_Unlock();
 13558  1D80  31A7  27AF  319D   	fcall	_Flash_Memory_Unlock
 13559  1D83  3001               	movlw	1
 13560  1D84  0020               	movlb	0	; select bank0
 13561  1D85  00A0               	movwf	??_Flash_Memory_Write
 13562  1D86  0820               	movf	??_Flash_Memory_Write,w
 13563  1D87  07A1               	addwf	Flash_Memory_Write@i,f
 13564  1D88  3020               	movlw	32
 13565  1D89  0221               	subwf	Flash_Memory_Write@i,w
 13566  1D8A  1C03               	skipc
 13567  1D8B  2D72               	goto	l8227
 13568  1D8C                     l1582:	
 13569                           
 13570                           ;MCU_16f1518_B1.c: 551: }
 13571                           ;MCU_16f1518_B1.c: 552: LWLO=0;
 13572  1D8C  0023               	movlb	3	; select bank3
 13573  1D8D  1295               	bcf	21,5	;volatile
 13574                           
 13575                           ;MCU_16f1518_B1.c: 553: Flash_Memory_Unlock();
 13576  1D8E  31A7  27AF         	fcall	_Flash_Memory_Unlock
 13577                           
 13578                           ;MCU_16f1518_B1.c: 554: WREN=0;
 13579  1D90  0023               	movlb	3	; select bank3
 13580  1D91  1115               	bcf	21,2	;volatile
 13581  1D92  0008               	return
 13582  1D93                     __end_of_Flash_Memory_Write:	
 13583                           
 13584                           	psect	text74
 13585  27AF                     __ptext74:	
 13586 ;; *************** function _Flash_Memory_Unlock *****************
 13587 ;; Defined at:
 13588 ;;		line 516 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13589 ;; Parameters:    Size  Location     Type
 13590 ;;		None
 13591 ;; Auto vars:     Size  Location     Type
 13592 ;;		None
 13593 ;; Return value:  Size  Location     Type
 13594 ;;		None               void
 13595 ;; Registers used:
 13596 ;;		wreg
 13597 ;; Tracked objects:
 13598 ;;		On entry : 0/0
 13599 ;;		On exit  : 0/0
 13600 ;;		Unchanged: 0/0
 13601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;Total ram usage:        0 bytes
 13607 ;; Hardware stack levels used:    1
 13608 ;; Hardware stack levels required when called:    4
 13609 ;; This function calls:
 13610 ;;		Nothing
 13611 ;; This function is called by:
 13612 ;;		_Flash_Memory_Write
 13613 ;;		_Flash_Memory_Erasing
 13614 ;; This function uses a non-reentrant model
 13615 ;;
 13616                           
 13617                           
 13618                           ;psect for function _Flash_Memory_Unlock
 13619  27AF                     _Flash_Memory_Unlock:	
 13620                           
 13621                           ;MCU_16f1518_B1.c: 518: PMCON2=0x55;
 13622                           
 13623                           ;incstack = 0
 13624                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13625  27AF  3055               	movlw	85
 13626  27B0  0023               	movlb	3	; select bank3
 13627  27B1  0096               	movwf	22	;volatile
 13628                           
 13629                           ;MCU_16f1518_B1.c: 519: PMCON2=0xaa;
 13630  27B2  30AA               	movlw	170
 13631  27B3  0096               	movwf	22	;volatile
 13632                           
 13633                           ;MCU_16f1518_B1.c: 520: WR=1;
 13634  27B4  1495               	bsf	21,1	;volatile
 13635                           
 13636                           ;MCU_16f1518_B1.c: 521: __nop();
 13637  27B5  0000               	nop
 13638                           
 13639                           ;MCU_16f1518_B1.c: 522: __nop();
 13640  27B6  0000               	nop
 13641  27B7  0008               	return
 13642  27B8                     __end_of_Flash_Memory_Unlock:	
 13643                           
 13644                           	psect	text75
 13645  1A8F                     __ptext75:	
 13646 ;; *************** function _Flash_Memory_Read *****************
 13647 ;; Defined at:
 13648 ;;		line 525 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;  address         1    wreg     unsigned char 
 13651 ;; Auto vars:     Size  Location     Type
 13652 ;;  address         1    2[BANK0 ] unsigned char 
 13653 ;;  ret             1    3[BANK0 ] unsigned char 
 13654 ;;  i               1    1[BANK0 ] unsigned char 
 13655 ;; Return value:  Size  Location     Type
 13656 ;;                  1    wreg      unsigned char 
 13657 ;; Registers used:
 13658 ;;		wreg, status,2
 13659 ;; Tracked objects:
 13660 ;;		On entry : 0/0
 13661 ;;		On exit  : 0/0
 13662 ;;		Unchanged: 0/0
 13663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;Total ram usage:        4 bytes
 13669 ;; Hardware stack levels used:    1
 13670 ;; Hardware stack levels required when called:    4
 13671 ;; This function calls:
 13672 ;;		Nothing
 13673 ;; This function is called by:
 13674 ;;		_Flash_Memory_Initialization
 13675 ;;		_Flash_Memory_Modify
 13676 ;; This function uses a non-reentrant model
 13677 ;;
 13678                           
 13679                           
 13680                           ;psect for function _Flash_Memory_Read
 13681  1A8F                     _Flash_Memory_Read:	
 13682                           
 13683                           ;incstack = 0
 13684                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13685                           ;Flash_Memory_Read@address stored from wreg
 13686  1A8F  0020               	movlb	0	; select bank0
 13687  1A90  00A2               	movwf	Flash_Memory_Read@address
 13688                           
 13689                           ;MCU_16f1518_B1.c: 527: char i,ret=0;
 13690  1A91  01A3               	clrf	Flash_Memory_Read@ret
 13691                           
 13692                           ;MCU_16f1518_B1.c: 528: PMADRH=0x30;
 13693  1A92  3030               	movlw	48
 13694  1A93  0023               	movlb	3	; select bank3
 13695  1A94  0092               	movwf	18	;volatile
 13696                           
 13697                           ;MCU_16f1518_B1.c: 529: PMADRL=address;
 13698  1A95  0020               	movlb	0	; select bank0
 13699  1A96  0822               	movf	Flash_Memory_Read@address,w
 13700  1A97  0023               	movlb	3	; select bank3
 13701  1A98  0091               	movwf	17	;volatile
 13702                           
 13703                           ;MCU_16f1518_B1.c: 530: CFGS=0;
 13704  1A99  1315               	bcf	21,6	;volatile
 13705                           
 13706                           ;MCU_16f1518_B1.c: 531: RD=1;
 13707  1A9A  1415               	bsf	21,0	;volatile
 13708                           
 13709                           ;MCU_16f1518_B1.c: 532: i=PMDATH;
 13710  1A9B  0814               	movf	20,w	;volatile
 13711  1A9C  0020               	movlb	0	; select bank0
 13712  1A9D  00A0               	movwf	??_Flash_Memory_Read
 13713  1A9E  0820               	movf	??_Flash_Memory_Read,w
 13714  1A9F  00A1               	movwf	Flash_Memory_Read@i
 13715                           
 13716                           ;MCU_16f1518_B1.c: 533: ret=PMDATL;
 13717  1AA0  0023               	movlb	3	; select bank3
 13718  1AA1  0813               	movf	19,w	;volatile
 13719  1AA2  0020               	movlb	0	; select bank0
 13720  1AA3  00A0               	movwf	??_Flash_Memory_Read
 13721  1AA4  0820               	movf	??_Flash_Memory_Read,w
 13722  1AA5  00A3               	movwf	Flash_Memory_Read@ret
 13723                           
 13724                           ;MCU_16f1518_B1.c: 534: return ret;
 13725  1AA6  0823               	movf	Flash_Memory_Read@ret,w
 13726  1AA7  0008               	return
 13727  1AA8                     __end_of_Flash_Memory_Read:	
 13728                           
 13729                           	psect	text76
 13730  2793                     __ptext76:	
 13731 ;; *************** function _DimmerLights_Main *****************
 13732 ;; Defined at:
 13733 ;;		line 105 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13734 ;; Parameters:    Size  Location     Type
 13735 ;;		None
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;		None
 13738 ;; Return value:  Size  Location     Type
 13739 ;;		None               void
 13740 ;; Registers used:
 13741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : 0/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;Total ram usage:        0 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; Hardware stack levels required when called:   10
 13754 ;; This function calls:
 13755 ;;		_DimmerLights_Close
 13756 ;;		_setDimmerLights_Main
 13757 ;; This function is called by:
 13758 ;;		_main
 13759 ;; This function uses a non-reentrant model
 13760 ;;
 13761                           
 13762                           
 13763                           ;psect for function _DimmerLights_Main
 13764  2793                     _DimmerLights_Main:	
 13765                           
 13766                           ;Dimmer_B1.c: 108: setDimmerLights_Main(1);
 13767                           
 13768                           ;incstack = 0
 13769                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13770  2793  3001               	movlw	1
 13771  2794  3197  2717  31A7   	fcall	_setDimmerLights_Main
 13772                           
 13773                           ;Dimmer_B1.c: 119: DimmerLights_Close();
 13774  2797  319A  22C1         	fcall	_DimmerLights_Close
 13775  2799  0008               	return
 13776  279A                     __end_of_DimmerLights_Main:	
 13777                           
 13778                           	psect	text77
 13779  1717                     __ptext77:	
 13780 ;; *************** function _setDimmerLights_Main *****************
 13781 ;; Defined at:
 13782 ;;		line 122 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13783 ;; Parameters:    Size  Location     Type
 13784 ;;  lights          1    wreg     unsigned char 
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;  lights          1   70[BANK0 ] unsigned char 
 13787 ;;  clear           1   69[BANK0 ] unsigned char 
 13788 ;; Return value:  Size  Location     Type
 13789 ;;		None               void
 13790 ;; Registers used:
 13791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/0
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;Total ram usage:        2 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    9
 13804 ;; This function calls:
 13805 ;;		_DimmerLightsPointSelect
 13806 ;;		_setBuz
 13807 ;;		_setDimmerLights
 13808 ;;		_setDimmerLights_Adj
 13809 ;; This function is called by:
 13810 ;;		_DimmerLights_Main
 13811 ;; This function uses a non-reentrant model
 13812 ;;
 13813                           
 13814                           
 13815                           ;psect for function _setDimmerLights_Main
 13816  1717                     _setDimmerLights_Main:	
 13817                           
 13818                           ;incstack = 0
 13819                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13820                           ;setDimmerLights_Main@lights stored from wreg
 13821  1717  0020               	movlb	0	; select bank0
 13822  1718  00E6               	movwf	setDimmerLights_Main@lights
 13823                           
 13824                           ;Dimmer_B1.c: 124: char clear=1;
 13825  1719  01E5               	clrf	setDimmerLights_Main@clear
 13826  171A  0AE5               	incf	setDimmerLights_Main@clear,f
 13827                           
 13828                           ;Dimmer_B1.c: 125: DimmerLightsPointSelect(lights);
 13829  171B  0866               	movf	setDimmerLights_Main@lights,w
 13830  171C  31A7  27EA  3197   	fcall	_DimmerLightsPointSelect
 13831                           
 13832                           ;Dimmer_B1.c: 153: if(DimmerLights->Trigger)
 13833  171F  0020               	movlb	0	; select bank0
 13834  1720  086C               	movf	_DimmerLights,w
 13835  1721  3E09               	addlw	9
 13836  1722  0086               	movwf	6
 13837  1723  3001               	movlw	1	; select bank2/3
 13838  1724  0087               	movwf	7
 13839  1725  1C81               	btfss	1,1
 13840  1726  2F56               	goto	l8469
 13841                           
 13842                           ;Dimmer_B1.c: 154: {
 13843                           ;Dimmer_B1.c: 155: if(clear)
 13844  1727  0865               	movf	setDimmerLights_Main@clear,w
 13845  1728  1903               	btfsc	3,2
 13846  1729  0008               	return
 13847                           
 13848                           ;Dimmer_B1.c: 156: {
 13849                           ;Dimmer_B1.c: 157: if(DimmerLights->Switch)
 13850  172A  086C               	movf	_DimmerLights,w
 13851  172B  3E09               	addlw	9
 13852  172C  0086               	movwf	6
 13853  172D  3001               	movlw	1	; select bank2/3
 13854  172E  0087               	movwf	7
 13855  172F  1C01               	btfss	1,0
 13856  1730  2F44               	goto	l8463
 13857                           
 13858                           ;Dimmer_B1.c: 158: {
 13859                           ;Dimmer_B1.c: 159: DimmerLights->Trigger=0;
 13860  1731  086C               	movf	_DimmerLights,w
 13861  1732  3E09               	addlw	9
 13862  1733  0086               	movwf	6
 13863  1734  3001               	movlw	1	; select bank2/3
 13864  1735  0087               	movwf	7
 13865  1736  1081               	bcf	1,1
 13866                           
 13867                           ;Dimmer_B1.c: 160: setDimmerLights(lights,1);
 13868  1737  01A4               	clrf	setDimmerLights@status
 13869  1738  0AA4               	incf	setDimmerLights@status,f
 13870  1739  0866               	movf	setDimmerLights_Main@lights,w
 13871  173A  318A  22C6         	fcall	_setDimmerLights
 13872                           
 13873                           ;Dimmer_B1.c: 163: DimmerLights->Clear=0;
 13874  173C  0020               	movlb	0	; select bank0
 13875  173D  086C               	movf	_DimmerLights,w
 13876  173E  3E0C               	addlw	12
 13877  173F  0086               	movwf	6
 13878  1740  3001               	movlw	1	; select bank2/3
 13879  1741  0087               	movwf	7
 13880  1742  1001               	bcf	1,0
 13881                           
 13882                           ;Dimmer_B1.c: 165: }
 13883  1743  0008               	return
 13884  1744                     l8463:	
 13885                           
 13886                           ;Dimmer_B1.c: 166: else
 13887                           ;Dimmer_B1.c: 167: {
 13888                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 13889  1744  086C               	movf	_DimmerLights,w
 13890  1745  3E09               	addlw	9
 13891  1746  0086               	movwf	6
 13892  1747  3001               	movlw	1	; select bank2/3
 13893  1748  0087               	movwf	7
 13894  1749  1081               	bcf	1,1
 13895                           
 13896                           ;Dimmer_B1.c: 169: setDimmerLights(lights,0);
 13897  174A  01A4               	clrf	setDimmerLights@status
 13898  174B  0866               	movf	setDimmerLights_Main@lights,w
 13899  174C  318A  22C6         	fcall	_setDimmerLights
 13900                           
 13901                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 13902  174E  0020               	movlb	0	; select bank0
 13903  174F  086C               	movf	_DimmerLights,w
 13904  1750  3E0C               	addlw	12
 13905  1751  0086               	movwf	6
 13906  1752  3001               	movlw	1	; select bank2/3
 13907  1753  0087               	movwf	7
 13908  1754  1001               	bcf	1,0
 13909                           
 13910                           ;Dimmer_B1.c: 174: }
 13911                           ;Dimmer_B1.c: 175: }
 13912                           ;Dimmer_B1.c: 176: }
 13913  1755  0008               	return
 13914  1756                     l8469:	
 13915                           
 13916                           ;Dimmer_B1.c: 177: else
 13917                           ;Dimmer_B1.c: 178: {
 13918                           ;Dimmer_B1.c: 179: if(DimmerLights->TriggerAdj)
 13919  1756  086C               	movf	_DimmerLights,w
 13920  1757  3E09               	addlw	9
 13921  1758  0086               	movwf	6
 13922  1759  3001               	movlw	1	; select bank2/3
 13923  175A  0087               	movwf	7
 13924  175B  1D81               	btfss	1,3
 13925  175C  0008               	return
 13926                           
 13927                           ;Dimmer_B1.c: 180: {
 13928                           ;Dimmer_B1.c: 181: if(clear)
 13929  175D  0865               	movf	setDimmerLights_Main@clear,w
 13930  175E  1903               	btfsc	3,2
 13931  175F  0008               	return
 13932                           
 13933                           ;Dimmer_B1.c: 182: {
 13934                           ;Dimmer_B1.c: 183: DimmerLightsPointSelect(lights);
 13935  1760  0866               	movf	setDimmerLights_Main@lights,w
 13936  1761  31A7  27EA  3197   	fcall	_DimmerLightsPointSelect
 13937                           
 13938                           ;Dimmer_B1.c: 184: DimmerLights->TriggerAdj=0;
 13939  1764  0020               	movlb	0	; select bank0
 13940  1765  086C               	movf	_DimmerLights,w
 13941  1766  3E09               	addlw	9
 13942  1767  0086               	movwf	6
 13943  1768  3001               	movlw	1	; select bank2/3
 13944  1769  0087               	movwf	7
 13945  176A  1181               	bcf	1,3
 13946                           
 13947                           ;Dimmer_B1.c: 185: if(DimmerLights->AdjGo)
 13948  176B  086C               	movf	_DimmerLights,w
 13949  176C  3E09               	addlw	9
 13950  176D  0086               	movwf	6
 13951  176E  3001               	movlw	1	; select bank2/3
 13952  176F  0087               	movwf	7
 13953  1770  1D01               	btfss	1,2
 13954  1771  2F82               	goto	l8481
 13955                           
 13956                           ;Dimmer_B1.c: 186: {
 13957                           ;Dimmer_B1.c: 187: setDimmerLights_Adj(lights,1);
 13958  1772  01E2               	clrf	setDimmerLights_Adj@status
 13959  1773  0AE2               	incf	setDimmerLights_Adj@status,f
 13960  1774  0866               	movf	setDimmerLights_Main@lights,w
 13961  1775  3190  2000  3197   	fcall	_setDimmerLights_Adj
 13962                           
 13963                           ;Dimmer_B1.c: 188: setBuz(1,100);
 13964  1778  3064               	movlw	100
 13965  1779  0020               	movlb	0	; select bank0
 13966  177A  00A6               	movwf	setBuz@time
 13967  177B  3000               	movlw	0
 13968  177C  00A7               	movwf	setBuz@time+1
 13969  177D  3001               	movlw	1
 13970  177E  3197  2789         	fcall	_setBuz
 13971                           
 13972                           ;Dimmer_B1.c: 189: }
 13973  1780  0020               	movlb	0	; select bank0
 13974  1781  0008               	return
 13975  1782                     l8481:	
 13976                           
 13977                           ;Dimmer_B1.c: 190: else
 13978                           ;Dimmer_B1.c: 191: {
 13979                           ;Dimmer_B1.c: 192: setDimmerLights_Adj(lights,0);
 13980  1782  0020               	movlb	0	; select bank0
 13981  1783  01E2               	clrf	setDimmerLights_Adj@status
 13982  1784  0866               	movf	setDimmerLights_Main@lights,w
 13983  1785  3190  2000         	fcall	_setDimmerLights_Adj
 13984  1787  0020               	movlb	0	; select bank0
 13985  1788  0008               	return
 13986  1789                     __end_of_setDimmerLights_Main:	
 13987                           
 13988                           	psect	text78
 13989  1000                     __ptext78:	
 13990 ;; *************** function _setDimmerLights_Adj *****************
 13991 ;; Defined at:
 13992 ;;		line 379 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 13993 ;; Parameters:    Size  Location     Type
 13994 ;;  lights          1    wreg     unsigned char 
 13995 ;;  status          1   66[BANK0 ] unsigned char 
 13996 ;; Auto vars:     Size  Location     Type
 13997 ;;  lights          1   68[BANK0 ] unsigned char 
 13998 ;; Return value:  Size  Location     Type
 13999 ;;		None               void
 14000 ;; Registers used:
 14001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14002 ;; Tracked objects:
 14003 ;;		On entry : 0/0
 14004 ;;		On exit  : 0/0
 14005 ;;		Unchanged: 0/0
 14006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14007 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14011 ;;Total ram usage:        3 bytes
 14012 ;; Hardware stack levels used:    1
 14013 ;; Hardware stack levels required when called:    8
 14014 ;; This function calls:
 14015 ;;		_DimmerLightsPointSelect
 14016 ;;		_setLoad_StatusOff
 14017 ;;		_setRF_DimmerLights
 14018 ;;		_setTxData
 14019 ;; This function is called by:
 14020 ;;		_setDimmerLights_Main
 14021 ;; This function uses a non-reentrant model
 14022 ;;
 14023                           
 14024                           
 14025                           ;psect for function _setDimmerLights_Adj
 14026  1000                     _setDimmerLights_Adj:	
 14027                           
 14028                           ;incstack = 0
 14029                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14030                           ;setDimmerLights_Adj@lights stored from wreg
 14031  1000  0020               	movlb	0	; select bank0
 14032  1001  00E4               	movwf	setDimmerLights_Adj@lights
 14033                           
 14034                           ;Dimmer_B1.c: 381: DimmerLightsPointSelect(lights);
 14035  1002  0864               	movf	setDimmerLights_Adj@lights,w
 14036  1003  31A7  27EA  3190   	fcall	_DimmerLightsPointSelect
 14037                           
 14038                           ;Dimmer_B1.c: 382: if(status)
 14039  1006  0020               	movlb	0	; select bank0
 14040  1007  0862               	movf	setDimmerLights_Adj@status,w
 14041  1008  1903               	btfsc	3,2
 14042  1009  2815               	goto	l8203
 14043                           
 14044                           ;Dimmer_B1.c: 383: {
 14045                           ;Dimmer_B1.c: 384: DimmerLights->AdjFlag=1;
 14046  100A  086C               	movf	_DimmerLights,w
 14047  100B  0086               	movwf	6
 14048  100C  3001               	movlw	1	; select bank2/3
 14049  100D  0087               	movwf	7
 14050  100E  1581               	bsf	1,3
 14051                           
 14052                           ;Dimmer_B1.c: 385: DimmerLights->Signal=1;
 14053  100F  086C               	movf	_DimmerLights,w
 14054  1010  0086               	movwf	6
 14055  1011  3001               	movlw	1	; select bank2/3
 14056  1012  0087               	movwf	7
 14057  1013  1481               	bsf	1,1
 14058                           
 14059                           ;Dimmer_B1.c: 386: }
 14060  1014  0008               	return
 14061  1015                     l8203:	
 14062                           
 14063                           ;Dimmer_B1.c: 387: else
 14064                           ;Dimmer_B1.c: 388: {
 14065                           ;Dimmer_B1.c: 389: if(DimmerLights->AdjFlag)
 14066  1015  086C               	movf	_DimmerLights,w
 14067  1016  0086               	movwf	6
 14068  1017  3001               	movlw	1	; select bank2/3
 14069  1018  0087               	movwf	7
 14070  1019  1D81               	btfss	1,3
 14071  101A  0008               	return
 14072                           
 14073                           ;Dimmer_B1.c: 390: {
 14074                           ;Dimmer_B1.c: 391: DimmerLights->Signal=0;
 14075  101B  086C               	movf	_DimmerLights,w
 14076  101C  0086               	movwf	6
 14077  101D  3001               	movlw	1	; select bank2/3
 14078  101E  0087               	movwf	7
 14079  101F  1081               	bcf	1,1
 14080                           
 14081                           ;Dimmer_B1.c: 392: DimmerLights->AdjFlag=0;
 14082  1020  086C               	movf	_DimmerLights,w
 14083  1021  0086               	movwf	6
 14084  1022  3001               	movlw	1	; select bank2/3
 14085  1023  0087               	movwf	7
 14086  1024  1181               	bcf	1,3
 14087                           
 14088                           ;Dimmer_B1.c: 393: setLoad_StatusOff(0,1);
 14089  1025  01A0               	clrf	setLoad_StatusOff@command
 14090  1026  0AA0               	incf	setLoad_StatusOff@command,f
 14091  1027  3000               	movlw	0
 14092  1028  319D  25F4  3190   	fcall	_setLoad_StatusOff
 14093                           
 14094                           ;Dimmer_B1.c: 394: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 14095  102B  0020               	movlb	0	; select bank0
 14096  102C  086C               	movf	_DimmerLights,w
 14097  102D  3E04               	addlw	4
 14098  102E  0086               	movwf	6
 14099  102F  3001               	movlw	1	; select bank2/3
 14100  1030  0087               	movwf	7
 14101  1031  0801               	movf	1,w
 14102  1032  00E3               	movwf	??_setDimmerLights_Adj
 14103  1033  086C               	movf	_DimmerLights,w
 14104  1034  3E05               	addlw	5
 14105  1035  0086               	movwf	6
 14106  1036  3001               	movlw	1	; select bank2/3
 14107  1037  0087               	movwf	7
 14108  1038  0863               	movf	??_setDimmerLights_Adj,w
 14109  1039  0081               	movwf	1
 14110                           
 14111                           ;Dimmer_B1.c: 402: setRF_DimmerLights(lights,1);
 14112  103A  01DD               	clrf	setRF_DimmerLights@on
 14113  103B  0ADD               	incf	setRF_DimmerLights@on,f
 14114  103C  0864               	movf	setDimmerLights_Adj@lights,w
 14115  103D  3195  255C  3190   	fcall	_setRF_DimmerLights
 14116                           
 14117                           ;Dimmer_B1.c: 403: setTxData(1);
 14118  1040  3001               	movlw	1
 14119  1041  318D  2566         	fcall	_setTxData
 14120  1043  0008               	return
 14121  1044                     __end_of_setDimmerLights_Adj:	
 14122                           
 14123                           	psect	text79
 14124  1DF4                     __ptext79:	
 14125 ;; *************** function _setLoad_StatusOff *****************
 14126 ;; Defined at:
 14127 ;;		line 284 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;  lights          1    wreg     unsigned char 
 14130 ;;  command         1    0[BANK0 ] unsigned char 
 14131 ;; Auto vars:     Size  Location     Type
 14132 ;;  lights          1    1[BANK0 ] unsigned char 
 14133 ;; Return value:  Size  Location     Type
 14134 ;;		None               void
 14135 ;; Registers used:
 14136 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14137 ;; Tracked objects:
 14138 ;;		On entry : 0/0
 14139 ;;		On exit  : 0/0
 14140 ;;		Unchanged: 0/0
 14141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14142 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;Total ram usage:        2 bytes
 14147 ;; Hardware stack levels used:    1
 14148 ;; Hardware stack levels required when called:    4
 14149 ;; This function calls:
 14150 ;;		Nothing
 14151 ;; This function is called by:
 14152 ;;		_setDimmerLights_ERROR
 14153 ;;		_setDimmerLights_Adj
 14154 ;; This function uses a non-reentrant model
 14155 ;;
 14156                           
 14157                           
 14158                           ;psect for function _setLoad_StatusOff
 14159  1DF4                     _setLoad_StatusOff:	
 14160                           
 14161                           ;incstack = 0
 14162                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 14163                           ;setLoad_StatusOff@lights stored from wreg
 14164  1DF4  0020               	movlb	0	; select bank0
 14165  1DF5  00A1               	movwf	setLoad_StatusOff@lights
 14166                           
 14167                           ;OverLoad_B1.c: 286: Load->StatusOff=command;
 14168  1DF6  086E               	movf	_Load,w
 14169  1DF7  3E46               	addlw	70
 14170  1DF8  0086               	movwf	6
 14171  1DF9  3002               	movlw	2	; select bank4/5
 14172  1DFA  0087               	movwf	7
 14173  1DFB  0820               	movf	setLoad_StatusOff@command,w
 14174  1DFC  1081               	bcf	1,1
 14175  1DFD  1D03               	skipz
 14176  1DFE  1481               	bsf	1,1
 14177                           
 14178                           ;OverLoad_B1.c: 287: Load->SafeCount-=2;
 14179  1DFF  086E               	movf	_Load,w
 14180  1E00  3E42               	addlw	66
 14181  1E01  0086               	movwf	6
 14182  1E02  3002               	movlw	2	; select bank4/5
 14183  1E03  0087               	movwf	7
 14184  1E04  3002               	movlw	2
 14185  1E05  0281               	subwf	1,f
 14186                           
 14187                           ;OverLoad_B1.c: 288: if(lights == 1)
 14188  1E06  0821               	movf	setLoad_StatusOff@lights,w
 14189  1E07  3A01               	xorlw	1
 14190  1E08  1D03               	skipz
 14191  1E09  2E10               	goto	l7863
 14192                           
 14193                           ;OverLoad_B1.c: 289: {
 14194                           ;OverLoad_B1.c: 290: Load->Lights1Status=0;
 14195  1E0A  086E               	movf	_Load,w
 14196  1E0B  3E43               	addlw	67
 14197  1E0C  0086               	movwf	6
 14198  1E0D  3002               	movlw	2	; select bank4/5
 14199  1E0E  0087               	movwf	7
 14200  1E0F  0181               	clrf	1
 14201  1E10                     l7863:	
 14202                           
 14203                           ;OverLoad_B1.c: 291: }
 14204                           ;OverLoad_B1.c: 292: if(lights == 2)
 14205  1E10  0821               	movf	setLoad_StatusOff@lights,w
 14206  1E11  3A02               	xorlw	2
 14207  1E12  1D03               	skipz
 14208  1E13  2E1A               	goto	l7867
 14209                           
 14210                           ;OverLoad_B1.c: 293: {
 14211                           ;OverLoad_B1.c: 294: Load->Lights2Status=0;
 14212  1E14  086E               	movf	_Load,w
 14213  1E15  3E44               	addlw	68
 14214  1E16  0086               	movwf	6
 14215  1E17  3002               	movlw	2	; select bank4/5
 14216  1E18  0087               	movwf	7
 14217  1E19  0181               	clrf	1
 14218  1E1A                     l7867:	
 14219                           
 14220                           ;OverLoad_B1.c: 295: }
 14221                           ;OverLoad_B1.c: 296: if(lights == 3)
 14222  1E1A  0821               	movf	setLoad_StatusOff@lights,w
 14223  1E1B  3A03               	xorlw	3
 14224  1E1C  1D03               	skipz
 14225  1E1D  0008               	return
 14226                           
 14227                           ;OverLoad_B1.c: 297: {
 14228                           ;OverLoad_B1.c: 298: Load->Lights3Status=0;
 14229  1E1E  086E               	movf	_Load,w
 14230  1E1F  3E45               	addlw	69
 14231  1E20  0086               	movwf	6
 14232  1E21  3002               	movlw	2	; select bank4/5
 14233  1E22  0087               	movwf	7
 14234  1E23  0181               	clrf	1
 14235  1E24  0008               	return
 14236  1E25                     __end_of_setLoad_StatusOff:	
 14237                           
 14238                           	psect	text80
 14239  0AC6                     __ptext80:	
 14240 ;; *************** function _setDimmerLights *****************
 14241 ;; Defined at:
 14242 ;;		line 321 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 14243 ;; Parameters:    Size  Location     Type
 14244 ;;  lights          1    wreg     unsigned char 
 14245 ;;  status          1    4[BANK0 ] unsigned char 
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;  lights          1    6[BANK0 ] unsigned char 
 14248 ;; Return value:  Size  Location     Type
 14249 ;;		None               void
 14250 ;; Registers used:
 14251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;Total ram usage:        3 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    6
 14264 ;; This function calls:
 14265 ;;		_DimmerLightsPointSelect
 14266 ;;		_setLED
 14267 ;;		_setLoad_Count
 14268 ;;		_setLoad_StatusOn
 14269 ;; This function is called by:
 14270 ;;		_setDimmerLights_Main
 14271 ;;		_setControl_Lights_Table
 14272 ;; This function uses a non-reentrant model
 14273 ;;
 14274                           
 14275                           
 14276                           ;psect for function _setDimmerLights
 14277  0AC6                     _setDimmerLights:	
 14278                           
 14279                           ;incstack = 0
 14280                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14281                           ;setDimmerLights@lights stored from wreg
 14282  0AC6  0020               	movlb	0	; select bank0
 14283  0AC7  00A6               	movwf	setDimmerLights@lights
 14284                           
 14285                           ;Dimmer_B1.c: 323: DimmerLightsPointSelect(lights);
 14286  0AC8  0826               	movf	setDimmerLights@lights,w
 14287  0AC9  31A7  27EA  318A   	fcall	_DimmerLightsPointSelect
 14288                           
 14289                           ;Dimmer_B1.c: 324: Dimmer->Load=lights;
 14290  0ACC  0020               	movlb	0	; select bank0
 14291  0ACD  0826               	movf	setDimmerLights@lights,w
 14292  0ACE  00A5               	movwf	??_setDimmerLights
 14293  0ACF  0021               	movlb	1	; select bank1
 14294  0AD0  0A39               	incf	_Dimmer^(0+128),w
 14295  0AD1  0086               	movwf	6
 14296  0AD2  0187               	clrf	7
 14297  0AD3  0020               	movlb	0	; select bank0
 14298  0AD4  0825               	movf	??_setDimmerLights,w
 14299  0AD5  0081               	movwf	1
 14300                           
 14301                           ;Dimmer_B1.c: 325: if(status)
 14302  0AD6  0824               	movf	setDimmerLights@status,w
 14303  0AD7  1903               	btfsc	3,2
 14304  0AD8  2B2F               	goto	l7969
 14305                           
 14306                           ;Dimmer_B1.c: 326: {
 14307                           ;Dimmer_B1.c: 327: DimmerLights->Status=1;
 14308  0AD9  086C               	movf	_DimmerLights,w
 14309  0ADA  0086               	movwf	6
 14310  0ADB  3001               	movlw	1	; select bank2/3
 14311  0ADC  0087               	movwf	7
 14312  0ADD  1681               	bsf	1,5
 14313                           
 14314                           ;Dimmer_B1.c: 328: setLED(lights,0);
 14315  0ADE  01A2               	clrf	setLED@command
 14316  0ADF  0826               	movf	setDimmerLights@lights,w
 14317  0AE0  3193  2372  318A   	fcall	_setLED
 14318                           
 14319                           ;Dimmer_B1.c: 329: RC7=!0;
 14320  0AE3  0020               	movlb	0	; select bank0
 14321  0AE4  178E               	bsf	14,7	;volatile
 14322                           
 14323                           ;Dimmer_B1.c: 330: setLoad_Count(0);
 14324  0AE5  3000               	movlw	0
 14325  0AE6  319A  221C  318A   	fcall	_setLoad_Count
 14326                           
 14327                           ;Dimmer_B1.c: 332: DimmerLights->Signal=1;
 14328  0AE9  0020               	movlb	0	; select bank0
 14329  0AEA  086C               	movf	_DimmerLights,w
 14330  0AEB  0086               	movwf	6
 14331  0AEC  3001               	movlw	1	; select bank2/3
 14332  0AED  0087               	movwf	7
 14333  0AEE  1481               	bsf	1,1
 14334                           
 14335                           ;Dimmer_B1.c: 333: DimmerLights->DimmingTimeValue=3;
 14336  0AEF  3003               	movlw	3
 14337  0AF0  00A5               	movwf	??_setDimmerLights
 14338  0AF1  086C               	movf	_DimmerLights,w
 14339  0AF2  3E02               	addlw	2
 14340  0AF3  0086               	movwf	6
 14341  0AF4  3001               	movlw	1	; select bank2/3
 14342  0AF5  0087               	movwf	7
 14343  0AF6  0825               	movf	??_setDimmerLights,w
 14344  0AF7  0081               	movwf	1
 14345                           
 14346                           ;Dimmer_B1.c: 335: if(!DimmerLights->StatusFlag)
 14347  0AF8  086C               	movf	_DimmerLights,w
 14348  0AF9  0086               	movwf	6
 14349  0AFA  3001               	movlw	1	; select bank2/3
 14350  0AFB  0087               	movwf	7
 14351  0AFC  1B01               	btfsc	1,6
 14352  0AFD  0008               	return
 14353                           
 14354                           ;Dimmer_B1.c: 336: {
 14355                           ;Dimmer_B1.c: 337: DimmerLights->StatusFlag=1;
 14356  0AFE  086C               	movf	_DimmerLights,w
 14357  0AFF  0086               	movwf	6
 14358  0B00  3001               	movlw	1	; select bank2/3
 14359  0B01  0087               	movwf	7
 14360  0B02  1701               	bsf	1,6
 14361                           
 14362                           ;Dimmer_B1.c: 338: setLoad_StatusOn(lights,1);
 14363  0B03  01A0               	clrf	setLoad_StatusOn@command
 14364  0B04  0AA0               	incf	setLoad_StatusOn@command,f
 14365  0B05  0826               	movf	setDimmerLights@lights,w
 14366  0B06  319E  2625         	fcall	_setLoad_StatusOn
 14367                           
 14368                           ;Dimmer_B1.c: 339: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 14369  0B08  087C               	movf	_Memory,w
 14370  0B09  3E22               	addlw	34
 14371  0B0A  0086               	movwf	6
 14372  0B0B  3001               	movlw	1	; select bank2/3
 14373  0B0C  0087               	movwf	7
 14374  0B0D  1081               	bcf	1,1
 14375  0B0E  087C               	movf	_Memory,w
 14376  0B0F  3E23               	addlw	35
 14377  0B10  0086               	movwf	6
 14378  0B11  3001               	movlw	1	; select bank2/3
 14379  0B12  0087               	movwf	7
 14380  0B13  3000               	movlw	0
 14381  0B14  3FC0               	movwi [0]fsr1
 14382  0B15  3FC1               	movwi [1]fsr1
 14383                           
 14384                           ;Dimmer_B1.c: 342: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 14385  0B16  0020               	movlb	0	; select bank0
 14386  0B17  086C               	movf	_DimmerLights,w
 14387  0B18  3E05               	addlw	5
 14388  0B19  0086               	movwf	6
 14389  0B1A  3001               	movlw	1	; select bank2/3
 14390  0B1B  0087               	movwf	7
 14391  0B1C  0801               	movf	1,w
 14392  0B1D  00A5               	movwf	??_setDimmerLights
 14393  0B1E  086C               	movf	_DimmerLights,w
 14394  0B1F  3E04               	addlw	4
 14395  0B20  0086               	movwf	6
 14396  0B21  3001               	movlw	1	; select bank2/3
 14397  0B22  0087               	movwf	7
 14398  0B23  0825               	movf	??_setDimmerLights,w
 14399  0B24  0081               	movwf	1
 14400                           
 14401                           ;Dimmer_B1.c: 346: DimmerLights->DimmingValue=((char)(65*1.5));
 14402  0B25  3061               	movlw	97
 14403  0B26  00A5               	movwf	??_setDimmerLights
 14404  0B27  086C               	movf	_DimmerLights,w
 14405  0B28  3E04               	addlw	4
 14406  0B29  0086               	movwf	6
 14407  0B2A  3001               	movlw	1	; select bank2/3
 14408  0B2B  0087               	movwf	7
 14409  0B2C  0825               	movf	??_setDimmerLights,w
 14410  0B2D  0081               	movwf	1
 14411                           
 14412                           ;Dimmer_B1.c: 348: }
 14413                           ;Dimmer_B1.c: 349: }
 14414  0B2E  0008               	return
 14415  0B2F                     l7969:	
 14416                           
 14417                           ;Dimmer_B1.c: 350: else
 14418                           ;Dimmer_B1.c: 351: {
 14419                           ;Dimmer_B1.c: 352: DimmerLights->Status=0;
 14420  0B2F  086C               	movf	_DimmerLights,w
 14421  0B30  0086               	movwf	6
 14422  0B31  3001               	movlw	1	; select bank2/3
 14423  0B32  0087               	movwf	7
 14424  0B33  1281               	bcf	1,5
 14425                           
 14426                           ;Dimmer_B1.c: 354: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 14427  0B34  086C               	movf	_DimmerLights,w
 14428  0B35  3E06               	addlw	6
 14429  0B36  0086               	movwf	6
 14430  0B37  3001               	movlw	1	; select bank2/3
 14431  0B38  0087               	movwf	7
 14432  0B39  0801               	movf	1,w
 14433  0B3A  00A5               	movwf	??_setDimmerLights
 14434  0B3B  086C               	movf	_DimmerLights,w
 14435  0B3C  3E04               	addlw	4
 14436  0B3D  0086               	movwf	6
 14437  0B3E  3001               	movlw	1	; select bank2/3
 14438  0B3F  0087               	movwf	7
 14439  0B40  0825               	movf	??_setDimmerLights,w
 14440  0B41  0081               	movwf	1
 14441                           
 14442                           ;Dimmer_B1.c: 359: DimmerLights->MosfetClose=1;
 14443  0B42  086C               	movf	_DimmerLights,w
 14444  0B43  3E09               	addlw	9
 14445  0B44  0086               	movwf	6
 14446  0B45  3001               	movlw	1	; select bank2/3
 14447  0B46  0087               	movwf	7
 14448  0B47  1701               	bsf	1,6
 14449                           
 14450                           ;Dimmer_B1.c: 361: DimmerLights->Signal=1;
 14451  0B48  086C               	movf	_DimmerLights,w
 14452  0B49  0086               	movwf	6
 14453  0B4A  3001               	movlw	1	; select bank2/3
 14454  0B4B  0087               	movwf	7
 14455  0B4C  1481               	bsf	1,1
 14456                           
 14457                           ;Dimmer_B1.c: 362: DimmerLights->AdjFlag=0;
 14458  0B4D  086C               	movf	_DimmerLights,w
 14459  0B4E  0086               	movwf	6
 14460  0B4F  3001               	movlw	1	; select bank2/3
 14461  0B50  0087               	movwf	7
 14462  0B51  1181               	bcf	1,3
 14463                           
 14464                           ;Dimmer_B1.c: 363: DimmerLights->AdjStatus=0;
 14465  0B52  086C               	movf	_DimmerLights,w
 14466  0B53  0086               	movwf	6
 14467  0B54  3001               	movlw	1	; select bank2/3
 14468  0B55  0087               	movwf	7
 14469  0B56  1201               	bcf	1,4
 14470                           
 14471                           ;Dimmer_B1.c: 364: DimmerLights->DimmingTimeValue=3;
 14472  0B57  3003               	movlw	3
 14473  0B58  00A5               	movwf	??_setDimmerLights
 14474  0B59  086C               	movf	_DimmerLights,w
 14475  0B5A  3E02               	addlw	2
 14476  0B5B  0086               	movwf	6
 14477  0B5C  3001               	movlw	1	; select bank2/3
 14478  0B5D  0087               	movwf	7
 14479  0B5E  0825               	movf	??_setDimmerLights,w
 14480  0B5F  0081               	movwf	1
 14481  0B60  0008               	return
 14482  0B61                     __end_of_setDimmerLights:	
 14483                           
 14484                           	psect	text81
 14485  1E25                     __ptext81:	
 14486 ;; *************** function _setLoad_StatusOn *****************
 14487 ;; Defined at:
 14488 ;;		line 266 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;  lights          1    wreg     unsigned char 
 14491 ;;  command         1    0[BANK0 ] unsigned char 
 14492 ;; Auto vars:     Size  Location     Type
 14493 ;;  lights          1    1[BANK0 ] unsigned char 
 14494 ;; Return value:  Size  Location     Type
 14495 ;;		None               void
 14496 ;; Registers used:
 14497 ;;		wreg, fsr1l, fsr1h
 14498 ;; Tracked objects:
 14499 ;;		On entry : 0/0
 14500 ;;		On exit  : 0/0
 14501 ;;		Unchanged: 0/0
 14502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14503 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;Total ram usage:        2 bytes
 14508 ;; Hardware stack levels used:    1
 14509 ;; Hardware stack levels required when called:    4
 14510 ;; This function calls:
 14511 ;;		Nothing
 14512 ;; This function is called by:
 14513 ;;		_setDimmerLights
 14514 ;; This function uses a non-reentrant model
 14515 ;;
 14516                           
 14517                           
 14518                           ;psect for function _setLoad_StatusOn
 14519  1E25                     _setLoad_StatusOn:	
 14520                           
 14521                           ;incstack = 0
 14522                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 14523                           ;setLoad_StatusOn@lights stored from wreg
 14524  1E25  0020               	movlb	0	; select bank0
 14525  1E26  00A1               	movwf	setLoad_StatusOn@lights
 14526                           
 14527                           ;OverLoad_B1.c: 268: Load->GO=1;
 14528  1E27  086E               	movf	_Load,w
 14529  1E28  0086               	movwf	6
 14530  1E29  3002               	movlw	2	; select bank4/5
 14531  1E2A  0087               	movwf	7
 14532  1E2B  1481               	bsf	1,1
 14533                           
 14534                           ;OverLoad_B1.c: 269: Load->StatusOn=command;
 14535  1E2C  086E               	movf	_Load,w
 14536  1E2D  3E46               	addlw	70
 14537  1E2E  0086               	movwf	6
 14538  1E2F  3002               	movlw	2	; select bank4/5
 14539  1E30  0087               	movwf	7
 14540  1E31  0820               	movf	setLoad_StatusOn@command,w
 14541  1E32  1001               	bcf	1,0
 14542  1E33  1D03               	skipz
 14543  1E34  1401               	bsf	1,0
 14544                           
 14545                           ;OverLoad_B1.c: 271: if(lights == 1)
 14546  1E35  0821               	movf	setLoad_StatusOn@lights,w
 14547  1E36  3A01               	xorlw	1
 14548  1E37  1D03               	skipz
 14549  1E38  2E40               	goto	l7927
 14550                           
 14551                           ;OverLoad_B1.c: 272: {
 14552                           ;OverLoad_B1.c: 273: Load->Lights1Status=1;
 14553  1E39  086E               	movf	_Load,w
 14554  1E3A  3E43               	addlw	67
 14555  1E3B  0086               	movwf	6
 14556  1E3C  3002               	movlw	2	; select bank4/5
 14557  1E3D  0087               	movwf	7
 14558  1E3E  0181               	clrf	1
 14559  1E3F  0A81               	incf	1,f
 14560  1E40                     l7927:	
 14561                           
 14562                           ;OverLoad_B1.c: 274: }
 14563                           ;OverLoad_B1.c: 275: if(lights == 2)
 14564  1E40  0821               	movf	setLoad_StatusOn@lights,w
 14565  1E41  3A02               	xorlw	2
 14566  1E42  1D03               	skipz
 14567  1E43  2E4B               	goto	l7931
 14568                           
 14569                           ;OverLoad_B1.c: 276: {
 14570                           ;OverLoad_B1.c: 277: Load->Lights2Status=1;
 14571  1E44  086E               	movf	_Load,w
 14572  1E45  3E44               	addlw	68
 14573  1E46  0086               	movwf	6
 14574  1E47  3002               	movlw	2	; select bank4/5
 14575  1E48  0087               	movwf	7
 14576  1E49  0181               	clrf	1
 14577  1E4A  0A81               	incf	1,f
 14578  1E4B                     l7931:	
 14579                           
 14580                           ;OverLoad_B1.c: 278: }
 14581                           ;OverLoad_B1.c: 279: if(lights == 3)
 14582  1E4B  0821               	movf	setLoad_StatusOn@lights,w
 14583  1E4C  3A03               	xorlw	3
 14584  1E4D  1D03               	skipz
 14585  1E4E  0008               	return
 14586                           
 14587                           ;OverLoad_B1.c: 280: {
 14588                           ;OverLoad_B1.c: 281: Load->Lights3Status=1;
 14589  1E4F  086E               	movf	_Load,w
 14590  1E50  3E45               	addlw	69
 14591  1E51  0086               	movwf	6
 14592  1E52  3002               	movlw	2	; select bank4/5
 14593  1E53  0087               	movwf	7
 14594  1E54  0181               	clrf	1
 14595  1E55  0A81               	incf	1,f
 14596  1E56  0008               	return
 14597  1E57                     __end_of_setLoad_StatusOn:	
 14598                           
 14599                           	psect	text82
 14600  1A1C                     __ptext82:	
 14601 ;; *************** function _setLoad_Count *****************
 14602 ;; Defined at:
 14603 ;;		line 251 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 14604 ;; Parameters:    Size  Location     Type
 14605 ;;  command         1    wreg     unsigned char 
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;  command         1    1[BANK0 ] unsigned char 
 14608 ;; Return value:  Size  Location     Type
 14609 ;;		None               void
 14610 ;; Registers used:
 14611 ;;		wreg, fsr1l, fsr1h
 14612 ;; Tracked objects:
 14613 ;;		On entry : 0/0
 14614 ;;		On exit  : 0/0
 14615 ;;		Unchanged: 0/0
 14616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;Total ram usage:        2 bytes
 14622 ;; Hardware stack levels used:    1
 14623 ;; Hardware stack levels required when called:    4
 14624 ;; This function calls:
 14625 ;;		Nothing
 14626 ;; This function is called by:
 14627 ;;		_setDimmerLights
 14628 ;; This function uses a non-reentrant model
 14629 ;;
 14630                           
 14631                           
 14632                           ;psect for function _setLoad_Count
 14633  1A1C                     _setLoad_Count:	
 14634                           
 14635                           ;incstack = 0
 14636                           ; Regs used in _setLoad_Count: [wregfsr1]
 14637                           ;setLoad_Count@command stored from wreg
 14638  1A1C  0020               	movlb	0	; select bank0
 14639  1A1D  00A1               	movwf	setLoad_Count@command
 14640                           
 14641                           ;OverLoad_B1.c: 253: Load->Count=command;
 14642  1A1E  0821               	movf	setLoad_Count@command,w
 14643  1A1F  00A0               	movwf	??_setLoad_Count
 14644  1A20  086E               	movf	_Load,w
 14645  1A21  3E3A               	addlw	58
 14646  1A22  0086               	movwf	6
 14647  1A23  3002               	movlw	2	; select bank4/5
 14648  1A24  0087               	movwf	7
 14649  1A25  0820               	movf	??_setLoad_Count,w
 14650  1A26  0081               	movwf	1
 14651                           
 14652                           ;OverLoad_B1.c: 254: Load->SafeCount=command;
 14653  1A27  0821               	movf	setLoad_Count@command,w
 14654  1A28  00A0               	movwf	??_setLoad_Count
 14655  1A29  086E               	movf	_Load,w
 14656  1A2A  3E42               	addlw	66
 14657  1A2B  0086               	movwf	6
 14658  1A2C  3002               	movlw	2	; select bank4/5
 14659  1A2D  0087               	movwf	7
 14660  1A2E  0820               	movf	??_setLoad_Count,w
 14661  1A2F  0081               	movwf	1
 14662  1A30  0008               	return
 14663  1A31                     __end_of_setLoad_Count:	
 14664                           
 14665                           	psect	text83
 14666  1372                     __ptext83:	
 14667 ;; *************** function _setLED *****************
 14668 ;; Defined at:
 14669 ;;		line 74 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 14670 ;; Parameters:    Size  Location     Type
 14671 ;;  led             1    wreg     unsigned char 
 14672 ;;  command         1    2[BANK0 ] unsigned char 
 14673 ;; Auto vars:     Size  Location     Type
 14674 ;;  led             1    3[BANK0 ] unsigned char 
 14675 ;; Return value:  Size  Location     Type
 14676 ;;		None               void
 14677 ;; Registers used:
 14678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14679 ;; Tracked objects:
 14680 ;;		On entry : 0/0
 14681 ;;		On exit  : 0/0
 14682 ;;		Unchanged: 0/0
 14683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14684 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14688 ;;Total ram usage:        2 bytes
 14689 ;; Hardware stack levels used:    1
 14690 ;; Hardware stack levels required when called:    5
 14691 ;; This function calls:
 14692 ;;		_LedPointSelect
 14693 ;; This function is called by:
 14694 ;;		_setDimmerLights_ERROR
 14695 ;;		_setDimmerLights
 14696 ;;		_setLED_Initialization
 14697 ;;		_setLoad_Exceptions
 14698 ;;		_setPowerFault_Exceptions
 14699 ;;		_setSw_Initialization
 14700 ;; This function uses a non-reentrant model
 14701 ;;
 14702                           
 14703                           
 14704                           ;psect for function _setLED
 14705  1372                     _setLED:	
 14706                           
 14707                           ;incstack = 0
 14708                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14709                           ;setLED@led stored from wreg
 14710  1372  0020               	movlb	0	; select bank0
 14711  1373  00A3               	movwf	setLED@led
 14712                           
 14713                           ;LED_B1.c: 76: LedPointSelect(led);
 14714  1374  0823               	movf	setLED@led,w
 14715  1375  319B  23B0  3193   	fcall	_LedPointSelect
 14716                           
 14717                           ;LED_B1.c: 77: if(command == 0)
 14718  1378  0020               	movlb	0	; select bank0
 14719  1379  08A2               	movf	setLED@command,f
 14720  137A  1D03               	skipz
 14721  137B  2B8E               	goto	l7887
 14722                           
 14723                           ;LED_B1.c: 78: {
 14724                           ;LED_B1.c: 80: if(led == 1)
 14725  137C  0823               	movf	setLED@led,w
 14726  137D  3A01               	xorlw	1
 14727  137E  1D03               	skipz
 14728  137F  2B82               	goto	l7879
 14729                           
 14730                           ;LED_B1.c: 81: {
 14731                           ;LED_B1.c: 85: RA3=1;
 14732  1380  158C               	bsf	12,3	;volatile
 14733                           
 14734                           ;LED_B1.c: 87: }
 14735  1381  0008               	return
 14736  1382                     l7879:	
 14737                           
 14738                           ;LED_B1.c: 90: else if(led == 2)
 14739  1382  0823               	movf	setLED@led,w
 14740  1383  3A02               	xorlw	2
 14741  1384  1D03               	skipz
 14742  1385  2B88               	goto	l7883
 14743                           
 14744                           ;LED_B1.c: 91: {
 14745                           ;LED_B1.c: 95: RC7=1;
 14746  1386  178E               	bsf	14,7	;volatile
 14747                           
 14748                           ;LED_B1.c: 97: }
 14749  1387  0008               	return
 14750  1388                     l7883:	
 14751                           
 14752                           ;LED_B1.c: 110: else if(led == 99)
 14753  1388  0823               	movf	setLED@led,w
 14754  1389  3A63               	xorlw	99
 14755  138A  1D03               	skipz
 14756  138B  0008               	return
 14757                           
 14758                           ;LED_B1.c: 111: {
 14759                           ;LED_B1.c: 115: RB5=1;
 14760  138C  168D               	bsf	13,5	;volatile
 14761                           
 14762                           ;LED_B1.c: 117: }
 14763                           ;LED_B1.c: 119: }
 14764  138D  0008               	return
 14765  138E                     l7887:	
 14766                           
 14767                           ;LED_B1.c: 120: else if(command == 1)
 14768  138E  0822               	movf	setLED@command,w
 14769  138F  3A01               	xorlw	1
 14770  1390  1D03               	skipz
 14771  1391  2BA4               	goto	l7901
 14772                           
 14773                           ;LED_B1.c: 121: {
 14774                           ;LED_B1.c: 123: if(led == 1)
 14775  1392  0823               	movf	setLED@led,w
 14776  1393  3A01               	xorlw	1
 14777  1394  1D03               	skipz
 14778  1395  2B98               	goto	l7893
 14779                           
 14780                           ;LED_B1.c: 124: {
 14781                           ;LED_B1.c: 128: RA3=0;
 14782  1396  118C               	bcf	12,3	;volatile
 14783                           
 14784                           ;LED_B1.c: 130: }
 14785  1397  0008               	return
 14786  1398                     l7893:	
 14787                           
 14788                           ;LED_B1.c: 133: else if(led == 2)
 14789  1398  0823               	movf	setLED@led,w
 14790  1399  3A02               	xorlw	2
 14791  139A  1D03               	skipz
 14792  139B  2B9E               	goto	l7897
 14793                           
 14794                           ;LED_B1.c: 134: {
 14795                           ;LED_B1.c: 138: RC7=0;
 14796  139C  138E               	bcf	14,7	;volatile
 14797                           
 14798                           ;LED_B1.c: 140: }
 14799  139D  0008               	return
 14800  139E                     l7897:	
 14801                           
 14802                           ;LED_B1.c: 153: else if(led == 99)
 14803  139E  0823               	movf	setLED@led,w
 14804  139F  3A63               	xorlw	99
 14805  13A0  1D03               	skipz
 14806  13A1  0008               	return
 14807                           
 14808                           ;LED_B1.c: 154: {
 14809                           ;LED_B1.c: 158: RB5=0;
 14810  13A2  128D               	bcf	13,5	;volatile
 14811                           
 14812                           ;LED_B1.c: 160: }
 14813                           ;LED_B1.c: 162: }
 14814  13A3  0008               	return
 14815  13A4                     l7901:	
 14816                           
 14817                           ;LED_B1.c: 163: else if(command == 10)
 14818  13A4  0822               	movf	setLED@command,w
 14819  13A5  3A0A               	xorlw	10
 14820  13A6  1D03               	skipz
 14821  13A7  2BC6               	goto	l7917
 14822                           
 14823                           ;LED_B1.c: 164: {
 14824                           ;LED_B1.c: 165: LED->GO=0;
 14825  13A8  0021               	movlb	1	; select bank1
 14826  13A9  083B               	movf	_LED^(0+128),w
 14827  13AA  0086               	movwf	6
 14828  13AB  0187               	clrf	7
 14829  13AC  1081               	bcf	1,1
 14830                           
 14831                           ;LED_B1.c: 166: LED->Time=0;
 14832  13AD  0A3B               	incf	_LED^(0+128),w
 14833  13AE  0086               	movwf	6
 14834  13AF  0187               	clrf	7
 14835  13B0  3000               	movlw	0
 14836  13B1  3FC0               	movwi [0]fsr1
 14837  13B2  3FC1               	movwi [1]fsr1
 14838                           
 14839                           ;LED_B1.c: 168: if(led == 1)
 14840  13B3  0020               	movlb	0	; select bank0
 14841  13B4  0823               	movf	setLED@led,w
 14842  13B5  3A01               	xorlw	1
 14843  13B6  1D03               	skipz
 14844  13B7  2BBA               	goto	l7909
 14845                           
 14846                           ;LED_B1.c: 169: {
 14847                           ;LED_B1.c: 173: RA3=1;
 14848  13B8  158C               	bsf	12,3	;volatile
 14849                           
 14850                           ;LED_B1.c: 175: }
 14851  13B9  0008               	return
 14852  13BA                     l7909:	
 14853                           
 14854                           ;LED_B1.c: 178: else if(led == 2)
 14855  13BA  0823               	movf	setLED@led,w
 14856  13BB  3A02               	xorlw	2
 14857  13BC  1D03               	skipz
 14858  13BD  2BC0               	goto	l7913
 14859                           
 14860                           ;LED_B1.c: 179: {
 14861                           ;LED_B1.c: 183: RC7=1;
 14862  13BE  178E               	bsf	14,7	;volatile
 14863                           
 14864                           ;LED_B1.c: 185: }
 14865  13BF  0008               	return
 14866  13C0                     l7913:	
 14867                           
 14868                           ;LED_B1.c: 198: else if(led == 99)
 14869  13C0  0823               	movf	setLED@led,w
 14870  13C1  3A63               	xorlw	99
 14871  13C2  1D03               	skipz
 14872  13C3  0008               	return
 14873                           
 14874                           ;LED_B1.c: 199: {
 14875                           ;LED_B1.c: 203: RB5=1;
 14876  13C4  168D               	bsf	13,5	;volatile
 14877                           
 14878                           ;LED_B1.c: 205: }
 14879                           ;LED_B1.c: 207: }
 14880  13C5  0008               	return
 14881  13C6                     l7917:	
 14882                           
 14883                           ;LED_B1.c: 208: else if(command == 11)
 14884  13C6  0822               	movf	setLED@command,w
 14885  13C7  3A0B               	xorlw	11
 14886  13C8  1D03               	skipz
 14887  13C9  0008               	return
 14888                           
 14889                           ;LED_B1.c: 209: {
 14890                           ;LED_B1.c: 210: LED->GO=1;
 14891  13CA  0021               	movlb	1	; select bank1
 14892  13CB  083B               	movf	_LED^(0+128),w
 14893  13CC  0086               	movwf	6
 14894  13CD  0187               	clrf	7
 14895  13CE  1481               	bsf	1,1
 14896  13CF  0008               	return
 14897  13D0                     __end_of_setLED:	
 14898                           
 14899                           	psect	text84
 14900  1BB0                     __ptext84:	
 14901 ;; *************** function _LedPointSelect *****************
 14902 ;; Defined at:
 14903 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\LED_B1.c"
 14904 ;; Parameters:    Size  Location     Type
 14905 ;;  led             1    wreg     unsigned char 
 14906 ;; Auto vars:     Size  Location     Type
 14907 ;;  led             1    1[BANK0 ] unsigned char 
 14908 ;; Return value:  Size  Location     Type
 14909 ;;		None               void
 14910 ;; Registers used:
 14911 ;;		wreg
 14912 ;; Tracked objects:
 14913 ;;		On entry : 0/0
 14914 ;;		On exit  : 0/0
 14915 ;;		Unchanged: 0/0
 14916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14921 ;;Total ram usage:        2 bytes
 14922 ;; Hardware stack levels used:    1
 14923 ;; Hardware stack levels required when called:    4
 14924 ;; This function calls:
 14925 ;;		Nothing
 14926 ;; This function is called by:
 14927 ;;		_setLED_Initialization
 14928 ;;		_setLED
 14929 ;;		_setLED_Main
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933                           
 14934                           ;psect for function _LedPointSelect
 14935  1BB0                     _LedPointSelect:	
 14936                           
 14937                           ;incstack = 0
 14938                           ; Regs used in _LedPointSelect: [wreg]
 14939                           ;LedPointSelect@led stored from wreg
 14940  1BB0  0020               	movlb	0	; select bank0
 14941  1BB1  00A1               	movwf	LedPointSelect@led
 14942                           
 14943                           ;LED_B1.c: 10: if(led == 1)
 14944  1BB2  0821               	movf	LedPointSelect@led,w
 14945  1BB3  3A01               	xorlw	1
 14946  1BB4  1D03               	skipz
 14947  1BB5  2BBC               	goto	l5837
 14948                           
 14949                           ;LED_B1.c: 11: {
 14950                           ;LED_B1.c: 12: LED=&VarLED1;
 14951  1BB6  30DC               	movlw	_VarLED1& (0+255)
 14952  1BB7  00A0               	movwf	??_LedPointSelect
 14953  1BB8  0820               	movf	??_LedPointSelect,w
 14954  1BB9  0021               	movlb	1	; select bank1
 14955  1BBA  00BB               	movwf	_LED^(0+128)
 14956                           
 14957                           ;LED_B1.c: 13: }
 14958  1BBB  0008               	return
 14959  1BBC                     l5837:	
 14960                           
 14961                           ;LED_B1.c: 16: else if(led == 2)
 14962  1BBC  0020               	movlb	0	; select bank0
 14963  1BBD  0821               	movf	LedPointSelect@led,w
 14964  1BBE  3A02               	xorlw	2
 14965  1BBF  1D03               	skipz
 14966  1BC0  2BC7               	goto	l5841
 14967                           
 14968                           ;LED_B1.c: 17: {
 14969                           ;LED_B1.c: 18: LED=&VarLED2;
 14970  1BC1  30E0               	movlw	_VarLED2& (0+255)
 14971  1BC2  00A0               	movwf	??_LedPointSelect
 14972  1BC3  0820               	movf	??_LedPointSelect,w
 14973  1BC4  0021               	movlb	1	; select bank1
 14974  1BC5  00BB               	movwf	_LED^(0+128)
 14975                           
 14976                           ;LED_B1.c: 19: }
 14977  1BC6  0008               	return
 14978  1BC7                     l5841:	
 14979                           
 14980                           ;LED_B1.c: 28: else if(led == 99)
 14981  1BC7  0020               	movlb	0	; select bank0
 14982  1BC8  0821               	movf	LedPointSelect@led,w
 14983  1BC9  3A63               	xorlw	99
 14984  1BCA  1D03               	skipz
 14985  1BCB  0008               	return
 14986                           
 14987                           ;LED_B1.c: 29: {
 14988                           ;LED_B1.c: 30: LED=&VarErrLED;
 14989  1BCC  30D8               	movlw	_VarErrLED& (0+255)
 14990  1BCD  00A0               	movwf	??_LedPointSelect
 14991  1BCE  0820               	movf	??_LedPointSelect,w
 14992  1BCF  0021               	movlb	1	; select bank1
 14993  1BD0  00BB               	movwf	_LED^(0+128)
 14994  1BD1  0008               	return
 14995  1BD2                     __end_of_LedPointSelect:	
 14996                           
 14997                           	psect	text85
 14998  1AC1                     __ptext85:	
 14999 ;; *************** function _DimmerLights_Close *****************
 15000 ;; Defined at:
 15001 ;;		line 92 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15002 ;; Parameters:    Size  Location     Type
 15003 ;;		None
 15004 ;; Auto vars:     Size  Location     Type
 15005 ;;		None
 15006 ;; Return value:  Size  Location     Type
 15007 ;;		None               void
 15008 ;; Registers used:
 15009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15010 ;; Tracked objects:
 15011 ;;		On entry : 0/0
 15012 ;;		On exit  : 0/0
 15013 ;;		Unchanged: 0/0
 15014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;Total ram usage:        0 bytes
 15020 ;; Hardware stack levels used:    1
 15021 ;; Hardware stack levels required when called:    5
 15022 ;; This function calls:
 15023 ;;		_getDimmerLights_StatusFlag
 15024 ;;		_setLoad_GO
 15025 ;; This function is called by:
 15026 ;;		_DimmerLights_Main
 15027 ;; This function uses a non-reentrant model
 15028 ;;
 15029                           
 15030                           
 15031                           ;psect for function _DimmerLights_Close
 15032  1AC1                     _DimmerLights_Close:	
 15033                           
 15034                           ;Dimmer_B1.c: 94: if(Dimmer->Detect)
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15038  1AC1  0021               	movlb	1	; select bank1
 15039  1AC2  0839               	movf	_Dimmer^(0+128),w
 15040  1AC3  0086               	movwf	6
 15041  1AC4  0187               	clrf	7
 15042  1AC5  1C01               	btfss	1,0
 15043  1AC6  0008               	return
 15044                           
 15045                           ;Dimmer_B1.c: 95: {
 15046                           ;Dimmer_B1.c: 96: Dimmer->Detect=0;
 15047  1AC7  0839               	movf	_Dimmer^(0+128),w
 15048  1AC8  0086               	movwf	6
 15049  1AC9  0187               	clrf	7
 15050  1ACA  1001               	bcf	1,0
 15051                           
 15052                           ;Dimmer_B1.c: 97: if(!getDimmerLights_StatusFlag())
 15053  1ACB  3198  20D9  319A   	fcall	_getDimmerLights_StatusFlag
 15054  1ACE  3800               	iorlw	0
 15055  1ACF  1D03               	skipz
 15056  1AD0  0008               	return
 15057                           
 15058                           ;Dimmer_B1.c: 98: {
 15059                           ;Dimmer_B1.c: 99: setLoad_GO(0);
 15060  1AD1  3000               	movlw	0
 15061  1AD2  3198  207B         	fcall	_setLoad_GO
 15062                           
 15063                           ;Dimmer_B1.c: 100: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 15064  1AD4  087C               	movf	_Memory,w
 15065  1AD5  3E22               	addlw	34
 15066  1AD6  0086               	movwf	6
 15067  1AD7  3001               	movlw	1	; select bank2/3
 15068  1AD8  0087               	movwf	7
 15069  1AD9  1481               	bsf	1,1
 15070  1ADA  0008               	return
 15071  1ADB                     __end_of_DimmerLights_Close:	
 15072                           
 15073                           	psect	text86
 15074  187B                     __ptext86:	
 15075 ;; *************** function _setLoad_GO *****************
 15076 ;; Defined at:
 15077 ;;		line 262 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 15078 ;; Parameters:    Size  Location     Type
 15079 ;;  command         1    wreg     unsigned char 
 15080 ;; Auto vars:     Size  Location     Type
 15081 ;;  command         1    0[BANK0 ] unsigned char 
 15082 ;; Return value:  Size  Location     Type
 15083 ;;		None               void
 15084 ;; Registers used:
 15085 ;;		wreg, fsr1l, fsr1h
 15086 ;; Tracked objects:
 15087 ;;		On entry : 0/0
 15088 ;;		On exit  : 0/0
 15089 ;;		Unchanged: 0/0
 15090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;Total ram usage:        1 bytes
 15096 ;; Hardware stack levels used:    1
 15097 ;; Hardware stack levels required when called:    4
 15098 ;; This function calls:
 15099 ;;		Nothing
 15100 ;; This function is called by:
 15101 ;;		_DimmerLights_Close
 15102 ;; This function uses a non-reentrant model
 15103 ;;
 15104                           
 15105                           
 15106                           ;psect for function _setLoad_GO
 15107  187B                     _setLoad_GO:	
 15108                           
 15109                           ;incstack = 0
 15110                           ; Regs used in _setLoad_GO: [wregfsr1]
 15111                           ;setLoad_GO@command stored from wreg
 15112  187B  0020               	movlb	0	; select bank0
 15113  187C  00A0               	movwf	setLoad_GO@command
 15114                           
 15115                           ;OverLoad_B1.c: 264: Load->GO=command;
 15116  187D  086E               	movf	_Load,w
 15117  187E  0086               	movwf	6
 15118  187F  3002               	movlw	2	; select bank4/5
 15119  1880  0087               	movwf	7
 15120  1881  0820               	movf	setLoad_GO@command,w
 15121  1882  1081               	bcf	1,1
 15122  1883  1D03               	skipz
 15123  1884  1481               	bsf	1,1
 15124  1885  0008               	return
 15125  1886                     __end_of_setLoad_GO:	
 15126                           
 15127                           	psect	text87
 15128  18D9                     __ptext87:	
 15129 ;; *************** function _getDimmerLights_StatusFlag *****************
 15130 ;; Defined at:
 15131 ;;		line 199 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15132 ;; Parameters:    Size  Location     Type
 15133 ;;		None
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;  Status          1    0[BANK0 ] unsigned char 
 15136 ;; Return value:  Size  Location     Type
 15137 ;;                  1    wreg      unsigned char 
 15138 ;; Registers used:
 15139 ;;		wreg, fsr1l, fsr1h, status,2
 15140 ;; Tracked objects:
 15141 ;;		On entry : 0/0
 15142 ;;		On exit  : 0/0
 15143 ;;		Unchanged: 0/0
 15144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15149 ;;Total ram usage:        1 bytes
 15150 ;; Hardware stack levels used:    1
 15151 ;; Hardware stack levels required when called:    4
 15152 ;; This function calls:
 15153 ;;		Nothing
 15154 ;; This function is called by:
 15155 ;;		_DimmerLights_Close
 15156 ;;		_DimmerLights_Exceptions
 15157 ;; This function uses a non-reentrant model
 15158 ;;
 15159                           
 15160                           
 15161                           ;psect for function _getDimmerLights_StatusFlag
 15162  18D9                     _getDimmerLights_StatusFlag:	
 15163                           
 15164                           ;Dimmer_B1.c: 201: char Status=0;
 15165                           
 15166                           ;incstack = 0
 15167                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 15168  18D9  0020               	movlb	0	; select bank0
 15169  18DA  01A0               	clrf	getDimmerLights_StatusFlag@Status
 15170                           
 15171                           ;Dimmer_B1.c: 212: Status=(DimmerLights11->StatusFlag)?1:0;
 15172  18DB  0879               	movf	_DimmerLights11,w
 15173  18DC  0086               	movwf	6
 15174  18DD  3001               	movlw	1	; select bank2/3
 15175  18DE  0087               	movwf	7
 15176  18DF  3000               	movlw	0
 15177  18E0  1B01               	btfsc	1,6
 15178  18E1  3001               	movlw	1
 15179  18E2  00A0               	movwf	getDimmerLights_StatusFlag@Status
 15180                           
 15181                           ;Dimmer_B1.c: 215: return Status;
 15182  18E3  0820               	movf	getDimmerLights_StatusFlag@Status,w
 15183  18E4  0008               	return
 15184  18E5                     __end_of_getDimmerLights_StatusFlag:	
 15185                           
 15186                           	psect	text88
 15187  18CD                     __ptext88:	
 15188 ;; *************** function _DimmerLights_Initialization *****************
 15189 ;; Defined at:
 15190 ;;		line 32 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;		None
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;		None
 15195 ;; Return value:  Size  Location     Type
 15196 ;;		None               void
 15197 ;; Registers used:
 15198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;Total ram usage:        1 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    6
 15211 ;; This function calls:
 15212 ;;		_Dimmer_Initialization
 15213 ;;		_setDimmerLights_Initialization
 15214 ;; This function is called by:
 15215 ;;		_main
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           
 15220                           ;psect for function _DimmerLights_Initialization
 15221  18CD                     _DimmerLights_Initialization:	
 15222                           
 15223                           ;Dimmer_B1.c: 35: DimmerLights11=&DimmerLights1;
 15224                           
 15225                           ;incstack = 0
 15226                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15227  18CD  3030               	movlw	_DimmerLights1& (0+255)
 15228  18CE  0020               	movlb	0	; select bank0
 15229  18CF  00A4               	movwf	??_DimmerLights_Initialization
 15230  18D0  0824               	movf	??_DimmerLights_Initialization,w
 15231  18D1  00F9               	movwf	_DimmerLights11
 15232                           
 15233                           ;Dimmer_B1.c: 36: setDimmerLights_Initialization(1);
 15234  18D2  3001               	movlw	1
 15235  18D3  319D  2509  3198   	fcall	_setDimmerLights_Initialization
 15236                           
 15237                           ;Dimmer_B1.c: 50: Dimmer_Initialization();
 15238  18D6  31A7  278C         	fcall	_Dimmer_Initialization
 15239  18D8  0008               	return
 15240  18D9                     __end_of_DimmerLights_Initialization:	
 15241                           
 15242                           	psect	text89
 15243  1D09                     __ptext89:	
 15244 ;; *************** function _setDimmerLights_Initialization *****************
 15245 ;; Defined at:
 15246 ;;		line 54 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15247 ;; Parameters:    Size  Location     Type
 15248 ;;  lights          1    wreg     unsigned char 
 15249 ;; Auto vars:     Size  Location     Type
 15250 ;;  lights          1    3[BANK0 ] unsigned char 
 15251 ;; Return value:  Size  Location     Type
 15252 ;;		None               void
 15253 ;; Registers used:
 15254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15255 ;; Tracked objects:
 15256 ;;		On entry : 0/0
 15257 ;;		On exit  : 0/0
 15258 ;;		Unchanged: 0/0
 15259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15263 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;Total ram usage:        2 bytes
 15265 ;; Hardware stack levels used:    1
 15266 ;; Hardware stack levels required when called:    5
 15267 ;; This function calls:
 15268 ;;		_DimmerLightsPointSelect
 15269 ;; This function is called by:
 15270 ;;		_DimmerLights_Initialization
 15271 ;; This function uses a non-reentrant model
 15272 ;;
 15273                           
 15274                           
 15275                           ;psect for function _setDimmerLights_Initialization
 15276  1D09                     _setDimmerLights_Initialization:	
 15277                           
 15278                           ;incstack = 0
 15279                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15280                           ;setDimmerLights_Initialization@lights stored from wreg
 15281  1D09  0020               	movlb	0	; select bank0
 15282  1D0A  00A3               	movwf	setDimmerLights_Initialization@lights
 15283                           
 15284                           ;Dimmer_B1.c: 56: DimmerLightsPointSelect(lights);
 15285  1D0B  0823               	movf	setDimmerLights_Initialization@lights,w
 15286  1D0C  31A7  27EA         	fcall	_DimmerLightsPointSelect
 15287                           
 15288                           ;Dimmer_B1.c: 57: DimmerLights->Clear=1;
 15289  1D0E  0020               	movlb	0	; select bank0
 15290  1D0F  086C               	movf	_DimmerLights,w
 15291  1D10  3E0C               	addlw	12
 15292  1D11  0086               	movwf	6
 15293  1D12  3001               	movlw	1	; select bank2/3
 15294  1D13  0087               	movwf	7
 15295  1D14  1401               	bsf	1,0
 15296                           
 15297                           ;Dimmer_B1.c: 63: DimmerLights->MaxmumValue=((char)(65*1.5));
 15298  1D15  3061               	movlw	97
 15299  1D16  00A2               	movwf	??_setDimmerLights_Initialization
 15300  1D17  086C               	movf	_DimmerLights,w
 15301  1D18  3E05               	addlw	5
 15302  1D19  0086               	movwf	6
 15303  1D1A  3001               	movlw	1	; select bank2/3
 15304  1D1B  0087               	movwf	7
 15305  1D1C  0822               	movf	??_setDimmerLights_Initialization,w
 15306  1D1D  0081               	movwf	1
 15307                           
 15308                           ;Dimmer_B1.c: 64: DimmerLights->MinimumValue=((char)(20*1.5));
 15309  1D1E  301E               	movlw	30
 15310  1D1F  00A2               	movwf	??_setDimmerLights_Initialization
 15311  1D20  086C               	movf	_DimmerLights,w
 15312  1D21  3E06               	addlw	6
 15313  1D22  0086               	movwf	6
 15314  1D23  3001               	movlw	1	; select bank2/3
 15315  1D24  0087               	movwf	7
 15316  1D25  0822               	movf	??_setDimmerLights_Initialization,w
 15317  1D26  0081               	movwf	1
 15318                           
 15319                           ;Dimmer_B1.c: 78: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15320  1D27  086C               	movf	_DimmerLights,w
 15321  1D28  3E05               	addlw	5
 15322  1D29  0086               	movwf	6
 15323  1D2A  3001               	movlw	1	; select bank2/3
 15324  1D2B  0087               	movwf	7
 15325  1D2C  0801               	movf	1,w
 15326  1D2D  00A2               	movwf	??_setDimmerLights_Initialization
 15327  1D2E  086C               	movf	_DimmerLights,w
 15328  1D2F  3E04               	addlw	4
 15329  1D30  0086               	movwf	6
 15330  1D31  3001               	movlw	1	; select bank2/3
 15331  1D32  0087               	movwf	7
 15332  1D33  0822               	movf	??_setDimmerLights_Initialization,w
 15333  1D34  0081               	movwf	1
 15334  1D35  0008               	return
 15335  1D36                     __end_of_setDimmerLights_Initialization:	
 15336                           
 15337                           	psect	text90
 15338  278C                     __ptext90:	
 15339 ;; *************** function _Dimmer_Initialization *****************
 15340 ;; Defined at:
 15341 ;;		line 511 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;		None
 15344 ;; Auto vars:     Size  Location     Type
 15345 ;;		None
 15346 ;; Return value:  Size  Location     Type
 15347 ;;		None               void
 15348 ;; Registers used:
 15349 ;;		wreg
 15350 ;; Tracked objects:
 15351 ;;		On entry : 0/0
 15352 ;;		On exit  : 0/0
 15353 ;;		Unchanged: 0/0
 15354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;Total ram usage:        1 bytes
 15360 ;; Hardware stack levels used:    1
 15361 ;; Hardware stack levels required when called:    4
 15362 ;; This function calls:
 15363 ;;		Nothing
 15364 ;; This function is called by:
 15365 ;;		_DimmerLights_Initialization
 15366 ;; This function uses a non-reentrant model
 15367 ;;
 15368                           
 15369                           
 15370                           ;psect for function _Dimmer_Initialization
 15371  278C                     _Dimmer_Initialization:	
 15372                           
 15373                           ;Dimmer_B1.c: 513: Dimmer=&Dimmer1;
 15374                           
 15375                           ;incstack = 0
 15376                           ; Regs used in _Dimmer_Initialization: [wreg]
 15377  278C  30E4               	movlw	_Dimmer1& (0+255)
 15378  278D  0020               	movlb	0	; select bank0
 15379  278E  00A0               	movwf	??_Dimmer_Initialization
 15380  278F  0820               	movf	??_Dimmer_Initialization,w
 15381  2790  0021               	movlb	1	; select bank1
 15382  2791  00B9               	movwf	_Dimmer^(0+128)
 15383  2792  0008               	return
 15384  2793                     __end_of_Dimmer_Initialization:	
 15385                           
 15386                           	psect	text91
 15387  2765                     __ptext91:	
 15388 ;; *************** function _DelayOff_Main *****************
 15389 ;; Defined at:
 15390 ;;		line 45 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;		None
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;		None
 15395 ;; Return value:  Size  Location     Type
 15396 ;;		None               void
 15397 ;; Registers used:
 15398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15399 ;; Tracked objects:
 15400 ;;		On entry : 0/0
 15401 ;;		On exit  : 0/0
 15402 ;;		Unchanged: 0/0
 15403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;Total ram usage:        0 bytes
 15409 ;; Hardware stack levels used:    1
 15410 ;; Hardware stack levels required when called:    9
 15411 ;; This function calls:
 15412 ;;		_DlyOff_Main
 15413 ;; This function is called by:
 15414 ;;		_main
 15415 ;; This function uses a non-reentrant model
 15416 ;;
 15417                           
 15418                           
 15419                           ;psect for function _DelayOff_Main
 15420  2765                     _DelayOff_Main:	
 15421                           
 15422                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 15423                           
 15424                           ;incstack = 0
 15425                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15426  2765  3001               	movlw	1
 15427  2766  3188  2018         	fcall	_DlyOff_Main
 15428  2768  0008               	return
 15429  2769                     __end_of_DelayOff_Main:	
 15430                           
 15431                           	psect	text92
 15432  0818                     __ptext92:	
 15433 ;; *************** function _DlyOff_Main *****************
 15434 ;; Defined at:
 15435 ;;		line 66 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 15436 ;; Parameters:    Size  Location     Type
 15437 ;;  sw              1    wreg     unsigned char 
 15438 ;; Auto vars:     Size  Location     Type
 15439 ;;  sw              1   68[BANK0 ] unsigned char 
 15440 ;; Return value:  Size  Location     Type
 15441 ;;		None               void
 15442 ;; Registers used:
 15443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15444 ;; Tracked objects:
 15445 ;;		On entry : 0/0
 15446 ;;		On exit  : 0/0
 15447 ;;		Unchanged: 0/0
 15448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15451 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15452 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;Total ram usage:        3 bytes
 15454 ;; Hardware stack levels used:    1
 15455 ;; Hardware stack levels required when called:    8
 15456 ;; This function calls:
 15457 ;;		_DelayOffPointSelect
 15458 ;;		_setBuz
 15459 ;;		_setDimmerLights_Switch
 15460 ;;		_setDimmerLights_Trigger
 15461 ;;		_setRFSW_Status
 15462 ;;		_setRF_DimmerLights
 15463 ;;		_setSw_Status
 15464 ;;		_setTxData
 15465 ;; This function is called by:
 15466 ;;		_DelayOff_Main
 15467 ;; This function uses a non-reentrant model
 15468 ;;
 15469                           
 15470                           
 15471                           ;psect for function _DlyOff_Main
 15472  0818                     _DlyOff_Main:	
 15473                           
 15474                           ;incstack = 0
 15475                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15476                           ;DlyOff_Main@sw stored from wreg
 15477  0818  0020               	movlb	0	; select bank0
 15478  0819  00E4               	movwf	DlyOff_Main@sw
 15479                           
 15480                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 15481  081A  0864               	movf	DlyOff_Main@sw,w
 15482  081B  3198  20B5  3188   	fcall	_DelayOffPointSelect
 15483                           
 15484                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 15485  081E  0021               	movlb	1	; select bank1
 15486  081F  0838               	movf	_DelayOff^(0+128),w
 15487  0820  0086               	movwf	6
 15488  0821  0187               	clrf	7
 15489  0822  1C81               	btfss	1,1
 15490  0823  0008               	return
 15491                           
 15492                           ;DelayOff_B1.c: 70: {
 15493                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 15494  0824  0838               	movf	_DelayOff^(0+128),w
 15495  0825  3E02               	addlw	2
 15496  0826  0086               	movwf	6
 15497  0827  0187               	clrf	7
 15498  0828  3001               	movlw	1
 15499  0829  0781               	addwf	1,f
 15500  082A  3141               	addfsr 1,1
 15501  082B  1803               	skipnc
 15502  082C  0A81               	incf	1,f
 15503                           
 15504                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5600)
 15505  082D  0838               	movf	_DelayOff^(0+128),w
 15506  082E  3E02               	addlw	2
 15507  082F  0086               	movwf	6
 15508  0830  0187               	clrf	7
 15509  0831  3F40               	moviw [0]fsr1
 15510  0832  0020               	movlb	0	; select bank0
 15511  0833  00E2               	movwf	??_DlyOff_Main
 15512  0834  3F41               	moviw [1]fsr1
 15513  0835  00E3               	movwf	??_DlyOff_Main+1
 15514  0836  3015               	movlw	21
 15515  0837  0263               	subwf	??_DlyOff_Main+1,w
 15516  0838  30E0               	movlw	224
 15517  0839  1903               	skipnz
 15518  083A  0262               	subwf	??_DlyOff_Main,w
 15519  083B  1C03               	skipc
 15520  083C  0008               	return
 15521                           
 15522                           ;DelayOff_B1.c: 73: {
 15523                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 15524  083D  0021               	movlb	1	; select bank1
 15525  083E  0838               	movf	_DelayOff^(0+128),w
 15526  083F  3E02               	addlw	2
 15527  0840  0086               	movwf	6
 15528  0841  0187               	clrf	7
 15529  0842  3000               	movlw	0
 15530  0843  3FC0               	movwi [0]fsr1
 15531  0844  3FC1               	movwi [1]fsr1
 15532                           
 15533                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 15534  0845  3001               	movlw	1
 15535  0846  0020               	movlb	0	; select bank0
 15536  0847  00E2               	movwf	??_DlyOff_Main
 15537  0848  0021               	movlb	1	; select bank1
 15538  0849  0838               	movf	_DelayOff^(0+128),w
 15539  084A  3E04               	addlw	4
 15540  084B  0086               	movwf	6
 15541  084C  0187               	clrf	7
 15542  084D  0020               	movlb	0	; select bank0
 15543  084E  0862               	movf	??_DlyOff_Main,w
 15544  084F  0781               	addwf	1,f
 15545                           
 15546                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 15547  0850  0021               	movlb	1	; select bank1
 15548  0851  0838               	movf	_DelayOff^(0+128),w
 15549  0852  3E04               	addlw	4
 15550  0853  0086               	movwf	6
 15551  0854  0187               	clrf	7
 15552  0855  0A38               	incf	_DelayOff^(0+128),w
 15553  0856  0084               	movwf	4
 15554  0857  0185               	clrf	5
 15555  0858  0800               	movf	0,w
 15556  0859  0201               	subwf	1,w
 15557  085A  1C03               	skipc
 15558  085B  0008               	return
 15559                           
 15560                           ;DelayOff_B1.c: 77: {
 15561                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 15562  085C  0838               	movf	_DelayOff^(0+128),w
 15563  085D  3E04               	addlw	4
 15564  085E  0086               	movwf	6
 15565  085F  0187               	clrf	7
 15566  0860  0181               	clrf	1
 15567                           
 15568                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 15569  0861  0838               	movf	_DelayOff^(0+128),w
 15570  0862  0086               	movwf	6
 15571  0863  0187               	clrf	7
 15572  0864  1081               	bcf	1,1
 15573                           
 15574                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 15575  0865  0020               	movlb	0	; select bank0
 15576  0866  01A2               	clrf	setSw_Status@command
 15577  0867  0864               	movf	DlyOff_Main@sw,w
 15578  0868  3199  2169  3188   	fcall	_setSw_Status
 15579                           
 15580                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 15581  086B  0020               	movlb	0	; select bank0
 15582  086C  01A2               	clrf	setRFSW_Status@command
 15583  086D  0864               	movf	DlyOff_Main@sw,w
 15584  086E  3199  215A  3188   	fcall	_setRFSW_Status
 15585                           
 15586                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 15587  0871  0020               	movlb	0	; select bank0
 15588  0872  01DD               	clrf	setRF_DimmerLights@on
 15589  0873  0864               	movf	DlyOff_Main@sw,w
 15590  0874  3195  255C  3188   	fcall	_setRF_DimmerLights
 15591                           
 15592                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 15593  0877  0020               	movlb	0	; select bank0
 15594  0878  01A2               	clrf	setDimmerLights_Trigger@command
 15595  0879  0AA2               	incf	setDimmerLights_Trigger@command,f
 15596  087A  0864               	movf	DlyOff_Main@sw,w
 15597  087B  3199  21A7  3188   	fcall	_setDimmerLights_Trigger
 15598                           
 15599                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 15600  087E  0020               	movlb	0	; select bank0
 15601  087F  01A2               	clrf	setDimmerLights_Switch@command
 15602  0880  0864               	movf	DlyOff_Main@sw,w
 15603  0881  3199  2197  3188   	fcall	_setDimmerLights_Switch
 15604                           
 15605                           ;DelayOff_B1.c: 85: setTxData(1);
 15606  0884  3001               	movlw	1
 15607  0885  318D  2566  3188   	fcall	_setTxData
 15608                           
 15609                           ;DelayOff_B1.c: 86: setBuz(1,100);
 15610  0888  3064               	movlw	100
 15611  0889  0020               	movlb	0	; select bank0
 15612  088A  00A6               	movwf	setBuz@time
 15613  088B  3000               	movlw	0
 15614  088C  00A7               	movwf	setBuz@time+1
 15615  088D  3001               	movlw	1
 15616  088E  3197  2789         	fcall	_setBuz
 15617  0890  0008               	return
 15618  0891                     __end_of_DlyOff_Main:	
 15619                           
 15620                           	psect	text93
 15621  0D66                     __ptext93:	
 15622 ;; *************** function _setTxData *****************
 15623 ;; Defined at:
 15624 ;;		line 140 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 15625 ;; Parameters:    Size  Location     Type
 15626 ;;  rf              1    wreg     unsigned char 
 15627 ;; Auto vars:     Size  Location     Type
 15628 ;;  rf              1    3[BANK0 ] unsigned char 
 15629 ;;  i               1    0        unsigned char 
 15630 ;; Return value:  Size  Location     Type
 15631 ;;		None               void
 15632 ;; Registers used:
 15633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15634 ;; Tracked objects:
 15635 ;;		On entry : 0/0
 15636 ;;		On exit  : 0/0
 15637 ;;		Unchanged: 0/0
 15638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15642 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15643 ;;Total ram usage:        2 bytes
 15644 ;; Hardware stack levels used:    1
 15645 ;; Hardware stack levels required when called:    5
 15646 ;; This function calls:
 15647 ;;		_RfPointSelect
 15648 ;; This function is called by:
 15649 ;;		_DlyOff_Main
 15650 ;;		_setDimmerLights_Adj
 15651 ;;		_setControl_Lights_Table
 15652 ;;		_setRFSW_Control
 15653 ;;		_setRFSW_AdjControl
 15654 ;;		_Sw_DimmerOnFunc
 15655 ;;		_Sw_DimmerOffFunc
 15656 ;; This function uses a non-reentrant model
 15657 ;;
 15658                           
 15659                           
 15660                           ;psect for function _setTxData
 15661  0D66                     _setTxData:	
 15662                           
 15663                           ;incstack = 0
 15664                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15665                           ;setTxData@rf stored from wreg
 15666  0D66  0020               	movlb	0	; select bank0
 15667  0D67  00A3               	movwf	setTxData@rf
 15668                           
 15669                           ;RF_Control_B1.c: 142: char i;
 15670                           ;RF_Control_B1.c: 143: RfPointSelect(rf);
 15671  0D68  0823               	movf	setTxData@rf,w
 15672  0D69  3198  2070  318D   	fcall	_RfPointSelect
 15673                           
 15674                           ;RF_Control_B1.c: 144: if(RF->Enable)
 15675  0D6C  087B               	movf	_RF,w
 15676  0D6D  0086               	movwf	6
 15677  0D6E  0187               	clrf	7
 15678  0D6F  1C01               	btfss	1,0
 15679  0D70  0008               	return
 15680                           
 15681                           ;RF_Control_B1.c: 145: {
 15682                           ;RF_Control_B1.c: 147: if(!RF->TransceiveGO)
 15683  0D71  087B               	movf	_RF,w
 15684  0D72  0086               	movwf	6
 15685  0D73  0187               	clrf	7
 15686  0D74  1901               	btfsc	1,2
 15687  0D75  0008               	return
 15688                           
 15689                           ;RF_Control_B1.c: 148: {
 15690                           ;RF_Control_B1.c: 149: RF->TransceiveGO=1;
 15691  0D76  087B               	movf	_RF,w
 15692  0D77  0086               	movwf	6
 15693  0D78  0187               	clrf	7
 15694  0D79  1501               	bsf	1,2
 15695                           
 15696                           ;RF_Control_B1.c: 158: RF_Data[0]=0x63;
 15697  0D7A  3063               	movlw	99
 15698  0D7B  0020               	movlb	0	; select bank0
 15699  0D7C  00A2               	movwf	??_setTxData
 15700  0D7D  0822               	movf	??_setTxData,w
 15701  0D7E  0021               	movlb	1	; select bank1
 15702  0D7F  00A0               	movwf	_RF_Data^(0+128)
 15703                           
 15704                           ;RF_Control_B1.c: 159: RF_Data[1]=0x02;
 15705  0D80  3002               	movlw	2
 15706  0D81  0020               	movlb	0	; select bank0
 15707  0D82  00A2               	movwf	??_setTxData
 15708  0D83  0822               	movf	??_setTxData,w
 15709  0D84  0021               	movlb	1	; select bank1
 15710  0D85  00A1               	movwf	(_RF_Data^(0+128)+1)
 15711                           
 15712                           ;RF_Control_B1.c: 160: RF_Data[2]=Product->Data[2];
 15713  0D86  0020               	movlb	0	; select bank0
 15714  0D87  086F               	movf	_Product,w
 15715  0D88  0086               	movwf	6
 15716  0D89  3001               	movlw	1	; select bank2/3
 15717  0D8A  0087               	movwf	7
 15718  0D8B  3001               	movlw	1	; select bank2/3
 15719  0D8C  3F42               	moviw [2]fsr1
 15720  0D8D  0021               	movlb	1	; select bank1
 15721  0D8E  00A2               	movwf	(_RF_Data^(0+128)+2)
 15722                           
 15723                           ;RF_Control_B1.c: 161: RF_Data[3]=Product->Data[3];
 15724  0D8F  0020               	movlb	0	; select bank0
 15725  0D90  086F               	movf	_Product,w
 15726  0D91  0086               	movwf	6
 15727  0D92  3001               	movlw	1	; select bank2/3
 15728  0D93  0087               	movwf	7
 15729  0D94  3001               	movlw	1	; select bank2/3
 15730  0D95  3F43               	moviw [3]fsr1
 15731  0D96  0021               	movlb	1	; select bank1
 15732  0D97  00A3               	movwf	(_RF_Data^(0+128)+3)
 15733                           
 15734                           ;RF_Control_B1.c: 162: RF_Data[4]=Product->Data[4];
 15735  0D98  0020               	movlb	0	; select bank0
 15736  0D99  086F               	movf	_Product,w
 15737  0D9A  0086               	movwf	6
 15738  0D9B  3001               	movlw	1	; select bank2/3
 15739  0D9C  0087               	movwf	7
 15740  0D9D  3001               	movlw	1	; select bank2/3
 15741  0D9E  3F44               	moviw [4]fsr1
 15742  0D9F  0021               	movlb	1	; select bank1
 15743  0DA0  00A4               	movwf	(_RF_Data^(0+128)+4)
 15744                           
 15745                           ;RF_Control_B1.c: 163: RF_Data[5]=Product->Data[5];
 15746  0DA1  0020               	movlb	0	; select bank0
 15747  0DA2  086F               	movf	_Product,w
 15748  0DA3  0086               	movwf	6
 15749  0DA4  3001               	movlw	1	; select bank2/3
 15750  0DA5  0087               	movwf	7
 15751  0DA6  3001               	movlw	1	; select bank2/3
 15752  0DA7  3F45               	moviw [5]fsr1
 15753  0DA8  0021               	movlb	1	; select bank1
 15754  0DA9  00A5               	movwf	(_RF_Data^(0+128)+5)
 15755                           
 15756                           ;RF_Control_B1.c: 164: RF_Data[6]=Product->Data[6];
 15757  0DAA  0020               	movlb	0	; select bank0
 15758  0DAB  086F               	movf	_Product,w
 15759  0DAC  0086               	movwf	6
 15760  0DAD  3001               	movlw	1	; select bank2/3
 15761  0DAE  0087               	movwf	7
 15762  0DAF  3001               	movlw	1	; select bank2/3
 15763  0DB0  3F46               	moviw [6]fsr1
 15764  0DB1  0021               	movlb	1	; select bank1
 15765  0DB2  00A6               	movwf	(_RF_Data^(0+128)+6)
 15766                           
 15767                           ;RF_Control_B1.c: 165: RF_Data[7]=Product->Data[7];
 15768  0DB3  0020               	movlb	0	; select bank0
 15769  0DB4  086F               	movf	_Product,w
 15770  0DB5  0086               	movwf	6
 15771  0DB6  3001               	movlw	1	; select bank2/3
 15772  0DB7  0087               	movwf	7
 15773  0DB8  3001               	movlw	1	; select bank2/3
 15774  0DB9  3F47               	moviw [7]fsr1
 15775  0DBA  0021               	movlb	1	; select bank1
 15776  0DBB  00A7               	movwf	(_RF_Data^(0+128)+7)
 15777                           
 15778                           ;RF_Control_B1.c: 166: RF_Data[8]=Product->Data[8];
 15779  0DBC  0020               	movlb	0	; select bank0
 15780  0DBD  086F               	movf	_Product,w
 15781  0DBE  0086               	movwf	6
 15782  0DBF  3001               	movlw	1	; select bank2/3
 15783  0DC0  0087               	movwf	7
 15784  0DC1  3001               	movlw	1	; select bank2/3
 15785  0DC2  3F48               	moviw [8]fsr1
 15786  0DC3  0021               	movlb	1	; select bank1
 15787  0DC4  00A8               	movwf	(_RF_Data^(0+128)+8)
 15788                           
 15789                           ;RF_Control_B1.c: 167: RF_Data[9]=Product->Data[9];
 15790  0DC5  0020               	movlb	0	; select bank0
 15791  0DC6  086F               	movf	_Product,w
 15792  0DC7  0086               	movwf	6
 15793  0DC8  3001               	movlw	1	; select bank2/3
 15794  0DC9  0087               	movwf	7
 15795  0DCA  3001               	movlw	1	; select bank2/3
 15796  0DCB  3F49               	moviw [9]fsr1
 15797  0DCC  0021               	movlb	1	; select bank1
 15798  0DCD  00A9               	movwf	(_RF_Data^(0+128)+9)
 15799                           
 15800                           ;RF_Control_B1.c: 168: RF_Data[10]=Product->Data[10];
 15801  0DCE  0020               	movlb	0	; select bank0
 15802  0DCF  086F               	movf	_Product,w
 15803  0DD0  0086               	movwf	6
 15804  0DD1  3001               	movlw	1	; select bank2/3
 15805  0DD2  0087               	movwf	7
 15806  0DD3  3001               	movlw	1	; select bank2/3
 15807  0DD4  3F4A               	moviw [10]fsr1
 15808  0DD5  0021               	movlb	1	; select bank1
 15809  0DD6  00AA               	movwf	(_RF_Data^(0+128)+10)
 15810                           
 15811                           ;RF_Control_B1.c: 169: RF_Data[11]=Product->Data[11];
 15812  0DD7  0020               	movlb	0	; select bank0
 15813  0DD8  086F               	movf	_Product,w
 15814  0DD9  0086               	movwf	6
 15815  0DDA  3001               	movlw	1	; select bank2/3
 15816  0DDB  0087               	movwf	7
 15817  0DDC  3001               	movlw	1	; select bank2/3
 15818  0DDD  3F4B               	moviw [11]fsr1
 15819  0DDE  0021               	movlb	1	; select bank1
 15820  0DDF  00AB               	movwf	(_RF_Data^(0+128)+11)
 15821                           
 15822                           ;RF_Control_B1.c: 170: RF_Data[12]=Product->Data[12];
 15823  0DE0  0020               	movlb	0	; select bank0
 15824  0DE1  086F               	movf	_Product,w
 15825  0DE2  0086               	movwf	6
 15826  0DE3  3001               	movlw	1	; select bank2/3
 15827  0DE4  0087               	movwf	7
 15828  0DE5  3001               	movlw	1	; select bank2/3
 15829  0DE6  3F4C               	moviw [12]fsr1
 15830  0DE7  0021               	movlb	1	; select bank1
 15831  0DE8  00AC               	movwf	(_RF_Data^(0+128)+12)
 15832                           
 15833                           ;RF_Control_B1.c: 171: RF_Data[13]=Product->Data[13];
 15834  0DE9  0020               	movlb	0	; select bank0
 15835  0DEA  086F               	movf	_Product,w
 15836  0DEB  0086               	movwf	6
 15837  0DEC  3001               	movlw	1	; select bank2/3
 15838  0DED  0087               	movwf	7
 15839  0DEE  3001               	movlw	1	; select bank2/3
 15840  0DEF  3F4D               	moviw [13]fsr1
 15841  0DF0  0021               	movlb	1	; select bank1
 15842  0DF1  00AD               	movwf	(_RF_Data^(0+128)+13)
 15843                           
 15844                           ;RF_Control_B1.c: 172: RF_Data[14]=Product->Data[14];
 15845  0DF2  0020               	movlb	0	; select bank0
 15846  0DF3  086F               	movf	_Product,w
 15847  0DF4  0086               	movwf	6
 15848  0DF5  3001               	movlw	1	; select bank2/3
 15849  0DF6  0087               	movwf	7
 15850  0DF7  3001               	movlw	1	; select bank2/3
 15851  0DF8  3F4E               	moviw [14]fsr1
 15852  0DF9  0021               	movlb	1	; select bank1
 15853  0DFA  00AE               	movwf	(_RF_Data^(0+128)+14)
 15854                           
 15855                           ;RF_Control_B1.c: 173: RF_Data[15]=Product->Data[15];
 15856  0DFB  0020               	movlb	0	; select bank0
 15857  0DFC  086F               	movf	_Product,w
 15858  0DFD  0086               	movwf	6
 15859  0DFE  3001               	movlw	1	; select bank2/3
 15860  0DFF  0087               	movwf	7
 15861  0E00  3001               	movlw	1	; select bank2/3
 15862  0E01  3F4F               	moviw [15]fsr1
 15863  0E02  0021               	movlb	1	; select bank1
 15864  0E03  00AF               	movwf	(_RF_Data^(0+128)+15)
 15865                           
 15866                           ;RF_Control_B1.c: 174: RF_Data[16]=Product->Data[16];
 15867  0E04  0020               	movlb	0	; select bank0
 15868  0E05  086F               	movf	_Product,w
 15869  0E06  0086               	movwf	6
 15870  0E07  3001               	movlw	1	; select bank2/3
 15871  0E08  0087               	movwf	7
 15872  0E09  3001               	movlw	1	; select bank2/3
 15873  0E0A  3F50               	moviw [16]fsr1
 15874  0E0B  0021               	movlb	1	; select bank1
 15875  0E0C  00B0               	movwf	(_RF_Data^(0+128)+16)
 15876                           
 15877                           ;RF_Control_B1.c: 175: RF_Data[17]=Product->Data[17];
 15878  0E0D  0020               	movlb	0	; select bank0
 15879  0E0E  086F               	movf	_Product,w
 15880  0E0F  0086               	movwf	6
 15881  0E10  3001               	movlw	1	; select bank2/3
 15882  0E11  0087               	movwf	7
 15883  0E12  3001               	movlw	1	; select bank2/3
 15884  0E13  3F51               	moviw [17]fsr1
 15885  0E14  0021               	movlb	1	; select bank1
 15886  0E15  00B1               	movwf	(_RF_Data^(0+128)+17)
 15887                           
 15888                           ;RF_Control_B1.c: 176: RF_Data[18]=Product->Data[18];
 15889  0E16  0020               	movlb	0	; select bank0
 15890  0E17  086F               	movf	_Product,w
 15891  0E18  0086               	movwf	6
 15892  0E19  3001               	movlw	1	; select bank2/3
 15893  0E1A  0087               	movwf	7
 15894  0E1B  3001               	movlw	1	; select bank2/3
 15895  0E1C  3F52               	moviw [18]fsr1
 15896  0E1D  0021               	movlb	1	; select bank1
 15897  0E1E  00B2               	movwf	(_RF_Data^(0+128)+18)
 15898                           
 15899                           ;RF_Control_B1.c: 177: RF_Data[19]=Product->Data[19];
 15900  0E1F  0020               	movlb	0	; select bank0
 15901  0E20  086F               	movf	_Product,w
 15902  0E21  0086               	movwf	6
 15903  0E22  3001               	movlw	1	; select bank2/3
 15904  0E23  0087               	movwf	7
 15905  0E24  3001               	movlw	1	; select bank2/3
 15906  0E25  3F53               	moviw [19]fsr1
 15907  0E26  0021               	movlb	1	; select bank1
 15908  0E27  00B3               	movwf	(_RF_Data^(0+128)+19)
 15909                           
 15910                           ;RF_Control_B1.c: 178: RF_Data[20]=1;
 15911  0E28  01B4               	clrf	(_RF_Data^(0+128)+20)
 15912  0E29  0AB4               	incf	(_RF_Data^(0+128)+20),f
 15913  0E2A  0008               	return
 15914  0E2B                     __end_of_setTxData:	
 15915                           
 15916                           	psect	text94
 15917  1870                     __ptext94:	
 15918 ;; *************** function _RfPointSelect *****************
 15919 ;; Defined at:
 15920 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 15921 ;; Parameters:    Size  Location     Type
 15922 ;;  rf              1    wreg     unsigned char 
 15923 ;; Auto vars:     Size  Location     Type
 15924 ;;  rf              1    1[BANK0 ] unsigned char 
 15925 ;; Return value:  Size  Location     Type
 15926 ;;		None               void
 15927 ;; Registers used:
 15928 ;;		wreg
 15929 ;; Tracked objects:
 15930 ;;		On entry : 0/0
 15931 ;;		On exit  : 0/0
 15932 ;;		Unchanged: 0/0
 15933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15938 ;;Total ram usage:        2 bytes
 15939 ;; Hardware stack levels used:    1
 15940 ;; Hardware stack levels required when called:    4
 15941 ;; This function calls:
 15942 ;;		Nothing
 15943 ;; This function is called by:
 15944 ;;		_setRF_Learn
 15945 ;;		_setRF_RxStatus
 15946 ;;		_setRF_Main
 15947 ;;		_setTxData
 15948 ;;		_setRF_Enable
 15949 ;;		_RF_RxDisable
 15950 ;;		_getRxData
 15951 ;;		_setLog_Code
 15952 ;;		_setControl_Lights_Table
 15953 ;; This function uses a non-reentrant model
 15954 ;;
 15955                           
 15956                           
 15957                           ;psect for function _RfPointSelect
 15958  1870                     _RfPointSelect:	
 15959                           
 15960                           ;incstack = 0
 15961                           ; Regs used in _RfPointSelect: [wreg]
 15962                           ;RfPointSelect@rf stored from wreg
 15963  1870  0020               	movlb	0	; select bank0
 15964  1871  00A1               	movwf	RfPointSelect@rf
 15965                           
 15966                           ;RF_Control_B1.c: 10: if(rf == 1)
 15967  1872  0821               	movf	RfPointSelect@rf,w
 15968  1873  3A01               	xorlw	1
 15969  1874  1D03               	skipz
 15970  1875  0008               	return
 15971                           
 15972                           ;RF_Control_B1.c: 11: {
 15973                           ;RF_Control_B1.c: 12: RF=&RF1;
 15974  1876  30E7               	movlw	_RF1& (0+255)
 15975  1877  00A0               	movwf	??_RfPointSelect
 15976  1878  0820               	movf	??_RfPointSelect,w
 15977  1879  00FB               	movwf	_RF
 15978  187A  0008               	return
 15979  187B                     __end_of_RfPointSelect:	
 15980                           
 15981                           	psect	text95
 15982  1969                     __ptext95:	
 15983 ;; *************** function _setSw_Status *****************
 15984 ;; Defined at:
 15985 ;;		line 106 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 15986 ;; Parameters:    Size  Location     Type
 15987 ;;  sw              1    wreg     unsigned char 
 15988 ;;  command         1    2[BANK0 ] unsigned char 
 15989 ;; Auto vars:     Size  Location     Type
 15990 ;;  sw              1    3[BANK0 ] unsigned char 
 15991 ;; Return value:  Size  Location     Type
 15992 ;;		None               void
 15993 ;; Registers used:
 15994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15995 ;; Tracked objects:
 15996 ;;		On entry : 0/0
 15997 ;;		On exit  : 0/0
 15998 ;;		Unchanged: 0/0
 15999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16000 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16003 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;Total ram usage:        2 bytes
 16005 ;; Hardware stack levels used:    1
 16006 ;; Hardware stack levels required when called:    5
 16007 ;; This function calls:
 16008 ;;		_SwPointSelect
 16009 ;; This function is called by:
 16010 ;;		_DlyOff_Main
 16011 ;;		_setDimmerLights_ERROR
 16012 ;;		_setControl_Lights_Table
 16013 ;;		_setRFSW_Control
 16014 ;; This function uses a non-reentrant model
 16015 ;;
 16016                           
 16017                           
 16018                           ;psect for function _setSw_Status
 16019  1969                     _setSw_Status:	
 16020                           
 16021                           ;incstack = 0
 16022                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16023                           ;setSw_Status@sw stored from wreg
 16024  1969  0020               	movlb	0	; select bank0
 16025  196A  00A3               	movwf	setSw_Status@sw
 16026                           
 16027                           ;Switch_B1.c: 108: SwPointSelect(sw);
 16028  196B  0823               	movf	setSw_Status@sw,w
 16029  196C  31A7  27F5         	fcall	_SwPointSelect
 16030                           
 16031                           ;Switch_B1.c: 109: Sw->Status=command;
 16032  196E  0020               	movlb	0	; select bank0
 16033  196F  086D               	movf	_Sw,w
 16034  1970  0086               	movwf	6
 16035  1971  3001               	movlw	1	; select bank2/3
 16036  1972  0087               	movwf	7
 16037  1973  0822               	movf	setSw_Status@command,w
 16038  1974  1301               	bcf	1,6
 16039  1975  1D03               	skipz
 16040  1976  1701               	bsf	1,6
 16041  1977  0008               	return
 16042  1978                     __end_of_setSw_Status:	
 16043                           
 16044                           	psect	text96
 16045  27F5                     __ptext96:	
 16046 ;; *************** function _SwPointSelect *****************
 16047 ;; Defined at:
 16048 ;;		line 16 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Switch_B1.c"
 16049 ;; Parameters:    Size  Location     Type
 16050 ;;  sw              1    wreg     unsigned char 
 16051 ;; Auto vars:     Size  Location     Type
 16052 ;;  sw              1    1[BANK0 ] unsigned char 
 16053 ;; Return value:  Size  Location     Type
 16054 ;;		None               void
 16055 ;; Registers used:
 16056 ;;		wreg
 16057 ;; Tracked objects:
 16058 ;;		On entry : 0/0
 16059 ;;		On exit  : 0/0
 16060 ;;		Unchanged: 0/0
 16061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16065 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16066 ;;Total ram usage:        2 bytes
 16067 ;; Hardware stack levels used:    1
 16068 ;; Hardware stack levels required when called:    4
 16069 ;; This function calls:
 16070 ;;		Nothing
 16071 ;; This function is called by:
 16072 ;;		_setSw_Enable
 16073 ;;		_setSw_Status
 16074 ;;		_setSw_Main
 16075 ;;		_Sw_Detect
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078                           
 16079                           
 16080                           ;psect for function _SwPointSelect
 16081  27F5                     _SwPointSelect:	
 16082                           
 16083                           ;incstack = 0
 16084                           ; Regs used in _SwPointSelect: [wreg]
 16085                           ;SwPointSelect@sw stored from wreg
 16086  27F5  0020               	movlb	0	; select bank0
 16087  27F6  00A1               	movwf	SwPointSelect@sw
 16088                           
 16089                           ;Switch_B1.c: 19: if(sw == 1)
 16090  27F7  0821               	movf	SwPointSelect@sw,w
 16091  27F8  3A01               	xorlw	1
 16092  27F9  1D03               	skipz
 16093  27FA  0008               	return
 16094                           
 16095                           ;Switch_B1.c: 20: {
 16096                           ;Switch_B1.c: 21: Sw=&Sw1;
 16097  27FB  304B               	movlw	_Sw1& (0+255)
 16098  27FC  00A0               	movwf	??_SwPointSelect
 16099  27FD  0820               	movf	??_SwPointSelect,w
 16100  27FE  00ED               	movwf	_Sw
 16101  27FF  0008               	return
 16102  2800                     __end_of_SwPointSelect:	
 16103                           
 16104                           	psect	text97
 16105  155C                     __ptext97:	
 16106 ;; *************** function _setRF_DimmerLights *****************
 16107 ;; Defined at:
 16108 ;;		line 444 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 16109 ;; Parameters:    Size  Location     Type
 16110 ;;  lights          1    wreg     unsigned char 
 16111 ;;  on              1   61[BANK0 ] unsigned char 
 16112 ;; Auto vars:     Size  Location     Type
 16113 ;;  lights          1   65[BANK0 ] unsigned char 
 16114 ;;  status          1   64[BANK0 ] unsigned char 
 16115 ;; Return value:  Size  Location     Type
 16116 ;;		None               void
 16117 ;; Registers used:
 16118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16119 ;; Tracked objects:
 16120 ;;		On entry : 0/0
 16121 ;;		On exit  : 0/0
 16122 ;;		Unchanged: 0/0
 16123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16124 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16125 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16126 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16127 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16128 ;;Total ram usage:        5 bytes
 16129 ;; Hardware stack levels used:    1
 16130 ;; Hardware stack levels required when called:    7
 16131 ;; This function calls:
 16132 ;;		_setPercentValue
 16133 ;; This function is called by:
 16134 ;;		_DlyOff_Main
 16135 ;;		_setDimmerLights_Adj
 16136 ;;		_setRFSW_Control
 16137 ;;		_Sw_DimmerOnFunc
 16138 ;;		_Sw_DimmerOffFunc
 16139 ;; This function uses a non-reentrant model
 16140 ;;
 16141                           
 16142                           
 16143                           ;psect for function _setRF_DimmerLights
 16144  155C                     _setRF_DimmerLights:	
 16145                           
 16146                           ;incstack = 0
 16147                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16148                           ;setRF_DimmerLights@lights stored from wreg
 16149  155C  0020               	movlb	0	; select bank0
 16150  155D  00E1               	movwf	setRF_DimmerLights@lights
 16151                           
 16152                           ;RF_Control_B1.c: 446: char status;
 16153                           ;RF_Control_B1.c: 447: status=1;
 16154  155E  01E0               	clrf	setRF_DimmerLights@status
 16155  155F  0AE0               	incf	setRF_DimmerLights@status,f
 16156                           
 16157                           ;RF_Control_B1.c: 448: status<<=(lights-1);
 16158  1560  0861               	movf	setRF_DimmerLights@lights,w
 16159  1561  3EFF               	addlw	-1
 16160  1562  0A89               	incf	9,f
 16161  1563  2D66               	goto	u7110
 16162  1564                     u7115:	
 16163  1564  1003               	clrc
 16164  1565  0DE0               	rlf	setRF_DimmerLights@status,f
 16165  1566                     u7110:	
 16166  1566  3EFF               	addlw	-1
 16167  1567  1D03               	skipz
 16168  1568  2D64               	goto	u7115
 16169                           
 16170                           ;RF_Control_B1.c: 449: Product->Data[11]=lights;
 16171  1569  0861               	movf	setRF_DimmerLights@lights,w
 16172  156A  00DE               	movwf	??_setRF_DimmerLights
 16173  156B  086F               	movf	_Product,w
 16174  156C  3E0B               	addlw	11
 16175  156D  0086               	movwf	6
 16176  156E  3001               	movlw	1	; select bank2/3
 16177  156F  0087               	movwf	7
 16178  1570  085E               	movf	??_setRF_DimmerLights,w
 16179  1571  0081               	movwf	1
 16180                           
 16181                           ;RF_Control_B1.c: 452: Product->Data[(20+lights)]=setPercentValue(((char)(65*1.5)));
 16182  1572  3061               	movlw	97
 16183  1573  3190  2088  3195   	fcall	_setPercentValue
 16184  1576  0020               	movlb	0	; select bank0
 16185  1577  00DE               	movwf	??_setRF_DimmerLights
 16186  1578  0861               	movf	setRF_DimmerLights@lights,w
 16187  1579  3E14               	addlw	20
 16188  157A  076F               	addwf	_Product,w
 16189  157B  00DF               	movwf	??_setRF_DimmerLights+1
 16190  157C  085F               	movf	??_setRF_DimmerLights+1,w
 16191  157D  0086               	movwf	6
 16192  157E  3001               	movlw	1	; select bank2/3
 16193  157F  0087               	movwf	7
 16194  1580  085E               	movf	??_setRF_DimmerLights,w
 16195  1581  0081               	movwf	1
 16196                           
 16197                           ;RF_Control_B1.c: 455: Product->Data[9]=Product->Data[20+lights];
 16198  1582  0861               	movf	setRF_DimmerLights@lights,w
 16199  1583  3E14               	addlw	20
 16200  1584  076F               	addwf	_Product,w
 16201  1585  00DE               	movwf	??_setRF_DimmerLights
 16202  1586  085E               	movf	??_setRF_DimmerLights,w
 16203  1587  0086               	movwf	6
 16204  1588  3001               	movlw	1	; select bank2/3
 16205  1589  0087               	movwf	7
 16206  158A  0801               	movf	1,w
 16207  158B  00DF               	movwf	??_setRF_DimmerLights+1
 16208  158C  086F               	movf	_Product,w
 16209  158D  3E09               	addlw	9
 16210  158E  0086               	movwf	6
 16211  158F  3001               	movlw	1	; select bank2/3
 16212  1590  0087               	movwf	7
 16213  1591  085F               	movf	??_setRF_DimmerLights+1,w
 16214  1592  0081               	movwf	1
 16215                           
 16216                           ;RF_Control_B1.c: 456: Product->Data[17]=Product->Data[26+lights];
 16217  1593  0861               	movf	setRF_DimmerLights@lights,w
 16218  1594  3E1A               	addlw	26
 16219  1595  076F               	addwf	_Product,w
 16220  1596  00DE               	movwf	??_setRF_DimmerLights
 16221  1597  085E               	movf	??_setRF_DimmerLights,w
 16222  1598  0086               	movwf	6
 16223  1599  3001               	movlw	1	; select bank2/3
 16224  159A  0087               	movwf	7
 16225  159B  0801               	movf	1,w
 16226  159C  00DF               	movwf	??_setRF_DimmerLights+1
 16227  159D  086F               	movf	_Product,w
 16228  159E  3E11               	addlw	17
 16229  159F  0086               	movwf	6
 16230  15A0  3001               	movlw	1	; select bank2/3
 16231  15A1  0087               	movwf	7
 16232  15A2  085F               	movf	??_setRF_DimmerLights+1,w
 16233  15A3  0081               	movwf	1
 16234                           
 16235                           ;RF_Control_B1.c: 457: if(on)
 16236  15A4  085D               	movf	setRF_DimmerLights@on,w
 16237  15A5  1903               	btfsc	3,2
 16238  15A6  2DB7               	goto	l7845
 16239                           
 16240                           ;RF_Control_B1.c: 458: {
 16241                           ;RF_Control_B1.c: 459: Product->Data[15]=(Product->Data[15]|status);
 16242  15A7  086F               	movf	_Product,w
 16243  15A8  3E0F               	addlw	15
 16244  15A9  0086               	movwf	6
 16245  15AA  3001               	movlw	1	; select bank2/3
 16246  15AB  0087               	movwf	7
 16247  15AC  0801               	movf	1,w
 16248  15AD  0460               	iorwf	setRF_DimmerLights@status,w
 16249  15AE  00DE               	movwf	??_setRF_DimmerLights
 16250  15AF  086F               	movf	_Product,w
 16251  15B0  3E0F               	addlw	15
 16252  15B1  0086               	movwf	6
 16253  15B2  3001               	movlw	1	; select bank2/3
 16254  15B3  0087               	movwf	7
 16255  15B4  085E               	movf	??_setRF_DimmerLights,w
 16256  15B5  0081               	movwf	1
 16257                           
 16258                           ;RF_Control_B1.c: 460: }
 16259  15B6  0008               	return
 16260  15B7                     l7845:	
 16261                           
 16262                           ;RF_Control_B1.c: 461: else
 16263                           ;RF_Control_B1.c: 462: {
 16264                           ;RF_Control_B1.c: 463: Product->Data[15]=(Product->Data[15]&(~status));
 16265  15B7  086F               	movf	_Product,w
 16266  15B8  3E0F               	addlw	15
 16267  15B9  0086               	movwf	6
 16268  15BA  3001               	movlw	1	; select bank2/3
 16269  15BB  0087               	movwf	7
 16270  15BC  0960               	comf	setRF_DimmerLights@status,w
 16271  15BD  0501               	andwf	1,w
 16272  15BE  00DE               	movwf	??_setRF_DimmerLights
 16273  15BF  086F               	movf	_Product,w
 16274  15C0  3E0F               	addlw	15
 16275  15C1  0086               	movwf	6
 16276  15C2  3001               	movlw	1	; select bank2/3
 16277  15C3  0087               	movwf	7
 16278  15C4  085E               	movf	??_setRF_DimmerLights,w
 16279  15C5  0081               	movwf	1
 16280  15C6  0008               	return
 16281  15C7                     __end_of_setRF_DimmerLights:	
 16282                           
 16283                           	psect	text98
 16284  1088                     __ptext98:	
 16285 ;; *************** function _setPercentValue *****************
 16286 ;; Defined at:
 16287 ;;		line 496 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 16288 ;; Parameters:    Size  Location     Type
 16289 ;;  value           1    wreg     unsigned char 
 16290 ;; Auto vars:     Size  Location     Type
 16291 ;;  value           1   57[BANK0 ] unsigned char 
 16292 ;;  i               3   58[BANK0 ] float 
 16293 ;; Return value:  Size  Location     Type
 16294 ;;                  1    wreg      unsigned char 
 16295 ;; Registers used:
 16296 ;;		wreg, status,2, status,0, pclath, cstack
 16297 ;; Tracked objects:
 16298 ;;		On entry : 0/0
 16299 ;;		On exit  : 0/0
 16300 ;;		Unchanged: 0/0
 16301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16305 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;Total ram usage:        4 bytes
 16307 ;; Hardware stack levels used:    1
 16308 ;; Hardware stack levels required when called:    6
 16309 ;; This function calls:
 16310 ;;		___awtoft
 16311 ;;		___ftdiv
 16312 ;;		___fttol
 16313 ;; This function is called by:
 16314 ;;		_Flash_Memory_Initialization
 16315 ;;		_setRF_DimmerLights
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           
 16320                           ;psect for function _setPercentValue
 16321  1088                     _setPercentValue:	
 16322                           
 16323                           ;incstack = 0
 16324                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 16325                           ;setPercentValue@value stored from wreg
 16326  1088  0020               	movlb	0	; select bank0
 16327  1089  00D9               	movwf	setPercentValue@value
 16328                           
 16329                           ;Dimmer_B1.c: 505: float i=((char)(65*1.5))-((char)(20*1.5));
 16330  108A  3000               	movlw	0
 16331  108B  00DA               	movwf	setPercentValue@i
 16332  108C  3086               	movlw	134
 16333  108D  00DB               	movwf	setPercentValue@i+1
 16334  108E  3042               	movlw	66
 16335  108F  00DC               	movwf	setPercentValue@i+2
 16336                           
 16337                           ;Dimmer_B1.c: 506: i/=100;
 16338  1090  3000               	movlw	0
 16339  1091  00AE               	movwf	___ftdiv@f2
 16340  1092  30C8               	movlw	200
 16341  1093  00AF               	movwf	___ftdiv@f2+1
 16342  1094  3042               	movlw	66
 16343  1095  00B0               	movwf	___ftdiv@f2+2
 16344  1096  085A               	movf	setPercentValue@i,w
 16345  1097  00B1               	movwf	___ftdiv@f1
 16346  1098  085B               	movf	setPercentValue@i+1,w
 16347  1099  00B2               	movwf	___ftdiv@f1+1
 16348  109A  085C               	movf	setPercentValue@i+2,w
 16349  109B  00B3               	movwf	___ftdiv@f1+2
 16350  109C  318C  2409  3190   	fcall	___ftdiv
 16351  109F  0020               	movlb	0	; select bank0
 16352  10A0  082E               	movf	?___ftdiv,w
 16353  10A1  00DA               	movwf	setPercentValue@i
 16354  10A2  082F               	movf	?___ftdiv+1,w
 16355  10A3  00DB               	movwf	setPercentValue@i+1
 16356  10A4  0830               	movf	?___ftdiv+2,w
 16357  10A5  00DC               	movwf	setPercentValue@i+2
 16358                           
 16359                           ;Dimmer_B1.c: 507: return (100-(char)((value-((char)(65*1.5)))/i));
 16360  10A6  0859               	movf	setPercentValue@value,w
 16361  10A7  3E9F               	addlw	159
 16362  10A8  00A8               	movwf	___awtoft@c
 16363  10A9  30FF               	movlw	255
 16364  10AA  1803               	skipnc
 16365  10AB  3000               	movlw	0
 16366  10AC  00A9               	movwf	___awtoft@c+1
 16367  10AD  319B  238E  3190   	fcall	___awtoft
 16368  10B0  0020               	movlb	0	; select bank0
 16369  10B1  0828               	movf	?___awtoft,w
 16370  10B2  00B1               	movwf	___ftdiv@f1
 16371  10B3  0829               	movf	?___awtoft+1,w
 16372  10B4  00B2               	movwf	___ftdiv@f1+1
 16373  10B5  082A               	movf	?___awtoft+2,w
 16374  10B6  00B3               	movwf	___ftdiv@f1+2
 16375  10B7  085A               	movf	setPercentValue@i,w
 16376  10B8  00AE               	movwf	___ftdiv@f2
 16377  10B9  085B               	movf	setPercentValue@i+1,w
 16378  10BA  00AF               	movwf	___ftdiv@f2+1
 16379  10BB  085C               	movf	setPercentValue@i+2,w
 16380  10BC  00B0               	movwf	___ftdiv@f2+2
 16381  10BD  318C  2409  3190   	fcall	___ftdiv
 16382  10C0  0020               	movlb	0	; select bank0
 16383  10C1  082E               	movf	?___ftdiv,w
 16384  10C2  00CB               	movwf	___fttol@f1
 16385  10C3  082F               	movf	?___ftdiv+1,w
 16386  10C4  00CC               	movwf	___fttol@f1+1
 16387  10C5  0830               	movf	?___ftdiv+2,w
 16388  10C6  00CD               	movwf	___fttol@f1+2
 16389  10C7  3188  2091         	fcall	___fttol
 16390  10C9  0020               	movlb	0	; select bank0
 16391  10CA  034B               	decf	?___fttol,w
 16392  10CB  3AFF               	xorlw	255
 16393  10CC  3E64               	addlw	100
 16394  10CD  0008               	return
 16395  10CE                     __end_of_setPercentValue:	
 16396                           
 16397                           	psect	text99
 16398  0891                     __ptext99:	
 16399 ;; *************** function ___fttol *****************
 16400 ;; Defined at:
 16401 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16402 ;; Parameters:    Size  Location     Type
 16403 ;;  f1              3   43[BANK0 ] float 
 16404 ;; Auto vars:     Size  Location     Type
 16405 ;;  lval            4   52[BANK0 ] unsigned long 
 16406 ;;  exp1            1   56[BANK0 ] unsigned char 
 16407 ;;  sign1           1   51[BANK0 ] unsigned char 
 16408 ;; Return value:  Size  Location     Type
 16409 ;;                  4   43[BANK0 ] long 
 16410 ;; Registers used:
 16411 ;;		wreg, status,2, status,0
 16412 ;; Tracked objects:
 16413 ;;		On entry : 0/0
 16414 ;;		On exit  : 0/0
 16415 ;;		Unchanged: 0/0
 16416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16417 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;Total ram usage:       14 bytes
 16422 ;; Hardware stack levels used:    1
 16423 ;; Hardware stack levels required when called:    4
 16424 ;; This function calls:
 16425 ;;		Nothing
 16426 ;; This function is called by:
 16427 ;;		_getPercentValue
 16428 ;;		_setPercentValue
 16429 ;; This function uses a non-reentrant model
 16430 ;;
 16431                           
 16432                           
 16433                           ;psect for function ___fttol
 16434  0891                     ___fttol:	
 16435                           
 16436                           ;incstack = 0
 16437                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16438  0891  0020               	movlb	0	; select bank0
 16439  0892  084B               	movf	___fttol@f1,w
 16440  0893  00CF               	movwf	??___fttol
 16441  0894  084C               	movf	___fttol@f1+1,w
 16442  0895  00D0               	movwf	??___fttol+1
 16443  0896  084D               	movf	___fttol@f1+2,w
 16444  0897  00D1               	movwf	??___fttol+2
 16445  0898  1003               	clrc
 16446  0899  0D50               	rlf	??___fttol+1,w
 16447  089A  0D51               	rlf	??___fttol+2,w
 16448  089B  00D2               	movwf	??___fttol+3
 16449  089C  0852               	movf	??___fttol+3,w
 16450  089D  00D8               	movwf	___fttol@exp1
 16451  089E  08D8               	movf	___fttol@exp1,f
 16452  089F  1D03               	skipz
 16453  08A0  28AA               	goto	l5737
 16454  08A1  3000               	movlw	0
 16455  08A2  00CE               	movwf	?___fttol+3
 16456  08A3  3000               	movlw	0
 16457  08A4  00CD               	movwf	?___fttol+2
 16458  08A5  3000               	movlw	0
 16459  08A6  00CC               	movwf	?___fttol+1
 16460  08A7  3000               	movlw	0
 16461  08A8  00CB               	movwf	?___fttol
 16462  08A9  0008               	return
 16463  08AA                     l5737:	
 16464  08AA  084B               	movf	___fttol@f1,w
 16465  08AB  00CF               	movwf	??___fttol
 16466  08AC  084C               	movf	___fttol@f1+1,w
 16467  08AD  00D0               	movwf	??___fttol+1
 16468  08AE  084D               	movf	___fttol@f1+2,w
 16469  08AF  00D1               	movwf	??___fttol+2
 16470  08B0  3017               	movlw	23
 16471  08B1                     u4085:	
 16472  08B1  36D1               	lsrf	??___fttol+2,f
 16473  08B2  0CD0               	rrf	??___fttol+1,f
 16474  08B3  0CCF               	rrf	??___fttol,f
 16475  08B4  0B89               	decfsz	9,f
 16476  08B5  28B1               	goto	u4085
 16477  08B6  084F               	movf	??___fttol,w
 16478  08B7  00D2               	movwf	??___fttol+3
 16479  08B8  0852               	movf	??___fttol+3,w
 16480  08B9  00D3               	movwf	___fttol@sign1
 16481  08BA  17CC               	bsf	___fttol@f1+1,7
 16482  08BB  30FF               	movlw	255
 16483  08BC  05CB               	andwf	___fttol@f1,f
 16484  08BD  30FF               	movlw	255
 16485  08BE  05CC               	andwf	___fttol@f1+1,f
 16486  08BF  3000               	movlw	0
 16487  08C0  05CD               	andwf	___fttol@f1+2,f
 16488  08C1  084B               	movf	___fttol@f1,w
 16489  08C2  00D4               	movwf	___fttol@lval
 16490  08C3  084C               	movf	___fttol@f1+1,w
 16491  08C4  00D5               	movwf	___fttol@lval+1
 16492  08C5  084D               	movf	___fttol@f1+2,w
 16493  08C6  00D6               	movwf	___fttol@lval+2
 16494  08C7  01D7               	clrf	___fttol@lval+3
 16495  08C8  308E               	movlw	142
 16496  08C9  02D8               	subwf	___fttol@exp1,f
 16497  08CA  1FD8               	btfss	___fttol@exp1,7
 16498  08CB  28E8               	goto	l5757
 16499  08CC  0858               	movf	___fttol@exp1,w
 16500  08CD  3A80               	xorlw	128
 16501  08CE  3E8F               	addlw	143
 16502  08CF  1803               	skipnc
 16503  08D0  28DA               	goto	l5755
 16504  08D1  3000               	movlw	0
 16505  08D2  00CE               	movwf	?___fttol+3
 16506  08D3  3000               	movlw	0
 16507  08D4  00CD               	movwf	?___fttol+2
 16508  08D5  3000               	movlw	0
 16509  08D6  00CC               	movwf	?___fttol+1
 16510  08D7  3000               	movlw	0
 16511  08D8  00CB               	movwf	?___fttol
 16512  08D9  0008               	return
 16513  08DA                     l5755:	
 16514  08DA  3001               	movlw	1
 16515  08DB                     u4115:	
 16516  08DB  36D7               	lsrf	___fttol@lval+3,f
 16517  08DC  0CD6               	rrf	___fttol@lval+2,f
 16518  08DD  0CD5               	rrf	___fttol@lval+1,f
 16519  08DE  0CD4               	rrf	___fttol@lval,f
 16520  08DF  0B89               	decfsz	9,f
 16521  08E0  28DB               	goto	u4115
 16522  08E1  3001               	movlw	1
 16523  08E2  00CF               	movwf	??___fttol
 16524  08E3  084F               	movf	??___fttol,w
 16525  08E4  07D8               	addwf	___fttol@exp1,f
 16526  08E5  1903               	btfsc	3,2
 16527  08E6  2901               	goto	l5767
 16528  08E7  28DA               	goto	l5755
 16529  08E8                     l5757:	
 16530  08E8  3018               	movlw	24
 16531  08E9  0258               	subwf	___fttol@exp1,w
 16532  08EA  1C03               	skipc
 16533  08EB  28FE               	goto	l5765
 16534  08EC  3000               	movlw	0
 16535  08ED  00CE               	movwf	?___fttol+3
 16536  08EE  3000               	movlw	0
 16537  08EF  00CD               	movwf	?___fttol+2
 16538  08F0  3000               	movlw	0
 16539  08F1  00CC               	movwf	?___fttol+1
 16540  08F2  3000               	movlw	0
 16541  08F3  00CB               	movwf	?___fttol
 16542  08F4  0008               	return
 16543  08F5                     l5763:	
 16544  08F5  3001               	movlw	1
 16545  08F6                     u4145:	
 16546  08F6  35D4               	lslf	___fttol@lval,f
 16547  08F7  0DD5               	rlf	___fttol@lval+1,f
 16548  08F8  0DD6               	rlf	___fttol@lval+2,f
 16549  08F9  0DD7               	rlf	___fttol@lval+3,f
 16550  08FA  0B89               	decfsz	9,f
 16551  08FB  28F6               	goto	u4145
 16552  08FC  3001               	movlw	1
 16553  08FD  02D8               	subwf	___fttol@exp1,f
 16554  08FE                     l5765:	
 16555  08FE  08D8               	movf	___fttol@exp1,f
 16556  08FF  1D03               	skipz
 16557  0900  28F5               	goto	l5763
 16558  0901                     l5767:	
 16559  0901  0853               	movf	___fttol@sign1,w
 16560  0902  1903               	btfsc	3,2
 16561  0903  290F               	goto	l5771
 16562  0904  09D4               	comf	___fttol@lval,f
 16563  0905  09D5               	comf	___fttol@lval+1,f
 16564  0906  09D6               	comf	___fttol@lval+2,f
 16565  0907  09D7               	comf	___fttol@lval+3,f
 16566  0908  0AD4               	incf	___fttol@lval,f
 16567  0909  1903               	skipnz
 16568  090A  0AD5               	incf	___fttol@lval+1,f
 16569  090B  1903               	skipnz
 16570  090C  0AD6               	incf	___fttol@lval+2,f
 16571  090D  1903               	skipnz
 16572  090E  0AD7               	incf	___fttol@lval+3,f
 16573  090F                     l5771:	
 16574  090F  0857               	movf	___fttol@lval+3,w
 16575  0910  00CE               	movwf	?___fttol+3
 16576  0911  0856               	movf	___fttol@lval+2,w
 16577  0912  00CD               	movwf	?___fttol+2
 16578  0913  0855               	movf	___fttol@lval+1,w
 16579  0914  00CC               	movwf	?___fttol+1
 16580  0915  0854               	movf	___fttol@lval,w
 16581  0916  00CB               	movwf	?___fttol
 16582  0917  0008               	return
 16583  0918                     __end_of___fttol:	
 16584                           
 16585                           	psect	text100
 16586  0C09                     __ptext100:	
 16587 ;; *************** function ___ftdiv *****************
 16588 ;; Defined at:
 16589 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16590 ;; Parameters:    Size  Location     Type
 16591 ;;  f2              3   14[BANK0 ] float 
 16592 ;;  f1              3   17[BANK0 ] float 
 16593 ;; Auto vars:     Size  Location     Type
 16594 ;;  f3              3   25[BANK0 ] float 
 16595 ;;  sign            1   29[BANK0 ] unsigned char 
 16596 ;;  exp             1   28[BANK0 ] unsigned char 
 16597 ;;  cntr            1   24[BANK0 ] unsigned char 
 16598 ;; Return value:  Size  Location     Type
 16599 ;;                  3   14[BANK0 ] float 
 16600 ;; Registers used:
 16601 ;;		wreg, status,2, status,0, pclath, cstack
 16602 ;; Tracked objects:
 16603 ;;		On entry : 0/0
 16604 ;;		On exit  : 0/0
 16605 ;;		Unchanged: 0/0
 16606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16607 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16608 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;Total ram usage:       16 bytes
 16612 ;; Hardware stack levels used:    1
 16613 ;; Hardware stack levels required when called:    5
 16614 ;; This function calls:
 16615 ;;		___ftpack
 16616 ;; This function is called by:
 16617 ;;		_getPercentValue
 16618 ;;		_setPercentValue
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           
 16623                           ;psect for function ___ftdiv
 16624  0C09                     ___ftdiv:	
 16625                           
 16626                           ;incstack = 0
 16627                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16628  0C09  0020               	movlb	0	; select bank0
 16629  0C0A  0831               	movf	___ftdiv@f1,w
 16630  0C0B  00B4               	movwf	??___ftdiv
 16631  0C0C  0832               	movf	___ftdiv@f1+1,w
 16632  0C0D  00B5               	movwf	??___ftdiv+1
 16633  0C0E  0833               	movf	___ftdiv@f1+2,w
 16634  0C0F  00B6               	movwf	??___ftdiv+2
 16635  0C10  1003               	clrc
 16636  0C11  0D35               	rlf	??___ftdiv+1,w
 16637  0C12  0D36               	rlf	??___ftdiv+2,w
 16638  0C13  00B7               	movwf	??___ftdiv+3
 16639  0C14  0837               	movf	??___ftdiv+3,w
 16640  0C15  00BC               	movwf	___ftdiv@exp
 16641  0C16  08BC               	movf	___ftdiv@exp,f
 16642  0C17  1D03               	skipz
 16643  0C18  2C20               	goto	l5645
 16644  0C19  3000               	movlw	0
 16645  0C1A  00AE               	movwf	?___ftdiv
 16646  0C1B  3000               	movlw	0
 16647  0C1C  00AF               	movwf	?___ftdiv+1
 16648  0C1D  3000               	movlw	0
 16649  0C1E  00B0               	movwf	?___ftdiv+2
 16650  0C1F  0008               	return
 16651  0C20                     l5645:	
 16652  0C20  082E               	movf	___ftdiv@f2,w
 16653  0C21  00B4               	movwf	??___ftdiv
 16654  0C22  082F               	movf	___ftdiv@f2+1,w
 16655  0C23  00B5               	movwf	??___ftdiv+1
 16656  0C24  0830               	movf	___ftdiv@f2+2,w
 16657  0C25  00B6               	movwf	??___ftdiv+2
 16658  0C26  1003               	clrc
 16659  0C27  0D35               	rlf	??___ftdiv+1,w
 16660  0C28  0D36               	rlf	??___ftdiv+2,w
 16661  0C29  00B7               	movwf	??___ftdiv+3
 16662  0C2A  0837               	movf	??___ftdiv+3,w
 16663  0C2B  00BD               	movwf	___ftdiv@sign
 16664  0C2C  08BD               	movf	___ftdiv@sign,f
 16665  0C2D  1D03               	skipz
 16666  0C2E  2C36               	goto	l5651
 16667  0C2F  3000               	movlw	0
 16668  0C30  00AE               	movwf	?___ftdiv
 16669  0C31  3000               	movlw	0
 16670  0C32  00AF               	movwf	?___ftdiv+1
 16671  0C33  3000               	movlw	0
 16672  0C34  00B0               	movwf	?___ftdiv+2
 16673  0C35  0008               	return
 16674  0C36                     l5651:	
 16675  0C36  3000               	movlw	0
 16676  0C37  00B9               	movwf	___ftdiv@f3
 16677  0C38  3000               	movlw	0
 16678  0C39  00BA               	movwf	___ftdiv@f3+1
 16679  0C3A  3000               	movlw	0
 16680  0C3B  00BB               	movwf	___ftdiv@f3+2
 16681  0C3C  3089               	movlw	137
 16682  0C3D  073D               	addwf	___ftdiv@sign,w
 16683  0C3E  00B4               	movwf	??___ftdiv
 16684  0C3F  0834               	movf	??___ftdiv,w
 16685  0C40  02BC               	subwf	___ftdiv@exp,f
 16686  0C41  0831               	movf	___ftdiv@f1,w
 16687  0C42  00B4               	movwf	??___ftdiv
 16688  0C43  0832               	movf	___ftdiv@f1+1,w
 16689  0C44  00B5               	movwf	??___ftdiv+1
 16690  0C45  0833               	movf	___ftdiv@f1+2,w
 16691  0C46  00B6               	movwf	??___ftdiv+2
 16692  0C47  3010               	movlw	16
 16693  0C48                     u3895:	
 16694  0C48  36B6               	lsrf	??___ftdiv+2,f
 16695  0C49  0CB5               	rrf	??___ftdiv+1,f
 16696  0C4A  0CB4               	rrf	??___ftdiv,f
 16697  0C4B  0B89               	decfsz	9,f
 16698  0C4C  2C48               	goto	u3895
 16699  0C4D  0834               	movf	??___ftdiv,w
 16700  0C4E  00B7               	movwf	??___ftdiv+3
 16701  0C4F  0837               	movf	??___ftdiv+3,w
 16702  0C50  00BD               	movwf	___ftdiv@sign
 16703  0C51  082E               	movf	___ftdiv@f2,w
 16704  0C52  00B4               	movwf	??___ftdiv
 16705  0C53  082F               	movf	___ftdiv@f2+1,w
 16706  0C54  00B5               	movwf	??___ftdiv+1
 16707  0C55  0830               	movf	___ftdiv@f2+2,w
 16708  0C56  00B6               	movwf	??___ftdiv+2
 16709  0C57  3010               	movlw	16
 16710  0C58                     u3905:	
 16711  0C58  36B6               	lsrf	??___ftdiv+2,f
 16712  0C59  0CB5               	rrf	??___ftdiv+1,f
 16713  0C5A  0CB4               	rrf	??___ftdiv,f
 16714  0C5B  0B89               	decfsz	9,f
 16715  0C5C  2C58               	goto	u3905
 16716  0C5D  0834               	movf	??___ftdiv,w
 16717  0C5E  00B7               	movwf	??___ftdiv+3
 16718  0C5F  0837               	movf	??___ftdiv+3,w
 16719  0C60  06BD               	xorwf	___ftdiv@sign,f
 16720  0C61  3080               	movlw	128
 16721  0C62  00B4               	movwf	??___ftdiv
 16722  0C63  0834               	movf	??___ftdiv,w
 16723  0C64  05BD               	andwf	___ftdiv@sign,f
 16724  0C65  17B2               	bsf	___ftdiv@f1+1,7
 16725  0C66  30FF               	movlw	255
 16726  0C67  05B1               	andwf	___ftdiv@f1,f
 16727  0C68  30FF               	movlw	255
 16728  0C69  05B2               	andwf	___ftdiv@f1+1,f
 16729  0C6A  3000               	movlw	0
 16730  0C6B  05B3               	andwf	___ftdiv@f1+2,f
 16731  0C6C  17AF               	bsf	___ftdiv@f2+1,7
 16732  0C6D  30FF               	movlw	255
 16733  0C6E  05AE               	andwf	___ftdiv@f2,f
 16734  0C6F  30FF               	movlw	255
 16735  0C70  05AF               	andwf	___ftdiv@f2+1,f
 16736  0C71  3000               	movlw	0
 16737  0C72  05B0               	andwf	___ftdiv@f2+2,f
 16738  0C73  3018               	movlw	24
 16739  0C74  00B4               	movwf	??___ftdiv
 16740  0C75  0834               	movf	??___ftdiv,w
 16741  0C76  00B8               	movwf	___ftdiv@cntr
 16742  0C77                     l5665:	
 16743  0C77  3001               	movlw	1
 16744  0C78                     u3915:	
 16745  0C78  35B9               	lslf	___ftdiv@f3,f
 16746  0C79  0DBA               	rlf	___ftdiv@f3+1,f
 16747  0C7A  0DBB               	rlf	___ftdiv@f3+2,f
 16748  0C7B  0B89               	decfsz	9,f
 16749  0C7C  2C78               	goto	u3915
 16750  0C7D  0830               	movf	___ftdiv@f2+2,w
 16751  0C7E  0233               	subwf	___ftdiv@f1+2,w
 16752  0C7F  1D03               	skipz
 16753  0C80  2C87               	goto	u3925
 16754  0C81  082F               	movf	___ftdiv@f2+1,w
 16755  0C82  0232               	subwf	___ftdiv@f1+1,w
 16756  0C83  1D03               	skipz
 16757  0C84  2C87               	goto	u3925
 16758  0C85  082E               	movf	___ftdiv@f2,w
 16759  0C86  0231               	subwf	___ftdiv@f1,w
 16760  0C87                     u3925:	
 16761  0C87  1C03               	skipc
 16762  0C88  2C90               	goto	l5673
 16763  0C89  082E               	movf	___ftdiv@f2,w
 16764  0C8A  02B1               	subwf	___ftdiv@f1,f
 16765  0C8B  082F               	movf	___ftdiv@f2+1,w
 16766  0C8C  3BB2               	subwfb	___ftdiv@f1+1,f
 16767  0C8D  0830               	movf	___ftdiv@f2+2,w
 16768  0C8E  3BB3               	subwfb	___ftdiv@f1+2,f
 16769  0C8F  1439               	bsf	___ftdiv@f3,0
 16770  0C90                     l5673:	
 16771  0C90  3001               	movlw	1
 16772  0C91                     u3935:	
 16773  0C91  35B1               	lslf	___ftdiv@f1,f
 16774  0C92  0DB2               	rlf	___ftdiv@f1+1,f
 16775  0C93  0DB3               	rlf	___ftdiv@f1+2,f
 16776  0C94  0B89               	decfsz	9,f
 16777  0C95  2C91               	goto	u3935
 16778  0C96  3001               	movlw	1
 16779  0C97  02B8               	subwf	___ftdiv@cntr,f
 16780  0C98  1D03               	btfss	3,2
 16781  0C99  2C77               	goto	l5665
 16782  0C9A  0839               	movf	___ftdiv@f3,w
 16783  0C9B  00A0               	movwf	___ftpack@arg
 16784  0C9C  083A               	movf	___ftdiv@f3+1,w
 16785  0C9D  00A1               	movwf	___ftpack@arg+1
 16786  0C9E  083B               	movf	___ftdiv@f3+2,w
 16787  0C9F  00A2               	movwf	___ftpack@arg+2
 16788  0CA0  083C               	movf	___ftdiv@exp,w
 16789  0CA1  00B4               	movwf	??___ftdiv
 16790  0CA2  0834               	movf	??___ftdiv,w
 16791  0CA3  00A3               	movwf	___ftpack@exp
 16792  0CA4  083D               	movf	___ftdiv@sign,w
 16793  0CA5  00B5               	movwf	??___ftdiv+1
 16794  0CA6  0835               	movf	??___ftdiv+1,w
 16795  0CA7  00A4               	movwf	___ftpack@sign
 16796  0CA8  3193  23D0         	fcall	___ftpack
 16797  0CAA  0020               	movlb	0	; select bank0
 16798  0CAB  0820               	movf	?___ftpack,w
 16799  0CAC  00AE               	movwf	?___ftdiv
 16800  0CAD  0821               	movf	?___ftpack+1,w
 16801  0CAE  00AF               	movwf	?___ftdiv+1
 16802  0CAF  0822               	movf	?___ftpack+2,w
 16803  0CB0  00B0               	movwf	?___ftdiv+2
 16804  0CB1  0008               	return
 16805  0CB2                     __end_of___ftdiv:	
 16806                           
 16807                           	psect	text101
 16808  1B8E                     __ptext101:	
 16809 ;; *************** function ___awtoft *****************
 16810 ;; Defined at:
 16811 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16812 ;; Parameters:    Size  Location     Type
 16813 ;;  c               2    8[BANK0 ] int 
 16814 ;; Auto vars:     Size  Location     Type
 16815 ;;  sign            1   13[BANK0 ] unsigned char 
 16816 ;; Return value:  Size  Location     Type
 16817 ;;                  3    8[BANK0 ] float 
 16818 ;; Registers used:
 16819 ;;		wreg, status,2, status,0, pclath, cstack
 16820 ;; Tracked objects:
 16821 ;;		On entry : 0/0
 16822 ;;		On exit  : 0/0
 16823 ;;		Unchanged: 0/0
 16824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16825 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16828 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;Total ram usage:        6 bytes
 16830 ;; Hardware stack levels used:    1
 16831 ;; Hardware stack levels required when called:    5
 16832 ;; This function calls:
 16833 ;;		___ftpack
 16834 ;; This function is called by:
 16835 ;;		_getPercentValue
 16836 ;;		_setPercentValue
 16837 ;; This function uses a non-reentrant model
 16838 ;;
 16839                           
 16840                           
 16841                           ;psect for function ___awtoft
 16842  1B8E                     ___awtoft:	
 16843                           
 16844                           ;incstack = 0
 16845                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16846  1B8E  0020               	movlb	0	; select bank0
 16847  1B8F  01AD               	clrf	___awtoft@sign
 16848  1B90  1FA9               	btfss	___awtoft@c+1,7
 16849  1B91  2B99               	goto	l5563
 16850  1B92  09A8               	comf	___awtoft@c,f
 16851  1B93  09A9               	comf	___awtoft@c+1,f
 16852  1B94  0AA8               	incf	___awtoft@c,f
 16853  1B95  1903               	skipnz
 16854  1B96  0AA9               	incf	___awtoft@c+1,f
 16855  1B97  01AD               	clrf	___awtoft@sign
 16856  1B98  0AAD               	incf	___awtoft@sign,f
 16857  1B99                     l5563:	
 16858  1B99  0828               	movf	___awtoft@c,w
 16859  1B9A  00A0               	movwf	___ftpack@arg
 16860  1B9B  0829               	movf	___awtoft@c+1,w
 16861  1B9C  00A1               	movwf	___ftpack@arg+1
 16862  1B9D  01A2               	clrf	___ftpack@arg+2
 16863  1B9E  308E               	movlw	142
 16864  1B9F  00AB               	movwf	??___awtoft
 16865  1BA0  082B               	movf	??___awtoft,w
 16866  1BA1  00A3               	movwf	___ftpack@exp
 16867  1BA2  082D               	movf	___awtoft@sign,w
 16868  1BA3  00AC               	movwf	??___awtoft+1
 16869  1BA4  082C               	movf	??___awtoft+1,w
 16870  1BA5  00A4               	movwf	___ftpack@sign
 16871  1BA6  3193  23D0         	fcall	___ftpack
 16872  1BA8  0020               	movlb	0	; select bank0
 16873  1BA9  0820               	movf	?___ftpack,w
 16874  1BAA  00A8               	movwf	?___awtoft
 16875  1BAB  0821               	movf	?___ftpack+1,w
 16876  1BAC  00A9               	movwf	?___awtoft+1
 16877  1BAD  0822               	movf	?___ftpack+2,w
 16878  1BAE  00AA               	movwf	?___awtoft+2
 16879  1BAF  0008               	return
 16880  1BB0                     __end_of___awtoft:	
 16881                           
 16882                           	psect	text102
 16883  13D0                     __ptext102:	
 16884 ;; *************** function ___ftpack *****************
 16885 ;; Defined at:
 16886 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16887 ;; Parameters:    Size  Location     Type
 16888 ;;  arg             3    0[BANK0 ] unsigned um
 16889 ;;  exp             1    3[BANK0 ] unsigned char 
 16890 ;;  sign            1    4[BANK0 ] unsigned char 
 16891 ;; Auto vars:     Size  Location     Type
 16892 ;;		None
 16893 ;; Return value:  Size  Location     Type
 16894 ;;                  3    0[BANK0 ] float 
 16895 ;; Registers used:
 16896 ;;		wreg, status,2, status,0
 16897 ;; Tracked objects:
 16898 ;;		On entry : 0/0
 16899 ;;		On exit  : 0/0
 16900 ;;		Unchanged: 0/0
 16901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16902 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16906 ;;Total ram usage:        8 bytes
 16907 ;; Hardware stack levels used:    1
 16908 ;; Hardware stack levels required when called:    4
 16909 ;; This function calls:
 16910 ;;		Nothing
 16911 ;; This function is called by:
 16912 ;;		___awtoft
 16913 ;;		___ftadd
 16914 ;;		___ftdiv
 16915 ;;		___ftmul
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           
 16920                           ;psect for function ___ftpack
 16921  13D0                     ___ftpack:	
 16922                           
 16923                           ;incstack = 0
 16924                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16925  13D0  0020               	movlb	0	; select bank0
 16926  13D1  0823               	movf	___ftpack@exp,w
 16927  13D2  1903               	btfsc	3,2
 16928  13D3  2BD9               	goto	l5529
 16929  13D4  0822               	movf	___ftpack@arg+2,w
 16930  13D5  0421               	iorwf	___ftpack@arg+1,w
 16931  13D6  0420               	iorwf	___ftpack@arg,w
 16932  13D7  1D03               	skipz
 16933  13D8  2BEA               	goto	l5535
 16934  13D9                     l5529:	
 16935  13D9  3000               	movlw	0
 16936  13DA  00A0               	movwf	?___ftpack
 16937  13DB  3000               	movlw	0
 16938  13DC  00A1               	movwf	?___ftpack+1
 16939  13DD  3000               	movlw	0
 16940  13DE  00A2               	movwf	?___ftpack+2
 16941  13DF  0008               	return
 16942  13E0                     l5533:	
 16943  13E0  3001               	movlw	1
 16944  13E1  00A5               	movwf	??___ftpack
 16945  13E2  0825               	movf	??___ftpack,w
 16946  13E3  07A3               	addwf	___ftpack@exp,f
 16947  13E4  3001               	movlw	1
 16948  13E5                     u3545:	
 16949  13E5  36A2               	lsrf	___ftpack@arg+2,f
 16950  13E6  0CA1               	rrf	___ftpack@arg+1,f
 16951  13E7  0CA0               	rrf	___ftpack@arg,f
 16952  13E8  0B89               	decfsz	9,f
 16953  13E9  2BE5               	goto	u3545
 16954  13EA                     l5535:	
 16955  13EA  30FE               	movlw	254
 16956  13EB  0522               	andwf	___ftpack@arg+2,w
 16957  13EC  1903               	btfsc	3,2
 16958  13ED  2C03               	goto	l3033
 16959  13EE  2BE0               	goto	l5533
 16960  13EF                     l5537:	
 16961  13EF  3001               	movlw	1
 16962  13F0  00A5               	movwf	??___ftpack
 16963  13F1  0825               	movf	??___ftpack,w
 16964  13F2  07A3               	addwf	___ftpack@exp,f
 16965  13F3  3001               	movlw	1
 16966  13F4  07A0               	addwf	___ftpack@arg,f
 16967  13F5  3000               	movlw	0
 16968  13F6  1803               	skipnc
 16969  13F7  3001               	movlw	1
 16970  13F8  07A1               	addwf	___ftpack@arg+1,f
 16971  13F9  3000               	movlw	0
 16972  13FA  1803               	skipnc
 16973  13FB  3001               	movlw	1
 16974  13FC  07A2               	addwf	___ftpack@arg+2,f
 16975  13FD  3001               	movlw	1
 16976  13FE                     u3565:	
 16977  13FE  36A2               	lsrf	___ftpack@arg+2,f
 16978  13FF  0CA1               	rrf	___ftpack@arg+1,f
 16979  1400  0CA0               	rrf	___ftpack@arg,f
 16980  1401  0B89               	decfsz	9,f
 16981  1402  2BFE               	goto	u3565
 16982  1403                     l3033:	
 16983  1403  30FF               	movlw	255
 16984  1404  0522               	andwf	___ftpack@arg+2,w
 16985  1405  1903               	btfsc	3,2
 16986  1406  2C10               	goto	l5545
 16987  1407  2BEF               	goto	l5537
 16988  1408                     l5543:	
 16989  1408  3001               	movlw	1
 16990  1409  02A3               	subwf	___ftpack@exp,f
 16991  140A  3001               	movlw	1
 16992  140B                     u3585:	
 16993  140B  35A0               	lslf	___ftpack@arg,f
 16994  140C  0DA1               	rlf	___ftpack@arg+1,f
 16995  140D  0DA2               	rlf	___ftpack@arg+2,f
 16996  140E  0B89               	decfsz	9,f
 16997  140F  2C0B               	goto	u3585
 16998  1410                     l5545:	
 16999  1410  1FA1               	btfss	___ftpack@arg+1,7
 17000  1411  2C08               	goto	l5543
 17001  1412  1823               	btfsc	___ftpack@exp,0
 17002  1413  2C1A               	goto	l3039
 17003  1414  30FF               	movlw	255
 17004  1415  05A0               	andwf	___ftpack@arg,f
 17005  1416  307F               	movlw	127
 17006  1417  05A1               	andwf	___ftpack@arg+1,f
 17007  1418  30FF               	movlw	255
 17008  1419  05A2               	andwf	___ftpack@arg+2,f
 17009  141A                     l3039:	
 17010  141A  1003               	clrc
 17011  141B  0CA3               	rrf	___ftpack@exp,f
 17012  141C  0823               	movf	___ftpack@exp,w
 17013  141D  00A5               	movwf	??___ftpack
 17014  141E  01A6               	clrf	??___ftpack+1
 17015  141F  01A7               	clrf	??___ftpack+2
 17016  1420  3010               	movlw	16
 17017  1421                     u3615:	
 17018  1421  35A5               	lslf	??___ftpack,f
 17019  1422  0DA6               	rlf	??___ftpack+1,f
 17020  1423  0DA7               	rlf	??___ftpack+2,f
 17021  1424  0B89               	decfsz	9,f
 17022  1425  2C21               	goto	u3615
 17023  1426  0825               	movf	??___ftpack,w
 17024  1427  04A0               	iorwf	___ftpack@arg,f
 17025  1428  0826               	movf	??___ftpack+1,w
 17026  1429  04A1               	iorwf	___ftpack@arg+1,f
 17027  142A  0827               	movf	??___ftpack+2,w
 17028  142B  04A2               	iorwf	___ftpack@arg+2,f
 17029  142C  0824               	movf	___ftpack@sign,w
 17030  142D  1903               	btfsc	3,2
 17031  142E  0008               	return
 17032  142F  17A2               	bsf	___ftpack@arg+2,7
 17033  1430  0008               	return
 17034  1431                     __end_of___ftpack:	
 17035                           
 17036                           	psect	text103
 17037  195A                     __ptext103:	
 17038 ;; *************** function _setRFSW_Status *****************
 17039 ;; Defined at:
 17040 ;;		line 424 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17041 ;; Parameters:    Size  Location     Type
 17042 ;;  sw              1    wreg     unsigned char 
 17043 ;;  command         1    2[BANK0 ] unsigned char 
 17044 ;; Auto vars:     Size  Location     Type
 17045 ;;  sw              1    3[BANK0 ] unsigned char 
 17046 ;; Return value:  Size  Location     Type
 17047 ;;		None               void
 17048 ;; Registers used:
 17049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17050 ;; Tracked objects:
 17051 ;;		On entry : 0/0
 17052 ;;		On exit  : 0/0
 17053 ;;		Unchanged: 0/0
 17054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17055 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17059 ;;Total ram usage:        2 bytes
 17060 ;; Hardware stack levels used:    1
 17061 ;; Hardware stack levels required when called:    5
 17062 ;; This function calls:
 17063 ;;		_RfSWPointSelect
 17064 ;; This function is called by:
 17065 ;;		_DlyOff_Main
 17066 ;;		_setDimmerLights_ERROR
 17067 ;;		_setControl_Lights_Table
 17068 ;;		_Sw_DimmerOnFunc
 17069 ;;		_Sw_DimmerAdjFunc
 17070 ;; This function uses a non-reentrant model
 17071 ;;
 17072                           
 17073                           
 17074                           ;psect for function _setRFSW_Status
 17075  195A                     _setRFSW_Status:	
 17076                           
 17077                           ;incstack = 0
 17078                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17079                           ;setRFSW_Status@sw stored from wreg
 17080  195A  0020               	movlb	0	; select bank0
 17081  195B  00A3               	movwf	setRFSW_Status@sw
 17082                           
 17083                           ;RF_Control_B1.c: 426: RfSWPointSelect(sw);
 17084  195C  0823               	movf	setRFSW_Status@sw,w
 17085  195D  3198  20C1         	fcall	_RfSWPointSelect
 17086                           
 17087                           ;RF_Control_B1.c: 427: RFSW->Status=command;
 17088  195F  0021               	movlb	1	; select bank1
 17089  1960  083C               	movf	_RFSW^(0+128),w
 17090  1961  0086               	movwf	6
 17091  1962  0187               	clrf	7
 17092  1963  0020               	movlb	0	; select bank0
 17093  1964  0822               	movf	setRFSW_Status@command,w
 17094  1965  1001               	bcf	1,0
 17095  1966  1D03               	skipz
 17096  1967  1401               	bsf	1,0
 17097  1968  0008               	return
 17098  1969                     __end_of_setRFSW_Status:	
 17099                           
 17100                           	psect	text104
 17101  18C1                     __ptext104:	
 17102 ;; *************** function _RfSWPointSelect *****************
 17103 ;; Defined at:
 17104 ;;		line 346 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 17105 ;; Parameters:    Size  Location     Type
 17106 ;;  sw              1    wreg     unsigned char 
 17107 ;; Auto vars:     Size  Location     Type
 17108 ;;  sw              1    1[BANK0 ] unsigned char 
 17109 ;; Return value:  Size  Location     Type
 17110 ;;		None               void
 17111 ;; Registers used:
 17112 ;;		wreg
 17113 ;; Tracked objects:
 17114 ;;		On entry : 0/0
 17115 ;;		On exit  : 0/0
 17116 ;;		Unchanged: 0/0
 17117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17122 ;;Total ram usage:        2 bytes
 17123 ;; Hardware stack levels used:    1
 17124 ;; Hardware stack levels required when called:    4
 17125 ;; This function calls:
 17126 ;;		Nothing
 17127 ;; This function is called by:
 17128 ;;		_setRFSW_Control
 17129 ;;		_setRFSW_AdjControl
 17130 ;;		_setRFSW_Status
 17131 ;; This function uses a non-reentrant model
 17132 ;;
 17133                           
 17134                           
 17135                           ;psect for function _RfSWPointSelect
 17136  18C1                     _RfSWPointSelect:	
 17137                           
 17138                           ;incstack = 0
 17139                           ; Regs used in _RfSWPointSelect: [wreg]
 17140                           ;RfSWPointSelect@sw stored from wreg
 17141  18C1  0020               	movlb	0	; select bank0
 17142  18C2  00A1               	movwf	RfSWPointSelect@sw
 17143                           
 17144                           ;RF_Control_B1.c: 349: if(sw == 1)
 17145  18C3  0821               	movf	RfSWPointSelect@sw,w
 17146  18C4  3A01               	xorlw	1
 17147  18C5  1D03               	skipz
 17148  18C6  0008               	return
 17149                           
 17150                           ;RF_Control_B1.c: 350: {
 17151                           ;RF_Control_B1.c: 351: RFSW=&RFSW1;
 17152  18C7  30EA               	movlw	_RFSW1& (0+255)
 17153  18C8  00A0               	movwf	??_RfSWPointSelect
 17154  18C9  0820               	movf	??_RfSWPointSelect,w
 17155  18CA  0021               	movlb	1	; select bank1
 17156  18CB  00BC               	movwf	_RFSW^(0+128)
 17157  18CC  0008               	return
 17158  18CD                     __end_of_RfSWPointSelect:	
 17159                           
 17160                           	psect	text105
 17161  19A7                     __ptext105:	
 17162 ;; *************** function _setDimmerLights_Trigger *****************
 17163 ;; Defined at:
 17164 ;;		line 436 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17165 ;; Parameters:    Size  Location     Type
 17166 ;;  lights          1    wreg     unsigned char 
 17167 ;;  command         1    2[BANK0 ] unsigned char 
 17168 ;; Auto vars:     Size  Location     Type
 17169 ;;  lights          1    3[BANK0 ] unsigned char 
 17170 ;; Return value:  Size  Location     Type
 17171 ;;		None               void
 17172 ;; Registers used:
 17173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17174 ;; Tracked objects:
 17175 ;;		On entry : 0/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17179 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17183 ;;Total ram usage:        2 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; Hardware stack levels required when called:    5
 17186 ;; This function calls:
 17187 ;;		_DimmerLightsPointSelect
 17188 ;; This function is called by:
 17189 ;;		_DlyOff_Main
 17190 ;;		_setRFSW_Control
 17191 ;;		_Sw_DimmerOnFunc
 17192 ;;		_Sw_DimmerOffFunc
 17193 ;; This function uses a non-reentrant model
 17194 ;;
 17195                           
 17196                           
 17197                           ;psect for function _setDimmerLights_Trigger
 17198  19A7                     _setDimmerLights_Trigger:	
 17199                           
 17200                           ;incstack = 0
 17201                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17202                           ;setDimmerLights_Trigger@lights stored from wreg
 17203  19A7  0020               	movlb	0	; select bank0
 17204  19A8  00A3               	movwf	setDimmerLights_Trigger@lights
 17205                           
 17206                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 17207  19A9  0823               	movf	setDimmerLights_Trigger@lights,w
 17208  19AA  31A7  27EA         	fcall	_DimmerLightsPointSelect
 17209                           
 17210                           ;Dimmer_B1.c: 439: DimmerLights->Trigger=command;
 17211  19AC  0020               	movlb	0	; select bank0
 17212  19AD  086C               	movf	_DimmerLights,w
 17213  19AE  3E09               	addlw	9
 17214  19AF  0086               	movwf	6
 17215  19B0  3001               	movlw	1	; select bank2/3
 17216  19B1  0087               	movwf	7
 17217  19B2  0822               	movf	setDimmerLights_Trigger@command,w
 17218  19B3  1081               	bcf	1,1
 17219  19B4  1D03               	skipz
 17220  19B5  1481               	bsf	1,1
 17221  19B6  0008               	return
 17222  19B7                     __end_of_setDimmerLights_Trigger:	
 17223                           
 17224                           	psect	text106
 17225  1997                     __ptext106:	
 17226 ;; *************** function _setDimmerLights_Switch *****************
 17227 ;; Defined at:
 17228 ;;		line 426 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17229 ;; Parameters:    Size  Location     Type
 17230 ;;  lights          1    wreg     unsigned char 
 17231 ;;  command         1    2[BANK0 ] unsigned char 
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;  lights          1    3[BANK0 ] unsigned char 
 17234 ;; Return value:  Size  Location     Type
 17235 ;;		None               void
 17236 ;; Registers used:
 17237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17238 ;; Tracked objects:
 17239 ;;		On entry : 0/0
 17240 ;;		On exit  : 0/0
 17241 ;;		Unchanged: 0/0
 17242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17243 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;Total ram usage:        2 bytes
 17248 ;; Hardware stack levels used:    1
 17249 ;; Hardware stack levels required when called:    5
 17250 ;; This function calls:
 17251 ;;		_DimmerLightsPointSelect
 17252 ;; This function is called by:
 17253 ;;		_DlyOff_Main
 17254 ;;		_setRFSW_Control
 17255 ;;		_Sw_DimmerOnFunc
 17256 ;;		_Sw_DimmerOffFunc
 17257 ;; This function uses a non-reentrant model
 17258 ;;
 17259                           
 17260                           
 17261                           ;psect for function _setDimmerLights_Switch
 17262  1997                     _setDimmerLights_Switch:	
 17263                           
 17264                           ;incstack = 0
 17265                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 17266                           ;setDimmerLights_Switch@lights stored from wreg
 17267  1997  0020               	movlb	0	; select bank0
 17268  1998  00A3               	movwf	setDimmerLights_Switch@lights
 17269                           
 17270                           ;Dimmer_B1.c: 428: DimmerLightsPointSelect(lights);
 17271  1999  0823               	movf	setDimmerLights_Switch@lights,w
 17272  199A  31A7  27EA         	fcall	_DimmerLightsPointSelect
 17273                           
 17274                           ;Dimmer_B1.c: 429: DimmerLights->Switch=command;
 17275  199C  0020               	movlb	0	; select bank0
 17276  199D  086C               	movf	_DimmerLights,w
 17277  199E  3E09               	addlw	9
 17278  199F  0086               	movwf	6
 17279  19A0  3001               	movlw	1	; select bank2/3
 17280  19A1  0087               	movwf	7
 17281  19A2  0822               	movf	setDimmerLights_Switch@command,w
 17282  19A3  1001               	bcf	1,0
 17283  19A4  1D03               	skipz
 17284  19A5  1401               	bsf	1,0
 17285  19A6  0008               	return
 17286  19A7                     __end_of_setDimmerLights_Switch:	
 17287                           
 17288                           	psect	text107
 17289  27EA                     __ptext107:	
 17290 ;; *************** function _DimmerLightsPointSelect *****************
 17291 ;; Defined at:
 17292 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Dimmer_B1.c"
 17293 ;; Parameters:    Size  Location     Type
 17294 ;;  lights          1    wreg     unsigned char 
 17295 ;; Auto vars:     Size  Location     Type
 17296 ;;  lights          1    1[BANK0 ] unsigned char 
 17297 ;; Return value:  Size  Location     Type
 17298 ;;		None               void
 17299 ;; Registers used:
 17300 ;;		wreg
 17301 ;; Tracked objects:
 17302 ;;		On entry : 0/0
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17309 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17310 ;;Total ram usage:        2 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    4
 17313 ;; This function calls:
 17314 ;;		Nothing
 17315 ;; This function is called by:
 17316 ;;		_setDimmerLights_Initialization
 17317 ;;		_setDimmerLights_Main
 17318 ;;		_setDimmerLights_ERROR
 17319 ;;		_setDimmerLights_TriggerERROR
 17320 ;;		_setDimmerLights
 17321 ;;		_setDimmerLights_Adj
 17322 ;;		_setDimmerLights_AdjRF
 17323 ;;		_setDimmerLights_Switch
 17324 ;;		_setDimmerLights_AdjGo
 17325 ;;		_setDimmerLights_Trigger
 17326 ;;		_setDimmerLights_TriggerAdj
 17327 ;;		_setDimmerLights_Clear
 17328 ;;		_setDimmerLights_GO
 17329 ;;		_setDimmerLights_MaxmumValue
 17330 ;; This function uses a non-reentrant model
 17331 ;;
 17332                           
 17333                           
 17334                           ;psect for function _DimmerLightsPointSelect
 17335  27EA                     _DimmerLightsPointSelect:	
 17336                           
 17337                           ;incstack = 0
 17338                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 17339                           ;DimmerLightsPointSelect@lights stored from wreg
 17340  27EA  0020               	movlb	0	; select bank0
 17341  27EB  00A1               	movwf	DimmerLightsPointSelect@lights
 17342                           
 17343                           ;Dimmer_B1.c: 10: if(lights == 1)
 17344  27EC  0821               	movf	DimmerLightsPointSelect@lights,w
 17345  27ED  3A01               	xorlw	1
 17346  27EE  1D03               	skipz
 17347  27EF  0008               	return
 17348                           
 17349                           ;Dimmer_B1.c: 11: {
 17350                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 17351  27F0  3030               	movlw	_DimmerLights1& (0+255)
 17352  27F1  00A0               	movwf	??_DimmerLightsPointSelect
 17353  27F2  0820               	movf	??_DimmerLightsPointSelect,w
 17354  27F3  00EC               	movwf	_DimmerLights
 17355  27F4  0008               	return
 17356  27F5                     __end_of_DimmerLightsPointSelect:	
 17357                           
 17358                           	psect	text108
 17359  1789                     __ptext108:	
 17360 ;; *************** function _setBuz *****************
 17361 ;; Defined at:
 17362 ;;		line 22 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 17363 ;; Parameters:    Size  Location     Type
 17364 ;;  count           1    wreg     unsigned char 
 17365 ;;  time            2    6[BANK0 ] int 
 17366 ;; Auto vars:     Size  Location     Type
 17367 ;;  count           1    9[BANK0 ] unsigned char 
 17368 ;; Return value:  Size  Location     Type
 17369 ;;		None               void
 17370 ;; Registers used:
 17371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17372 ;; Tracked objects:
 17373 ;;		On entry : 0/0
 17374 ;;		On exit  : 0/0
 17375 ;;		Unchanged: 0/0
 17376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17377 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17380 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;Total ram usage:        4 bytes
 17382 ;; Hardware stack levels used:    1
 17383 ;; Hardware stack levels required when called:    5
 17384 ;; This function calls:
 17385 ;;		___wmul
 17386 ;; This function is called by:
 17387 ;;		_DlyOff_Main
 17388 ;;		_setDimmerLights_Main
 17389 ;;		_DimmerLights_Exceptions
 17390 ;;		_MainT
 17391 ;;		_setLog_Code
 17392 ;;		_setControl_Lights_Table
 17393 ;;		_setRFSW_Control
 17394 ;;		_setSw_Main
 17395 ;;		_Sw_DimmerOnFunc
 17396 ;; This function uses a non-reentrant model
 17397 ;;
 17398                           
 17399                           
 17400                           ;psect for function _setBuz
 17401  1789                     _setBuz:	
 17402                           
 17403                           ;incstack = 0
 17404                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17405                           ;setBuz@count stored from wreg
 17406  1789  0020               	movlb	0	; select bank0
 17407  178A  00A9               	movwf	setBuz@count
 17408                           
 17409                           ;Buzzer_B1.c: 24: time*=20;
 17410  178B  3014               	movlw	20
 17411  178C  00A0               	movwf	___wmul@multiplier
 17412  178D  3000               	movlw	0
 17413  178E  00A1               	movwf	___wmul@multiplier+1
 17414  178F  0827               	movf	setBuz@time+1,w
 17415  1790  01A3               	clrf	___wmul@multiplicand+1
 17416  1791  07A3               	addwf	___wmul@multiplicand+1,f
 17417  1792  0826               	movf	setBuz@time,w
 17418  1793  01A2               	clrf	___wmul@multiplicand
 17419  1794  07A2               	addwf	___wmul@multiplicand,f
 17420  1795  319B  2331  3197   	fcall	___wmul
 17421  1798  0020               	movlb	0	; select bank0
 17422  1799  0821               	movf	?___wmul+1,w
 17423  179A  01A7               	clrf	setBuz@time+1
 17424  179B  07A7               	addwf	setBuz@time+1,f
 17425  179C  0820               	movf	?___wmul,w
 17426  179D  01A6               	clrf	setBuz@time
 17427  179E  07A6               	addwf	setBuz@time,f
 17428                           
 17429                           ;Buzzer_B1.c: 25: if(Buz->Enable)
 17430  179F  0878               	movf	_Buz,w
 17431  17A0  0086               	movwf	6
 17432  17A1  3001               	movlw	1	; select bank2/3
 17433  17A2  0087               	movwf	7
 17434  17A3  1C01               	btfss	1,0
 17435  17A4  0008               	return
 17436                           
 17437                           ;Buzzer_B1.c: 26: {
 17438                           ;Buzzer_B1.c: 27: if(!Buz->GO)
 17439  17A5  0878               	movf	_Buz,w
 17440  17A6  0086               	movwf	6
 17441  17A7  3001               	movlw	1	; select bank2/3
 17442  17A8  0087               	movwf	7
 17443  17A9  1881               	btfsc	1,1
 17444  17AA  2FC4               	goto	l7813
 17445                           
 17446                           ;Buzzer_B1.c: 28: {
 17447                           ;Buzzer_B1.c: 29: Buz->GO=1;
 17448  17AB  0878               	movf	_Buz,w
 17449  17AC  0086               	movwf	6
 17450  17AD  3001               	movlw	1	; select bank2/3
 17451  17AE  0087               	movwf	7
 17452  17AF  1481               	bsf	1,1
 17453                           
 17454                           ;Buzzer_B1.c: 30: Buz->Count=count;
 17455  17B0  0829               	movf	setBuz@count,w
 17456  17B1  00A8               	movwf	??_setBuz
 17457  17B2  0878               	movf	_Buz,w
 17458  17B3  3E03               	addlw	3
 17459  17B4  0086               	movwf	6
 17460  17B5  3001               	movlw	1	; select bank2/3
 17461  17B6  0087               	movwf	7
 17462  17B7  0828               	movf	??_setBuz,w
 17463  17B8  0081               	movwf	1
 17464                           
 17465                           ;Buzzer_B1.c: 31: Buz->TimeValue=time;
 17466  17B9  0878               	movf	_Buz,w
 17467  17BA  3E06               	addlw	6
 17468  17BB  0086               	movwf	6
 17469  17BC  3001               	movlw	1	; select bank2/3
 17470  17BD  0087               	movwf	7
 17471  17BE  0826               	movf	setBuz@time,w
 17472  17BF  3FC0               	movwi [0]fsr1
 17473  17C0  0827               	movf	setBuz@time+1,w
 17474  17C1  3FC1               	movwi [1]fsr1
 17475                           
 17476                           ;Buzzer_B1.c: 33: RB3=1;
 17477  17C2  158D               	bsf	13,3	;volatile
 17478                           
 17479                           ;Buzzer_B1.c: 34: }
 17480  17C3  0008               	return
 17481  17C4                     l7813:	
 17482                           
 17483                           ;Buzzer_B1.c: 35: else
 17484                           ;Buzzer_B1.c: 36: {
 17485                           ;Buzzer_B1.c: 37: if(!Buz->BufferStatus1)
 17486  17C4  0878               	movf	_Buz,w
 17487  17C5  0086               	movwf	6
 17488  17C6  3001               	movlw	1	; select bank2/3
 17489  17C7  0087               	movwf	7
 17490  17C8  1981               	btfsc	1,3
 17491  17C9  2FE2               	goto	l7817
 17492                           
 17493                           ;Buzzer_B1.c: 38: {
 17494                           ;Buzzer_B1.c: 39: Buz->BufferStatus1=1;
 17495  17CA  0878               	movf	_Buz,w
 17496  17CB  0086               	movwf	6
 17497  17CC  3001               	movlw	1	; select bank2/3
 17498  17CD  0087               	movwf	7
 17499  17CE  1581               	bsf	1,3
 17500                           
 17501                           ;Buzzer_B1.c: 40: Buz->CountBuffer1=count;
 17502  17CF  0829               	movf	setBuz@count,w
 17503  17D0  00A8               	movwf	??_setBuz
 17504  17D1  0878               	movf	_Buz,w
 17505  17D2  3E04               	addlw	4
 17506  17D3  0086               	movwf	6
 17507  17D4  3001               	movlw	1	; select bank2/3
 17508  17D5  0087               	movwf	7
 17509  17D6  0828               	movf	??_setBuz,w
 17510  17D7  0081               	movwf	1
 17511                           
 17512                           ;Buzzer_B1.c: 41: Buz->TimeValueBuffer1=time;
 17513  17D8  0878               	movf	_Buz,w
 17514  17D9  3E08               	addlw	8
 17515  17DA  0086               	movwf	6
 17516  17DB  3001               	movlw	1	; select bank2/3
 17517  17DC  0087               	movwf	7
 17518  17DD  0826               	movf	setBuz@time,w
 17519  17DE  3FC0               	movwi [0]fsr1
 17520  17DF  0827               	movf	setBuz@time+1,w
 17521  17E0  3FC1               	movwi [1]fsr1
 17522                           
 17523                           ;Buzzer_B1.c: 42: }
 17524  17E1  0008               	return
 17525  17E2                     l7817:	
 17526                           
 17527                           ;Buzzer_B1.c: 43: else if(!Buz->BufferStatus2)
 17528  17E2  0878               	movf	_Buz,w
 17529  17E3  0086               	movwf	6
 17530  17E4  3001               	movlw	1	; select bank2/3
 17531  17E5  0087               	movwf	7
 17532  17E6  1A01               	btfsc	1,4
 17533  17E7  0008               	return
 17534                           
 17535                           ;Buzzer_B1.c: 44: {
 17536                           ;Buzzer_B1.c: 45: Buz->BufferStatus2=1;
 17537  17E8  0878               	movf	_Buz,w
 17538  17E9  0086               	movwf	6
 17539  17EA  3001               	movlw	1	; select bank2/3
 17540  17EB  0087               	movwf	7
 17541  17EC  1601               	bsf	1,4
 17542                           
 17543                           ;Buzzer_B1.c: 46: Buz->CountBuffer2=count;
 17544  17ED  0829               	movf	setBuz@count,w
 17545  17EE  00A8               	movwf	??_setBuz
 17546  17EF  0878               	movf	_Buz,w
 17547  17F0  3E05               	addlw	5
 17548  17F1  0086               	movwf	6
 17549  17F2  3001               	movlw	1	; select bank2/3
 17550  17F3  0087               	movwf	7
 17551  17F4  0828               	movf	??_setBuz,w
 17552  17F5  0081               	movwf	1
 17553                           
 17554                           ;Buzzer_B1.c: 47: Buz->TimeValueBuffer2=time;
 17555  17F6  0878               	movf	_Buz,w
 17556  17F7  3E0A               	addlw	10
 17557  17F8  0086               	movwf	6
 17558  17F9  3001               	movlw	1	; select bank2/3
 17559  17FA  0087               	movwf	7
 17560  17FB  0826               	movf	setBuz@time,w
 17561  17FC  3FC0               	movwi [0]fsr1
 17562  17FD  0827               	movf	setBuz@time+1,w
 17563  17FE  3FC1               	movwi [1]fsr1
 17564  17FF  0008               	return
 17565  1800                     __end_of_setBuz:	
 17566                           
 17567                           	psect	text109
 17568  1B31                     __ptext109:	
 17569 ;; *************** function ___wmul *****************
 17570 ;; Defined at:
 17571 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 17572 ;; Parameters:    Size  Location     Type
 17573 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17574 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17575 ;; Auto vars:     Size  Location     Type
 17576 ;;  product         2    4[BANK0 ] unsigned int 
 17577 ;; Return value:  Size  Location     Type
 17578 ;;                  2    0[BANK0 ] unsigned int 
 17579 ;; Registers used:
 17580 ;;		wreg, status,2, status,0
 17581 ;; Tracked objects:
 17582 ;;		On entry : 0/0
 17583 ;;		On exit  : 0/0
 17584 ;;		Unchanged: 0/0
 17585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17589 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17590 ;;Total ram usage:        6 bytes
 17591 ;; Hardware stack levels used:    1
 17592 ;; Hardware stack levels required when called:    4
 17593 ;; This function calls:
 17594 ;;		Nothing
 17595 ;; This function is called by:
 17596 ;;		_setBuz
 17597 ;;		_Load_Main
 17598 ;; This function uses a non-reentrant model
 17599 ;;
 17600                           
 17601                           
 17602                           ;psect for function ___wmul
 17603  1B31                     ___wmul:	
 17604                           
 17605                           ;incstack = 0
 17606                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 17607  1B31  0020               	movlb	0	; select bank0
 17608  1B32  01A4               	clrf	___wmul@product
 17609  1B33  01A5               	clrf	___wmul@product+1
 17610  1B34                     l7793:	
 17611  1B34  1C20               	btfss	___wmul@multiplier,0
 17612  1B35  2B3A               	goto	l2872
 17613  1B36  0822               	movf	___wmul@multiplicand,w
 17614  1B37  07A4               	addwf	___wmul@product,f
 17615  1B38  0823               	movf	___wmul@multiplicand+1,w
 17616  1B39  3DA5               	addwfc	___wmul@product+1,f
 17617  1B3A                     l2872:	
 17618  1B3A  3001               	movlw	1
 17619  1B3B                     u7045:	
 17620  1B3B  35A2               	lslf	___wmul@multiplicand,f
 17621  1B3C  0DA3               	rlf	___wmul@multiplicand+1,f
 17622  1B3D  0B89               	decfsz	9,f
 17623  1B3E  2B3B               	goto	u7045
 17624  1B3F  3001               	movlw	1
 17625  1B40                     u7055:	
 17626  1B40  36A1               	lsrf	___wmul@multiplier+1,f
 17627  1B41  0CA0               	rrf	___wmul@multiplier,f
 17628  1B42  0B89               	decfsz	9,f
 17629  1B43  2B40               	goto	u7055
 17630  1B44  0821               	movf	___wmul@multiplier+1,w
 17631  1B45  0420               	iorwf	___wmul@multiplier,w
 17632  1B46  1D03               	skipz
 17633  1B47  2B34               	goto	l7793
 17634  1B48  0825               	movf	___wmul@product+1,w
 17635  1B49  01A1               	clrf	?___wmul+1
 17636  1B4A  07A1               	addwf	?___wmul+1,f
 17637  1B4B  0824               	movf	___wmul@product,w
 17638  1B4C  01A0               	clrf	?___wmul
 17639  1B4D  07A0               	addwf	?___wmul,f
 17640  1B4E  0008               	return
 17641  1B4F                     __end_of___wmul:	
 17642                           
 17643                           	psect	text110
 17644  2761                     __ptext110:	
 17645 ;; *************** function _DelayOff_Initialization *****************
 17646 ;; Defined at:
 17647 ;;		line 30 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17648 ;; Parameters:    Size  Location     Type
 17649 ;;		None
 17650 ;; Auto vars:     Size  Location     Type
 17651 ;;		None
 17652 ;; Return value:  Size  Location     Type
 17653 ;;		None               void
 17654 ;; Registers used:
 17655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17656 ;; Tracked objects:
 17657 ;;		On entry : 0/0
 17658 ;;		On exit  : 0/0
 17659 ;;		Unchanged: 0/0
 17660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17665 ;;Total ram usage:        0 bytes
 17666 ;; Hardware stack levels used:    1
 17667 ;; Hardware stack levels required when called:    6
 17668 ;; This function calls:
 17669 ;;		_DlyOff_Initialization
 17670 ;; This function is called by:
 17671 ;;		_main
 17672 ;; This function uses a non-reentrant model
 17673 ;;
 17674                           
 17675                           
 17676                           ;psect for function _DelayOff_Initialization
 17677  2761                     _DelayOff_Initialization:	
 17678                           
 17679                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 17680                           
 17681                           ;incstack = 0
 17682                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17683  2761  3001               	movlw	1
 17684  2762  31A7  27DF         	fcall	_DlyOff_Initialization
 17685  2764  0008               	return
 17686  2765                     __end_of_DelayOff_Initialization:	
 17687                           
 17688                           	psect	text111
 17689  27DF                     __ptext111:	
 17690 ;; *************** function _DlyOff_Initialization *****************
 17691 ;; Defined at:
 17692 ;;		line 60 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17693 ;; Parameters:    Size  Location     Type
 17694 ;;  sw              1    wreg     unsigned char 
 17695 ;; Auto vars:     Size  Location     Type
 17696 ;;  sw              1    2[BANK0 ] unsigned char 
 17697 ;; Return value:  Size  Location     Type
 17698 ;;		None               void
 17699 ;; Registers used:
 17700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17701 ;; Tracked objects:
 17702 ;;		On entry : 0/0
 17703 ;;		On exit  : 0/0
 17704 ;;		Unchanged: 0/0
 17705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17709 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17710 ;;Total ram usage:        1 bytes
 17711 ;; Hardware stack levels used:    1
 17712 ;; Hardware stack levels required when called:    5
 17713 ;; This function calls:
 17714 ;;		_DelayOffPointSelect
 17715 ;; This function is called by:
 17716 ;;		_DelayOff_Initialization
 17717 ;; This function uses a non-reentrant model
 17718 ;;
 17719                           
 17720                           
 17721                           ;psect for function _DlyOff_Initialization
 17722  27DF                     _DlyOff_Initialization:	
 17723                           
 17724                           ;incstack = 0
 17725                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17726                           ;DlyOff_Initialization@sw stored from wreg
 17727  27DF  0020               	movlb	0	; select bank0
 17728  27E0  00A2               	movwf	DlyOff_Initialization@sw
 17729                           
 17730                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 17731  27E1  0822               	movf	DlyOff_Initialization@sw,w
 17732  27E2  3198  20B5         	fcall	_DelayOffPointSelect
 17733                           
 17734                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 17735  27E4  0021               	movlb	1	; select bank1
 17736  27E5  0838               	movf	_DelayOff^(0+128),w
 17737  27E6  0086               	movwf	6
 17738  27E7  0187               	clrf	7
 17739  27E8  1401               	bsf	1,0
 17740  27E9  0008               	return
 17741  27EA                     __end_of_DlyOff_Initialization:	
 17742                           
 17743                           	psect	text112
 17744  18B5                     __ptext112:	
 17745 ;; *************** function _DelayOffPointSelect *****************
 17746 ;; Defined at:
 17747 ;;		line 8 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\DelayOff_B1.c"
 17748 ;; Parameters:    Size  Location     Type
 17749 ;;  sw              1    wreg     unsigned char 
 17750 ;; Auto vars:     Size  Location     Type
 17751 ;;  sw              1    1[BANK0 ] unsigned char 
 17752 ;; Return value:  Size  Location     Type
 17753 ;;		None               void
 17754 ;; Registers used:
 17755 ;;		wreg
 17756 ;; Tracked objects:
 17757 ;;		On entry : 0/0
 17758 ;;		On exit  : 0/0
 17759 ;;		Unchanged: 0/0
 17760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17764 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17765 ;;Total ram usage:        2 bytes
 17766 ;; Hardware stack levels used:    1
 17767 ;; Hardware stack levels required when called:    4
 17768 ;; This function calls:
 17769 ;;		Nothing
 17770 ;; This function is called by:
 17771 ;;		_DlyOff_Initialization
 17772 ;;		_DlyOff_Main
 17773 ;;		_setDelayOff_GO
 17774 ;; This function uses a non-reentrant model
 17775 ;;
 17776                           
 17777                           
 17778                           ;psect for function _DelayOffPointSelect
 17779  18B5                     _DelayOffPointSelect:	
 17780                           
 17781                           ;incstack = 0
 17782                           ; Regs used in _DelayOffPointSelect: [wreg]
 17783                           ;DelayOffPointSelect@sw stored from wreg
 17784  18B5  0020               	movlb	0	; select bank0
 17785  18B6  00A1               	movwf	DelayOffPointSelect@sw
 17786                           
 17787                           ;DelayOff_B1.c: 11: if(sw == 1)
 17788  18B7  0821               	movf	DelayOffPointSelect@sw,w
 17789  18B8  3A01               	xorlw	1
 17790  18B9  1D03               	skipz
 17791  18BA  0008               	return
 17792                           
 17793                           ;DelayOff_B1.c: 12: {
 17794                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 17795  18BB  30D3               	movlw	_DlySw1& (0+255)
 17796  18BC  00A0               	movwf	??_DelayOffPointSelect
 17797  18BD  0820               	movf	??_DelayOffPointSelect,w
 17798  18BE  0021               	movlb	1	; select bank1
 17799  18BF  00B8               	movwf	_DelayOff^(0+128)
 17800  18C0  0008               	return
 17801  18C1                     __end_of_DelayOffPointSelect:	
 17802                           
 17803                           	psect	text113
 17804  1A07                     __ptext113:	
 17805 ;; *************** function _CC2500_PowerOnInitial *****************
 17806 ;; Defined at:
 17807 ;;		line 97 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17808 ;; Parameters:    Size  Location     Type
 17809 ;;		None
 17810 ;; Auto vars:     Size  Location     Type
 17811 ;;		None
 17812 ;; Return value:  Size  Location     Type
 17813 ;;		None               void
 17814 ;; Registers used:
 17815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17816 ;; Tracked objects:
 17817 ;;		On entry : 0/0
 17818 ;;		On exit  : 0/0
 17819 ;;		Unchanged: 0/0
 17820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17825 ;;Total ram usage:        0 bytes
 17826 ;; Hardware stack levels used:    1
 17827 ;; Hardware stack levels required when called:    7
 17828 ;; This function calls:
 17829 ;;		_CC2500_ClearRXFIFO
 17830 ;;		_CC2500_ClearTXFIFO
 17831 ;;		_CC2500_FrequencyCabr
 17832 ;;		_CC2500_InitPATable
 17833 ;;		_CC2500_InitSetREG
 17834 ;;		_CC2500_PowerRST
 17835 ;;		_CC2500_SIDLEMode
 17836 ;; This function is called by:
 17837 ;;		_main
 17838 ;; This function uses a non-reentrant model
 17839 ;;
 17840                           
 17841                           
 17842                           ;psect for function _CC2500_PowerOnInitial
 17843  1A07                     _CC2500_PowerOnInitial:	
 17844                           
 17845                           ;CC2500_B1.c: 99: CC2500_PowerRST();
 17846                           
 17847                           ;incstack = 0
 17848                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17849  1A07  319D  2593  319A   	fcall	_CC2500_PowerRST
 17850                           
 17851                           ;CC2500_B1.c: 100: CC2500_InitSetREG();
 17852  1A0A  319C  248A  319A   	fcall	_CC2500_InitSetREG
 17853                           
 17854                           ;CC2500_B1.c: 101: CC2500_InitPATable();
 17855  1A0D  319B  234F  319A   	fcall	_CC2500_InitPATable
 17856                           
 17857                           ;CC2500_B1.c: 102: CC2500_ClearTXFIFO();
 17858  1A10  31A7  2759  319A   	fcall	_CC2500_ClearTXFIFO
 17859                           
 17860                           ;CC2500_B1.c: 103: CC2500_ClearRXFIFO();
 17861  1A13  31A7  2755  319A   	fcall	_CC2500_ClearRXFIFO
 17862                           
 17863                           ;CC2500_B1.c: 104: CC2500_FrequencyCabr();
 17864  1A16  3198  20A9  319A   	fcall	_CC2500_FrequencyCabr
 17865                           
 17866                           ;CC2500_B1.c: 105: CC2500_SIDLEMode();
 17867  1A19  31A7  275D         	fcall	_CC2500_SIDLEMode
 17868  1A1B  0008               	return
 17869  1A1C                     __end_of_CC2500_PowerOnInitial:	
 17870                           
 17871                           	psect	text114
 17872  275D                     __ptext114:	
 17873 ;; *************** function _CC2500_SIDLEMode *****************
 17874 ;; Defined at:
 17875 ;;		line 183 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17876 ;; Parameters:    Size  Location     Type
 17877 ;;		None
 17878 ;; Auto vars:     Size  Location     Type
 17879 ;;		None
 17880 ;; Return value:  Size  Location     Type
 17881 ;;		None               void
 17882 ;; Registers used:
 17883 ;;		wreg, status,2, status,0, pclath, cstack
 17884 ;; Tracked objects:
 17885 ;;		On entry : 0/0
 17886 ;;		On exit  : 0/0
 17887 ;;		Unchanged: 0/0
 17888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;Total ram usage:        0 bytes
 17894 ;; Hardware stack levels used:    1
 17895 ;; Hardware stack levels required when called:    6
 17896 ;; This function calls:
 17897 ;;		_CC2500_WriteCommand
 17898 ;; This function is called by:
 17899 ;;		_CC2500_PowerOnInitial
 17900 ;; This function uses a non-reentrant model
 17901 ;;
 17902                           
 17903                           
 17904                           ;psect for function _CC2500_SIDLEMode
 17905  275D                     _CC2500_SIDLEMode:	
 17906                           
 17907                           ;CC2500_B1.c: 185: CC2500_WriteCommand(0x36);
 17908                           
 17909                           ;incstack = 0
 17910                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 17911  275D  3036               	movlw	54
 17912  275E  3199  2187         	fcall	_CC2500_WriteCommand
 17913  2760  0008               	return
 17914  2761                     __end_of_CC2500_SIDLEMode:	
 17915                           
 17916                           	psect	text115
 17917  1D93                     __ptext115:	
 17918 ;; *************** function _CC2500_PowerRST *****************
 17919 ;; Defined at:
 17920 ;;		line 110 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 17921 ;; Parameters:    Size  Location     Type
 17922 ;;		None
 17923 ;; Auto vars:     Size  Location     Type
 17924 ;;		None
 17925 ;; Return value:  Size  Location     Type
 17926 ;;		None               void
 17927 ;; Registers used:
 17928 ;;		wreg, status,2, status,0, pclath, cstack
 17929 ;; Tracked objects:
 17930 ;;		On entry : 0/0
 17931 ;;		On exit  : 0/0
 17932 ;;		Unchanged: 0/0
 17933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17937 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17938 ;;Total ram usage:        1 bytes
 17939 ;; Hardware stack levels used:    1
 17940 ;; Hardware stack levels required when called:    5
 17941 ;; This function calls:
 17942 ;;		_CC2500_WriteByte
 17943 ;;		_DelayTime_1us
 17944 ;; This function is called by:
 17945 ;;		_CC2500_PowerOnInitial
 17946 ;; This function uses a non-reentrant model
 17947 ;;
 17948                           
 17949                           
 17950                           ;psect for function _CC2500_PowerRST
 17951  1D93                     _CC2500_PowerRST:	
 17952                           
 17953                           ;CC2500_B1.c: 112: RC1=0;
 17954                           
 17955                           ;incstack = 0
 17956                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 17957  1D93  0020               	movlb	0	; select bank0
 17958  1D94  108E               	bcf	14,1	;volatile
 17959                           
 17960                           ;CC2500_B1.c: 113: RC0=0;
 17961  1D95  100E               	bcf	14,0	;volatile
 17962                           
 17963                           ;CC2500_B1.c: 114: RC4=1;
 17964  1D96  160E               	bsf	14,4	;volatile
 17965                           
 17966                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 17967  1D97  300A               	movlw	10
 17968  1D98  00A0               	movwf	DelayTime_1us@count
 17969  1D99  3000               	movlw	0
 17970  1D9A  00A1               	movwf	DelayTime_1us@count+1
 17971  1D9B  319C  2417  319D   	fcall	_DelayTime_1us
 17972                           
 17973                           ;CC2500_B1.c: 116: RC4=0;
 17974  1D9E  0020               	movlb	0	; select bank0
 17975  1D9F  120E               	bcf	14,4	;volatile
 17976                           
 17977                           ;CC2500_B1.c: 117: DelayTime_1us(10);
 17978  1DA0  300A               	movlw	10
 17979  1DA1  00A0               	movwf	DelayTime_1us@count
 17980  1DA2  3000               	movlw	0
 17981  1DA3  00A1               	movwf	DelayTime_1us@count+1
 17982  1DA4  319C  2417  319D   	fcall	_DelayTime_1us
 17983                           
 17984                           ;CC2500_B1.c: 118: RC4=1;
 17985  1DA7  0020               	movlb	0	; select bank0
 17986  1DA8  160E               	bsf	14,4	;volatile
 17987                           
 17988                           ;CC2500_B1.c: 119: DelayTime_1us(40);
 17989  1DA9  3028               	movlw	40
 17990  1DAA  00A0               	movwf	DelayTime_1us@count
 17991  1DAB  3000               	movlw	0
 17992  1DAC  00A1               	movwf	DelayTime_1us@count+1
 17993  1DAD  319C  2417  319D   	fcall	_DelayTime_1us
 17994                           
 17995                           ;CC2500_B1.c: 120: RC4=0;
 17996  1DB0  0020               	movlb	0	; select bank0
 17997  1DB1  120E               	bcf	14,4	;volatile
 17998                           
 17999                           ;CC2500_B1.c: 121: SPI0Buffer=0x30;
 18000  1DB2  3030               	movlw	48
 18001  1DB3  00A6               	movwf	??_CC2500_PowerRST
 18002  1DB4  0826               	movf	??_CC2500_PowerRST,w
 18003  1DB5  0021               	movlb	1	; select bank1
 18004  1DB6  00BF               	movwf	_SPI0Buffer^(0+128)
 18005  1DB7                     l312:	
 18006                           ;CC2500_B1.c: 122: while(RC2==1);
 18007                           
 18008  1DB7  0020               	movlb	0	; select bank0
 18009  1DB8  190E               	btfsc	14,2	;volatile
 18010  1DB9  2DB7               	goto	l312
 18011                           
 18012                           ;CC2500_B1.c: 123: CC2500_WriteByte();
 18013  1DBA  319A  225D  319D   	fcall	_CC2500_WriteByte
 18014  1DBD                     l315:	
 18015                           ;CC2500_B1.c: 124: while(RC2==1);
 18016                           
 18017  1DBD  0020               	movlb	0	; select bank0
 18018  1DBE  190E               	btfsc	14,2	;volatile
 18019  1DBF  2DBD               	goto	l315
 18020                           
 18021                           ;CC2500_B1.c: 125: RC0=0;
 18022  1DC0  100E               	bcf	14,0	;volatile
 18023                           
 18024                           ;CC2500_B1.c: 126: RC4=1;
 18025  1DC1  160E               	bsf	14,4	;volatile
 18026  1DC2  0008               	return
 18027  1DC3                     __end_of_CC2500_PowerRST:	
 18028                           
 18029                           	psect	text116
 18030  1C8A                     __ptext116:	
 18031 ;; *************** function _CC2500_InitSetREG *****************
 18032 ;; Defined at:
 18033 ;;		line 131 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18034 ;; Parameters:    Size  Location     Type
 18035 ;;		None
 18036 ;; Auto vars:     Size  Location     Type
 18037 ;;  loop_c          1    8[BANK0 ] unsigned char 
 18038 ;;  temp2           1    7[BANK0 ] unsigned char 
 18039 ;;  temp1           1    6[BANK0 ] unsigned char 
 18040 ;; Return value:  Size  Location     Type
 18041 ;;		None               void
 18042 ;; Registers used:
 18043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18044 ;; Tracked objects:
 18045 ;;		On entry : 0/0
 18046 ;;		On exit  : 0/0
 18047 ;;		Unchanged: 0/0
 18048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18050 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18052 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18053 ;;Total ram usage:        4 bytes
 18054 ;; Hardware stack levels used:    1
 18055 ;; Hardware stack levels required when called:    6
 18056 ;; This function calls:
 18057 ;;		_CC2500_WriteREG
 18058 ;; This function is called by:
 18059 ;;		_CC2500_PowerOnInitial
 18060 ;; This function uses a non-reentrant model
 18061 ;;
 18062                           
 18063                           
 18064                           ;psect for function _CC2500_InitSetREG
 18065  1C8A                     _CC2500_InitSetREG:	
 18066                           
 18067                           ;CC2500_B1.c: 133: unsigned char loop_c;
 18068                           ;CC2500_B1.c: 134: unsigned char temp1,temp2;
 18069                           ;CC2500_B1.c: 136: for(loop_c=0;loop_c<47;loop_c++)
 18070                           
 18071                           ;incstack = 0
 18072                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18073  1C8A  0020               	movlb	0	; select bank0
 18074  1C8B  01A8               	clrf	CC2500_InitSetREG@loop_c
 18075  1C8C                     L12:	
 18076  1C8C  302F               	movlw	47
 18077  1C8D  0228               	subwf	CC2500_InitSetREG@loop_c,w
 18078  1C8E  1803               	btfsc	3,0
 18079  1C8F  0008               	return
 18080                           
 18081                           ;CC2500_B1.c: 137: {
 18082                           ;CC2500_B1.c: 138: temp1 = CC2500_registers_address[loop_c];
 18083  1C90  0828               	movf	CC2500_InitSetREG@loop_c,w
 18084  1C91  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 18085  1C92  0084               	movwf	4
 18086  1C93  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 18087  1C94  1803               	skipnc
 18088  1C95  3E01               	addlw	1
 18089  1C96  0085               	movwf	5
 18090  1C97  0800               	movf	0,w	;code access
 18091  1C98  00A5               	movwf	??_CC2500_InitSetREG
 18092  1C99  0825               	movf	??_CC2500_InitSetREG,w
 18093  1C9A  00A6               	movwf	CC2500_InitSetREG@temp1
 18094                           
 18095                           ;CC2500_B1.c: 139: temp2 = CC2500_rfSettings[loop_c];
 18096  1C9B  0828               	movf	CC2500_InitSetREG@loop_c,w
 18097  1C9C  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 18098  1C9D  0084               	movwf	4
 18099  1C9E  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 18100  1C9F  1803               	skipnc
 18101  1CA0  3E01               	addlw	1
 18102  1CA1  0085               	movwf	5
 18103  1CA2  0800               	movf	0,w	;code access
 18104  1CA3  00A5               	movwf	??_CC2500_InitSetREG
 18105  1CA4  0825               	movf	??_CC2500_InitSetREG,w
 18106  1CA5  00A7               	movwf	CC2500_InitSetREG@temp2
 18107                           
 18108                           ;CC2500_B1.c: 141: CC2500_WriteREG(temp1,temp2);
 18109  1CA6  0827               	movf	CC2500_InitSetREG@temp2,w
 18110  1CA7  00A5               	movwf	??_CC2500_InitSetREG
 18111  1CA8  0825               	movf	??_CC2500_InitSetREG,w
 18112  1CA9  00A2               	movwf	CC2500_WriteREG@value
 18113  1CAA  0826               	movf	CC2500_InitSetREG@temp1,w
 18114  1CAB  319A  2276  319C   	fcall	_CC2500_WriteREG
 18115  1CAE  3001               	movlw	1
 18116  1CAF  0020               	movlb	0	; select bank0
 18117  1CB0  00A5               	movwf	??_CC2500_InitSetREG
 18118  1CB1  0825               	movf	??_CC2500_InitSetREG,w
 18119  1CB2  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 18120  1CB3  2C8C               	goto	L12
 18121  1CB4                     __end_of_CC2500_InitSetREG:	
 18122                           
 18123                           	psect	text117
 18124  1B4F                     __ptext117:	
 18125 ;; *************** function _CC2500_InitPATable *****************
 18126 ;; Defined at:
 18127 ;;		line 147 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18128 ;; Parameters:    Size  Location     Type
 18129 ;;		None
 18130 ;; Auto vars:     Size  Location     Type
 18131 ;;  loop_d          1    7[BANK0 ] unsigned char 
 18132 ;;  temp            1    6[BANK0 ] unsigned char 
 18133 ;; Return value:  Size  Location     Type
 18134 ;;		None               void
 18135 ;; Registers used:
 18136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18137 ;; Tracked objects:
 18138 ;;		On entry : 0/0
 18139 ;;		On exit  : 0/0
 18140 ;;		Unchanged: 0/0
 18141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18143 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18144 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18145 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18146 ;;Total ram usage:        3 bytes
 18147 ;; Hardware stack levels used:    1
 18148 ;; Hardware stack levels required when called:    6
 18149 ;; This function calls:
 18150 ;;		_CC2500_WriteREG
 18151 ;; This function is called by:
 18152 ;;		_CC2500_PowerOnInitial
 18153 ;; This function uses a non-reentrant model
 18154 ;;
 18155                           
 18156                           
 18157                           ;psect for function _CC2500_InitPATable
 18158  1B4F                     _CC2500_InitPATable:	
 18159                           
 18160                           ;CC2500_B1.c: 149: unsigned char loop_d;
 18161                           ;CC2500_B1.c: 150: unsigned char temp;
 18162                           ;CC2500_B1.c: 152: for(loop_d=0;loop_d<8;loop_d++)
 18163                           
 18164                           ;incstack = 0
 18165                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18166  1B4F  0020               	movlb	0	; select bank0
 18167  1B50  01A7               	clrf	CC2500_InitPATable@loop_d
 18168  1B51                     L13:	
 18169  1B51  3008               	movlw	8
 18170  1B52  0227               	subwf	CC2500_InitPATable@loop_d,w
 18171  1B53  1803               	btfsc	3,0
 18172  1B54  0008               	return
 18173                           
 18174                           ;CC2500_B1.c: 153: {
 18175                           ;CC2500_B1.c: 154: temp=CC2500_patable_vaule[loop_d];
 18176  1B55  0827               	movf	CC2500_InitPATable@loop_d,w
 18177  1B56  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 18178  1B57  0084               	movwf	4
 18179  1B58  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 18180  1B59  1803               	skipnc
 18181  1B5A  3E01               	addlw	1
 18182  1B5B  0085               	movwf	5
 18183  1B5C  0800               	movf	0,w	;code access
 18184  1B5D  00A5               	movwf	??_CC2500_InitPATable
 18185  1B5E  0825               	movf	??_CC2500_InitPATable,w
 18186  1B5F  00A6               	movwf	CC2500_InitPATable@temp
 18187                           
 18188                           ;CC2500_B1.c: 155: CC2500_WriteREG(0x3E,temp);
 18189  1B60  0826               	movf	CC2500_InitPATable@temp,w
 18190  1B61  00A5               	movwf	??_CC2500_InitPATable
 18191  1B62  0825               	movf	??_CC2500_InitPATable,w
 18192  1B63  00A2               	movwf	CC2500_WriteREG@value
 18193  1B64  303E               	movlw	62
 18194  1B65  319A  2276  319B   	fcall	_CC2500_WriteREG
 18195  1B68  3001               	movlw	1
 18196  1B69  0020               	movlb	0	; select bank0
 18197  1B6A  00A5               	movwf	??_CC2500_InitPATable
 18198  1B6B  0825               	movf	??_CC2500_InitPATable,w
 18199  1B6C  07A7               	addwf	CC2500_InitPATable@loop_d,f
 18200  1B6D  2B51               	goto	L13
 18201  1B6E                     __end_of_CC2500_InitPATable:	
 18202                           
 18203                           	psect	text118
 18204  1A76                     __ptext118:	
 18205 ;; *************** function _CC2500_WriteREG *****************
 18206 ;; Defined at:
 18207 ;;		line 227 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18208 ;; Parameters:    Size  Location     Type
 18209 ;;  w_addr          1    wreg     unsigned char 
 18210 ;;  value           1    2[BANK0 ] unsigned char 
 18211 ;; Auto vars:     Size  Location     Type
 18212 ;;  w_addr          1    4[BANK0 ] unsigned char 
 18213 ;; Return value:  Size  Location     Type
 18214 ;;		None               void
 18215 ;; Registers used:
 18216 ;;		wreg, status,2, status,0, pclath, cstack
 18217 ;; Tracked objects:
 18218 ;;		On entry : 0/0
 18219 ;;		On exit  : 0/0
 18220 ;;		Unchanged: 0/0
 18221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18222 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18226 ;;Total ram usage:        3 bytes
 18227 ;; Hardware stack levels used:    1
 18228 ;; Hardware stack levels required when called:    5
 18229 ;; This function calls:
 18230 ;;		_CC2500_WriteByte
 18231 ;; This function is called by:
 18232 ;;		_CC2500_InitSetREG
 18233 ;;		_CC2500_InitPATable
 18234 ;; This function uses a non-reentrant model
 18235 ;;
 18236                           
 18237                           
 18238                           ;psect for function _CC2500_WriteREG
 18239  1A76                     _CC2500_WriteREG:	
 18240                           
 18241                           ;incstack = 0
 18242                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 18243                           ;CC2500_WriteREG@w_addr stored from wreg
 18244  1A76  0020               	movlb	0	; select bank0
 18245  1A77  00A4               	movwf	CC2500_WriteREG@w_addr
 18246                           
 18247                           ;CC2500_B1.c: 229: RC4=0;
 18248  1A78  120E               	bcf	14,4	;volatile
 18249                           
 18250                           ;CC2500_B1.c: 230: SPI0Buffer=w_addr;
 18251  1A79  0824               	movf	CC2500_WriteREG@w_addr,w
 18252  1A7A  00A3               	movwf	??_CC2500_WriteREG
 18253  1A7B  0823               	movf	??_CC2500_WriteREG,w
 18254  1A7C  0021               	movlb	1	; select bank1
 18255  1A7D  00BF               	movwf	_SPI0Buffer^(0+128)
 18256  1A7E                     l357:	
 18257                           ;CC2500_B1.c: 231: while(RC2==1);
 18258                           
 18259  1A7E  0020               	movlb	0	; select bank0
 18260  1A7F  190E               	btfsc	14,2	;volatile
 18261  1A80  2A7E               	goto	l357
 18262                           
 18263                           ;CC2500_B1.c: 232: CC2500_WriteByte();
 18264  1A81  319A  225D  319A   	fcall	_CC2500_WriteByte
 18265                           
 18266                           ;CC2500_B1.c: 233: SPI0Buffer=value;
 18267  1A84  0020               	movlb	0	; select bank0
 18268  1A85  0822               	movf	CC2500_WriteREG@value,w
 18269  1A86  00A3               	movwf	??_CC2500_WriteREG
 18270  1A87  0823               	movf	??_CC2500_WriteREG,w
 18271  1A88  0021               	movlb	1	; select bank1
 18272  1A89  00BF               	movwf	_SPI0Buffer^(0+128)
 18273                           
 18274                           ;CC2500_B1.c: 234: CC2500_WriteByte();
 18275  1A8A  319A  225D         	fcall	_CC2500_WriteByte
 18276                           
 18277                           ;CC2500_B1.c: 235: RC4=1;
 18278  1A8C  0020               	movlb	0	; select bank0
 18279  1A8D  160E               	bsf	14,4	;volatile
 18280  1A8E  0008               	return
 18281  1A8F                     __end_of_CC2500_WriteREG:	
 18282                           
 18283                           	psect	text119
 18284  18A9                     __ptext119:	
 18285 ;; *************** function _CC2500_FrequencyCabr *****************
 18286 ;; Defined at:
 18287 ;;		line 175 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18288 ;; Parameters:    Size  Location     Type
 18289 ;;		None
 18290 ;; Auto vars:     Size  Location     Type
 18291 ;;		None
 18292 ;; Return value:  Size  Location     Type
 18293 ;;		None               void
 18294 ;; Registers used:
 18295 ;;		wreg, status,2, status,0, pclath, cstack
 18296 ;; Tracked objects:
 18297 ;;		On entry : 0/0
 18298 ;;		On exit  : 0/0
 18299 ;;		Unchanged: 0/0
 18300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;Total ram usage:        0 bytes
 18306 ;; Hardware stack levels used:    1
 18307 ;; Hardware stack levels required when called:    6
 18308 ;; This function calls:
 18309 ;;		_CC2500_WriteCommand
 18310 ;;		_DelayTime_1us
 18311 ;; This function is called by:
 18312 ;;		_CC2500_PowerOnInitial
 18313 ;; This function uses a non-reentrant model
 18314 ;;
 18315                           
 18316                           
 18317                           ;psect for function _CC2500_FrequencyCabr
 18318  18A9                     _CC2500_FrequencyCabr:	
 18319                           
 18320                           ;CC2500_B1.c: 177: CC2500_WriteCommand(0x33);
 18321                           
 18322                           ;incstack = 0
 18323                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 18324  18A9  3033               	movlw	51
 18325  18AA  3199  2187  3198   	fcall	_CC2500_WriteCommand
 18326                           
 18327                           ;CC2500_B1.c: 178: DelayTime_1us(1000);
 18328  18AD  30E8               	movlw	232
 18329  18AE  0020               	movlb	0	; select bank0
 18330  18AF  00A0               	movwf	DelayTime_1us@count
 18331  18B0  3003               	movlw	3
 18332  18B1  00A1               	movwf	DelayTime_1us@count+1
 18333  18B2  319C  2417         	fcall	_DelayTime_1us
 18334  18B4  0008               	return
 18335  18B5                     __end_of_CC2500_FrequencyCabr:	
 18336                           
 18337                           	psect	text120
 18338  1C17                     __ptext120:	
 18339 ;; *************** function _DelayTime_1us *****************
 18340 ;; Defined at:
 18341 ;;		line 283 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18342 ;; Parameters:    Size  Location     Type
 18343 ;;  count           2    0[BANK0 ] int 
 18344 ;; Auto vars:     Size  Location     Type
 18345 ;;  j               2    4[BANK0 ] unsigned int 
 18346 ;;  i               2    2[BANK0 ] unsigned int 
 18347 ;; Return value:  Size  Location     Type
 18348 ;;		None               void
 18349 ;; Registers used:
 18350 ;;		wreg, status,2
 18351 ;; Tracked objects:
 18352 ;;		On entry : 0/0
 18353 ;;		On exit  : 0/0
 18354 ;;		Unchanged: 0/0
 18355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18356 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18359 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18360 ;;Total ram usage:        6 bytes
 18361 ;; Hardware stack levels used:    1
 18362 ;; Hardware stack levels required when called:    4
 18363 ;; This function calls:
 18364 ;;		Nothing
 18365 ;; This function is called by:
 18366 ;;		_CC2500_PowerRST
 18367 ;;		_CC2500_FrequencyCabr
 18368 ;; This function uses a non-reentrant model
 18369 ;;
 18370                           
 18371                           
 18372                           ;psect for function _DelayTime_1us
 18373  1C17                     _DelayTime_1us:	
 18374                           
 18375                           ;CC2500_B1.c: 285: unsigned int i,j;
 18376                           ;CC2500_B1.c: 286: for(i=1;i<count;i++)
 18377                           
 18378                           ;incstack = 0
 18379                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 18380  1C17  3001               	movlw	1
 18381  1C18  0020               	movlb	0	; select bank0
 18382  1C19  00A2               	movwf	DelayTime_1us@i
 18383  1C1A  3000               	movlw	0
 18384  1C1B  00A3               	movwf	DelayTime_1us@i+1
 18385  1C1C                     l381:	
 18386  1C1C  0821               	movf	DelayTime_1us@count+1,w
 18387  1C1D  0223               	subwf	DelayTime_1us@i+1,w
 18388  1C1E  1D03               	skipz
 18389  1C1F  2C22               	goto	u7585
 18390  1C20  0820               	movf	DelayTime_1us@count,w
 18391  1C21  0222               	subwf	DelayTime_1us@i,w
 18392  1C22                     u7585:	
 18393  1C22  1803               	btfsc	3,0
 18394  1C23  0008               	return
 18395                           
 18396                           ;CC2500_B1.c: 287: for(j=0;j<=1;j++);
 18397  1C24  01A4               	clrf	DelayTime_1us@j
 18398  1C25  01A5               	clrf	DelayTime_1us@j+1
 18399  1C26  3000               	movlw	0
 18400  1C27  0225               	subwf	DelayTime_1us@j+1,w
 18401  1C28  3002               	movlw	2
 18402  1C29  1903               	skipnz
 18403  1C2A  0224               	subwf	DelayTime_1us@j,w
 18404  1C2B  1803               	btfsc	3,0
 18405  1C2C  2C38               	goto	l8193
 18406  1C2D                     l8191:	
 18407  1C2D  3001               	movlw	1
 18408  1C2E  07A4               	addwf	DelayTime_1us@j,f
 18409  1C2F  3000               	movlw	0
 18410  1C30  3DA5               	addwfc	DelayTime_1us@j+1,f
 18411  1C31  3000               	movlw	0
 18412  1C32  0225               	subwf	DelayTime_1us@j+1,w
 18413  1C33  3002               	movlw	2
 18414  1C34  1903               	skipnz
 18415  1C35  0224               	subwf	DelayTime_1us@j,w
 18416  1C36  1C03               	skipc
 18417  1C37  2C2D               	goto	l8191
 18418  1C38                     l8193:	
 18419  1C38  3001               	movlw	1
 18420  1C39  07A2               	addwf	DelayTime_1us@i,f
 18421  1C3A  3000               	movlw	0
 18422  1C3B  3DA3               	addwfc	DelayTime_1us@i+1,f
 18423  1C3C  2C1C               	goto	l381
 18424  1C3D                     __end_of_DelayTime_1us:	
 18425                           
 18426                           	psect	text121
 18427  2759                     __ptext121:	
 18428 ;; *************** function _CC2500_ClearTXFIFO *****************
 18429 ;; Defined at:
 18430 ;;		line 161 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18431 ;; Parameters:    Size  Location     Type
 18432 ;;		None
 18433 ;; Auto vars:     Size  Location     Type
 18434 ;;		None
 18435 ;; Return value:  Size  Location     Type
 18436 ;;		None               void
 18437 ;; Registers used:
 18438 ;;		wreg, status,2, status,0, pclath, cstack
 18439 ;; Tracked objects:
 18440 ;;		On entry : 0/0
 18441 ;;		On exit  : 0/0
 18442 ;;		Unchanged: 0/0
 18443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18448 ;;Total ram usage:        0 bytes
 18449 ;; Hardware stack levels used:    1
 18450 ;; Hardware stack levels required when called:    6
 18451 ;; This function calls:
 18452 ;;		_CC2500_WriteCommand
 18453 ;; This function is called by:
 18454 ;;		_CC2500_PowerOnInitial
 18455 ;; This function uses a non-reentrant model
 18456 ;;
 18457                           
 18458                           
 18459                           ;psect for function _CC2500_ClearTXFIFO
 18460  2759                     _CC2500_ClearTXFIFO:	
 18461                           
 18462                           ;CC2500_B1.c: 163: CC2500_WriteCommand(0x3B);
 18463                           
 18464                           ;incstack = 0
 18465                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 18466  2759  303B               	movlw	59
 18467  275A  3199  2187         	fcall	_CC2500_WriteCommand
 18468  275C  0008               	return
 18469  275D                     __end_of_CC2500_ClearTXFIFO:	
 18470                           
 18471                           	psect	text122
 18472  2755                     __ptext122:	
 18473 ;; *************** function _CC2500_ClearRXFIFO *****************
 18474 ;; Defined at:
 18475 ;;		line 168 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18476 ;; Parameters:    Size  Location     Type
 18477 ;;		None
 18478 ;; Auto vars:     Size  Location     Type
 18479 ;;		None
 18480 ;; Return value:  Size  Location     Type
 18481 ;;		None               void
 18482 ;; Registers used:
 18483 ;;		wreg, status,2, status,0, pclath, cstack
 18484 ;; Tracked objects:
 18485 ;;		On entry : 0/0
 18486 ;;		On exit  : 0/0
 18487 ;;		Unchanged: 0/0
 18488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18493 ;;Total ram usage:        0 bytes
 18494 ;; Hardware stack levels used:    1
 18495 ;; Hardware stack levels required when called:    6
 18496 ;; This function calls:
 18497 ;;		_CC2500_WriteCommand
 18498 ;; This function is called by:
 18499 ;;		_CC2500_PowerOnInitial
 18500 ;; This function uses a non-reentrant model
 18501 ;;
 18502                           
 18503                           
 18504                           ;psect for function _CC2500_ClearRXFIFO
 18505  2755                     _CC2500_ClearRXFIFO:	
 18506                           
 18507                           ;CC2500_B1.c: 170: CC2500_WriteCommand(0x3A);
 18508                           
 18509                           ;incstack = 0
 18510                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 18511  2755  303A               	movlw	58
 18512  2756  3199  2187         	fcall	_CC2500_WriteCommand
 18513  2758  0008               	return
 18514  2759                     __end_of_CC2500_ClearRXFIFO:	
 18515                           
 18516                           	psect	text123
 18517  1987                     __ptext123:	
 18518 ;; *************** function _CC2500_WriteCommand *****************
 18519 ;; Defined at:
 18520 ;;		line 253 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18521 ;; Parameters:    Size  Location     Type
 18522 ;;  command         1    wreg     unsigned char 
 18523 ;; Auto vars:     Size  Location     Type
 18524 ;;  command         1    3[BANK0 ] unsigned char 
 18525 ;; Return value:  Size  Location     Type
 18526 ;;		None               void
 18527 ;; Registers used:
 18528 ;;		wreg, status,2, status,0, pclath, cstack
 18529 ;; Tracked objects:
 18530 ;;		On entry : 0/0
 18531 ;;		On exit  : 0/0
 18532 ;;		Unchanged: 0/0
 18533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18538 ;;Total ram usage:        2 bytes
 18539 ;; Hardware stack levels used:    1
 18540 ;; Hardware stack levels required when called:    5
 18541 ;; This function calls:
 18542 ;;		_CC2500_WriteByte
 18543 ;; This function is called by:
 18544 ;;		_CC2500_TxData
 18545 ;;		_CC2500_RxData
 18546 ;;		_CC2500_ClearTXFIFO
 18547 ;;		_CC2500_ClearRXFIFO
 18548 ;;		_CC2500_FrequencyCabr
 18549 ;;		_CC2500_SIDLEMode
 18550 ;;		_setRF_Main
 18551 ;;		_RF_RxDisable
 18552 ;; This function uses a non-reentrant model
 18553 ;;
 18554                           
 18555                           
 18556                           ;psect for function _CC2500_WriteCommand
 18557  1987                     _CC2500_WriteCommand:	
 18558                           
 18559                           ;incstack = 0
 18560                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 18561                           ;CC2500_WriteCommand@command stored from wreg
 18562  1987  0020               	movlb	0	; select bank0
 18563  1988  00A3               	movwf	CC2500_WriteCommand@command
 18564                           
 18565                           ;CC2500_B1.c: 255: RC4=0;
 18566  1989  120E               	bcf	14,4	;volatile
 18567                           
 18568                           ;CC2500_B1.c: 256: SPI0Buffer=command;
 18569  198A  0823               	movf	CC2500_WriteCommand@command,w
 18570  198B  00A2               	movwf	??_CC2500_WriteCommand
 18571  198C  0822               	movf	??_CC2500_WriteCommand,w
 18572  198D  0021               	movlb	1	; select bank1
 18573  198E  00BF               	movwf	_SPI0Buffer^(0+128)
 18574  198F                     l369:	
 18575                           ;CC2500_B1.c: 258: while(RC2==1);
 18576                           
 18577  198F  0020               	movlb	0	; select bank0
 18578  1990  190E               	btfsc	14,2	;volatile
 18579  1991  298F               	goto	l369
 18580                           
 18581                           ;CC2500_B1.c: 260: CC2500_WriteByte();
 18582  1992  319A  225D         	fcall	_CC2500_WriteByte
 18583                           
 18584                           ;CC2500_B1.c: 261: RC4=1;
 18585  1994  0020               	movlb	0	; select bank0
 18586  1995  160E               	bsf	14,4	;volatile
 18587  1996  0008               	return
 18588  1997                     __end_of_CC2500_WriteCommand:	
 18589                           
 18590                           	psect	text124
 18591  1A5D                     __ptext124:	
 18592 ;; *************** function _CC2500_WriteByte *****************
 18593 ;; Defined at:
 18594 ;;		line 193 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\CC2500_B1.c"
 18595 ;; Parameters:    Size  Location     Type
 18596 ;;		None
 18597 ;; Auto vars:     Size  Location     Type
 18598 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18599 ;; Return value:  Size  Location     Type
 18600 ;;		None               void
 18601 ;; Registers used:
 18602 ;;		wreg, status,2, status,0
 18603 ;; Tracked objects:
 18604 ;;		On entry : 0/0
 18605 ;;		On exit  : 0/0
 18606 ;;		Unchanged: 0/0
 18607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18612 ;;Total ram usage:        2 bytes
 18613 ;; Hardware stack levels used:    1
 18614 ;; Hardware stack levels required when called:    4
 18615 ;; This function calls:
 18616 ;;		Nothing
 18617 ;; This function is called by:
 18618 ;;		_CC2500_TxData
 18619 ;;		_CC2500_RxData
 18620 ;;		_CC2500_PowerRST
 18621 ;;		_CC2500_WriteREG
 18622 ;;		_CC2500_WriteCommand
 18623 ;;		_CC2500_ReadStatus
 18624 ;;		_CC2500_ReadREG
 18625 ;; This function uses a non-reentrant model
 18626 ;;
 18627                           
 18628                           
 18629                           ;psect for function _CC2500_WriteByte
 18630  1A5D                     _CC2500_WriteByte:	
 18631                           
 18632                           ;CC2500_B1.c: 195: unsigned char loop_a;
 18633                           ;CC2500_B1.c: 196: for(loop_a=0;loop_a<8;loop_a++)
 18634                           
 18635                           ;incstack = 0
 18636                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18637  1A5D  0020               	movlb	0	; select bank0
 18638  1A5E  01A1               	clrf	CC2500_WriteByte@loop_a
 18639  1A5F                     L14:	
 18640  1A5F  3008               	movlw	8
 18641  1A60  0221               	subwf	CC2500_WriteByte@loop_a,w
 18642  1A61  1803               	btfsc	3,0
 18643  1A62  0008               	return
 18644                           
 18645                           ;CC2500_B1.c: 197: {
 18646                           ;CC2500_B1.c: 198: if(SPI0Buffer&0x80)
 18647  1A63  0021               	movlb	1	; select bank1
 18648  1A64  1FBF               	btfss	_SPI0Buffer^(0+128),7
 18649  1A65  2A69               	goto	l345
 18650                           
 18651                           ;CC2500_B1.c: 199: RC0=1;
 18652  1A66  0020               	movlb	0	; select bank0
 18653  1A67  140E               	bsf	14,0	;volatile
 18654  1A68  2A6B               	goto	l346
 18655  1A69                     l345:	
 18656                           
 18657                           ;CC2500_B1.c: 200: else
 18658                           ;CC2500_B1.c: 201: RC0=0;
 18659  1A69  0020               	movlb	0	; select bank0
 18660  1A6A  100E               	bcf	14,0	;volatile
 18661  1A6B                     l346:	
 18662                           
 18663                           ;CC2500_B1.c: 202: RC1=1;
 18664  1A6B  148E               	bsf	14,1	;volatile
 18665                           
 18666                           ;CC2500_B1.c: 203: SPI0Buffer<<=1;
 18667  1A6C  1003               	clrc
 18668  1A6D  0021               	movlb	1	; select bank1
 18669  1A6E  0DBF               	rlf	_SPI0Buffer^(0+128),f
 18670                           
 18671                           ;CC2500_B1.c: 204: RC1=0;
 18672  1A6F  0020               	movlb	0	; select bank0
 18673  1A70  108E               	bcf	14,1	;volatile
 18674  1A71  3001               	movlw	1
 18675  1A72  00A0               	movwf	??_CC2500_WriteByte
 18676  1A73  0820               	movf	??_CC2500_WriteByte,w
 18677  1A74  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18678  1A75  2A5F               	goto	L14
 18679  1A76                     __end_of_CC2500_WriteByte:	
 18680                           
 18681                           	psect	text125
 18682  0B61                     __ptext125:	
 18683 ;; *************** function _Buzzer_Main *****************
 18684 ;; Defined at:
 18685 ;;		line 53 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18686 ;; Parameters:    Size  Location     Type
 18687 ;;		None
 18688 ;; Auto vars:     Size  Location     Type
 18689 ;;		None
 18690 ;; Return value:  Size  Location     Type
 18691 ;;		None               void
 18692 ;; Registers used:
 18693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 18694 ;; Tracked objects:
 18695 ;;		On entry : 0/0
 18696 ;;		On exit  : 0/0
 18697 ;;		Unchanged: 0/0
 18698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18701 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18702 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18703 ;;Total ram usage:        4 bytes
 18704 ;; Hardware stack levels used:    1
 18705 ;; Hardware stack levels required when called:    4
 18706 ;; This function calls:
 18707 ;;		Nothing
 18708 ;; This function is called by:
 18709 ;;		_main
 18710 ;; This function uses a non-reentrant model
 18711 ;;
 18712                           
 18713                           
 18714                           ;psect for function _Buzzer_Main
 18715  0B61                     _Buzzer_Main:	
 18716                           
 18717                           ;Buzzer_B1.c: 55: Buz->Switch=(RB3)?1:0;
 18718                           
 18719                           ;incstack = 0
 18720                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 18721  0B61  0878               	movf	_Buz,w
 18722  0B62  0086               	movwf	6
 18723  0B63  3001               	movlw	1	; select bank2/3
 18724  0B64  0087               	movwf	7
 18725  0B65  1281               	bcf	1,5
 18726  0B66  0020               	movlb	0	; select bank0
 18727  0B67  198D               	btfsc	13,3	;volatile
 18728  0B68  1681               	bsf	1,5
 18729                           
 18730                           ;Buzzer_B1.c: 57: if(Buz->GO)
 18731  0B69  0878               	movf	_Buz,w
 18732  0B6A  0086               	movwf	6
 18733  0B6B  3001               	movlw	1	; select bank2/3
 18734  0B6C  0087               	movwf	7
 18735  0B6D  1C81               	btfss	1,1
 18736  0B6E  0008               	return
 18737                           
 18738                           ;Buzzer_B1.c: 58: {
 18739                           ;Buzzer_B1.c: 60: if(Buz->Time >= Buz->TimeValue)
 18740  0B6F  0878               	movf	_Buz,w
 18741  0B70  3E06               	addlw	6
 18742  0B71  0086               	movwf	6
 18743  0B72  3001               	movlw	1	; select bank2/3
 18744  0B73  0087               	movwf	7
 18745  0B74  3F40               	moviw [0]fsr1
 18746  0B75  0020               	movlb	0	; select bank0
 18747  0B76  00A0               	movwf	??_Buzzer_Main
 18748  0B77  3F41               	moviw [1]fsr1
 18749  0B78  00A1               	movwf	??_Buzzer_Main+1
 18750  0B79  0A78               	incf	_Buz,w
 18751  0B7A  0086               	movwf	6
 18752  0B7B  3001               	movlw	1	; select bank2/3
 18753  0B7C  0087               	movwf	7
 18754  0B7D  3F40               	moviw [0]fsr1
 18755  0B7E  00A2               	movwf	??_Buzzer_Main+2
 18756  0B7F  3F41               	moviw [1]fsr1
 18757  0B80  00A3               	movwf	??_Buzzer_Main+3
 18758  0B81  0821               	movf	??_Buzzer_Main+1,w
 18759  0B82  0223               	subwf	??_Buzzer_Main+3,w
 18760  0B83  1D03               	skipz
 18761  0B84  2B87               	goto	u6225
 18762  0B85  0820               	movf	??_Buzzer_Main,w
 18763  0B86  0222               	subwf	??_Buzzer_Main+2,w
 18764  0B87                     u6225:	
 18765  0B87  1C03               	skipc
 18766  0B88  0008               	return
 18767                           
 18768                           ;Buzzer_B1.c: 61: {
 18769                           ;Buzzer_B1.c: 62: Buz->Time=0;
 18770  0B89  0A78               	incf	_Buz,w
 18771  0B8A  0086               	movwf	6
 18772  0B8B  3001               	movlw	1	; select bank2/3
 18773  0B8C  0087               	movwf	7
 18774  0B8D  3000               	movlw	0
 18775  0B8E  3FC0               	movwi [0]fsr1
 18776  0B8F  3FC1               	movwi [1]fsr1
 18777                           
 18778                           ;Buzzer_B1.c: 63: if(!Buz->Switch)
 18779  0B90  0878               	movf	_Buz,w
 18780  0B91  0086               	movwf	6
 18781  0B92  3001               	movlw	1	; select bank2/3
 18782  0B93  0087               	movwf	7
 18783  0B94  1A81               	btfsc	1,5
 18784  0B95  2BFB               	goto	l7213
 18785                           
 18786                           ;Buzzer_B1.c: 64: {
 18787                           ;Buzzer_B1.c: 65: if(Buz->Count == 0)
 18788  0B96  0878               	movf	_Buz,w
 18789  0B97  3E03               	addlw	3
 18790  0B98  0086               	movwf	6
 18791  0B99  3001               	movlw	1	; select bank2/3
 18792  0B9A  0087               	movwf	7
 18793  0B9B  0881               	movf	1,f
 18794  0B9C  1D03               	skipz
 18795  0B9D  2BF4               	goto	l7209
 18796                           
 18797                           ;Buzzer_B1.c: 66: {
 18798                           ;Buzzer_B1.c: 67: if(Buz->BufferStatus1)
 18799  0B9E  0878               	movf	_Buz,w
 18800  0B9F  0086               	movwf	6
 18801  0BA0  3001               	movlw	1	; select bank2/3
 18802  0BA1  0087               	movwf	7
 18803  0BA2  1D81               	btfss	1,3
 18804  0BA3  2BC6               	goto	l7201
 18805                           
 18806                           ;Buzzer_B1.c: 68: {
 18807                           ;Buzzer_B1.c: 69: Buz->BufferStatus1=0;
 18808  0BA4  0878               	movf	_Buz,w
 18809  0BA5  0086               	movwf	6
 18810  0BA6  3001               	movlw	1	; select bank2/3
 18811  0BA7  0087               	movwf	7
 18812  0BA8  1181               	bcf	1,3
 18813                           
 18814                           ;Buzzer_B1.c: 70: Buz->Count=Buz->CountBuffer1;
 18815  0BA9  0878               	movf	_Buz,w
 18816  0BAA  3E04               	addlw	4
 18817  0BAB  0086               	movwf	6
 18818  0BAC  3001               	movlw	1	; select bank2/3
 18819  0BAD  0087               	movwf	7
 18820  0BAE  0801               	movf	1,w
 18821  0BAF  00A0               	movwf	??_Buzzer_Main
 18822  0BB0  0878               	movf	_Buz,w
 18823  0BB1  3E03               	addlw	3
 18824  0BB2  0086               	movwf	6
 18825  0BB3  3001               	movlw	1	; select bank2/3
 18826  0BB4  0087               	movwf	7
 18827  0BB5  0820               	movf	??_Buzzer_Main,w
 18828  0BB6  0081               	movwf	1
 18829                           
 18830                           ;Buzzer_B1.c: 71: Buz->TimeValue=Buz->TimeValueBuffer1;
 18831  0BB7  0878               	movf	_Buz,w
 18832  0BB8  3E08               	addlw	8
 18833  0BB9  0086               	movwf	6
 18834  0BBA  3001               	movlw	1	; select bank2/3
 18835  0BBB  0087               	movwf	7
 18836  0BBC  0878               	movf	_Buz,w
 18837  0BBD  3E06               	addlw	6
 18838  0BBE  0084               	movwf	4
 18839  0BBF  3001               	movlw	1	; select bank2/3
 18840  0BC0  0085               	movwf	5
 18841  0BC1  3F40               	moviw [0]fsr1
 18842  0BC2  3F80               	movwi [0]fsr0
 18843  0BC3  3F41               	moviw [1]fsr1
 18844  0BC4  3F81               	movwi [1]fsr0
 18845                           
 18846                           ;Buzzer_B1.c: 72: }
 18847  0BC5  0008               	return
 18848  0BC6                     l7201:	
 18849                           
 18850                           ;Buzzer_B1.c: 73: else if(Buz->BufferStatus2)
 18851  0BC6  0878               	movf	_Buz,w
 18852  0BC7  0086               	movwf	6
 18853  0BC8  3001               	movlw	1	; select bank2/3
 18854  0BC9  0087               	movwf	7
 18855  0BCA  1E01               	btfss	1,4
 18856  0BCB  2BEE               	goto	l7207
 18857                           
 18858                           ;Buzzer_B1.c: 74: {
 18859                           ;Buzzer_B1.c: 75: Buz->BufferStatus2=0;
 18860  0BCC  0878               	movf	_Buz,w
 18861  0BCD  0086               	movwf	6
 18862  0BCE  3001               	movlw	1	; select bank2/3
 18863  0BCF  0087               	movwf	7
 18864  0BD0  1201               	bcf	1,4
 18865                           
 18866                           ;Buzzer_B1.c: 76: Buz->Count=Buz->CountBuffer2;
 18867  0BD1  0878               	movf	_Buz,w
 18868  0BD2  3E05               	addlw	5
 18869  0BD3  0086               	movwf	6
 18870  0BD4  3001               	movlw	1	; select bank2/3
 18871  0BD5  0087               	movwf	7
 18872  0BD6  0801               	movf	1,w
 18873  0BD7  00A0               	movwf	??_Buzzer_Main
 18874  0BD8  0878               	movf	_Buz,w
 18875  0BD9  3E03               	addlw	3
 18876  0BDA  0086               	movwf	6
 18877  0BDB  3001               	movlw	1	; select bank2/3
 18878  0BDC  0087               	movwf	7
 18879  0BDD  0820               	movf	??_Buzzer_Main,w
 18880  0BDE  0081               	movwf	1
 18881                           
 18882                           ;Buzzer_B1.c: 77: Buz->TimeValue=Buz->TimeValueBuffer2;
 18883  0BDF  0878               	movf	_Buz,w
 18884  0BE0  3E0A               	addlw	10
 18885  0BE1  0086               	movwf	6
 18886  0BE2  3001               	movlw	1	; select bank2/3
 18887  0BE3  0087               	movwf	7
 18888  0BE4  0878               	movf	_Buz,w
 18889  0BE5  3E06               	addlw	6
 18890  0BE6  0084               	movwf	4
 18891  0BE7  3001               	movlw	1	; select bank2/3
 18892  0BE8  0085               	movwf	5
 18893  0BE9  3F40               	moviw [0]fsr1
 18894  0BEA  3F80               	movwi [0]fsr0
 18895  0BEB  3F41               	moviw [1]fsr1
 18896  0BEC  3F81               	movwi [1]fsr0
 18897                           
 18898                           ;Buzzer_B1.c: 78: }
 18899  0BED  0008               	return
 18900  0BEE                     l7207:	
 18901                           
 18902                           ;Buzzer_B1.c: 79: else
 18903                           ;Buzzer_B1.c: 80: {
 18904                           ;Buzzer_B1.c: 81: Buz->GO=0;
 18905  0BEE  0878               	movf	_Buz,w
 18906  0BEF  0086               	movwf	6
 18907  0BF0  3001               	movlw	1	; select bank2/3
 18908  0BF1  0087               	movwf	7
 18909  0BF2  1081               	bcf	1,1
 18910                           
 18911                           ;Buzzer_B1.c: 82: }
 18912                           ;Buzzer_B1.c: 83: }
 18913  0BF3  0008               	return
 18914  0BF4                     l7209:	
 18915                           
 18916                           ;Buzzer_B1.c: 84: else
 18917                           ;Buzzer_B1.c: 85: {
 18918                           ;Buzzer_B1.c: 86: Buz->Switch=1;
 18919  0BF4  0878               	movf	_Buz,w
 18920  0BF5  0086               	movwf	6
 18921  0BF6  3001               	movlw	1	; select bank2/3
 18922  0BF7  0087               	movwf	7
 18923  0BF8  1681               	bsf	1,5
 18924                           
 18925                           ;Buzzer_B1.c: 88: RB3=1;
 18926  0BF9  158D               	bsf	13,3	;volatile
 18927                           
 18928                           ;Buzzer_B1.c: 89: }
 18929                           ;Buzzer_B1.c: 90: }
 18930  0BFA  0008               	return
 18931  0BFB                     l7213:	
 18932                           
 18933                           ;Buzzer_B1.c: 91: else
 18934                           ;Buzzer_B1.c: 92: {
 18935                           ;Buzzer_B1.c: 93: Buz->Switch=0;
 18936  0BFB  0878               	movf	_Buz,w
 18937  0BFC  0086               	movwf	6
 18938  0BFD  3001               	movlw	1	; select bank2/3
 18939  0BFE  0087               	movwf	7
 18940  0BFF  1281               	bcf	1,5
 18941                           
 18942                           ;Buzzer_B1.c: 95: RB3=0;
 18943  0C00  118D               	bcf	13,3	;volatile
 18944                           
 18945                           ;Buzzer_B1.c: 97: Buz->Count--;
 18946  0C01  0878               	movf	_Buz,w
 18947  0C02  3E03               	addlw	3
 18948  0C03  0086               	movwf	6
 18949  0C04  3001               	movlw	1	; select bank2/3
 18950  0C05  0087               	movwf	7
 18951  0C06  3001               	movlw	1
 18952  0C07  0281               	subwf	1,f
 18953  0C08  0008               	return
 18954  0C09                     __end_of_Buzzer_Main:	
 18955                           
 18956                           	psect	text126
 18957  27D4                     __ptext126:	
 18958 ;; *************** function _Buzzer_Initialization *****************
 18959 ;; Defined at:
 18960 ;;		line 10 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\Buzzer_B1.c"
 18961 ;; Parameters:    Size  Location     Type
 18962 ;;		None
 18963 ;; Auto vars:     Size  Location     Type
 18964 ;;		None
 18965 ;; Return value:  Size  Location     Type
 18966 ;;		None               void
 18967 ;; Registers used:
 18968 ;;		wreg, fsr1l, fsr1h
 18969 ;; Tracked objects:
 18970 ;;		On entry : 0/0
 18971 ;;		On exit  : 0/0
 18972 ;;		Unchanged: 0/0
 18973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18978 ;;Total ram usage:        1 bytes
 18979 ;; Hardware stack levels used:    1
 18980 ;; Hardware stack levels required when called:    4
 18981 ;; This function calls:
 18982 ;;		Nothing
 18983 ;; This function is called by:
 18984 ;;		_main
 18985 ;; This function uses a non-reentrant model
 18986 ;;
 18987                           
 18988                           
 18989                           ;psect for function _Buzzer_Initialization
 18990  27D4                     _Buzzer_Initialization:	
 18991                           
 18992                           ;Buzzer_B1.c: 12: Buz=&Buz1;
 18993                           
 18994                           ;incstack = 0
 18995                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 18996  27D4  303F               	movlw	_Buz1& (0+255)
 18997  27D5  0020               	movlb	0	; select bank0
 18998  27D6  00A0               	movwf	??_Buzzer_Initialization
 18999  27D7  0820               	movf	??_Buzzer_Initialization,w
 19000  27D8  00F8               	movwf	_Buz
 19001                           
 19002                           ;Buzzer_B1.c: 13: Buz->Enable=1;
 19003  27D9  0878               	movf	_Buz,w
 19004  27DA  0086               	movwf	6
 19005  27DB  3001               	movlw	1	; select bank2/3
 19006  27DC  0087               	movwf	7
 19007  27DD  1401               	bsf	1,0
 19008  27DE  0008               	return
 19009  27DF                     __end_of_Buzzer_Initialization:	
 19010                           
 19011                           	psect	intentry
 19012  0004                     __pintentry:	
 19013 ;; *************** function _ISR *****************
 19014 ;; Defined at:
 19015 ;;		line 56 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 19016 ;; Parameters:    Size  Location     Type
 19017 ;;		None
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;		None
 19020 ;; Return value:  Size  Location     Type
 19021 ;;		None               void
 19022 ;; Registers used:
 19023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : 0/0
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19031 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19032 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19033 ;;Total ram usage:        1 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    3
 19036 ;; This function calls:
 19037 ;;		_INT_ISR
 19038 ;;		_IOC_ISR
 19039 ;;		_TMR0_ISR
 19040 ;; This function is called by:
 19041 ;;		Interrupt level 1
 19042 ;; This function uses a non-reentrant model
 19043 ;;
 19044                           
 19045  0004                     _ISR:	
 19046                           
 19047                           ;incstack = 0
 19048                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19049  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19050  0005  3180               	pagesel	$
 19051  0006  0020               	movlb	0	; select bank0
 19052  0007  087F               	movf	127,w
 19053  0008  00F7               	movwf	??_ISR
 19054                           
 19055                           ;MCU_16f1518_B1.c: 58: IOC_ISR();
 19056  0009  319A  2231  3180   	fcall	_IOC_ISR
 19057                           
 19058                           ;MCU_16f1518_B1.c: 60: TMR0_ISR();
 19059  000C  3184  2428  3180   	fcall	_TMR0_ISR
 19060                           
 19061                           ;MCU_16f1518_B1.c: 62: ;;
 19062                           ;MCU_16f1518_B1.c: 66: INT_ISR();
 19063  000F  3198  209D         	fcall	_INT_ISR
 19064  0011  0877               	movf	??_ISR,w
 19065  0012  0020               	movlb	0	; select bank0
 19066  0013  00FF               	movwf	127
 19067  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 19068  0015  0009               	retfie
 19069  0016                     __end_of_ISR:	
 19070                           
 19071                           	psect	text128
 19072  0428                     __ptext128:	
 19073 ;; *************** function _TMR0_ISR *****************
 19074 ;; Defined at:
 19075 ;;		line 82 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 19076 ;; Parameters:    Size  Location     Type
 19077 ;;		None
 19078 ;; Auto vars:     Size  Location     Type
 19079 ;;		None
 19080 ;; Return value:  Size  Location     Type
 19081 ;;		None               void
 19082 ;; Registers used:
 19083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19084 ;; Tracked objects:
 19085 ;;		On entry : 0/0
 19086 ;;		On exit  : 0/0
 19087 ;;		Unchanged: 0/0
 19088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19091 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19092 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19093 ;;Total ram usage:        4 bytes
 19094 ;; Hardware stack levels used:    1
 19095 ;; Hardware stack levels required when called:    1
 19096 ;; This function calls:
 19097 ;;		i1_setLoad_StatusOff
 19098 ;; This function is called by:
 19099 ;;		_ISR
 19100 ;; This function uses a non-reentrant model
 19101 ;;
 19102                           
 19103                           
 19104                           ;psect for function _TMR0_ISR
 19105  0428                     _TMR0_ISR:	
 19106                           
 19107                           ;MCU_16f1518_B1.c: 84: if(TMR0IE && TMR0IF)
 19108                           
 19109                           ;incstack = 0
 19110                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19111  0428  1E8B               	btfss	11,5	;volatile
 19112  0429  0008               	return
 19113  042A  1D0B               	btfss	11,2	;volatile
 19114  042B  0008               	return
 19115                           
 19116                           ;MCU_16f1518_B1.c: 85: {
 19117                           ;MCU_16f1518_B1.c: 86: TMR0=(256-90);
 19118  042C  30A6               	movlw	166
 19119  042D  0020               	movlb	0	; select bank0
 19120  042E  0095               	movwf	21	;volatile
 19121                           
 19122                           ;MCU_16f1518_B1.c: 87: TMR0IF=0;
 19123  042F  110B               	bcf	11,2	;volatile
 19124                           
 19125                           ;MCU_16f1518_B1.c: 100: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLight
      +                          s11->Count >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count
      +                          =0; DimmerLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=0
      +                          ; RB4=0; i
 19126  0430  0879               	movf	_DimmerLights11,w
 19127  0431  0086               	movwf	6
 19128  0432  3001               	movlw	1	; select bank2/3
 19129  0433  0087               	movwf	7
 19130  0434  1C01               	btfss	1,0
 19131  0435  2CA6               	goto	i1l7613
 19132  0436  3001               	movlw	1
 19133  0437  00F3               	movwf	??_TMR0_ISR
 19134  0438  0879               	movf	_DimmerLights11,w
 19135  0439  3E03               	addlw	3
 19136  043A  0086               	movwf	6
 19137  043B  3001               	movlw	1	; select bank2/3
 19138  043C  0087               	movwf	7
 19139  043D  0873               	movf	??_TMR0_ISR,w
 19140  043E  0781               	addwf	1,f
 19141  043F  0021               	movlb	1	; select bank1
 19142  0440  0839               	movf	_Dimmer^(0+128),w
 19143  0441  3E02               	addlw	2
 19144  0442  0086               	movwf	6
 19145  0443  0187               	clrf	7
 19146  0444  0801               	movf	1,w
 19147  0445  00F3               	movwf	??_TMR0_ISR
 19148  0446  01F4               	clrf	??_TMR0_ISR+1
 19149  0447  09F3               	comf	??_TMR0_ISR,f
 19150  0448  09F4               	comf	??_TMR0_ISR+1,f
 19151  0449  0AF3               	incf	??_TMR0_ISR,f
 19152  044A  1903               	skipnz
 19153  044B  0AF4               	incf	??_TMR0_ISR+1,f
 19154  044C  0879               	movf	_DimmerLights11,w
 19155  044D  3E04               	addlw	4
 19156  044E  0086               	movwf	6
 19157  044F  3001               	movlw	1	; select bank2/3
 19158  0450  0087               	movwf	7
 19159  0451  0801               	movf	1,w
 19160  0452  0773               	addwf	??_TMR0_ISR,w
 19161  0453  00F5               	movwf	??_TMR0_ISR+2
 19162  0454  0874               	movf	??_TMR0_ISR+1,w
 19163  0455  1803               	skipnc
 19164  0456  0A74               	incf	??_TMR0_ISR+1,w
 19165  0457  00F6               	movwf	??_TMR0_ISR+3
 19166  0458  0879               	movf	_DimmerLights11,w
 19167  0459  3E03               	addlw	3
 19168  045A  0086               	movwf	6
 19169  045B  3001               	movlw	1	; select bank2/3
 19170  045C  0087               	movwf	7
 19171  045D  0876               	movf	??_TMR0_ISR+3,w
 19172  045E  3A80               	xorlw	128
 19173  045F  3C80               	sublw	128
 19174  0460  1D03               	skipz
 19175  0461  2C64               	goto	u675_25
 19176  0462  0875               	movf	??_TMR0_ISR+2,w
 19177  0463  0201               	subwf	1,w
 19178  0464                     u675_25:	
 19179  0464  1C03               	skipc
 19180  0465  2D7F               	goto	i1l7665
 19181  0466  0879               	movf	_DimmerLights11,w
 19182  0467  3E03               	addlw	3
 19183  0468  0086               	movwf	6
 19184  0469  3001               	movlw	1	; select bank2/3
 19185  046A  0087               	movwf	7
 19186  046B  0181               	clrf	1
 19187  046C  0879               	movf	_DimmerLights11,w
 19188  046D  0086               	movwf	6
 19189  046E  3001               	movlw	1	; select bank2/3
 19190  046F  0087               	movwf	7
 19191  0470  1001               	bcf	1,0
 19192  0471  0879               	movf	_DimmerLights11,w
 19193  0472  3E07               	addlw	7
 19194  0473  0086               	movwf	6
 19195  0474  3001               	movlw	1	; select bank2/3
 19196  0475  0087               	movwf	7
 19197  0476  1401               	bsf	1,0
 19198  0477  0879               	movf	_DimmerLights11,w
 19199  0478  0086               	movwf	6
 19200  0479  3001               	movlw	1	; select bank2/3
 19201  047A  0087               	movwf	7
 19202  047B  1F01               	btfss	1,6
 19203  047C  2D7F               	goto	i1l7665
 19204  047D  0020               	movlb	0	; select bank0
 19205  047E  138C               	bcf	12,7	;volatile
 19206  047F  120D               	bcf	13,4	;volatile
 19207  0480  0879               	movf	_DimmerLights11,w
 19208  0481  3E09               	addlw	9
 19209  0482  0086               	movwf	6
 19210  0483  3001               	movlw	1	; select bank2/3
 19211  0484  0087               	movwf	7
 19212  0485  1F01               	btfss	1,6
 19213  0486  2D7F               	goto	i1l7665
 19214  0487  0879               	movf	_DimmerLights11,w
 19215  0488  3E09               	addlw	9
 19216  0489  0086               	movwf	6
 19217  048A  3001               	movlw	1	; select bank2/3
 19218  048B  0087               	movwf	7
 19219  048C  1301               	bcf	1,6
 19220  048D  0879               	movf	_DimmerLights11,w
 19221  048E  0086               	movwf	6
 19222  048F  3001               	movlw	1	; select bank2/3
 19223  0490  0087               	movwf	7
 19224  0491  1301               	bcf	1,6
 19225  0492  118C               	bcf	12,3	;volatile
 19226  0493  138E               	bcf	14,7	;volatile
 19227  0494  0021               	movlb	1	; select bank1
 19228  0495  0839               	movf	_Dimmer^(0+128),w
 19229  0496  0086               	movwf	6
 19230  0497  0187               	clrf	7
 19231  0498  1401               	bsf	1,0
 19232  0499  0879               	movf	_DimmerLights11,w
 19233  049A  3E0C               	addlw	12
 19234  049B  0086               	movwf	6
 19235  049C  3001               	movlw	1	; select bank2/3
 19236  049D  0087               	movwf	7
 19237  049E  1401               	bsf	1,0
 19238  049F  01F1               	clrf	i1setLoad_StatusOff@command
 19239  04A0  0AF1               	incf	i1setLoad_StatusOff@command,f
 19240  04A1  3001               	movlw	1
 19241  04A2  319D  25C3  3184   	fcall	i1_setLoad_StatusOff
 19242  04A5  2D7F               	goto	i1l7665
 19243  04A6                     i1l7613:	
 19244  04A6  0879               	movf	_DimmerLights11,w
 19245  04A7  3E09               	addlw	9
 19246  04A8  0086               	movwf	6
 19247  04A9  3001               	movlw	1	; select bank2/3
 19248  04AA  0087               	movwf	7
 19249  04AB  1E81               	btfss	1,5
 19250  04AC  2CCB               	goto	i1l7623
 19251  04AD  3001               	movlw	1
 19252  04AE  00F3               	movwf	??_TMR0_ISR
 19253  04AF  0879               	movf	_DimmerLights11,w
 19254  04B0  3E03               	addlw	3
 19255  04B1  0086               	movwf	6
 19256  04B2  3001               	movlw	1	; select bank2/3
 19257  04B3  0087               	movwf	7
 19258  04B4  0873               	movf	??_TMR0_ISR,w
 19259  04B5  0781               	addwf	1,f
 19260  04B6  0879               	movf	_DimmerLights11,w
 19261  04B7  3E03               	addlw	3
 19262  04B8  0086               	movwf	6
 19263  04B9  3001               	movlw	1	; select bank2/3
 19264  04BA  0087               	movwf	7
 19265  04BB  3014               	movlw	20
 19266  04BC  0201               	subwf	1,w
 19267  04BD  1C03               	skipc
 19268  04BE  2CCB               	goto	i1l7623
 19269  04BF  0879               	movf	_DimmerLights11,w
 19270  04C0  3E03               	addlw	3
 19271  04C1  0086               	movwf	6
 19272  04C2  3001               	movlw	1	; select bank2/3
 19273  04C3  0087               	movwf	7
 19274  04C4  0181               	clrf	1
 19275  04C5  0879               	movf	_DimmerLights11,w
 19276  04C6  3E09               	addlw	9
 19277  04C7  0086               	movwf	6
 19278  04C8  3001               	movlw	1	; select bank2/3
 19279  04C9  0087               	movwf	7
 19280  04CA  1281               	bcf	1,5
 19281  04CB                     i1l7623:	
 19282  04CB  0879               	movf	_DimmerLights11,w
 19283  04CC  3E07               	addlw	7
 19284  04CD  0086               	movwf	6
 19285  04CE  3001               	movlw	1	; select bank2/3
 19286  04CF  0087               	movwf	7
 19287  04D0  1C01               	btfss	1,0
 19288  04D1  2D7F               	goto	i1l7665
 19289  04D2  0879               	movf	_DimmerLights11,w
 19290  04D3  3E07               	addlw	7
 19291  04D4  0086               	movwf	6
 19292  04D5  3001               	movlw	1	; select bank2/3
 19293  04D6  0087               	movwf	7
 19294  04D7  1001               	bcf	1,0
 19295  04D8  0879               	movf	_DimmerLights11,w
 19296  04D9  0086               	movwf	6
 19297  04DA  3001               	movlw	1	; select bank2/3
 19298  04DB  0087               	movwf	7
 19299  04DC  1C81               	btfss	1,1
 19300  04DD  2D7F               	goto	i1l7665
 19301  04DE  3001               	movlw	1
 19302  04DF  00F3               	movwf	??_TMR0_ISR
 19303  04E0  0A79               	incf	_DimmerLights11,w
 19304  04E1  0086               	movwf	6
 19305  04E2  3001               	movlw	1	; select bank2/3
 19306  04E3  0087               	movwf	7
 19307  04E4  0873               	movf	??_TMR0_ISR,w
 19308  04E5  0781               	addwf	1,f
 19309  04E6  0A79               	incf	_DimmerLights11,w
 19310  04E7  0086               	movwf	6
 19311  04E8  3001               	movlw	1	; select bank2/3
 19312  04E9  0087               	movwf	7
 19313  04EA  0879               	movf	_DimmerLights11,w
 19314  04EB  3E02               	addlw	2
 19315  04EC  0084               	movwf	4
 19316  04ED  3001               	movlw	1	; select bank2/3
 19317  04EE  0085               	movwf	5
 19318  04EF  0800               	movf	0,w
 19319  04F0  0201               	subwf	1,w
 19320  04F1  1C03               	skipc
 19321  04F2  2D7F               	goto	i1l7665
 19322  04F3  0A79               	incf	_DimmerLights11,w
 19323  04F4  0086               	movwf	6
 19324  04F5  3001               	movlw	1	; select bank2/3
 19325  04F6  0087               	movwf	7
 19326  04F7  0181               	clrf	1
 19327  04F8  0879               	movf	_DimmerLights11,w
 19328  04F9  0086               	movwf	6
 19329  04FA  3001               	movlw	1	; select bank2/3
 19330  04FB  0087               	movwf	7
 19331  04FC  1D81               	btfss	1,3
 19332  04FD  2D34               	goto	i1l7649
 19333  04FE  0879               	movf	_DimmerLights11,w
 19334  04FF  0086               	movwf	6
 19335  0500  3001               	movlw	1	; select bank2/3
 19336  0501  0087               	movwf	7
 19337  0502  1A01               	btfsc	1,4
 19338  0503  2D1D               	goto	i1l7643
 19339  0504  0879               	movf	_DimmerLights11,w
 19340  0505  3E04               	addlw	4
 19341  0506  0086               	movwf	6
 19342  0507  3001               	movlw	1	; select bank2/3
 19343  0508  0087               	movwf	7
 19344  0509  3061               	movlw	97
 19345  050A  0201               	subwf	1,w
 19346  050B  1803               	skipnc
 19347  050C  2D17               	goto	i1l7641
 19348  050D  3001               	movlw	1
 19349  050E  00F3               	movwf	??_TMR0_ISR
 19350  050F  0879               	movf	_DimmerLights11,w
 19351  0510  3E04               	addlw	4
 19352  0511  0086               	movwf	6
 19353  0512  3001               	movlw	1	; select bank2/3
 19354  0513  0087               	movwf	7
 19355  0514  0873               	movf	??_TMR0_ISR,w
 19356  0515  0781               	addwf	1,f
 19357  0516  2D7F               	goto	i1l7665
 19358  0517                     i1l7641:	
 19359  0517  0879               	movf	_DimmerLights11,w
 19360  0518  0086               	movwf	6
 19361  0519  3001               	movlw	1	; select bank2/3
 19362  051A  0087               	movwf	7
 19363  051B  1601               	bsf	1,4
 19364  051C  2D7F               	goto	i1l7665
 19365  051D                     i1l7643:	
 19366  051D  0879               	movf	_DimmerLights11,w
 19367  051E  3E04               	addlw	4
 19368  051F  0086               	movwf	6
 19369  0520  3001               	movlw	1	; select bank2/3
 19370  0521  0087               	movwf	7
 19371  0522  301F               	movlw	31
 19372  0523  0201               	subwf	1,w
 19373  0524  1C03               	skipc
 19374  0525  2D2E               	goto	i1l7647
 19375  0526  0879               	movf	_DimmerLights11,w
 19376  0527  3E04               	addlw	4
 19377  0528  0086               	movwf	6
 19378  0529  3001               	movlw	1	; select bank2/3
 19379  052A  0087               	movwf	7
 19380  052B  3001               	movlw	1
 19381  052C  0281               	subwf	1,f
 19382  052D  2D7F               	goto	i1l7665
 19383  052E                     i1l7647:	
 19384  052E  0879               	movf	_DimmerLights11,w
 19385  052F  0086               	movwf	6
 19386  0530  3001               	movlw	1	; select bank2/3
 19387  0531  0087               	movwf	7
 19388  0532  1201               	bcf	1,4
 19389  0533  2D7F               	goto	i1l7665
 19390  0534                     i1l7649:	
 19391  0534  0879               	movf	_DimmerLights11,w
 19392  0535  0086               	movwf	6
 19393  0536  3001               	movlw	1	; select bank2/3
 19394  0537  0087               	movwf	7
 19395  0538  1D01               	btfss	1,2
 19396  0539  2D7A               	goto	i1l7663
 19397  053A  0879               	movf	_DimmerLights11,w
 19398  053B  3E04               	addlw	4
 19399  053C  0086               	movwf	6
 19400  053D  3001               	movlw	1	; select bank2/3
 19401  053E  0087               	movwf	7
 19402  053F  0879               	movf	_DimmerLights11,w
 19403  0540  3E05               	addlw	5
 19404  0541  0084               	movwf	4
 19405  0542  3001               	movlw	1	; select bank2/3
 19406  0543  0085               	movwf	5
 19407  0544  0800               	movf	0,w
 19408  0545  0201               	subwf	1,w
 19409  0546  1803               	skipnc
 19410  0547  2D52               	goto	i1l7655
 19411  0548  3001               	movlw	1
 19412  0549  00F3               	movwf	??_TMR0_ISR
 19413  054A  0879               	movf	_DimmerLights11,w
 19414  054B  3E04               	addlw	4
 19415  054C  0086               	movwf	6
 19416  054D  3001               	movlw	1	; select bank2/3
 19417  054E  0087               	movwf	7
 19418  054F  0873               	movf	??_TMR0_ISR,w
 19419  0550  0781               	addwf	1,f
 19420  0551  2D67               	goto	i1l7659
 19421  0552                     i1l7655:	
 19422  0552  0879               	movf	_DimmerLights11,w
 19423  0553  3E05               	addlw	5
 19424  0554  0086               	movwf	6
 19425  0555  3001               	movlw	1	; select bank2/3
 19426  0556  0087               	movwf	7
 19427  0557  0879               	movf	_DimmerLights11,w
 19428  0558  3E04               	addlw	4
 19429  0559  0084               	movwf	4
 19430  055A  3001               	movlw	1	; select bank2/3
 19431  055B  0085               	movwf	5
 19432  055C  0800               	movf	0,w
 19433  055D  0201               	subwf	1,w
 19434  055E  1803               	skipnc
 19435  055F  2D67               	goto	i1l7659
 19436  0560  0879               	movf	_DimmerLights11,w
 19437  0561  3E04               	addlw	4
 19438  0562  0086               	movwf	6
 19439  0563  3001               	movlw	1	; select bank2/3
 19440  0564  0087               	movwf	7
 19441  0565  3001               	movlw	1
 19442  0566  0281               	subwf	1,f
 19443  0567                     i1l7659:	
 19444  0567  0879               	movf	_DimmerLights11,w
 19445  0568  3E05               	addlw	5
 19446  0569  0086               	movwf	6
 19447  056A  3001               	movlw	1	; select bank2/3
 19448  056B  0087               	movwf	7
 19449  056C  0879               	movf	_DimmerLights11,w
 19450  056D  3E04               	addlw	4
 19451  056E  0084               	movwf	4
 19452  056F  3001               	movlw	1	; select bank2/3
 19453  0570  0085               	movwf	5
 19454  0571  0800               	movf	0,w
 19455  0572  0601               	xorwf	1,w
 19456  0573  1D03               	skipz
 19457  0574  2D7F               	goto	i1l7665
 19458  0575  0879               	movf	_DimmerLights11,w
 19459  0576  0086               	movwf	6
 19460  0577  3001               	movlw	1	; select bank2/3
 19461  0578  0087               	movwf	7
 19462  0579  1101               	bcf	1,2
 19463  057A                     i1l7663:	
 19464  057A  0879               	movf	_DimmerLights11,w
 19465  057B  0086               	movwf	6
 19466  057C  3001               	movlw	1	; select bank2/3
 19467  057D  0087               	movwf	7
 19468  057E  1081               	bcf	1,1
 19469  057F                     i1l7665:	
 19470                           
 19471                           ;MCU_16f1518_B1.c: 113: Timer0->Count++;
 19472  057F  0021               	movlb	1	; select bank1
 19473  0580  0A6B               	incf	_Timer0^(0+128),w
 19474  0581  0086               	movwf	6
 19475  0582  0187               	clrf	7
 19476  0583  3001               	movlw	1
 19477  0584  0781               	addwf	1,f
 19478  0585  3141               	addfsr 1,1
 19479  0586  1803               	skipnc
 19480  0587  0A81               	incf	1,f
 19481                           
 19482                           ;MCU_16f1518_B1.c: 114: if(Timer0->Count == 200)
 19483  0588  0A6B               	incf	_Timer0^(0+128),w
 19484  0589  0086               	movwf	6
 19485  058A  0187               	clrf	7
 19486  058B  3F40               	moviw [0]fsr1
 19487  058C  3AC8               	xorlw	200
 19488  058D  1D03               	skipz
 19489  058E  2D91               	goto	u691_25
 19490  058F  3F41               	moviw [1]fsr1
 19491  0590  3A00               	xorlw	0
 19492  0591                     u691_25:	
 19493  0591  1D03               	skipz
 19494  0592  2D9E               	goto	i1l1525
 19495                           
 19496                           ;MCU_16f1518_B1.c: 115: {
 19497                           ;MCU_16f1518_B1.c: 116: Timer0->Count=0;
 19498  0593  0A6B               	incf	_Timer0^(0+128),w
 19499  0594  0086               	movwf	6
 19500  0595  0187               	clrf	7
 19501  0596  3000               	movlw	0
 19502  0597  3FC0               	movwi [0]fsr1
 19503  0598  3FC1               	movwi [1]fsr1
 19504                           
 19505                           ;MCU_16f1518_B1.c: 117: TMain->T0_Timerout=1;
 19506  0599  087D               	movf	_TMain,w
 19507  059A  0086               	movwf	6
 19508  059B  3001               	movlw	1	; select bank2/3
 19509  059C  0087               	movwf	7
 19510  059D  1481               	bsf	1,1
 19511  059E                     i1l1525:	
 19512                           
 19513                           ;MCU_16f1518_B1.c: 118: }
 19514                           ;MCU_16f1518_B1.c: 121: if(Buz->GO)
 19515  059E  0878               	movf	_Buz,w
 19516  059F  0086               	movwf	6
 19517  05A0  3001               	movlw	1	; select bank2/3
 19518  05A1  0087               	movwf	7
 19519  05A2  1C81               	btfss	1,1
 19520  05A3  0008               	return
 19521                           
 19522                           ;MCU_16f1518_B1.c: 122: {
 19523                           ;MCU_16f1518_B1.c: 123: Buz->Time++;
 19524  05A4  0A78               	incf	_Buz,w
 19525  05A5  0086               	movwf	6
 19526  05A6  3001               	movlw	1	; select bank2/3
 19527  05A7  0087               	movwf	7
 19528  05A8  3001               	movlw	1
 19529  05A9  0781               	addwf	1,f
 19530  05AA  3141               	addfsr 1,1
 19531  05AB  1803               	skipnc
 19532  05AC  0A81               	incf	1,f
 19533  05AD  0008               	return
 19534  05AE                     __end_of_TMR0_ISR:	
 19535                           
 19536                           	psect	text129
 19537  1DC3                     __ptext129:	
 19538 ;; *************** function i1_setLoad_StatusOff *****************
 19539 ;; Defined at:
 19540 ;;		line 284 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\OverLoad_B1.c"
 19541 ;; Parameters:    Size  Location     Type
 19542 ;;  lights          1    wreg     unsigned char 
 19543 ;;  command         1    0[COMMON] unsigned char 
 19544 ;; Auto vars:     Size  Location     Type
 19545 ;;  lights          1    1[COMMON] unsigned char 
 19546 ;; Return value:  Size  Location     Type
 19547 ;;		None               void
 19548 ;; Registers used:
 19549 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19550 ;; Tracked objects:
 19551 ;;		On entry : 0/0
 19552 ;;		On exit  : 0/0
 19553 ;;		Unchanged: 0/0
 19554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19555 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19559 ;;Total ram usage:        2 bytes
 19560 ;; Hardware stack levels used:    1
 19561 ;; This function calls:
 19562 ;;		Nothing
 19563 ;; This function is called by:
 19564 ;;		_TMR0_ISR
 19565 ;; This function uses a non-reentrant model
 19566 ;;
 19567                           
 19568                           
 19569                           ;psect for function i1_setLoad_StatusOff
 19570  1DC3                     i1_setLoad_StatusOff:	
 19571                           
 19572                           ;incstack = 0
 19573                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 19574                           ;i1setLoad_StatusOff@lights stored from wreg
 19575  1DC3  00F2               	movwf	i1setLoad_StatusOff@lights
 19576                           
 19577                           ;OverLoad_B1.c: 286: Load->StatusOff=command;
 19578  1DC4  0020               	movlb	0	; select bank0
 19579  1DC5  086E               	movf	_Load,w
 19580  1DC6  3E46               	addlw	70
 19581  1DC7  0086               	movwf	6
 19582  1DC8  3002               	movlw	2	; select bank4/5
 19583  1DC9  0087               	movwf	7
 19584  1DCA  0871               	movf	i1setLoad_StatusOff@command,w
 19585  1DCB  1081               	bcf	1,1
 19586  1DCC  1D03               	skipz
 19587  1DCD  1481               	bsf	1,1
 19588                           
 19589                           ;OverLoad_B1.c: 287: Load->SafeCount-=2;
 19590  1DCE  086E               	movf	_Load,w
 19591  1DCF  3E42               	addlw	66
 19592  1DD0  0086               	movwf	6
 19593  1DD1  3002               	movlw	2	; select bank4/5
 19594  1DD2  0087               	movwf	7
 19595  1DD3  3002               	movlw	2
 19596  1DD4  0281               	subwf	1,f
 19597                           
 19598                           ;OverLoad_B1.c: 288: if(lights == 1)
 19599  1DD5  0872               	movf	i1setLoad_StatusOff@lights,w
 19600  1DD6  3A01               	xorlw	1
 19601  1DD7  1D03               	skipz
 19602  1DD8  2DDF               	goto	i1l7175
 19603                           
 19604                           ;OverLoad_B1.c: 289: {
 19605                           ;OverLoad_B1.c: 290: Load->Lights1Status=0;
 19606  1DD9  086E               	movf	_Load,w
 19607  1DDA  3E43               	addlw	67
 19608  1DDB  0086               	movwf	6
 19609  1DDC  3002               	movlw	2	; select bank4/5
 19610  1DDD  0087               	movwf	7
 19611  1DDE  0181               	clrf	1
 19612  1DDF                     i1l7175:	
 19613                           
 19614                           ;OverLoad_B1.c: 291: }
 19615                           ;OverLoad_B1.c: 292: if(lights == 2)
 19616  1DDF  0872               	movf	i1setLoad_StatusOff@lights,w
 19617  1DE0  3A02               	xorlw	2
 19618  1DE1  1D03               	skipz
 19619  1DE2  2DE9               	goto	i1l7179
 19620                           
 19621                           ;OverLoad_B1.c: 293: {
 19622                           ;OverLoad_B1.c: 294: Load->Lights2Status=0;
 19623  1DE3  086E               	movf	_Load,w
 19624  1DE4  3E44               	addlw	68
 19625  1DE5  0086               	movwf	6
 19626  1DE6  3002               	movlw	2	; select bank4/5
 19627  1DE7  0087               	movwf	7
 19628  1DE8  0181               	clrf	1
 19629  1DE9                     i1l7179:	
 19630                           
 19631                           ;OverLoad_B1.c: 295: }
 19632                           ;OverLoad_B1.c: 296: if(lights == 3)
 19633  1DE9  0872               	movf	i1setLoad_StatusOff@lights,w
 19634  1DEA  3A03               	xorlw	3
 19635  1DEB  1D03               	skipz
 19636  1DEC  0008               	return
 19637                           
 19638                           ;OverLoad_B1.c: 297: {
 19639                           ;OverLoad_B1.c: 298: Load->Lights3Status=0;
 19640  1DED  086E               	movf	_Load,w
 19641  1DEE  3E45               	addlw	69
 19642  1DEF  0086               	movwf	6
 19643  1DF0  3002               	movlw	2	; select bank4/5
 19644  1DF1  0087               	movwf	7
 19645  1DF2  0181               	clrf	1
 19646  1DF3  0008               	return
 19647  1DF4                     __end_ofi1_setLoad_StatusOff:	
 19648                           
 19649                           	psect	text130
 19650  1A31                     __ptext130:	
 19651 ;; *************** function _IOC_ISR *****************
 19652 ;; Defined at:
 19653 ;;		line 285 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 19654 ;; Parameters:    Size  Location     Type
 19655 ;;		None
 19656 ;; Auto vars:     Size  Location     Type
 19657 ;;		None
 19658 ;; Return value:  Size  Location     Type
 19659 ;;		None               void
 19660 ;; Registers used:
 19661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19662 ;; Tracked objects:
 19663 ;;		On entry : 0/0
 19664 ;;		On exit  : 0/0
 19665 ;;		Unchanged: 0/0
 19666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19671 ;;Total ram usage:        0 bytes
 19672 ;; Hardware stack levels used:    1
 19673 ;; Hardware stack levels required when called:    1
 19674 ;; This function calls:
 19675 ;;		_setDimmerReClock
 19676 ;; This function is called by:
 19677 ;;		_ISR
 19678 ;; This function uses a non-reentrant model
 19679 ;;
 19680                           
 19681                           
 19682                           ;psect for function _IOC_ISR
 19683  1A31                     _IOC_ISR:	
 19684                           
 19685                           ;MCU_16f1518_B1.c: 287: if(IOCIE && IOCBF2)
 19686                           
 19687                           ;incstack = 0
 19688                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19689  1A31  1D8B               	btfss	11,3	;volatile
 19690  1A32  0008               	return
 19691  1A33  0027               	movlb	7	; select bank7
 19692  1A34  1D16               	btfss	22,2	;volatile
 19693  1A35  0008               	return
 19694                           
 19695                           ;MCU_16f1518_B1.c: 288: {
 19696                           ;MCU_16f1518_B1.c: 289: IOCBF2=0;
 19697  1A36  1116               	bcf	22,2	;volatile
 19698                           
 19699                           ;MCU_16f1518_B1.c: 290: IOCIF=0;
 19700  1A37  100B               	bcf	11,0	;volatile
 19701                           
 19702                           ;MCU_16f1518_B1.c: 291: if(TMain->PowerON)
 19703  1A38  087D               	movf	_TMain,w
 19704  1A39  0086               	movwf	6
 19705  1A3A  3001               	movlw	1	; select bank2/3
 19706  1A3B  0087               	movwf	7
 19707  1A3C  1C01               	btfss	1,0
 19708  1A3D  0008               	return
 19709                           
 19710                           ;MCU_16f1518_B1.c: 292: {
 19711                           ;MCU_16f1518_B1.c: 308: Dimmer->Correction=0;
 19712  1A3E  0021               	movlb	1	; select bank1
 19713  1A3F  0839               	movf	_Dimmer^(0+128),w
 19714  1A40  3E02               	addlw	2
 19715  1A41  0086               	movwf	6
 19716  1A42  0187               	clrf	7
 19717  1A43  0181               	clrf	1
 19718                           
 19719                           ;MCU_16f1518_B1.c: 309: setDimmerReClock();
 19720  1A44  319B  2313         	fcall	_setDimmerReClock
 19721  1A46  0008               	return
 19722  1A47                     __end_of_IOC_ISR:	
 19723                           
 19724                           	psect	text131
 19725  1B13                     __ptext131:	
 19726 ;; *************** function _setDimmerReClock *****************
 19727 ;; Defined at:
 19728 ;;		line 129 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 19729 ;; Parameters:    Size  Location     Type
 19730 ;;		None
 19731 ;; Auto vars:     Size  Location     Type
 19732 ;;		None
 19733 ;; Return value:  Size  Location     Type
 19734 ;;		None               void
 19735 ;; Registers used:
 19736 ;;		wreg, fsr1l, fsr1h
 19737 ;; Tracked objects:
 19738 ;;		On entry : 0/0
 19739 ;;		On exit  : 0/0
 19740 ;;		Unchanged: 0/0
 19741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19746 ;;Total ram usage:        0 bytes
 19747 ;; Hardware stack levels used:    1
 19748 ;; This function calls:
 19749 ;;		Nothing
 19750 ;; This function is called by:
 19751 ;;		_IOC_ISR
 19752 ;; This function uses a non-reentrant model
 19753 ;;
 19754                           
 19755                           
 19756                           ;psect for function _setDimmerReClock
 19757  1B13                     _setDimmerReClock:	
 19758                           
 19759                           ;MCU_16f1518_B1.c: 131: TMR0=255;
 19760                           
 19761                           ;incstack = 0
 19762                           ; Regs used in _setDimmerReClock: [wregfsr1]
 19763  1B13  30FF               	movlw	255
 19764  1B14  0020               	movlb	0	; select bank0
 19765  1B15  0095               	movwf	21	;volatile
 19766                           
 19767                           ;MCU_16f1518_B1.c: 143: if(!DimmerLights11->GO && !DimmerLights11->MosfetOpen)
 19768  1B16  0879               	movf	_DimmerLights11,w
 19769  1B17  0086               	movwf	6
 19770  1B18  3001               	movlw	1	; select bank2/3
 19771  1B19  0087               	movwf	7
 19772  1B1A  1801               	btfsc	1,0
 19773  1B1B  0008               	return
 19774  1B1C  0879               	movf	_DimmerLights11,w
 19775  1B1D  3E09               	addlw	9
 19776  1B1E  0086               	movwf	6
 19777  1B1F  3001               	movlw	1	; select bank2/3
 19778  1B20  0087               	movwf	7
 19779  1B21  1A81               	btfsc	1,5
 19780  1B22  0008               	return
 19781                           
 19782                           ;MCU_16f1518_B1.c: 144: {
 19783                           ;MCU_16f1518_B1.c: 145: DimmerLights11->GO=1;
 19784  1B23  0879               	movf	_DimmerLights11,w
 19785  1B24  0086               	movwf	6
 19786  1B25  3001               	movlw	1	; select bank2/3
 19787  1B26  0087               	movwf	7
 19788  1B27  1401               	bsf	1,0
 19789                           
 19790                           ;MCU_16f1518_B1.c: 146: if(DimmerLights11->StatusFlag)
 19791  1B28  0879               	movf	_DimmerLights11,w
 19792  1B29  0086               	movwf	6
 19793  1B2A  3001               	movlw	1	; select bank2/3
 19794  1B2B  0087               	movwf	7
 19795  1B2C  1F01               	btfss	1,6
 19796  1B2D  0008               	return
 19797                           
 19798                           ;MCU_16f1518_B1.c: 147: {
 19799                           ;MCU_16f1518_B1.c: 148: RA7=1;
 19800  1B2E  178C               	bsf	12,7	;volatile
 19801                           
 19802                           ;MCU_16f1518_B1.c: 149: RB4=1;
 19803  1B2F  160D               	bsf	13,4	;volatile
 19804  1B30  0008               	return
 19805  1B31                     __end_of_setDimmerReClock:	
 19806                           
 19807                           	psect	text132
 19808  189D                     __ptext132:	
 19809 ;; *************** function _INT_ISR *****************
 19810 ;; Defined at:
 19811 ;;		line 236 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\MCU_16f1518_B1.c"
 19812 ;; Parameters:    Size  Location     Type
 19813 ;;		None
 19814 ;; Auto vars:     Size  Location     Type
 19815 ;;		None
 19816 ;; Return value:  Size  Location     Type
 19817 ;;		None               void
 19818 ;; Registers used:
 19819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19820 ;; Tracked objects:
 19821 ;;		On entry : 0/0
 19822 ;;		On exit  : 0/0
 19823 ;;		Unchanged: 0/0
 19824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19829 ;;Total ram usage:        0 bytes
 19830 ;; Hardware stack levels used:    1
 19831 ;; Hardware stack levels required when called:    2
 19832 ;; This function calls:
 19833 ;;		_setRF_ReceiveGO
 19834 ;; This function is called by:
 19835 ;;		_ISR
 19836 ;; This function uses a non-reentrant model
 19837 ;;
 19838                           
 19839                           
 19840                           ;psect for function _INT_ISR
 19841  189D                     _INT_ISR:	
 19842                           
 19843                           ;MCU_16f1518_B1.c: 238: if(INTE && INTF)
 19844                           
 19845                           ;incstack = 0
 19846                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19847  189D  1E0B               	btfss	11,4	;volatile
 19848  189E  0008               	return
 19849  189F  1C8B               	btfss	11,1	;volatile
 19850  18A0  0008               	return
 19851                           
 19852                           ;MCU_16f1518_B1.c: 239: {
 19853                           ;MCU_16f1518_B1.c: 240: INTF=0;
 19854  18A1  108B               	bcf	11,1	;volatile
 19855                           
 19856                           ;MCU_16f1518_B1.c: 241: INTE=0;
 19857  18A2  120B               	bcf	11,4	;volatile
 19858                           
 19859                           ;MCU_16f1518_B1.c: 242: setRF_ReceiveGO(1,1);
 19860  18A3  01F3               	clrf	setRF_ReceiveGO@command
 19861  18A4  0AF3               	incf	setRF_ReceiveGO@command,f
 19862  18A5  3001               	movlw	1
 19863  18A6  3198  2091         	fcall	_setRF_ReceiveGO
 19864  18A8  0008               	return
 19865  18A9                     __end_of_INT_ISR:	
 19866                           
 19867                           	psect	text133
 19868  1891                     __ptext133:	
 19869 ;; *************** function _setRF_ReceiveGO *****************
 19870 ;; Defined at:
 19871 ;;		line 37 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 19872 ;; Parameters:    Size  Location     Type
 19873 ;;  rf              1    wreg     unsigned char 
 19874 ;;  command         1    2[COMMON] unsigned char 
 19875 ;; Auto vars:     Size  Location     Type
 19876 ;;  rf              1    3[COMMON] unsigned char 
 19877 ;; Return value:  Size  Location     Type
 19878 ;;		None               void
 19879 ;; Registers used:
 19880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19881 ;; Tracked objects:
 19882 ;;		On entry : 0/0
 19883 ;;		On exit  : 0/0
 19884 ;;		Unchanged: 0/0
 19885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19886 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19887 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19890 ;;Total ram usage:        2 bytes
 19891 ;; Hardware stack levels used:    1
 19892 ;; Hardware stack levels required when called:    1
 19893 ;; This function calls:
 19894 ;;		i1_RfPointSelect
 19895 ;; This function is called by:
 19896 ;;		_INT_ISR
 19897 ;; This function uses a non-reentrant model
 19898 ;;
 19899                           
 19900                           
 19901                           ;psect for function _setRF_ReceiveGO
 19902  1891                     _setRF_ReceiveGO:	
 19903                           
 19904                           ;incstack = 0
 19905                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19906                           ;setRF_ReceiveGO@rf stored from wreg
 19907  1891  00F4               	movwf	setRF_ReceiveGO@rf
 19908                           
 19909                           ;RF_Control_B1.c: 39: RfPointSelect(rf);
 19910  1892  0874               	movf	setRF_ReceiveGO@rf,w
 19911  1893  31A7  27CA         	fcall	i1_RfPointSelect
 19912                           
 19913                           ;RF_Control_B1.c: 40: RF->ReceiveGO=command;
 19914  1895  087B               	movf	_RF,w
 19915  1896  0086               	movwf	6
 19916  1897  0187               	clrf	7
 19917  1898  0873               	movf	setRF_ReceiveGO@command,w
 19918  1899  1081               	bcf	1,1
 19919  189A  1D03               	skipz
 19920  189B  1481               	bsf	1,1
 19921  189C  0008               	return
 19922  189D                     __end_of_setRF_ReceiveGO:	
 19923                           
 19924                           	psect	text134
 19925  27CA                     __ptext134:	
 19926 ;; *************** function i1_RfPointSelect *****************
 19927 ;; Defined at:
 19928 ;;		line 7 in file "C:\Users\taianluo\Documents\GitHub\myPicCode\Source_File\RF_Control_B1.c"
 19929 ;; Parameters:    Size  Location     Type
 19930 ;;  rf              1    wreg     unsigned char 
 19931 ;; Auto vars:     Size  Location     Type
 19932 ;;  rf              1    1[COMMON] unsigned char 
 19933 ;; Return value:  Size  Location     Type
 19934 ;;		None               void
 19935 ;; Registers used:
 19936 ;;		wreg
 19937 ;; Tracked objects:
 19938 ;;		On entry : 0/0
 19939 ;;		On exit  : 0/0
 19940 ;;		Unchanged: 0/0
 19941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19946 ;;Total ram usage:        2 bytes
 19947 ;; Hardware stack levels used:    1
 19948 ;; This function calls:
 19949 ;;		Nothing
 19950 ;; This function is called by:
 19951 ;;		_setRF_ReceiveGO
 19952 ;; This function uses a non-reentrant model
 19953 ;;
 19954                           
 19955                           
 19956                           ;psect for function i1_RfPointSelect
 19957  27CA                     i1_RfPointSelect:	
 19958                           
 19959                           ;incstack = 0
 19960                           ; Regs used in i1_RfPointSelect: [wreg]
 19961                           ;i1RfPointSelect@rf stored from wreg
 19962  27CA  00F2               	movwf	i1RfPointSelect@rf
 19963                           
 19964                           ;RF_Control_B1.c: 10: if(rf == 1)
 19965  27CB  0872               	movf	i1RfPointSelect@rf,w
 19966  27CC  3A01               	xorlw	1
 19967  27CD  1D03               	skipz
 19968  27CE  0008               	return
 19969                           
 19970                           ;RF_Control_B1.c: 11: {
 19971                           ;RF_Control_B1.c: 12: RF=&RF1;
 19972  27CF  30E7               	movlw	_RF1& (0+255)
 19973  27D0  00F1               	movwf	??i1_RfPointSelect
 19974  27D1  0871               	movf	??i1_RfPointSelect,w
 19975  27D2  00FB               	movwf	_RF
 19976  27D3  0008               	return
 19977  27D4                     __end_ofi1_RfPointSelect:	
 19978  007E                     btemp	set	126	;btemp
 19979  007E                     pic14e$flags	set	126
 19980  007E                     wtemp	set	126
 19981  007E                     wtemp0	set	126
 19982  0080                     wtemp1	set	128
 19983  0082                     wtemp2	set	130
 19984  0084                     wtemp3	set	132
 19985  0086                     wtemp4	set	134
 19986  0088                     wtemp5	set	136
 19987  007F                     wtemp6	set	127
 19988  007E                     ttemp	set	126
 19989  007E                     ttemp0	set	126
 19990  0081                     ttemp1	set	129
 19991  0084                     ttemp2	set	132
 19992  0087                     ttemp3	set	135
 19993  007F                     ttemp4	set	127
 19994  007E                     ltemp	set	126
 19995  007E                     ltemp0	set	126
 19996  0082                     ltemp1	set	130
 19997  0086                     ltemp2	set	134
 19998  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         242
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      76
    BANK2            80      0      52
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK1[8]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 7
		 -> NULL(NULL[0]), VarTimer0(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 16
		 -> NULL(NULL[0]), VarTMain(BANK2[16]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   98443
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                         _getLoad_AD
                   _getPowerFault_AD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     247
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     547
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21519
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21519
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9479
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     1     1      0    1115
                                              4 BANK0      1     1      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1255
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1255
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   28844
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   28844
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   27840
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1487
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26300
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10597
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     959
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6301
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6301
                                             13 BANK0      2     2      0
                       _getLoad_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6301
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    1864
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    7652
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6332
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     346
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4523
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2705
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1321
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1321
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10582
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10514
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1846
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1193
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9967
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9967
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setBuz                                               4     2      2    1434
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0       0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      34       9       65.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Sep 22 16:56:08 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0071  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 007A  
                                     _RD 0CA8                                       _RF 007B  
                __end_of_CC2500_WriteREG 1A8F                                       _WR 0CA9  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 18E5  
             _getDimmerLights_StatusFlag 18D9                      ___wmul@multiplicand 0022  
                 __end_of_setDelayOff_GO 1372                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
              __end_of_setLoad_StatusOff 1E25                     _setDimmerLights_Main 1717  
                           ___ftadd@sign 0048                                      l312 1DB7  
                                    l315 1DBD                                      l345 1A69  
                                    l346 1A6B                                      l284 1075  
                                    l381 1C1C                                      l357 1A7E  
                                    l285 107A                                      l375 1AE4  
                                    l295 1495                                      l279 104B  
                                    l288 107D                                      l369 198F  
                                    l299 14A6                                      l648 1D62  
                                    l844 1293                                      _GIE 005F  
                                    _CRC 00B7                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000C  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 00C4                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00BB  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E7                                      _ISR 0004  
        setPowerFault_Exceptions@command 002C                                      _Sw1 014B  
                                    _Buz 0078                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1A76           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 27D4                          __end_of_ADC_Set 27A8  
                        ?_DelayTimejudge 0071                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0AC6  
                  _setDimmerLights_ERROR 11B1                    _setDimmerLights_AdjRF 1BF4  
                  _setDimmerLights_AdjGo 19E7                    _setDimmerLights_Clear 19B7  
                                   ?_ISR 0071                          _PowerFault_Main 2752  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1A47  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l3033 1403                 ?_DimmerLightsPointSelect 0071  
                                   l2171 1F23                                     l3062 0796  
                                   l3039 141A                                     l2167 0FF9  
                                   l2426 1FA7                                     l1556 1A51  
                        __end_of_IOC_Set 1923                                     l1582 1D8C  
                                   l1761 1145                                     l2399 110E  
                                   l6201 1F95                                     l2594 2775  
                                   l2872 1B3A                                     l7201 0BC6  
                                   l6049 1E64                                     l5603 0762  
                                   l7213 0BFB                                     l5533 13E0  
                                   l6085 1B06                                     l5621 07A8  
                                   l5605 076C                                     l8021 09F7  
                                   l7207 0BEE                                     l5543 1408  
                                   l5535 13EA                                     l7151 1E95  
                                   l6087 1B0C                                     l5615 0788  
                                   l5607 0771                                     l8007 09BD  
                                   l7209 0BF4                                     l5545 1410  
                                   l5537 13EF                                     l5529 13D9  
                                   l7153 1EA1                                     l6345 105D  
                                   l5625 07BA                                     l5617 0792  
                                   l5609 0775                                     l5721 0D3E  
                                   l5705 0D1A                                     l8017 09E1  
                                   l5563 1B99                                     l5651 0C36  
                                   l8203 1015                                     l7163 1EBC  
                                   l8051 128A                                     l9011 01A8  
                                   l5635 07D5                                     l5811 1D5A  
                                   l5803 1D4E                                     l5645 0C20  
                                   l8053 128F                                     l9005 018C  
                                   l9013 01C0                                     l5717 0D36  
                                   l5709 0D22                                     l8133 1624  
                                   l7159 1EB3                                     l8047 1277  
                                   l5575 071F                                     l5807 1D54  
                                   l8127 1608                                     l5673 0C90  
                                   l5665 0C77                                     l5737 08AA  
                                   l5841 1BC7                                     l6801 1F76  
                                   l9033 0246                                     l5585 0735  
                                   l8137 162D                                     l5771 090F  
                                   l5763 08F5                                     l5755 08DA  
                                   l8227 1D72                                     l9051 028E  
                                   l5579 0726                                     l5765 08FE  
                                   l5757 08E8                                     l5837 1BBC  
                                   l8165 14B8                                     l5597 074F  
                                   l5693 0CDF                                     l9141 1455  
                                   l8191 1C2D                                     l5767 0901  
                                   l9039 025E                                     l8167 14D0  
                                   l5687 0CC9                                     l8343 124E  
                                   l8193 1C38                                     l5953 134B  
                                   l9145 1466                                     l9083 0359  
                                   l9059 02C6                                     l8611 0FB4  
                                   l8179 14E9                                     l5795 1D42  
                                   l5955 1358                                     l7813 17C4  
                                   l7901 13A4                                     l9077 0343  
                                   l5949 1345                                     l8277 1176  
                                   l8463 1744                                     l8551 1514  
                                   l9087 0366                                     l8623 0FEB  
                                   l8615 0FD1                                     l5799 1D48  
                                   l5959 1364                                     l8375 16F2  
                                   l7817 17E2                                     l7913 13C0  
                                   l8481 1782                                     l8545 14FD  
                                   l8625 0FF0                                     l8289 118C  
                                   l7931 1E4B                                     l8555 1554  
                                   l8643 092C                                     l7845 15B7  
                                   l7909 13BA                                     l7917 13C6  
                                   l8469 1756                                     l6797 1F6F  
                                   l8725 05F9                                     l8709 05C4  
                                   l7927 1E40                                     l7863 1E10  
                                   l8831 0EA3                                     l8591 0F55  
                                   l8671 096F                                     l8647 0933  
                                   l8735 062B                                     l7793 1B34  
                                   l8657 0950                                     l7883 1388  
                                   l7867 1E1A                                     l8907 0AC1  
                                   l7893 1398                                     l8589 0F4C  
                                   l8685 0995                                     l8669 096B  
                                   l8749 066F                                     l7879 1382  
                                   l7887 138E                                     l8935 167B  
                                   l8759 06A2                                     l7897 139E  
                                   l7969 0B2F                                     _CFGS 0CAE  
                                   l8891 0A82                                     l8957 1FF9  
                                   l8885 0A51                                     l8991 00F7  
                                   l8895 0A8A                                     l8985 00C9  
                                   l8969 007C                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 18A9                                     _LATC 010E  
                                   u4005 0D23                                     u4015 0D29  
                                   u4115 08DB                                     u4045 0D3F  
                                   u4055 0D45                                     u4145 08F6  
                                   u4085 08B1                                     u3615 1421  
                                   u3545 13E5                                     u6115 1E98  
                                   _PEIE 005E                                     u3565 13FE  
                                   _INTE 005C                                     u7110 1566  
                                   _INTF 0059                                     u6135 1EA2  
                                   u3735 0750                                     u6225 0B87  
                                   u3585 140B                                     u3905 0C58  
                                   u6145 1EAC                                     u3825 0789  
                                   u3915 0C78                                     u7115 1564  
                                   u6155 1EB4                                     u7045 1B3B  
                                   u3925 0C87                                     u3765 0763  
                                   u7055 1B40                                     u3935 0C91  
                                   u3795 0776                                     u7350 27BF  
                                   u3895 0C48                                     u3975 0CEB  
                                   u3985 0CFB                                     u8505 0A6C  
                                   u8605 1690                                     u7585 1C22  
                                   u8545 0AAD                                     u8715 0143  
                                   u8645 1FE0                                     u8575 1EF0  
                                   u8595 164F                                     u8765 01D8  
                                   _LWLO 0CAD                                     _RFSW 00BC  
                                   _TMR0 0015                          __end_of_INT_Set 2780  
                                   _RSSI 00BD                                     _WREN 0CAA  
                                   _Buz1 013F                                     _Load 006E  
                                   _main 1431                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 2752                      __end_of_DlyOff_Main 0891  
                        __end_of_RF_Main 2771                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1B13                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1EFE                      DelayTimejudge@value 0022  
                          _RfPointSelect 1870               __end_of_setRFSW_AdjControl 1FBD  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
            __size_of_setPowerFault_Main 00ED                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                       __end_of_LED_Main 1909                    ?_setDimmerLights_Main 0071  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 1A31  
                                  ?_main 0071                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 07ED                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 0CB2                          __end_of___ftmul 0D66  
                        __end_of___fttol 0918             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1EC3  
                 _setDimmerLights_Switch 1997            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EA                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0071                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0031  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _TMain 007D  
                          setRF_Learn@rf 0023                                    _MainT 1636  
                                  _Load1 0220                            __CFG_WRT$HALF 0000  
                       __end_of_TMR0_ISR 05AE             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1930                                    _getAD 1A47  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 12BB  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 19C7              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 0380  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0071                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 07FE                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 155C  
            __size_of_Flash_Memory_Write 002F                   ??_MainT_Initialization 0020  
                      ?_CC2500_SIDLEMode 0071               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0071                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0071                setDimmerLights_Main@clear 0065  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 12BB                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0071  
                      ??_Sw_DimmerOnFunc 0062                     __end_of_getLoad_Safe 1891  
                      ??_setPercentValue 0059                             __end_of_main 1493  
                    ?_setRF_DimmerLights 005D                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0B61  
                   _setSw_Initialization 19D7               __size_of_setLoad_StatusOff 0031  
                                 ??_main 006C                            ___fttol@sign1 0053  
                           ?_setLog_Code 0071                  _setControl_Lights_Table 15C7  
                 ?_Buzzer_Initialization 0071                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 2755                               _Receive_GO 0381  
                             _Receive_OK 0382                                ??_IOC_ISR 0071  
                 ?_setDimmerLights_ERROR 0071                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 27F5                                   ?_MainT 0071  
                 ?_setDimmerLights_AdjRF 0071                                ??_INT_ISR 0075  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 19D7                        i1RfPointSelect@rf 0072  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0818                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0071                        ?_getPowerFault_AD 0071  
                         setRF_Enable@rf 0023                         __end_of___awtoft 1BB0  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 1431  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 19A7  
                                 i1l1525 059E                                   i1l7175 1DDF  
                                 i1l7179 1DE9                                   i1l7613 04A6  
                                 i1l7623 04CB                                   i1l7641 0517  
                                 i1l7643 051D                                   i1l7655 0552  
                                 i1l7663 057A                                   i1l7647 052E  
                                 i1l7649 0534                                   i1l7665 057F  
                                 i1l7659 0567                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 _OSCCON 0099                       __size_of_Load_Main 03D9  
                                 u691_25 0591                                   u675_25 0464  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1AA8                       DelayTime_1us@count 0020  
                             _VarProduct 01C5                    _Dimmer_Initialization 278C  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1A1C  
                                 _Dimmer 00B9                                   _DlySw1 00D3  
            __size_of_setLoad_Exceptions 004A               __end_of_Mcu_Initialization 0818  
                    __end_of_Buzzer_Main 0C09                                   _Memory 007C  
                                 _Timer0 00EB       __end_of_setDimmerLights_TriggerAdj 1A07  
             _setDimmerLights_TriggerAdj 19F7            setDimmerLights_Switch@command 0022  
                                 ___wmul 1B31                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000C                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0071  
                              ??___lwdiv 0024                          i1_RfPointSelect 27CA  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C2                                   _s_data 00C3  
                                 _setLED 1372                         _DimmerLightsIntr 00BA  
                  ?_setSw_Initialization 0071                    setDimmerLights@status 0024  
                                 _setBuz 1789              __end_of_Load_Initialization 1916  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0071  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0023                    __end_of_SwPointSelect 2800  
                        ?_setLoad_Enable 0071                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 18C1  
           __size_of_Flash_Memory_Modify 0065              __size_of_DimmerLights_Close 001A  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 2775  
                      ?_Sw_DimmerAdjFunc 0071              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 1316  
       __end_of_CC2500_registers_address 182F     __end_of_setPowerFault_Initialization 193E  
  __size_of_setPowerFault_Initialization 000E             _setPowerFault_Initialization 1930  
                __end_of__initialization 004B              ??_PowerFault_Initialization 0021  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0071                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0071                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0071                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                            __end_of_MainT 16A6  
                             ___fttol@f1 004B                           __pcstackCOMMON 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 1B6E  
                          __end_of_getAD 1A5D                                ?_TMR0_ISR 0071  
                              ?_TMR0_Set 0071                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 18F1  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 005A  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0071  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                      __end_of_Load_Main 0428                         ?_PowerFault_Main 0071  
               __end_of_setDimmerReClock 1B31                       __size_of_getRxData 0052  
                    ?_LED_Initialization 0071                        ?_CC2500_WriteByte 0071  
                                ??_MainT 002A                           ??_setRF_Enable 0023  
                         _DimmerLights11 0079                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                     ??_CC2500_WriteByte 0020               ??_setPowerFault_Exceptions 002B  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006C  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                            _Buzzer_Main 0B61                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0071                                  ?_IO_Set 0071  
                             ??_LED_Main 0025                  _DelayOff_Initialization 2761  
                             __pnvCOMMON 007C                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0071                               _getPF_Safe 279A  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006C                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 27D4                      i1_setLoad_StatusOff 1DC3  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 000E                              setBuz@count 0029  
                             __pmaintext 1431                      _CC2500_WriteCommand 1987  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0073                               ??_TMR0_Set 0020  
                             _getLoad_AD 0A30                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0071  
                     __size_of_setTxData 00C5                  ?_setDimmerLights_Switch 0022  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 27A1                _PowerFault_Initialization 274F  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020             __end_of_setRF_Initialization 27AF  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1F7D  
                __end_of_RfSWPointSelect 18CD                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0071                                  _IOC_ISR 1A31  
                                _IOC_Set 1916                     __size_of_setLog_Code 0047  
                                _INT_ISR 189D                                  _INT_Set 277A  
                   ?_CC2500_WriteCommand 0071                        _Flash_Memory_Main 1FBD  
                      _Flash_Memory_Read 1A8F                   __size_of_CC2500_RxData 0064  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0071  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 1886  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 276D                       ?_Flash_Memory_Main 0071  
                     ?_Flash_Memory_Read 0071          __end_of_setControl_Lights_Table 1636  
                            ?_TouchPower 0071                          _Sw_DimmerOnFunc 1208  
                        _setPercentValue 1088                  ??_setLoad_AH_AL_Restore 0020  
                          setLog_Code@rf 002B                         ?_getPercentValue 0071  
                                _Dimmer1 00E4             __end_of_CC2500_FrequencyCabr 18B5  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00DC  
                                _VarLED2 00E0                        __end_of_getRxData 11B1  
             __end_of_setPowerFault_Main 1000                 _CC2500_registers_address 1800  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 19B7  
                                _Product 006F                     ??_setRFSW_AdjControl 0064  
         __end_of_setDimmerLights_Switch 19A7                                  ___ftadd 06F7  
                         ??_setSw_Enable 0022                                  ___ftdiv 0C09  
                        __size_of___wmul 001E                                  ___ftmul 0CB2  
                                ___fttol 0891                      __end_of_Switch_Main 2775  
                                ___lwdiv 1E8C                  ??_Buzzer_Initialization 0020  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0077  
                         ??_setSw_Status 0023                                  __ptext1 1EC3  
                                __ptext2 0A30                                  __ptext3 1A47  
                                __ptext4 2771                                  __ptext5 05AE  
                                __ptext6 194C                                  __ptext7 1208  
                                __ptext8 16A6                                  __ptext9 1C3D  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0072  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 2000  
              __end_of_Flash_Memory_Read 1AA8                               _setRF_Main 0918  
                          _DelayOff_Main 2765                        _DimmerLights_Main 2793  
                      __end_of_setINT_GO 27C1           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 27EA  
                      ??_setRF_ReceiveGO 0074               __end_of_CC2500_ClearRXFIFO 2759  
             __end_of_CC2500_ClearTXFIFO 275D            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0071                       ?_DimmerLights_Main 0071  
                         _LedPointSelect 1BB0                      _DelayOffPointSelect 18B5  
                                clrloop0 2787           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 27CA                     end_of_initialization 004B  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 187B  
                      _CC2500_InitSetREG 1C8A                            _DelayTime_1us 1C17  
                      __end_of_setTxData 0E2B               __end_of_Flash_Memory_Write 1D93  
                                init_ram 2780                       ?_CC2500_InitSetREG 0071  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 2781                               _setSw_Main 05AE  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1ADB  
                            ?_getPF_Safe 0071                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 07ED  
                          _CC2500_Enable 0380                         ?i1_RfPointSelect 0071  
                     ?_CC2500_ReadStatus 0071                         setRFSW_Status@sw 0023  
          __size_of_MainT_Initialization 000A                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 1493                            _CC2500_TxData 1044  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1CDE  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 003B            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0071                      _Flash_Memory_Modify 14F7  
                _DimmerLights_Exceptions 1261                              ?_getLoad_AD 0071  
                           __pstringtext 1800                      _Flash_Memory_Unlock 27AF  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0071  
                       _setLoad_StatusOn 1E25         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 279A  
                     _Mcu_Initialization 0801                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0071  
                       ?_RfSWPointSelect 0071                          _setSw_Main$4352 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1BD2  
                __end_of_Sw_DimmerOnFunc 1261                  __end_of_setPercentValue 10CE  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1CB4  
                    ?_Mcu_Initialization 0071         __end_of_setPowerFault_Exceptions 1F3D  
                   ?_Flash_Memory_Modify 0071              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1000  
                   ?_Flash_Memory_Unlock 0071                __end_of_CC2500_ReadStatus 1AF6  
                          ?_RF_RxDisable 0071               __end_of_setLoad_Exceptions 115F  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1AC1  
                   _setRF_Initialization 27A8                              _Switch_Main 2771  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0071                           ?_CC2500_TxData 0071  
                _DimmerLightsPointSelect 27EA                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1A07                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0026                     setRF_DimmerLights@on 005D  
                         __end_of___wmul 1B4F                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 0186                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0072                           __end_of_setLED 13D0  
                         __end_of_setBuz 1800                            _setLoad_Count 1A1C  
                   _CC2500_FrequencyCabr 18A9                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0043  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0071  
                        _setRFSW_Control 09A0                      __size_of_getPF_Safe 0007  
                      ?_setDimmerReClock 0071                      start_initialization 0018  
                      _setRF_DimmerValue 1E57                          ?_LedPointSelect 0071  
             __end_of_DimmerLights_Close 1ADB                                _Load_Main 004F  
                setLoad_StatusOff@lights 0021                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024             __size_of_Load_Initialization 000D  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0071  
                     ?_setRF_DimmerValue 0071               __end_of_CC2500_InitPATable 1B6E  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                            ?_setLoad_GO 0071                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1987                          RfPointSelect@rf 0021  
                    __size_of_getLoad_AD 0096                             ?_Buzzer_Main 0071  
                               ??_IO_Set 0020                                _VarErrLED 00D8  
                            ?_setSw_Main 0071                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0071                     __end_of_setSw_Status 1978  
                     Sw_DimmerAdjFunc@sw 0024                    ?_setRF_Initialization 0071  
              i1setLoad_StatusOff@lights 0072                                _VarMemory 01A0  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 187B  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 00CC  
              ??_DimmerLights_Exceptions 002A                                _Rx_Length 00BE  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                               ??___wmul 0024                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00C0                              __pdataBANK3 01C5  
                               ??_setLED 0023                                 ?_ADC_Set 0071  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0071  
                       _CC2500_SIDLEMode 275D               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 1E8C                    ?_CC2500_FrequencyCabr 0071  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0071                          _setRF_Main$4017 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0071  
                              ___latbits 0003                               ?_Load_Main 0071  
                               ?_INT_ISR 0071                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0071                            __pcstackBANK0 0020  
                               ?_INT_Set 0071                         ?_setPercentValue 0071  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 009B                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0071  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0130  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0023  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002A                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1BF4                  __size_of_setRF_RxStatus 000E  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
                              __pnvBANK1 00EB              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0071                      __size_of_setRF_Main 0088  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0026                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0071                         _getPowerFault_AD 1EC3  
      __size_of_setPowerFault_Exceptions 003F      __end_of_Flash_Memory_Initialization 0F13  
            _Flash_Memory_Initialization 0E2B                ?_setPowerFault_Exceptions 0071  
                              __ptext100 0C09                                __ptext101 1B8E  
                              __ptext110 2761                                __ptext102 13D0  
                              __ptext111 27DF                                __ptext103 195A  
                              __ptext120 1C17                                __ptext112 18B5  
                              __ptext104 18C1                                __ptext121 2759  
                              __ptext113 1A07                                __ptext105 19A7  
                              __ptext130 1A31                                __ptext122 2755  
                              __ptext114 275D                                __ptext106 1997  
                              __ptext131 1B13                                __ptext123 1987  
                              __ptext115 1D93                                __ptext107 27EA  
                              __ptext132 189D                                __ptext124 1A5D  
                              __ptext116 1C8A                                __ptext108 1789  
                              __ptext133 1891                                __ptext125 0B61  
                              __ptext117 1B4F                                __ptext109 1B31  
                               ?___ftadd 003E                                __ptext134 27CA  
                              __ptext126 27D4                                __ptext118 1A76  
                              __ptext119 18A9                                __ptext128 0428  
                              __ptext129 1DC3                                _getRxData 115F  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 0A30                          _setRF_ReceiveGO 1891  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 27DF  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002A                       __end_of_TouchPower 277A  
                     _setPowerFault_Main 0F13       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0021                      __size_of_setSw_Main 0149  
          __end_of_setDimmerLights_ERROR 1208             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1C17            __end_of_setDimmerLights_AdjGo 19F7  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 19C7                           __size_of_MainT 0070  
                              _r_address 00C1             __end_of_CC2500_patable_vaule 1866  
                    ?_setPowerFault_Main 0071                           __size_of_getAD 0016  
                           _setRF_Enable 1CB4                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002E                            _SwPointSelect 27F5  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 27B8  
                    __end_of_setLED_Main 1F7D                 __end_of_setLoad_StatusOn 1E57  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 18FD  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 2786                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0D66      __end_of_DimmerLights_Initialization 18D9  
            _DimmerLights_Initialization 18CD                       _CC2500_ClearRXFIFO 2755  
                     _CC2500_ClearTXFIFO 2759           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 195A                     ??_setPowerFault_Main 002D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0073              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1D64                               ?_getRxData 0071  
                               _TMR0_ISR 0428                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1DF4                        setRF_ReceiveGO@rf 0074  
                               _TMR0_Set 1923                         _Sw_DimmerAdjFunc 1C3D  
                    ?_CC2500_ClearRXFIFO 0071                      ?_CC2500_ClearTXFIFO 0071  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1C8A  
            __end_of_CC2500_WriteCommand 1997                   ??_CC2500_FrequencyCabr 0026  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0071                         _Sw_DimmerOffFunc 16A6  
           __end_of_MainT_Initialization 1870                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 000F                                 _DelayOff 00B8  
                           setSw_Main@sw 0068                              ??_Load_Main 002D  
                     __end_of_getPF_Safe 27A1                         __size_of_IOC_ISR 0016  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 18F1  
                         ?_SwPointSelect 0071                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 1115                    _DlyOff_Initialization 27DF  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0071  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0AC6  
                  _Switch_Initialization 27C1                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 195A  
                   __size_of_Buzzer_Main 00A8                               ?_setTxData 0071  
                           ?_Switch_Main 0071                         _CC2500_WriteByte 1A5D  
                               _VarTMain 0120                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 189D  
                      ??_PowerFault_Main 002F                        setRFSW_Control@sw 0063  
                    _Load_Initialization 1909                                setLED@led 0023  
                               _RxStatus 0383     __end_of_setDimmerLights_TriggerERROR 1D09  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1CDE  
                               _TxStatus 0386                       _setLoad_Exceptions 1115  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0071  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1978  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000A  
                               ___awtoft 1B8E                         ??_LedPointSelect 0020  
                               ___ftpack 13D0                             _setSw_Status 1969  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1F3D                      ?_setLoad_Exceptions 0071  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 15C7  
               ?_DelayOff_Initialization 0071                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0071  
                        ___lwdiv@counter 0027                                 __ptext10 19F7  
                               __ptext11 19E7                                 __ptext20 09A0  
                               __ptext12 27C1                                 __ptext21 1316  
                               __ptext13 19D7                                 __ptext30 1044  
                               __ptext22 1D36                                 __ptext14 2775  
                               __ptext31 1493                                 __ptext23 1F7D  
                               __ptext15 276D                                 __ptext40 1886  
                               __ptext32 193E                                 __ptext24 1E57  
                               __ptext16 0918                                 __ptext41 274F  
                               __ptext33 1ADB                                 __ptext25 1BF4  
                               __ptext17 115F                                 __ptext50 1636  
                               __ptext42 1930                                 __ptext34 1AF6  
                               __ptext26 12BB                                 __ptext18 10CE  
                               __ptext51 19C7                                 __ptext43 0801  
                               __ptext35 2769                                 __ptext27 0CB2  
                               __ptext19 15C7                                 __ptext60 19B7  
                               __ptext52 004F                                 __ptext44 1923  
                               __ptext36 27A8                                 __ptext28 06F7  
                               __ptext61 279A                                 __ptext53 1115  
                               __ptext45 1AA8                                 __ptext37 2752  
                               __ptext29 1C63                                 __ptext70 14F7  
                               __ptext62 1E8C                                 __ptext54 1978  
                               __ptext46 1916                                 __ptext38 0F13  
                               __ptext71 18E5                                 __ptext63 1909  
                               __ptext55 1CB4                                 __ptext47 277A  
                               __ptext39 1EFE                                 __ptext80 0AC6  
                               __ptext72 0E2B                                 __ptext64 1BD2  
                               __ptext56 27B8                                 __ptext48 27A1  
                               __ptext81 1E25                                 __ptext73 1D64  
                               __ptext65 18FD                                 __ptext57 1261  
                               __ptext49 1866                                 __ptext90 278C  
                               __ptext82 1A1C                                 __ptext74 27AF  
                               __ptext66 1F3D                                 __ptext58 1CDE  
                               __ptext91 2765                                 __ptext83 1372  
                               __ptext75 1A8F                                 __ptext67 18F1  
                               __ptext59 11B1                                 __ptext92 0818  
                               __ptext84 1BB0                                 __ptext76 2793  
                               __ptext68 07ED                                 __ptext93 0D66  
                               __ptext85 1AC1                                 __ptext77 1717  
                               __ptext69 1FBD                                 __ptext94 1870  
                               __ptext86 187B                                 __ptext78 1000  
                               __ptext95 1969                                 __ptext87 18D9  
                               __ptext79 1DF4                                 __ptext96 27F5  
                               __ptext88 18CD                                 __ptext97 155C  
                               __ptext89 1D09                                 __ptext98 1088  
                               __ptext99 0891                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000C  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1969  
          __end_of_Dimmer_Initialization 2793             __end_of_setDimmerLights_Main 1789  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0062  
                            _setRF_Learn 194C                 __end_of_CC2500_SIDLEMode 2761  
                         _setRF_RxStatus 193E               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 18C1               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1AC1                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 001E                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 1AF6                       _CC2500_InitPATable 1B4F  
    __size_of_getDimmerLights_StatusFlag 000C            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 09A0              __size_of_Mcu_Initialization 0017  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0071         setDimmerLights_TriggerAdj@lights 0023  
          ?_setDimmerLights_TriggerERROR 0022                      ?_CC2500_InitPATable 0071  
                        _CC2500_PowerRST 1D93                       __end_of_setLoad_GO 1886  
            __end_of_Flash_Memory_Modify 155C                        ??_getPercentValue 0059  
                            _setLog_Code 10CE                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 27B8                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1A76                       __end_of_setSw_Main 06F7  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_GO 0384                            _Transceive_OK 0385  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0071  
                         _DelayTimejudge 1D36                            ?_getLoad_Safe 0071  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 1EFE  
                   ??_DimmerLights_Close 0021                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0071  
                 __end_of_setRF_RxStatus 194C                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1D36  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1D09  
            __end_of_setDimmerLights_Adj 1044                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0073                   CC2500_InitPATable@temp 0026  
                   _MainT_Initialization 1866                    __size_of_RF_RxDisable 0027  
                      _RF_Initialization 2769                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                     _Flash_Memory_Erasing 18E5  
                     ?_RF_Initialization 0071                               _SPI0Buffer 00BF  
        __end_of_DelayOff_Initialization 2765                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 2769                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1316  
       __size_of_setControl_Lights_Table 006F                        _setLoad_StatusOff 1DF4  
                 __end_of_DelayTimejudge 1D64                   __size_of_RfPointSelect 000B  
                      ??i1_RfPointSelect 0071                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00E8                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 1C3D  
               __end_of_Sw_DimmerAdjFunc 1C63                  __end_of_CC2500_ReadByte 1B13  
           __end_of_setSw_Initialization 19E7                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 1C63  
             ?_PowerFault_Initialization 0071               __end_of_LED_Initialization 18FD  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
               __size_of_Sw_DimmerOnFunc 0059                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0071                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 276D  
               __end_of_Sw_DimmerOffFunc 1717                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0071                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 14F7                    __end_of_CC2500_TxData 1088  
                  _setLoad_AH_AL_Restore 1BD2                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1DC3  
